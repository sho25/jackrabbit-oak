begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|RepositoryFixture
import|;
end_import

begin_class
specifier|public
class|class
name|ReplicaCrashResilienceTest
extends|extends
name|Benchmark
block|{
specifier|private
specifier|static
specifier|final
name|String
name|LEVEL2POINTER
init|=
literal|"level2pointer"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LEVEL1POINTER
init|=
literal|"level1pointer"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WRITER_INFOS
init|=
literal|"writerInfos"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REPLICA_CRASH_TEST
init|=
literal|"replicaCrashTest-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|Iterable
argument_list|<
name|RepositoryFixture
argument_list|>
name|fixtures
parameter_list|)
block|{
for|for
control|(
name|RepositoryFixture
name|fixture
range|:
name|fixtures
control|)
block|{
if|if
condition|(
name|fixture
operator|.
name|isAvailable
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%s: ReplicaCrashResilienceTest%n"
argument_list|,
name|fixture
argument_list|)
expr_stmt|;
try|try
block|{
name|Repository
index|[]
name|cluster
init|=
name|fixture
operator|.
name|setUpCluster
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|run
argument_list|(
name|cluster
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fixture
operator|.
name|tearDownCluster
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|run
parameter_list|(
specifier|final
name|Repository
name|repository
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Setup..."
argument_list|)
expr_stmt|;
try|try
block|{
name|Session
name|session
init|=
name|repository
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Node
name|rootNode
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|rootNode
operator|.
name|hasNode
argument_list|(
name|REPLICA_CRASH_TEST
argument_list|)
condition|)
block|{
comment|// then cleanup first
name|rootNode
operator|.
name|getNode
argument_list|(
name|REPLICA_CRASH_TEST
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|session
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|replicaCrashTestNode
init|=
name|rootNode
operator|.
name|addNode
argument_list|(
name|REPLICA_CRASH_TEST
argument_list|)
decl_stmt|;
name|replicaCrashTestNode
operator|.
name|addNode
argument_list|(
name|WRITER_INFOS
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e1
parameter_list|)
block|{
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// this runnable will go ahead and start writing nodes to the repo
comment|// the structure is:
comment|// /replicaCrashTest/writerInfos
comment|//                           - level 1 pointer
comment|//                           - level 2 pointer
comment|// /replicaCrashTest/[1-n]/[1-1000]
name|Runnable
name|writer
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|level1Pointer
init|=
literal|1
decl_stmt|;
name|int
name|level2Pointer
init|=
literal|1
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
try|try
block|{
name|session
operator|=
name|repository
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Writer: Test start."
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
specifier|final
name|String
name|level1
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|level1Pointer
argument_list|)
decl_stmt|;
specifier|final
name|String
name|level2
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|level2Pointer
argument_list|)
decl_stmt|;
specifier|final
name|Node
name|rootNode
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
specifier|final
name|Node
name|replicaCrashTestNode
init|=
name|rootNode
operator|.
name|getNode
argument_list|(
name|REPLICA_CRASH_TEST
argument_list|)
decl_stmt|;
specifier|final
name|Node
name|writerInfosNode
init|=
name|replicaCrashTestNode
operator|.
name|getNode
argument_list|(
name|WRITER_INFOS
argument_list|)
decl_stmt|;
name|Node
name|level1Node
decl_stmt|;
if|if
condition|(
name|replicaCrashTestNode
operator|.
name|hasNode
argument_list|(
name|level1
argument_list|)
condition|)
block|{
name|level1Node
operator|=
name|replicaCrashTestNode
operator|.
name|getNode
argument_list|(
name|level1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|level1Node
operator|=
name|replicaCrashTestNode
operator|.
name|addNode
argument_list|(
name|level1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Writer: Created level1 node: "
operator|+
name|level1Node
argument_list|)
expr_stmt|;
block|}
name|Node
name|level2Node
init|=
name|level1Node
operator|.
name|addNode
argument_list|(
name|level2
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Writer: Created level2 node: "
operator|+
name|level2Node
argument_list|)
expr_stmt|;
name|writerInfosNode
operator|.
name|setProperty
argument_list|(
name|LEVEL1POINTER
argument_list|,
name|level1Pointer
argument_list|)
expr_stmt|;
name|writerInfosNode
operator|.
name|setProperty
argument_list|(
name|LEVEL2POINTER
argument_list|,
name|level2Pointer
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|UncheckedExecutionException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Got an UncheckedException (levels: "
operator|+
name|level1Pointer
operator|+
literal|"/"
operator|+
name|level2Pointer
operator|+
literal|") from the google cache probably: "
operator|+
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e2
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// yes, one should not catch Throwable - but this is a test only
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|++
name|level2Pointer
operator|>
literal|1000
condition|)
block|{
name|level2Pointer
operator|=
literal|1
expr_stmt|;
name|level1Pointer
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|Thread
name|th1
init|=
operator|new
name|Thread
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Launching writer..."
argument_list|)
expr_stmt|;
name|th1
operator|.
name|start
argument_list|()
expr_stmt|;
name|Runnable
name|reader
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|level1Pointer
init|=
literal|1
decl_stmt|;
name|long
name|level2Pointer
init|=
literal|1
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
try|try
block|{
name|session
operator|=
name|repository
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|rootNode
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Node
name|replicaCrashTestNode
init|=
name|rootNode
operator|.
name|getNode
argument_list|(
name|REPLICA_CRASH_TEST
argument_list|)
decl_stmt|;
name|Node
name|writerInfos
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
specifier|final
name|String
name|level1
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|level1Pointer
argument_list|)
decl_stmt|;
specifier|final
name|String
name|level2
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|level2Pointer
argument_list|)
decl_stmt|;
name|session
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|writerInfos
operator|=
name|replicaCrashTestNode
operator|.
name|getNode
argument_list|(
name|WRITER_INFOS
argument_list|)
expr_stmt|;
name|long
name|writerLevel1Pointer
init|=
name|writerInfos
operator|.
name|getProperty
argument_list|(
name|LEVEL1POINTER
argument_list|)
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|long
name|writerLevel2Pointer
init|=
name|writerInfos
operator|.
name|getProperty
argument_list|(
name|LEVEL2POINTER
argument_list|)
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|long
name|writerPointer
init|=
name|writerLevel1Pointer
operator|*
literal|1000
operator|+
name|writerLevel2Pointer
decl_stmt|;
name|long
name|myPointer
init|=
name|level1Pointer
operator|*
literal|1000
operator|+
name|level2Pointer
decl_stmt|;
name|long
name|diff
init|=
name|writerPointer
operator|-
name|myPointer
decl_stmt|;
if|if
condition|(
name|diff
operator|<
literal|100
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Reader: Closer than 100, waiting...level1="
operator|+
name|level1
operator|+
literal|", level2="
operator|+
name|level2
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|rootNode
operator|=
name|session
operator|.
name|getRootNode
argument_list|()
expr_stmt|;
name|replicaCrashTestNode
operator|=
name|rootNode
operator|.
name|getNode
argument_list|(
name|REPLICA_CRASH_TEST
argument_list|)
expr_stmt|;
name|Node
name|level1Node
init|=
name|replicaCrashTestNode
operator|.
name|getNode
argument_list|(
name|level1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|level1Node
operator|.
name|hasNode
argument_list|(
name|level2
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Reader: NOT FOUND: level1="
operator|+
name|level1
operator|+
literal|", level2="
operator|+
name|level2
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|session
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Reader: Reverifying once..."
argument_list|)
expr_stmt|;
name|rootNode
operator|=
name|session
operator|.
name|getRootNode
argument_list|()
expr_stmt|;
name|replicaCrashTestNode
operator|=
name|rootNode
operator|.
name|getNode
argument_list|(
name|REPLICA_CRASH_TEST
argument_list|)
expr_stmt|;
name|level1Node
operator|=
name|replicaCrashTestNode
operator|.
name|getNode
argument_list|(
name|level1
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|hasNode
init|=
name|level1Node
operator|.
name|hasNode
argument_list|(
name|level2
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasNode
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Reader: yup, exists: "
operator|+
name|hasNode
operator|+
literal|", level1="
operator|+
name|level1
operator|+
literal|", level2="
operator|+
name|level2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Reader: not found: level1="
operator|+
name|level1
operator|+
literal|", level2="
operator|+
name|level2
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// read it
name|Node
name|level2Node
init|=
name|level1Node
operator|.
name|getNode
argument_list|(
name|level2
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Reader: verified level1="
operator|+
name|level1
operator|+
literal|", level2="
operator|+
name|level2
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|UncheckedExecutionException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Got an UncheckedException from the google cache probably: "
operator|+
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e2
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// yes, one should not catch Throwable - but this is a test only
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|++
name|level2Pointer
operator|>
literal|1000
condition|)
block|{
name|level2Pointer
operator|=
literal|1
expr_stmt|;
name|level1Pointer
operator|++
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e1
parameter_list|)
block|{
name|e1
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Test start."
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Thread
name|th2
init|=
operator|new
name|Thread
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|th2
operator|.
name|start
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Waiting for writer to finish..."
argument_list|)
expr_stmt|;
name|th1
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

