begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|MISSING_NODE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|MoveValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * {@link Filter filter} and report changes between node states to the {@link Listener}.  */
end_comment

begin_class
specifier|public
class|class
name|EventGenerator
implements|implements
name|MoveValidator
block|{
specifier|private
specifier|final
name|Filter
name|filter
decl_stmt|;
specifier|private
specifier|final
name|Listener
name|listener
decl_stmt|;
comment|/**      * Filter for determining what changes to report the the {@link Listener}.      */
specifier|public
interface|interface
name|Filter
block|{
comment|/**          * Include an added property          * @param after  added property          * @return  {@code true} if the property should be included          */
name|boolean
name|includeAdd
parameter_list|(
name|PropertyState
name|after
parameter_list|)
function_decl|;
comment|/**          * Include a changed property          * @param before  property before the change          * @param after  property after the change          * @return  {@code true} if the property should be included          */
name|boolean
name|includeChange
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
function_decl|;
comment|/**          * Include a deleted property          * @param before  deleted property          * @return  {@code true} if the property should be included          */
name|boolean
name|includeDelete
parameter_list|(
name|PropertyState
name|before
parameter_list|)
function_decl|;
comment|/**          * Include an added node          * @param name name of the node          * @param after  added node          * @return  {@code true} if the node should be included          */
name|boolean
name|includeAdd
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
function_decl|;
comment|/**          * Include a changed node          * @param name name of the node          * @param before node before the change          * @param after  node after the change          * @return  {@code true} if the node should be included          */
name|boolean
name|includeChange
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
function_decl|;
comment|/**          * Include a deleted node          * @param name name of the node          * @param before deleted node          * @return  {@code true} if the node should be included          */
name|boolean
name|includeDelete
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
function_decl|;
comment|/**          * Include a moved node          * @param sourcePath  source path of the move operation          * @param name        name of the moved node          * @param moved       the moved node          * @return  {@code true} if the node should be included          */
name|boolean
name|includeMove
parameter_list|(
name|String
name|sourcePath
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|moved
parameter_list|)
function_decl|;
comment|/**          * Factory for creating a filter instance for the given child node          * @param name  name of the child node          * @param before  before state of the child node          * @param after  after state of the child node          * @return  filter instance for filtering the child node or {@code null} to          *          exclude the sub tree rooted at this child node.          */
annotation|@
name|CheckForNull
name|Filter
name|create
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
function_decl|;
block|}
comment|/**      * Listener for listening to changes.      */
specifier|public
interface|interface
name|Listener
block|{
comment|/**          * Notification for an added property          * @param after  added property          */
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
function_decl|;
comment|/**          * Notification for a changed property          * @param before  property before the change          * @param after  property after the change          */
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
function_decl|;
comment|/**          * Notification for a deleted property          * @param before  deleted property          */
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
function_decl|;
comment|/**          * Notification for an added node          * @param name  name of the node          * @param after  added node          */
name|void
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
function_decl|;
comment|/**          * Notification for a changed node          * @param name  name of the node          * @param before  node before the change          * @param after  node after the change          */
name|void
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
function_decl|;
comment|/**          * Notification for a deleted node          * @param name  name of the deleted node          * @param before  deleted node          */
name|void
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
function_decl|;
comment|/**          * Notification for a moved node          * @param sourcePath  source of the moved node          * @param name        name of the moved node          * @param moved       moved node          */
name|void
name|nodeMoved
parameter_list|(
name|String
name|sourcePath
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|moved
parameter_list|)
function_decl|;
comment|/**          * Factory for creating a filter instance for the given child node          * @param name name of the child node          * @param before  before state of the child node          * @param after  after state of the child node          * @return  listener for the child node          */
annotation|@
name|Nonnull
name|Listener
name|create
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
function_decl|;
block|}
comment|/**      * Create a new instance of a {@code EventGenerator} reporting events to the      * passed {@code listener} after filtering with the passed {@code filter}.      * @param filter  filter for filtering changes      * @param listener  listener for listening to the filtered changes      */
specifier|public
name|EventGenerator
parameter_list|(
annotation|@
name|Nonnull
name|Filter
name|filter
parameter_list|,
annotation|@
name|Nonnull
name|Listener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|filter
operator|=
name|checkNotNull
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|checkNotNull
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|move
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|sourcePath
parameter_list|,
name|NodeState
name|moved
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|filter
operator|.
name|includeMove
argument_list|(
name|sourcePath
argument_list|,
name|name
argument_list|,
name|moved
argument_list|)
condition|)
block|{
name|listener
operator|.
name|nodeMoved
argument_list|(
name|sourcePath
argument_list|,
name|name
argument_list|,
name|moved
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|enter
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|leave
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|filter
operator|.
name|includeAdd
argument_list|(
name|after
argument_list|)
condition|)
block|{
name|listener
operator|.
name|propertyAdded
argument_list|(
name|after
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|filter
operator|.
name|includeChange
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
condition|)
block|{
name|listener
operator|.
name|propertyChanged
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|filter
operator|.
name|includeDelete
argument_list|(
name|before
argument_list|)
condition|)
block|{
name|listener
operator|.
name|propertyDeleted
argument_list|(
name|before
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MoveValidator
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|filter
operator|.
name|includeAdd
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
condition|)
block|{
name|listener
operator|.
name|childNodeAdded
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
return|return
name|createChildGenerator
argument_list|(
name|name
argument_list|,
name|MISSING_NODE
argument_list|,
name|after
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MoveValidator
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|filter
operator|.
name|includeChange
argument_list|(
name|name
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
condition|)
block|{
name|listener
operator|.
name|childNodeChanged
argument_list|(
name|name
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
return|return
name|createChildGenerator
argument_list|(
name|name
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MoveValidator
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|filter
operator|.
name|includeDelete
argument_list|(
name|name
argument_list|,
name|before
argument_list|)
condition|)
block|{
name|listener
operator|.
name|childNodeDeleted
argument_list|(
name|name
argument_list|,
name|before
argument_list|)
expr_stmt|;
block|}
return|return
name|createChildGenerator
argument_list|(
name|name
argument_list|,
name|before
argument_list|,
name|MISSING_NODE
argument_list|)
return|;
block|}
comment|/**      * Factory method for creating {@code EventGenerator} instances of child nodes.      * @param name  name of the child node      * @param before  before state of the child node      * @param after  after state of the child node      * @return {@code EventGenerator} for a child node      */
specifier|protected
name|EventGenerator
name|createChildGenerator
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|Filter
name|childFilter
init|=
name|filter
operator|.
name|create
argument_list|(
name|name
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
decl_stmt|;
if|if
condition|(
name|childFilter
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|EventGenerator
argument_list|(
name|childFilter
argument_list|,
name|listener
operator|.
name|create
argument_list|(
name|name
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

