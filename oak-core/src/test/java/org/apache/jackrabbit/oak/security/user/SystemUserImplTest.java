begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|UnsupportedRepositoryOperationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|ImpersonationCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|SystemUserPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserIdCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|action
operator|.
name|AccessControlAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|action
operator|.
name|AuthorizableAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|action
operator|.
name|AuthorizableActionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Implementation specific test wrt system users.  */
end_comment

begin_class
specifier|public
class|class
name|SystemUserImplTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
name|UserManager
name|userMgr
decl_stmt|;
specifier|private
name|String
name|uid
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|userMgr
operator|=
name|getUserManager
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|uid
operator|=
literal|"testUser"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|User
name|user
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|uid
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|user
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|ConfigurationParameters
name|getSecurityConfigParameters
parameter_list|()
block|{
return|return
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|UserConfiguration
operator|.
name|NAME
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|UserConstants
operator|.
name|PARAM_AUTHORIZABLE_ACTION_PROVIDER
argument_list|,
operator|new
name|AuthorizableActionProvider
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|AuthorizableAction
argument_list|>
name|getAuthorizableActions
parameter_list|(
annotation|@
name|Nonnull
name|SecurityProvider
name|securityProvider
parameter_list|)
block|{
name|AuthorizableAction
name|action
init|=
operator|new
name|AccessControlAction
argument_list|()
decl_stmt|;
name|action
operator|.
name|init
argument_list|(
name|securityProvider
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|AccessControlAction
operator|.
name|USER_PRIVILEGE_NAMES
argument_list|,
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_ALL
block|}
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|action
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|User
name|createUser
parameter_list|(
annotation|@
name|Nullable
name|String
name|intermediatePath
parameter_list|)
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|userMgr
operator|.
name|createSystemUser
argument_list|(
name|uid
argument_list|,
name|intermediatePath
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|user
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSystemUser
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|createUser
argument_list|(
literal|null
argument_list|)
operator|instanceof
name|SystemUserImpl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsSystemUser
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|createUser
argument_list|(
literal|null
argument_list|)
operator|.
name|isSystemUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSystemUserTree
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
name|createUser
argument_list|(
literal|null
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|t
operator|.
name|hasProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PASSWORD
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UserConstants
operator|.
name|NT_REP_SYSTEM_USER
argument_list|,
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCheckValidTree
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|testUser
init|=
name|getTestUser
argument_list|()
decl_stmt|;
operator|new
name|SystemUserImpl
argument_list|(
name|testUser
operator|.
name|getID
argument_list|()
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|testUser
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
operator|(
name|UserManagerImpl
operator|)
name|userMgr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetCredentials
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|createUser
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Credentials
name|creds
init|=
name|user
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|creds
operator|instanceof
name|UserIdCredentials
argument_list|)
expr_stmt|;
name|UserIdCredentials
name|impl
init|=
operator|(
name|UserIdCredentials
operator|)
name|creds
decl_stmt|;
name|assertEquals
argument_list|(
name|uid
argument_list|,
name|impl
operator|.
name|getUserId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasNoPassword
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|createUser
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Tree
name|userTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|userTree
operator|.
name|hasProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PASSWORD
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedRepositoryOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testChangePassword
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|createUser
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|user
operator|.
name|changePassword
argument_list|(
literal|"pw"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedRepositoryOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testChangePassword2
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|createUser
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|user
operator|.
name|changePassword
argument_list|(
literal|"pw"
argument_list|,
literal|"newPw"
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since OAK 1.0 In contrast to Jackrabbit core the intermediate path may      * not be an absolute path in OAK.      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConstraintViolationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateUserWithAbsolutePath
parameter_list|()
throws|throws
name|Exception
block|{
name|createUser
argument_list|(
literal|"/any/path/to/the/new/user"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConstraintViolationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateUserWithAbsolutePath2
parameter_list|()
throws|throws
name|Exception
block|{
name|createUser
argument_list|(
name|UserConstants
operator|.
name|DEFAULT_USER_PATH
operator|+
literal|"/any/path/to/the/new/user"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateUserWithAbsolutePath3
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|userRoot
init|=
name|UserConstants
operator|.
name|DEFAULT_USER_PATH
operator|+
literal|'/'
operator|+
name|UserConstants
operator|.
name|DEFAULT_SYSTEM_RELATIVE_PATH
decl_stmt|;
name|String
name|path
init|=
name|userRoot
operator|+
literal|"/any/path/to/the/new/user"
decl_stmt|;
name|assertTrue
argument_list|(
name|createUser
argument_list|(
name|path
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|startsWith
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConstraintViolationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateUserWithRelativePath
parameter_list|()
throws|throws
name|Exception
block|{
name|createUser
argument_list|(
literal|"any/path"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateUserWithRelativePath2
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|createUser
argument_list|(
name|UserConstants
operator|.
name|DEFAULT_SYSTEM_RELATIVE_PATH
operator|+
literal|"/any/path"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
operator|.
name|contains
argument_list|(
literal|"any/path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSystemUserWithOtherPath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
name|UserConstants
operator|.
name|DEFAULT_USER_PATH
argument_list|)
decl_stmt|;
name|NodeUtil
name|systemUserTree
init|=
operator|new
name|NodeUtil
argument_list|(
name|t
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"systemUser"
argument_list|,
name|UserConstants
operator|.
name|NT_REP_SYSTEM_USER
argument_list|)
decl_stmt|;
name|systemUserTree
operator|.
name|setString
argument_list|(
name|UserConstants
operator|.
name|REP_PRINCIPAL_NAME
argument_list|,
literal|"systemUser"
argument_list|)
expr_stmt|;
name|systemUserTree
operator|.
name|setString
argument_list|(
name|UserConstants
operator|.
name|REP_AUTHORIZABLE_ID
argument_list|,
literal|"systemUser"
argument_list|)
expr_stmt|;
name|path
operator|=
name|systemUserTree
operator|.
name|getTree
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
comment|// success
name|assertTrue
argument_list|(
name|e
operator|.
name|isConstraintViolation
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|exists
argument_list|()
condition|)
block|{
name|t
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoginAsSystemUser
parameter_list|()
throws|throws
name|Exception
block|{
name|createUser
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|uid
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoginAsSystemUser2
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|createUser
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|login
argument_list|(
name|user
operator|.
name|getCredentials
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImpersonateSystemUser
parameter_list|()
throws|throws
name|Exception
block|{
name|createUser
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|ImpersonationCredentials
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|uid
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|adminSession
operator|.
name|getAuthInfo
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|cs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImpersonateDisabledSystemUser
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|createUser
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|user
operator|.
name|disable
argument_list|(
literal|"disabled"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
try|try
block|{
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|ImpersonationCredentials
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|uid
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|adminSession
operator|.
name|getAuthInfo
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|cs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|createUser
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
operator|instanceof
name|SystemUserPrincipal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddToGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|createUser
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Group
name|g
init|=
literal|null
decl_stmt|;
try|try
block|{
name|g
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
literal|"testGroup"
argument_list|)
expr_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|g
operator|.
name|isMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|g
operator|.
name|isDeclaredMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|isMemberOfG
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|Group
argument_list|>
name|groups
init|=
name|user
operator|.
name|declaredMemberOf
argument_list|()
decl_stmt|;
while|while
condition|(
name|groups
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|isMemberOfG
condition|)
block|{
if|if
condition|(
name|g
operator|.
name|getID
argument_list|()
operator|.
name|equals
argument_list|(
name|groups
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
condition|)
block|{
name|isMemberOfG
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|isMemberOfG
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|g
operator|!=
literal|null
condition|)
block|{
name|g
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Test asserting that {@link AuthorizableAction#onCreate(User, String, Root, NamePathMapper)}      * is omitted upon calling {@link UserManager#createSystemUser(String, String)}.      */
annotation|@
name|Test
specifier|public
name|void
name|testOnCreateOmitted
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|createUser
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|t
operator|.
name|hasChild
argument_list|(
name|AccessControlConstants
operator|.
name|REP_POLICY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

