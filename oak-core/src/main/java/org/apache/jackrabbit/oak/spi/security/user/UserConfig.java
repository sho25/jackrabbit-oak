begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|action
operator|.
name|AuthorizableAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * UserConfig provides utilities to retrieve configuration options  * related to user management. In addition it defines some constants that  * have been used in Jackrabbit 2.0 default user management implementation.  */
end_comment

begin_class
specifier|public
class|class
name|UserConfig
extends|extends
name|ConfigurationParameters
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UserConfig
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Configuration option defining the ID of the administrator user.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_ADMIN_ID
init|=
literal|"adminId"
decl_stmt|;
comment|/**      * Configuration option defining the ID of the anonymous user. The ID      * might be {@code null} of no anonymous user exists. In this case      * Session#getUserID() may return {@code null} if it has been obtained      * using {@link javax.jcr.GuestCredentials}.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_ANONYMOUS_ID
init|=
literal|"anonymousId"
decl_stmt|;
comment|/**      * Configuration option to define the path underneath which user nodes      * are being created.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_USER_PATH
init|=
literal|"usersPath"
decl_stmt|;
comment|/**      * Configuration option to define the path underneath which group nodes      * are being created.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_GROUP_PATH
init|=
literal|"groupsPath"
decl_stmt|;
comment|/**      * Parameter used to change the number of levels that are used by default      * store authorizable nodes.<br>The default number of levels is 2.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_DEFAULT_DEPTH
init|=
literal|"defaultDepth"
decl_stmt|;
comment|/**      * Its value determines the maximum number of members within a given      * content structure until additional intermediate structuring is being      * added. This may for example be used to      *<ul>      *<li>switch storing group members in JCR properties or nodes</li>      *<li>define maximum number of members is a multivalued property</li>      *<li>define maximum number of member properties within a given      *     node structure</li>      *</ul>      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_GROUP_MEMBERSHIP_SPLIT_SIZE
init|=
literal|"groupMembershipSplitSize"
decl_stmt|;
comment|/**      * Configuration parameter to change the default algorithm used to generate      * password hashes.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_PASSWORD_HASH_ALGORITHM
init|=
literal|"passwordHashAlgorithm"
decl_stmt|;
comment|/**      * Configuration parameter to change the number of iterations used for      * password hash generation.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_PASSWORD_HASH_ITERATIONS
init|=
literal|"passwordHashIterations"
decl_stmt|;
comment|/**      * Configuration parameter to change the number of iterations used for      * password hash generation.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_PASSWORD_SALT_SIZE
init|=
literal|"passwordSaltSize"
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|AuthorizableAction
argument_list|>
name|actions
decl_stmt|;
specifier|public
name|UserConfig
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UserConfig
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|,
name|Set
argument_list|<
name|AuthorizableAction
argument_list|>
name|actions
parameter_list|)
block|{
name|super
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|this
operator|.
name|actions
operator|=
operator|(
name|actions
operator|==
literal|null
operator|)
condition|?
name|Collections
operator|.
expr|<
name|AuthorizableAction
operator|>
name|emptySet
argument_list|()
else|:
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|actions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
specifier|public
name|String
name|getAdminId
parameter_list|()
block|{
return|return
name|getConfigValue
argument_list|(
name|PARAM_ADMIN_ID
argument_list|,
name|UserConstants
operator|.
name|DEFAULT_ADMIN_ID
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAnonymousId
parameter_list|()
block|{
return|return
name|getConfigValue
argument_list|(
name|PARAM_ANONYMOUS_ID
argument_list|,
name|UserConstants
operator|.
name|DEFAULT_ANONYMOUS_ID
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|AuthorizableAction
index|[]
name|getAuthorizableActions
parameter_list|()
block|{
return|return
name|actions
operator|.
name|toArray
argument_list|(
operator|new
name|AuthorizableAction
index|[
name|actions
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

