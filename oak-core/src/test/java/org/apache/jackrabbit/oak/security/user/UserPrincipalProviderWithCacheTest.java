begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NoSuchWorkspaceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|GroupPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|SystemSubject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|principal
operator|.
name|AbstractPrincipalProviderTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Testing the optional caching with the {@link org.apache.jackrabbit.oak.security.user.UserPrincipalProvider}.  */
end_comment

begin_class
specifier|public
class|class
name|UserPrincipalProviderWithCacheTest
extends|extends
name|AbstractPrincipalProviderTest
block|{
specifier|private
name|String
name|userId
decl_stmt|;
specifier|private
name|ContentSession
name|systemSession
decl_stmt|;
specifier|private
name|Root
name|systemRoot
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|userId
operator|=
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
expr_stmt|;
name|systemSession
operator|=
name|getSystemSession
argument_list|()
expr_stmt|;
name|systemRoot
operator|=
name|systemSession
operator|.
name|getLatestRoot
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|systemSession
operator|!=
literal|null
condition|)
block|{
name|systemSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|ConfigurationParameters
name|getSecurityConfigParameters
parameter_list|()
block|{
return|return
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|UserConfiguration
operator|.
name|NAME
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|UserPrincipalProvider
operator|.
name|PARAM_CACHE_EXPIRATION
argument_list|,
literal|3600
operator|*
literal|1000
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|PrincipalProvider
name|createPrincipalProvider
parameter_list|()
block|{
return|return
name|createPrincipalProvider
argument_list|(
name|root
argument_list|)
return|;
block|}
specifier|private
name|PrincipalProvider
name|createPrincipalProvider
parameter_list|(
name|Root
name|root
parameter_list|)
block|{
return|return
operator|new
name|UserPrincipalProvider
argument_list|(
name|root
argument_list|,
name|getUserConfiguration
argument_list|()
argument_list|,
name|namePathMapper
argument_list|)
return|;
block|}
specifier|private
name|ContentSession
name|getSystemSession
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|systemSession
operator|==
literal|null
condition|)
block|{
name|systemSession
operator|=
name|Subject
operator|.
name|doAs
argument_list|(
name|SystemSubject
operator|.
name|INSTANCE
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ContentSession
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ContentSession
name|run
parameter_list|()
throws|throws
name|LoginException
throws|,
name|NoSuchWorkspaceException
block|{
return|return
name|login
argument_list|(
literal|null
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|systemSession
return|;
block|}
specifier|private
name|UserConfiguration
name|changeUserConfiguration
parameter_list|(
name|ConfigurationParameters
name|params
parameter_list|)
block|{
name|UserConfiguration
name|userConfig
init|=
name|getUserConfiguration
argument_list|()
decl_stmt|;
operator|(
operator|(
name|ConfigurationBase
operator|)
name|userConfig
operator|)
operator|.
name|setParameters
argument_list|(
name|params
argument_list|)
expr_stmt|;
return|return
name|userConfig
return|;
block|}
specifier|private
name|Tree
name|getCacheTree
parameter_list|(
name|Root
name|root
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getCacheTree
argument_list|(
name|root
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Tree
name|getCacheTree
parameter_list|(
name|Root
name|root
parameter_list|,
name|String
name|authorizablePath
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|root
operator|.
name|getTree
argument_list|(
name|authorizablePath
operator|+
literal|'/'
operator|+
name|CacheConstants
operator|.
name|REP_CACHE
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|assertPrincipals
parameter_list|(
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principals
parameter_list|,
name|Principal
modifier|...
name|expectedPrincipals
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedPrincipals
operator|.
name|length
argument_list|,
name|principals
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Principal
name|principal
range|:
name|expectedPrincipals
control|)
block|{
name|assertTrue
argument_list|(
name|principals
operator|.
name|contains
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalsPopulatesCache
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalProvider
name|pp
init|=
name|createPrincipalProvider
argument_list|(
name|systemRoot
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principals
init|=
name|pp
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
decl_stmt|;
name|assertPrincipals
argument_list|(
name|principals
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|testGroup
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|principalCache
init|=
name|getCacheTree
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|principalCache
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CacheConstants
operator|.
name|NT_REP_CACHE
argument_list|,
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|principalCache
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|principalCache
operator|.
name|getProperty
argument_list|(
name|CacheConstants
operator|.
name|REP_EXPIRATION
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyState
name|ps
init|=
name|principalCache
operator|.
name|getProperty
argument_list|(
name|CacheConstants
operator|.
name|REP_GROUP_PRINCIPAL_NAMES
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|String
name|val
init|=
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testGroup
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetGroupMembershipPopulatesCache
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalProvider
name|pp
init|=
name|createPrincipalProvider
argument_list|(
name|systemRoot
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principals
init|=
name|pp
operator|.
name|getMembershipPrincipals
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
decl_stmt|;
name|assertPrincipals
argument_list|(
name|principals
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|testGroup
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|principalCache
init|=
name|getCacheTree
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|principalCache
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CacheConstants
operator|.
name|NT_REP_CACHE
argument_list|,
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|principalCache
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|principalCache
operator|.
name|getProperty
argument_list|(
name|CacheConstants
operator|.
name|REP_EXPIRATION
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyState
name|ps
init|=
name|principalCache
operator|.
name|getProperty
argument_list|(
name|CacheConstants
operator|.
name|REP_GROUP_PRINCIPAL_NAMES
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|String
name|val
init|=
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testGroup
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrincipalManagerGetGroupMembershipPopulatesCache
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalManager
name|principalManager
init|=
name|getPrincipalManager
argument_list|(
name|systemRoot
argument_list|)
decl_stmt|;
name|PrincipalIterator
name|principalIterator
init|=
name|principalManager
operator|.
name|getGroupMembership
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
decl_stmt|;
name|assertPrincipals
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|principalIterator
argument_list|)
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|testGroup
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|principalCache
init|=
name|getCacheTree
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|principalCache
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CacheConstants
operator|.
name|NT_REP_CACHE
argument_list|,
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|principalCache
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|principalCache
operator|.
name|getProperty
argument_list|(
name|CacheConstants
operator|.
name|REP_EXPIRATION
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyState
name|ps
init|=
name|principalCache
operator|.
name|getProperty
argument_list|(
name|CacheConstants
operator|.
name|REP_GROUP_PRINCIPAL_NAMES
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|String
name|val
init|=
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testGroup
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalsForGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalProvider
name|pp
init|=
name|createPrincipalProvider
argument_list|(
name|systemRoot
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principals
init|=
name|pp
operator|.
name|getPrincipals
argument_list|(
name|testGroup
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|principals
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|principals
operator|=
name|pp
operator|.
name|getPrincipals
argument_list|(
name|testGroup2
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|principals
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|principalCache
init|=
name|getCacheTree
argument_list|(
name|root
argument_list|,
name|testGroup
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|principalCache
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|principalCache
operator|=
name|getCacheTree
argument_list|(
name|root
argument_list|,
name|testGroup2
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|principalCache
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetGroupMembershipForGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalProvider
name|pp
init|=
name|createPrincipalProvider
argument_list|(
name|systemRoot
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principals
init|=
name|pp
operator|.
name|getMembershipPrincipals
argument_list|(
name|testGroup
operator|.
name|getPrincipal
argument_list|()
argument_list|)
decl_stmt|;
name|assertPrincipals
argument_list|(
name|principals
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|principals
operator|=
name|pp
operator|.
name|getMembershipPrincipals
argument_list|(
name|testGroup2
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|assertPrincipals
argument_list|(
name|principals
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|testGroup
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|principalCache
init|=
name|getCacheTree
argument_list|(
name|root
argument_list|,
name|testGroup
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|principalCache
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|principalCache
operator|=
name|getCacheTree
argument_list|(
name|root
argument_list|,
name|testGroup2
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|principalCache
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractPrincipalsFromCache
parameter_list|()
throws|throws
name|Exception
block|{
comment|// a) force the cache to be created
name|PrincipalProvider
name|pp
init|=
name|createPrincipalProvider
argument_list|(
name|systemRoot
argument_list|)
decl_stmt|;
comment|// set of principals that read from user + membership-provider.
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principals
init|=
name|pp
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
decl_stmt|;
name|assertPrincipals
argument_list|(
name|principals
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|testGroup
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
comment|// b) retrieve principals again (this time from the cache)
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principalsAgain
init|=
name|pp
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
decl_stmt|;
comment|// make sure both sets are equal
name|assertEquals
argument_list|(
name|principals
argument_list|,
name|principalsAgain
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupPrincipals
parameter_list|()
throws|throws
name|Exception
block|{
comment|// a) force the cache to be created
name|PrincipalProvider
name|pp
init|=
name|createPrincipalProvider
argument_list|(
name|systemRoot
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principals
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|pp
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
argument_list|,
operator|new
name|GroupPredicate
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Principal
name|p
range|:
name|principals
control|)
block|{
name|String
name|className
init|=
name|p
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"org.apache.jackrabbit.oak.security.user.UserPrincipalProvider$GroupPrincipalImpl"
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
name|Principal
name|testPrincipal
init|=
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
comment|// b) retrieve principals again (this time from the cache)
comment|// -> verify that they are a different implementation
name|Iterable
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principalsAgain
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|pp
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
argument_list|,
operator|new
name|GroupPredicate
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Principal
name|p
range|:
name|principalsAgain
control|)
block|{
name|String
name|className
init|=
name|p
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"org.apache.jackrabbit.oak.security.user.UserPrincipalProvider$CachedGroupPrincipal"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|instanceof
name|TreeBasedPrincipal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testGroup
operator|.
name|getPath
argument_list|()
argument_list|,
operator|(
operator|(
name|TreeBasedPrincipal
operator|)
name|p
operator|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|GroupPrincipal
name|principalGroup
init|=
operator|(
name|GroupPrincipal
operator|)
name|p
decl_stmt|;
name|assertTrue
argument_list|(
name|principalGroup
operator|.
name|isMember
argument_list|(
name|testPrincipal
argument_list|)
argument_list|)
expr_stmt|;
name|Enumeration
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|members
init|=
name|principalGroup
operator|.
name|members
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|members
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPrincipal
argument_list|,
name|members
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testGroup2
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|members
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|members
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCachedPrincipalsGroupRemoved
parameter_list|()
throws|throws
name|Exception
block|{
comment|// a) force the cache to be created
name|PrincipalProvider
name|pp
init|=
name|createPrincipalProvider
argument_list|(
name|systemRoot
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principals
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|pp
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
argument_list|,
operator|new
name|GroupPredicate
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Principal
name|p
range|:
name|principals
control|)
block|{
name|String
name|className
init|=
name|p
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"org.apache.jackrabbit.oak.security.user.UserPrincipalProvider$GroupPrincipalImpl"
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
name|testGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|systemRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
comment|// b) retrieve principals again (this time from the cache)
comment|//    principal for 'testGroup' is no longer backed by an user mgt group
comment|//    verify that this doesn't lead to runtime exceptions
name|Iterable
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principalsAgain
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|pp
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
argument_list|,
operator|new
name|GroupPredicate
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Principal
name|p
range|:
name|principalsAgain
control|)
block|{
name|String
name|className
init|=
name|p
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"org.apache.jackrabbit.oak.security.user.UserPrincipalProvider$CachedGroupPrincipal"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|instanceof
name|TreeBasedPrincipal
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
operator|(
name|TreeBasedPrincipal
operator|)
name|p
operator|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|GroupPrincipal
name|principalGroup
init|=
operator|(
name|GroupPrincipal
operator|)
name|p
decl_stmt|;
name|assertFalse
argument_list|(
name|principalGroup
operator|.
name|isMember
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Enumeration
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|members
init|=
name|principalGroup
operator|.
name|members
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|members
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupPrincipalNameEscape
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|gId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Principal
name|groupPrincipal
init|=
operator|new
name|PrincipalImpl
argument_list|(
name|groupId
operator|+
literal|",,%,%%"
argument_list|)
decl_stmt|;
name|Group
name|gr
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createGroup
argument_list|(
name|groupPrincipal
argument_list|)
decl_stmt|;
name|gId
operator|=
name|gr
operator|.
name|getID
argument_list|()
expr_stmt|;
name|gr
operator|.
name|addMember
argument_list|(
name|getTestUser
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|systemRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|PrincipalProvider
name|pp
init|=
name|createPrincipalProvider
argument_list|(
name|systemRoot
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principals
init|=
name|pp
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|principals
operator|.
name|contains
argument_list|(
name|groupPrincipal
argument_list|)
argument_list|)
expr_stmt|;
name|principals
operator|=
name|pp
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|principals
operator|.
name|contains
argument_list|(
name|groupPrincipal
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
if|if
condition|(
name|gId
operator|!=
literal|null
condition|)
block|{
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|gId
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMembershipChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalProvider
name|pp
init|=
name|createPrincipalProvider
argument_list|(
name|systemRoot
argument_list|)
decl_stmt|;
comment|// set of principals that read from user + membership-provider.
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principals
init|=
name|pp
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
decl_stmt|;
comment|// change group membership with a different root
name|UserManager
name|uMgr
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|Group
name|gr
init|=
name|uMgr
operator|.
name|getAuthorizable
argument_list|(
name|groupId
argument_list|,
name|Group
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|gr
operator|.
name|removeMember
argument_list|(
name|uMgr
operator|.
name|getAuthorizable
argument_list|(
name|userId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|systemRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
comment|// system-principal provider must still see the principals from the cache (not the changed onces)
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principalsAgain
init|=
name|pp
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|principals
argument_list|,
name|principalsAgain
argument_list|)
expr_stmt|;
comment|// disable the cache again
name|changeUserConfiguration
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|pp
operator|=
name|createPrincipalProvider
argument_list|(
name|systemRoot
argument_list|)
expr_stmt|;
comment|// now group principals must no longer be retrieved from the cache
name|assertPrincipals
argument_list|(
name|pp
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCacheUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalProvider
name|pp
init|=
name|createPrincipalProvider
argument_list|(
name|systemRoot
argument_list|)
decl_stmt|;
comment|// set of principals that read from user + membership-provider -> cache being filled
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principals
init|=
name|pp
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|getCacheTree
argument_list|(
name|systemRoot
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// change the group membership of the test user
name|UserManager
name|uMgr
init|=
name|getUserConfiguration
argument_list|()
operator|.
name|getUserManager
argument_list|(
name|systemRoot
argument_list|,
name|namePathMapper
argument_list|)
decl_stmt|;
name|Group
name|gr
init|=
name|uMgr
operator|.
name|getAuthorizable
argument_list|(
name|groupId
argument_list|,
name|Group
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|gr
operator|.
name|removeMember
argument_list|(
name|uMgr
operator|.
name|getAuthorizable
argument_list|(
name|userId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|systemRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// force cache expiration by manually setting the expiration time
name|Tree
name|cache
init|=
name|getCacheTree
argument_list|(
name|systemRoot
argument_list|)
decl_stmt|;
name|cache
operator|.
name|setProperty
argument_list|(
name|CacheConstants
operator|.
name|REP_EXPIRATION
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|systemRoot
operator|.
name|commit
argument_list|(
name|CacheValidatorProvider
operator|.
name|asCommitAttributes
argument_list|()
argument_list|)
expr_stmt|;
comment|// retrieve principals again to have cache updated
name|pp
operator|=
name|createPrincipalProvider
argument_list|(
name|systemRoot
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principalsAgain
init|=
name|pp
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|principals
operator|.
name|equals
argument_list|(
name|principalsAgain
argument_list|)
argument_list|)
expr_stmt|;
name|assertPrincipals
argument_list|(
name|principalsAgain
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that the cache has really been updated
name|cache
operator|=
name|getCacheTree
argument_list|(
name|systemRoot
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
literal|2
argument_list|,
operator|new
name|NodeUtil
argument_list|(
name|cache
argument_list|)
operator|.
name|getLong
argument_list|(
name|CacheConstants
operator|.
name|REP_EXPIRATION
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|TreeUtil
operator|.
name|getString
argument_list|(
name|cache
argument_list|,
name|CacheConstants
operator|.
name|REP_GROUP_PRINCIPAL_NAMES
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingExpiration
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalProvider
name|pp
init|=
name|createPrincipalProvider
argument_list|(
name|systemRoot
argument_list|)
decl_stmt|;
comment|// set of principals that read from user + membership-provider -> cache being filled
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principals
init|=
name|pp
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|getCacheTree
argument_list|(
name|systemRoot
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// manually remove rep:expiration property to verify this doesn't cause NPE
name|Tree
name|cache
init|=
name|getCacheTree
argument_list|(
name|systemRoot
argument_list|)
decl_stmt|;
name|cache
operator|.
name|removeProperty
argument_list|(
name|CacheConstants
operator|.
name|REP_EXPIRATION
argument_list|)
expr_stmt|;
name|systemRoot
operator|.
name|commit
argument_list|(
name|CacheValidatorProvider
operator|.
name|asCommitAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|getCacheTree
argument_list|(
name|systemRoot
argument_list|)
operator|.
name|hasProperty
argument_list|(
name|CacheConstants
operator|.
name|REP_EXPIRATION
argument_list|)
argument_list|)
expr_stmt|;
comment|// retrieve principals again: the cache must be treated as expired and
comment|// not causing NPE although the property is missing
name|pp
operator|=
name|createPrincipalProvider
argument_list|(
name|systemRoot
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principalsAgain
init|=
name|pp
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|principals
operator|.
name|equals
argument_list|(
name|principalsAgain
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify that the cache has really been updated
name|cache
operator|=
name|getCacheTree
argument_list|(
name|systemRoot
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|hasProperty
argument_list|(
name|CacheConstants
operator|.
name|REP_EXPIRATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnlySystemCreatesCache
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principals
init|=
name|principalProvider
operator|.
name|getPrincipals
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertPrincipals
argument_list|(
name|principals
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|testGroup
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|userTree
operator|.
name|hasChild
argument_list|(
name|CacheConstants
operator|.
name|REP_CACHE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnlySystemReadsFromCache
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|userId
init|=
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
decl_stmt|;
name|PrincipalProvider
name|systemPP
init|=
name|createPrincipalProvider
argument_list|(
name|systemRoot
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principals
init|=
name|systemPP
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
decl_stmt|;
name|assertPrincipals
argument_list|(
name|principals
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|testGroup
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertPrincipals
argument_list|(
name|principalProvider
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|testGroup
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|testGroup
operator|.
name|removeMember
argument_list|(
name|getTestUser
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertPrincipals
argument_list|(
name|principalProvider
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|assertPrincipals
argument_list|(
name|systemPP
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|testGroup
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidExpiry
parameter_list|()
throws|throws
name|Exception
block|{
name|long
index|[]
name|noCache
init|=
operator|new
name|long
index|[]
block|{
literal|0
block|,
operator|-
literal|1
block|,
name|Long
operator|.
name|MIN_VALUE
block|}
decl_stmt|;
for|for
control|(
name|long
name|exp
range|:
name|noCache
control|)
block|{
name|changeUserConfiguration
argument_list|(
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|UserPrincipalProvider
operator|.
name|PARAM_CACHE_EXPIRATION
argument_list|,
name|exp
argument_list|)
argument_list|)
expr_stmt|;
name|PrincipalProvider
name|pp
init|=
name|createPrincipalProvider
argument_list|(
name|systemRoot
argument_list|)
decl_stmt|;
name|pp
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
expr_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|userTree
operator|.
name|hasChild
argument_list|(
name|CacheConstants
operator|.
name|REP_CACHE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongOverflow
parameter_list|()
throws|throws
name|Exception
block|{
name|long
index|[]
name|maxCache
init|=
operator|new
name|long
index|[]
block|{
name|Long
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
block|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|10000
block|}
decl_stmt|;
name|Root
name|systemRoot
init|=
name|getSystemSession
argument_list|()
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|exp
range|:
name|maxCache
control|)
block|{
name|changeUserConfiguration
argument_list|(
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|UserPrincipalProvider
operator|.
name|PARAM_CACHE_EXPIRATION
argument_list|,
name|exp
argument_list|)
argument_list|)
expr_stmt|;
name|PrincipalProvider
name|pp
init|=
name|createPrincipalProvider
argument_list|(
name|systemRoot
argument_list|)
decl_stmt|;
name|pp
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
expr_stmt|;
name|Tree
name|userTree
init|=
name|systemRoot
operator|.
name|getTree
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Tree
name|cache
init|=
name|userTree
operator|.
name|getChild
argument_list|(
name|CacheConstants
operator|.
name|REP_CACHE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|PropertyState
name|propertyState
init|=
name|cache
operator|.
name|getProperty
argument_list|(
name|CacheConstants
operator|.
name|REP_EXPIRATION
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|propertyState
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|propertyState
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|()
expr_stmt|;
name|systemRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangeCache
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalProvider
name|pp
init|=
name|createPrincipalProvider
argument_list|(
name|systemRoot
argument_list|)
decl_stmt|;
name|pp
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
expr_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|PropertyState
argument_list|>
name|props
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|add
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|CacheConstants
operator|.
name|REP_EXPIRATION
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|add
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|CacheConstants
operator|.
name|REP_GROUP_PRINCIPAL_NAMES
argument_list|,
name|EveryonePrincipal
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|add
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|add
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"residualProp"
argument_list|,
literal|"anyvalue"
argument_list|)
argument_list|)
expr_stmt|;
comment|// changing cache with (normally) sufficiently privileged session must not succeed
for|for
control|(
name|PropertyState
name|ps
range|:
name|props
control|)
block|{
try|try
block|{
name|Tree
name|cache
init|=
name|getCacheTree
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|cache
operator|.
name|setProperty
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Attempt to modify the cache tree must fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
comment|// success
block|}
finally|finally
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
comment|// changing cache with system session must not succeed either
for|for
control|(
name|PropertyState
name|ps
range|:
name|props
control|)
block|{
try|try
block|{
name|Tree
name|cache
init|=
name|getCacheTree
argument_list|(
name|systemRoot
argument_list|)
decl_stmt|;
name|cache
operator|.
name|setProperty
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|systemRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Attempt to modify the cache tree must fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
comment|// success
block|}
finally|finally
block|{
name|systemRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveCache
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalProvider
name|pp
init|=
name|createPrincipalProvider
argument_list|(
name|systemRoot
argument_list|)
decl_stmt|;
name|pp
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
expr_stmt|;
comment|// removing cache with sufficiently privileged session must succeed
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|cache
init|=
name|getCacheTree
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|cache
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentLoginWithCacheRemoval
parameter_list|()
throws|throws
name|Exception
block|{
name|changeUserConfiguration
argument_list|(
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|UserPrincipalProvider
operator|.
name|PARAM_CACHE_EXPIRATION
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Exception
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|Exception
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|threads
operator|.
name|add
argument_list|(
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|userId
argument_list|,
name|userId
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Exception
name|e
range|:
name|exceptions
control|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|//--------------------------------------------------------------------------
specifier|private
specifier|static
specifier|final
class|class
name|GroupPredicate
implements|implements
name|Predicate
argument_list|<
name|Principal
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|Principal
name|input
parameter_list|)
block|{
return|return
operator|(
name|input
operator|instanceof
name|GroupPrincipal
operator|)
operator|&&
operator|!
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
operator|.
name|equals
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

