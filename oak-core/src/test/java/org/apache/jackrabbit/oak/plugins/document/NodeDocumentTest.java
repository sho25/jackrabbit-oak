begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|revisionAreAmbiguous
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Revision
operator|.
name|RevisionComparator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests for {@link NodeDocument}.  */
end_comment

begin_class
specifier|public
class|class
name|NodeDocumentTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|splitCollisions
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryDocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|Utils
operator|.
name|getPathFromId
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
operator|new
name|NodeDocument
argument_list|(
name|docStore
argument_list|)
decl_stmt|;
name|doc
operator|.
name|put
argument_list|(
name|Document
operator|.
name|ID
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NodeDocument
operator|.
name|NUM_REVS_THRESHOLD
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|Revision
name|r
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|NodeDocument
operator|.
name|setRevision
argument_list|(
name|op
argument_list|,
name|r
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|addCollision
argument_list|(
name|op
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|UpdateUtils
operator|.
name|applyChanges
argument_list|(
name|doc
argument_list|,
name|op
argument_list|,
name|StableRevisionComparator
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|doc
operator|.
name|split
argument_list|(
name|DummyRevisionContext
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ambiguousRevisions
parameter_list|()
block|{
comment|// revisions from same cluster node are not ambiguous
name|RevisionContext
name|context
init|=
name|DummyRevisionContext
operator|.
name|INSTANCE
decl_stmt|;
name|Revision
name|r1
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r2
init|=
operator|new
name|Revision
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|revisionAreAmbiguous
argument_list|(
name|context
argument_list|,
name|r1
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|revisionAreAmbiguous
argument_list|(
name|context
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|revisionAreAmbiguous
argument_list|(
name|context
argument_list|,
name|r2
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
comment|// revisions from different cluster nodes are not ambiguous
comment|// if seen with stable revision comparator
name|r1
operator|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|r2
operator|=
operator|new
name|Revision
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|revisionAreAmbiguous
argument_list|(
name|context
argument_list|,
name|r1
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|revisionAreAmbiguous
argument_list|(
name|context
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|revisionAreAmbiguous
argument_list|(
name|context
argument_list|,
name|r2
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
comment|// now use a revision comparator with seen-at support
specifier|final
name|RevisionComparator
name|comparator
init|=
operator|new
name|RevisionComparator
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|context
operator|=
operator|new
name|DummyRevisionContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Comparator
argument_list|<
name|Revision
argument_list|>
name|getRevisionComparator
parameter_list|()
block|{
return|return
name|comparator
return|;
block|}
block|}
expr_stmt|;
name|r1
operator|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|r2
operator|=
operator|new
name|Revision
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// add revision to comparator in reverse time order
name|comparator
operator|.
name|add
argument_list|(
name|r2
argument_list|,
operator|new
name|Revision
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|comparator
operator|.
name|add
argument_list|(
name|r1
argument_list|,
operator|new
name|Revision
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// r1 seen after r2
name|assertFalse
argument_list|(
name|revisionAreAmbiguous
argument_list|(
name|context
argument_list|,
name|r1
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|revisionAreAmbiguous
argument_list|(
name|context
argument_list|,
name|r2
argument_list|,
name|r2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|revisionAreAmbiguous
argument_list|(
name|context
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|revisionAreAmbiguous
argument_list|(
name|context
argument_list|,
name|r2
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

