begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkElementIndex
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkPositionIndex
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkPositionIndexes
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
operator|.
name|BINARY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|MapRecord
operator|.
name|BUCKETS_PER_LEVEL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Segment
operator|.
name|MAX_SEGMENT_SIZE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|ModifiedNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|DefaultNodeStateDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteStreams
import|;
end_import

begin_class
specifier|public
class|class
name|SegmentWriter
block|{
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_BUFFER
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1
operator|<<
literal|12
decl_stmt|;
comment|// 4kB
specifier|private
specifier|final
name|SegmentStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|strings
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Template
argument_list|,
name|RecordId
argument_list|>
name|templates
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
name|UUID
name|uuid
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
comment|/**      * Insertion-ordered map from the UUIDs of referenced segments to the      * respective single-byte UUID index values used when serializing      * record identifiers.      */
specifier|private
specifier|final
name|Map
argument_list|<
name|UUID
argument_list|,
name|Byte
argument_list|>
name|uuids
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
comment|/**      * The segment write buffer, filled from the end to the beginning      * (see OAK-629). The buffer grows automatically up to      * {@link Segment#MAX_SEGMENT_SIZE}.      */
specifier|private
name|byte
index|[]
name|buffer
init|=
name|EMPTY_BUFFER
decl_stmt|;
comment|/**      * The number of bytes already written (or allocated). Counted from      * the<em>end</em> of the buffer.      */
specifier|private
name|int
name|length
init|=
literal|0
decl_stmt|;
comment|/**      * Current write position within the buffer. Grows up when raw data      * is written, but shifted downwards by the prepare methods.      */
specifier|private
name|int
name|position
decl_stmt|;
specifier|public
name|SegmentWriter
parameter_list|(
name|SegmentStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|flush
parameter_list|()
block|{
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|store
operator|.
name|createSegment
argument_list|(
name|uuid
argument_list|,
name|buffer
argument_list|,
name|buffer
operator|.
name|length
operator|-
name|length
argument_list|,
name|length
argument_list|,
name|uuids
operator|.
name|keySet
argument_list|()
argument_list|,
name|strings
argument_list|,
name|templates
argument_list|)
expr_stmt|;
name|uuid
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
expr_stmt|;
name|length
operator|=
literal|0
expr_stmt|;
name|uuids
operator|.
name|clear
argument_list|()
expr_stmt|;
name|strings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|templates
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|RecordId
name|prepare
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
name|prepare
argument_list|(
name|size
argument_list|,
name|Collections
operator|.
expr|<
name|RecordId
operator|>
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|synchronized
name|RecordId
name|prepare
parameter_list|(
name|int
name|size
parameter_list|,
name|Collection
argument_list|<
name|RecordId
argument_list|>
name|ids
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|size
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|UUID
argument_list|>
name|segmentIds
init|=
operator|new
name|HashSet
argument_list|<
name|UUID
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RecordId
name|id
range|:
name|checkNotNull
argument_list|(
name|ids
argument_list|)
control|)
block|{
name|UUID
name|segmentId
init|=
name|id
operator|.
name|getSegmentId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|uuids
operator|.
name|containsKey
argument_list|(
name|segmentId
argument_list|)
condition|)
block|{
name|segmentIds
operator|.
name|add
argument_list|(
name|segmentId
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|fullSize
init|=
name|size
operator|+
name|ids
operator|.
name|size
argument_list|()
operator|*
name|Segment
operator|.
name|RECORD_ID_BYTES
decl_stmt|;
name|checkArgument
argument_list|(
name|fullSize
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|alignment
init|=
name|Segment
operator|.
name|RECORD_ALIGN_BYTES
operator|-
literal|1
decl_stmt|;
name|int
name|alignedSize
init|=
operator|(
name|fullSize
operator|+
name|alignment
operator|)
operator|&
operator|~
name|alignment
decl_stmt|;
if|if
condition|(
name|length
operator|+
name|alignedSize
operator|>
name|MAX_SEGMENT_SIZE
operator|||
name|uuids
operator|.
name|size
argument_list|()
operator|+
name|segmentIds
operator|.
name|size
argument_list|()
operator|>
literal|0x100
condition|)
block|{
name|flush
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|length
operator|+
name|alignedSize
operator|>
name|buffer
operator|.
name|length
condition|)
block|{
name|int
name|newBufferLength
init|=
name|Math
operator|.
name|max
argument_list|(
literal|2
operator|*
name|buffer
operator|.
name|length
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
while|while
condition|(
name|length
operator|+
name|alignedSize
operator|>
name|newBufferLength
condition|)
block|{
name|newBufferLength
operator|*=
literal|2
expr_stmt|;
block|}
name|byte
index|[]
name|newBuffer
init|=
operator|new
name|byte
index|[
name|newBufferLength
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|buffer
operator|.
name|length
operator|-
name|length
argument_list|,
name|newBuffer
argument_list|,
name|newBuffer
operator|.
name|length
operator|-
name|length
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|buffer
operator|=
name|newBuffer
expr_stmt|;
block|}
name|length
operator|+=
name|alignedSize
expr_stmt|;
name|checkState
argument_list|(
name|length
operator|<=
name|MAX_SEGMENT_SIZE
argument_list|)
expr_stmt|;
name|position
operator|=
name|buffer
operator|.
name|length
operator|-
name|length
expr_stmt|;
return|return
operator|new
name|RecordId
argument_list|(
name|uuid
argument_list|,
name|MAX_SEGMENT_SIZE
operator|-
name|length
argument_list|)
return|;
block|}
specifier|private
specifier|synchronized
name|void
name|writeRecordId
parameter_list|(
name|RecordId
name|id
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|UUID
name|segmentId
init|=
name|id
operator|.
name|getSegmentId
argument_list|()
decl_stmt|;
name|Byte
name|segmentIndex
init|=
name|uuids
operator|.
name|get
argument_list|(
name|segmentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|segmentIndex
operator|==
literal|null
condition|)
block|{
name|checkState
argument_list|(
name|uuids
operator|.
name|size
argument_list|()
operator|<
name|Segment
operator|.
name|SEGMENT_REFERENCE_LIMIT
argument_list|)
expr_stmt|;
name|segmentIndex
operator|=
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
name|uuids
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|uuids
operator|.
name|put
argument_list|(
name|segmentId
argument_list|,
name|segmentIndex
argument_list|)
expr_stmt|;
block|}
name|int
name|offset
init|=
name|id
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|checkState
argument_list|(
literal|0
operator|<=
name|offset
operator|&&
name|offset
operator|<
name|MAX_SEGMENT_SIZE
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
operator|(
name|offset
operator|&
operator|(
name|Segment
operator|.
name|RECORD_ALIGN_BYTES
operator|-
literal|1
operator|)
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
name|segmentIndex
operator|.
name|byteValue
argument_list|()
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|offset
operator|>>
operator|(
literal|8
operator|+
name|Segment
operator|.
name|RECORD_ALIGN_BITS
operator|)
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|offset
operator|>>
name|Segment
operator|.
name|RECORD_ALIGN_BITS
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|writeInt
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|buffer
index|[
name|position
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>
literal|24
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|value
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|writeLong
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|writeInt
argument_list|(
call|(
name|int
call|)
argument_list|(
name|value
operator|>>
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|writeInt
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|MapLeaf
name|writeMapLeaf
parameter_list|(
name|int
name|level
parameter_list|,
name|Collection
argument_list|<
name|MapEntry
argument_list|>
name|entries
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|entries
operator|.
name|size
argument_list|()
decl_stmt|;
name|checkElementIndex
argument_list|(
name|size
argument_list|,
name|MapRecord
operator|.
name|MAX_SIZE
argument_list|)
expr_stmt|;
name|checkPositionIndex
argument_list|(
name|level
argument_list|,
name|MapRecord
operator|.
name|MAX_NUMBER_OF_LEVELS
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|size
operator|!=
literal|0
operator|||
name|level
operator|==
name|MapRecord
operator|.
name|MAX_NUMBER_OF_LEVELS
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RecordId
argument_list|>
name|ids
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|2
operator|*
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|MapEntry
name|entry
range|:
name|entries
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// copy the entries to an array so we can sort them before writing
name|MapEntry
index|[]
name|array
init|=
name|entries
operator|.
name|toArray
argument_list|(
operator|new
name|MapEntry
index|[
name|entries
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|RecordId
name|id
init|=
name|prepare
argument_list|(
literal|4
operator|+
name|size
operator|*
literal|4
argument_list|,
name|ids
argument_list|)
decl_stmt|;
name|writeInt
argument_list|(
operator|(
name|level
operator|<<
name|MapRecord
operator|.
name|SIZE_BITS
operator|)
operator||
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|MapEntry
name|entry
range|:
name|array
control|)
block|{
name|writeInt
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MapEntry
name|entry
range|:
name|array
control|)
block|{
name|writeRecordId
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MapEntry
name|entry
range|:
name|array
control|)
block|{
name|writeRecordId
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MapLeaf
argument_list|(
name|store
argument_list|,
name|id
argument_list|,
name|size
argument_list|,
name|level
argument_list|)
return|;
block|}
specifier|private
name|MapRecord
name|writeMapBranch
parameter_list|(
name|int
name|level
parameter_list|,
name|int
name|size
parameter_list|,
name|RecordId
index|[]
name|buckets
parameter_list|)
block|{
name|int
name|bitmap
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|RecordId
argument_list|>
name|ids
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|buckets
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buckets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|buckets
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|bitmap
operator||=
literal|1
operator|<<
name|i
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|buckets
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|RecordId
name|mapId
init|=
name|prepare
argument_list|(
literal|8
argument_list|,
name|ids
argument_list|)
decl_stmt|;
name|writeInt
argument_list|(
operator|(
name|level
operator|<<
name|MapRecord
operator|.
name|SIZE_BITS
operator|)
operator||
name|size
argument_list|)
expr_stmt|;
name|writeInt
argument_list|(
name|bitmap
argument_list|)
expr_stmt|;
for|for
control|(
name|RecordId
name|id
range|:
name|ids
control|)
block|{
name|writeRecordId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MapBranch
argument_list|(
name|store
argument_list|,
name|mapId
argument_list|,
name|size
argument_list|,
name|level
argument_list|,
name|bitmap
argument_list|)
return|;
block|}
specifier|private
specifier|synchronized
name|RecordId
name|writeListBucket
parameter_list|(
name|List
argument_list|<
name|RecordId
argument_list|>
name|bucket
parameter_list|)
block|{
name|RecordId
name|bucketId
init|=
name|prepare
argument_list|(
literal|0
argument_list|,
name|bucket
argument_list|)
decl_stmt|;
for|for
control|(
name|RecordId
name|id
range|:
name|bucket
control|)
block|{
name|writeRecordId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
return|return
name|bucketId
return|;
block|}
specifier|private
specifier|synchronized
name|MapRecord
name|writeMapBucket
parameter_list|(
name|RecordId
name|baseId
parameter_list|,
name|Collection
argument_list|<
name|MapEntry
argument_list|>
name|entries
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|int
name|mask
init|=
name|MapRecord
operator|.
name|BUCKETS_PER_LEVEL
operator|-
literal|1
decl_stmt|;
name|int
name|shift
init|=
name|level
operator|*
name|MapRecord
operator|.
name|LEVEL_BITS
decl_stmt|;
if|if
condition|(
name|entries
operator|==
literal|null
operator|||
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|baseId
operator|!=
literal|null
condition|)
block|{
return|return
name|MapRecord
operator|.
name|readMap
argument_list|(
name|store
argument_list|,
name|baseId
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|level
operator|==
literal|0
condition|)
block|{
name|RecordId
name|id
init|=
name|prepare
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
operator|new
name|MapLeaf
argument_list|(
name|store
argument_list|,
name|id
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|baseId
operator|!=
literal|null
condition|)
block|{
comment|// FIXME: messy code with lots of duplication
name|MapRecord
name|base
init|=
name|MapRecord
operator|.
name|readMap
argument_list|(
name|store
argument_list|,
name|baseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|MapLeaf
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|MapEntry
argument_list|>
name|map
init|=
operator|(
operator|(
name|MapLeaf
operator|)
name|base
operator|)
operator|.
name|getMapEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|MapEntry
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|writeMapBucket
argument_list|(
literal|null
argument_list|,
name|map
operator|.
name|values
argument_list|()
argument_list|,
name|level
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|Collection
argument_list|<
name|MapEntry
argument_list|>
argument_list|>
name|buckets
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|BUCKETS_PER_LEVEL
argument_list|)
decl_stmt|;
name|buckets
operator|.
name|addAll
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|BUCKETS_PER_LEVEL
argument_list|,
operator|(
name|Collection
argument_list|<
name|MapEntry
argument_list|>
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|MapEntry
name|entry
range|:
name|entries
control|)
block|{
name|int
name|bucketIndex
init|=
operator|(
name|entry
operator|.
name|hashCode
argument_list|()
operator|>>
name|shift
operator|)
operator|&
name|mask
decl_stmt|;
name|Collection
argument_list|<
name|MapEntry
argument_list|>
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|bucketIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucket
operator|==
literal|null
condition|)
block|{
name|bucket
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|buckets
operator|.
name|set
argument_list|(
name|bucketIndex
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
block|}
name|bucket
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|int
name|newSize
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|MapRecord
argument_list|>
name|newBuckets
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|RecordId
index|[]
name|bucketIds
init|=
operator|(
operator|(
name|MapBranch
operator|)
name|base
operator|)
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BUCKETS_PER_LEVEL
condition|;
name|i
operator|++
control|)
block|{
name|MapRecord
name|newBucket
init|=
name|writeMapBucket
argument_list|(
name|bucketIds
index|[
name|i
index|]
argument_list|,
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|level
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|newBucket
operator|!=
literal|null
condition|)
block|{
name|newBuckets
operator|.
name|add
argument_list|(
name|newBucket
argument_list|)
expr_stmt|;
name|bucketIds
index|[
name|i
index|]
operator|=
name|newBucket
operator|.
name|getRecordId
argument_list|()
expr_stmt|;
name|newSize
operator|+=
name|newBucket
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bucketIds
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// OAK-654: what if the updated map is smaller?
if|if
condition|(
name|newSize
operator|>
name|MapRecord
operator|.
name|BUCKETS_PER_LEVEL
condition|)
block|{
return|return
name|writeMapBranch
argument_list|(
name|level
argument_list|,
name|newSize
argument_list|,
name|bucketIds
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|newSize
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|level
operator|==
literal|0
condition|)
block|{
name|RecordId
name|id
init|=
name|prepare
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
operator|new
name|MapLeaf
argument_list|(
name|store
argument_list|,
name|id
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|newBuckets
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|newBuckets
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
else|else
block|{
comment|// FIXME: ugly hack, flush() shouldn't be needed here
name|flush
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MapEntry
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|MapRecord
name|record
range|:
name|newBuckets
control|)
block|{
name|Iterables
operator|.
name|addAll
argument_list|(
name|list
argument_list|,
name|record
operator|.
name|getEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|writeMapLeaf
argument_list|(
name|level
argument_list|,
name|list
argument_list|)
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|entries
operator|.
name|size
argument_list|()
operator|<=
name|MapRecord
operator|.
name|BUCKETS_PER_LEVEL
operator|||
name|level
operator|==
name|MapRecord
operator|.
name|MAX_NUMBER_OF_LEVELS
condition|)
block|{
return|return
name|writeMapLeaf
argument_list|(
name|level
argument_list|,
name|entries
argument_list|)
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|MapEntry
argument_list|>
index|[]
name|lists
init|=
operator|new
name|List
index|[
name|MapRecord
operator|.
name|BUCKETS_PER_LEVEL
index|]
decl_stmt|;
for|for
control|(
name|MapEntry
name|entry
range|:
name|entries
control|)
block|{
name|int
name|bucketIndex
init|=
operator|(
name|entry
operator|.
name|hashCode
argument_list|()
operator|>>
name|shift
operator|)
operator|&
name|mask
decl_stmt|;
if|if
condition|(
name|lists
index|[
name|bucketIndex
index|]
operator|==
literal|null
condition|)
block|{
name|lists
index|[
name|bucketIndex
index|]
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
name|lists
index|[
name|bucketIndex
index|]
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|RecordId
index|[]
name|buckets
init|=
operator|new
name|RecordId
index|[
name|MapRecord
operator|.
name|BUCKETS_PER_LEVEL
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lists
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|lists
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|buckets
index|[
name|i
index|]
operator|=
name|writeMapBucket
argument_list|(
literal|null
argument_list|,
name|lists
index|[
name|i
index|]
argument_list|,
name|level
operator|+
literal|1
argument_list|)
operator|.
name|getRecordId
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|writeMapBranch
argument_list|(
name|level
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|,
name|buckets
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|synchronized
name|RecordId
name|writeValueRecord
parameter_list|(
name|long
name|length
parameter_list|,
name|RecordId
name|blocks
parameter_list|)
block|{
name|RecordId
name|valueId
init|=
name|prepare
argument_list|(
literal|8
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|blocks
argument_list|)
argument_list|)
decl_stmt|;
name|writeLong
argument_list|(
operator|(
name|length
operator|-
name|Segment
operator|.
name|MEDIUM_LIMIT
operator|)
operator||
operator|(
literal|0x3L
operator|<<
literal|62
operator|)
argument_list|)
expr_stmt|;
name|writeRecordId
argument_list|(
name|blocks
argument_list|)
expr_stmt|;
return|return
name|valueId
return|;
block|}
comment|/**      * Writes a block record containing the given block of bytes.      *      * @param bytes source buffer      * @param offset offset within the source buffer      * @param length number of bytes to write      * @return block record identifier      */
specifier|public
specifier|synchronized
name|RecordId
name|writeBlock
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|checkPositionIndexes
argument_list|(
name|offset
argument_list|,
name|offset
operator|+
name|length
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|RecordId
name|blockId
init|=
name|prepare
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|buffer
argument_list|,
name|position
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|position
operator|+=
name|length
expr_stmt|;
return|return
name|blockId
return|;
block|}
comment|/**      * Writes a list record containing the given list of record identifiers.      *      * @param list list of record identifiers      * @return list record identifier      */
specifier|public
name|RecordId
name|writeList
parameter_list|(
name|List
argument_list|<
name|RecordId
argument_list|>
name|list
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RecordId
argument_list|>
name|thisLevel
init|=
name|list
decl_stmt|;
while|while
condition|(
name|thisLevel
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|List
argument_list|<
name|RecordId
argument_list|>
name|nextLevel
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|RecordId
argument_list|>
name|bucket
range|:
name|Lists
operator|.
name|partition
argument_list|(
name|thisLevel
argument_list|,
name|ListRecord
operator|.
name|LEVEL_SIZE
argument_list|)
control|)
block|{
name|nextLevel
operator|.
name|add
argument_list|(
name|writeListBucket
argument_list|(
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|thisLevel
operator|=
name|nextLevel
expr_stmt|;
block|}
return|return
name|thisLevel
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
specifier|public
name|MapRecord
name|writeMap
parameter_list|(
name|MapRecord
name|base
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|changes
parameter_list|)
block|{
name|List
argument_list|<
name|MapEntry
argument_list|>
name|entries
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|entry
range|:
name|changes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
operator|new
name|MapEntry
argument_list|(
name|store
argument_list|,
name|name
argument_list|,
name|writeString
argument_list|(
name|name
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RecordId
name|baseId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
block|{
name|baseId
operator|=
name|base
operator|.
name|getRecordId
argument_list|()
expr_stmt|;
block|}
return|return
name|writeMapBucket
argument_list|(
name|baseId
argument_list|,
name|entries
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * Writes a string value record.      *      * @param string string to be written      * @return value record identifier      */
specifier|public
name|RecordId
name|writeString
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|RecordId
name|id
init|=
name|strings
operator|.
name|get
argument_list|(
name|string
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|byte
index|[]
name|data
init|=
name|string
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
try|try
block|{
name|id
operator|=
name|writeStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected IOException"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|strings
operator|.
name|put
argument_list|(
name|string
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
comment|/**      * Writes a stream value record. The given stream is consumed      *<em>and closed</em> by this method.      *      * @param stream stream to be written      * @return value record identifier      * @throws IOException if the stream could not be read      */
specifier|public
name|RecordId
name|writeStream
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|RecordId
name|id
init|=
name|SegmentStream
operator|.
name|getRecordIdIfAvailable
argument_list|(
name|stream
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|id
operator|=
name|internalWriteStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|id
return|;
block|}
specifier|private
specifier|synchronized
name|RecordId
name|internalWriteStream
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
comment|// First read the head of the stream. This covers most small
comment|// values and the frequently accessed head of larger ones.
comment|// The head gets inlined in the current segment.
name|byte
index|[]
name|head
init|=
operator|new
name|byte
index|[
name|Segment
operator|.
name|MEDIUM_LIMIT
index|]
decl_stmt|;
name|int
name|headLength
init|=
name|ByteStreams
operator|.
name|read
argument_list|(
name|stream
argument_list|,
name|head
argument_list|,
literal|0
argument_list|,
name|head
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|headLength
operator|<
name|Segment
operator|.
name|SMALL_LIMIT
condition|)
block|{
name|RecordId
name|id
init|=
name|prepare
argument_list|(
literal|1
operator|+
name|headLength
argument_list|)
decl_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|headLength
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|head
argument_list|,
literal|0
argument_list|,
name|buffer
argument_list|,
name|position
argument_list|,
name|headLength
argument_list|)
expr_stmt|;
name|position
operator|+=
name|headLength
expr_stmt|;
return|return
name|id
return|;
block|}
elseif|else
if|if
condition|(
name|headLength
operator|<
name|Segment
operator|.
name|MEDIUM_LIMIT
condition|)
block|{
name|RecordId
name|id
init|=
name|prepare
argument_list|(
literal|2
operator|+
name|headLength
argument_list|)
decl_stmt|;
name|int
name|len
init|=
operator|(
name|headLength
operator|-
name|Segment
operator|.
name|SMALL_LIMIT
operator|)
operator||
literal|0x8000
decl_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|len
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|len
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|head
argument_list|,
literal|0
argument_list|,
name|buffer
argument_list|,
name|position
argument_list|,
name|headLength
argument_list|)
expr_stmt|;
name|position
operator|+=
name|headLength
expr_stmt|;
return|return
name|id
return|;
block|}
else|else
block|{
comment|// If the stream filled the full head buffer, it's likely
comment|// that the bulk of the data is still to come. Read it
comment|// in larger chunks and save in separate segments.
name|long
name|length
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|RecordId
argument_list|>
name|blockIds
init|=
operator|new
name|ArrayList
argument_list|<
name|RecordId
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bulk
init|=
operator|new
name|byte
index|[
name|Segment
operator|.
name|MAX_SEGMENT_SIZE
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|head
argument_list|,
literal|0
argument_list|,
name|bulk
argument_list|,
literal|0
argument_list|,
name|headLength
argument_list|)
expr_stmt|;
name|int
name|bulkLength
init|=
name|headLength
operator|+
name|ByteStreams
operator|.
name|read
argument_list|(
name|stream
argument_list|,
name|bulk
argument_list|,
name|headLength
argument_list|,
name|bulk
operator|.
name|length
operator|-
name|headLength
argument_list|)
decl_stmt|;
while|while
condition|(
name|bulkLength
operator|>
literal|0
condition|)
block|{
name|UUID
name|segmentId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|int
name|align
init|=
name|Segment
operator|.
name|RECORD_ALIGN_BYTES
operator|-
literal|1
decl_stmt|;
name|int
name|bulkAlignLength
init|=
operator|(
name|bulkLength
operator|+
name|align
operator|)
operator|&
operator|~
name|align
decl_stmt|;
name|store
operator|.
name|createSegment
argument_list|(
name|segmentId
argument_list|,
name|bulk
argument_list|,
literal|0
argument_list|,
name|bulkAlignLength
argument_list|,
name|Collections
operator|.
expr|<
name|UUID
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|RecordId
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|Template
argument_list|,
name|RecordId
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|pos
init|=
name|Segment
operator|.
name|MAX_SEGMENT_SIZE
operator|-
name|bulkAlignLength
init|;
name|pos
operator|<
name|Segment
operator|.
name|MAX_SEGMENT_SIZE
condition|;
name|pos
operator|+=
name|BLOCK_SIZE
control|)
block|{
name|blockIds
operator|.
name|add
argument_list|(
operator|new
name|RecordId
argument_list|(
name|segmentId
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|length
operator|+=
name|bulkLength
expr_stmt|;
name|bulkLength
operator|=
name|ByteStreams
operator|.
name|read
argument_list|(
name|stream
argument_list|,
name|bulk
argument_list|,
literal|0
argument_list|,
name|bulk
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|writeValueRecord
argument_list|(
name|length
argument_list|,
name|writeList
argument_list|(
name|blockIds
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|synchronized
name|RecordId
name|writeProperty
parameter_list|(
name|PropertyState
name|state
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|previousValues
parameter_list|)
block|{
name|Type
argument_list|<
name|?
argument_list|>
name|type
init|=
name|state
operator|.
name|getType
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|state
operator|.
name|count
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RecordId
argument_list|>
name|valueIds
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|type
operator|.
name|tag
argument_list|()
operator|==
name|PropertyType
operator|.
name|BINARY
condition|)
block|{
try|try
block|{
name|Blob
name|blob
init|=
name|state
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|valueIds
operator|.
name|add
argument_list|(
name|writeStream
argument_list|(
name|blob
operator|.
name|getNewStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected IOException"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|String
name|value
init|=
name|state
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|RecordId
name|valueId
init|=
name|previousValues
operator|.
name|get
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueId
operator|==
literal|null
condition|)
block|{
name|valueId
operator|=
name|writeString
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|valueIds
operator|.
name|add
argument_list|(
name|valueId
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|type
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|valueIds
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
name|RecordId
name|propertyId
init|=
name|prepare
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|propertyId
return|;
block|}
else|else
block|{
name|RecordId
name|listId
init|=
name|writeList
argument_list|(
name|valueIds
argument_list|)
decl_stmt|;
name|RecordId
name|propertyId
init|=
name|prepare
argument_list|(
literal|4
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|listId
argument_list|)
argument_list|)
decl_stmt|;
name|writeInt
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|writeRecordId
argument_list|(
name|listId
argument_list|)
expr_stmt|;
return|return
name|propertyId
return|;
block|}
block|}
specifier|public
specifier|synchronized
name|RecordId
name|writeTemplate
parameter_list|(
name|Template
name|template
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|template
argument_list|)
expr_stmt|;
name|RecordId
name|id
init|=
name|templates
operator|.
name|get
argument_list|(
name|template
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|RecordId
argument_list|>
name|ids
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|int
name|head
init|=
literal|0
decl_stmt|;
name|RecordId
name|primaryId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|template
operator|.
name|hasPrimaryType
argument_list|()
condition|)
block|{
name|head
operator||=
literal|1
operator|<<
literal|31
expr_stmt|;
name|primaryId
operator|=
name|writeString
argument_list|(
name|template
operator|.
name|getPrimaryType
argument_list|()
argument_list|)
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|primaryId
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|RecordId
argument_list|>
name|mixinIds
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|template
operator|.
name|hasMixinTypes
argument_list|()
condition|)
block|{
name|head
operator||=
literal|1
operator|<<
literal|30
expr_stmt|;
name|mixinIds
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|mixin
range|:
name|template
operator|.
name|getMixinTypes
argument_list|()
control|)
block|{
name|mixinIds
operator|.
name|add
argument_list|(
name|writeString
argument_list|(
name|mixin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ids
operator|.
name|addAll
argument_list|(
name|mixinIds
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|mixinIds
operator|.
name|size
argument_list|()
operator|<
operator|(
literal|1
operator|<<
literal|10
operator|)
argument_list|)
expr_stmt|;
name|head
operator||=
name|mixinIds
operator|.
name|size
argument_list|()
operator|<<
literal|18
expr_stmt|;
block|}
name|RecordId
name|childNameId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|template
operator|.
name|hasNoChildNodes
argument_list|()
condition|)
block|{
name|head
operator||=
literal|1
operator|<<
literal|29
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|template
operator|.
name|hasManyChildNodes
argument_list|()
condition|)
block|{
name|head
operator||=
literal|1
operator|<<
literal|28
expr_stmt|;
block|}
else|else
block|{
name|childNameId
operator|=
name|writeString
argument_list|(
name|template
operator|.
name|getChildName
argument_list|()
argument_list|)
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|childNameId
argument_list|)
expr_stmt|;
block|}
name|PropertyTemplate
index|[]
name|properties
init|=
name|template
operator|.
name|getPropertyTemplates
argument_list|()
decl_stmt|;
name|RecordId
index|[]
name|propertyNames
init|=
operator|new
name|RecordId
index|[
name|properties
operator|.
name|length
index|]
decl_stmt|;
name|byte
index|[]
name|propertyTypes
init|=
operator|new
name|byte
index|[
name|properties
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|properties
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|propertyNames
index|[
name|i
index|]
operator|=
name|writeString
argument_list|(
name|properties
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Type
argument_list|<
name|?
argument_list|>
name|type
init|=
name|properties
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|propertyTypes
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
operator|-
name|type
operator|.
name|tag
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|propertyTypes
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|type
operator|.
name|tag
argument_list|()
expr_stmt|;
block|}
block|}
name|ids
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|propertyNames
argument_list|)
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|propertyNames
operator|.
name|length
operator|<
operator|(
literal|1
operator|<<
literal|18
operator|)
argument_list|)
expr_stmt|;
name|head
operator||=
name|propertyNames
operator|.
name|length
expr_stmt|;
name|id
operator|=
name|prepare
argument_list|(
literal|4
operator|+
name|propertyTypes
operator|.
name|length
argument_list|,
name|ids
argument_list|)
expr_stmt|;
name|writeInt
argument_list|(
name|head
argument_list|)
expr_stmt|;
if|if
condition|(
name|primaryId
operator|!=
literal|null
condition|)
block|{
name|writeRecordId
argument_list|(
name|primaryId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mixinIds
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RecordId
name|mixinId
range|:
name|mixinIds
control|)
block|{
name|writeRecordId
argument_list|(
name|mixinId
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|childNameId
operator|!=
literal|null
condition|)
block|{
name|writeRecordId
argument_list|(
name|childNameId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propertyNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|writeRecordId
argument_list|(
name|propertyNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
name|propertyTypes
index|[
name|i
index|]
expr_stmt|;
block|}
name|templates
operator|.
name|put
argument_list|(
name|template
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
specifier|public
name|SegmentNodeState
name|writeNode
parameter_list|(
name|NodeState
name|state
parameter_list|)
block|{
if|if
condition|(
name|state
operator|instanceof
name|SegmentNodeState
condition|)
block|{
return|return
operator|(
name|SegmentNodeState
operator|)
name|state
return|;
block|}
name|SegmentNodeState
name|before
init|=
literal|null
decl_stmt|;
name|ModifiedNodeState
name|after
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|state
operator|instanceof
name|ModifiedNodeState
condition|)
block|{
name|after
operator|=
operator|(
name|ModifiedNodeState
operator|)
name|state
expr_stmt|;
name|NodeState
name|base
init|=
name|after
operator|.
name|getBaseState
argument_list|()
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|SegmentNodeState
condition|)
block|{
name|before
operator|=
operator|(
name|SegmentNodeState
operator|)
name|base
expr_stmt|;
block|}
block|}
name|Template
name|template
init|=
operator|new
name|Template
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|RecordId
name|templateId
decl_stmt|;
if|if
condition|(
name|before
operator|!=
literal|null
operator|&&
name|template
operator|.
name|equals
argument_list|(
name|before
operator|.
name|getTemplate
argument_list|()
argument_list|)
condition|)
block|{
name|templateId
operator|=
name|before
operator|.
name|getTemplateId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|templateId
operator|=
name|writeTemplate
argument_list|(
name|template
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|RecordId
argument_list|>
name|ids
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|templateId
argument_list|)
expr_stmt|;
if|if
condition|(
name|template
operator|.
name|hasManyChildNodes
argument_list|()
condition|)
block|{
name|MapRecord
name|base
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|childNodes
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|before
operator|!=
literal|null
operator|&&
name|before
operator|.
name|getChildNodeCount
argument_list|()
operator|>
literal|1
operator|&&
name|after
operator|.
name|getChildNodeCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|base
operator|=
name|before
operator|.
name|getChildNodeMap
argument_list|()
expr_stmt|;
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
operator|new
name|DefaultNodeStateDiff
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|childNodes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|writeNode
argument_list|(
name|after
argument_list|)
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|childNodes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|writeNode
argument_list|(
name|after
argument_list|)
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
name|childNodes
operator|.
name|put
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|base
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|state
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|childNodes
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|writeNode
argument_list|(
name|entry
operator|.
name|getNodeState
argument_list|()
argument_list|)
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ids
operator|.
name|add
argument_list|(
name|writeMap
argument_list|(
name|base
argument_list|,
name|childNodes
argument_list|)
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|template
operator|.
name|hasNoChildNodes
argument_list|()
condition|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|writeNode
argument_list|(
name|state
operator|.
name|getChildNode
argument_list|(
name|template
operator|.
name|getChildName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PropertyTemplate
name|pt
range|:
name|template
operator|.
name|getPropertyTemplates
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|pt
operator|.
name|getName
argument_list|()
decl_stmt|;
name|PropertyState
name|property
init|=
name|state
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|instanceof
name|SegmentPropertyState
condition|)
block|{
name|ids
operator|.
name|add
argument_list|(
operator|(
operator|(
name|SegmentPropertyState
operator|)
name|property
operator|)
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|previousValues
init|=
name|emptyMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|before
operator|!=
literal|null
condition|)
block|{
comment|// reuse previously stored property values, if possible
name|PropertyState
name|beforeProperty
init|=
name|before
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|beforeProperty
operator|instanceof
name|SegmentPropertyState
operator|&&
name|beforeProperty
operator|.
name|isArray
argument_list|()
operator|&&
name|beforeProperty
operator|.
name|getType
argument_list|()
operator|!=
name|Type
operator|.
name|BINARIES
condition|)
block|{
name|SegmentPropertyState
name|segmentProperty
init|=
operator|(
name|SegmentPropertyState
operator|)
name|beforeProperty
decl_stmt|;
name|previousValues
operator|=
name|segmentProperty
operator|.
name|getValueRecords
argument_list|()
expr_stmt|;
block|}
block|}
name|ids
operator|.
name|add
argument_list|(
name|writeProperty
argument_list|(
name|property
argument_list|,
name|previousValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|RecordId
name|recordId
init|=
name|prepare
argument_list|(
literal|0
argument_list|,
name|ids
argument_list|)
decl_stmt|;
for|for
control|(
name|RecordId
name|id
range|:
name|ids
control|)
block|{
name|writeRecordId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SegmentNodeState
argument_list|(
name|store
argument_list|,
name|recordId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

