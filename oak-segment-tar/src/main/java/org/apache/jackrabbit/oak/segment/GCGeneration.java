begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|GCGeneration
block|{
specifier|public
specifier|static
specifier|final
name|GCGeneration
name|NULL
init|=
operator|new
name|GCGeneration
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|generation
decl_stmt|;
specifier|public
name|GCGeneration
parameter_list|(
name|int
name|generation
parameter_list|)
block|{
name|this
operator|.
name|generation
operator|=
name|generation
expr_stmt|;
block|}
specifier|public
name|int
name|getGeneration
parameter_list|()
block|{
return|return
name|generation
return|;
block|}
specifier|public
name|GCGeneration
name|next
parameter_list|()
block|{
return|return
operator|new
name|GCGeneration
argument_list|(
name|generation
operator|+
literal|1
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareWith
parameter_list|(
annotation|@
name|Nonnull
name|GCGeneration
name|that
parameter_list|)
block|{
return|return
name|generation
operator|-
name|that
operator|.
name|generation
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|other
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|other
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|GCGeneration
name|that
init|=
operator|(
name|GCGeneration
operator|)
name|other
decl_stmt|;
return|return
name|generation
operator|==
name|that
operator|.
name|generation
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|generation
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"GCGeneration{"
operator|+
literal|"generation="
operator|+
name|generation
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

