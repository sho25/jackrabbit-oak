begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_comment
comment|/**  * Compares the LIRS cache by concurrently reading.  */
end_comment

begin_class
specifier|public
class|class
name|ConcurrentPerformanceTest
block|{
specifier|private
specifier|static
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|buildCache
parameter_list|(
name|boolean
name|lirs
parameter_list|,
name|int
name|concurrencyLevel
parameter_list|)
block|{
if|if
condition|(
name|lirs
condition|)
block|{
return|return
operator|new
name|CacheLIRS
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|segmentCount
argument_list|(
name|concurrencyLevel
argument_list|)
operator|.
name|maximumSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
name|concurrencyLevel
argument_list|)
operator|.
name|maximumSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|testPerformance
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"warmup..."
argument_list|)
expr_stmt|;
name|testPerformance
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPerformance
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testPerformance
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPerformance
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|concurrencyLevel
init|=
literal|1
init|;
name|concurrencyLevel
operator|<=
literal|128
condition|;
name|concurrencyLevel
operator|*=
literal|4
control|)
block|{
for|for
control|(
name|int
name|threadCount
init|=
literal|1
init|;
name|threadCount
operator|<=
literal|128
condition|;
name|threadCount
operator|*=
literal|4
control|)
block|{
name|testPerformance
argument_list|(
name|threadCount
argument_list|,
name|concurrencyLevel
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|concurrencyLevel
init|=
literal|1
init|;
name|concurrencyLevel
operator|<=
literal|128
condition|;
name|concurrencyLevel
operator|*=
literal|4
control|)
block|{
for|for
control|(
name|int
name|threadCount
init|=
literal|1
init|;
name|threadCount
operator|<=
literal|128
condition|;
name|threadCount
operator|*=
literal|4
control|)
block|{
name|testPerformance
argument_list|(
name|threadCount
argument_list|,
name|concurrencyLevel
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|testPerformance
parameter_list|(
name|int
name|threadCount
parameter_list|,
name|int
name|concurrencyLevel
parameter_list|,
name|boolean
name|lirs
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|buildCache
argument_list|(
name|lirs
argument_list|,
name|concurrencyLevel
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|threadCount
index|]
decl_stmt|;
specifier|final
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
specifier|final
name|int
name|key
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|20000
argument_list|)
decl_stmt|;
try|try
block|{
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|,
operator|new
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|key
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|count
operator|.
name|set
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|=
name|t
expr_stmt|;
block|}
comment|// test for 1000 ms
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"threads "
operator|+
name|threadCount
operator|+
literal|" concurrency "
operator|+
name|concurrencyLevel
operator|+
literal|" ops/s "
operator|+
name|count
operator|+
literal|" "
operator|+
operator|(
name|lirs
condition|?
literal|"lirs"
else|:
literal|"guava"
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// if the thread is still alive after 1 second, we assume
comment|// there is a deadlock - we just let the threads alive,
comment|// but report a failure (what else could we do?)
if|if
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|assertFalse
argument_list|(
literal|"Deadlock detected!"
argument_list|,
name|t
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

