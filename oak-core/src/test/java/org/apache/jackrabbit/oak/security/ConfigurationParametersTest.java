begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_comment
comment|/**  * ConfigurationParametersTest...  */
end_comment

begin_class
specifier|public
class|class
name|ConfigurationParametersTest
block|{
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultValue
parameter_list|()
block|{
name|TestObject
name|testObject
init|=
operator|new
name|TestObject
argument_list|(
literal|"t"
argument_list|)
decl_stmt|;
name|Integer
name|int1000
init|=
operator|new
name|Integer
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|ConfigurationParameters
name|options
init|=
operator|new
name|ConfigurationParameters
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"some"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testObject
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"some"
argument_list|,
name|testObject
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int1000
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"some"
argument_list|,
name|int1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConversion
parameter_list|()
block|{
name|TestObject
name|testObject
init|=
operator|new
name|TestObject
argument_list|(
literal|"t"
argument_list|)
decl_stmt|;
name|Integer
name|int1000
init|=
operator|new
name|Integer
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"TEST"
argument_list|,
name|testObject
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"String"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"Int2"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"Int3"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|ConfigurationParameters
name|options
init|=
operator|new
name|ConfigurationParameters
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"TEST"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testObject
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"TEST"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testObject
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"TEST"
argument_list|,
name|testObject
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"t"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"TEST"
argument_list|,
literal|"defaultString"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1000"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"String"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int1000
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"String"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Long
argument_list|(
literal|1000
argument_list|)
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"String"
argument_list|,
operator|new
name|Long
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1000"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"String"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int1000
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"Int2"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int1000
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"Int2"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1000"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"Int2"
argument_list|,
literal|"1000"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"Int3"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int1000
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"Int3"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int1000
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"Int3"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1000"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"Int3"
argument_list|,
literal|"1000"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|TestObject
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
name|TestObject
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|TestObject
condition|)
block|{
return|return
name|name
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|TestObject
operator|)
name|object
operator|)
operator|.
name|name
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

