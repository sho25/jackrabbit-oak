begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|spi
operator|.
name|query
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test the IndexName class  */
end_comment

begin_class
specifier|public
class|class
name|IndexNameTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|parse
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"/lucene base=/lucene product=0 custom=0"
argument_list|,
name|IndexName
operator|.
name|parse
argument_list|(
literal|"/lucene"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/lucene-1 base=/lucene versioned product=1 custom=0"
argument_list|,
name|IndexName
operator|.
name|parse
argument_list|(
literal|"/lucene-1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/lucene-2 base=/lucene versioned product=2 custom=0"
argument_list|,
name|IndexName
operator|.
name|parse
argument_list|(
literal|"/lucene-2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/lucene-custom-3 base=/lucene versioned product=0 custom=3"
argument_list|,
name|IndexName
operator|.
name|parse
argument_list|(
literal|"/lucene-custom-3"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/lucene-4-custom-5 base=/lucene versioned product=4 custom=5"
argument_list|,
name|IndexName
operator|.
name|parse
argument_list|(
literal|"/lucene-4-custom-5"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/lucene-12-custom-34 base=/lucene versioned product=12 custom=34"
argument_list|,
name|IndexName
operator|.
name|parse
argument_list|(
literal|"/lucene-12-custom-34"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// illegal
name|assertEquals
argument_list|(
literal|"/lucene-abc base=/lucene-abc product=0 custom=0 illegal"
argument_list|,
name|IndexName
operator|.
name|parse
argument_list|(
literal|"/lucene-abc"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/lucene-abc-custom-2 base=/lucene-abc-custom-2 product=0 custom=0 illegal"
argument_list|,
name|IndexName
operator|.
name|parse
argument_list|(
literal|"/lucene-abc-custom-2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compare
parameter_list|()
block|{
name|IndexName
name|p0
init|=
name|IndexName
operator|.
name|parse
argument_list|(
literal|"/lucene"
argument_list|)
decl_stmt|;
name|IndexName
name|p0a
init|=
name|IndexName
operator|.
name|parse
argument_list|(
literal|"/lucene-0"
argument_list|)
decl_stmt|;
name|IndexName
name|p0b
init|=
name|IndexName
operator|.
name|parse
argument_list|(
literal|"/lucene-0-custom-0"
argument_list|)
decl_stmt|;
name|IndexName
name|p0c1
init|=
name|IndexName
operator|.
name|parse
argument_list|(
literal|"/lucene-custom-1"
argument_list|)
decl_stmt|;
name|IndexName
name|p0c1a
init|=
name|IndexName
operator|.
name|parse
argument_list|(
literal|"/lucene-0-custom-1"
argument_list|)
decl_stmt|;
name|IndexName
name|p1
init|=
name|IndexName
operator|.
name|parse
argument_list|(
literal|"/lucene-1"
argument_list|)
decl_stmt|;
name|IndexName
name|p1c1
init|=
name|IndexName
operator|.
name|parse
argument_list|(
literal|"/lucene-1-custom-1"
argument_list|)
decl_stmt|;
name|IndexName
name|p1c2
init|=
name|IndexName
operator|.
name|parse
argument_list|(
literal|"/lucene-1-custom-2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|p0
operator|.
name|compareTo
argument_list|(
name|p0a
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p0
operator|.
name|compareTo
argument_list|(
name|p0b
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p0a
operator|.
name|compareTo
argument_list|(
name|p0b
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p0c1
operator|.
name|compareTo
argument_list|(
name|p0c1a
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p0
operator|.
name|compareTo
argument_list|(
name|p0c1
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p0c1
operator|.
name|compareTo
argument_list|(
name|p1
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p1
operator|.
name|compareTo
argument_list|(
name|p1c1
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p1c1
operator|.
name|compareTo
argument_list|(
name|p1c2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|IndexName
name|a
init|=
name|IndexName
operator|.
name|parse
argument_list|(
literal|"/luceneA"
argument_list|)
decl_stmt|;
name|IndexName
name|b
init|=
name|IndexName
operator|.
name|parse
argument_list|(
literal|"/luceneB"
argument_list|)
decl_stmt|;
name|IndexName
name|c
init|=
name|IndexName
operator|.
name|parse
argument_list|(
literal|"/luceneC"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|b
operator|.
name|compareTo
argument_list|(
name|c
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

