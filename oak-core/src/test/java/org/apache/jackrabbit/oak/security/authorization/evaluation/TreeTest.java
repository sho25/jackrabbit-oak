begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|evaluation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|TreeTest
extends|extends
name|AbstractOakCoreTest
block|{
specifier|private
name|Root
name|testRoot
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|setupPermission
argument_list|(
literal|"/"
argument_list|,
name|testPrincipal
argument_list|,
literal|true
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
expr_stmt|;
name|setupPermission
argument_list|(
literal|"/a/bb"
argument_list|,
name|testPrincipal
argument_list|,
literal|false
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
expr_stmt|;
name|testRoot
operator|=
name|getTestRoot
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasChild
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|rootTree
init|=
name|testRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rootTree
operator|.
name|hasChild
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rootTree
operator|.
name|hasChild
argument_list|(
name|AccessControlConstants
operator|.
name|REP_POLICY
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|a
init|=
name|rootTree
operator|.
name|getChild
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|hasChild
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|hasChild
argument_list|(
literal|"bb"
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|b
init|=
name|a
operator|.
name|getChild
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|b
operator|.
name|hasChild
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChild
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|rootTree
init|=
name|testRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rootTree
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|a
init|=
name|rootTree
operator|.
name|getChild
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|b
init|=
name|a
operator|.
name|getChild
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|b
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|b
operator|.
name|getChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|getChild
argument_list|(
literal|"bb"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPolicyChild
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|'/'
operator|+
name|AccessControlConstants
operator|.
name|REP_POLICY
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// 'testUser' must not have access to the policy node
name|Tree
name|rootTree
init|=
name|testRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|rootTree
operator|.
name|hasChild
argument_list|(
name|AccessControlConstants
operator|.
name|REP_POLICY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rootTree
operator|.
name|getChild
argument_list|(
name|AccessControlConstants
operator|.
name|REP_POLICY
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChildrenCount
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|cntRoot
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getChildrenCount
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|long
name|cntA
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/a"
argument_list|)
operator|.
name|getChildrenCount
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
comment|// 'testUser' may only see 'regular' child nodes -> count must be adjusted.
name|assertEquals
argument_list|(
name|cntRoot
operator|-
literal|1
argument_list|,
name|testRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getChildrenCount
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cntA
operator|-
literal|1
argument_list|,
name|testRoot
operator|.
name|getTree
argument_list|(
literal|"/a"
argument_list|)
operator|.
name|getChildrenCount
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
comment|// for the following nodes the cnt must not differ
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/a/b"
argument_list|,
literal|"/a/b/c"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|assertEquals
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
operator|.
name|getChildrenCount
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|testRoot
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
operator|.
name|getChildrenCount
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChildren
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Tree
name|t
range|:
name|testRoot
operator|.
name|getTree
argument_list|(
literal|"/a"
argument_list|)
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
literal|"b"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Child "
operator|+
name|t
operator|.
name|getName
argument_list|()
operator|+
literal|" should not be accessible."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @see<a href="https://issues.apache.org/jira/browse/OAK-842">OAK-842</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testOrderableChildren
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|a
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/a"
argument_list|)
decl_stmt|;
name|a
operator|.
name|setOrderableChildren
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|Tree
name|t
range|:
name|testRoot
operator|.
name|getTree
argument_list|(
literal|"/a"
argument_list|)
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
literal|"b"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Child "
operator|+
name|t
operator|.
name|getName
argument_list|()
operator|+
literal|" should not be accessible."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
literal|"/a"
argument_list|,
name|testPrincipal
argument_list|,
literal|false
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|a
init|=
name|testRoot
operator|.
name|getTree
argument_list|(
literal|"/a"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|hasProperty
argument_list|(
literal|"aProp"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
literal|"/a"
argument_list|,
name|testPrincipal
argument_list|,
literal|false
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|a
init|=
name|testRoot
operator|.
name|getTree
argument_list|(
literal|"/a"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|a
operator|.
name|getProperty
argument_list|(
literal|"aProp"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPropertyStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
literal|"/a"
argument_list|,
name|testPrincipal
argument_list|,
literal|false
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|)
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|a
init|=
name|testRoot
operator|.
name|getTree
argument_list|(
literal|"/a"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|PropertyState
name|p
init|=
name|a
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Tree
operator|.
name|Status
operator|.
name|EXISTING
argument_list|,
name|a
operator|.
name|getPropertyStatus
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPropertyCount
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
literal|"/a"
argument_list|,
name|testPrincipal
argument_list|,
literal|false
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|a
init|=
name|testRoot
operator|.
name|getTree
argument_list|(
literal|"/a"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|a
operator|.
name|getPropertyCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
literal|"/a"
argument_list|,
name|testPrincipal
argument_list|,
literal|false
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|a
init|=
name|testRoot
operator|.
name|getTree
argument_list|(
literal|"/a"
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|props
init|=
name|a
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|props
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

