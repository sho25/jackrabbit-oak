begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|test
operator|.
name|proxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInitializer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|EventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|nio
operator|.
name|NioEventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|SocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioServerSocketChannel
import|;
end_import

begin_class
specifier|public
class|class
name|NetworkErrorProxy
implements|implements
name|Closeable
block|{
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|bossThreadNumber
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|workerThreadNumber
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Channel
name|server
decl_stmt|;
specifier|private
specifier|final
name|EventLoopGroup
name|boss
init|=
operator|new
name|NioEventLoopGroup
argument_list|(
literal|0
argument_list|,
name|r
lambda|->
block|{
return|return
operator|new
name|Thread
argument_list|(
name|r
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"proxy-boss-%d"
argument_list|,
name|bossThreadNumber
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|EventLoopGroup
name|worker
init|=
operator|new
name|NioEventLoopGroup
argument_list|(
literal|0
argument_list|,
name|r
lambda|->
block|{
return|return
operator|new
name|Thread
argument_list|(
name|r
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"proxy-worker-%d"
argument_list|,
name|workerThreadNumber
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
specifier|public
name|NetworkErrorProxy
parameter_list|(
name|int
name|inboundPort
parameter_list|,
name|String
name|outboundHost
parameter_list|,
name|int
name|outboundPort
parameter_list|,
name|int
name|flipPosition
parameter_list|,
name|int
name|skipPosition
parameter_list|,
name|int
name|skipLength
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|ServerBootstrap
name|b
init|=
operator|new
name|ServerBootstrap
argument_list|()
operator|.
name|group
argument_list|(
name|boss
argument_list|,
name|worker
argument_list|)
operator|.
name|channel
argument_list|(
name|NioServerSocketChannel
operator|.
name|class
argument_list|)
operator|.
name|childHandler
argument_list|(
operator|new
name|ChannelInitializer
argument_list|<
name|SocketChannel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|initChannel
parameter_list|(
name|SocketChannel
name|ch
parameter_list|)
throws|throws
name|Exception
block|{
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
operator|new
name|ForwardHandler
argument_list|(
name|outboundHost
argument_list|,
name|outboundPort
argument_list|,
name|flipPosition
argument_list|,
name|skipPosition
argument_list|,
name|skipLength
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|server
operator|=
name|b
operator|.
name|bind
argument_list|(
name|inboundPort
argument_list|)
operator|.
name|sync
argument_list|()
operator|.
name|channel
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
name|boss
operator|.
name|shutdownGracefully
argument_list|(
literal|0
argument_list|,
literal|150
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|worker
operator|.
name|shutdownGracefully
argument_list|(
literal|0
argument_list|,
literal|150
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

