begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|Restriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: Authorization (Access Control Management)  * =============================================================================  *  * Title: The Globbing Restriction  * -----------------------------------------------------------------------------  *  * Goal:  * After having completed this exercises you should be familiar with the rep:glob  * restriction as present in the default implementation and able to use it to  * limit the effect of a given ACE to a given subtree.  *  * Exercises:  *  * For all tests fill in the expected result (matching, not-matching):  *  * - {@link #testWildcard}  * - {@link #testWildcard2}  * - {@link #testWildcard3}  * - {@link #testWildcard4}  * - {@link #testWildcard5}  * - {@link #testWildcard6}  * - {@link #testWildcard7}  * - {@link #testWildcard8}  * - {@link #testWildcard9}  * - {@link #testWildcard10}  * - {@link #testWildcardOnRoot}  * - {@link #testEmptyOnRoot}  * - {@link #testEmpty}  * - {@link #testPath}  * - {@link #testPath2}  * - {@link #testPath3}  *  *</pre>  *  * @see org.apache.jackrabbit.oak.security.authorization.restriction.GlobPattern  */
end_comment

begin_class
specifier|public
class|class
name|L8_GlobRestrictionTest
extends|extends
name|AbstractSecurityTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionPattern
name|globPattern
init|=
name|buildGlobPattern
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
comment|// EXERCISE: fill-in the expected result for the match (true or true|false) for the given set of paths:
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tests
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/"
argument_list|,
literal|true
operator||
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a"
argument_list|,
literal|true
operator||
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|true
operator||
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
literal|true
operator||
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cde"
argument_list|,
literal|true
operator||
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cde/e/f"
argument_list|,
literal|true
operator||
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/b/c"
argument_list|,
literal|true
operator||
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|globPattern
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWildcard2
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionPattern
name|globPattern
init|=
name|buildGlobPattern
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"*e"
argument_list|)
decl_stmt|;
comment|// EXERCISE: fill-in the expected result for the match (true or false) for the given set of paths:
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tests
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/gge"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/gge"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ceg"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/chee"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd/f/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd/f/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/efg"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/b/c"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|globPattern
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWildcard3
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionPattern
name|globPattern
init|=
name|buildGlobPattern
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"*/e"
argument_list|)
decl_stmt|;
comment|// EXERCISE: fill-in the expected result for the match (true or false) for the given set of paths:
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tests
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/b/c"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd/f/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/efg"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|globPattern
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWildcard4
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionPattern
name|globPattern
init|=
name|buildGlobPattern
argument_list|(
literal|"/a/b/c/e"
argument_list|,
literal|"/*"
argument_list|)
decl_stmt|;
comment|// EXERCISE: fill-in the expected result for the match (true or false) for the given set of paths:
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tests
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/e/"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/ef"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cee/d/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/f/g/h"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/e/f/g/h"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/d/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/e/d/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|globPattern
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWildcard5
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionPattern
name|globPattern
init|=
name|buildGlobPattern
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"e/*"
argument_list|)
decl_stmt|;
comment|// EXERCISE: fill-in the expected result for the match (true or false) for the given set of paths:
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tests
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/d/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cee/d/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/f/g/h"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|globPattern
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWildcard6
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionPattern
name|globPattern
init|=
name|buildGlobPattern
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"*e/*"
argument_list|)
decl_stmt|;
comment|// EXERCISE: fill-in the expected result for the match (true or false) for the given set of paths:
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tests
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cde/d/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ced/d/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cde"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/ed/f/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ceeeeeee/f/g/h"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|globPattern
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWildcard7
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionPattern
name|globPattern
init|=
name|buildGlobPattern
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"/*e/*"
argument_list|)
decl_stmt|;
comment|// EXERCISE: fill-in the expected result for the match (true or false) for the given set of paths:
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tests
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cde"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ced/d/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cde/d/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/de/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/ed/f/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|globPattern
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWildcard8
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionPattern
name|globPattern
init|=
name|buildGlobPattern
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"/*cat"
argument_list|)
decl_stmt|;
comment|// EXERCISE: fill-in the expected result for the match (true or false) for the given set of paths:
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tests
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cat"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ced/cat"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/cat"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/acat"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/cat/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/acat/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/cata/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/cate"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cat/ed/f/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/f/cat"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/f/acat"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|globPattern
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWildcard9
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionPattern
name|globPattern
init|=
name|buildGlobPattern
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"/*/cat"
argument_list|)
decl_stmt|;
comment|// EXERCISE: fill-in the expected result for the match (true or false) for the given set of paths:
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tests
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cat"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/cat"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/cate"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/acat"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/a/cat"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/cat/d"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/acat"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/cate"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/cat/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/acat/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/cata/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f/cat"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cat/ed/f/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ced/cat"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ced/f/cat"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|globPattern
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWildcard10
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionPattern
name|globPattern
init|=
name|buildGlobPattern
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"/cat*"
argument_list|)
decl_stmt|;
comment|// EXERCISE: fill-in the expected result for the match (true or false) for the given set of paths:
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tests
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cat"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cat/ed/f/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ced/cat"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ced/f/cat"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/cat"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/cats"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/cat"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/cats"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/cat"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/cats"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/acat"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/acat"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/cat/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/acat/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/cata/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/cat/s"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/cats/d/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|globPattern
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWildcardOnRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionPattern
name|globPattern
init|=
name|buildGlobPattern
argument_list|(
literal|"/"
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
comment|// EXERCISE: fill-in the expected result for the match (true or false) for the given set of paths:
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tests
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/b/"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/c/d"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/f/g/h"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/d/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|globPattern
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyOnRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionPattern
name|globPattern
init|=
name|buildGlobPattern
argument_list|(
literal|"/"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
comment|// EXERCISE: fill-in the expected result for the match (true or false) for the given set of paths:
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tests
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cde"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|globPattern
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionPattern
name|globPattern
init|=
name|buildGlobPattern
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
comment|// EXERCISE: fill-in the expected result for the match (true or false) for the given set of paths:
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tests
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cde"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|globPattern
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPath
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionPattern
name|globPattern
init|=
name|buildGlobPattern
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"d"
argument_list|)
decl_stmt|;
comment|// EXERCISE: fill-in the expected result for the match (true or false) for the given set of paths:
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tests
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cde"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|globPattern
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPath2
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionPattern
name|globPattern
init|=
name|buildGlobPattern
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"/d"
argument_list|)
decl_stmt|;
comment|// EXERCISE: fill-in the expected result for the match (true or false) for the given set of paths:
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tests
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cde"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|globPattern
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPath3
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionPattern
name|globPattern
init|=
name|buildGlobPattern
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"/d/"
argument_list|)
decl_stmt|;
comment|// EXERCISE: fill-in the expected result for the match (true or false) for the given set of paths:
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tests
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd/e"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd/e/f"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cde"
argument_list|,
literal|true
operator||
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|globPattern
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|RestrictionPattern
name|buildGlobPattern
parameter_list|(
annotation|@
name|NotNull
name|String
name|path
parameter_list|,
annotation|@
name|NotNull
name|String
name|glob
parameter_list|)
throws|throws
name|Exception
block|{
name|RestrictionProvider
name|rp
init|=
name|getConfig
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getRestrictionProvider
argument_list|()
decl_stmt|;
name|Restriction
name|restriction
init|=
name|rp
operator|.
name|createRestriction
argument_list|(
name|path
argument_list|,
name|AccessControlConstants
operator|.
name|REP_GLOB
argument_list|,
name|getValueFactory
argument_list|(
name|root
argument_list|)
operator|.
name|createValue
argument_list|(
name|glob
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|rp
operator|.
name|getPattern
argument_list|(
name|path
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|restriction
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|assertMatch
parameter_list|(
name|RestrictionPattern
name|pattern
parameter_list|,
name|String
name|testPath
parameter_list|,
name|boolean
name|expectedResult
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Pattern : "
operator|+
name|pattern
operator|+
literal|"; TestPath : "
operator|+
name|testPath
argument_list|,
name|expectedResult
argument_list|,
name|pattern
operator|.
name|matches
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

