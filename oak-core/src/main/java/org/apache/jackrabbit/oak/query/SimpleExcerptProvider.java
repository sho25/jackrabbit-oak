begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|AndImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|ConstraintImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|FullTextSearchImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|LiteralImpl
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
operator|.
name|encodeIllegalXMLCharacters
import|;
end_import

begin_class
specifier|public
class|class
name|SimpleExcerptProvider
block|{
specifier|private
specifier|static
specifier|final
name|String
name|REP_EXCERPT_FN
init|=
literal|"rep:excerpt(.)"
decl_stmt|;
specifier|private
specifier|static
name|int
name|maxFragmentSize
init|=
literal|150
decl_stmt|;
specifier|public
name|String
name|getExcerpt
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|columnName
parameter_list|,
name|Query
name|query
parameter_list|,
name|boolean
name|highlight
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Tree
name|t
init|=
name|query
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
operator|||
operator|!
name|t
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|filter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|columnName
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|p
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|columnName
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
name|t
operator|.
name|hasChild
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|t
operator|=
name|t
operator|.
name|getChild
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
name|filter
operator|=
name|extractExcerptProperty
argument_list|(
name|PathUtils
operator|.
name|getName
argument_list|(
name|columnName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filter
operator|=
name|extractExcerptProperty
argument_list|(
name|columnName
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|text
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|separator
init|=
literal|""
decl_stmt|;
for|for
control|(
name|PropertyState
name|p
range|:
name|t
operator|.
name|getProperties
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
operator|==
name|Type
operator|.
name|STRING
operator|.
name|tag
argument_list|()
operator|&&
operator|(
name|filter
operator|==
literal|null
operator|||
name|filter
operator|.
name|equalsIgnoreCase
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|text
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|separator
operator|=
literal|" "
expr_stmt|;
for|for
control|(
name|String
name|v
range|:
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
control|)
block|{
name|text
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|searchToken
init|=
name|extractFulltext
argument_list|(
name|query
operator|.
name|getConstraint
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|highlight
operator|&&
name|searchToken
operator|!=
literal|null
condition|)
block|{
return|return
name|highlight
argument_list|(
name|text
argument_list|,
name|searchToken
argument_list|)
return|;
block|}
return|return
name|noHighlight
argument_list|(
name|text
argument_list|)
return|;
block|}
specifier|private
name|String
name|extractExcerptProperty
parameter_list|(
name|String
name|column
parameter_list|)
block|{
comment|// most frequent case first
if|if
condition|(
name|REP_EXCERPT_FN
operator|.
name|equalsIgnoreCase
argument_list|(
name|column
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|column
operator|.
name|substring
argument_list|(
name|column
operator|.
name|indexOf
argument_list|(
literal|"("
argument_list|)
operator|+
literal|1
argument_list|,
name|column
operator|.
name|indexOf
argument_list|(
literal|")"
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|extractFulltext
parameter_list|(
name|ConstraintImpl
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|instanceof
name|FullTextSearchImpl
condition|)
block|{
name|FullTextSearchImpl
name|f
init|=
operator|(
name|FullTextSearchImpl
operator|)
name|c
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|getFullTextSearchExpression
argument_list|()
operator|instanceof
name|LiteralImpl
condition|)
block|{
name|LiteralImpl
name|l
init|=
operator|(
name|LiteralImpl
operator|)
name|f
operator|.
name|getFullTextSearchExpression
argument_list|()
decl_stmt|;
return|return
name|l
operator|.
name|getLiteralValue
argument_list|()
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
if|if
condition|(
name|c
operator|instanceof
name|AndImpl
condition|)
block|{
name|AndImpl
name|a
init|=
operator|(
name|AndImpl
operator|)
name|c
decl_stmt|;
name|String
name|t
init|=
name|extractFulltext
argument_list|(
name|a
operator|.
name|getConstraint1
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
return|return
name|extractFulltext
argument_list|(
name|a
operator|.
name|getConstraint2
argument_list|()
argument_list|)
return|;
block|}
return|return
name|t
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|tokenize
parameter_list|(
name|String
name|in
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuilder
name|token
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|quote
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|in
operator|.
name|length
argument_list|()
condition|;
control|)
block|{
specifier|final
name|int
name|c
init|=
name|in
operator|.
name|codePointAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|Character
operator|.
name|charCount
argument_list|(
name|c
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|' '
case|:
if|if
condition|(
name|quote
condition|)
block|{
name|token
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|add
argument_list|(
name|token
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|'"'
case|:
case|case
literal|'\''
case|:
if|if
condition|(
name|quote
condition|)
block|{
name|quote
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|add
argument_list|(
name|token
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|quote
operator|=
literal|true
expr_stmt|;
block|}
break|break;
default|default:
name|token
operator|.
name|append
argument_list|(
operator|new
name|String
argument_list|(
name|Character
operator|.
name|toChars
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|i
operator|+=
name|length
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|add
argument_list|(
name|token
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|private
specifier|static
name|String
name|noHighlight
parameter_list|(
name|StringBuilder
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|.
name|length
argument_list|()
operator|>
name|maxFragmentSize
condition|)
block|{
name|int
name|lastSpace
init|=
name|text
operator|.
name|lastIndexOf
argument_list|(
literal|" "
argument_list|,
name|maxFragmentSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastSpace
operator|!=
operator|-
literal|1
condition|)
block|{
name|text
operator|.
name|setLength
argument_list|(
name|lastSpace
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|text
operator|.
name|setLength
argument_list|(
name|maxFragmentSize
argument_list|)
expr_stmt|;
block|}
name|text
operator|.
name|append
argument_list|(
literal|" ..."
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|excerpt
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"<div><span>"
argument_list|)
decl_stmt|;
name|excerpt
operator|.
name|append
argument_list|(
name|encodeIllegalXMLCharacters
argument_list|(
name|text
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|excerpt
operator|.
name|append
argument_list|(
literal|"</span></div>"
argument_list|)
expr_stmt|;
return|return
name|excerpt
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|highlight
parameter_list|(
name|StringBuilder
name|text
parameter_list|,
name|String
name|searchToken
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
name|tokenize
argument_list|(
name|searchToken
argument_list|)
decl_stmt|;
name|text
operator|=
operator|new
name|StringBuilder
argument_list|(
name|encodeIllegalXMLCharacters
argument_list|(
name|text
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|token
range|:
name|tokens
control|)
block|{
name|text
operator|=
name|replaceAll
argument_list|(
name|text
argument_list|,
name|token
argument_list|,
literal|"<strong>"
argument_list|,
literal|"</strong>"
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|excerpt
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"<div><span>"
argument_list|)
decl_stmt|;
name|excerpt
operator|.
name|append
argument_list|(
name|text
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|excerpt
operator|.
name|append
argument_list|(
literal|"</span></div>"
argument_list|)
expr_stmt|;
return|return
name|excerpt
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|StringBuilder
name|replaceAll
parameter_list|(
name|StringBuilder
name|in
parameter_list|,
name|String
name|token
parameter_list|,
name|String
name|start
parameter_list|,
name|String
name|end
parameter_list|)
block|{
name|boolean
name|isLike
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|endsWith
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|token
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|isLike
operator|=
literal|true
expr_stmt|;
block|}
name|int
name|index
init|=
name|in
operator|.
name|indexOf
argument_list|(
name|token
argument_list|)
decl_stmt|;
while|while
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|int
name|endIndex
init|=
name|index
operator|+
name|token
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|isLike
condition|)
block|{
name|int
name|nextSpace
init|=
name|in
operator|.
name|indexOf
argument_list|(
literal|" "
argument_list|,
name|endIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextSpace
operator|!=
operator|-
literal|1
condition|)
block|{
name|endIndex
operator|=
name|nextSpace
expr_stmt|;
block|}
else|else
block|{
name|endIndex
operator|=
name|in
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|current
init|=
name|in
operator|.
name|substring
argument_list|(
name|index
argument_list|,
name|endIndex
argument_list|)
decl_stmt|;
name|StringBuilder
name|newToken
init|=
operator|new
name|StringBuilder
argument_list|(
name|start
argument_list|)
decl_stmt|;
name|newToken
operator|.
name|append
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|newToken
operator|.
name|append
argument_list|(
name|end
argument_list|)
expr_stmt|;
name|String
name|newTokenS
init|=
name|newToken
operator|.
name|toString
argument_list|()
decl_stmt|;
name|in
operator|.
name|replace
argument_list|(
name|index
argument_list|,
name|index
operator|+
name|current
operator|.
name|length
argument_list|()
argument_list|,
name|newTokenS
argument_list|)
expr_stmt|;
name|index
operator|=
name|in
operator|.
name|indexOf
argument_list|(
name|token
argument_list|,
name|in
operator|.
name|lastIndexOf
argument_list|(
name|newTokenS
argument_list|)
operator|+
name|newTokenS
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|in
return|;
block|}
block|}
end_class

end_unit

