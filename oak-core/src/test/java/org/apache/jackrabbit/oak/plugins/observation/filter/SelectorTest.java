begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
operator|.
name|alwaysTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|ImmutableTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|UniversalFilter
operator|.
name|Selector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|SelectorTest
block|{
specifier|public
specifier|static
specifier|final
name|Predicate
argument_list|<
name|Tree
argument_list|>
name|ALL
init|=
name|alwaysTrue
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|root
decl_stmt|;
block|{
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|root
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|final
name|ImmutableTree
name|rootTree
init|=
operator|new
name|ImmutableTree
argument_list|(
name|root
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|selectDescendant
parameter_list|()
block|{
name|String
name|path
init|=
literal|"/a/b/c"
decl_stmt|;
name|Selector
name|selector
init|=
operator|new
name|RelativePathSelector
argument_list|(
name|path
argument_list|,
name|Selectors
operator|.
name|PARENT
argument_list|)
decl_stmt|;
name|UniversalFilter
name|filter
init|=
operator|new
name|UniversalFilter
argument_list|(
name|rootTree
argument_list|,
name|rootTree
argument_list|,
name|selector
argument_list|,
name|ALL
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|selector
operator|.
name|select
argument_list|(
name|filter
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|selectThis
parameter_list|()
block|{
name|String
name|path
init|=
literal|"."
decl_stmt|;
name|Selector
name|selector
init|=
operator|new
name|RelativePathSelector
argument_list|(
name|path
argument_list|,
name|Selectors
operator|.
name|PARENT
argument_list|)
decl_stmt|;
name|UniversalFilter
name|filter
init|=
operator|new
name|UniversalFilter
argument_list|(
name|rootTree
argument_list|,
name|rootTree
argument_list|,
name|selector
argument_list|,
name|ALL
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rootTree
operator|.
name|getPath
argument_list|()
argument_list|,
name|selector
operator|.
name|select
argument_list|(
name|filter
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|selectAncestor
parameter_list|()
block|{
name|String
name|path
init|=
literal|"../.."
decl_stmt|;
name|Selector
name|selector
init|=
operator|new
name|RelativePathSelector
argument_list|(
name|path
argument_list|,
name|Selectors
operator|.
name|PARENT
argument_list|)
decl_stmt|;
name|UniversalFilter
name|filter
init|=
operator|new
name|UniversalFilter
argument_list|(
name|rootTree
operator|.
name|getChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|rootTree
argument_list|,
name|selector
argument_list|,
name|ALL
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/a"
argument_list|,
name|selector
operator|.
name|select
argument_list|(
name|filter
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|selectAncestorOfRoot
parameter_list|()
block|{
name|String
name|path
init|=
literal|"../.."
decl_stmt|;
name|Selector
name|selector
init|=
operator|new
name|RelativePathSelector
argument_list|(
name|path
argument_list|,
name|Selectors
operator|.
name|PARENT
argument_list|)
decl_stmt|;
name|UniversalFilter
name|filter
init|=
operator|new
name|UniversalFilter
argument_list|(
name|rootTree
argument_list|,
name|rootTree
argument_list|,
name|selector
argument_list|,
name|ALL
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"/a"
argument_list|,
name|selector
operator|.
name|select
argument_list|(
name|filter
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

