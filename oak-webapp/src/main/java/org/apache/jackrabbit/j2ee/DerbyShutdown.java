begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|j2ee
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContextEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContextListener
import|;
end_import

begin_comment
comment|/**  * Servlet context listener that releases all remaining Derby resources  * when the web application is undeployed. The resources are released only  * if the Derby classes were loaded from within this webapp.  *  * @see<a href="https://issues.apache.org/jira/browse/JCR-1301">JCR-1301</a>  */
end_comment

begin_class
specifier|public
class|class
name|DerbyShutdown
implements|implements
name|ServletContextListener
block|{
specifier|public
name|void
name|contextInitialized
parameter_list|(
name|ServletContextEvent
name|event
parameter_list|)
block|{     }
specifier|public
name|void
name|contextDestroyed
parameter_list|(
name|ServletContextEvent
name|event
parameter_list|)
block|{
name|ClassLoader
name|loader
init|=
name|DerbyShutdown
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
comment|// Deregister all JDBC drivers loaded from this webapp
name|Enumeration
argument_list|<
name|Driver
argument_list|>
name|drivers
init|=
name|DriverManager
operator|.
name|getDrivers
argument_list|()
decl_stmt|;
while|while
condition|(
name|drivers
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|Driver
name|driver
init|=
name|drivers
operator|.
name|nextElement
argument_list|()
decl_stmt|;
comment|// Check if this driver comes from this webapp
if|if
condition|(
name|driver
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|==
name|loader
condition|)
block|{
try|try
block|{
name|DriverManager
operator|.
name|deregisterDriver
argument_list|(
name|driver
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ignore
parameter_list|)
block|{                 }
block|}
block|}
comment|// Explicitly tell Derby to release all remaining resources.
comment|// Use reflection to avoid problems when the Derby is not used.
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|monitorClass
init|=
name|loader
operator|.
name|loadClass
argument_list|(
literal|"org.apache.derby.iapi.services.monitor.Monitor"
argument_list|)
decl_stmt|;
if|if
condition|(
name|monitorClass
operator|.
name|getClassLoader
argument_list|()
operator|==
name|loader
condition|)
block|{
name|Method
name|getMonitorMethod
init|=
name|monitorClass
operator|.
name|getMethod
argument_list|(
literal|"getMonitor"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Object
name|monitor
init|=
name|getMonitorMethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|monitor
operator|!=
literal|null
condition|)
block|{
name|Method
name|shutdownMethod
init|=
name|monitor
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"shutdown"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|shutdownMethod
operator|.
name|invoke
argument_list|(
name|monitor
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{         }
block|}
block|}
end_class

end_unit

