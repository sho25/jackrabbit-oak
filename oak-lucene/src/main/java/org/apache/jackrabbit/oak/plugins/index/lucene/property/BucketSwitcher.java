begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
operator|.
name|HybridPropertyIndexUtil
operator|.
name|PROP_HEAD_BUCKET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
operator|.
name|HybridPropertyIndexUtil
operator|.
name|PROP_ASYNC_INDEXED_TO_TIME_AT_SWITCH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
operator|.
name|HybridPropertyIndexUtil
operator|.
name|PROP_PREVIOUS_BUCKET
import|;
end_import

begin_comment
comment|/**  * Takes care of switching the buckets used by non unique property indexes  * based on the associated async indexer lastIndexedTo time.  *  * It also ensures that unnecessary changes are not done if the property index  * does not get updated  */
end_comment

begin_class
class|class
name|BucketSwitcher
block|{
specifier|private
specifier|final
name|NodeBuilder
name|builder
decl_stmt|;
specifier|public
name|BucketSwitcher
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|builder
operator|=
name|builder
expr_stmt|;
block|}
specifier|public
name|boolean
name|switchBucket
parameter_list|(
name|long
name|lastIndexedTo
parameter_list|)
block|{
name|String
name|head
init|=
name|builder
operator|.
name|getString
argument_list|(
name|PROP_HEAD_BUCKET
argument_list|)
decl_stmt|;
if|if
condition|(
name|head
operator|==
literal|null
condition|)
block|{
comment|//Cleaner ran before any updates to index
comment|//nothing to do further
return|return
literal|false
return|;
block|}
name|NodeBuilder
name|headb
init|=
name|builder
operator|.
name|getChildNode
argument_list|(
name|head
argument_list|)
decl_stmt|;
name|long
name|headLastIndexedTo
init|=
name|getOptionalValue
argument_list|(
name|headb
argument_list|,
name|PROP_ASYNC_INDEXED_TO_TIME_AT_SWITCH
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|headLastIndexedTo
operator|>
name|lastIndexedTo
condition|)
block|{
comment|//> Should not happen in general as it means that
comment|//async indexer clock switched back for some reason
return|return
literal|false
return|;
block|}
if|if
condition|(
name|headLastIndexedTo
operator|==
name|lastIndexedTo
condition|)
block|{
comment|//Async indexer has yet not moved so keep current state
return|return
literal|false
return|;
block|}
if|if
condition|(
name|asyncIndexedToTimeSameAsPrevious
argument_list|(
name|lastIndexedTo
argument_list|)
condition|)
block|{
comment|//Async indexer has yet not moved so keep current state
return|return
literal|false
return|;
block|}
if|if
condition|(
name|headb
operator|.
name|getChildNodeCount
argument_list|(
literal|1
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|//Bucket non empty case
comment|//Create new head bucket and switch previous to current head
name|String
name|nextHeadName
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|head
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
name|nextHeadName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|PROP_HEAD_BUCKET
argument_list|,
name|nextHeadName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|PROP_PREVIOUS_BUCKET
argument_list|,
name|head
argument_list|)
expr_stmt|;
name|headb
operator|.
name|setProperty
argument_list|(
name|PROP_ASYNC_INDEXED_TO_TIME_AT_SWITCH
argument_list|,
name|lastIndexedTo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Bucket remains empty
comment|//Avoid unnecessary new bucket creation or any other changes
if|if
condition|(
name|headLastIndexedTo
operator|==
literal|0
condition|)
block|{
comment|//Only update time if not already set
name|headb
operator|.
name|setProperty
argument_list|(
name|PROP_ASYNC_INDEXED_TO_TIME_AT_SWITCH
argument_list|,
name|lastIndexedTo
argument_list|)
expr_stmt|;
block|}
comment|//Remove any previous bucket reference
name|builder
operator|.
name|removeProperty
argument_list|(
name|PROP_PREVIOUS_BUCKET
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|isModified
argument_list|()
return|;
block|}
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getOldBuckets
parameter_list|()
block|{
name|String
name|head
init|=
name|builder
operator|.
name|getString
argument_list|(
name|PROP_HEAD_BUCKET
argument_list|)
decl_stmt|;
name|String
name|previous
init|=
name|builder
operator|.
name|getString
argument_list|(
name|PROP_PREVIOUS_BUCKET
argument_list|)
decl_stmt|;
return|return
name|Iterables
operator|.
name|filter
argument_list|(
name|builder
operator|.
name|getChildNodeNames
argument_list|()
argument_list|,
name|name
lambda|->
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|name
argument_list|,
name|head
argument_list|)
operator|&&
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|name
argument_list|,
name|previous
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|asyncIndexedToTimeSameAsPrevious
parameter_list|(
name|long
name|lastIndexedTo
parameter_list|)
block|{
name|String
name|previous
init|=
name|builder
operator|.
name|getString
argument_list|(
name|PROP_PREVIOUS_BUCKET
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
name|long
name|previousAsyncIndexedTo
init|=
name|getOptionalValue
argument_list|(
name|builder
operator|.
name|getChildNode
argument_list|(
name|previous
argument_list|)
argument_list|,
name|PROP_ASYNC_INDEXED_TO_TIME_AT_SWITCH
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|previousAsyncIndexedTo
operator|==
name|lastIndexedTo
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|long
name|getOptionalValue
parameter_list|(
name|NodeBuilder
name|nb
parameter_list|,
name|String
name|propName
parameter_list|,
name|int
name|defaultVal
parameter_list|)
block|{
name|PropertyState
name|ps
init|=
name|nb
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
decl_stmt|;
return|return
name|ps
operator|==
literal|null
condition|?
name|defaultVal
else|:
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
return|;
block|}
block|}
end_class

end_unit

