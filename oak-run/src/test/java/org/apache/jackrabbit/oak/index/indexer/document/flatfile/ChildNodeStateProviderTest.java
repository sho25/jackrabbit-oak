begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|flatfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|NodeStateEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|copyOf
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|flatfile
operator|.
name|TestUtils
operator|.
name|createList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsInAnyOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|ChildNodeStateProviderTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|emptyCase
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|preferred
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"u"
argument_list|,
literal|"v"
argument_list|,
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"z"
argument_list|)
decl_stmt|;
name|ChildNodeStateProvider
name|p
init|=
operator|new
name|ChildNodeStateProvider
argument_list|(
name|emptyList
argument_list|()
argument_list|,
literal|"/a"
argument_list|,
name|preferred
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|getChildNodeCount
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|p
operator|.
name|getChildNodeNames
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|p
operator|.
name|getChildNodeEntries
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|p
operator|.
name|hasChildNode
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|p
operator|.
name|getChildNode
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|children
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|preferred
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"jcr:content"
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|CountingIterable
argument_list|<
name|NodeStateEntry
argument_list|>
name|citr
init|=
name|createList
argument_list|(
name|preferred
argument_list|,
name|asList
argument_list|(
literal|"/a"
argument_list|,
literal|"/a/jcr:content"
argument_list|,
literal|"/a/c"
argument_list|,
literal|"/a/d"
argument_list|,
literal|"/e"
argument_list|,
literal|"/e/f"
argument_list|,
literal|"/g"
argument_list|,
literal|"/h"
argument_list|)
argument_list|)
decl_stmt|;
name|ChildNodeStateProvider
name|p
init|=
operator|new
name|ChildNodeStateProvider
argument_list|(
name|citr
argument_list|,
literal|"/a"
argument_list|,
name|preferred
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"jcr:content"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|copyOf
argument_list|(
name|childNames
argument_list|(
name|p
operator|.
name|children
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|citr
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|citr
operator|.
name|reset
argument_list|()
expr_stmt|;
name|p
operator|=
operator|new
name|ChildNodeStateProvider
argument_list|(
name|citr
argument_list|,
literal|"/e"
argument_list|,
name|preferred
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|singletonList
argument_list|(
literal|"f"
argument_list|)
argument_list|,
name|copyOf
argument_list|(
name|childNames
argument_list|(
name|p
operator|.
name|children
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|citr
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|ChildNodeStateProvider
argument_list|(
name|citr
argument_list|,
literal|"/g"
argument_list|,
name|preferred
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|emptyList
argument_list|()
argument_list|,
name|copyOf
argument_list|(
name|childNames
argument_list|(
name|p
operator|.
name|children
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|children2
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|preferred
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|CountingIterable
argument_list|<
name|NodeStateEntry
argument_list|>
name|citr
init|=
name|createList
argument_list|(
name|preferred
argument_list|,
name|asList
argument_list|(
literal|"/a"
argument_list|,
literal|"/a/b"
argument_list|,
literal|"/a/b/c"
argument_list|,
literal|"/a/b/c/d"
argument_list|,
literal|"/e"
argument_list|,
literal|"/e/f"
argument_list|,
literal|"/g"
argument_list|,
literal|"/h"
argument_list|)
argument_list|)
decl_stmt|;
name|ChildNodeStateProvider
name|p
init|=
operator|new
name|ChildNodeStateProvider
argument_list|(
name|citr
argument_list|,
literal|"/a"
argument_list|,
name|preferred
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|singletonList
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|copyOf
argument_list|(
name|childNames
argument_list|(
name|p
operator|.
name|children
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|citr
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|citr
operator|.
name|reset
argument_list|()
expr_stmt|;
name|p
operator|=
operator|new
name|ChildNodeStateProvider
argument_list|(
name|citr
argument_list|,
literal|"/a/b"
argument_list|,
name|preferred
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|singletonList
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|copyOf
argument_list|(
name|childNames
argument_list|(
name|p
operator|.
name|children
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|citr
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|ChildNodeStateProvider
argument_list|(
name|citr
argument_list|,
literal|"/a/b/c"
argument_list|,
name|preferred
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|singletonList
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|copyOf
argument_list|(
name|childNames
argument_list|(
name|p
operator|.
name|children
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|ChildNodeStateProvider
argument_list|(
name|citr
argument_list|,
literal|"/a/b/c/d"
argument_list|,
name|preferred
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|emptyList
argument_list|()
argument_list|,
name|copyOf
argument_list|(
name|childNames
argument_list|(
name|p
operator|.
name|children
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|ChildNodeStateProvider
argument_list|(
name|citr
argument_list|,
literal|"/h"
argument_list|,
name|preferred
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|emptyList
argument_list|()
argument_list|,
name|copyOf
argument_list|(
name|childNames
argument_list|(
name|p
operator|.
name|children
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|hasChildNode_InLimit
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|preferred
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"jcr:content"
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|CountingIterable
argument_list|<
name|NodeStateEntry
argument_list|>
name|citr
init|=
name|createList
argument_list|(
name|preferred
argument_list|,
name|asList
argument_list|(
literal|"/a"
argument_list|,
literal|"/a/jcr:content"
argument_list|,
literal|"/a/c"
argument_list|,
literal|"/a/d"
argument_list|,
literal|"/e"
argument_list|,
literal|"/e/f"
argument_list|)
argument_list|)
decl_stmt|;
name|ChildNodeStateProvider
name|p
init|=
operator|new
name|ChildNodeStateProvider
argument_list|(
name|citr
argument_list|,
literal|"/a"
argument_list|,
name|preferred
argument_list|)
decl_stmt|;
name|citr
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|hasChildNode
argument_list|(
literal|"jcr:content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of reads to get jcr:content"
argument_list|,
literal|2
argument_list|,
name|citr
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|citr
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|p
operator|.
name|hasChildNode
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number reads to conclude that preferred child 'x' is missing"
argument_list|,
literal|3
argument_list|,
name|citr
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|citr
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|hasChildNode
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number reads to get 'c'"
argument_list|,
literal|3
argument_list|,
name|citr
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|citr
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|hasChildNode
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number reads to get 'd'"
argument_list|,
literal|4
argument_list|,
name|citr
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|citr
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|p
operator|.
name|hasChildNode
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number reads to conclude that non-preferred child 'x' is missing"
argument_list|,
literal|5
argument_list|,
name|citr
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|allPreferredReadable
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|preferred
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
decl_stmt|;
name|CountingIterable
argument_list|<
name|NodeStateEntry
argument_list|>
name|citr
init|=
name|createList
argument_list|(
name|preferred
argument_list|,
name|asList
argument_list|(
literal|"/a"
argument_list|,
literal|"/a/x"
argument_list|,
literal|"/a/x/1"
argument_list|,
literal|"/a/x/2"
argument_list|,
literal|"/a/x/3"
argument_list|,
literal|"/a/y"
argument_list|)
argument_list|)
decl_stmt|;
name|ChildNodeStateProvider
name|p
init|=
operator|new
name|ChildNodeStateProvider
argument_list|(
name|citr
argument_list|,
literal|"/a"
argument_list|,
name|preferred
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|hasChildNode
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|hasChildNode
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|childCount
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|preferred
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"jcr:content"
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|CountingIterable
argument_list|<
name|NodeStateEntry
argument_list|>
name|citr
init|=
name|createList
argument_list|(
name|preferred
argument_list|,
name|asList
argument_list|(
literal|"/a"
argument_list|,
literal|"/a/jcr:content"
argument_list|,
literal|"/a/c"
argument_list|,
literal|"/a/d"
argument_list|,
literal|"/e"
argument_list|,
literal|"/e/f"
argument_list|)
argument_list|)
decl_stmt|;
name|ChildNodeStateProvider
name|p
init|=
operator|new
name|ChildNodeStateProvider
argument_list|(
name|citr
argument_list|,
literal|"/a"
argument_list|,
name|preferred
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getChildNodeCount
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|p
operator|.
name|getChildNodeCount
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|childNames
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|preferred
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"jcr:content"
argument_list|)
decl_stmt|;
name|CountingIterable
argument_list|<
name|NodeStateEntry
argument_list|>
name|citr
init|=
name|createList
argument_list|(
name|preferred
argument_list|,
name|asList
argument_list|(
literal|"/a"
argument_list|,
literal|"/a/jcr:content"
argument_list|,
literal|"/a/c"
argument_list|,
literal|"/a/d"
argument_list|,
literal|"/e"
argument_list|,
literal|"/e/f"
argument_list|)
argument_list|)
decl_stmt|;
name|ChildNodeStateProvider
name|p
init|=
operator|new
name|ChildNodeStateProvider
argument_list|(
name|citr
argument_list|,
literal|"/a"
argument_list|,
name|preferred
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"jcr:content"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|copyOf
argument_list|(
name|childNames
argument_list|(
name|p
operator|.
name|children
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|citr
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|childNames2
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|preferred
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"jcr:content"
argument_list|)
decl_stmt|;
name|CountingIterable
argument_list|<
name|NodeStateEntry
argument_list|>
name|citr
init|=
name|createList
argument_list|(
name|preferred
argument_list|,
name|asList
argument_list|(
literal|"/a"
argument_list|,
literal|"/a/jcr:content"
argument_list|,
literal|"/a/jcr:content/metadata"
argument_list|,
literal|"/a/c"
argument_list|,
literal|"/a/c/status"
argument_list|,
literal|"/a/d"
argument_list|,
literal|"/e"
argument_list|,
literal|"/e/f"
argument_list|)
argument_list|)
decl_stmt|;
name|ChildNodeStateProvider
name|p
init|=
operator|new
name|ChildNodeStateProvider
argument_list|(
name|citr
argument_list|,
literal|"/a"
argument_list|,
name|preferred
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"jcr:content"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|copyOf
argument_list|(
name|childNames
argument_list|(
name|p
operator|.
name|children
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|citr
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|childEntries
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|preferred
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"jcr:content"
argument_list|)
decl_stmt|;
name|CountingIterable
argument_list|<
name|NodeStateEntry
argument_list|>
name|citr
init|=
name|createList
argument_list|(
name|preferred
argument_list|,
name|asList
argument_list|(
literal|"/a"
argument_list|,
literal|"/a/jcr:content"
argument_list|,
literal|"/a/c"
argument_list|,
literal|"/a/d"
argument_list|,
literal|"/e"
argument_list|,
literal|"/e/f"
argument_list|)
argument_list|)
decl_stmt|;
name|ChildNodeStateProvider
name|p
init|=
operator|new
name|ChildNodeStateProvider
argument_list|(
name|citr
argument_list|,
literal|"/a"
argument_list|,
name|preferred
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|children
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|p
operator|.
name|getChildNodeEntries
argument_list|()
operator|.
name|forEach
argument_list|(
name|e
lambda|->
name|children
operator|.
name|put
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|,
name|e
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|children
operator|.
name|keySet
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"jcr:content"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/jcr:content"
argument_list|,
name|children
operator|.
name|get
argument_list|(
literal|"jcr:content"
argument_list|)
operator|.
name|getString
argument_list|(
literal|"path"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/d"
argument_list|,
name|children
operator|.
name|get
argument_list|(
literal|"d"
argument_list|)
operator|.
name|getString
argument_list|(
literal|"path"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/c"
argument_list|,
name|children
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
operator|.
name|getString
argument_list|(
literal|"path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Iterator
argument_list|<
name|String
argument_list|>
name|childNames
parameter_list|(
name|Iterator
argument_list|<
name|NodeStateEntry
argument_list|>
name|children
parameter_list|)
block|{
return|return
name|Iterators
operator|.
name|transform
argument_list|(
name|children
argument_list|,
name|c
lambda|->
name|PathUtils
operator|.
name|getName
argument_list|(
name|c
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

