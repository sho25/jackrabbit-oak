begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|SelectorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
operator|.
name|FilterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
operator|.
name|AdvancedQueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
operator|.
name|IndexPlan
import|;
end_import

begin_comment
comment|/**  * An execution plan for one selector in a query. The conditions of the given  * selectors are compiled into a filter, and the execution plan for the selector  * is to use a certain query index, which will result in an estimated cost to  * use that index to retrieve nodes for this index.  */
end_comment

begin_class
specifier|public
class|class
name|SelectorExecutionPlan
implements|implements
name|ExecutionPlan
block|{
specifier|private
specifier|final
name|SelectorImpl
name|selector
decl_stmt|;
specifier|private
specifier|final
name|double
name|estimatedCost
decl_stmt|;
specifier|private
specifier|final
name|QueryIndex
name|index
decl_stmt|;
specifier|private
specifier|final
name|IndexPlan
name|plan
decl_stmt|;
specifier|public
name|SelectorExecutionPlan
parameter_list|(
name|SelectorImpl
name|selector
parameter_list|,
name|QueryIndex
name|index
parameter_list|,
name|IndexPlan
name|plan
parameter_list|,
name|double
name|estimatedCost
parameter_list|)
block|{
name|this
operator|.
name|selector
operator|=
name|selector
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|estimatedCost
operator|=
name|estimatedCost
expr_stmt|;
name|this
operator|.
name|plan
operator|=
name|plan
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getEstimatedCost
parameter_list|()
block|{
return|return
name|estimatedCost
return|;
block|}
specifier|public
name|SelectorImpl
name|getSelector
parameter_list|()
block|{
return|return
name|selector
return|;
block|}
specifier|public
name|QueryIndex
name|getIndex
parameter_list|()
block|{
return|return
name|index
return|;
block|}
specifier|public
name|IndexPlan
name|getIndexPlan
parameter_list|()
block|{
return|return
name|plan
return|;
block|}
comment|/**      * Get the index name, or index type (may not always be the exact index name).      *       * @return the name      */
specifier|public
name|String
name|getIndexPlanName
parameter_list|()
block|{
if|if
condition|(
name|plan
operator|!=
literal|null
condition|)
block|{
return|return
name|plan
operator|.
name|getPlanName
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|index
operator|.
name|getIndexName
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

