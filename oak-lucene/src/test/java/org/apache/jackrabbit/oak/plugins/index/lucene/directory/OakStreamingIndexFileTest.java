begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
package|;
end_package

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|junit
operator|.
name|LogCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|OakStreamingIndexFileTest
operator|.
name|BlobFactoryMode
operator|.
name|BATCH_READ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|OakStreamingIndexFileTest
operator|.
name|BlobFactoryMode
operator|.
name|BYTE_WISE_READ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|OakStreamingIndexFileTest
operator|.
name|FileCreateMode
operator|.
name|COPY_BYTES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|OakStreamingIndexFileTest
operator|.
name|FileCreateMode
operator|.
name|WRITE_FILE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|OakStreamingIndexFileTest
block|{
specifier|private
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
name|NodeState
name|root
init|=
name|EMPTY_NODE
decl_stmt|;
specifier|private
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|private
name|int
name|fileSize
init|=
literal|1000
operator|+
name|rnd
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|FileCreateMode
name|fileCreateMode
decl_stmt|;
specifier|private
specifier|final
name|BlobFactoryMode
name|blobFactoryMode
decl_stmt|;
specifier|private
specifier|final
name|ModeDependantBlobFactory
name|modeDependantBlobFactory
decl_stmt|;
enum|enum
name|BlobFactoryMode
block|{
name|BATCH_READ
block|,
name|BYTE_WISE_READ
block|}
enum|enum
name|FileCreateMode
block|{
name|WRITE_FILE
block|,
name|COPY_BYTES
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}, {1}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|fixtures
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|modes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|modes
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|COPY_BYTES
block|,
name|BYTE_WISE_READ
block|}
argument_list|)
expr_stmt|;
name|modes
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|COPY_BYTES
block|,
name|BATCH_READ
block|}
argument_list|)
expr_stmt|;
name|modes
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|WRITE_FILE
block|,
name|BYTE_WISE_READ
block|}
argument_list|)
expr_stmt|;
name|modes
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|WRITE_FILE
block|,
name|BATCH_READ
block|}
argument_list|)
expr_stmt|;
return|return
name|modes
return|;
block|}
specifier|public
name|OakStreamingIndexFileTest
parameter_list|(
name|FileCreateMode
name|fileCreateMode
parameter_list|,
name|BlobFactoryMode
name|blobFactoryMode
parameter_list|)
block|{
name|this
operator|.
name|fileCreateMode
operator|=
name|fileCreateMode
expr_stmt|;
name|this
operator|.
name|blobFactoryMode
operator|=
name|blobFactoryMode
expr_stmt|;
name|this
operator|.
name|modeDependantBlobFactory
operator|=
operator|new
name|ModeDependantBlobFactory
argument_list|(
name|blobFactoryMode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readSanity
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|fileBytes
init|=
name|writeFile
argument_list|()
decl_stmt|;
name|NodeBuilder
name|fooBuilder
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
try|try
init|(
name|OakStreamingIndexFile
name|readFile
init|=
operator|new
name|OakStreamingIndexFile
argument_list|(
literal|"foo"
argument_list|,
name|fooBuilder
argument_list|,
literal|"dirDetails"
argument_list|,
name|modeDependantBlobFactory
operator|.
name|getNodeBuilderBlobFactory
argument_list|(
name|fooBuilder
argument_list|)
argument_list|)
init|)
block|{
name|byte
index|[]
name|readBytes
init|=
operator|new
name|byte
index|[
name|fileBytes
operator|.
name|length
index|]
decl_stmt|;
name|readFile
operator|.
name|readBytes
argument_list|(
name|readBytes
argument_list|,
literal|0
argument_list|,
name|fileBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Must read same amount of data"
argument_list|,
name|fileBytes
operator|.
name|length
argument_list|,
name|readBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Must get back same data"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|readBytes
argument_list|,
name|fileBytes
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|readFile
operator|.
name|readBytes
argument_list|(
name|readBytes
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must not be able to read past stored number of bytes"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|rangeReadWorks
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numFewBytes
init|=
literal|100
decl_stmt|;
name|byte
index|[]
name|fileBytes
init|=
name|writeFile
argument_list|()
decl_stmt|;
name|byte
index|[]
name|aFewBytes
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|fileBytes
argument_list|,
literal|1
argument_list|,
name|numFewBytes
operator|+
literal|1
argument_list|)
decl_stmt|;
name|NodeBuilder
name|fooBuilder
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
try|try
init|(
name|OakStreamingIndexFile
name|readFile
init|=
operator|new
name|OakStreamingIndexFile
argument_list|(
literal|"foo"
argument_list|,
name|fooBuilder
argument_list|,
literal|"dirDetails"
argument_list|,
name|modeDependantBlobFactory
operator|.
name|getNodeBuilderBlobFactory
argument_list|(
name|fooBuilder
argument_list|)
argument_list|)
init|)
block|{
name|readFile
operator|.
name|seek
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Seeking should move position"
argument_list|,
literal|1
argument_list|,
name|readFile
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|readBytes
init|=
operator|new
name|byte
index|[
name|numFewBytes
index|]
decl_stmt|;
name|readFile
operator|.
name|readBytes
argument_list|(
name|readBytes
argument_list|,
literal|0
argument_list|,
name|numFewBytes
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Reading a few bytes should be accurate"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|readBytes
argument_list|,
name|aFewBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|rangeReadWorksOnSeekingBack
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numFewBytes
init|=
literal|100
decl_stmt|;
name|byte
index|[]
name|fileBytes
init|=
name|writeFile
argument_list|()
decl_stmt|;
name|byte
index|[]
name|aFewBytes
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|fileBytes
argument_list|,
literal|1
argument_list|,
name|numFewBytes
operator|+
literal|1
argument_list|)
decl_stmt|;
name|NodeBuilder
name|fooBuilder
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
try|try
init|(
name|OakStreamingIndexFile
name|readFile
init|=
operator|new
name|OakStreamingIndexFile
argument_list|(
literal|"foo"
argument_list|,
name|fooBuilder
argument_list|,
literal|"dirDetails"
argument_list|,
name|modeDependantBlobFactory
operator|.
name|getNodeBuilderBlobFactory
argument_list|(
name|fooBuilder
argument_list|)
argument_list|)
init|)
block|{
name|byte
index|[]
name|readBytes
init|=
operator|new
name|byte
index|[
name|numFewBytes
index|]
decl_stmt|;
name|readFile
operator|.
name|seek
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|readFile
operator|.
name|readBytes
argument_list|(
name|readBytes
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|readFile
operator|.
name|seek
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Seeking should move position"
argument_list|,
literal|1
argument_list|,
name|readFile
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|readFile
operator|.
name|readBytes
argument_list|(
name|readBytes
argument_list|,
literal|0
argument_list|,
name|numFewBytes
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Reading a few bytes should be accurate"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|readBytes
argument_list|,
name|aFewBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|cloneCreatesSimilarUnrelatedStreams
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numFewBytes
init|=
literal|100
decl_stmt|;
name|byte
index|[]
name|fileBytes
init|=
name|writeFile
argument_list|()
decl_stmt|;
name|byte
index|[]
name|aFewBytes
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|fileBytes
argument_list|,
literal|2
argument_list|,
name|numFewBytes
operator|+
literal|2
argument_list|)
decl_stmt|;
name|byte
index|[]
name|readBytes
init|=
operator|new
name|byte
index|[
name|numFewBytes
index|]
decl_stmt|;
name|OakStreamingIndexFile
name|readFileClone
decl_stmt|;
name|NodeBuilder
name|fooBuilder
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
try|try
init|(
name|OakStreamingIndexFile
name|readFile
init|=
operator|new
name|OakStreamingIndexFile
argument_list|(
literal|"foo"
argument_list|,
name|fooBuilder
argument_list|,
literal|"dirDetails"
argument_list|,
name|modeDependantBlobFactory
operator|.
name|getNodeBuilderBlobFactory
argument_list|(
name|fooBuilder
argument_list|)
argument_list|)
init|)
block|{
name|readFile
operator|.
name|seek
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|readFile
operator|.
name|readBytes
argument_list|(
name|readBytes
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|readFileClone
operator|=
operator|(
name|OakStreamingIndexFile
operator|)
name|readFile
operator|.
name|clone
argument_list|()
expr_stmt|;
name|readFile
operator|.
name|readBytes
argument_list|(
name|readBytes
argument_list|,
literal|0
argument_list|,
name|numFewBytes
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Clone reader should have been created"
argument_list|,
name|readFileClone
argument_list|)
expr_stmt|;
try|try
block|{
name|readFileClone
operator|.
name|readBytes
argument_list|(
name|readBytes
argument_list|,
literal|0
argument_list|,
name|numFewBytes
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Clone reader should start from same position as source"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|readBytes
argument_list|,
name|aFewBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|readFileClone
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|streamingWritesDontWorkPiecewise
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"Piece write makes sense for "
operator|+
name|WRITE_FILE
operator|+
literal|" mode"
argument_list|,
name|fileCreateMode
operator|==
name|WRITE_FILE
argument_list|)
expr_stmt|;
name|NodeBuilder
name|fooBuilder
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
try|try
init|(
name|OakStreamingIndexFile
name|writeFile
init|=
operator|new
name|OakStreamingIndexFile
argument_list|(
literal|"foo"
argument_list|,
name|fooBuilder
argument_list|,
literal|"dirDetails"
argument_list|,
name|modeDependantBlobFactory
operator|.
name|getNodeBuilderBlobFactory
argument_list|(
name|fooBuilder
argument_list|)
argument_list|)
init|)
block|{
name|byte
index|[]
name|fileBytes
init|=
name|randomBytes
argument_list|(
name|fileSize
argument_list|)
decl_stmt|;
name|writeFile
operator|.
name|writeBytes
argument_list|(
name|fileBytes
argument_list|,
literal|0
argument_list|,
name|fileBytes
operator|.
name|length
argument_list|)
expr_stmt|;
try|try
block|{
name|writeFile
operator|.
name|writeBytes
argument_list|(
name|fileBytes
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Multiple write bytes must not be allowed with streaming writes"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|//ignore
block|}
name|writeFile
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|seekScenarios
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|fileBytes
init|=
name|writeFile
argument_list|()
decl_stmt|;
name|NodeBuilder
name|fooBuilder
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
try|try
init|(
name|OakStreamingIndexFile
name|readFile
init|=
operator|new
name|OakStreamingIndexFile
argument_list|(
literal|"foo"
argument_list|,
name|fooBuilder
argument_list|,
literal|"dirDetails"
argument_list|,
name|modeDependantBlobFactory
operator|.
name|getNodeBuilderBlobFactory
argument_list|(
name|fooBuilder
argument_list|)
argument_list|)
init|)
block|{
name|byte
index|[]
name|aFewBytes
init|=
operator|new
name|byte
index|[
literal|10
index|]
decl_stmt|;
name|byte
index|[]
name|expectedFewBytes
decl_stmt|;
name|expectedFewBytes
operator|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|fileBytes
argument_list|,
literal|10
argument_list|,
literal|10
operator|+
name|aFewBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|readFile
operator|.
name|seek
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|readFile
operator|.
name|readBytes
argument_list|(
name|aFewBytes
argument_list|,
literal|0
argument_list|,
name|aFewBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Range read after seek should read accurately"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|expectedFewBytes
argument_list|,
name|aFewBytes
argument_list|)
argument_list|)
expr_stmt|;
name|expectedFewBytes
operator|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|fileBytes
argument_list|,
literal|25
argument_list|,
literal|25
operator|+
name|aFewBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|readFile
operator|.
name|seek
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|readFile
operator|.
name|readBytes
argument_list|(
name|aFewBytes
argument_list|,
literal|0
argument_list|,
name|aFewBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Range read after seek should read accurately"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|expectedFewBytes
argument_list|,
name|aFewBytes
argument_list|)
argument_list|)
expr_stmt|;
name|expectedFewBytes
operator|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|fileBytes
argument_list|,
literal|2
argument_list|,
literal|2
operator|+
name|aFewBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|readFile
operator|.
name|seek
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|readFile
operator|.
name|readBytes
argument_list|(
name|aFewBytes
argument_list|,
literal|0
argument_list|,
name|aFewBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Range read after backward seek should read accurately"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|expectedFewBytes
argument_list|,
name|aFewBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|logWarnWhenSeekingBackAfterRead
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|fileBytes
init|=
name|writeFile
argument_list|()
decl_stmt|;
name|LogCustomizer
name|logRecorder
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|OakStreamingIndexFile
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|enable
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Seeking back on streaming index file"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|NodeBuilder
name|fooBuilder
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
try|try
init|(
name|OakStreamingIndexFile
name|readFile
init|=
operator|new
name|OakStreamingIndexFile
argument_list|(
literal|"foo"
argument_list|,
name|fooBuilder
argument_list|,
literal|"dirDetails"
argument_list|,
name|modeDependantBlobFactory
operator|.
name|getNodeBuilderBlobFactory
argument_list|(
name|fooBuilder
argument_list|)
argument_list|)
init|)
block|{
name|logRecorder
operator|.
name|starting
argument_list|()
expr_stmt|;
name|byte
index|[]
name|readBytes
init|=
operator|new
name|byte
index|[
name|fileBytes
operator|.
name|length
index|]
decl_stmt|;
name|readFile
operator|.
name|readBytes
argument_list|(
name|readBytes
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Don't log for simple reads"
argument_list|,
literal|0
argument_list|,
name|logRecorder
operator|.
name|getLogs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|readFile
operator|.
name|seek
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Don't log for forward seeks"
argument_list|,
literal|0
argument_list|,
name|logRecorder
operator|.
name|getLogs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|readFile
operator|.
name|seek
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Log warning for backward seeks"
argument_list|,
literal|1
argument_list|,
name|logRecorder
operator|.
name|getLogs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|logRecorder
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
specifier|static
class|class
name|ModeDependantBlobFactory
block|{
specifier|private
specifier|final
name|BlobFactoryMode
name|blobFactoryMode
decl_stmt|;
name|ModeDependantBlobFactory
parameter_list|(
name|BlobFactoryMode
name|blobFactoryMode
parameter_list|)
block|{
name|this
operator|.
name|blobFactoryMode
operator|=
name|blobFactoryMode
expr_stmt|;
block|}
name|BlobFactory
name|getNodeBuilderBlobFactory
parameter_list|(
specifier|final
name|NodeBuilder
name|builder
parameter_list|)
block|{
specifier|final
name|BlobFactory
name|delegate
init|=
name|BlobFactory
operator|.
name|getNodeBuilderBlobFactory
argument_list|(
name|builder
argument_list|)
decl_stmt|;
return|return
name|in
lambda|->
block|{
if|if
condition|(
name|blobFactoryMode
operator|==
name|BYTE_WISE_READ
condition|)
block|{
return|return
name|delegate
operator|.
name|createBlob
argument_list|(
operator|new
name|InputStream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|read
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|delegate
operator|.
name|createBlob
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
specifier|private
name|byte
index|[]
name|writeFile
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|fileBytes
init|=
name|randomBytes
argument_list|(
name|fileSize
argument_list|)
decl_stmt|;
name|NodeBuilder
name|fooBuilder
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
try|try
init|(
name|OakStreamingIndexFile
name|writeFile
init|=
operator|new
name|OakStreamingIndexFile
argument_list|(
literal|"foo"
argument_list|,
name|fooBuilder
argument_list|,
literal|"dirDetails"
argument_list|,
name|modeDependantBlobFactory
operator|.
name|getNodeBuilderBlobFactory
argument_list|(
name|fooBuilder
argument_list|)
argument_list|)
init|)
block|{
if|if
condition|(
name|fileCreateMode
operator|==
name|COPY_BYTES
condition|)
block|{
name|writeFile
operator|.
name|copyBytes
argument_list|(
operator|new
name|ByteArrayDataInput
argument_list|(
name|fileBytes
argument_list|)
argument_list|,
name|fileBytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeFile
operator|.
name|writeBytes
argument_list|(
name|fileBytes
argument_list|,
literal|0
argument_list|,
name|fileBytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|writeFile
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
return|return
name|fileBytes
return|;
block|}
specifier|private
name|byte
index|[]
name|randomBytes
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|rnd
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
block|}
end_class

end_unit

