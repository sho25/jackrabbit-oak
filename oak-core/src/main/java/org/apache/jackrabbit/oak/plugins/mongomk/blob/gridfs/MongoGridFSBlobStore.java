begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
operator|.
name|blob
operator|.
name|gridfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|gridfs
operator|.
name|GridFS
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link BlobStore} for MongoDB using GridFS. It does not  * support garbage collection at the moment.  */
end_comment

begin_class
specifier|public
class|class
name|MongoGridFSBlobStore
implements|implements
name|BlobStore
block|{
specifier|private
specifier|final
name|CommandExecutor
name|commandExecutor
decl_stmt|;
specifier|private
specifier|final
name|GridFS
name|gridFS
decl_stmt|;
comment|/**      * Constructs a new {@code BlobStoreMongoGridFS}      *      * @param db The DB.      */
specifier|public
name|MongoGridFSBlobStore
parameter_list|(
name|DB
name|db
parameter_list|)
block|{
name|commandExecutor
operator|=
operator|new
name|DefaultCommandExecutor
argument_list|()
expr_stmt|;
name|gridFS
operator|=
operator|new
name|GridFS
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getBlobLength
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|Exception
block|{
name|Command
argument_list|<
name|Long
argument_list|>
name|command
init|=
operator|new
name|GetBlobLengthCommandGridFS
argument_list|(
name|gridFS
argument_list|,
name|blobId
argument_list|)
decl_stmt|;
return|return
name|commandExecutor
operator|.
name|execute
argument_list|(
name|command
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|readBlob
parameter_list|(
name|String
name|blobId
parameter_list|,
name|long
name|blobOffset
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|bufferOffset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|Exception
block|{
name|Command
argument_list|<
name|Integer
argument_list|>
name|command
init|=
operator|new
name|ReadBlobCommandGridFS
argument_list|(
name|gridFS
argument_list|,
name|blobId
argument_list|,
name|blobOffset
argument_list|,
name|buffer
argument_list|,
name|bufferOffset
argument_list|,
name|length
argument_list|)
decl_stmt|;
return|return
name|commandExecutor
operator|.
name|execute
argument_list|(
name|command
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|writeBlob
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|Exception
block|{
name|Command
argument_list|<
name|String
argument_list|>
name|command
init|=
operator|new
name|WriteBlobCommandGridFS
argument_list|(
name|gridFS
argument_list|,
name|is
argument_list|)
decl_stmt|;
return|return
name|commandExecutor
operator|.
name|execute
argument_list|(
name|command
argument_list|)
return|;
block|}
block|}
end_class

end_unit

