begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ForwardingListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|LocalIndexFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FilterDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|SimpleFSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|sameThreadExecutor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContentHelper
operator|.
name|INITIAL_CONTENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|CopyOnReadDirectory
operator|.
name|DELETE_MARGIN_MILLIS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FulltextIndexConstants
operator|.
name|INDEX_DATA_CHILD_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|contains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsInAnyOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|IndexCopierTest
block|{
specifier|private
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
name|int
name|maxFileSize
init|=
literal|7896
decl_stmt|;
specifier|private
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Clock
name|CLOCK
init|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|private
name|String
name|indexPath
init|=
literal|"/oak:index/test"
decl_stmt|;
specifier|private
specifier|final
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
static|static
block|{
try|try
block|{
name|CLOCK
operator|.
name|waitUntil
argument_list|(
name|Clock
operator|.
name|SIMPLE
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignored
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|DELETE_MARGIN_MILLIS_NAME
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LuceneIndexEditorContext
operator|.
name|configureUniqueId
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|DelayCopyingSimpleFSDirectory
operator|.
name|temporaryFolder
operator|=
name|temporaryFolder
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
name|DelayCopyingSimpleFSDirectory
operator|.
name|temporaryFolder
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|basicTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|baseDir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|LuceneIndexDefinition
name|defn
init|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexCopier
name|c1
init|=
operator|new
name|RAMIndexCopier
argument_list|(
name|baseDir
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|,
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
name|Directory
name|remote
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|Directory
name|wrapped
init|=
name|c1
operator|.
name|wrapForRead
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t2
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|wrapped
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wrapped
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wrapped
operator|.
name|fileExists
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t1
operator|.
name|length
argument_list|,
name|wrapped
operator|.
name|fileLength
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t2
operator|.
name|length
argument_list|,
name|wrapped
operator|.
name|fileLength
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
name|readAndAssert
argument_list|(
name|wrapped
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
comment|//t1 should now be added to testDir
name|assertTrue
argument_list|(
name|baseDir
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|basicTestWithPrefetch
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|syncedFiles
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Directory
name|baseDir
init|=
operator|new
name|RAMDirectory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|sync
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|IOException
block|{
name|syncedFiles
operator|.
name|addAll
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|super
operator|.
name|sync
argument_list|(
name|names
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|LuceneIndexDefinition
name|defn
init|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexCopier
name|c1
init|=
operator|new
name|RAMIndexCopier
argument_list|(
name|baseDir
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|,
name|getWorkDir
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Directory
name|remote
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t2
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t2"
argument_list|)
decl_stmt|;
name|Directory
name|wrapped
init|=
name|c1
operator|.
name|wrapForRead
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|wrapped
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|syncedFiles
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"t1"
argument_list|,
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wrapped
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wrapped
operator|.
name|fileExists
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|baseDir
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|baseDir
operator|.
name|fileExists
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t1
operator|.
name|length
argument_list|,
name|wrapped
operator|.
name|fileLength
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t2
operator|.
name|length
argument_list|,
name|wrapped
operator|.
name|fileLength
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
name|readAndAssert
argument_list|(
name|wrapped
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nonExistentFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|baseDir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|LuceneIndexDefinition
name|defn
init|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|CollectingExecutor
name|executor
init|=
operator|new
name|CollectingExecutor
argument_list|()
decl_stmt|;
name|IndexCopier
name|c1
init|=
operator|new
name|RAMIndexCopier
argument_list|(
name|baseDir
argument_list|,
name|executor
argument_list|,
name|getWorkDir
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Directory
name|remote
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|Directory
name|wrapped
init|=
name|c1
operator|.
name|wrapForRead
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|wrapped
operator|.
name|openInput
argument_list|(
literal|"foo.txt"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ignore
parameter_list|)
block|{          }
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|executor
operator|.
name|commands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|basicTestWithFS
parameter_list|()
throws|throws
name|Exception
block|{
name|LuceneIndexDefinition
name|defn
init|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexCopier
name|c1
init|=
operator|new
name|IndexCopier
argument_list|(
name|sameThreadExecutor
argument_list|()
argument_list|,
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
name|Directory
name|remote
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|Directory
name|wrapped
init|=
name|c1
operator|.
name|wrapForRead
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t2
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|wrapped
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wrapped
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wrapped
operator|.
name|fileExists
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t1
operator|.
name|length
argument_list|,
name|wrapped
operator|.
name|fileLength
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t2
operator|.
name|length
argument_list|,
name|wrapped
operator|.
name|fileLength
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
name|readAndAssert
argument_list|(
name|wrapped
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
comment|//t1 should now be added to testDir
name|File
name|indexDir
init|=
name|c1
operator|.
name|getIndexDir
argument_list|(
name|defn
argument_list|,
literal|"/foo"
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|indexDir
argument_list|,
literal|"t1"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|TabularData
name|td
init|=
name|c1
operator|.
name|getIndexPathMapping
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|td
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multiDirNames
parameter_list|()
throws|throws
name|Exception
block|{
name|LuceneIndexDefinition
name|defn
init|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexCopier
name|c1
init|=
operator|new
name|IndexCopier
argument_list|(
name|sameThreadExecutor
argument_list|()
argument_list|,
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
name|Directory
name|remote
init|=
operator|new
name|CloseSafeDir
argument_list|()
decl_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t2
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t2"
argument_list|)
decl_stmt|;
name|Directory
name|w1
init|=
name|c1
operator|.
name|wrapForRead
argument_list|(
name|indexPath
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|,
literal|":data"
argument_list|)
decl_stmt|;
name|readAndAssert
argument_list|(
name|w1
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|Directory
name|w2
init|=
name|c1
operator|.
name|wrapForRead
argument_list|(
name|indexPath
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|,
literal|":private-data"
argument_list|)
decl_stmt|;
name|w2
operator|.
name|close
argument_list|()
expr_stmt|;
name|readAndAssert
argument_list|(
name|w1
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteOldPostReindex
parameter_list|()
throws|throws
name|Exception
block|{
name|LuceneIndexDefinition
name|defn
init|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexCopier
name|c1
init|=
operator|new
name|IndexCopier
argument_list|(
name|sameThreadExecutor
argument_list|()
argument_list|,
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
name|Directory
name|remote
init|=
operator|new
name|CloseSafeDir
argument_list|()
decl_stmt|;
name|Directory
name|w1
init|=
name|c1
operator|.
name|wrapForRead
argument_list|(
name|indexPath
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t2
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t2"
argument_list|)
decl_stmt|;
name|readAndAssert
argument_list|(
name|w1
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|readAndAssert
argument_list|(
name|w1
argument_list|,
literal|"t2"
argument_list|,
name|t2
argument_list|)
expr_stmt|;
comment|//t1 should now be added to testDir
name|File
name|indexDir
init|=
name|c1
operator|.
name|getIndexDir
argument_list|(
name|defn
argument_list|,
name|indexPath
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|indexDir
argument_list|,
literal|"t1"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|doReindex
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|defn
operator|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
expr_stmt|;
comment|//Close old version
name|w1
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//Get a new one with updated reindexCount
name|Directory
name|w2
init|=
name|c1
operator|.
name|wrapForRead
argument_list|(
name|indexPath
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|readAndAssert
argument_list|(
name|w2
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|w2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Old index directory should have been removed"
argument_list|,
name|indexDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|//Assert that new index file do exist and not get removed
name|File
name|indexDir2
init|=
name|c1
operator|.
name|getIndexDir
argument_list|(
name|defn
argument_list|,
name|indexPath
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|indexDir2
argument_list|,
literal|"t1"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|//Check if parent directory is also removed i.e.
comment|//index count should be 1 now
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c1
operator|.
name|getIndexRootDirectory
argument_list|()
operator|.
name|getLocalIndexes
argument_list|(
name|indexPath
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|concurrentRead
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|baseDir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|LuceneIndexDefinition
name|defn
init|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|CollectingExecutor
name|executor
init|=
operator|new
name|CollectingExecutor
argument_list|()
decl_stmt|;
name|IndexCopier
name|c1
init|=
operator|new
name|RAMIndexCopier
argument_list|(
name|baseDir
argument_list|,
name|executor
argument_list|,
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
name|FileTrackingDirectory
name|remote
init|=
operator|new
name|FileTrackingDirectory
argument_list|()
decl_stmt|;
name|Directory
name|wrapped
init|=
name|c1
operator|.
name|wrapForRead
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
comment|//1. Trigger a read which should go to remote
name|readAndAssert
argument_list|(
name|wrapped
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c1
operator|.
name|getScheduledForCopyCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|remote
operator|.
name|openedFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|executor
operator|.
name|commands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//2. Trigger another read and this should also be
comment|//served from remote
name|readAndAssert
argument_list|(
name|wrapped
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c1
operator|.
name|getScheduledForCopyCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|remote
operator|.
name|openedFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Second read should not add a new copy task
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|executor
operator|.
name|commands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//3. Perform copy
name|executor
operator|.
name|executeAll
argument_list|()
expr_stmt|;
name|remote
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//4. Now read again after copy is done
name|readAndAssert
argument_list|(
name|wrapped
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
comment|// Now read should be served from local and not from remote
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|remote
operator|.
name|openedFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c1
operator|.
name|getScheduledForCopyCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|copyInProgressStats
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|baseDir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|LuceneIndexDefinition
name|defn
init|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|?
argument_list|>
argument_list|>
name|submittedTasks
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ExecutorService
name|executor
init|=
operator|new
name|ForwardingListeningExecutorService
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ListeningExecutorService
name|delegate
parameter_list|()
block|{
return|return
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
name|submittedTasks
operator|.
name|add
argument_list|(
name|super
operator|.
name|submit
argument_list|(
name|command
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|IndexCopier
name|c1
init|=
operator|new
name|RAMIndexCopier
argument_list|(
name|baseDir
argument_list|,
name|executor
argument_list|,
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|copyProceed
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|copyRequestArrived
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|FileTrackingDirectory
name|remote
init|=
operator|new
name|FileTrackingDirectory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|copy
parameter_list|(
name|Directory
name|to
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|dest
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|copyRequestArrived
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|copyProceed
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{                  }
name|super
operator|.
name|copy
argument_list|(
name|to
argument_list|,
name|src
argument_list|,
name|dest
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Directory
name|wrapped
init|=
name|c1
operator|.
name|wrapForRead
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
comment|//1. Trigger a read which should go to remote
name|readAndAssert
argument_list|(
name|wrapped
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|copyRequestArrived
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c1
operator|.
name|getCopyInProgressCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|remote
operator|.
name|openedFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//2. Trigger another read and this should also be
comment|//served from remote
name|readAndAssert
argument_list|(
name|wrapped
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c1
operator|.
name|getCopyInProgressCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IOUtils
operator|.
name|humanReadableByteCount
argument_list|(
name|t1
operator|.
name|length
argument_list|)
argument_list|,
name|c1
operator|.
name|getCopyInProgressSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c1
operator|.
name|getCopyInProgressDetails
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|c1
operator|.
name|getCopyInProgressDetails
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|remote
operator|.
name|openedFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//3. Perform copy
name|copyProceed
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|Futures
operator|.
name|allAsList
argument_list|(
name|submittedTasks
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|remote
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//4. Now read again after copy is done
name|readAndAssert
argument_list|(
name|wrapped
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
comment|// Now read should be served from local and not from remote
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|remote
operator|.
name|openedFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c1
operator|.
name|getCopyInProgressCount
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test for the case where local directory is opened already contains      * the index files and in such a case file should not be read from remote      */
annotation|@
name|Test
specifier|public
name|void
name|reuseLocalDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|baseDir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|LuceneIndexDefinition
name|defn
init|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexCopier
name|c1
init|=
operator|new
name|RAMIndexCopier
argument_list|(
name|baseDir
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|,
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
name|FileTrackingDirectory
name|remote
init|=
operator|new
name|FileTrackingDirectory
argument_list|()
decl_stmt|;
name|Directory
name|wrapped
init|=
name|c1
operator|.
name|wrapForRead
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
comment|//1. Read for the first time should be served from remote
name|readAndAssert
argument_list|(
name|wrapped
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|remote
operator|.
name|openedFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//2. Reuse the testDir and read again
name|Directory
name|wrapped2
init|=
name|c1
operator|.
name|wrapForRead
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|remote
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//3. Now read should be served from local
name|readAndAssert
argument_list|(
name|wrapped2
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|remote
operator|.
name|openedFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Now check if local file gets corrupted then read from remote
name|Directory
name|wrapped3
init|=
name|c1
operator|.
name|wrapForRead
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|remote
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//4. Corrupt the local copy
name|writeFile
argument_list|(
name|baseDir
argument_list|,
literal|"t1"
argument_list|)
expr_stmt|;
comment|//Now read would be done from remote
name|readAndAssert
argument_list|(
name|wrapped3
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|remote
operator|.
name|openedFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteCorruptedFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|baseDir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|LuceneIndexDefinition
name|defn
init|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|RAMIndexCopier
name|c1
init|=
operator|new
name|RAMIndexCopier
argument_list|(
name|baseDir
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|,
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
name|Directory
name|remote
init|=
operator|new
name|RAMDirectory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|IndexInput
name|openInput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"boom"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
name|String
name|fileName
init|=
literal|"failed.txt"
decl_stmt|;
name|Directory
name|wrapped
init|=
name|c1
operator|.
name|wrapForRead
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
try|try
block|{
name|readAndAssert
argument_list|(
name|wrapped
argument_list|,
name|fileName
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Read of file should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ignore
parameter_list|)
block|{          }
name|assertFalse
argument_list|(
name|c1
operator|.
name|baseDir
operator|.
name|fileExists
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deletesOnClose
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|baseDir
init|=
operator|new
name|CloseSafeDir
argument_list|()
decl_stmt|;
name|LuceneIndexDefinition
name|defn
init|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexCopier
name|c1
init|=
operator|new
name|RAMIndexCopier
argument_list|(
name|baseDir
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|,
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
name|Directory
name|r1
init|=
operator|new
name|DelayCopyingSimpleFSDirectory
argument_list|()
decl_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|r1
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t2
init|=
name|writeFile
argument_list|(
name|r1
argument_list|,
literal|"t2"
argument_list|)
decl_stmt|;
name|Directory
name|w1
init|=
name|c1
operator|.
name|wrapForRead
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|r1
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|readAndAssert
argument_list|(
name|w1
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|readAndAssert
argument_list|(
name|w1
argument_list|,
literal|"t2"
argument_list|,
name|t2
argument_list|)
expr_stmt|;
comment|// t1 and t2 should now be present in local (base dir which back local)
name|assertTrue
argument_list|(
name|baseDir
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|baseDir
operator|.
name|fileExists
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
name|Directory
name|r2
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|copy
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
expr_stmt|;
name|r2
operator|.
name|deleteFile
argument_list|(
literal|"t1"
argument_list|)
expr_stmt|;
name|Directory
name|w2
init|=
name|c1
operator|.
name|wrapForRead
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|r2
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
comment|//Close would trigger removal of file which are not present in remote
name|w2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"t1 should have been deleted"
argument_list|,
name|baseDir
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|baseDir
operator|.
name|fileExists
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|failureInDelete
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|testFiles
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Directory
name|baseDir
init|=
operator|new
name|CloseSafeDir
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|deleteFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|testFiles
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not allowed to delete "
operator|+
name|name
argument_list|)
throw|;
block|}
name|super
operator|.
name|deleteFile
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|LuceneIndexDefinition
name|defn
init|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexCopier
name|c1
init|=
operator|new
name|RAMIndexCopier
argument_list|(
name|baseDir
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|,
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
name|Directory
name|r1
init|=
operator|new
name|DelayCopyingSimpleFSDirectory
argument_list|()
decl_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|r1
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t2
init|=
name|writeFile
argument_list|(
name|r1
argument_list|,
literal|"t2"
argument_list|)
decl_stmt|;
name|Directory
name|w1
init|=
name|c1
operator|.
name|wrapForRead
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|r1
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|readAndAssert
argument_list|(
name|w1
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|readAndAssert
argument_list|(
name|w1
argument_list|,
literal|"t2"
argument_list|,
name|t2
argument_list|)
expr_stmt|;
comment|// t1 and t2 should now be present in local (base dir which back local)
name|assertTrue
argument_list|(
name|baseDir
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|baseDir
operator|.
name|fileExists
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
name|Directory
name|r2
init|=
operator|new
name|CloseSafeDir
argument_list|()
decl_stmt|;
name|copy
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
expr_stmt|;
name|r2
operator|.
name|deleteFile
argument_list|(
literal|"t1"
argument_list|)
expr_stmt|;
name|Directory
name|w2
init|=
name|c1
operator|.
name|wrapForRead
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|r2
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
comment|//Close would trigger removal of file which are not present in remote
name|testFiles
operator|.
name|add
argument_list|(
literal|"t1"
argument_list|)
expr_stmt|;
name|w2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c1
operator|.
name|getFailedToDeleteFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LocalIndexFile
name|testFile
init|=
name|c1
operator|.
name|getFailedToDeleteFiles
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|testFile
operator|.
name|getDeleteAttemptCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IOUtils
operator|.
name|humanReadableByteCount
argument_list|(
name|t1
operator|.
name|length
argument_list|)
argument_list|,
name|c1
operator|.
name|getGarbageSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c1
operator|.
name|getGarbageDetails
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Directory
name|w3
init|=
name|c1
operator|.
name|wrapForRead
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|r2
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|w3
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|testFile
operator|.
name|getDeleteAttemptCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//Now let the file to be deleted
name|testFiles
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Directory
name|w4
init|=
name|c1
operator|.
name|wrapForRead
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|r2
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|w4
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//No pending deletes left
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c1
operator|.
name|getFailedToDeleteFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deletedOnlyFilesForOlderVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|baseDir
init|=
operator|new
name|CloseSafeDir
argument_list|()
decl_stmt|;
name|LuceneIndexDefinition
name|defn
init|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexCopier
name|copier
init|=
operator|new
name|RAMIndexCopier
argument_list|(
name|baseDir
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|,
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
comment|//1. Open a local and read t1 from remote
name|Directory
name|remote1
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|remote1
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
name|Directory
name|local1
init|=
name|copier
operator|.
name|wrapForRead
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|remote1
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|readAndAssert
argument_list|(
name|local1
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
comment|//While local1 is open , open another local2 and read t2
name|Directory
name|remote2
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|byte
index|[]
name|t2
init|=
name|writeFile
argument_list|(
name|remote2
argument_list|,
literal|"t2"
argument_list|)
decl_stmt|;
name|Directory
name|local2
init|=
name|copier
operator|.
name|wrapForRead
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|remote2
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|readAndAssert
argument_list|(
name|local2
argument_list|,
literal|"t2"
argument_list|,
name|t2
argument_list|)
expr_stmt|;
comment|//Close local1
name|local1
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//t2 should still be readable
name|readAndAssert
argument_list|(
name|local2
argument_list|,
literal|"t2"
argument_list|,
name|t2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|wrapForWriteWithoutIndexPath
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|remote
init|=
operator|new
name|CloseSafeDir
argument_list|()
decl_stmt|;
name|IndexCopier
name|copier
init|=
operator|new
name|IndexCopier
argument_list|(
name|sameThreadExecutor
argument_list|()
argument_list|,
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
name|LuceneIndexDefinition
name|defn
init|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|copier
operator|.
name|wrapForWrite
argument_list|(
name|defn
argument_list|,
name|remote
argument_list|,
literal|false
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|,
name|IndexCopier
operator|.
name|COWDirecetoryTracker
operator|.
name|NOOP
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|dir
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|readAndAssert
argument_list|(
name|remote
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
comment|//Work dir must be empty post close
name|assertArrayEquals
argument_list|(
name|FileUtils
operator|.
name|EMPTY_FILE_ARRAY
argument_list|,
name|copier
operator|.
name|getIndexWorkDir
argument_list|()
operator|.
name|listFiles
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|wrapForWriteWithIndexPath
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|remote
init|=
operator|new
name|CloseSafeDir
argument_list|()
decl_stmt|;
name|IndexCopier
name|copier
init|=
operator|new
name|IndexCopier
argument_list|(
name|sameThreadExecutor
argument_list|()
argument_list|,
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
name|LuceneIndexDefinition
name|defn
init|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|copier
operator|.
name|wrapForWrite
argument_list|(
name|defn
argument_list|,
name|remote
argument_list|,
literal|false
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|,
name|IndexCopier
operator|.
name|COWDirecetoryTracker
operator|.
name|NOOP
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|dir
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|readAndAssert
argument_list|(
name|remote
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
comment|//Work dir must be empty post close
name|File
name|indexDir
init|=
name|copier
operator|.
name|getIndexDir
argument_list|(
name|defn
argument_list|,
literal|"foo"
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|(
name|FileUtils
operator|.
name|listFiles
argument_list|(
name|indexDir
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|fileNames
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|f
range|:
name|files
control|)
block|{
name|fileNames
operator|.
name|add
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|fileNames
argument_list|,
name|contains
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|copyOnWriteBasics
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|baseDir
init|=
operator|new
name|CloseSafeDir
argument_list|()
decl_stmt|;
name|LuceneIndexDefinition
name|defn
init|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexCopier
name|copier
init|=
operator|new
name|RAMIndexCopier
argument_list|(
name|baseDir
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|,
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
name|Directory
name|remote
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
comment|//State of remote directory should set before wrapping as later
comment|//additions would not be picked up given COW assume remote directory
comment|//to be read only
name|Directory
name|local
init|=
name|copier
operator|.
name|wrapForWrite
argument_list|(
name|defn
argument_list|,
name|remote
argument_list|,
literal|false
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|,
name|IndexCopier
operator|.
name|COWDirecetoryTracker
operator|.
name|NOOP
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
literal|"t1"
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|local
operator|.
name|listAll
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t1
operator|.
name|length
argument_list|,
name|local
operator|.
name|fileLength
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|t2
init|=
name|writeFile
argument_list|(
name|local
argument_list|,
literal|"t2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
literal|"t1"
argument_list|,
literal|"t2"
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|local
operator|.
name|listAll
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t2
operator|.
name|length
argument_list|,
name|local
operator|.
name|fileLength
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|local
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|local
operator|.
name|fileExists
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"t2 should be copied to remote"
argument_list|,
name|remote
operator|.
name|fileExists
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
name|readAndAssert
argument_list|(
name|local
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|readAndAssert
argument_list|(
name|local
argument_list|,
literal|"t2"
argument_list|,
name|t2
argument_list|)
expr_stmt|;
name|local
operator|.
name|deleteFile
argument_list|(
literal|"t1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
literal|"t2"
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|local
operator|.
name|listAll
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|local
operator|.
name|deleteFile
argument_list|(
literal|"t2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|()
argument_list|,
name|newHashSet
argument_list|(
name|local
operator|.
name|listAll
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|local
operator|.
name|fileLength
argument_list|(
literal|"nonExistentFile"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ignore
parameter_list|)
block|{          }
try|try
block|{
name|local
operator|.
name|openInput
argument_list|(
literal|"nonExistentFile"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ignore
parameter_list|)
block|{          }
name|local
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|baseDir
operator|.
name|fileExists
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks for the case where if the file exist local before writer starts      * then those files do not get deleted even if deleted by writer via      * indexing process from 'baseDir' as they might be in use by existing open      * indexes      */
annotation|@
name|Test
specifier|public
name|void
name|cowExistingLocalFileNotDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|baseDir
init|=
operator|new
name|CloseSafeDir
argument_list|()
decl_stmt|;
name|LuceneIndexDefinition
name|defn
init|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexCopier
name|copier
init|=
operator|new
name|RAMIndexCopier
argument_list|(
name|baseDir
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|,
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
name|Directory
name|remote
init|=
operator|new
name|CloseSafeDir
argument_list|()
decl_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t2
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t2"
argument_list|)
decl_stmt|;
name|Directory
name|local
init|=
name|copier
operator|.
name|wrapForWrite
argument_list|(
name|defn
argument_list|,
name|remote
argument_list|,
literal|false
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|,
name|IndexCopier
operator|.
name|COWDirecetoryTracker
operator|.
name|NOOP
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
literal|"t1"
argument_list|,
literal|"t2"
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|local
operator|.
name|listAll
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|t3
init|=
name|writeFile
argument_list|(
name|local
argument_list|,
literal|"t3"
argument_list|)
decl_stmt|;
comment|//Now pull in the file t1 via CopyOnRead in baseDir
name|Directory
name|localForRead
init|=
name|copier
operator|.
name|wrapForRead
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|readAndAssert
argument_list|(
name|localForRead
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
comment|//File which was copied from remote should not be deleted from baseDir
comment|//upon delete from local
name|assertTrue
argument_list|(
name|baseDir
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|local
operator|.
name|deleteFile
argument_list|(
literal|"t1"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"t1 should be deleted from remote"
argument_list|,
name|remote
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"t1 should be deleted from 'local' view also"
argument_list|,
name|local
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"t1 should not be deleted from baseDir"
argument_list|,
name|baseDir
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
comment|//File which was created only via local SHOULD get removed from
comment|//baseDir only upon close
name|assertTrue
argument_list|(
name|baseDir
operator|.
name|fileExists
argument_list|(
literal|"t3"
argument_list|)
argument_list|)
expr_stmt|;
name|local
operator|.
name|deleteFile
argument_list|(
literal|"t3"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"t1 should be deleted from remote"
argument_list|,
name|local
operator|.
name|fileExists
argument_list|(
literal|"t3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"t1 should NOT be deleted from remote"
argument_list|,
name|baseDir
operator|.
name|fileExists
argument_list|(
literal|"t3"
argument_list|)
argument_list|)
expr_stmt|;
name|local
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"t3 should also be deleted from local"
argument_list|,
name|baseDir
operator|.
name|fileExists
argument_list|(
literal|"t3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|cowReadDoneFromLocalIfFileExist
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|readLocal
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|Directory
name|baseDir
init|=
operator|new
name|CloseSafeDir
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|IndexInput
name|openInput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|readLocal
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|openInput
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|LuceneIndexDefinition
name|defn
init|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexCopier
name|copier
init|=
operator|new
name|RAMIndexCopier
argument_list|(
name|baseDir
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|,
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|readRemotes
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|Directory
name|remote
init|=
operator|new
name|RAMDirectory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|IndexInput
name|openInput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|readRemotes
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|openInput
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
name|Directory
name|local
init|=
name|copier
operator|.
name|wrapForWrite
argument_list|(
name|defn
argument_list|,
name|remote
argument_list|,
literal|false
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|,
name|IndexCopier
operator|.
name|COWDirecetoryTracker
operator|.
name|NOOP
argument_list|)
decl_stmt|;
comment|//Read should be served from remote
name|readRemotes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|readLocal
operator|.
name|clear
argument_list|()
expr_stmt|;
name|readAndAssert
argument_list|(
name|local
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
literal|"t1"
argument_list|)
argument_list|,
name|readRemotes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|()
argument_list|,
name|readLocal
argument_list|)
expr_stmt|;
comment|//Now pull in the file t1 via CopyOnRead in baseDir
name|Directory
name|localForRead
init|=
name|copier
operator|.
name|wrapForRead
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|readAndAssert
argument_list|(
name|localForRead
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
comment|//Read should be served from local
name|readRemotes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|readLocal
operator|.
name|clear
argument_list|()
expr_stmt|;
name|readAndAssert
argument_list|(
name|local
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|()
argument_list|,
name|readRemotes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
literal|"t1"
argument_list|)
argument_list|,
name|readLocal
argument_list|)
expr_stmt|;
name|local
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|cowCopyDoneOnClose
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CollectingExecutor
name|executor
init|=
operator|new
name|CollectingExecutor
argument_list|()
decl_stmt|;
name|Directory
name|baseDir
init|=
operator|new
name|CloseSafeDir
argument_list|()
decl_stmt|;
name|LuceneIndexDefinition
name|defn
init|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexCopier
name|copier
init|=
operator|new
name|RAMIndexCopier
argument_list|(
name|baseDir
argument_list|,
name|executor
argument_list|,
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
name|Directory
name|remote
init|=
operator|new
name|CloseSafeDir
argument_list|()
decl_stmt|;
specifier|final
name|Directory
name|local
init|=
name|copier
operator|.
name|wrapForWrite
argument_list|(
name|defn
argument_list|,
name|remote
argument_list|,
literal|false
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|,
name|IndexCopier
operator|.
name|COWDirecetoryTracker
operator|.
name|NOOP
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|local
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|local
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"t1 should NOT be copied to remote"
argument_list|,
name|remote
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Execute all job
name|executor
operator|.
name|executeAll
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"t1 should now be copied to remote"
argument_list|,
name|remote
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|t2
init|=
name|writeFile
argument_list|(
name|local
argument_list|,
literal|"t2"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"t2 should NOT be copied to remote"
argument_list|,
name|remote
operator|.
name|fileExists
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|copyLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|copyTasks
init|=
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|copyLatch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|//the executor to a proper one as it might happen that
comment|//STOP task is added post CountingExecutor has executed. Then there
comment|//would be none to process the STOP. Having a proper executor would
comment|//handle that case
name|executor
operator|.
name|setForwardingExecutor
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
name|executor
operator|.
name|executeAll
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|closeLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|closeTasks
init|=
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|closeLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|local
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|closeLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"t2 should NOT be copied to remote"
argument_list|,
name|remote
operator|.
name|fileExists
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Let copy to proceed
name|copyLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|//Now wait for close to finish
name|closeTasks
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"t2 should now be copied to remote"
argument_list|,
name|remote
operator|.
name|fileExists
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|cowCopyDoneOnCloseExceptionHandling
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CollectingExecutor
name|executor
init|=
operator|new
name|CollectingExecutor
argument_list|()
decl_stmt|;
name|Directory
name|baseDir
init|=
operator|new
name|CloseSafeDir
argument_list|()
decl_stmt|;
name|LuceneIndexDefinition
name|defn
init|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexCopier
name|copier
init|=
operator|new
name|RAMIndexCopier
argument_list|(
name|baseDir
argument_list|,
name|executor
argument_list|,
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
name|Directory
name|remote
init|=
operator|new
name|CloseSafeDir
argument_list|()
decl_stmt|;
specifier|final
name|Directory
name|local
init|=
name|copier
operator|.
name|wrapForWrite
argument_list|(
name|defn
argument_list|,
name|remote
argument_list|,
literal|false
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|,
name|IndexCopier
operator|.
name|COWDirecetoryTracker
operator|.
name|NOOP
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|local
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|local
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"t1 should NOT be copied to remote"
argument_list|,
name|remote
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Execute all job
name|executor
operator|.
name|executeAll
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"t1 should now be copied to remote"
argument_list|,
name|remote
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|t2
init|=
name|writeFile
argument_list|(
name|local
argument_list|,
literal|"t2"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"t2 should NOT be copied to remote"
argument_list|,
name|remote
operator|.
name|fileExists
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|copyLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|copyTasks
init|=
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|copyLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|executor
operator|.
name|executeAll
argument_list|()
expr_stmt|;
name|executor
operator|.
name|enableImmediateExecution
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|closeLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|closeTasks
init|=
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|closeLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|local
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|closeLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"t2 should NOT be copied to remote"
argument_list|,
name|remote
operator|.
name|fileExists
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Let copy to proceed
name|copyLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|copyTasks
operator|.
name|get
argument_list|()
expr_stmt|;
comment|//Now wait for close to finish
name|closeTasks
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"t2 should now be copied to remote"
argument_list|,
name|remote
operator|.
name|fileExists
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|cowFailureInCopy
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Directory
name|baseDir
init|=
operator|new
name|CloseSafeDir
argument_list|()
decl_stmt|;
name|LuceneIndexDefinition
name|defn
init|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexCopier
name|copier
init|=
operator|new
name|RAMIndexCopier
argument_list|(
name|baseDir
argument_list|,
name|executorService
argument_list|,
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|toFail
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|Directory
name|remote
init|=
operator|new
name|CloseSafeDir
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|IndexOutput
name|createOutput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|toFail
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failing copy for "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|createOutput
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|Directory
name|local
init|=
name|copier
operator|.
name|wrapForWrite
argument_list|(
name|defn
argument_list|,
name|remote
argument_list|,
literal|false
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|,
name|IndexCopier
operator|.
name|COWDirecetoryTracker
operator|.
name|NOOP
argument_list|)
decl_stmt|;
name|toFail
operator|.
name|add
argument_list|(
literal|"t2"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|local
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t2
init|=
name|writeFile
argument_list|(
name|local
argument_list|,
literal|"t2"
argument_list|)
decl_stmt|;
try|try
block|{
name|local
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{          }
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|cowPoolClosedWithTaskInQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Directory
name|baseDir
init|=
operator|new
name|CloseSafeDir
argument_list|()
decl_stmt|;
name|LuceneIndexDefinition
name|defn
init|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexCopier
name|copier
init|=
operator|new
name|RAMIndexCopier
argument_list|(
name|baseDir
argument_list|,
name|executorService
argument_list|,
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|toPause
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|pauseCopyLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Directory
name|remote
init|=
operator|new
name|CloseSafeDir
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|IndexOutput
name|createOutput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|toPause
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
try|try
block|{
name|pauseCopyLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{                      }
block|}
return|return
name|super
operator|.
name|createOutput
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|Directory
name|local
init|=
name|copier
operator|.
name|wrapForWrite
argument_list|(
name|defn
argument_list|,
name|remote
argument_list|,
literal|false
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|,
name|IndexCopier
operator|.
name|COWDirecetoryTracker
operator|.
name|NOOP
argument_list|)
decl_stmt|;
name|toPause
operator|.
name|add
argument_list|(
literal|"t2"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|local
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t2
init|=
name|writeFile
argument_list|(
name|local
argument_list|,
literal|"t2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t3
init|=
name|writeFile
argument_list|(
name|local
argument_list|,
literal|"t3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t4
init|=
name|writeFile
argument_list|(
name|local
argument_list|,
literal|"t4"
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|error
init|=
operator|new
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
name|Thread
name|closer
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|local
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|error
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|closer
operator|.
name|start
argument_list|()
expr_stmt|;
name|copier
operator|.
name|close
argument_list|()
expr_stmt|;
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|pauseCopyLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|closer
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Close should have thrown an exception"
argument_list|,
name|error
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the interaction between COR and COW using same underlying directory      */
annotation|@
name|Test
specifier|public
name|void
name|cowConcurrentAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|CollectingExecutor
name|executor
init|=
operator|new
name|CollectingExecutor
argument_list|()
decl_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|executor
operator|.
name|setForwardingExecutor
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
name|Directory
name|baseDir
init|=
operator|new
name|CloseSafeDir
argument_list|()
decl_stmt|;
name|LuceneIndexDefinition
name|defn
init|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
name|IndexCopier
name|copier
init|=
operator|new
name|RAMIndexCopier
argument_list|(
name|baseDir
argument_list|,
name|executor
argument_list|,
name|getWorkDir
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Directory
name|remote
init|=
operator|new
name|CloseSafeDir
argument_list|()
decl_stmt|;
name|byte
index|[]
name|f1
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|f1a
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"f1a"
argument_list|)
decl_stmt|;
name|Directory
name|cor1
init|=
name|copier
operator|.
name|wrapForRead
argument_list|(
name|indexPath
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|readAndAssert
argument_list|(
name|cor1
argument_list|,
literal|"f1"
argument_list|,
name|f1
argument_list|)
expr_stmt|;
name|readAndAssert
argument_list|(
name|cor1
argument_list|,
literal|"f1a"
argument_list|,
name|f1a
argument_list|)
expr_stmt|;
comment|//Ensure that deletion task submitted to executor get processed immediately
name|executor
operator|.
name|enableImmediateExecution
argument_list|()
expr_stmt|;
name|cor1
operator|.
name|close
argument_list|()
expr_stmt|;
name|executor
operator|.
name|enableDelayedExecution
argument_list|()
expr_stmt|;
specifier|final
name|CountDownLatch
name|pauseCopyLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Directory
name|remote2
init|=
operator|new
name|FilterDirectory
argument_list|(
name|remote
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|IndexOutput
name|createOutput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|pauseCopyLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{                  }
return|return
name|super
operator|.
name|createOutput
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|//Start copying a file to remote via COW
name|Directory
name|cow1
init|=
name|copier
operator|.
name|wrapForWrite
argument_list|(
name|defn
argument_list|,
name|remote2
argument_list|,
literal|false
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|,
name|IndexCopier
operator|.
name|COWDirecetoryTracker
operator|.
name|NOOP
argument_list|)
decl_stmt|;
name|byte
index|[]
name|f2
init|=
name|writeFile
argument_list|(
name|cow1
argument_list|,
literal|"f2"
argument_list|)
decl_stmt|;
comment|//Before copy is done to remote lets delete f1 from remote and
comment|//open a COR and close it such that it triggers delete of f1
name|remote
operator|.
name|deleteFile
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"f1b"
argument_list|)
expr_stmt|;
name|Directory
name|cor2
init|=
name|copier
operator|.
name|wrapForRead
argument_list|(
name|indexPath
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
comment|// Since we're talking of hypothetical stuck cow1 stuck and are running next CoW cycle on 'remote', let's
comment|// update timestamps on file that cow1 created to maintain some temporal sanity
name|updateLastModified
argument_list|(
name|cow1
argument_list|,
literal|"f2"
argument_list|)
expr_stmt|;
comment|//Ensure that deletion task submitted to executor get processed immediately
name|executor
operator|.
name|enableImmediateExecution
argument_list|()
expr_stmt|;
name|cor2
operator|.
name|close
argument_list|()
expr_stmt|;
name|executor
operator|.
name|enableDelayedExecution
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|baseDir
operator|.
name|fileExists
argument_list|(
literal|"f1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"f2 should not have been copied to remote so far"
argument_list|,
name|remote
operator|.
name|fileExists
argument_list|(
literal|"f2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"f2 should exist"
argument_list|,
name|baseDir
operator|.
name|fileExists
argument_list|(
literal|"f2"
argument_list|)
argument_list|)
expr_stmt|;
name|pauseCopyLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|cow1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"f2 should exist"
argument_list|,
name|remote
operator|.
name|fileExists
argument_list|(
literal|"f2"
argument_list|)
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|directoryContentMismatch_COR
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|baseDir
init|=
operator|new
name|CloseSafeDir
argument_list|()
decl_stmt|;
name|LuceneIndexDefinition
name|defn
init|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexCopier
name|copier
init|=
operator|new
name|RAMIndexCopier
argument_list|(
name|baseDir
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|,
name|getWorkDir
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Directory
name|remote
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t2
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t2"
argument_list|)
decl_stmt|;
comment|//State of remote directory should set before wrapping as later
comment|//additions would not be picked up given COW assume remote directory
comment|//to be read only
name|Directory
name|local
init|=
name|copier
operator|.
name|wrapForRead
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
name|readAndAssert
argument_list|(
name|local
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|readAndAssert
argument_list|(
name|local
argument_list|,
literal|"t2"
argument_list|,
name|t2
argument_list|)
expr_stmt|;
name|copier
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//2. Modify the same file in remote directory simulating rollback scenario
name|Directory
name|remoteModified
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|t1
operator|=
name|writeFile
argument_list|(
name|remoteModified
argument_list|,
literal|"t1"
argument_list|)
expr_stmt|;
comment|//3. Reopen the copier
name|copier
operator|=
operator|new
name|RAMIndexCopier
argument_list|(
name|baseDir
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|,
name|getWorkDir
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//4. Post opening local the content should be in sync with remote
comment|//So t1 should be recreated matching remote
comment|//t2 should be removed
name|local
operator|=
name|copier
operator|.
name|wrapForRead
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|remoteModified
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
expr_stmt|;
name|readAndAssert
argument_list|(
name|baseDir
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|baseDir
operator|.
name|fileExists
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|doReindex
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|child
argument_list|(
name|IndexDefinition
operator|.
name|STATUS_NODE
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|LuceneIndexEditorContext
operator|.
name|configureUniqueId
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|writeFile
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
name|randomBytes
argument_list|(
name|rnd
operator|.
name|nextInt
argument_list|(
name|maxFileSize
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|IndexOutput
name|o
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|name
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|o
operator|.
name|writeBytes
argument_list|(
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|o
operator|.
name|close
argument_list|()
expr_stmt|;
name|updateLastModified
argument_list|(
name|dir
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|private
specifier|static
name|void
name|updateLastModified
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|DelayCopyingSimpleFSDirectory
operator|.
name|updateLastModified
argument_list|(
name|dir
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|randomBytes
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|rnd
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|private
name|File
name|getWorkDir
parameter_list|()
block|{
return|return
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|readAndAssert
parameter_list|(
name|Directory
name|wrapped
parameter_list|,
name|String
name|fileName
parameter_list|,
name|byte
index|[]
name|expectedData
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexInput
name|i
init|=
name|wrapped
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|wrapped
operator|.
name|fileLength
argument_list|(
name|fileName
argument_list|)
index|]
decl_stmt|;
name|i
operator|.
name|readBytes
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|expectedData
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|copy
parameter_list|(
name|Directory
name|source
parameter_list|,
name|Directory
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|file
range|:
name|source
operator|.
name|listAll
argument_list|()
control|)
block|{
name|source
operator|.
name|copy
argument_list|(
name|dest
argument_list|,
name|file
argument_list|,
name|file
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|RAMIndexCopier
extends|extends
name|IndexCopier
block|{
specifier|final
name|Directory
name|baseDir
decl_stmt|;
specifier|public
name|RAMIndexCopier
parameter_list|(
name|Directory
name|baseDir
parameter_list|,
name|Executor
name|executor
parameter_list|,
name|File
name|indexRootDir
parameter_list|,
name|boolean
name|prefetchEnabled
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|executor
argument_list|,
name|indexRootDir
argument_list|,
name|prefetchEnabled
argument_list|)
expr_stmt|;
name|this
operator|.
name|baseDir
operator|=
name|baseDir
expr_stmt|;
block|}
specifier|public
name|RAMIndexCopier
parameter_list|(
name|Directory
name|baseDir
parameter_list|,
name|Executor
name|executor
parameter_list|,
name|File
name|indexRootDir
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|baseDir
argument_list|,
name|executor
argument_list|,
name|indexRootDir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Directory
name|createLocalDirForIndexReader
parameter_list|(
name|String
name|indexPath
parameter_list|,
name|LuceneIndexDefinition
name|definition
parameter_list|,
name|String
name|dirName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|baseDir
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Directory
name|createLocalDirForIndexWriter
parameter_list|(
name|LuceneIndexDefinition
name|definition
parameter_list|,
name|String
name|dirName
parameter_list|,
name|boolean
name|reindexMode
parameter_list|,
name|COWDirecetoryTracker
name|cowDirecetoryTracker
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|baseDir
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|DelayCopyingSimpleFSDirectory
extends|extends
name|SimpleFSDirectory
block|{
specifier|private
specifier|static
name|TemporaryFolder
name|temporaryFolder
decl_stmt|;
specifier|public
name|DelayCopyingSimpleFSDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|updateLastModified
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|DelayCopyingSimpleFSDirectory
name|d
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dir
operator|instanceof
name|DelayCopyingSimpleFSDirectory
condition|)
block|{
name|d
operator|=
operator|(
name|DelayCopyingSimpleFSDirectory
operator|)
name|dir
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dir
operator|instanceof
name|FilterDirectory
condition|)
block|{
name|Directory
name|delegate
init|=
operator|(
operator|(
name|FilterDirectory
operator|)
name|dir
operator|)
operator|.
name|getDelegate
argument_list|()
decl_stmt|;
if|if
condition|(
name|delegate
operator|instanceof
name|DelayCopyingSimpleFSDirectory
condition|)
block|{
name|d
operator|=
operator|(
name|DelayCopyingSimpleFSDirectory
operator|)
name|delegate
expr_stmt|;
block|}
block|}
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|d
operator|.
name|updateLastModified
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateLastModified
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
comment|// Update file timestamp manually to mimic last updated time updates without sleeping
name|CLOCK
operator|.
name|waitUntil
argument_list|(
name|CLOCK
operator|.
name|getTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|f
operator|.
name|setLastModified
argument_list|(
name|CLOCK
operator|.
name|getTimeIncreasing
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// ignored
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|copy
parameter_list|(
name|Directory
name|to
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|dest
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|copy
argument_list|(
name|to
argument_list|,
name|src
argument_list|,
name|dest
argument_list|,
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|to
operator|instanceof
name|DelayCopyingSimpleFSDirectory
condition|)
block|{
operator|(
operator|(
name|DelayCopyingSimpleFSDirectory
operator|)
name|to
operator|)
operator|.
name|updateLastModified
argument_list|(
name|dest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|FileTrackingDirectory
extends|extends
name|DelayCopyingSimpleFSDirectory
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|openedFiles
init|=
name|newArrayList
argument_list|()
decl_stmt|;
specifier|public
name|FileTrackingDirectory
parameter_list|()
throws|throws
name|IOException
block|{         }
annotation|@
name|Override
specifier|public
name|IndexInput
name|openInput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|openedFiles
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|openInput
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|openedFiles
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|CloseSafeDir
extends|extends
name|DelayCopyingSimpleFSDirectory
block|{
specifier|public
name|CloseSafeDir
parameter_list|()
throws|throws
name|IOException
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|closer
operator|.
name|register
argument_list|(
name|this
operator|::
name|close0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|close0
parameter_list|()
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|CollectingExecutor
implements|implements
name|Executor
block|{
specifier|final
name|BlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|commands
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|immediateExecution
init|=
literal|false
decl_stmt|;
specifier|private
specifier|volatile
name|Executor
name|forwardingExecutor
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
if|if
condition|(
name|immediateExecution
condition|)
block|{
name|command
operator|.
name|run
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|forwardingExecutor
operator|!=
literal|null
condition|)
block|{
name|forwardingExecutor
operator|.
name|execute
argument_list|(
name|command
argument_list|)
expr_stmt|;
return|return;
block|}
name|commands
operator|.
name|add
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
name|void
name|executeAll
parameter_list|()
block|{
name|Runnable
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|commands
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|enableImmediateExecution
parameter_list|()
block|{
name|immediateExecution
operator|=
literal|true
expr_stmt|;
block|}
name|void
name|enableDelayedExecution
parameter_list|()
block|{
name|immediateExecution
operator|=
literal|false
expr_stmt|;
block|}
name|void
name|setForwardingExecutor
parameter_list|(
name|Executor
name|forwardingExecutor
parameter_list|)
block|{
name|this
operator|.
name|forwardingExecutor
operator|=
name|forwardingExecutor
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

