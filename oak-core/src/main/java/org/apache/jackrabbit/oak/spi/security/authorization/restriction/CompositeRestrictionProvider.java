begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_comment
comment|/**  * Aggregates of a collection of {@link RestrictionProvider} implementations  * into a single provider.  */
end_comment

begin_class
specifier|public
class|class
name|CompositeRestrictionProvider
implements|implements
name|RestrictionProvider
block|{
specifier|private
specifier|final
name|Collection
argument_list|<
name|?
extends|extends
name|RestrictionProvider
argument_list|>
name|providers
decl_stmt|;
specifier|private
name|CompositeRestrictionProvider
parameter_list|(
annotation|@
name|Nonnull
name|Collection
argument_list|<
name|?
extends|extends
name|RestrictionProvider
argument_list|>
name|providers
parameter_list|)
block|{
name|this
operator|.
name|providers
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|providers
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|RestrictionProvider
name|newInstance
parameter_list|(
annotation|@
name|Nonnull
name|Collection
argument_list|<
name|?
extends|extends
name|RestrictionProvider
argument_list|>
name|providers
parameter_list|)
block|{
switch|switch
condition|(
name|providers
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
name|EMPTY
return|;
case|case
literal|1
case|:
return|return
name|providers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
default|default:
return|return
operator|new
name|CompositeRestrictionProvider
argument_list|(
name|providers
argument_list|)
return|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|RestrictionDefinition
argument_list|>
name|getSupportedRestrictions
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|)
block|{
name|Set
argument_list|<
name|RestrictionDefinition
argument_list|>
name|defs
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|RestrictionProvider
name|rp
range|:
name|providers
control|)
block|{
name|defs
operator|.
name|addAll
argument_list|(
name|rp
operator|.
name|getSupportedRestrictions
argument_list|(
name|oakPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|defs
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Restriction
name|createRestriction
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|Nonnull
name|String
name|oakName
parameter_list|,
annotation|@
name|Nonnull
name|Value
name|value
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|RepositoryException
block|{
return|return
name|getProvider
argument_list|(
name|oakPath
argument_list|,
name|oakName
argument_list|)
operator|.
name|createRestriction
argument_list|(
name|oakPath
argument_list|,
name|oakName
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Restriction
name|createRestriction
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|Nonnull
name|String
name|oakName
parameter_list|,
annotation|@
name|Nonnull
name|Value
modifier|...
name|values
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|RepositoryException
block|{
return|return
name|getProvider
argument_list|(
name|oakPath
argument_list|,
name|oakName
argument_list|)
operator|.
name|createRestriction
argument_list|(
name|oakPath
argument_list|,
name|oakName
argument_list|,
name|values
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Restriction
argument_list|>
name|readRestrictions
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|Nonnull
name|Tree
name|aceTree
parameter_list|)
block|{
name|Set
argument_list|<
name|Restriction
argument_list|>
name|restrictions
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|RestrictionProvider
name|rp
range|:
name|providers
control|)
block|{
name|restrictions
operator|.
name|addAll
argument_list|(
name|rp
operator|.
name|readRestrictions
argument_list|(
name|oakPath
argument_list|,
name|aceTree
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|restrictions
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeRestrictions
parameter_list|(
name|String
name|oakPath
parameter_list|,
name|Tree
name|aceTree
parameter_list|,
name|Set
argument_list|<
name|Restriction
argument_list|>
name|restrictions
parameter_list|)
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|Restriction
name|r
range|:
name|restrictions
control|)
block|{
name|RestrictionProvider
name|rp
init|=
name|getProvider
argument_list|(
name|oakPath
argument_list|,
name|getName
argument_list|(
name|r
argument_list|)
argument_list|)
decl_stmt|;
name|rp
operator|.
name|writeRestrictions
argument_list|(
name|oakPath
argument_list|,
name|aceTree
argument_list|,
name|restrictions
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|validateRestrictions
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|Nonnull
name|Tree
name|aceTree
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|RepositoryException
block|{
name|Set
argument_list|<
name|RestrictionDefinition
argument_list|>
name|supported
init|=
name|getSupportedRestrictions
argument_list|(
name|oakPath
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|rNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Restriction
name|r
range|:
name|readRestrictions
argument_list|(
name|oakPath
argument_list|,
name|aceTree
argument_list|)
control|)
block|{
name|String
name|name
init|=
name|getName
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|rNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|boolean
name|valid
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RestrictionDefinition
name|def
range|:
name|supported
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|valid
operator|=
name|def
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getDefinition
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|valid
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Invalid restriction: "
operator|+
name|r
operator|+
literal|" at "
operator|+
name|oakPath
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|RestrictionDefinition
name|def
range|:
name|supported
control|)
block|{
if|if
condition|(
name|def
operator|.
name|isMandatory
argument_list|()
operator|&&
operator|!
name|rNames
operator|.
name|contains
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Mandatory restriction "
operator|+
name|def
operator|.
name|getName
argument_list|()
operator|+
literal|" is missing."
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|RestrictionPattern
name|getPattern
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|)
block|{
name|List
argument_list|<
name|RestrictionPattern
argument_list|>
name|patterns
init|=
operator|new
name|ArrayList
argument_list|<
name|RestrictionPattern
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RestrictionProvider
name|rp
range|:
name|providers
control|)
block|{
name|RestrictionPattern
name|pattern
init|=
name|rp
operator|.
name|getPattern
argument_list|(
name|oakPath
argument_list|,
name|tree
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|!=
name|RestrictionPattern
operator|.
name|EMPTY
condition|)
block|{
name|patterns
operator|.
name|add
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
block|}
switch|switch
condition|(
name|patterns
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
name|RestrictionPattern
operator|.
name|EMPTY
return|;
case|case
literal|1
case|:
return|return
name|patterns
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
default|default :
return|return
operator|new
name|CompositePattern
argument_list|(
name|patterns
argument_list|)
return|;
block|}
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
name|RestrictionProvider
name|getProvider
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|Nonnull
name|String
name|oakName
parameter_list|)
throws|throws
name|AccessControlException
block|{
for|for
control|(
name|RestrictionProvider
name|rp
range|:
name|providers
control|)
block|{
for|for
control|(
name|RestrictionDefinition
name|def
range|:
name|rp
operator|.
name|getSupportedRestrictions
argument_list|(
name|oakPath
argument_list|)
control|)
block|{
if|if
condition|(
name|def
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|oakName
argument_list|)
condition|)
block|{
return|return
name|rp
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Unsupported restriction (path = "
operator|+
name|oakPath
operator|+
literal|"; name = "
operator|+
name|oakName
operator|+
literal|')'
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|String
name|getName
parameter_list|(
name|Restriction
name|restriction
parameter_list|)
block|{
return|return
name|restriction
operator|.
name|getDefinition
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

