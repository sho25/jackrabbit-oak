begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Mac
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
operator|.
name|encodeHexString
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractSharedBackend
implements|implements
name|SharedBackend
block|{
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractSharedBackend
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ALGORITHM
init|=
literal|"HmacSHA1"
decl_stmt|;
comment|/**      * Cached copy of the reference key of this data store. Initialized in      * {@link #getReferenceKey()} when the key is first accessed.      */
specifier|private
name|byte
index|[]
name|referenceKey
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|getReferenceFromIdentifier
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|)
block|{
try|try
block|{
name|String
name|id
init|=
name|identifier
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Mac
name|mac
init|=
name|Mac
operator|.
name|getInstance
argument_list|(
name|ALGORITHM
argument_list|)
decl_stmt|;
name|mac
operator|.
name|init
argument_list|(
operator|new
name|SecretKeySpec
argument_list|(
name|getReferenceKey
argument_list|()
argument_list|,
name|ALGORITHM
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|hash
init|=
name|mac
operator|.
name|doFinal
argument_list|(
name|id
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|id
operator|+
literal|':'
operator|+
name|encodeHexString
argument_list|(
name|hash
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to hash identifier using MAC (Message Authentication Code) algorithm."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns the reference key of this backend. If one does not already      * exist, it is automatically created in an implementation-specific way.      * The default implementation simply creates a temporary random key that's      * valid only until the data store gets restarted. Subclasses can override      * and/or decorate this method to support a more persistent reference key.      *<p>      * This method is called only once during the lifetime of a backend      * instance and the return value is cached in memory, so it's no problem      * if the implementation is slow.      *      * @return reference key      * @throws DataStoreException if the key is not available      */
specifier|public
name|byte
index|[]
name|getOrCreateReferenceKey
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|byte
index|[]
name|referenceKeyValue
init|=
operator|new
name|byte
index|[
literal|256
index|]
decl_stmt|;
operator|new
name|SecureRandom
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|referenceKeyValue
argument_list|)
expr_stmt|;
return|return
name|referenceKeyValue
return|;
block|}
comment|//-----------------------------------------------------------< private>--
comment|/**      * Returns the reference key of this data store. Synchronized to      * control concurrent access to the cached {@link #referenceKey} value.      *      * @return reference key      * @throws DataStoreException if the key is not available      */
specifier|private
specifier|synchronized
name|byte
index|[]
name|getReferenceKey
parameter_list|()
throws|throws
name|DataStoreException
block|{
if|if
condition|(
name|referenceKey
operator|==
literal|null
condition|)
block|{
name|referenceKey
operator|=
name|getOrCreateReferenceKey
argument_list|()
expr_stmt|;
block|}
return|return
name|referenceKey
return|;
block|}
block|}
end_class

end_unit

