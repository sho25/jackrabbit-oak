begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Commit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|builder
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|json
operator|.
name|JsonUtil
import|;
end_import

begin_comment
comment|/**  * The {@code MongoDB} implementation of the {@link MicroKernel}.  *  *<p>  * This class will transform and delegate to instances of {@link NodeStore} and {@link BlobStore}.  *</p>  *  * @author<a href="mailto:pmarx@adobe.com>Philipp Marx</a>  */
end_comment

begin_class
specifier|public
class|class
name|MongoMicroKernel
implements|implements
name|MicroKernel
block|{
specifier|private
specifier|final
name|BlobStore
name|blobStore
decl_stmt|;
specifier|private
specifier|final
name|NodeStore
name|nodeStore
decl_stmt|;
comment|/**      * Constructs a new {@code MongoMicroKernel}.      *      * @param nodeStore The {@link NodeStore}.      * @param blobStore The {@link BlobStore}.      */
specifier|public
name|MongoMicroKernel
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|,
name|BlobStore
name|blobStore
parameter_list|)
block|{
name|this
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|branch
parameter_list|(
name|String
name|trunkRevisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Branch is currently not supported."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|commit
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|jsonDiff
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|String
name|newRevisionId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Commit
name|commit
init|=
name|CommitBuilder
operator|.
name|build
argument_list|(
name|path
argument_list|,
name|jsonDiff
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|newRevisionId
operator|=
name|nodeStore
operator|.
name|commit
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|newRevisionId
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|diff
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|filter
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|MicroKernelException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Diff is currently not supported."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|long
name|childNodeCount
init|=
literal|0L
decl_stmt|;
try|try
block|{
name|String
name|revId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|revisionId
operator|!=
literal|null
condition|)
block|{
name|revId
operator|=
operator|new
name|String
argument_list|(
name|revisionId
argument_list|)
expr_stmt|;
block|}
name|Node
name|rootOfPath
init|=
name|nodeStore
operator|.
name|getNodes
argument_list|(
name|path
argument_list|,
name|revId
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootOfPath
operator|!=
literal|null
condition|)
block|{
name|childNodeCount
operator|=
name|rootOfPath
operator|.
name|getChildCount
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|childNodeCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHeadRevision
parameter_list|()
throws|throws
name|MicroKernelException
block|{
name|String
name|headRevisionId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|headRevisionId
operator|=
name|nodeStore
operator|.
name|getHeadRevision
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|headRevisionId
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getJournal
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|MicroKernelException
block|{
return|return
name|nodeStore
operator|.
name|getJournal
argument_list|(
name|fromRevisionId
argument_list|,
name|toRevisionId
argument_list|,
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|long
name|length
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|length
operator|=
name|blobStore
operator|.
name|getBlobLength
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNodes
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|int
name|depth
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|maxChildNodes
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|NodeFilter
name|nodeFilter
init|=
name|filter
operator|==
literal|null
operator|||
name|filter
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|NodeFilter
operator|.
name|parse
argument_list|(
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|>
literal|0
operator|&&
name|nodeFilter
operator|!=
literal|null
operator|&&
name|nodeFilter
operator|.
name|getChildNodeFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Both an offset> 0 and a filter on node names have been specified...
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"offset> 0 with child node filter"
argument_list|)
throw|;
block|}
try|try
block|{
comment|// FIXME [Mete] Should filter, offset, and maxChildNodes be handled in Mongo instead?
name|Node
name|rootNode
init|=
name|nodeStore
operator|.
name|getNodes
argument_list|(
name|path
argument_list|,
name|revisionId
argument_list|,
name|depth
argument_list|,
name|offset
argument_list|,
name|maxChildNodes
argument_list|,
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootNode
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|JsonUtil
operator|.
name|convertToJson
argument_list|(
name|rootNode
argument_list|,
name|depth
argument_list|,
operator|(
name|int
operator|)
name|offset
argument_list|,
name|maxChildNodes
argument_list|,
literal|true
argument_list|,
name|nodeFilter
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRevisionHistory
parameter_list|(
name|long
name|since
parameter_list|,
name|int
name|maxEntries
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|MicroKernelException
block|{
return|return
name|nodeStore
operator|.
name|getRevisionHistory
argument_list|(
name|since
argument_list|,
name|maxEntries
argument_list|,
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|merge
parameter_list|(
name|String
name|branchRevisionId
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|MicroKernelException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Merge is currently not supported."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|nodeExists
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|boolean
name|exists
init|=
literal|false
decl_stmt|;
try|try
block|{
name|String
name|revId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|revisionId
operator|!=
literal|null
condition|)
block|{
name|revId
operator|=
operator|new
name|String
argument_list|(
name|revisionId
argument_list|)
expr_stmt|;
block|}
name|exists
operator|=
name|nodeStore
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|,
name|revId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|exists
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|String
name|blobId
parameter_list|,
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|buff
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|int
name|totalBytes
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|totalBytes
operator|=
name|blobStore
operator|.
name|readBlob
argument_list|(
name|blobId
argument_list|,
name|pos
argument_list|,
name|buff
argument_list|,
name|off
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|totalBytes
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|waitForCommit
parameter_list|(
name|String
name|oldHeadRevisionId
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|MicroKernelException
throws|,
name|InterruptedException
block|{
return|return
name|nodeStore
operator|.
name|waitForCommit
argument_list|(
name|oldHeadRevisionId
argument_list|,
name|timeout
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|write
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|String
name|blobId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|blobId
operator|=
name|blobStore
operator|.
name|writeBlob
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|blobId
return|;
block|}
block|}
end_class

end_unit

