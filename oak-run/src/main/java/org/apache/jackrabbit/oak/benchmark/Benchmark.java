begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math
operator|.
name|stat
operator|.
name|descriptive
operator|.
name|DescriptiveStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|JackrabbitRepositoryFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|OakRepositoryFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|RepositoryFixture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_class
specifier|public
class|class
name|Benchmark
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RepositoryFixture
argument_list|>
name|FIXTURES
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|RepositoryFixture
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"Jackrabbit"
argument_list|,
operator|new
name|JackrabbitRepositoryFixture
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"Oak-Memory"
argument_list|,
operator|new
name|OakRepositoryFixture
argument_list|()
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AbstractTest
argument_list|>
name|TESTS
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|AbstractTest
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"Login"
argument_list|,
operator|new
name|LoginTest
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"LoginLogout"
argument_list|,
operator|new
name|LoginLogoutTest
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"GetProperty"
argument_list|,
operator|new
name|ReadPropertyTest
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"SetProperty"
argument_list|,
operator|new
name|SetPropertyTest
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"SmallRead"
argument_list|,
operator|new
name|SmallFileReadTest
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"SmallWrite"
argument_list|,
operator|new
name|SmallFileWriteTest
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"ConcurrentRead"
argument_list|,
operator|new
name|ConcurrentReadTest
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"ConcurrentWrite"
argument_list|,
operator|new
name|ConcurrentReadWriteTest
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"SimpleSearch"
argument_list|,
operator|new
name|SimpleSearchTest
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"SQL2"
argument_list|,
operator|new
name|SQL2SearchTest
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"Descendant"
argument_list|,
operator|new
name|DescendantSearchTest
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"SQL2Descendant"
argument_list|,
operator|new
name|SQL2DescendantSearchTest
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"CreateFlatNode"
argument_list|,
operator|new
name|CreateManyChildNodesTest
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"UpdateFlatNode"
argument_list|,
operator|new
name|UpdateManyChildNodesTest
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"TransientSpace"
argument_list|,
operator|new
name|TransientManyChildNodesTest
argument_list|()
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RepositoryFixture
argument_list|>
name|fixtures
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|AbstractTest
argument_list|>
name|tests
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|args
control|)
block|{
if|if
condition|(
name|FIXTURES
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|fixtures
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|FIXTURES
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TESTS
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|tests
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|TESTS
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown argument: "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|fixtures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fixtures
operator|.
name|putAll
argument_list|(
name|FIXTURES
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tests
operator|.
name|putAll
argument_list|(
name|TESTS
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AbstractTest
argument_list|>
name|test
range|:
name|tests
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"# %-34.34s     min     10%%     50%%     90%%     max%n"
argument_list|,
name|test
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RepositoryFixture
argument_list|>
name|fixture
range|:
name|fixtures
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Repository
index|[]
name|cluster
init|=
operator|new
name|Repository
index|[
literal|1
index|]
decl_stmt|;
name|fixture
operator|.
name|getValue
argument_list|()
operator|.
name|setUpCluster
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Run the test
name|DescriptiveStatistics
name|statistics
init|=
name|runTest
argument_list|(
name|test
operator|.
name|getValue
argument_list|()
argument_list|,
name|cluster
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|statistics
operator|.
name|getN
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%-36.36s  %6.0f  %6.0f  %6.0f  %6.0f  %6.0f%n"
argument_list|,
name|fixture
operator|.
name|getKey
argument_list|()
argument_list|,
name|statistics
operator|.
name|getMin
argument_list|()
argument_list|,
name|statistics
operator|.
name|getPercentile
argument_list|(
literal|10.0
argument_list|)
argument_list|,
name|statistics
operator|.
name|getPercentile
argument_list|(
literal|50.0
argument_list|)
argument_list|,
name|statistics
operator|.
name|getPercentile
argument_list|(
literal|90.0
argument_list|)
argument_list|,
name|statistics
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|fixture
operator|.
name|getValue
argument_list|()
operator|.
name|tearDownCluster
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Credentials
name|CREDENTIALS
init|=
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DescriptiveStatistics
name|runTest
parameter_list|(
name|AbstractTest
name|test
parameter_list|,
name|Repository
name|repository
parameter_list|)
throws|throws
name|Exception
block|{
name|DescriptiveStatistics
name|statistics
init|=
operator|new
name|DescriptiveStatistics
argument_list|()
decl_stmt|;
name|test
operator|.
name|setUp
argument_list|(
name|repository
argument_list|,
name|CREDENTIALS
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Run a few iterations to warm up the system
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|test
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
comment|// Run test iterations, and capture the execution times
name|int
name|iterations
init|=
literal|0
decl_stmt|;
name|long
name|runtimeEnd
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterations
operator|++
operator|<
literal|10
operator|||
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|runtimeEnd
condition|)
block|{
name|statistics
operator|.
name|addValue
argument_list|(
name|test
operator|.
name|execute
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|test
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
return|return
name|statistics
return|;
block|}
block|}
end_class

end_unit

