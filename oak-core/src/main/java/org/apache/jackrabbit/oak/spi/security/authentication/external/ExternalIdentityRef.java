begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*************************************************************************  *  * ADOBE CONFIDENTIAL  * ___________________  *  *  Copyright ${today.year} Adobe Systems Incorporated  *  All Rights Reserved.  *  * NOTICE:  All information contained herein is, and remains  * the property of Adobe Systems Incorporated and its suppliers,  * if any.  The intellectual and technical concepts contained  * herein are proprietary to Adobe Systems Incorporated and its  * suppliers and are protected by trade secret or copyright law.  * Dissemination of this information or reproduction of this material  * is strictly forbidden unless prior written permission is obtained  * from Adobe Systems Incorporated.  **************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * {@code ExternalIdentityRef} defines a reference to an external identity.  */
end_comment

begin_class
specifier|public
class|class
name|ExternalIdentityRef
block|{
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
specifier|private
specifier|final
name|String
name|providerName
decl_stmt|;
specifier|private
specifier|final
name|String
name|string
decl_stmt|;
comment|/**      * Creates a new external identity ref with the given id and provider name      * @param id the id of the identity.      * @param providerName the name of the identity provider      */
specifier|public
name|ExternalIdentityRef
parameter_list|(
annotation|@
name|Nonnull
name|String
name|id
parameter_list|,
annotation|@
name|CheckForNull
name|String
name|providerName
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|providerName
operator|=
name|providerName
expr_stmt|;
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
name|Text
operator|.
name|escape
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|providerName
operator|!=
literal|null
operator|&&
name|providerName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|'@'
argument_list|)
operator|.
name|append
argument_list|(
name|Text
operator|.
name|escape
argument_list|(
name|providerName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|string
operator|=
name|b
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns the name of the identity provider.      * @return the name of the identity provider.      */
annotation|@
name|CheckForNull
specifier|public
name|String
name|getProviderName
parameter_list|()
block|{
return|return
name|providerName
return|;
block|}
comment|/**      * Returns the id of the external identity. for example the DN of an LDAP user.      * @return the id      */
annotation|@
name|Nonnull
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**      * Returns a string representation of this external identity reference      * @return a string representation.      */
annotation|@
name|Nonnull
specifier|public
name|String
name|getString
parameter_list|()
block|{
return|return
name|string
return|;
block|}
comment|/**      * Creates an external identity reference from a string representation.      * @param str the string      * @return the reference      */
specifier|public
specifier|static
name|ExternalIdentityRef
name|fromString
parameter_list|(
annotation|@
name|Nonnull
name|String
name|str
parameter_list|)
block|{
name|int
name|idx
init|=
name|str
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
return|return
operator|new
name|ExternalIdentityRef
argument_list|(
name|Text
operator|.
name|unescape
argument_list|(
name|str
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ExternalIdentityRef
argument_list|(
name|Text
operator|.
name|unescape
argument_list|(
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
argument_list|)
argument_list|,
name|Text
operator|.
name|unescape
argument_list|(
name|str
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

