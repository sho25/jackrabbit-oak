begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
operator|.
name|util
operator|.
name|OakIndexUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
operator|.
name|util
operator|.
name|OakIndexUtils
operator|.
name|PropertyIndex
import|;
end_import

begin_comment
comment|/**  * Test for measuring the performance of creating many nodes  * which contain a property that is indexed  *<p>  * This test does not want to replicate the many-child-nodes test, where  * all the child nodes are created from the same parent. instead, this test  * spreads out the nodes over a number of parent.  */
end_comment

begin_class
specifier|public
class|class
name|CreateManyIndexedNodesTest
extends|extends
name|AbstractTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|NODE_TYPE
init|=
literal|"oak:Unstructured"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|ROOT_NODE_NAME
init|=
literal|"test"
operator|+
name|TEST_ID
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PARENT_COUNT
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|THREAD_COUNT
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NODES_PER_THREAD
init|=
literal|50
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
name|Writer
name|foregroundJob
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|beforeSuite
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|session
operator|=
name|loginWriter
argument_list|()
expr_stmt|;
name|Node
name|rootNode
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
name|ROOT_NODE_NAME
argument_list|,
name|NODE_TYPE
argument_list|)
decl_stmt|;
name|Node
name|testNode
init|=
name|rootNode
operator|.
name|addNode
argument_list|(
literal|"testNode"
argument_list|,
name|NODE_TYPE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|PARENT_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|level1Node
init|=
name|testNode
operator|.
name|addNode
argument_list|(
literal|"level1_"
operator|+
name|i
argument_list|,
name|NODE_TYPE
argument_list|)
decl_stmt|;
block|}
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|PropertyIndex
name|index
init|=
operator|new
name|OakIndexUtils
operator|.
name|PropertyIndex
argument_list|()
decl_stmt|;
name|index
operator|.
name|property
argument_list|(
literal|"indexedProperty"
argument_list|)
expr_stmt|;
name|index
operator|.
name|create
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|THREAD_COUNT
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|addBackgroundJob
argument_list|(
operator|new
name|Writer
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|foregroundJob
operator|=
operator|new
name|Writer
argument_list|()
expr_stmt|;
block|}
specifier|private
class|class
name|Writer
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Session
name|session
init|=
name|loginWriter
argument_list|()
decl_stmt|;
specifier|private
name|long
name|count
decl_stmt|;
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NODES_PER_THREAD
condition|;
name|i
operator|++
control|)
block|{
name|session
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|int
name|level1
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|PARENT_COUNT
argument_list|)
decl_stmt|;
name|Node
name|level1Node
init|=
name|session
operator|.
name|getNode
argument_list|(
literal|"/"
operator|+
name|ROOT_NODE_NAME
operator|+
literal|"/testNode/level1_"
operator|+
name|level1
argument_list|)
decl_stmt|;
name|String
name|randomName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Node
name|newNode
init|=
name|level1Node
operator|.
name|addNode
argument_list|(
name|randomName
argument_list|)
decl_stmt|;
name|newNode
operator|.
name|setProperty
argument_list|(
literal|"indexedProperty"
argument_list|,
name|randomName
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeTest
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// nothing so far
block|}
annotation|@
name|Override
specifier|public
name|void
name|runTest
parameter_list|()
throws|throws
name|Exception
block|{
name|foregroundJob
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterTest
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// nothing so far
block|}
annotation|@
name|Override
specifier|protected
name|void
name|afterSuite
parameter_list|()
throws|throws
name|Exception
block|{
comment|//        session.getRootNode().getNode(ROOT_NODE_NAME).remove();
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

