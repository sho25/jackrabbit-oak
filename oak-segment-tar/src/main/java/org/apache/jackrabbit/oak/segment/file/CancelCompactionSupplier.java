begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|System
operator|.
name|currentTimeMillis
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BooleanSupplier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * Represents the cancellation policy for the compaction phase. If the disk  * space was considered insufficient at least once during compaction (or if the  * space was never sufficient to begin with), compaction is considered canceled.  * Furthermore when the file store is shutting down, compaction is considered  * canceled. Finally the cancellation can be triggered by a timeout that can be  * set at any time.  */
end_comment

begin_class
class|class
name|CancelCompactionSupplier
implements|implements
name|Supplier
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|private
specifier|final
name|AtomicBoolean
name|cancelled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|BooleanSupplier
name|diskSpaceExhausted
decl_stmt|;
specifier|private
specifier|final
name|BooleanSupplier
name|memoryExhausted
decl_stmt|;
specifier|private
specifier|final
name|BooleanSupplier
name|shutDown
decl_stmt|;
specifier|private
name|String
name|reason
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|baseLine
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|deadline
decl_stmt|;
name|CancelCompactionSupplier
parameter_list|(
name|BooleanSupplier
name|diskSpaceExhausted
parameter_list|,
name|BooleanSupplier
name|memoryExhausted
parameter_list|,
name|BooleanSupplier
name|shutDown
parameter_list|)
block|{
name|this
operator|.
name|diskSpaceExhausted
operator|=
name|diskSpaceExhausted
expr_stmt|;
name|this
operator|.
name|memoryExhausted
operator|=
name|memoryExhausted
expr_stmt|;
name|this
operator|.
name|shutDown
operator|=
name|shutDown
expr_stmt|;
block|}
comment|/**      * Set a timeout for cancellation. Setting a different timeout cancels a      * previous one that did not yet elapse. Setting a timeout after      * cancellation took place has no effect.      */
specifier|public
name|void
name|timeOutAfter
parameter_list|(
specifier|final
name|long
name|duration
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|TimeUnit
name|unit
parameter_list|)
block|{
name|baseLine
operator|=
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|deadline
operator|=
name|baseLine
operator|+
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|duration
argument_list|,
name|unit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
comment|// The outOfDiskSpace and shutdown flags can only transition from
comment|// false (their initial values), to true. Once true, there should
comment|// be no way to go back.
if|if
condition|(
name|diskSpaceExhausted
operator|.
name|getAsBoolean
argument_list|()
condition|)
block|{
name|reason
operator|=
literal|"Not enough disk space"
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|memoryExhausted
operator|.
name|getAsBoolean
argument_list|()
condition|)
block|{
name|reason
operator|=
literal|"Not enough memory"
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|shutDown
operator|.
name|getAsBoolean
argument_list|()
condition|)
block|{
name|reason
operator|=
literal|"The FileStore is shutting down"
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|cancelled
operator|.
name|get
argument_list|()
condition|)
block|{
name|reason
operator|=
literal|"Cancelled by user"
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|deadline
operator|>
literal|0
operator|&&
name|currentTimeMillis
argument_list|()
operator|>
name|deadline
condition|)
block|{
name|long
name|dt
init|=
name|SECONDS
operator|.
name|convert
argument_list|(
name|currentTimeMillis
argument_list|()
operator|-
name|baseLine
argument_list|,
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|reason
operator|=
literal|"Timeout after "
operator|+
name|dt
operator|+
literal|" seconds"
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|reason
return|;
block|}
specifier|public
name|void
name|cancel
parameter_list|()
block|{
name|cancelled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

