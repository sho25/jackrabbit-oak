begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * This class refines move and copy operations by delegating  * them to the underlying store if possible.  * @see KernelRootBuilder  */
end_comment

begin_class
specifier|public
class|class
name|KernelNodeBuilder
extends|extends
name|MemoryNodeBuilder
implements|implements
name|FastCopyMove
block|{
specifier|private
specifier|final
name|KernelRootBuilder
name|root
decl_stmt|;
name|KernelNodeBuilder
parameter_list|(
name|MemoryNodeBuilder
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|KernelRootBuilder
name|root
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|checkNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
comment|//--------------------------------------------------< MemoryNodeBuilder>---
annotation|@
name|Override
specifier|protected
name|MemoryNodeBuilder
name|createChildBuilder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|KernelNodeBuilder
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|root
argument_list|)
return|;
block|}
comment|// TODO optimise this by caching similar to what we do in MemoryNodeBuilder
annotation|@
name|Override
specifier|public
name|NodeState
name|getBaseState
parameter_list|()
block|{
return|return
name|getParent
argument_list|()
operator|.
name|getBaseState
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|(
name|NodeState
name|newBase
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot reset a non-root builder"
argument_list|)
throw|;
block|}
comment|/**      * If {@code newParent} is a {@link KernelNodeBuilder} this implementation      * purges all pending changes before applying the move operation. This allows the      * underlying store to better optimise move operations instead of just seeing      * them as an added and a removed node.      * If {@code newParent} is not a {@code KernelNodeBuilder} the implementation      * falls back to the super class.      */
annotation|@
name|Override
specifier|public
name|boolean
name|moveTo
parameter_list|(
name|NodeBuilder
name|newParent
parameter_list|,
name|String
name|newName
parameter_list|)
block|{
if|if
condition|(
name|newParent
operator|instanceof
name|FastCopyMove
condition|)
block|{
name|checkNotNull
argument_list|(
name|newParent
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|newName
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
operator|!
name|isRoot
argument_list|()
operator|&&
name|exists
argument_list|()
operator|&&
operator|!
name|newParent
operator|.
name|hasChildNode
argument_list|(
name|newName
argument_list|)
operator|&&
operator|(
operator|(
name|FastCopyMove
operator|)
name|newParent
operator|)
operator|.
name|moveFrom
argument_list|(
name|this
argument_list|,
name|newName
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|annotateSourcePath
argument_list|(
name|newParent
operator|.
name|getChildNode
argument_list|(
name|newName
argument_list|)
argument_list|,
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|moveTo
argument_list|(
name|newParent
argument_list|,
name|newName
argument_list|)
return|;
block|}
block|}
comment|/**      * If {@code newParent} is a {@link KernelNodeBuilder} this implementation      * purges all pending changes before applying the copy operation. This allows the      * underlying store to better optimise copy operations instead of just seeing      * them as an added node.      * If {@code newParent} is not a {@code KernelNodeBuilder} the implementation      * falls back to the super class.      */
annotation|@
name|Override
specifier|public
name|boolean
name|copyTo
parameter_list|(
name|NodeBuilder
name|newParent
parameter_list|,
name|String
name|newName
parameter_list|)
block|{
if|if
condition|(
name|newParent
operator|instanceof
name|FastCopyMove
condition|)
block|{
return|return
operator|(
operator|(
name|FastCopyMove
operator|)
name|newParent
operator|)
operator|.
name|copyFrom
argument_list|(
name|this
argument_list|,
name|newName
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|copyTo
argument_list|(
name|newParent
argument_list|,
name|newName
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|moveFrom
parameter_list|(
name|KernelNodeBuilder
name|source
parameter_list|,
name|String
name|newName
parameter_list|)
block|{
name|String
name|sourcePath
init|=
name|source
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|destPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|newName
argument_list|)
decl_stmt|;
return|return
name|root
operator|.
name|move
argument_list|(
name|sourcePath
argument_list|,
name|destPath
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|copyFrom
parameter_list|(
name|KernelNodeBuilder
name|source
parameter_list|,
name|String
name|newName
parameter_list|)
block|{
name|String
name|sourcePath
init|=
name|source
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|destPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|newName
argument_list|)
decl_stmt|;
return|return
name|root
operator|.
name|copy
argument_list|(
name|sourcePath
argument_list|,
name|destPath
argument_list|)
return|;
block|}
block|}
end_class

end_unit

