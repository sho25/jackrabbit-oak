begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|TimeDurationFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|FormatVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|VersionGCSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|VersionGarbageCollector
operator|.
name|VersionGCInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|VersionGarbageCollector
operator|.
name|VersionGCStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|commons
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|VersionGCOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|VersionGarbageCollector
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStoreHelper
operator|.
name|createVersionGC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStoreHelper
operator|.
name|createVersionGCSupport
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|FormatVersion
operator|.
name|versionOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
operator|.
name|timestampToString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|Utils
operator|.
name|createDocumentMKBuilder
import|;
end_import

begin_comment
comment|/**  * Gives information about current node revisions state.  */
end_comment

begin_class
specifier|public
class|class
name|RevisionsCommand
implements|implements
name|Command
block|{
specifier|private
specifier|static
specifier|final
name|String
name|USAGE
init|=
name|Joiner
operator|.
name|on
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
operator|.
name|join
argument_list|(
literal|"revisions {<jdbc-uri> |<mongodb-uri>}<sub-command> [options]"
argument_list|,
literal|"where sub-command is one of"
argument_list|,
literal|"  info     give information about the revisions state without performing"
argument_list|,
literal|"           any modifications"
argument_list|,
literal|"  collect  perform garbage collection"
argument_list|,
literal|"  reset    clear all persisted metadata"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
class|class
name|RevisionsOptions
extends|extends
name|Utils
operator|.
name|NodeStoreOptions
block|{
specifier|static
specifier|final
name|String
name|CMD_INFO
init|=
literal|"info"
decl_stmt|;
specifier|static
specifier|final
name|String
name|CMD_COLLECT
init|=
literal|"collect"
decl_stmt|;
specifier|static
specifier|final
name|String
name|CMD_RESET
init|=
literal|"reset"
decl_stmt|;
specifier|final
name|OptionSpec
argument_list|<
name|?
argument_list|>
name|once
decl_stmt|;
specifier|final
name|OptionSpec
argument_list|<
name|Integer
argument_list|>
name|limit
decl_stmt|;
specifier|final
name|OptionSpec
argument_list|<
name|Long
argument_list|>
name|timeLimit
decl_stmt|;
specifier|final
name|OptionSpec
argument_list|<
name|Long
argument_list|>
name|olderThan
decl_stmt|;
specifier|final
name|OptionSpec
argument_list|<
name|Double
argument_list|>
name|delay
decl_stmt|;
name|RevisionsOptions
parameter_list|(
name|String
name|usage
parameter_list|)
block|{
name|super
argument_list|(
name|usage
argument_list|)
expr_stmt|;
name|once
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"once"
argument_list|,
literal|"only 1 iteration"
argument_list|)
expr_stmt|;
name|limit
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"limit"
argument_list|,
literal|"collect at most limit documents"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|olderThan
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"olderThan"
argument_list|,
literal|"collect only docs older than n seconds"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Long
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toSeconds
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|delay
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"delay"
argument_list|,
literal|"introduce delays to reduce impact on system"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Double
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|timeLimit
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"timeLimit"
argument_list|,
literal|"cancel garbage collection after n seconds"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Long
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RevisionsOptions
name|parse
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|super
operator|.
name|parse
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|String
name|getSubCmd
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|getOtherArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|"info"
return|;
block|}
name|boolean
name|runOnce
parameter_list|()
block|{
return|return
name|options
operator|.
name|has
argument_list|(
name|once
argument_list|)
return|;
block|}
name|int
name|getLimit
parameter_list|()
block|{
return|return
name|limit
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
name|long
name|getOlderThan
parameter_list|()
block|{
return|return
name|olderThan
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
name|double
name|getDelay
parameter_list|()
block|{
return|return
name|delay
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
name|long
name|getTimeLimit
parameter_list|()
block|{
return|return
name|timeLimit
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|RevisionsOptions
name|options
init|=
operator|new
name|RevisionsOptions
argument_list|(
name|USAGE
argument_list|)
operator|.
name|parse
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|VersionGarbageCollector
name|gc
init|=
name|bootstrapVGC
argument_list|(
name|options
argument_list|,
name|closer
argument_list|)
decl_stmt|;
name|String
name|subCmd
init|=
name|options
operator|.
name|getSubCmd
argument_list|()
decl_stmt|;
if|if
condition|(
name|RevisionsOptions
operator|.
name|CMD_INFO
operator|.
name|equals
argument_list|(
name|subCmd
argument_list|)
condition|)
block|{
name|info
argument_list|(
name|gc
argument_list|,
name|options
operator|.
name|getOlderThan
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RevisionsOptions
operator|.
name|CMD_COLLECT
operator|.
name|equals
argument_list|(
name|subCmd
argument_list|)
condition|)
block|{
name|collect
argument_list|(
name|gc
argument_list|,
name|options
operator|.
name|getOlderThan
argument_list|()
argument_list|,
name|options
operator|.
name|getTimeLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RevisionsOptions
operator|.
name|CMD_RESET
operator|.
name|equals
argument_list|(
name|subCmd
argument_list|)
condition|)
block|{
name|reset
argument_list|(
name|gc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"unknown revisions command: "
operator|+
name|subCmd
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|closer
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|VersionGarbageCollector
name|bootstrapVGC
parameter_list|(
name|RevisionsOptions
name|options
parameter_list|,
name|Closer
name|closer
parameter_list|)
throws|throws
name|IOException
block|{
name|DocumentMK
operator|.
name|Builder
name|builder
init|=
name|createDocumentMKBuilder
argument_list|(
name|options
argument_list|,
name|closer
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"revisions mode only available for DocumentNodeStore"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// create a VersionGCSupport while builder is read-write
name|VersionGCSupport
name|gcSupport
init|=
name|createVersionGCSupport
argument_list|(
name|builder
argument_list|)
decl_stmt|;
comment|// check for matching format version
name|FormatVersion
name|version
init|=
name|versionOf
argument_list|(
name|gcSupport
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|DocumentNodeStore
operator|.
name|VERSION
operator|.
name|equals
argument_list|(
name|version
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Incompatible versions. This oak-run is "
operator|+
name|DocumentNodeStore
operator|.
name|VERSION
operator|+
literal|", while the store is "
operator|+
name|version
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// set it read-only before the DocumentNodeStore is created
comment|// this prevents the DocumentNodeStore from writing a new
comment|// clusterId to the clusterNodes and nodes collections
name|builder
operator|.
name|setReadOnlyMode
argument_list|()
expr_stmt|;
comment|// create a version GC that operates on a read-only DocumentNodeStore
comment|// and a GC support with a writable DocumentStore
name|VersionGarbageCollector
name|gc
init|=
name|createVersionGC
argument_list|(
name|builder
operator|.
name|getNodeStore
argument_list|()
argument_list|,
name|gcSupport
argument_list|)
decl_stmt|;
name|VersionGCOptions
name|gcOptions
init|=
name|gc
operator|.
name|getOptions
argument_list|()
decl_stmt|;
name|gcOptions
operator|=
name|gcOptions
operator|.
name|withDelayFactor
argument_list|(
name|options
operator|.
name|getDelay
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|runOnce
argument_list|()
condition|)
block|{
name|gcOptions
operator|=
name|gcOptions
operator|.
name|withMaxIterations
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|gcOptions
operator|=
name|gcOptions
operator|.
name|withCollectLimit
argument_list|(
name|options
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|gc
operator|.
name|setOptions
argument_list|(
name|gcOptions
argument_list|)
expr_stmt|;
return|return
name|gc
return|;
block|}
specifier|private
name|void
name|info
parameter_list|(
name|VersionGarbageCollector
name|gc
parameter_list|,
name|long
name|olderThanSec
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"retrieving gc info"
argument_list|)
expr_stmt|;
name|VersionGCInfo
name|info
init|=
name|gc
operator|.
name|getInfo
argument_list|(
name|olderThanSec
argument_list|,
name|SECONDS
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
literal|"%21s  %s%n"
argument_list|,
literal|"Last Successful Run:"
argument_list|,
name|info
operator|.
name|lastSuccess
operator|>
literal|0
condition|?
name|fmtTimestamp
argument_list|(
name|info
operator|.
name|lastSuccess
argument_list|)
else|:
literal|"<unknown>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
literal|"%21s  %s%n"
argument_list|,
literal|"Oldest Revision:"
argument_list|,
name|fmtTimestamp
argument_list|(
name|info
operator|.
name|oldestRevisionEstimate
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
literal|"%21s  %d%n"
argument_list|,
literal|"Delete Candidates:"
argument_list|,
name|info
operator|.
name|revisionsCandidateCount
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
literal|"%21s  %d%n"
argument_list|,
literal|"Collect Limit:"
argument_list|,
name|info
operator|.
name|collectLimit
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
literal|"%21s  %s%n"
argument_list|,
literal|"Collect Interval:"
argument_list|,
name|fmtDuration
argument_list|(
name|info
operator|.
name|recommendedCleanupInterval
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
literal|"%21s  %s%n"
argument_list|,
literal|"Collect Before:"
argument_list|,
name|fmtTimestamp
argument_list|(
name|info
operator|.
name|recommendedCleanupTimestamp
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
literal|"%21s  %d%n"
argument_list|,
literal|"Iterations Estimate:"
argument_list|,
name|info
operator|.
name|estimatedIterations
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|collect
parameter_list|(
specifier|final
name|VersionGarbageCollector
name|gc
parameter_list|,
specifier|final
name|long
name|olderThanSec
parameter_list|,
specifier|final
name|long
name|timeLimit
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|started
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"starting gc collect"
argument_list|)
expr_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
try|try
block|{
name|Future
argument_list|<
name|VersionGCStats
argument_list|>
name|f
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|VersionGCStats
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|VersionGCStats
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|gc
operator|.
name|gc
argument_list|(
name|olderThanSec
argument_list|,
name|SECONDS
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeLimit
operator|>=
literal|0
condition|)
block|{
try|try
block|{
name|f
operator|.
name|get
argument_list|(
name|timeLimit
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
comment|// cancel the gc
name|gc
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
comment|// re-throw any other exception
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|VersionGCStats
name|stats
init|=
name|f
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|ended
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
literal|"%21s  %s%n"
argument_list|,
literal|"Started:"
argument_list|,
name|fmtTimestamp
argument_list|(
name|started
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
literal|"%21s  %s%n"
argument_list|,
literal|"Ended:"
argument_list|,
name|fmtTimestamp
argument_list|(
name|ended
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
literal|"%21s  %s%n"
argument_list|,
literal|"Duration:"
argument_list|,
name|fmtDuration
argument_list|(
name|ended
operator|-
name|started
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
literal|"%21s  %s%n"
argument_list|,
literal|"Stats:"
argument_list|,
name|stats
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|reset
parameter_list|(
name|VersionGarbageCollector
name|gc
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"resetting recommendations and statistics"
argument_list|)
expr_stmt|;
name|gc
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|fmtTimestamp
parameter_list|(
name|long
name|ts
parameter_list|)
block|{
return|return
name|timestampToString
argument_list|(
name|ts
argument_list|)
return|;
block|}
specifier|private
name|String
name|fmtDuration
parameter_list|(
name|long
name|ts
parameter_list|)
block|{
return|return
name|TimeDurationFormatter
operator|.
name|forLogging
argument_list|()
operator|.
name|format
argument_list|(
name|ts
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
block|}
end_class

end_unit

