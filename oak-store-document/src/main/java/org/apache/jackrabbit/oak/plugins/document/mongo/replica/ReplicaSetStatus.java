begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|replica
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|ServerAddress
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|event
operator|.
name|ServerHeartbeatSucceededEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|event
operator|.
name|ServerMonitorListenerAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bson
operator|.
name|BsonArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bson
operator|.
name|BsonDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Keeps track of the status of a replica set based on information provided  * by heartbeat events. This status provides a replica set lag estimate, which  * can be used to decide whether secondaries are sufficiently up-to-date and  * read operations can be sent to a secondary. This is particularly useful when  * causal consistent client sessions are used with the MongoDB Java driver. Read  * operations shouldn't be sent to a secondary when it lags too much behind,  * otherwise the read operation will block until it was able to catch up.  */
end_comment

begin_class
specifier|public
class|class
name|ReplicaSetStatus
extends|extends
name|ServerMonitorListenerAdapter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReplicaSetStatus
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|UNKNOWN_LAG
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
comment|/**      * Most recent heartbeats from connected servers      */
specifier|private
specifier|final
name|Map
argument_list|<
name|ServerAddress
argument_list|,
name|Heartbeat
argument_list|>
name|heartbeats
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|ServerAddress
argument_list|>
name|members
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Deque
argument_list|<
name|Long
argument_list|>
name|estimatesPerMember
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|lagEstimate
init|=
name|UNKNOWN_LAG
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|serverHeartbeatSucceeded
parameter_list|(
name|ServerHeartbeatSucceededEvent
name|event
parameter_list|)
block|{
synchronized|synchronized
init|(
name|heartbeats
init|)
block|{
name|ServerAddress
name|address
init|=
name|event
operator|.
name|getConnectionId
argument_list|()
operator|.
name|getServerId
argument_list|()
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|Heartbeat
name|beat
init|=
operator|new
name|Heartbeat
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|heartbeats
operator|.
name|put
argument_list|(
name|address
argument_list|,
name|beat
argument_list|)
expr_stmt|;
name|members
operator|.
name|addAll
argument_list|(
name|beat
operator|.
name|getHosts
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|members
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|updateLag
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|long
name|getLagEstimate
parameter_list|()
block|{
return|return
name|lagEstimate
return|;
block|}
specifier|private
name|void
name|updateLag
parameter_list|()
block|{
if|if
condition|(
operator|!
name|heartbeats
operator|.
name|keySet
argument_list|()
operator|.
name|containsAll
argument_list|(
name|members
argument_list|)
condition|)
block|{
name|lagEstimate
operator|=
name|UNKNOWN_LAG
expr_stmt|;
return|return;
block|}
name|long
name|oldestUpdate
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|newestUpdate
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
name|long
name|oldestWrite
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|newestWrite
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerAddress
argument_list|,
name|Heartbeat
argument_list|>
name|entry
range|:
name|heartbeats
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|members
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Heartbeat
name|beat
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Date
name|lastWrite
init|=
name|beat
operator|.
name|getLastWrite
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastWrite
operator|==
literal|null
condition|)
block|{
name|oldestWrite
operator|=
literal|0
expr_stmt|;
name|newestWrite
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
else|else
block|{
name|oldestWrite
operator|=
name|Math
operator|.
name|min
argument_list|(
name|oldestWrite
argument_list|,
name|lastWrite
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|newestWrite
operator|=
name|Math
operator|.
name|max
argument_list|(
name|newestWrite
argument_list|,
name|lastWrite
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|updateTime
init|=
name|beat
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|oldestUpdate
operator|=
name|Math
operator|.
name|min
argument_list|(
name|oldestUpdate
argument_list|,
name|updateTime
argument_list|)
expr_stmt|;
name|newestUpdate
operator|=
name|Math
operator|.
name|max
argument_list|(
name|newestUpdate
argument_list|,
name|updateTime
argument_list|)
expr_stmt|;
block|}
comment|// heartbeats happen concurrently for all servers. It may happen we
comment|// have some fresh and some stale heartbeats with update times up to
comment|// heartbeatFreqMillis apart
name|long
name|uncertaintyMillis
init|=
name|newestUpdate
operator|-
name|oldestUpdate
decl_stmt|;
name|estimatesPerMember
operator|.
name|addFirst
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|newestWrite
operator|-
name|oldestWrite
operator|-
name|uncertaintyMillis
argument_list|)
argument_list|)
expr_stmt|;
comment|// average estimates over up to number of members and remove old value
name|long
name|estimate
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Long
argument_list|>
name|it
init|=
name|estimatesPerMember
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|long
name|v
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|++
operator|<
name|members
operator|.
name|size
argument_list|()
condition|)
block|{
name|estimate
operator|+=
name|v
expr_stmt|;
block|}
else|else
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|lagEstimate
operator|=
name|estimate
operator|/
name|members
operator|.
name|size
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"lagEstimate: {} ms ({})"
argument_list|,
name|lagEstimate
argument_list|,
name|estimatesPerMember
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|Heartbeat
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|ServerAddress
argument_list|>
name|hosts
decl_stmt|;
specifier|private
specifier|final
name|Date
name|lastWrite
decl_stmt|;
specifier|private
specifier|final
name|long
name|localTime
decl_stmt|;
name|Heartbeat
parameter_list|(
name|ServerHeartbeatSucceededEvent
name|event
parameter_list|)
block|{
name|this
operator|.
name|hosts
operator|=
name|hostsFrom
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastWrite
operator|=
name|lastWriteFrom
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|this
operator|.
name|localTime
operator|=
name|localTimeFrom
argument_list|(
name|event
argument_list|)
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
name|Collection
argument_list|<
name|ServerAddress
argument_list|>
name|getHosts
parameter_list|()
block|{
return|return
name|hosts
return|;
block|}
name|long
name|getTime
parameter_list|()
block|{
return|return
name|localTime
return|;
block|}
annotation|@
name|CheckForNull
name|Date
name|getLastWrite
parameter_list|()
block|{
return|return
name|lastWrite
return|;
block|}
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|ServerAddress
argument_list|>
name|hostsFrom
parameter_list|(
name|ServerHeartbeatSucceededEvent
name|event
parameter_list|)
block|{
return|return
name|event
operator|.
name|getReply
argument_list|()
operator|.
name|getArray
argument_list|(
literal|"hosts"
argument_list|,
operator|new
name|BsonArray
argument_list|()
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|bsonValue
lambda|->
operator|new
name|ServerAddress
argument_list|(
name|bsonValue
operator|.
name|asString
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Date
name|localTimeFrom
parameter_list|(
name|ServerHeartbeatSucceededEvent
name|event
parameter_list|)
block|{
name|BsonDocument
name|reply
init|=
name|event
operator|.
name|getReply
argument_list|()
decl_stmt|;
return|return
operator|new
name|Date
argument_list|(
name|reply
operator|.
name|getDateTime
argument_list|(
literal|"localTime"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Date
name|lastWriteFrom
parameter_list|(
name|ServerHeartbeatSucceededEvent
name|event
parameter_list|)
block|{
name|BsonDocument
name|reply
init|=
name|event
operator|.
name|getReply
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|reply
operator|.
name|containsKey
argument_list|(
literal|"lastWrite"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Date
argument_list|(
name|reply
operator|.
name|getDocument
argument_list|(
literal|"lastWrite"
argument_list|)
operator|.
name|getDateTime
argument_list|(
literal|"lastWriteDate"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

