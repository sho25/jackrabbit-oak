begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|UnsupportedRepositoryOperationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinitionTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|OnParentVersionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|cnd
operator|.
name|DefinitionBuilderFactory
operator|.
name|AbstractPropertyDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|JcrNameParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NameMapper
import|;
end_import

begin_class
class|class
name|PropertyDefinitionTemplateImpl
extends|extends
name|AbstractPropertyDefinitionBuilder
argument_list|<
name|NodeTypeTemplate
argument_list|>
implements|implements
name|PropertyDefinitionTemplate
block|{
specifier|private
name|String
index|[]
name|valueConstraints
decl_stmt|;
specifier|private
specifier|final
name|NameMapper
name|mapper
decl_stmt|;
specifier|private
name|Value
index|[]
name|defaultValues
decl_stmt|;
specifier|public
name|PropertyDefinitionTemplateImpl
parameter_list|(
name|NameMapper
name|mapper
parameter_list|)
block|{
name|this
operator|.
name|mapper
operator|=
name|mapper
expr_stmt|;
name|onParent
operator|=
name|OnParentVersionAction
operator|.
name|COPY
expr_stmt|;
name|requiredType
operator|=
name|PropertyType
operator|.
name|STRING
expr_stmt|;
block|}
specifier|protected
name|Value
name|createValue
parameter_list|(
name|String
name|value
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|build
parameter_list|()
block|{
comment|// do nothing by default
block|}
annotation|@
name|Override
specifier|public
name|NodeType
name|getDeclaringNodeType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDeclaringNodeType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// ignore
block|}
annotation|@
name|Override
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ConstraintViolationException
block|{
name|JcrNameParser
operator|.
name|checkName
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|mapper
operator|.
name|getJcrName
argument_list|(
name|mapper
operator|.
name|getOakNameOrNull
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAutoCreated
parameter_list|()
block|{
return|return
name|autocreate
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAutoCreated
parameter_list|(
name|boolean
name|autocreate
parameter_list|)
block|{
name|this
operator|.
name|autocreate
operator|=
name|autocreate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isProtected
parameter_list|()
block|{
return|return
name|isProtected
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProtected
parameter_list|(
name|boolean
name|isProtected
parameter_list|)
block|{
name|this
operator|.
name|isProtected
operator|=
name|isProtected
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMandatory
parameter_list|()
block|{
return|return
name|isMandatory
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMandatory
parameter_list|(
name|boolean
name|isMandatory
parameter_list|)
block|{
name|this
operator|.
name|isMandatory
operator|=
name|isMandatory
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getOnParentVersion
parameter_list|()
block|{
return|return
name|onParent
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setOnParentVersion
parameter_list|(
name|int
name|onParent
parameter_list|)
block|{
name|this
operator|.
name|onParent
operator|=
name|onParent
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRequiredType
parameter_list|(
name|int
name|requiredType
parameter_list|)
block|{
name|this
operator|.
name|requiredType
operator|=
name|requiredType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMultiple
parameter_list|()
block|{
return|return
name|isMultiple
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMultiple
parameter_list|(
name|boolean
name|isMultiple
parameter_list|)
block|{
name|this
operator|.
name|isMultiple
operator|=
name|isMultiple
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isQueryOrderable
parameter_list|()
block|{
return|return
name|queryOrderable
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setQueryOrderable
parameter_list|(
name|boolean
name|queryOrderable
parameter_list|)
block|{
name|this
operator|.
name|queryOrderable
operator|=
name|queryOrderable
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFullTextSearchable
parameter_list|()
block|{
return|return
name|fullTextSearchable
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setFullTextSearchable
parameter_list|(
name|boolean
name|fullTextSearchable
parameter_list|)
block|{
name|this
operator|.
name|fullTextSearchable
operator|=
name|fullTextSearchable
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getAvailableQueryOperators
parameter_list|()
block|{
return|return
name|queryOperators
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAvailableQueryOperators
parameter_list|(
name|String
index|[]
name|queryOperators
parameter_list|)
block|{
name|this
operator|.
name|queryOperators
operator|=
name|queryOperators
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Value
index|[]
name|getDefaultValues
parameter_list|()
block|{
return|return
name|defaultValues
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDefaultValues
parameter_list|(
name|Value
index|[]
name|defaultValues
parameter_list|)
block|{
name|this
operator|.
name|defaultValues
operator|=
name|defaultValues
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addDefaultValues
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|defaultValues
operator|==
literal|null
condition|)
block|{
name|defaultValues
operator|=
operator|new
name|Value
index|[]
block|{
name|createValue
argument_list|(
name|value
argument_list|,
name|getRequiredType
argument_list|()
argument_list|)
block|}
expr_stmt|;
block|}
else|else
block|{
name|Value
index|[]
name|values
init|=
operator|new
name|Value
index|[
name|defaultValues
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|defaultValues
argument_list|,
literal|0
argument_list|,
name|values
argument_list|,
literal|0
argument_list|,
name|defaultValues
operator|.
name|length
argument_list|)
expr_stmt|;
name|values
index|[
name|defaultValues
operator|.
name|length
index|]
operator|=
name|createValue
argument_list|(
name|value
argument_list|,
name|getRequiredType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultValues
operator|=
name|values
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getValueConstraints
parameter_list|()
block|{
return|return
name|valueConstraints
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValueConstraints
parameter_list|(
name|String
index|[]
name|constraints
parameter_list|)
block|{
name|this
operator|.
name|valueConstraints
operator|=
name|constraints
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addValueConstraint
parameter_list|(
name|String
name|constraint
parameter_list|)
block|{
if|if
condition|(
name|valueConstraints
operator|==
literal|null
condition|)
block|{
name|valueConstraints
operator|=
operator|new
name|String
index|[]
block|{
name|constraint
block|}
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|constraints
init|=
operator|new
name|String
index|[
name|valueConstraints
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|valueConstraints
argument_list|,
literal|0
argument_list|,
name|constraints
argument_list|,
literal|0
argument_list|,
name|valueConstraints
operator|.
name|length
argument_list|)
expr_stmt|;
name|constraints
index|[
name|valueConstraints
operator|.
name|length
index|]
operator|=
name|constraint
expr_stmt|;
name|valueConstraints
operator|=
name|constraints
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

