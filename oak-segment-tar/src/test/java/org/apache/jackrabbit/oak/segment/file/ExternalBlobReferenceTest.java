begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_class
specifier|public
class|class
name|ExternalBlobReferenceTest
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|TemporaryFolder
name|segmentFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|private
name|FileStore
name|fileStore
decl_stmt|;
specifier|private
name|BlobStore
name|blobStore
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createFileStore
parameter_list|()
throws|throws
name|Exception
block|{
name|blobStore
operator|=
name|mock
argument_list|(
name|BlobStore
operator|.
name|class
argument_list|)
expr_stmt|;
name|fileStore
operator|=
name|FileStore
operator|.
name|builder
argument_list|(
name|segmentFolder
operator|.
name|getRoot
argument_list|()
argument_list|)
operator|.
name|withBlobStore
argument_list|(
name|blobStore
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|destroyFileStore
parameter_list|()
block|{
name|fileStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * The {@code SegmentWriter} should be able to write blob IDs whose length      * is between 0 and {@code Segment.BLOB_ID_SMALL_LIMIT - 1} bytes. It should      * be possible to correctly read the blob ID back and pass it to the {@code      * BlobStore} to obtain information about the blob.      *<p/>      * This code path executes only if the written stream is {@code      * Segment.MEDIUM_LIMIT} bytes long (or more). If the length of the stream      * is smaller, the binary value is inlined in the segment and the {@code      * BlobStore} is never called.      *<p/>      * See OAK-3105.      */
annotation|@
name|Test
specifier|public
name|void
name|testShortBlobId
parameter_list|()
throws|throws
name|Exception
block|{
name|testBlobIdWithLength
argument_list|(
name|Segment
operator|.
name|BLOB_ID_SMALL_LIMIT
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * If the {@code BlobStore} returns a blob ID whose length is {@code      * Segment.BLOB_ID_SMALL_LIMIT} bytes long (or more), writing the stream      * should succeed. In this case, the blob ID is considered a long blob ID      * and an alternate encoding is used. It should be possible to correctly      * read the blob ID back and pass it to the {@code BlobStore} to obtain      * information about the blob.      *<p/>      * This code path executes only if the written stream is {@code      * Segment.MEDIUM_LIMIT} bytes long (or more). If the length of the stream      * is smaller, the binary value is inlined in the segment and the {@code      * BlobStore} is never called.      *<p/>      * See OAK-3105 and OAK-3107.      */
annotation|@
name|Test
specifier|public
name|void
name|testLongBlobId
parameter_list|()
throws|throws
name|Exception
block|{
name|testBlobIdWithLength
argument_list|(
name|Segment
operator|.
name|BLOB_ID_SMALL_LIMIT
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testBlobIdWithLength
parameter_list|(
name|int
name|blobIdLength
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|blobId
init|=
name|Strings
operator|.
name|repeat
argument_list|(
literal|"x"
argument_list|,
name|blobIdLength
argument_list|)
decl_stmt|;
name|long
name|blobLength
init|=
name|Segment
operator|.
name|MEDIUM_LIMIT
decl_stmt|;
name|doReturn
argument_list|(
name|blobId
argument_list|)
operator|.
name|when
argument_list|(
name|blobStore
argument_list|)
operator|.
name|writeBlob
argument_list|(
name|any
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|blobLength
argument_list|)
operator|.
name|when
argument_list|(
name|blobStore
argument_list|)
operator|.
name|getBlobLength
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
name|SegmentBlob
name|blob
init|=
name|fileStore
operator|.
name|getTracker
argument_list|()
operator|.
name|getWriter
argument_list|()
operator|.
name|writeStream
argument_list|(
name|newRandomInputStream
argument_list|(
name|blobLength
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|blobLength
argument_list|,
name|blob
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|InputStream
name|newRandomInputStream
parameter_list|(
name|long
name|size
parameter_list|)
block|{
return|return
operator|new
name|LimitInputStream
argument_list|(
operator|new
name|ConstantInputStream
argument_list|(
literal|0
argument_list|)
argument_list|,
name|size
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|ConstantInputStream
extends|extends
name|InputStream
block|{
specifier|private
specifier|final
name|int
name|value
decl_stmt|;
specifier|public
name|ConstantInputStream
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|LimitInputStream
extends|extends
name|InputStream
block|{
specifier|private
specifier|final
name|InputStream
name|stream
decl_stmt|;
specifier|private
specifier|final
name|long
name|limit
decl_stmt|;
specifier|private
name|long
name|read
init|=
literal|0
decl_stmt|;
specifier|public
name|LimitInputStream
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|long
name|limit
parameter_list|)
block|{
name|this
operator|.
name|stream
operator|=
name|stream
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|read
operator|>=
name|limit
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|read
operator|=
name|read
operator|+
literal|1
expr_stmt|;
return|return
name|stream
operator|.
name|read
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

