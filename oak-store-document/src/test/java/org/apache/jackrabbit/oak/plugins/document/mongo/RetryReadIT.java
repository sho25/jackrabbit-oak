begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|AbstractMongoConnectionTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|MongoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|collection
operator|.
name|IsEmptyCollection
operator|.
name|empty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Tests retry logic in MongoDocumentStore (OAK-1641).  */
end_comment

begin_class
specifier|public
class|class
name|RetryReadIT
extends|extends
name|AbstractMongoConnectionTest
block|{
specifier|private
name|TestStore
name|store
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setUpConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|mongoConnection
operator|=
name|connectionFactory
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|MongoUtils
operator|.
name|dropCollections
argument_list|(
name|mongoConnection
operator|.
name|getDatabase
argument_list|()
argument_list|)
expr_stmt|;
name|DocumentMK
operator|.
name|Builder
name|builder
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|clock
argument_list|(
name|getTestClock
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|TestStore
argument_list|(
name|mongoConnection
operator|.
name|getMongoClient
argument_list|()
argument_list|,
name|mongoConnection
operator|.
name|getDBName
argument_list|()
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|mk
operator|=
name|builder
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|retry
parameter_list|()
block|{
comment|// must survive two consecutive failures. -> 2 retries
name|store
operator|.
name|failRead
operator|=
literal|2
expr_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// previous result is cached and will not fail
name|store
operator|.
name|failRead
operator|=
literal|3
expr_stmt|;
name|doc
operator|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// must fail with three consecutive failures on unknown path
try|try
block|{
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must fail with DocumentStoreException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentStoreException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|retryQuery
parameter_list|()
block|{
name|String
name|fromKey
init|=
name|Utils
operator|.
name|getKeyLowerLimit
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|String
name|toKey
init|=
name|Utils
operator|.
name|getKeyUpperLimit
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
comment|// must survive two consecutive failures. -> 2 retries
name|store
operator|.
name|failRead
operator|=
literal|2
expr_stmt|;
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|docs
init|=
name|store
operator|.
name|query
argument_list|(
name|NODES
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|docs
argument_list|,
name|is
argument_list|(
name|empty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fromKey
operator|=
name|Utils
operator|.
name|getKeyLowerLimit
argument_list|(
literal|"/bar"
argument_list|)
expr_stmt|;
name|toKey
operator|=
name|Utils
operator|.
name|getKeyUpperLimit
argument_list|(
literal|"/bar"
argument_list|)
expr_stmt|;
comment|// must fail with three consecutive failures
name|store
operator|.
name|failRead
operator|=
literal|3
expr_stmt|;
try|try
block|{
name|store
operator|.
name|query
argument_list|(
name|NODES
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must fail with DocumentStoreException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentStoreException
name|e
parameter_list|)
block|{
comment|// expected
block|}
finally|finally
block|{
name|store
operator|.
name|failRead
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TestStore
extends|extends
name|MongoDocumentStore
block|{
specifier|private
name|int
name|failRead
init|=
literal|0
decl_stmt|;
specifier|public
name|TestStore
parameter_list|(
name|MongoClient
name|client
parameter_list|,
name|String
name|dbName
parameter_list|,
name|DocumentMK
operator|.
name|Builder
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|findUncached
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|,
name|DocumentReadPreference
name|docReadPref
parameter_list|)
block|{
name|maybeFail
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|findUncached
argument_list|(
name|collection
argument_list|,
name|key
argument_list|,
name|docReadPref
argument_list|)
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|protected
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|queryInternal
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|fromKey
parameter_list|,
name|String
name|toKey
parameter_list|,
name|String
name|indexedProperty
parameter_list|,
name|long
name|startValue
parameter_list|,
name|int
name|limit
parameter_list|,
name|long
name|maxQueryTime
parameter_list|)
block|{
name|maybeFail
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|queryInternal
argument_list|(
name|collection
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|,
name|indexedProperty
argument_list|,
name|startValue
argument_list|,
name|limit
argument_list|,
name|maxQueryTime
argument_list|)
return|;
block|}
specifier|private
name|void
name|maybeFail
parameter_list|()
block|{
if|if
condition|(
name|failRead
operator|>
literal|0
condition|)
block|{
name|failRead
operator|--
expr_stmt|;
throw|throw
operator|new
name|MongoException
argument_list|(
literal|"read failed"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

