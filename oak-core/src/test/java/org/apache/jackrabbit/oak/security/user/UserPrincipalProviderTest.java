begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|GroupPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|principal
operator|.
name|AbstractPrincipalProviderTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|AdminPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
operator|.
name|SEARCH_TYPE_GROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
operator|.
name|NT_REP_USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
operator|.
name|REP_PRINCIPAL_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|UserPrincipalProviderTest
extends|extends
name|AbstractPrincipalProviderTest
block|{
annotation|@
name|NotNull
annotation|@
name|Override
specifier|protected
name|PrincipalProvider
name|createPrincipalProvider
parameter_list|()
block|{
return|return
operator|new
name|UserPrincipalProvider
argument_list|(
name|root
argument_list|,
name|getUserConfiguration
argument_list|()
argument_list|,
name|namePathMapper
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTreeBasedUserPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|getTestUser
argument_list|()
decl_stmt|;
name|Principal
name|principal
init|=
name|principalProvider
operator|.
name|getPrincipal
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|principal
operator|instanceof
name|TreeBasedPrincipal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTreeBasedSystemUserPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|systemUser
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createSystemUser
argument_list|(
literal|"systemUser"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
try|try
block|{
name|Principal
name|principal
init|=
name|principalProvider
operator|.
name|getPrincipal
argument_list|(
name|systemUser
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|principal
operator|instanceof
name|SystemUserPrincipalImpl
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|systemUser
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTreeBasedGroupPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|principal
init|=
name|principalProvider
operator|.
name|getPrincipal
argument_list|(
name|testGroup
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|principal
operator|instanceof
name|AbstractGroupPrincipal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTreeBasedGroupPrincipalReflectsMemberChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|principal
init|=
name|principalProvider
operator|.
name|getPrincipal
argument_list|(
name|testGroup
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|principal
operator|instanceof
name|AbstractGroupPrincipal
argument_list|)
expr_stmt|;
name|AbstractGroupPrincipal
name|agp
init|=
operator|(
name|AbstractGroupPrincipal
operator|)
name|principal
decl_stmt|;
name|User
name|u
init|=
name|getTestUser
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|agp
operator|.
name|isMember
argument_list|(
name|u
argument_list|)
argument_list|)
expr_stmt|;
name|testGroup
operator|.
name|removeMember
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|agp
operator|.
name|isMember
argument_list|(
name|u
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTreeBasedGroupPrincipalReflectsRemoval
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|principal
init|=
name|principalProvider
operator|.
name|getPrincipal
argument_list|(
name|testGroup
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|principal
operator|instanceof
name|AbstractGroupPrincipal
argument_list|)
expr_stmt|;
name|AbstractGroupPrincipal
name|agp
init|=
operator|(
name|AbstractGroupPrincipal
operator|)
name|principal
decl_stmt|;
name|testGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|agp
operator|.
name|isMember
argument_list|(
name|getTestUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTreeBasedGroupPrincipalReflectsChangedType
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|principal
init|=
name|principalProvider
operator|.
name|getPrincipal
argument_list|(
name|testGroup
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|principal
operator|instanceof
name|AbstractGroupPrincipal
argument_list|)
expr_stmt|;
name|AbstractGroupPrincipal
name|agp
init|=
operator|(
name|AbstractGroupPrincipal
operator|)
name|principal
decl_stmt|;
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
name|testGroup
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_REP_USER
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|agp
operator|.
name|isMember
argument_list|(
name|getTestUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalsForUser
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principals
init|=
name|principalProvider
operator|.
name|getPrincipals
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Principal
name|p
range|:
name|principals
control|)
block|{
name|String
name|name
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|p
operator|instanceof
name|TreeBasedPrincipal
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|EveryonePrincipal
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|p
operator|instanceof
name|AbstractGroupPrincipal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalsForSystemUser
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|systemUser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|systemUser
operator|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createSystemUser
argument_list|(
literal|"systemUser"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|testGroup
operator|.
name|addMember
argument_list|(
name|systemUser
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principals
init|=
name|principalProvider
operator|.
name|getPrincipals
argument_list|(
name|systemUser
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Principal
name|p
range|:
name|principals
control|)
block|{
name|String
name|name
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|systemUser
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|p
operator|instanceof
name|SystemUserPrincipalImpl
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|EveryonePrincipal
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|p
operator|instanceof
name|AbstractGroupPrincipal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|systemUser
operator|!=
literal|null
condition|)
block|{
name|systemUser
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalsForAdminUser
parameter_list|()
throws|throws
name|Exception
block|{
name|Authorizable
name|adminUser
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|adminSession
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|adminUser
operator|!=
literal|null
operator|&&
name|adminUser
operator|.
name|getPrincipal
argument_list|()
operator|instanceof
name|AdminPrincipal
condition|)
block|{
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principals
init|=
name|principalProvider
operator|.
name|getPrincipals
argument_list|(
name|adminUser
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Principal
name|p
range|:
name|principals
control|)
block|{
name|String
name|name
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|adminUser
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|p
operator|instanceof
name|AdminPrincipalImpl
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|EveryonePrincipal
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|p
operator|instanceof
name|AbstractGroupPrincipal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEveryoneMembers
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|everyone
init|=
name|principalProvider
operator|.
name|getPrincipal
argument_list|(
name|EveryonePrincipal
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|everyone
operator|instanceof
name|EveryonePrincipal
argument_list|)
expr_stmt|;
name|Group
name|everyoneGroup
init|=
literal|null
decl_stmt|;
try|try
block|{
name|UserManager
name|userMgr
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|everyoneGroup
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|EveryonePrincipal
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Principal
name|ep
init|=
name|principalProvider
operator|.
name|getPrincipal
argument_list|(
name|EveryonePrincipal
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ep
operator|instanceof
name|GroupPrincipal
argument_list|)
expr_stmt|;
comment|//((GroupPrincipal) ep).members();
comment|//assertTrue(((GroupPrincipal) ep).isMember(getTestUser().getPrincipal()));
block|}
finally|finally
block|{
if|if
condition|(
name|everyoneGroup
operator|!=
literal|null
condition|)
block|{
name|everyoneGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupMembers
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|principal
init|=
name|principalProvider
operator|.
name|getPrincipal
argument_list|(
name|testGroup
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|principal
operator|instanceof
name|GroupPrincipal
argument_list|)
expr_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|Enumeration
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|members
init|=
operator|(
operator|(
name|GroupPrincipal
operator|)
name|principal
operator|)
operator|.
name|members
argument_list|()
decl_stmt|;
while|while
condition|(
name|members
operator|.
name|hasMoreElements
argument_list|()
operator|&&
operator|!
name|found
condition|)
block|{
name|found
operator|=
name|members
operator|.
name|nextElement
argument_list|()
operator|.
name|equals
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|found
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupIsMember
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|principal
init|=
name|principalProvider
operator|.
name|getPrincipal
argument_list|(
name|testGroup
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|principal
operator|instanceof
name|GroupPrincipal
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|GroupPrincipal
operator|)
name|principal
operator|)
operator|.
name|isMember
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingUserPrincipalName
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|u
init|=
name|getTestUser
argument_list|()
decl_stmt|;
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
name|u
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|t
operator|.
name|removeProperty
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|principalProvider
operator|.
name|getPrincipals
argument_list|(
name|u
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingGroupPrincipalName
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|p
init|=
name|testGroup
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
name|testGroup
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|t
operator|.
name|removeProperty
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|principalProvider
operator|.
name|getPrincipals
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindWithEmptyHint
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|resultNames
init|=
name|getNames
argument_list|(
name|principalProvider
operator|.
name|findPrincipals
argument_list|(
literal|""
argument_list|,
name|PrincipalManager
operator|.
name|SEARCH_TYPE_GROUP
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|resultNames
operator|.
name|contains
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultNames
operator|.
name|contains
argument_list|(
name|EveryonePrincipal
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultNames
operator|.
name|contains
argument_list|(
name|testGroup
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindFullTextWithAndWithoutWildcard
parameter_list|()
block|{
name|Iterator
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|i1
init|=
name|principalProvider
operator|.
name|findPrincipals
argument_list|(
literal|"testGroup"
argument_list|,
literal|true
argument_list|,
name|SEARCH_TYPE_GROUP
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|i2
init|=
name|principalProvider
operator|.
name|findPrincipals
argument_list|(
literal|"testGroup*"
argument_list|,
literal|true
argument_list|,
name|SEARCH_TYPE_GROUP
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterators
operator|.
name|elementsEqual
argument_list|(
name|i1
argument_list|,
name|i2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindFiltersDuplicateEveryone
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|everyoneGroup
init|=
literal|null
decl_stmt|;
try|try
block|{
name|UserManager
name|userMgr
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|everyoneGroup
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|EveryonePrincipal
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principals
init|=
name|principalProvider
operator|.
name|findPrincipals
argument_list|(
literal|null
argument_list|,
name|SEARCH_TYPE_GROUP
argument_list|)
decl_stmt|;
name|Iterator
name|filtered
init|=
name|Iterators
operator|.
name|filter
argument_list|(
name|principals
argument_list|,
operator|(
name|Predicate
argument_list|<
name|Principal
argument_list|>
operator|)
name|principal
lambda|->
name|EveryonePrincipal
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|filtered
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|everyoneGroup
operator|!=
literal|null
condition|)
block|{
name|everyoneGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|groupId
argument_list|,
name|groupId2
argument_list|,
name|groupId3
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|expected
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|limit
init|=
operator|-
literal|1
init|;
name|limit
operator|<
name|expected
operator|.
name|size
argument_list|()
operator|+
literal|2
condition|;
name|limit
operator|++
control|)
block|{
name|Iterator
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|i1
init|=
name|principalProvider
operator|.
name|findPrincipals
argument_list|(
literal|"testGroup"
argument_list|,
literal|true
argument_list|,
name|SEARCH_TYPE_GROUP
argument_list|,
literal|0
argument_list|,
name|limit
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|i2
init|=
name|principalProvider
operator|.
name|findPrincipals
argument_list|(
literal|"testGroup*"
argument_list|,
literal|true
argument_list|,
name|SEARCH_TYPE_GROUP
argument_list|,
literal|0
argument_list|,
name|limit
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterators
operator|.
name|elementsEqual
argument_list|(
name|i1
argument_list|,
name|i2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

