begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * A document storing data about a node.  */
end_comment

begin_class
specifier|public
class|class
name|NodeDocument
extends|extends
name|Document
implements|implements
name|CacheValue
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NodeDocument
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|6713219541688419314L
decl_stmt|;
comment|/**      * Marker document, which indicates the document does not exist.      */
specifier|public
specifier|static
specifier|final
name|NodeDocument
name|NULL
init|=
operator|new
name|NodeDocument
argument_list|()
decl_stmt|;
comment|/**      * The list of revision to root commit depth mappings to find out if a      * revision is actually committed.      */
specifier|static
specifier|final
name|String
name|COMMIT_ROOT
init|=
literal|"_commitRoot"
decl_stmt|;
comment|/**      * The number of previous documents (documents that contain old revisions of      * this node). This property is only set if multiple documents per node      * exist. This is the case when a node is updated very often in a short      * time, such that the document gets very big.      */
specifier|private
specifier|static
specifier|final
name|String
name|PREVIOUS
init|=
literal|"_prev"
decl_stmt|;
comment|/**      * Whether this node is deleted. Key: revision, value: true/false.      */
specifier|static
specifier|final
name|String
name|DELETED
init|=
literal|"_deleted"
decl_stmt|;
comment|/**      * Revision collision markers set by commits with modifications, which      * overlap with un-merged branch commits.      * Key: revision, value:      */
specifier|static
specifier|final
name|String
name|COLLISIONS
init|=
literal|"_collisions"
decl_stmt|;
comment|/**      * The modified time (5 second resolution).      */
specifier|static
specifier|final
name|String
name|MODIFIED
init|=
literal|"_modified"
decl_stmt|;
comment|/**      * The list of recent revisions for this node, where this node is the      * root of the commit. Key: revision, value: true or the base revision of an      * un-merged branch commit.      */
specifier|static
specifier|final
name|String
name|REVISIONS
init|=
literal|"_revisions"
decl_stmt|;
comment|/**      * The last revision. Key: machine id, value: revision.      */
specifier|static
specifier|final
name|String
name|LAST_REV
init|=
literal|"_lastRev"
decl_stmt|;
specifier|private
specifier|final
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|/**      * @return the system time this object was created.      */
specifier|public
specifier|final
name|long
name|getCreated
parameter_list|()
block|{
return|return
name|time
return|;
block|}
comment|/**      * @return a map of the last known revision for each clusterId.      */
annotation|@
name|Nonnull
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|Revision
argument_list|>
name|getLastRev
parameter_list|()
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Revision
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|valueMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|get
argument_list|(
name|LAST_REV
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|valueMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|clusterId
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Revision
name|rev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|clusterId
argument_list|,
name|rev
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
comment|/**      * Returns<code>true</code> if the given<code>revision</code> is marked      * committed in<strong>this</strong> document.      *      * @param revision the revision.      * @return<code>true</code> if committed;<code>false</code> otherwise.      */
specifier|public
name|boolean
name|isCommitted
parameter_list|(
annotation|@
name|Nonnull
name|String
name|revision
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|revision
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|revisions
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|get
argument_list|(
name|REVISIONS
argument_list|)
decl_stmt|;
return|return
name|revisions
operator|!=
literal|null
operator|&&
name|Utils
operator|.
name|isCommitted
argument_list|(
name|revisions
operator|.
name|get
argument_list|(
name|revision
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns<code>true</code> if this document contains an entry for the      * given<code>revision</code> in the {@link #REVISIONS} map. Please note      * that an entry in the {@link #REVISIONS} map does not necessarily mean      * the the revision is committed. Use {@link #isCommitted(String)} to get      * the commit state of a revision.      *      * @param revision the revision to check.      * @return<code>true</code> if this document contains the given revision.      */
specifier|public
name|boolean
name|containsRevision
parameter_list|(
annotation|@
name|Nonnull
name|String
name|revision
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|revision
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|revisions
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|get
argument_list|(
name|REVISIONS
argument_list|)
decl_stmt|;
return|return
name|revisions
operator|!=
literal|null
operator|&&
name|revisions
operator|.
name|containsKey
argument_list|(
name|revision
argument_list|)
return|;
block|}
comment|/**      * Get the revision of the latest change made to this node.      *      * @param changeRev the revision of the current change      * @param handler the conflict handler, which is called for concurrent changes      *                preceding<code>before</code>.      * @return the revision, or null if deleted      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Nullable
specifier|public
name|Revision
name|getNewestRevision
parameter_list|(
name|RevisionContext
name|context
parameter_list|,
name|DocumentStore
name|store
parameter_list|,
name|Revision
name|changeRev
parameter_list|,
name|CollisionHandler
name|handler
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|revisions
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|containsKey
argument_list|(
name|REVISIONS
argument_list|)
condition|)
block|{
name|revisions
operator|.
name|addAll
argument_list|(
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|get
argument_list|(
name|REVISIONS
argument_list|)
operator|)
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|containsKey
argument_list|(
name|COMMIT_ROOT
argument_list|)
condition|)
block|{
name|revisions
operator|.
name|addAll
argument_list|(
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
operator|)
name|get
argument_list|(
name|COMMIT_ROOT
argument_list|)
operator|)
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|deletedMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|get
argument_list|(
name|DELETED
argument_list|)
decl_stmt|;
if|if
condition|(
name|deletedMap
operator|!=
literal|null
condition|)
block|{
name|revisions
operator|.
name|addAll
argument_list|(
name|deletedMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Revision
name|newestRev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|r
range|:
name|revisions
control|)
block|{
name|Revision
name|propRev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|propRev
argument_list|,
name|changeRev
argument_list|)
condition|)
block|{
comment|// we have seen a previous change from another cluster node
comment|// (which might be conflicting or not) - we need to make
comment|// sure this change is visible from now on
comment|// TODO verify this is really needed
name|context
operator|.
name|publishRevision
argument_list|(
name|propRev
argument_list|,
name|changeRev
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newestRev
operator|==
literal|null
operator|||
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|propRev
argument_list|,
name|newestRev
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|propRev
operator|.
name|equals
argument_list|(
name|changeRev
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isValidRevision
argument_list|(
name|context
argument_list|,
name|store
argument_list|,
name|propRev
argument_list|,
name|changeRev
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Revision
argument_list|>
argument_list|()
argument_list|)
condition|)
block|{
name|handler
operator|.
name|concurrentModification
argument_list|(
name|propRev
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newestRev
operator|=
name|propRev
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|newestRev
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|deletedMap
operator|!=
literal|null
condition|)
block|{
name|String
name|value
init|=
name|deletedMap
operator|.
name|get
argument_list|(
name|newestRev
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
comment|// deleted in the newest revision
return|return
literal|null
return|;
block|}
block|}
return|return
name|newestRev
return|;
block|}
comment|/**      * Checks if the revision is valid for the given document. A revision is      * considered valid if the given document is the root of the commit, or the      * commit root has the revision set. This method may read further documents      * to perform this check.      * This method also takes pending branches into consideration.      * The<code>readRevision</code> identifies the read revision used by the      * client, which may be a branch revision logged in {@link RevisionContext#getBranches()}.      * The revision<code>rev</code> is valid if it is part of the branch      * history of<code>readRevision</code>.      *      * @param rev     revision to check.      * @param readRevision the read revision of the client.      * @param validRevisions set of revisions already checked against      *<code>readRevision</code> and considered valid.      * @return<code>true</code> if the revision is valid;<code>false</code>      *         otherwise.      */
name|boolean
name|isValidRevision
parameter_list|(
annotation|@
name|Nonnull
name|RevisionContext
name|context
parameter_list|,
annotation|@
name|Nonnull
name|DocumentStore
name|store
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|rev
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|readRevision
parameter_list|,
annotation|@
name|Nonnull
name|Set
argument_list|<
name|Revision
argument_list|>
name|validRevisions
parameter_list|)
block|{
if|if
condition|(
name|validRevisions
operator|.
name|contains
argument_list|(
name|rev
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|revisions
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|get
argument_list|(
name|NodeDocument
operator|.
name|REVISIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|isCommitted
argument_list|(
name|context
argument_list|,
name|rev
argument_list|,
name|readRevision
argument_list|,
name|revisions
argument_list|)
condition|)
block|{
name|validRevisions
operator|.
name|add
argument_list|(
name|rev
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|revisions
operator|!=
literal|null
operator|&&
name|revisions
operator|.
name|containsKey
argument_list|(
name|rev
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
comment|// rev is in revisions map of this node, but not committed
comment|// no need to check _commitRoot field
return|return
literal|false
return|;
block|}
comment|// check commit root
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|commitRoot
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
operator|)
name|get
argument_list|(
name|NodeDocument
operator|.
name|COMMIT_ROOT
argument_list|)
decl_stmt|;
name|String
name|commitRootPath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|commitRoot
operator|!=
literal|null
condition|)
block|{
name|Integer
name|depth
init|=
name|commitRoot
operator|.
name|get
argument_list|(
name|rev
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|depth
operator|!=
literal|null
condition|)
block|{
name|String
name|p
init|=
name|Utils
operator|.
name|getPathFromId
argument_list|(
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|commitRootPath
operator|=
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
name|p
argument_list|,
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|p
argument_list|)
operator|-
name|depth
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|commitRootPath
operator|==
literal|null
condition|)
block|{
comment|// shouldn't happen, either node is commit root for a revision
comment|// or has a reference to the commit root
name|log
operator|.
name|warn
argument_list|(
literal|"Node {} does not have commit root reference for revision {}"
argument_list|,
name|getId
argument_list|()
argument_list|,
name|rev
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// get root of commit
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|commitRootPath
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rootRevisions
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|doc
operator|.
name|get
argument_list|(
name|NodeDocument
operator|.
name|REVISIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|isCommitted
argument_list|(
name|context
argument_list|,
name|rev
argument_list|,
name|readRevision
argument_list|,
name|rootRevisions
argument_list|)
condition|)
block|{
name|validRevisions
operator|.
name|add
argument_list|(
name|rev
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns a {@link Node} as seen at the given<code>readRevision</code>.      *      * @param context      the revision context.      * @param readRevision the read revision.      * @return the node or<code>null</code> if the node doesn't exist at the      *         given read revision.      */
annotation|@
name|CheckForNull
specifier|public
name|Node
name|getNodeAtRevision
parameter_list|(
name|RevisionContext
name|context
parameter_list|,
name|DocumentStore
name|store
parameter_list|,
name|Revision
name|readRevision
parameter_list|)
block|{
name|Revision
name|min
init|=
name|getLiveRevision
argument_list|(
name|context
argument_list|,
name|store
argument_list|,
name|readRevision
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Revision
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|min
operator|==
literal|null
condition|)
block|{
comment|// deleted
return|return
literal|null
return|;
block|}
name|String
name|path
init|=
name|Utils
operator|.
name|getPathFromId
argument_list|(
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Node
name|n
init|=
operator|new
name|Node
argument_list|(
name|path
argument_list|,
name|readRevision
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Utils
operator|.
name|isPropertyName
argument_list|(
name|key
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Object
name|v
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|valueMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|v
decl_stmt|;
if|if
condition|(
name|valueMap
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|valueMap
operator|instanceof
name|TreeMap
condition|)
block|{
comment|// TODO instanceof should be avoided
comment|// use descending keys (newest first) if map is sorted
name|valueMap
operator|=
operator|(
operator|(
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|valueMap
operator|)
operator|.
name|descendingMap
argument_list|()
expr_stmt|;
block|}
name|String
name|value
init|=
name|getLatestValue
argument_list|(
name|context
argument_list|,
name|valueMap
argument_list|,
name|min
argument_list|,
name|readRevision
argument_list|)
decl_stmt|;
name|String
name|propertyName
init|=
name|Utils
operator|.
name|unescapePropertyName
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|// when was this node last modified?
name|Branch
name|branch
init|=
name|context
operator|.
name|getBranches
argument_list|()
operator|.
name|getBranch
argument_list|(
name|readRevision
argument_list|)
decl_stmt|;
name|Revision
name|lastRevision
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Revision
argument_list|>
name|lastRevs
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|getLastRev
argument_list|()
argument_list|)
decl_stmt|;
comment|// overlay with unsaved last modified from this instance
name|Revision
name|lastModified
init|=
name|context
operator|.
name|getPendingModifications
argument_list|()
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastModified
operator|!=
literal|null
condition|)
block|{
name|lastRevs
operator|.
name|put
argument_list|(
name|context
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|lastModified
argument_list|)
expr_stmt|;
block|}
comment|// filter out revisions newer than branch base
if|if
condition|(
name|branch
operator|!=
literal|null
condition|)
block|{
name|Revision
name|base
init|=
name|branch
operator|.
name|getBase
argument_list|(
name|readRevision
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Revision
argument_list|>
name|it
init|=
name|lastRevs
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Revision
name|r
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|r
argument_list|,
name|base
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Revision
name|r
range|:
name|lastRevs
operator|.
name|values
argument_list|()
control|)
block|{
comment|// ignore if newer than readRevision
if|if
condition|(
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|r
argument_list|,
name|readRevision
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|lastRevision
operator|==
literal|null
operator|||
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|r
argument_list|,
name|lastRevision
argument_list|)
condition|)
block|{
name|lastRevision
operator|=
name|r
expr_stmt|;
block|}
block|}
if|if
condition|(
name|branch
operator|!=
literal|null
condition|)
block|{
comment|// read from a branch
comment|// -> possibly overlay with unsaved last revs from branch
name|Revision
name|r
init|=
name|branch
operator|.
name|getUnsavedLastRevision
argument_list|(
name|path
argument_list|,
name|readRevision
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|lastRevision
operator|=
name|r
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lastRevision
operator|==
literal|null
condition|)
block|{
comment|// use readRevision if none found
name|lastRevision
operator|=
name|readRevision
expr_stmt|;
block|}
name|n
operator|.
name|setLastRevision
argument_list|(
name|lastRevision
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
comment|/**      * Get the earliest (oldest) revision where the node was alive at or before      * the provided revision, if the node was alive at the given revision.      *      * @param maxRev the maximum revision to return      * @param validRevisions the set of revisions already checked against maxRev      *            and considered valid.      * @return the earliest revision, or null if the node is deleted at the      *         given revision      */
specifier|public
name|Revision
name|getLiveRevision
parameter_list|(
name|RevisionContext
name|context
parameter_list|,
name|DocumentStore
name|store
parameter_list|,
name|Revision
name|maxRev
parameter_list|,
name|Set
argument_list|<
name|Revision
argument_list|>
name|validRevisions
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|valueMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|get
argument_list|(
name|NodeDocument
operator|.
name|DELETED
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueMap
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// first, search the newest deleted revision
name|Revision
name|deletedRev
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valueMap
operator|instanceof
name|TreeMap
condition|)
block|{
comment|// TODO instanceof should be avoided
comment|// use descending keys (newest first) if map is sorted
name|valueMap
operator|=
operator|(
operator|(
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|valueMap
operator|)
operator|.
name|descendingMap
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|r
range|:
name|valueMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|valueMap
operator|.
name|get
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
comment|// only look at deleted revisions now
continue|continue;
block|}
name|Revision
name|propRev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|propRev
argument_list|,
name|maxRev
argument_list|)
operator|||
operator|!
name|isValidRevision
argument_list|(
name|context
argument_list|,
name|store
argument_list|,
name|propRev
argument_list|,
name|maxRev
argument_list|,
name|validRevisions
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|deletedRev
operator|==
literal|null
operator|||
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|propRev
argument_list|,
name|deletedRev
argument_list|)
condition|)
block|{
name|deletedRev
operator|=
name|propRev
expr_stmt|;
block|}
block|}
comment|// now search the oldest non-deleted revision that is newer than the
comment|// newest deleted revision
name|Revision
name|liveRev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|r
range|:
name|valueMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|valueMap
operator|.
name|get
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
comment|// ignore deleted revisions
continue|continue;
block|}
name|Revision
name|propRev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|deletedRev
operator|!=
literal|null
operator|&&
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|deletedRev
argument_list|,
name|propRev
argument_list|)
condition|)
block|{
comment|// the node was deleted later on
continue|continue;
block|}
if|if
condition|(
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|propRev
argument_list|,
name|maxRev
argument_list|)
operator|||
operator|!
name|isValidRevision
argument_list|(
name|context
argument_list|,
name|store
argument_list|,
name|propRev
argument_list|,
name|maxRev
argument_list|,
name|validRevisions
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|liveRev
operator|==
literal|null
operator|||
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|liveRev
argument_list|,
name|propRev
argument_list|)
condition|)
block|{
name|liveRev
operator|=
name|propRev
expr_stmt|;
block|}
block|}
return|return
name|liveRev
return|;
block|}
comment|/**      * Split this document in two.      *      * @param context      * @param commitRevision      * @param splitDocumentAgeMillis      * @return      */
specifier|public
name|UpdateOp
index|[]
name|splitDocument
parameter_list|(
annotation|@
name|Nonnull
name|RevisionContext
name|context
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|commitRevision
parameter_list|,
name|long
name|splitDocumentAgeMillis
parameter_list|)
block|{
name|String
name|id
init|=
name|getId
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|Utils
operator|.
name|getPathFromId
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|Long
name|previous
init|=
operator|(
name|Long
operator|)
name|get
argument_list|(
name|NodeDocument
operator|.
name|PREVIOUS
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|previous
operator|=
literal|0L
expr_stmt|;
block|}
else|else
block|{
name|previous
operator|++
expr_stmt|;
block|}
name|UpdateOp
name|old
init|=
operator|new
name|UpdateOp
argument_list|(
name|path
argument_list|,
name|id
operator|+
literal|"/"
operator|+
name|previous
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|setModified
argument_list|(
name|old
argument_list|,
name|commitRevision
argument_list|)
expr_stmt|;
name|UpdateOp
name|main
init|=
operator|new
name|UpdateOp
argument_list|(
name|path
argument_list|,
name|id
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|setModified
argument_list|(
name|main
argument_list|,
name|commitRevision
argument_list|)
expr_stmt|;
name|main
operator|.
name|set
argument_list|(
name|NodeDocument
operator|.
name|PREVIOUS
argument_list|,
name|previous
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|Document
operator|.
name|ID
argument_list|)
condition|)
block|{
comment|// ok
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|NodeDocument
operator|.
name|MODIFIED
argument_list|)
condition|)
block|{
comment|// ok
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|NodeDocument
operator|.
name|PREVIOUS
argument_list|)
condition|)
block|{
comment|// ok
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|NodeDocument
operator|.
name|LAST_REV
argument_list|)
condition|)
block|{
comment|// only maintain the lastRev in the main document
name|main
operator|.
name|setMap
argument_list|(
name|NodeDocument
operator|.
name|LAST_REV
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|commitRevision
operator|.
name|getClusterId
argument_list|()
argument_list|)
argument_list|,
name|commitRevision
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// UpdateOp.DELETED,
comment|// UpdateOp.REVISIONS,
comment|// and regular properties
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|valueMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Revision
name|latestRev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|r
range|:
name|valueMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Revision
name|propRev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|latestRev
operator|==
literal|null
operator|||
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|propRev
argument_list|,
name|latestRev
argument_list|)
condition|)
block|{
name|latestRev
operator|=
name|propRev
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|r
range|:
name|valueMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Revision
name|propRev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|Object
name|v
init|=
name|valueMap
operator|.
name|get
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|propRev
operator|.
name|equals
argument_list|(
name|latestRev
argument_list|)
condition|)
block|{
name|main
operator|.
name|setMap
argument_list|(
name|key
argument_list|,
name|propRev
operator|.
name|toString
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|ageMillis
init|=
name|Revision
operator|.
name|getCurrentTimestamp
argument_list|()
operator|-
name|propRev
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
if|if
condition|(
name|ageMillis
operator|>
name|splitDocumentAgeMillis
condition|)
block|{
name|old
operator|.
name|setMapEntry
argument_list|(
name|key
argument_list|,
name|propRev
operator|.
name|toString
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|main
operator|.
name|setMap
argument_list|(
name|key
argument_list|,
name|propRev
operator|.
name|toString
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|Commit
operator|.
name|PURGE_OLD_REVISIONS
condition|)
block|{
name|old
operator|=
literal|null
expr_stmt|;
block|}
return|return
operator|new
name|UpdateOp
index|[]
block|{
name|old
block|,
name|main
block|}
return|;
block|}
specifier|public
specifier|static
name|void
name|setModified
parameter_list|(
name|UpdateOp
name|op
parameter_list|,
name|Revision
name|revision
parameter_list|)
block|{
name|op
operator|.
name|set
argument_list|(
name|MODIFIED
argument_list|,
name|Commit
operator|.
name|getModified
argument_list|(
name|revision
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//-----------------------------< CacheValue>-------------------------------
annotation|@
name|Override
specifier|public
name|int
name|getMemory
parameter_list|()
block|{
return|return
name|Utils
operator|.
name|estimateMemoryUsage
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|//----------------------------< internal>----------------------------------
comment|/**      * Checks that revision x is newer than another revision.      *      * @param x the revision to check      * @param previous the presumed earlier revision      * @return true if x is newer      */
specifier|private
specifier|static
name|boolean
name|isRevisionNewer
parameter_list|(
annotation|@
name|Nonnull
name|RevisionContext
name|context
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|x
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|previous
parameter_list|)
block|{
return|return
name|context
operator|.
name|getRevisionComparator
argument_list|()
operator|.
name|compare
argument_list|(
name|x
argument_list|,
name|previous
argument_list|)
operator|>
literal|0
return|;
block|}
comment|/**      * TODO: turn into instance method?      * Returns<code>true</code> if the given revision      * {@link Utils#isCommitted(String)} in the revisions map and is visible      * from the<code>readRevision</code>.      *      * @param revision  the revision to check.      * @param readRevision the read revision.      * @param revisions the revisions map, or<code>null</code> if none is set.      * @return<code>true</code> if the revision is committed, otherwise      *<code>false</code>.      */
specifier|private
specifier|static
name|boolean
name|isCommitted
parameter_list|(
annotation|@
name|Nonnull
name|RevisionContext
name|context
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|readRevision
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|revisions
parameter_list|)
block|{
if|if
condition|(
name|revision
operator|.
name|equals
argument_list|(
name|readRevision
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|revisions
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|value
init|=
name|revisions
operator|.
name|get
argument_list|(
name|revision
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|Utils
operator|.
name|isCommitted
argument_list|(
name|value
argument_list|)
condition|)
block|{
comment|// resolve commit revision
name|revision
operator|=
name|Utils
operator|.
name|resolveCommitRevision
argument_list|(
name|revision
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getBranches
argument_list|()
operator|.
name|getBranch
argument_list|(
name|readRevision
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// readRevision is not from a branch
comment|// compare resolved revision as is
return|return
operator|!
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|revision
argument_list|,
name|readRevision
argument_list|)
return|;
block|}
block|}
else|else
block|{
comment|// branch commit
if|if
condition|(
name|Revision
operator|.
name|fromString
argument_list|(
name|value
argument_list|)
operator|.
name|getClusterId
argument_list|()
operator|!=
name|context
operator|.
name|getClusterId
argument_list|()
condition|)
block|{
comment|// this is an unmerged branch commit from another cluster node,
comment|// hence never visible to us
return|return
literal|false
return|;
block|}
block|}
return|return
name|includeRevision
argument_list|(
name|context
argument_list|,
name|revision
argument_list|,
name|readRevision
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|includeRevision
parameter_list|(
name|RevisionContext
name|context
parameter_list|,
name|Revision
name|x
parameter_list|,
name|Revision
name|requestRevision
parameter_list|)
block|{
name|Branch
name|b
init|=
name|context
operator|.
name|getBranches
argument_list|()
operator|.
name|getBranch
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
comment|// only include if requested revision is also a branch revision
comment|// with a history including x
if|if
condition|(
name|b
operator|.
name|containsCommit
argument_list|(
name|requestRevision
argument_list|)
condition|)
block|{
comment|// in same branch, include if the same revision or
comment|// requestRevision is newer
return|return
name|x
operator|.
name|equals
argument_list|(
name|requestRevision
argument_list|)
operator|||
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|requestRevision
argument_list|,
name|x
argument_list|)
return|;
block|}
comment|// not part of branch identified by requestedRevision
return|return
literal|false
return|;
block|}
comment|// assert: x is not a branch commit
name|b
operator|=
name|context
operator|.
name|getBranches
argument_list|()
operator|.
name|getBranch
argument_list|(
name|requestRevision
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
comment|// reset requestRevision to branch base revision to make
comment|// sure we don't include revisions committed after branch
comment|// was created
name|requestRevision
operator|=
name|b
operator|.
name|getBase
argument_list|(
name|requestRevision
argument_list|)
expr_stmt|;
block|}
return|return
name|context
operator|.
name|getRevisionComparator
argument_list|()
operator|.
name|compare
argument_list|(
name|requestRevision
argument_list|,
name|x
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|/**      * Get the latest property value that is larger or equal the min revision,      * and smaller or equal the max revision.      *      * @param valueMap the revision-value map      * @param min the minimum revision (null meaning unlimited)      * @param max the maximum revision      * @return the value, or null if not found      */
specifier|private
name|String
name|getLatestValue
parameter_list|(
annotation|@
name|Nonnull
name|RevisionContext
name|context
parameter_list|,
annotation|@
name|Nonnull
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|valueMap
parameter_list|,
annotation|@
name|Nullable
name|Revision
name|min
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|max
parameter_list|)
block|{
name|String
name|value
init|=
literal|null
decl_stmt|;
name|Revision
name|latestRev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|r
range|:
name|valueMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Revision
name|propRev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|min
operator|!=
literal|null
operator|&&
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|min
argument_list|,
name|propRev
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|latestRev
operator|!=
literal|null
operator|&&
operator|!
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|propRev
argument_list|,
name|latestRev
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|includeRevision
argument_list|(
name|context
argument_list|,
name|propRev
argument_list|,
name|max
argument_list|)
condition|)
block|{
name|latestRev
operator|=
name|propRev
expr_stmt|;
name|value
operator|=
name|valueMap
operator|.
name|get
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|value
return|;
block|}
block|}
end_class

end_unit

