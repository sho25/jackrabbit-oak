begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|version
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|InvalidItemStateException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|UnsupportedRepositoryOperationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|lock
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|ReadOnlyNodeTypeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|ReadOnlyVersionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionConstants
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * {@code ReadWriteVersionManager}...  */
end_comment

begin_class
specifier|public
class|class
name|ReadWriteVersionManager
extends|extends
name|ReadOnlyVersionManager
block|{
specifier|private
specifier|final
name|Tree
name|versionStorage
decl_stmt|;
specifier|private
specifier|final
name|Root
name|workspaceRoot
decl_stmt|;
specifier|public
name|ReadWriteVersionManager
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|versionStorage
parameter_list|,
annotation|@
name|Nonnull
name|Root
name|workspaceRoot
parameter_list|)
block|{
name|this
operator|.
name|versionStorage
operator|=
name|checkNotNull
argument_list|(
name|versionStorage
argument_list|)
expr_stmt|;
name|this
operator|.
name|workspaceRoot
operator|=
name|checkNotNull
argument_list|(
name|workspaceRoot
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called by the write methods to refresh the state of the possible      * session associated with this instance. The default implementation      * of this method does nothing, but a subclass can use this callback      * to keep a session in sync with the persisted version changes.      *      * @throws RepositoryException if the session could not be refreshed      */
specifier|protected
name|void
name|refresh
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// do nothing
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|protected
name|Tree
name|getVersionStorage
parameter_list|()
block|{
return|return
name|versionStorage
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|protected
name|Root
name|getWorkspaceRoot
parameter_list|()
block|{
return|return
name|workspaceRoot
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|protected
name|ReadOnlyNodeTypeManager
name|getNodeTypeManager
parameter_list|()
block|{
return|return
name|ReadOnlyNodeTypeManager
operator|.
name|getInstance
argument_list|(
name|workspaceRoot
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
return|;
block|}
comment|/**      * Performs a checkin on a versionable tree and returns the tree that      * represents the created version.      *      * @param versionable the versionable node to check in.      * @return the created version.      * @throws InvalidItemStateException if the current root has pending      *                                   changes.      * @throws UnsupportedRepositoryOperationException      *                                   if the versionable tree isn't actually      *                                   versionable.      * @throws RepositoryException       if an error occurs while checking the      *                                   node type of the tree.      */
annotation|@
name|Nonnull
specifier|public
name|Tree
name|checkin
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|versionable
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|InvalidItemStateException
throws|,
name|UnsupportedRepositoryOperationException
block|{
if|if
condition|(
name|workspaceRoot
operator|.
name|hasPendingChanges
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidItemStateException
argument_list|(
literal|"Unable to perform checkin. "
operator|+
literal|"Session has pending changes."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isVersionable
argument_list|(
name|versionable
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|(
name|versionable
operator|.
name|getPath
argument_list|()
operator|+
literal|" is not versionable"
argument_list|)
throw|;
block|}
if|if
condition|(
name|isCheckedOut
argument_list|(
name|versionable
argument_list|)
condition|)
block|{
name|versionable
operator|.
name|setProperty
argument_list|(
name|VersionConstants
operator|.
name|JCR_ISCHECKEDOUT
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
try|try
block|{
name|getWorkspaceRoot
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|getWorkspaceRoot
argument_list|()
operator|.
name|refresh
argument_list|()
expr_stmt|;
throw|throw
name|newRepositoryException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|getBaseVersion
argument_list|(
name|getWorkspaceRoot
argument_list|()
operator|.
name|getTree
argument_list|(
name|versionable
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Performs a checkout on a versionable tree.      *      * @param versionable the versionable node to check out.      * @throws InvalidItemStateException if the current root has pending      *                                   changes.      * @throws UnsupportedRepositoryOperationException      *                                   if the versionable tree isn't actually      *                                   versionable.      * @throws RepositoryException       if an error occurs while checking the      *                                   node type of the tree.      */
specifier|public
name|void
name|checkout
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|versionable
parameter_list|)
throws|throws
name|UnsupportedRepositoryOperationException
throws|,
name|InvalidItemStateException
throws|,
name|RepositoryException
block|{
if|if
condition|(
name|workspaceRoot
operator|.
name|hasPendingChanges
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidItemStateException
argument_list|(
literal|"Unable to perform checkout. "
operator|+
literal|"Session has pending changes."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isVersionable
argument_list|(
name|versionable
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|(
name|versionable
operator|.
name|getPath
argument_list|()
operator|+
literal|" is not versionable"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isCheckedOut
argument_list|(
name|versionable
argument_list|)
condition|)
block|{
name|versionable
operator|.
name|setProperty
argument_list|(
name|VersionConstants
operator|.
name|JCR_ISCHECKEDOUT
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
try|try
block|{
name|getWorkspaceRoot
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|getWorkspaceRoot
argument_list|()
operator|.
name|refresh
argument_list|()
expr_stmt|;
throw|throw
name|newRepositoryException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// TODO: more methods that modify versions
comment|/**      * Wraps the given {@link CommitFailedException} instance using the      * appropriate {@link RepositoryException} subclass based on the      * {@link CommitFailedException#getType() type} of the given exception.      *      * @param exception typed commit failure exception      * @return matching repository exception      */
specifier|private
specifier|static
name|RepositoryException
name|newRepositoryException
parameter_list|(
annotation|@
name|Nonnull
name|CommitFailedException
name|exception
parameter_list|)
block|{
if|if
condition|(
name|exception
operator|.
name|isConstraintViolation
argument_list|()
condition|)
block|{
return|return
operator|new
name|ConstraintViolationException
argument_list|(
name|exception
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|exception
operator|.
name|isAccessViolation
argument_list|()
condition|)
block|{
return|return
operator|new
name|AccessDeniedException
argument_list|(
name|exception
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|exception
operator|.
name|isOfType
argument_list|(
literal|"State"
argument_list|)
condition|)
block|{
return|return
operator|new
name|InvalidItemStateException
argument_list|(
name|exception
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|exception
operator|.
name|isOfType
argument_list|(
name|CommitFailedException
operator|.
name|VERSION
argument_list|)
condition|)
block|{
return|return
operator|new
name|VersionException
argument_list|(
name|exception
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|exception
operator|.
name|isOfType
argument_list|(
literal|"Lock"
argument_list|)
condition|)
block|{
return|return
operator|new
name|LockException
argument_list|(
name|exception
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|RepositoryException
argument_list|(
name|exception
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

