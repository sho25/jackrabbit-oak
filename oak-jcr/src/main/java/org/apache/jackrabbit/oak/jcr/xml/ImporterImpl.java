begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|xml
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ImportUUIDBehavior
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ItemExistsException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|lock
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|IdentifierManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|DefinitionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|EffectiveNodeTypeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|Importer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|NodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|PropInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedItemImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedNodeImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedPropertyImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ReferenceChangeTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ImporterImpl
implements|implements
name|Importer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ImporterImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Tree
name|importTargetTree
decl_stmt|;
specifier|private
specifier|final
name|Tree
name|ntTypesRoot
decl_stmt|;
specifier|private
specifier|final
name|int
name|uuidBehavior
decl_stmt|;
specifier|private
specifier|final
name|String
name|userID
decl_stmt|;
specifier|private
specifier|final
name|AccessManager
name|accessManager
decl_stmt|;
specifier|private
specifier|final
name|IdentifierManager
name|idManager
decl_stmt|;
specifier|private
specifier|final
name|EffectiveNodeTypeProvider
name|effectiveNodeTypeProvider
decl_stmt|;
specifier|private
specifier|final
name|DefinitionProvider
name|definitionProvider
decl_stmt|;
specifier|private
specifier|final
name|Stack
argument_list|<
name|Tree
argument_list|>
name|parents
decl_stmt|;
comment|/**      * helper object that keeps track of remapped uuid's and imported reference      * properties that might need correcting depending on the uuid mappings      */
specifier|private
specifier|final
name|ReferenceChangeTracker
name|refTracker
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|ProtectedItemImporter
argument_list|>
name|pItemImporters
init|=
operator|new
name|ArrayList
argument_list|<
name|ProtectedItemImporter
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Currently active importer for protected nodes.      */
specifier|private
name|ProtectedNodeImporter
name|pnImporter
decl_stmt|;
comment|/**      * Creates a new importer instance.      * @param absPath  The absolute JCR paths such as passed to the JCR call.      * @param sessionContext The context of the editing session      * @param root The write {@code Root}, which in case of a workspace import      * is different from the {@code Root} associated with the editing session.      * @param uuidBehavior The uuid behavior      * @param isWorkspaceImport {@code true} if this is a workspace import,      * {@code false} otherwise.      * @throws javax.jcr.RepositoryException If the initial validation of the      * path or the state of target node/session fails.      */
specifier|public
name|ImporterImpl
parameter_list|(
name|String
name|absPath
parameter_list|,
name|SessionContext
name|sessionContext
parameter_list|,
name|Root
name|root
parameter_list|,
name|int
name|uuidBehavior
parameter_list|,
name|boolean
name|isWorkspaceImport
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|absPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Not an absolute path: "
operator|+
name|absPath
argument_list|)
throw|;
block|}
name|String
name|oakPath
init|=
name|sessionContext
operator|.
name|getOakPathKeepIndex
argument_list|(
name|absPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|oakPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Invalid name or path: "
operator|+
name|absPath
argument_list|)
throw|;
block|}
if|if
condition|(
name|isWorkspaceImport
operator|&&
name|sessionContext
operator|.
name|getSessionDelegate
argument_list|()
operator|.
name|hasPendingChanges
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Pending changes on session. Cannot run workspace import."
argument_list|)
throw|;
block|}
name|this
operator|.
name|uuidBehavior
operator|=
name|uuidBehavior
expr_stmt|;
name|userID
operator|=
name|sessionContext
operator|.
name|getSessionDelegate
argument_list|()
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
expr_stmt|;
name|importTargetTree
operator|=
name|root
operator|.
name|getTree
argument_list|(
name|absPath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|importTargetTree
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
name|absPath
argument_list|)
throw|;
block|}
comment|// TODO: review usage of write-root and object obtained from session-context (OAK-931)
name|VersionManager
name|vMgr
init|=
name|sessionContext
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|vMgr
operator|.
name|isCheckedOut
argument_list|(
name|absPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|VersionException
argument_list|(
literal|"Target node is checked in."
argument_list|)
throw|;
block|}
if|if
condition|(
name|sessionContext
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getLockManager
argument_list|()
operator|.
name|isLocked
argument_list|(
name|absPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Target node is locked."
argument_list|)
throw|;
block|}
name|ntTypesRoot
operator|=
name|root
operator|.
name|getTree
argument_list|(
name|NODE_TYPES_PATH
argument_list|)
expr_stmt|;
name|accessManager
operator|=
name|sessionContext
operator|.
name|getAccessManager
argument_list|()
expr_stmt|;
name|idManager
operator|=
operator|new
name|IdentifierManager
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|effectiveNodeTypeProvider
operator|=
name|sessionContext
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNodeTypeManager
argument_list|()
expr_stmt|;
name|definitionProvider
operator|=
name|sessionContext
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNodeTypeManager
argument_list|()
expr_stmt|;
comment|// TODO: end
name|refTracker
operator|=
operator|new
name|ReferenceChangeTracker
argument_list|()
expr_stmt|;
name|parents
operator|=
operator|new
name|Stack
argument_list|<
name|Tree
argument_list|>
argument_list|()
expr_stmt|;
name|parents
operator|.
name|push
argument_list|(
name|importTargetTree
argument_list|)
expr_stmt|;
name|pItemImporters
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ProtectedItemImporter
name|importer
range|:
name|sessionContext
operator|.
name|getProtectedItemImporters
argument_list|()
control|)
block|{
comment|// FIXME this passes the session scoped name path mapper also for workspace imports
if|if
condition|(
name|importer
operator|.
name|init
argument_list|(
name|sessionContext
operator|.
name|getSession
argument_list|()
argument_list|,
name|root
argument_list|,
name|sessionContext
argument_list|,
name|isWorkspaceImport
argument_list|,
name|uuidBehavior
argument_list|,
name|refTracker
argument_list|,
name|sessionContext
operator|.
name|getSecurityProvider
argument_list|()
argument_list|)
condition|)
block|{
name|pItemImporters
operator|.
name|add
argument_list|(
name|importer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Tree
name|createTree
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|parent
parameter_list|,
annotation|@
name|Nonnull
name|NodeInfo
name|nInfo
parameter_list|,
annotation|@
name|CheckForNull
name|String
name|uuid
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|ntName
init|=
name|nInfo
operator|.
name|getPrimaryTypeName
argument_list|()
decl_stmt|;
name|String
name|value
init|=
operator|(
name|ntName
operator|!=
literal|null
operator|)
condition|?
name|ntName
else|:
name|TreeUtil
operator|.
name|getDefaultChildType
argument_list|(
name|ntTypesRoot
argument_list|,
name|parent
argument_list|,
name|nInfo
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Tree
name|child
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|parent
argument_list|,
name|nInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|,
name|ntTypesRoot
argument_list|,
name|userID
argument_list|)
decl_stmt|;
if|if
condition|(
name|ntName
operator|!=
literal|null
condition|)
block|{
name|accessManager
operator|.
name|checkPermissions
argument_list|(
name|child
argument_list|,
name|child
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|,
name|Permissions
operator|.
name|NODE_TYPE_MANAGEMENT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uuid
operator|!=
literal|null
condition|)
block|{
name|child
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_UUID
argument_list|,
name|uuid
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|mixin
range|:
name|nInfo
operator|.
name|getMixinTypeNames
argument_list|()
control|)
block|{
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|child
argument_list|,
name|mixin
argument_list|,
name|ntTypesRoot
argument_list|,
name|userID
argument_list|)
expr_stmt|;
block|}
return|return
name|child
return|;
block|}
specifier|private
name|void
name|createProperty
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|PropInfo
name|pInfo
parameter_list|,
name|PropertyDefinition
name|def
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|Value
argument_list|>
name|values
init|=
name|pInfo
operator|.
name|getValues
argument_list|(
name|pInfo
operator|.
name|getTargetType
argument_list|(
name|def
argument_list|)
argument_list|)
decl_stmt|;
name|PropertyState
name|propertyState
decl_stmt|;
name|String
name|name
init|=
name|pInfo
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|type
init|=
name|pInfo
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
operator|!
name|def
operator|.
name|isMultiple
argument_list|()
condition|)
block|{
name|propertyState
operator|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|propertyState
operator|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
name|tree
operator|.
name|setProperty
argument_list|(
name|propertyState
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|PropertyType
operator|.
name|REFERENCE
operator|||
name|type
operator|==
name|PropertyType
operator|.
name|WEAKREFERENCE
condition|)
block|{
comment|// store reference for later resolution
name|refTracker
operator|.
name|processedReference
argument_list|(
operator|new
name|Reference
argument_list|(
name|tree
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Tree
name|resolveUUIDConflict
parameter_list|(
name|Tree
name|parent
parameter_list|,
name|String
name|conflictingId
parameter_list|,
name|NodeInfo
name|nodeInfo
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|tree
decl_stmt|;
name|Tree
name|conflicting
init|=
name|idManager
operator|.
name|getTree
argument_list|(
name|conflictingId
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflicting
operator|!=
literal|null
operator|&&
operator|!
name|conflicting
operator|.
name|exists
argument_list|()
condition|)
block|{
name|conflicting
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|uuidBehavior
operator|==
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
condition|)
block|{
comment|// create new with new uuid
name|tree
operator|=
name|createTree
argument_list|(
name|parent
argument_list|,
name|nodeInfo
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// remember uuid mapping
if|if
condition|(
name|isNodeType
argument_list|(
name|tree
argument_list|,
name|JcrConstants
operator|.
name|MIX_REFERENCEABLE
argument_list|)
condition|)
block|{
name|refTracker
operator|.
name|put
argument_list|(
name|nodeInfo
operator|.
name|getUUID
argument_list|()
argument_list|,
name|TreeUtil
operator|.
name|getString
argument_list|(
name|tree
argument_list|,
name|JcrConstants
operator|.
name|JCR_UUID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|uuidBehavior
operator|==
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_THROW
condition|)
block|{
comment|// if conflicting node is shareable, then clone it
name|String
name|msg
init|=
literal|"a node with uuid "
operator|+
name|nodeInfo
operator|.
name|getUUID
argument_list|()
operator|+
literal|" already exists!"
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ItemExistsException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|uuidBehavior
operator|==
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REMOVE_EXISTING
condition|)
block|{
if|if
condition|(
name|conflicting
operator|==
literal|null
condition|)
block|{
comment|// since the conflicting node can't be read,
comment|// we can't remove it
name|String
name|msg
init|=
literal|"node with uuid "
operator|+
name|conflictingId
operator|+
literal|" cannot be removed"
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|// make sure conflicting node is not importTargetNode or an ancestor thereof
if|if
condition|(
name|importTargetTree
operator|.
name|getPath
argument_list|()
operator|.
name|startsWith
argument_list|(
name|conflicting
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"cannot remove ancestor node"
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|// remove conflicting
name|conflicting
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// create new with given uuid
name|tree
operator|=
name|createTree
argument_list|(
name|parent
argument_list|,
name|nodeInfo
argument_list|,
name|nodeInfo
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|uuidBehavior
operator|==
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REPLACE_EXISTING
condition|)
block|{
if|if
condition|(
name|conflicting
operator|==
literal|null
condition|)
block|{
comment|// since the conflicting node can't be read,
comment|// we can't replace it
name|String
name|msg
init|=
literal|"node with uuid "
operator|+
name|conflictingId
operator|+
literal|" cannot be replaced"
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|conflicting
operator|.
name|isRoot
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"root node cannot be replaced"
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|// 'replace' current parent with parent of conflicting
name|parent
operator|=
name|conflicting
operator|.
name|getParent
argument_list|()
expr_stmt|;
comment|// replace child node
comment|//TODO ordering! (what happened to replace?)
name|conflicting
operator|.
name|remove
argument_list|()
expr_stmt|;
name|tree
operator|=
name|createTree
argument_list|(
name|parent
argument_list|,
name|nodeInfo
argument_list|,
name|nodeInfo
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|msg
init|=
literal|"unknown uuidBehavior: "
operator|+
name|uuidBehavior
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
name|tree
return|;
block|}
comment|//-----------------------------------------------------------< Importer>---
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// nop
block|}
annotation|@
name|Override
specifier|public
name|void
name|startNode
parameter_list|(
name|NodeInfo
name|nodeInfo
parameter_list|,
name|List
argument_list|<
name|PropInfo
argument_list|>
name|propInfos
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|parent
init|=
name|parents
operator|.
name|peek
argument_list|()
decl_stmt|;
name|Tree
name|tree
init|=
literal|null
decl_stmt|;
name|String
name|id
init|=
name|nodeInfo
operator|.
name|getUUID
argument_list|()
decl_stmt|;
name|String
name|nodeName
init|=
name|nodeInfo
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|ntName
init|=
name|nodeInfo
operator|.
name|getPrimaryTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Skipping node: "
operator|+
name|nodeName
argument_list|)
expr_stmt|;
comment|// parent node was skipped, skip this child node too
name|parents
operator|.
name|push
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// push null onto stack for skipped node
comment|// notify the p-i-importer
if|if
condition|(
name|pnImporter
operator|!=
literal|null
condition|)
block|{
name|pnImporter
operator|.
name|startChildInfo
argument_list|(
name|nodeInfo
argument_list|,
name|propInfos
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|NodeDefinition
name|parentDef
init|=
name|getDefinition
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentDef
operator|.
name|isProtected
argument_list|()
condition|)
block|{
comment|// skip protected node
name|parents
operator|.
name|push
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Skipping protected node: "
operator|+
name|nodeName
argument_list|)
expr_stmt|;
if|if
condition|(
name|pnImporter
operator|!=
literal|null
condition|)
block|{
comment|// pnImporter was already started (current nodeInfo is a sibling)
comment|// notify it about this child node.
name|pnImporter
operator|.
name|startChildInfo
argument_list|(
name|nodeInfo
argument_list|,
name|propInfos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no importer defined yet:
comment|// test if there is a ProtectedNodeImporter among the configured
comment|// importers that can handle this.
comment|// if there is one, notify the ProtectedNodeImporter about the
comment|// start of a item tree that is protected by this parent. If it
comment|// potentially is able to deal with it, notify it about the child node.
for|for
control|(
name|ProtectedItemImporter
name|pni
range|:
name|pItemImporters
control|)
block|{
if|if
condition|(
name|pni
operator|instanceof
name|ProtectedNodeImporter
operator|&&
operator|(
operator|(
name|ProtectedNodeImporter
operator|)
name|pni
operator|)
operator|.
name|start
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Protected node -> delegated to ProtectedNodeImporter"
argument_list|)
expr_stmt|;
name|pnImporter
operator|=
operator|(
name|ProtectedNodeImporter
operator|)
name|pni
expr_stmt|;
name|pnImporter
operator|.
name|startChildInfo
argument_list|(
name|nodeInfo
argument_list|,
name|propInfos
argument_list|)
expr_stmt|;
break|break;
block|}
comment|/* else: p-i-Importer isn't able to deal with the protected tree.                      try next. and if none can handle the passed parent the                      tree below will be skipped */
block|}
block|}
return|return;
block|}
if|if
condition|(
name|parent
operator|.
name|hasChild
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
comment|// a node with that name already exists...
name|Tree
name|existing
init|=
name|parent
operator|.
name|getChild
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
name|NodeDefinition
name|def
init|=
name|getDefinition
argument_list|(
name|existing
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|def
operator|.
name|allowsSameNameSiblings
argument_list|()
condition|)
block|{
comment|// existing doesn't allow same-name siblings,
comment|// check for potential conflicts
if|if
condition|(
name|def
operator|.
name|isProtected
argument_list|()
operator|&&
name|isNodeType
argument_list|(
name|existing
argument_list|,
name|ntName
argument_list|)
condition|)
block|{
comment|/*                      use the existing node as parent for the possible subsequent                      import of a protected tree, that the protected node importer                      may or may not be able to deal with.                      -> upon the next 'startNode' the check for the parent being                         protected will notify the protected node importer.                      -> if the importer is able to deal with that node it needs                         to care of the complete subtree until it is notified                         during the 'endNode' call.                      -> if the import can't deal with that node or if that node                         is the a leaf in the tree to be imported 'end' will                         not have an effect on the importer, that was never started.                     */
name|log
operator|.
name|debug
argument_list|(
literal|"Skipping protected node: "
operator|+
name|existing
argument_list|)
expr_stmt|;
name|parents
operator|.
name|push
argument_list|(
name|existing
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|def
operator|.
name|isAutoCreated
argument_list|()
operator|&&
name|isNodeType
argument_list|(
name|existing
argument_list|,
name|ntName
argument_list|)
condition|)
block|{
comment|// this node has already been auto-created, no need to create it
name|tree
operator|=
name|existing
expr_stmt|;
block|}
else|else
block|{
comment|// edge case: colliding node does have same uuid
comment|// (see http://issues.apache.org/jira/browse/JCR-1128)
name|String
name|existingIdentifier
init|=
name|IdentifierManager
operator|.
name|getIdentifier
argument_list|(
name|existing
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|existingIdentifier
operator|.
name|equals
argument_list|(
name|id
argument_list|)
operator|&&
operator|(
name|uuidBehavior
operator|==
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REMOVE_EXISTING
operator|||
name|uuidBehavior
operator|==
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REPLACE_EXISTING
operator|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|ItemExistsException
argument_list|(
literal|"Node with the same UUID exists:"
operator|+
name|existing
argument_list|)
throw|;
block|}
comment|// fall through
block|}
block|}
block|}
if|if
condition|(
name|tree
operator|==
literal|null
condition|)
block|{
comment|// create node
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
comment|// no potential uuid conflict, always add new node
name|tree
operator|=
name|createTree
argument_list|(
name|parent
argument_list|,
name|nodeInfo
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Tree
name|conflicting
init|=
name|idManager
operator|.
name|getTree
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflicting
operator|!=
literal|null
operator|&&
name|conflicting
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// resolve uuid conflict
name|tree
operator|=
name|resolveUUIDConflict
argument_list|(
name|parent
argument_list|,
name|id
argument_list|,
name|nodeInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|tree
operator|==
literal|null
condition|)
block|{
comment|// no new node has been created, so skip this node
name|parents
operator|.
name|push
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// push null onto stack for skipped node
name|log
operator|.
name|debug
argument_list|(
literal|"Skipping existing node "
operator|+
name|nodeInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
comment|// create new with given uuid
name|tree
operator|=
name|createTree
argument_list|(
name|parent
argument_list|,
name|nodeInfo
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// process properties
for|for
control|(
name|PropInfo
name|pi
range|:
name|propInfos
control|)
block|{
comment|// find applicable definition
comment|//TODO find better heuristics?
name|PropertyDefinition
name|def
init|=
name|pi
operator|.
name|getPropertyDef
argument_list|(
name|effectiveNodeTypeProvider
operator|.
name|getEffectiveNodeType
argument_list|(
name|tree
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|def
operator|.
name|isProtected
argument_list|()
condition|)
block|{
comment|// skip protected property
name|log
operator|.
name|debug
argument_list|(
literal|"Skipping protected property "
operator|+
name|pi
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// notify the ProtectedPropertyImporter.
for|for
control|(
name|ProtectedItemImporter
name|ppi
range|:
name|pItemImporters
control|)
block|{
if|if
condition|(
name|ppi
operator|instanceof
name|ProtectedPropertyImporter
operator|&&
operator|(
operator|(
name|ProtectedPropertyImporter
operator|)
name|ppi
operator|)
operator|.
name|handlePropInfo
argument_list|(
name|tree
argument_list|,
name|pi
argument_list|,
name|def
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Protected property -> delegated to ProtectedPropertyImporter"
argument_list|)
expr_stmt|;
break|break;
block|}
comment|/* else: p-i-Importer isn't able to deal with this property.                              try next pp-importer */
block|}
block|}
else|else
block|{
comment|// regular property -> create the property
name|createProperty
argument_list|(
name|tree
argument_list|,
name|pi
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
block|}
name|parents
operator|.
name|push
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endNode
parameter_list|(
name|NodeInfo
name|nodeInfo
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|parent
init|=
name|parents
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|pnImporter
operator|!=
literal|null
condition|)
block|{
name|pnImporter
operator|.
name|endChildInfo
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|getDefinition
argument_list|(
name|parent
argument_list|)
operator|.
name|isProtected
argument_list|()
condition|)
block|{
if|if
condition|(
name|pnImporter
operator|!=
literal|null
condition|)
block|{
name|pnImporter
operator|.
name|end
argument_list|(
name|parent
argument_list|)
expr_stmt|;
comment|// and reset the pnImporter field waiting for the next protected
comment|// parent -> selecting again from available importers
name|pnImporter
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|end
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|/**          * adjust references that refer to uuids which have been mapped to          * newly generated uuids on import          */
comment|// 1. let protected property/node importers handle protected ref-properties
comment|//    and (protected) properties underneath a protected parent node.
for|for
control|(
name|ProtectedItemImporter
name|ppi
range|:
name|pItemImporters
control|)
block|{
name|ppi
operator|.
name|processReferences
argument_list|()
expr_stmt|;
block|}
comment|// 2. regular non-protected properties.
name|Iterator
argument_list|<
name|Object
argument_list|>
name|iter
init|=
name|refTracker
operator|.
name|getProcessedReferences
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|ref
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ref
operator|instanceof
name|Reference
operator|)
condition|)
block|{
continue|continue;
block|}
name|Reference
name|reference
init|=
operator|(
name|Reference
operator|)
name|ref
decl_stmt|;
if|if
condition|(
name|reference
operator|.
name|isMultiple
argument_list|()
condition|)
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|values
init|=
name|reference
operator|.
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|newValues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|original
range|:
name|values
control|)
block|{
name|String
name|adjusted
init|=
name|refTracker
operator|.
name|get
argument_list|(
name|original
argument_list|)
decl_stmt|;
if|if
condition|(
name|adjusted
operator|!=
literal|null
condition|)
block|{
name|newValues
operator|.
name|add
argument_list|(
name|adjusted
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// reference doesn't need adjusting, just copy old value
name|newValues
operator|.
name|add
argument_list|(
name|original
argument_list|)
expr_stmt|;
block|}
block|}
name|reference
operator|.
name|setProperty
argument_list|(
name|newValues
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|original
init|=
name|reference
operator|.
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|String
name|adjusted
init|=
name|refTracker
operator|.
name|get
argument_list|(
name|original
argument_list|)
decl_stmt|;
if|if
condition|(
name|adjusted
operator|!=
literal|null
condition|)
block|{
name|reference
operator|.
name|setProperty
argument_list|(
name|adjusted
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|refTracker
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|isNodeType
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|String
name|ntName
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|effectiveNodeTypeProvider
operator|.
name|isNodeType
argument_list|(
name|tree
argument_list|,
name|ntName
argument_list|)
return|;
block|}
specifier|private
name|NodeDefinition
name|getDefinition
parameter_list|(
name|Tree
name|tree
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|tree
operator|.
name|isRoot
argument_list|()
condition|)
block|{
return|return
name|definitionProvider
operator|.
name|getRootDefinition
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|definitionProvider
operator|.
name|getDefinition
argument_list|(
name|tree
operator|.
name|getParent
argument_list|()
argument_list|,
name|tree
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|Reference
block|{
specifier|private
specifier|final
name|Tree
name|tree
decl_stmt|;
specifier|private
specifier|final
name|PropertyState
name|property
decl_stmt|;
specifier|private
name|Reference
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
name|this
operator|.
name|tree
operator|=
name|tree
expr_stmt|;
name|this
operator|.
name|property
operator|=
name|tree
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isMultiple
parameter_list|()
block|{
return|return
name|property
operator|.
name|isArray
argument_list|()
return|;
block|}
specifier|private
name|void
name|setProperty
parameter_list|(
name|String
name|newValue
parameter_list|)
block|{
name|PropertyState
name|prop
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|,
name|newValue
argument_list|,
name|property
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
argument_list|)
decl_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setProperty
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|newValues
parameter_list|)
block|{
name|PropertyState
name|prop
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|,
name|newValues
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

