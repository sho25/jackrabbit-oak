begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|ModifiedNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|AbstractNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ApplyDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|EqualsDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateDiff
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_comment
comment|/**  * A node state based on a {@link DocumentNodeState} with some modifications  * applied on top of it represented by {@link #modified}. This node state is  * a thin wrapper around {@link #modified} and creates a new {@link NodeBuilder}  * connected to the {@link #branch} on {@link #builder()}.  */
end_comment

begin_class
class|class
name|ModifiedDocumentNodeState
extends|extends
name|AbstractNodeState
block|{
specifier|private
specifier|final
name|DocumentNodeStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|DocumentNodeStoreBranch
name|branch
decl_stmt|;
specifier|private
specifier|final
name|DocumentNodeState
name|base
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|modified
decl_stmt|;
name|ModifiedDocumentNodeState
parameter_list|(
annotation|@
name|Nonnull
name|DocumentNodeStore
name|store
parameter_list|,
annotation|@
name|Nonnull
name|DocumentNodeStoreBranch
name|branch
parameter_list|,
annotation|@
name|Nonnull
name|DocumentNodeState
name|base
parameter_list|,
annotation|@
name|Nonnull
name|NodeState
name|modified
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|checkNotNull
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|this
operator|.
name|branch
operator|=
name|checkNotNull
argument_list|(
name|branch
argument_list|)
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|checkNotNull
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|this
operator|.
name|modified
operator|=
name|checkNotNull
argument_list|(
name|modified
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
name|modified
operator|.
name|exists
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|modified
operator|.
name|getProperties
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasChildNode
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
block|{
return|return
name|modified
operator|.
name|hasChildNode
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
name|modified
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|()
block|{
return|return
name|modified
operator|.
name|getChildNodeEntries
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeBuilder
name|builder
parameter_list|()
block|{
name|NodeBuilder
name|builder
init|=
operator|new
name|DocumentRootBuilder
argument_list|(
name|base
argument_list|,
name|store
argument_list|,
name|branch
argument_list|)
decl_stmt|;
name|modified
operator|.
name|compareAgainstBaseState
argument_list|(
name|base
argument_list|,
operator|new
name|ApplyDiff
argument_list|(
name|builder
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|that
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|that
operator|instanceof
name|AbstractDocumentNodeState
condition|)
block|{
name|AbstractDocumentNodeState
name|other
init|=
operator|(
name|AbstractDocumentNodeState
operator|)
name|that
decl_stmt|;
if|if
condition|(
operator|!
name|base
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
comment|// path does not match: not equals
comment|// (even if the properties are equal)
return|return
literal|false
return|;
block|}
if|if
condition|(
name|revisionEquals
argument_list|(
name|base
argument_list|,
name|other
argument_list|)
condition|)
block|{
comment|// other is equal to our base state
comment|// perform an equals diff with base and modified
return|return
name|EqualsDiff
operator|.
name|equals
argument_list|(
name|base
argument_list|,
name|modified
argument_list|)
return|;
block|}
comment|// revision does not match: might still be equals
block|}
elseif|else
if|if
condition|(
name|that
operator|instanceof
name|ModifiedNodeState
condition|)
block|{
name|ModifiedNodeState
name|modified
init|=
operator|(
name|ModifiedNodeState
operator|)
name|that
decl_stmt|;
if|if
condition|(
name|modified
operator|.
name|getBaseState
argument_list|()
operator|==
name|base
condition|)
block|{
comment|// base states are the same, compare the modified
return|return
name|EqualsDiff
operator|.
name|equals
argument_list|(
name|this
operator|.
name|modified
argument_list|,
name|modified
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|that
operator|instanceof
name|NodeState
condition|)
block|{
return|return
name|AbstractNodeState
operator|.
name|equals
argument_list|(
name|modified
argument_list|,
operator|(
name|NodeState
operator|)
name|that
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|compareAgainstBaseState
parameter_list|(
name|NodeState
name|base
parameter_list|,
name|NodeStateDiff
name|diff
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|base
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|base
operator|==
name|EMPTY_NODE
operator|||
operator|!
name|base
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// special case
return|return
name|EmptyNodeState
operator|.
name|compareAgainstEmptyState
argument_list|(
name|this
argument_list|,
name|diff
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|base
operator|==
name|base
condition|)
block|{
return|return
name|modified
operator|.
name|compareAgainstBaseState
argument_list|(
name|this
operator|.
name|base
argument_list|,
name|diff
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|base
operator|instanceof
name|AbstractDocumentNodeState
condition|)
block|{
name|AbstractDocumentNodeState
name|other
init|=
operator|(
name|AbstractDocumentNodeState
operator|)
name|base
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|base
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|revisionEquals
argument_list|(
name|this
operator|.
name|base
argument_list|,
name|other
argument_list|)
condition|)
block|{
return|return
name|modified
operator|.
name|compareAgainstBaseState
argument_list|(
name|this
operator|.
name|base
argument_list|,
name|diff
argument_list|)
return|;
block|}
block|}
block|}
comment|// fall back to the generic node state diff algorithm
return|return
name|super
operator|.
name|compareAgainstBaseState
argument_list|(
name|base
argument_list|,
name|diff
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|revisionEquals
parameter_list|(
name|AbstractDocumentNodeState
name|a
parameter_list|,
name|AbstractDocumentNodeState
name|b
parameter_list|)
block|{
name|RevisionVector
name|rv1
init|=
name|a
operator|.
name|getLastRevision
argument_list|()
decl_stmt|;
name|rv1
operator|=
name|rv1
operator|!=
literal|null
condition|?
name|rv1
operator|.
name|asTrunkRevision
argument_list|()
else|:
literal|null
expr_stmt|;
name|RevisionVector
name|rv2
init|=
name|b
operator|.
name|getLastRevision
argument_list|()
decl_stmt|;
name|rv2
operator|=
name|rv2
operator|!=
literal|null
condition|?
name|rv2
operator|.
name|asTrunkRevision
argument_list|()
else|:
literal|null
expr_stmt|;
return|return
name|rv1
operator|!=
literal|null
operator|&&
name|rv1
operator|.
name|equals
argument_list|(
name|rv2
argument_list|)
return|;
block|}
block|}
end_class

end_unit

