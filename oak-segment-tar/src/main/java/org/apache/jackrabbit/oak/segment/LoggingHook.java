begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BINARIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BINARY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRINGS
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|util
operator|.
name|SafeEncode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_class
specifier|public
class|class
name|LoggingHook
implements|implements
name|CommitHook
implements|,
name|NodeStateDiff
block|{
specifier|private
specifier|final
name|Consumer
argument_list|<
name|String
argument_list|>
name|writer
decl_stmt|;
specifier|private
name|LoggingHook
parameter_list|(
specifier|final
name|Consumer
argument_list|<
name|String
argument_list|>
name|writer
parameter_list|)
block|{
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
block|}
specifier|static
name|LoggingHook
name|newLoggingHook
parameter_list|(
specifier|final
name|Consumer
argument_list|<
name|String
argument_list|>
name|writer
parameter_list|)
block|{
return|return
operator|new
name|LoggingHook
argument_list|(
name|writer
argument_list|)
return|;
block|}
specifier|public
name|void
name|enter
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
comment|// do nothing
block|}
specifier|public
name|void
name|leave
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|writer
operator|.
name|accept
argument_list|(
literal|"n!"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
name|writer
operator|.
name|accept
argument_list|(
literal|"p+ "
operator|+
name|toString
argument_list|(
name|after
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|writer
operator|.
name|accept
argument_list|(
literal|"p^ "
operator|+
name|toString
argument_list|(
name|after
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
name|writer
operator|.
name|accept
argument_list|(
literal|"p- "
operator|+
name|toString
argument_list|(
name|before
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|String
name|safeEncode
parameter_list|(
name|String
name|value
parameter_list|)
block|{
try|try
block|{
return|return
name|SafeEncode
operator|.
name|safeEncode
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
return|return
literal|"ERROR: "
operator|+
name|e
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|writer
operator|.
name|accept
argument_list|(
literal|"n+ "
operator|+
name|safeEncode
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|enter
argument_list|(
literal|null
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|EmptyNodeState
operator|.
name|EMPTY_NODE
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|this
operator|.
name|leave
argument_list|(
literal|null
argument_list|,
name|after
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|writer
operator|.
name|accept
argument_list|(
literal|"n^ "
operator|+
name|safeEncode
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|enter
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|this
operator|.
name|leave
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
name|writer
operator|.
name|accept
argument_list|(
literal|"n- "
operator|+
name|safeEncode
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|String
name|toString
parameter_list|(
specifier|final
name|PropertyState
name|ps
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|val
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// TODO: an output stream would certainly be better
name|val
operator|.
name|append
argument_list|(
name|safeEncode
argument_list|(
name|ps
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|val
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|val
operator|.
name|append
argument_list|(
name|ps
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|val
operator|.
name|append
argument_list|(
literal|"> "
argument_list|)
expr_stmt|;
if|if
condition|(
name|ps
operator|.
name|getType
argument_list|()
operator|==
name|BINARY
condition|)
block|{
name|val
operator|.
name|append
argument_list|(
literal|"= "
argument_list|)
expr_stmt|;
specifier|final
name|Blob
name|blob
init|=
name|ps
operator|.
name|getValue
argument_list|(
name|BINARY
argument_list|)
decl_stmt|;
name|appendBlob
argument_list|(
name|val
argument_list|,
name|blob
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ps
operator|.
name|getType
argument_list|()
operator|==
name|BINARIES
condition|)
block|{
name|val
operator|.
name|append
argument_list|(
literal|"= ["
argument_list|)
expr_stmt|;
name|ps
operator|.
name|getValue
argument_list|(
name|BINARIES
argument_list|)
operator|.
name|forEach
argument_list|(
parameter_list|(
name|Blob
name|b
parameter_list|)
lambda|->
block|{
name|appendBlob
argument_list|(
name|val
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|val
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|replaceOrAppendLastChar
argument_list|(
name|val
argument_list|,
literal|','
argument_list|,
literal|']'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ps
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|val
operator|.
name|append
argument_list|(
literal|"= ["
argument_list|)
expr_stmt|;
name|ps
operator|.
name|getValue
argument_list|(
name|STRINGS
argument_list|)
operator|.
name|forEach
argument_list|(
parameter_list|(
name|String
name|s
parameter_list|)
lambda|->
block|{
name|val
operator|.
name|append
argument_list|(
name|safeEncode
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|val
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|replaceOrAppendLastChar
argument_list|(
name|val
argument_list|,
literal|','
argument_list|,
literal|']'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|val
operator|.
name|append
argument_list|(
literal|"= "
argument_list|)
operator|.
name|append
argument_list|(
name|safeEncode
argument_list|(
name|ps
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|val
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|replaceOrAppendLastChar
parameter_list|(
name|StringBuilder
name|b
parameter_list|,
name|char
name|oldChar
parameter_list|,
name|char
name|newChar
parameter_list|)
block|{
if|if
condition|(
name|b
operator|.
name|charAt
argument_list|(
name|b
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
name|oldChar
condition|)
block|{
name|b
operator|.
name|setCharAt
argument_list|(
name|b
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|,
name|newChar
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
name|newChar
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|appendBlob
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|Blob
name|blob
parameter_list|)
block|{
specifier|final
name|InputStream
name|is
init|=
name|blob
operator|.
name|getNewStream
argument_list|()
decl_stmt|;
specifier|final
name|char
index|[]
name|hex
init|=
literal|"0123456789ABCDEF"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|b
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|b
operator|=
name|is
operator|.
name|read
argument_list|()
operator|)
operator|>=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|hex
index|[
name|b
operator|>>
literal|4
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|hex
index|[
name|b
operator|&
literal|0x0f
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|NodeState
name|processCommit
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
name|this
operator|.
name|enter
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|leave
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
return|return
name|after
return|;
block|}
block|}
end_class

end_unit

