begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * MoveTrackerTest... TODO  */
end_comment

begin_class
specifier|public
class|class
name|MoveTrackerTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testIsEmpty
parameter_list|()
block|{
name|assertTrue
argument_list|(
operator|new
name|MoveTracker
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * 1.>/a:/b>/c:/d     =>/c:/d>/a:b      * See http://svn.apache.org/viewvc/jackrabbit/sandbox/jackrabbit-microkernel/src/main/java/org/apache/jackrabbit/state/ChangeLog.java?view=markup      * Line 222      */
annotation|@
name|Test
specifier|public
name|void
name|test1
parameter_list|()
block|{
name|MoveTracker
name|mt
init|=
operator|new
name|MoveTracker
argument_list|()
decl_stmt|;
name|mt
operator|.
name|addMove
argument_list|(
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
expr_stmt|;
name|mt
operator|.
name|addMove
argument_list|(
literal|"/c"
argument_list|,
literal|"/d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a"
argument_list|,
name|mt
operator|.
name|getSourcePath
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/c"
argument_list|,
name|mt
operator|.
name|getSourcePath
argument_list|(
literal|"/d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/b"
argument_list|,
name|mt
operator|.
name|getDestPath
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/d"
argument_list|,
name|mt
operator|.
name|getDestPath
argument_list|(
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * 4.>/a/b:/c>/a:/d   =>/a:/d>/d/b:/c      * See http://svn.apache.org/viewvc/jackrabbit/sandbox/jackrabbit-microkernel/src/main/java/org/apache/jackrabbit/state/ChangeLog.java?view=markup      * Line 225      */
annotation|@
name|Test
specifier|public
name|void
name|test4
parameter_list|()
block|{
name|MoveTracker
name|mt1
init|=
operator|new
name|MoveTracker
argument_list|()
decl_stmt|;
name|mt1
operator|.
name|addMove
argument_list|(
literal|"/a/b"
argument_list|,
literal|"/c"
argument_list|)
expr_stmt|;
name|mt1
operator|.
name|addMove
argument_list|(
literal|"/a"
argument_list|,
literal|"/d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b"
argument_list|,
name|mt1
operator|.
name|getSourcePath
argument_list|(
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a"
argument_list|,
name|mt1
operator|.
name|getSourcePath
argument_list|(
literal|"/d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/c"
argument_list|,
name|mt1
operator|.
name|getDestPath
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/d"
argument_list|,
name|mt1
operator|.
name|getDestPath
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * 4.>/a/b:/c>/a:/c/d    does not commute  (q< s)      * See http://svn.apache.org/viewvc/jackrabbit/sandbox/jackrabbit-microkernel/src/main/java/org/apache/jackrabbit/state/ChangeLog.java?view=markup      * Line 226      */
annotation|@
name|Test
specifier|public
name|void
name|test4a
parameter_list|()
block|{
name|MoveTracker
name|mt2
init|=
operator|new
name|MoveTracker
argument_list|()
decl_stmt|;
name|mt2
operator|.
name|addMove
argument_list|(
literal|"/a/b"
argument_list|,
literal|"/c"
argument_list|)
expr_stmt|;
name|mt2
operator|.
name|addMove
argument_list|(
literal|"/a"
argument_list|,
literal|"/c/d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b"
argument_list|,
name|mt2
operator|.
name|getSourcePath
argument_list|(
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a"
argument_list|,
name|mt2
operator|.
name|getSourcePath
argument_list|(
literal|"/c/d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/c"
argument_list|,
name|mt2
operator|.
name|getDestPath
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/c/d"
argument_list|,
name|mt2
operator|.
name|getDestPath
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * 7.>/a:/b>/c:/a        does not commute      * See http://svn.apache.org/viewvc/jackrabbit/sandbox/jackrabbit-microkernel/src/main/java/org/apache/jackrabbit/state/ChangeLog.java?view=markup      * Line 231      */
annotation|@
name|Test
specifier|public
name|void
name|test7
parameter_list|()
block|{
name|MoveTracker
name|mt3
init|=
operator|new
name|MoveTracker
argument_list|()
decl_stmt|;
name|mt3
operator|.
name|addMove
argument_list|(
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
expr_stmt|;
name|mt3
operator|.
name|addMove
argument_list|(
literal|"/c"
argument_list|,
literal|"/a"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a"
argument_list|,
name|mt3
operator|.
name|getSourcePath
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/c"
argument_list|,
name|mt3
operator|.
name|getSourcePath
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/b"
argument_list|,
name|mt3
operator|.
name|getDestPath
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a"
argument_list|,
name|mt3
operator|.
name|getDestPath
argument_list|(
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * 10.>/a:/b>/b/c:/d   =>/a/c:/d>/a:/b      * See http://svn.apache.org/viewvc/jackrabbit/sandbox/jackrabbit-microkernel/src/main/java/org/apache/jackrabbit/state/ChangeLog.java?view=markup      * Line 234      */
annotation|@
name|Test
specifier|public
name|void
name|test10
parameter_list|()
block|{
name|MoveTracker
name|mt
init|=
operator|new
name|MoveTracker
argument_list|()
decl_stmt|;
name|mt
operator|.
name|addMove
argument_list|(
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
expr_stmt|;
name|mt
operator|.
name|addMove
argument_list|(
literal|"/b/c"
argument_list|,
literal|"/d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a"
argument_list|,
name|mt
operator|.
name|getSourcePath
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/c"
argument_list|,
name|mt
operator|.
name|getSourcePath
argument_list|(
literal|"/d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/b"
argument_list|,
name|mt
operator|.
name|getDestPath
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/d"
argument_list|,
name|mt
operator|.
name|getDestPath
argument_list|(
literal|"/a/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * 11.>/a:/b>/b:/c     =>/a:/c      * See http://svn.apache.org/viewvc/jackrabbit/sandbox/jackrabbit-microkernel/src/main/java/org/apache/jackrabbit/state/ChangeLog.java?view=markup      * Line 236      */
annotation|@
name|Test
specifier|public
name|void
name|test11
parameter_list|()
block|{
name|MoveTracker
name|mt
init|=
operator|new
name|MoveTracker
argument_list|()
decl_stmt|;
name|mt
operator|.
name|addMove
argument_list|(
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
expr_stmt|;
name|mt
operator|.
name|addMove
argument_list|(
literal|"/b"
argument_list|,
literal|"/c"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a"
argument_list|,
name|mt
operator|.
name|getSourcePath
argument_list|(
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/c"
argument_list|,
name|mt
operator|.
name|getDestPath
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * 12.>/a:/b/c>/b:/d   =>/b:/d>/a:/d/c      * See http://svn.apache.org/viewvc/jackrabbit/sandbox/jackrabbit-microkernel/src/main/java/org/apache/jackrabbit/state/ChangeLog.java?view=markup      * Line 237      */
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Known Limitation of OAK-710"
argument_list|)
specifier|public
name|void
name|test12
parameter_list|()
block|{
name|MoveTracker
name|mt4
init|=
operator|new
name|MoveTracker
argument_list|()
decl_stmt|;
name|mt4
operator|.
name|addMove
argument_list|(
literal|"/a"
argument_list|,
literal|"/b/c"
argument_list|)
expr_stmt|;
name|mt4
operator|.
name|addMove
argument_list|(
literal|"/b"
argument_list|,
literal|"/d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a"
argument_list|,
name|mt4
operator|.
name|getSourcePath
argument_list|(
literal|"/d/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/b"
argument_list|,
name|mt4
operator|.
name|getSourcePath
argument_list|(
literal|"/d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/d/c"
argument_list|,
name|mt4
operator|.
name|getDestPath
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/d"
argument_list|,
name|mt4
operator|.
name|getDestPath
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * 14.>/a:/b>/c:/b/d   =>/c:/a/d>/a:/b      * See http://svn.apache.org/viewvc/jackrabbit/sandbox/jackrabbit-microkernel/src/main/java/org/apache/jackrabbit/state/ChangeLog.java?view=markup      * Line 240      */
annotation|@
name|Test
specifier|public
name|void
name|test14
parameter_list|()
block|{
name|MoveTracker
name|mt5
init|=
operator|new
name|MoveTracker
argument_list|()
decl_stmt|;
name|mt5
operator|.
name|addMove
argument_list|(
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
expr_stmt|;
name|mt5
operator|.
name|addMove
argument_list|(
literal|"/c"
argument_list|,
literal|"/b/d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a"
argument_list|,
name|mt5
operator|.
name|getSourcePath
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/c"
argument_list|,
name|mt5
operator|.
name|getSourcePath
argument_list|(
literal|"/b/d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/b"
argument_list|,
name|mt5
operator|.
name|getDestPath
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/b/d"
argument_list|,
name|mt5
operator|.
name|getDestPath
argument_list|(
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * 14.>/a/b:/b>/a:/b/d    does not commute  (p> r)      * See http://svn.apache.org/viewvc/jackrabbit/sandbox/jackrabbit-microkernel/src/main/java/org/apache/jackrabbit/state/ChangeLog.java?view=markup      * Line 241      */
annotation|@
name|Test
specifier|public
name|void
name|test14a
parameter_list|()
block|{
name|MoveTracker
name|mt6
init|=
operator|new
name|MoveTracker
argument_list|()
decl_stmt|;
name|mt6
operator|.
name|addMove
argument_list|(
literal|"/a/b"
argument_list|,
literal|"/b"
argument_list|)
expr_stmt|;
name|mt6
operator|.
name|addMove
argument_list|(
literal|"/a"
argument_list|,
literal|"/b/d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b"
argument_list|,
name|mt6
operator|.
name|getSourcePath
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a"
argument_list|,
name|mt6
operator|.
name|getSourcePath
argument_list|(
literal|"/b/d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/b"
argument_list|,
name|mt6
operator|.
name|getDestPath
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/b/d"
argument_list|,
name|mt6
operator|.
name|getDestPath
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotEmpty
parameter_list|()
block|{
name|MoveTracker
name|mt
init|=
operator|new
name|MoveTracker
argument_list|()
decl_stmt|;
name|mt
operator|.
name|addMove
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"/d/e/f"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mt
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleMove
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|moves
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"/d/e/f"
argument_list|,
literal|"/aa/bb/cc"
argument_list|,
literal|"/aa/f/cc"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|src
range|:
name|moves
operator|.
name|keySet
argument_list|()
control|)
block|{
name|MoveTracker
name|mt
init|=
operator|new
name|MoveTracker
argument_list|()
decl_stmt|;
name|String
name|dest
init|=
name|moves
operator|.
name|get
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|mt
operator|.
name|addMove
argument_list|(
name|src
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|src
argument_list|,
name|mt
operator|.
name|getSourcePath
argument_list|(
name|dest
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dest
argument_list|,
name|mt
operator|.
name|getDestPath
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIndependantMoves
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"/d/e/f"
argument_list|,
literal|"/aa/bb/cc"
argument_list|,
literal|"/aa/f/cc"
argument_list|)
decl_stmt|;
name|MoveTracker
name|mt
init|=
operator|new
name|MoveTracker
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|src
range|:
name|m
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|dest
init|=
name|m
operator|.
name|get
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|mt
operator|.
name|addMove
argument_list|(
name|src
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|src
range|:
name|m
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|dest
init|=
name|m
operator|.
name|get
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|src
argument_list|,
name|mt
operator|.
name|getSourcePath
argument_list|(
name|dest
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dest
argument_list|,
name|mt
operator|.
name|getDestPath
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Existing tree structure:      *      * - /a/b/c/d/e      * - /a/f      *      * Moves:      * - /a/b/c    -> /a/f/c      * - /a/f/c/d  -> /a/b/d      * - /a/b/d/e  -> /a/f/c/e      * - /a/f/c    -> /a/b/c      *      * Expected mapping original-source vs destination:      * - "/a/b/c"     -> "/a/f/c"      * - "/a/b/c/d"   -> "/a/b/d"      * - "/a/b/c/d/e" -> "/a/f/c/e"      */
annotation|@
name|Test
specifier|public
name|void
name|testMultiMove
parameter_list|()
block|{
name|MoveTest
name|test
init|=
operator|new
name|MoveTest
argument_list|()
operator|.
name|addMove
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"/a/f/c"
argument_list|,
literal|"/a/b/c"
argument_list|)
operator|.
name|addMove
argument_list|(
literal|"/a/f/c/d"
argument_list|,
literal|"/a/b/d"
argument_list|,
literal|"/a/b/c/d"
argument_list|)
operator|.
name|addMove
argument_list|(
literal|"/a/b/d/e"
argument_list|,
literal|"/a/f/c/e"
argument_list|,
literal|"/a/b/c/d/e"
argument_list|)
decl_stmt|;
name|test
operator|.
name|assertResult
argument_list|()
expr_stmt|;
block|}
comment|/**      * Existing tree structure:      *      * - /a/b/c/d/e      * - /a/f      *      * Moves:      * - /a/b/c    -> /a/f/c      * - /a/f/c/d  -> /a/b/d      * - /a/b/d/e  -> /a/f/c/e      * - /a/f/c/e  -> /a/f/e      *      * Expected mapping original-source vs destination:      * - "/a/b/c"     -> "/a/f/c"      * - "/a/b/c/d"   -> "/a/b/d"      * - "/a/b/c/d/e" -> "/a/f/e"      */
annotation|@
name|Test
specifier|public
name|void
name|testMultiMove2
parameter_list|()
block|{
name|MoveTest
name|test
init|=
operator|new
name|MoveTest
argument_list|()
operator|.
name|addMove
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"/a/f/c"
argument_list|,
literal|"/a/b/c"
argument_list|)
operator|.
name|addMove
argument_list|(
literal|"/a/f/c/d"
argument_list|,
literal|"/a/b/d"
argument_list|,
literal|"/a/b/c/d"
argument_list|)
operator|.
name|addMove
argument_list|(
literal|"/a/b/d/e"
argument_list|,
literal|"/a/f/c/e"
argument_list|,
literal|"/a/b/c/d/e"
argument_list|)
operator|.
name|addMove
argument_list|(
literal|"/a/f/c/e"
argument_list|,
literal|"/a/f/e"
argument_list|,
literal|"/a/b/c/d/e"
argument_list|)
decl_stmt|;
name|test
operator|.
name|assertResult
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiMove3
parameter_list|()
block|{
name|MoveTest
name|test
init|=
operator|new
name|MoveTest
argument_list|()
operator|.
name|addMove
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"/a/f/c"
argument_list|,
literal|"/a/b/c"
argument_list|)
operator|.
name|addMove
argument_list|(
literal|"/a/f/c/d"
argument_list|,
literal|"/a/b/d"
argument_list|,
literal|"/a/b/c/d"
argument_list|)
operator|.
name|addMove
argument_list|(
literal|"/a/b/d/e"
argument_list|,
literal|"/a/f/c/e"
argument_list|,
literal|"/a/b/c/d/e"
argument_list|)
comment|// move 'e' and rename it to 'c' -> replacing '/a/b/c'
operator|.
name|addMove
argument_list|(
literal|"/a/f/c/e"
argument_list|,
literal|"/a/b/c"
argument_list|,
literal|"/a/b/c/d/e"
argument_list|)
decl_stmt|;
name|test
operator|.
name|assertResult
argument_list|()
expr_stmt|;
comment|// move the 'd' node to the renamed 'e' node at '/a/b/c'.
name|test
operator|.
name|addMove
argument_list|(
literal|"/a/b/d"
argument_list|,
literal|"/a/b/c/d"
argument_list|,
literal|"/a/b/c/d"
argument_list|)
expr_stmt|;
name|test
operator|.
name|assertResult
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiMove4
parameter_list|()
block|{
name|MoveTest
name|test
init|=
operator|new
name|MoveTest
argument_list|()
operator|.
name|addMove
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"/a/f/c"
argument_list|,
literal|"/a/b/c"
argument_list|)
operator|.
name|addMove
argument_list|(
literal|"/a/f/c/d"
argument_list|,
literal|"/a/b/d"
argument_list|,
literal|"/a/b/c/d"
argument_list|)
operator|.
name|addMove
argument_list|(
literal|"/a/b/d/e"
argument_list|,
literal|"/a/f/c/e"
argument_list|,
literal|"/a/b/c/d/e"
argument_list|)
comment|// move 'c' to '/a/b/d/' and rename it to 'e'
operator|.
name|addMove
argument_list|(
literal|"/a/f/c"
argument_list|,
literal|"/a/b/d/e"
argument_list|,
literal|"/a/b/c"
argument_list|)
decl_stmt|;
name|test
operator|.
name|assertResult
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiMoveIncludingNewNodes
parameter_list|()
block|{
name|MoveTest
name|test
init|=
operator|new
name|MoveTest
argument_list|()
operator|.
name|addMove
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"/a/f/c"
argument_list|,
literal|"/a/b/c"
argument_list|)
operator|.
name|addMove
argument_list|(
literal|"/a/f/c/d"
argument_list|,
literal|"/a/b/d"
argument_list|,
literal|"/a/b/c/d"
argument_list|)
operator|.
name|addMove
argument_list|(
literal|"/a/b/d/e"
argument_list|,
literal|"/a/f/c/e"
argument_list|,
literal|"/a/b/c/d/e"
argument_list|)
comment|// assume /a/b/c and /a/b/c/d have been recreated again (NEW nodes)
comment|// move 'e' to the new structure -> 'original' setup path wise
operator|.
name|addMove
argument_list|(
literal|"/a/b/d/e"
argument_list|,
literal|"/a/b/c/d/e"
argument_list|,
literal|"/a/b/c/d/e"
argument_list|)
decl_stmt|;
name|test
operator|.
name|assertResult
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|MoveTest
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|src2dest
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dest2orig
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|orig2dest
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|MoveTracker
name|mt
init|=
operator|new
name|MoveTracker
argument_list|()
decl_stmt|;
name|MoveTest
name|addMove
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|,
name|String
name|originalSrc
parameter_list|)
block|{
name|src2dest
operator|.
name|put
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
name|dest2orig
operator|.
name|put
argument_list|(
name|dst
argument_list|,
name|originalSrc
argument_list|)
expr_stmt|;
name|orig2dest
operator|.
name|put
argument_list|(
name|originalSrc
argument_list|,
name|dst
argument_list|)
expr_stmt|;
name|mt
operator|.
name|addMove
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|void
name|assertResult
parameter_list|()
block|{
comment|// map destination -> original path
for|for
control|(
name|String
name|dest
range|:
name|src2dest
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|expectedOrgSource
init|=
name|dest2orig
operator|.
name|get
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedOrgSource
argument_list|,
name|mt
operator|.
name|getSourcePath
argument_list|(
name|dest
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// map original path -> destination
for|for
control|(
name|String
name|original
range|:
name|orig2dest
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|orig2dest
operator|.
name|get
argument_list|(
name|original
argument_list|)
argument_list|,
name|mt
operator|.
name|getDestPath
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

