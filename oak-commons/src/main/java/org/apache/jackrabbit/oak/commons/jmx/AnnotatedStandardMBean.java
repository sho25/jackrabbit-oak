begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|DescriptorRead
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanAttributeInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanOperationInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanParameterInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|StandardMBean
import|;
end_import

begin_comment
comment|/**  * The extension of {@link javax.management.StandardMBean} that will automatically provide JMX  * metadata through annotations.  *  * @see javax.management.MBeanInfo  * @see Description  * @see Name  * @see Impact  */
end_comment

begin_class
specifier|public
class|class
name|AnnotatedStandardMBean
extends|extends
name|StandardMBean
block|{
comment|/**      * Make a DynamicMBean out of the object implementation, using the specified      * mbeanInterface class.      *      * @see {@link javax.management.StandardMBean#StandardMBean(Object, Class)}      */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|AnnotatedStandardMBean
parameter_list|(
name|T
name|implementation
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|mbeanInterface
parameter_list|)
block|{
name|super
argument_list|(
name|implementation
argument_list|,
name|mbeanInterface
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|AnnotatedStandardMBean
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|mbeanInterface
parameter_list|)
block|{
name|super
argument_list|(
name|mbeanInterface
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getDescription
parameter_list|(
name|MBeanInfo
name|info
parameter_list|)
block|{
name|String
name|desc
init|=
name|getValue
argument_list|(
name|info
argument_list|,
name|Description
operator|.
name|NAME
argument_list|)
decl_stmt|;
return|return
name|desc
operator|==
literal|null
condition|?
name|super
operator|.
name|getDescription
argument_list|(
name|info
argument_list|)
else|:
name|desc
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getDescription
parameter_list|(
name|MBeanAttributeInfo
name|info
parameter_list|)
block|{
name|String
name|desc
init|=
name|getValue
argument_list|(
name|info
argument_list|,
name|Description
operator|.
name|NAME
argument_list|)
decl_stmt|;
return|return
name|desc
operator|==
literal|null
condition|?
name|super
operator|.
name|getDescription
argument_list|(
name|info
argument_list|)
else|:
name|desc
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getDescription
parameter_list|(
name|MBeanOperationInfo
name|info
parameter_list|)
block|{
name|String
name|desc
init|=
name|getValue
argument_list|(
name|info
argument_list|,
name|Description
operator|.
name|NAME
argument_list|)
decl_stmt|;
return|return
name|desc
operator|==
literal|null
condition|?
name|super
operator|.
name|getDescription
argument_list|(
name|info
argument_list|)
else|:
name|desc
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getImpact
parameter_list|(
name|MBeanOperationInfo
name|info
parameter_list|)
block|{
name|String
name|opt
init|=
name|getValue
argument_list|(
name|info
argument_list|,
name|Impact
operator|.
name|NAME
argument_list|)
decl_stmt|;
return|return
name|opt
operator|==
literal|null
condition|?
name|super
operator|.
name|getImpact
argument_list|(
name|info
argument_list|)
else|:
name|ImpactOption
operator|.
name|valueOf
argument_list|(
name|opt
argument_list|)
operator|.
name|value
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getParameterName
parameter_list|(
name|MBeanOperationInfo
name|op
parameter_list|,
name|MBeanParameterInfo
name|param
parameter_list|,
name|int
name|sequence
parameter_list|)
block|{
name|String
name|name
init|=
name|getValue
argument_list|(
name|param
argument_list|,
name|Name
operator|.
name|NAME
argument_list|)
decl_stmt|;
return|return
name|name
operator|==
literal|null
condition|?
name|super
operator|.
name|getParameterName
argument_list|(
name|op
argument_list|,
name|param
argument_list|,
name|sequence
argument_list|)
else|:
name|name
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getDescription
parameter_list|(
name|MBeanOperationInfo
name|op
parameter_list|,
name|MBeanParameterInfo
name|param
parameter_list|,
name|int
name|sequence
parameter_list|)
block|{
name|String
name|desc
init|=
name|getValue
argument_list|(
name|param
argument_list|,
name|Description
operator|.
name|NAME
argument_list|)
decl_stmt|;
return|return
name|desc
operator|==
literal|null
condition|?
name|super
operator|.
name|getDescription
argument_list|(
name|op
argument_list|,
name|param
argument_list|,
name|sequence
argument_list|)
else|:
name|desc
return|;
block|}
specifier|private
specifier|static
name|String
name|getValue
parameter_list|(
name|DescriptorRead
name|dr
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|dr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getFieldValue
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

