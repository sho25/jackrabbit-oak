begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|delegate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PREDECESSORS
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * {@code VersionDelegate}...  */
end_comment

begin_class
specifier|public
class|class
name|VersionDelegate
extends|extends
name|NodeDelegate
block|{
specifier|private
name|VersionDelegate
parameter_list|(
name|SessionDelegate
name|sessionDelegate
parameter_list|,
name|Tree
name|tree
parameter_list|)
block|{
name|super
argument_list|(
name|checkNotNull
argument_list|(
name|sessionDelegate
argument_list|)
argument_list|,
name|checkNotNull
argument_list|(
name|tree
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
name|VersionDelegate
name|create
parameter_list|(
annotation|@
name|NotNull
name|SessionDelegate
name|sessionDelegate
parameter_list|,
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|)
block|{
return|return
operator|new
name|VersionDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|tree
argument_list|)
return|;
block|}
annotation|@
name|NotNull
name|NodeDelegate
name|getFrozenNode
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|NodeDelegate
name|frozenNode
init|=
name|getChild
argument_list|(
name|JcrConstants
operator|.
name|JCR_FROZENNODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|frozenNode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Inconsistent version storage. "
operator|+
literal|"Version at "
operator|+
name|getPath
argument_list|()
operator|+
literal|" does not have a jcr:frozenNode"
argument_list|)
throw|;
block|}
return|return
name|frozenNode
return|;
block|}
annotation|@
name|NotNull
specifier|public
name|Iterable
argument_list|<
name|VersionDelegate
argument_list|>
name|getPredecessors
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|PropertyDelegate
name|p
init|=
name|getPropertyOrNull
argument_list|(
name|JCR_PREDECESSORS
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Inconsistent version storage. "
operator|+
literal|"Version does not have a "
operator|+
name|JCR_PREDECESSORS
operator|+
literal|" property."
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|VersionDelegate
argument_list|>
name|predecessors
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|VersionManagerDelegate
name|vMgr
init|=
name|VersionManagerDelegate
operator|.
name|create
argument_list|(
name|sessionDelegate
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|p
operator|.
name|getMultiState
argument_list|()
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCES
argument_list|)
control|)
block|{
name|predecessors
operator|.
name|add
argument_list|(
name|vMgr
operator|.
name|getVersionByIdentifier
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|predecessors
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|VersionDelegate
name|getLinearPredecessor
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Iterable
argument_list|<
name|VersionDelegate
argument_list|>
name|predecessors
init|=
name|getPredecessors
argument_list|()
decl_stmt|;
if|if
condition|(
name|predecessors
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// return first predecessor (same behavior as Jackrabbit)
return|return
name|predecessors
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

