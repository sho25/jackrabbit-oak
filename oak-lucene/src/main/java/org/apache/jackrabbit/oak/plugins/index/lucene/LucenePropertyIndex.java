begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|AbstractIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Queues
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|fv
operator|.
name|SimSearchUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FieldNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FulltextIndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|IndexDefinition
operator|.
name|IndexingRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
operator|.
name|HybridPropertyIndexLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|score
operator|.
name|ScorerProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|spi
operator|.
name|FulltextQueryTermsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|FacetHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|MoreLikeThisHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|PathStoredFieldVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|SpellcheckHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|SuggestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|IndexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|SizeEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|spi
operator|.
name|query
operator|.
name|FulltextIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|spi
operator|.
name|query
operator|.
name|FulltextIndexPlanner
operator|.
name|PlanResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|spi
operator|.
name|query
operator|.
name|FulltextIndexPlanner
operator|.
name|PropertyIndexResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextAnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextContains
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextOr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextTerm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
operator|.
name|PropertyRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryLimits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|Facets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|LabelAndValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|CustomScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
operator|.
name|QueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
operator|.
name|QueryParserBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|QueryNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|StandardQueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|config
operator|.
name|StandardQueryConfigHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|NumericRangeQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PrefixQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermRangeQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TotalHitCountCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|WildcardQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|Highlighter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|InvalidTokenOffsetsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|QueryScorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|SimpleHTMLEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|SimpleHTMLFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|TextFragment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|postingshighlight
operator|.
name|PostingsHighlighter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|SuggestWord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|Lookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
operator|.
name|notNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|LONG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|denotesRoot
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getParentPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|TYPE_LUCENE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexLookupUtil
operator|.
name|LUCENE_INDEX_DEFINITION_PREDICATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|IndexDefinition
operator|.
name|NATIVE_SORT_ORDER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|VERSION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|TermFactory
operator|.
name|newAncestorTerm
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|TermFactory
operator|.
name|newPathTerm
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyValues
operator|.
name|newName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryConstants
operator|.
name|JCR_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryConstants
operator|.
name|REP_EXCERPT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  * Used to query new (compatVersion 2) Lucene indexes.  *  * Provides a QueryIndex that does lookups against a Lucene-based index  *  *<p>  * To define a lucene index on a subtree you have to add an  *<code>oak:index</code> node.  *  * Under it follows the index definition node that:  *<ul>  *<li>must be of type<code>oak:QueryIndexDefinition</code></li>  *<li>must have the<code>type</code> property set to<b><code>lucene</code></b></li>  *<li>must have the<code>async</code> property set to<b><code>async</code></b></li>  *</ul>  *<p>  * Optionally you can add  *<ul>  *<li>what subset of property types to be included in the index via the<code>includePropertyTypes</code> property</li>  *<li>a blacklist of property names: what property to be excluded from the index via the<code>excludePropertyNames</code> property</li>  *<li>the<code>reindex</code> flag which when set to<code>true</code>, triggers a full content re-index.</li>  *</ul>  *<p>  *<pre>{@code  * {  *     NodeBuilder index = root.child("oak:index");  *     index.child("lucene")  *         .setProperty("jcr:primaryType", "oak:QueryIndexDefinition", Type.NAME)  *         .setProperty("type", "lucene")  *         .setProperty("async", "async")  *         .setProperty("reindex", "true");  * }  * }</pre>  *  * @see org.apache.jackrabbit.oak.spi.query.QueryIndex  *  */
end_comment

begin_class
specifier|public
class|class
name|LucenePropertyIndex
extends|extends
name|FulltextIndex
block|{
specifier|private
specifier|static
name|double
name|MIN_COST
init|=
literal|2.1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LucenePropertyIndex
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PerfLogger
name|PERF_LOGGER
init|=
operator|new
name|PerfLogger
argument_list|(
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LucenePropertyIndex
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".perf"
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * Batch size for fetching results from Lucene queries.      */
specifier|public
specifier|static
specifier|final
name|int
name|LUCENE_QUERY_BATCH_SIZE
init|=
literal|50
decl_stmt|;
specifier|protected
specifier|final
name|IndexTracker
name|tracker
decl_stmt|;
specifier|private
specifier|final
name|ScorerProviderFactory
name|scorerProviderFactory
decl_stmt|;
specifier|private
specifier|final
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
operator|new
name|SimpleHTMLFormatter
argument_list|(
literal|"<strong>"
argument_list|,
literal|"</strong>"
argument_list|)
argument_list|,
operator|new
name|SimpleHTMLEncoder
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|PostingsHighlighter
name|postingsHighlighter
init|=
operator|new
name|PostingsHighlighter
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|IndexAugmentorFactory
name|augmentorFactory
decl_stmt|;
specifier|public
name|LucenePropertyIndex
parameter_list|(
name|IndexTracker
name|tracker
parameter_list|)
block|{
name|this
argument_list|(
name|tracker
argument_list|,
name|ScorerProviderFactory
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LucenePropertyIndex
parameter_list|(
name|IndexTracker
name|tracker
parameter_list|,
name|ScorerProviderFactory
name|factory
parameter_list|)
block|{
name|this
argument_list|(
name|tracker
argument_list|,
name|factory
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LucenePropertyIndex
parameter_list|(
name|IndexTracker
name|tracker
parameter_list|,
name|ScorerProviderFactory
name|factory
parameter_list|,
name|IndexAugmentorFactory
name|augmentorFactory
parameter_list|)
block|{
name|this
operator|.
name|tracker
operator|=
name|tracker
expr_stmt|;
name|this
operator|.
name|scorerProviderFactory
operator|=
name|factory
expr_stmt|;
name|this
operator|.
name|augmentorFactory
operator|=
name|augmentorFactory
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getMinimumCost
parameter_list|()
block|{
return|return
name|MIN_COST
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIndexName
parameter_list|()
block|{
return|return
literal|"lucene-property"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cursor
name|query
parameter_list|(
specifier|final
name|IndexPlan
name|plan
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
if|if
condition|(
name|plan
operator|.
name|isDeprecated
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"This index is deprecated: {}; it is used for query {}. "
operator|+
literal|"Please change the query or the index definitions."
argument_list|,
name|plan
operator|.
name|getPlanName
argument_list|()
argument_list|,
name|plan
operator|.
name|getFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Filter
name|filter
init|=
name|plan
operator|.
name|getFilter
argument_list|()
decl_stmt|;
specifier|final
name|Sort
name|sort
init|=
name|getSort
argument_list|(
name|plan
argument_list|)
decl_stmt|;
specifier|final
name|PlanResult
name|pr
init|=
name|getPlanResult
argument_list|(
name|plan
argument_list|)
decl_stmt|;
name|QueryLimits
name|settings
init|=
name|filter
operator|.
name|getQueryLimits
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|FulltextResultRow
argument_list|>
name|itr
init|=
operator|new
name|AbstractIterator
argument_list|<
name|FulltextResultRow
argument_list|>
argument_list|()
block|{
specifier|private
specifier|final
name|Deque
argument_list|<
name|FulltextResultRow
argument_list|>
name|queue
init|=
name|Queues
operator|.
name|newArrayDeque
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|seenPaths
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
specifier|private
name|ScoreDoc
name|lastDoc
decl_stmt|;
specifier|private
name|int
name|nextBatchSize
init|=
name|LUCENE_QUERY_BATCH_SIZE
decl_stmt|;
specifier|private
name|boolean
name|noDocs
init|=
literal|false
decl_stmt|;
specifier|private
name|IndexSearcher
name|indexSearcher
decl_stmt|;
specifier|private
name|int
name|indexNodeId
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|FulltextResultRow
name|computeNext
parameter_list|()
block|{
while|while
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
operator|||
name|loadDocs
argument_list|()
condition|)
block|{
return|return
name|queue
operator|.
name|remove
argument_list|()
return|;
block|}
name|releaseSearcher
argument_list|()
expr_stmt|;
return|return
name|endOfData
argument_list|()
return|;
block|}
specifier|private
name|FulltextResultRow
name|convertToRow
parameter_list|(
name|ScoreDoc
name|doc
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|excerpts
parameter_list|,
name|Facets
name|facets
parameter_list|,
name|String
name|explanation
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexReader
name|reader
init|=
name|searcher
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
comment|//TODO Look into usage of field cache for retrieving the path
comment|//instead of reading via reader if no of docs in index are limited
name|PathStoredFieldVisitor
name|visitor
init|=
operator|new
name|PathStoredFieldVisitor
argument_list|()
decl_stmt|;
name|reader
operator|.
name|document
argument_list|(
name|doc
operator|.
name|doc
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|visitor
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
if|if
condition|(
name|pr
operator|.
name|isPathTransformed
argument_list|()
condition|)
block|{
name|String
name|originalPath
init|=
name|path
decl_stmt|;
name|path
operator|=
name|pr
operator|.
name|transformPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Ignoring path {} : Transformation returned null"
argument_list|,
name|originalPath
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// avoid duplicate entries
if|if
condition|(
name|seenPaths
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Ignoring path {} : Duplicate post transformation"
argument_list|,
name|originalPath
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|seenPaths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|boolean
name|shouldIncludeForHierarchy
init|=
name|shouldInclude
argument_list|(
name|path
argument_list|,
name|plan
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Matched path {}; shouldIncludeForHierarchy: {}"
argument_list|,
name|path
argument_list|,
name|shouldIncludeForHierarchy
argument_list|)
expr_stmt|;
return|return
name|shouldIncludeForHierarchy
condition|?
operator|new
name|FulltextResultRow
argument_list|(
name|path
argument_list|,
name|doc
operator|.
name|score
argument_list|,
name|excerpts
argument_list|,
operator|new
name|LuceneFacetProvider
argument_list|(
name|facets
argument_list|)
argument_list|,
name|explanation
argument_list|)
else|:
literal|null
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**              * Loads the lucene documents in batches              * @return true if any document is loaded              */
specifier|private
name|boolean
name|loadDocs
parameter_list|()
block|{
if|if
condition|(
name|noDocs
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ScoreDoc
name|lastDocToRecord
init|=
literal|null
decl_stmt|;
specifier|final
name|LuceneIndexNode
name|indexNode
init|=
name|acquireIndexNode
argument_list|(
name|plan
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|indexNode
operator|!=
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|IndexSearcher
name|searcher
init|=
name|getCurrentSearcher
argument_list|(
name|indexNode
argument_list|)
decl_stmt|;
name|LuceneRequestFacade
name|luceneRequestFacade
init|=
name|getLuceneRequest
argument_list|(
name|plan
argument_list|,
name|augmentorFactory
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|luceneRequestFacade
operator|.
name|getLuceneRequest
argument_list|()
operator|instanceof
name|Query
condition|)
block|{
name|Query
name|query
init|=
operator|(
name|Query
operator|)
name|luceneRequestFacade
operator|.
name|getLuceneRequest
argument_list|()
decl_stmt|;
name|CustomScoreQuery
name|customScoreQuery
init|=
name|getCustomScoreQuery
argument_list|(
name|plan
argument_list|,
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|customScoreQuery
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
name|customScoreQuery
expr_stmt|;
block|}
name|TopDocs
name|docs
decl_stmt|;
name|long
name|start
init|=
name|PERF_LOGGER
operator|.
name|start
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|lastDoc
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"loading the next {} entries for query {}"
argument_list|,
name|nextBatchSize
argument_list|,
name|query
argument_list|)
expr_stmt|;
if|if
condition|(
name|sort
operator|==
literal|null
condition|)
block|{
name|docs
operator|=
name|searcher
operator|.
name|searchAfter
argument_list|(
name|lastDoc
argument_list|,
name|query
argument_list|,
name|nextBatchSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docs
operator|=
name|searcher
operator|.
name|searchAfter
argument_list|(
name|lastDoc
argument_list|,
name|query
argument_list|,
name|nextBatchSize
argument_list|,
name|sort
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"loading the first {} entries for query {}"
argument_list|,
name|nextBatchSize
argument_list|,
name|query
argument_list|)
expr_stmt|;
if|if
condition|(
name|sort
operator|==
literal|null
condition|)
block|{
name|docs
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|nextBatchSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docs
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|nextBatchSize
argument_list|,
name|sort
argument_list|)
expr_stmt|;
block|}
block|}
name|PERF_LOGGER
operator|.
name|end
argument_list|(
name|start
argument_list|,
operator|-
literal|1
argument_list|,
literal|"{} ..."
argument_list|,
name|docs
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
expr_stmt|;
name|nextBatchSize
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|nextBatchSize
operator|*
literal|2L
argument_list|,
literal|100000
argument_list|)
expr_stmt|;
name|long
name|f
init|=
name|PERF_LOGGER
operator|.
name|start
argument_list|()
decl_stmt|;
name|Facets
name|facets
init|=
name|FacetHelper
operator|.
name|getFacets
argument_list|(
name|searcher
argument_list|,
name|query
argument_list|,
name|docs
argument_list|,
name|plan
argument_list|,
name|indexNode
operator|.
name|getDefinition
argument_list|()
operator|.
name|isSecureFacets
argument_list|()
argument_list|)
decl_stmt|;
name|PERF_LOGGER
operator|.
name|end
argument_list|(
name|f
argument_list|,
operator|-
literal|1
argument_list|,
literal|"facets retrieved"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|excerptFields
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyRestriction
name|pr
range|:
name|filter
operator|.
name|getPropertyRestrictions
argument_list|()
control|)
block|{
if|if
condition|(
name|QueryConstants
operator|.
name|REP_EXCERPT
operator|.
name|equals
argument_list|(
name|pr
operator|.
name|propertyName
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|pr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|excerptFields
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|addExcerpt
init|=
name|excerptFields
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
name|PropertyRestriction
name|restriction
init|=
name|filter
operator|.
name|getPropertyRestriction
argument_list|(
name|QueryConstants
operator|.
name|OAK_SCORE_EXPLANATION
argument_list|)
decl_stmt|;
name|boolean
name|addExplain
init|=
name|restriction
operator|!=
literal|null
operator|&&
name|restriction
operator|.
name|isNotNullRestriction
argument_list|()
decl_stmt|;
name|Analyzer
name|analyzer
init|=
name|indexNode
operator|.
name|getDefinition
argument_list|()
operator|.
name|getAnalyzer
argument_list|()
decl_stmt|;
name|FieldInfos
name|mergedFieldInfos
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|addExcerpt
condition|)
block|{
comment|// setup highlighter
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|scorer
operator|.
name|setExpandMultiTermQuery
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|highlighter
operator|.
name|setFragmentScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
name|mergedFieldInfos
operator|=
name|MultiFields
operator|.
name|getMergedFieldInfos
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ScoreDoc
name|doc
range|:
name|docs
operator|.
name|scoreDocs
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|excerpts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|addExcerpt
condition|)
block|{
name|excerpts
operator|=
name|getExcerpt
argument_list|(
name|query
argument_list|,
name|excerptFields
argument_list|,
name|analyzer
argument_list|,
name|searcher
argument_list|,
name|doc
argument_list|,
name|mergedFieldInfos
argument_list|)
expr_stmt|;
block|}
name|String
name|explanation
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|addExplain
condition|)
block|{
name|explanation
operator|=
name|searcher
operator|.
name|explain
argument_list|(
name|query
argument_list|,
name|doc
operator|.
name|doc
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|FulltextResultRow
name|row
init|=
name|convertToRow
argument_list|(
name|doc
argument_list|,
name|searcher
argument_list|,
name|excerpts
argument_list|,
name|facets
argument_list|,
name|explanation
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|!=
literal|null
condition|)
block|{
name|queue
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|lastDocToRecord
operator|=
name|doc
expr_stmt|;
block|}
if|if
condition|(
name|queue
operator|.
name|isEmpty
argument_list|()
operator|&&
name|docs
operator|.
name|scoreDocs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|//queue is still empty but more results can be fetched
comment|//from Lucene so still continue
name|lastDoc
operator|=
name|lastDocToRecord
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|luceneRequestFacade
operator|.
name|getLuceneRequest
argument_list|()
operator|instanceof
name|SpellcheckHelper
operator|.
name|SpellcheckQuery
condition|)
block|{
name|String
name|aclCheckField
init|=
name|indexNode
operator|.
name|getDefinition
argument_list|()
operator|.
name|isFullTextEnabled
argument_list|()
condition|?
name|FieldNames
operator|.
name|FULLTEXT
else|:
name|FieldNames
operator|.
name|SPELLCHECK
decl_stmt|;
name|noDocs
operator|=
literal|true
expr_stmt|;
name|SpellcheckHelper
operator|.
name|SpellcheckQuery
name|spellcheckQuery
init|=
operator|(
name|SpellcheckHelper
operator|.
name|SpellcheckQuery
operator|)
name|luceneRequestFacade
operator|.
name|getLuceneRequest
argument_list|()
decl_stmt|;
name|SuggestWord
index|[]
name|suggestWords
init|=
name|SpellcheckHelper
operator|.
name|getSpellcheck
argument_list|(
name|spellcheckQuery
argument_list|)
decl_stmt|;
comment|// ACL filter spellchecks
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
name|Version
operator|.
name|LUCENE_47
argument_list|,
name|aclCheckField
argument_list|,
name|indexNode
operator|.
name|getDefinition
argument_list|()
operator|.
name|getAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SuggestWord
name|suggestion
range|:
name|suggestWords
control|)
block|{
name|Query
name|query
init|=
name|qp
operator|.
name|createPhraseQuery
argument_list|(
name|aclCheckField
argument_list|,
name|QueryParserBase
operator|.
name|escape
argument_list|(
name|suggestion
operator|.
name|string
argument_list|)
argument_list|)
decl_stmt|;
name|query
operator|=
name|addDescendantClauseIfRequired
argument_list|(
name|query
argument_list|,
name|plan
argument_list|)
expr_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|topDocs
operator|.
name|totalHits
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ScoreDoc
name|doc
range|:
name|topDocs
operator|.
name|scoreDocs
control|)
block|{
name|Document
name|retrievedDoc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|doc
operator|.
name|doc
argument_list|)
decl_stmt|;
name|String
name|prefix
init|=
name|filter
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|prefix
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|filter
operator|.
name|isAccessible
argument_list|(
name|prefix
operator|+
name|retrievedDoc
operator|.
name|get
argument_list|(
name|FieldNames
operator|.
name|PATH
argument_list|)
argument_list|)
condition|)
block|{
name|queue
operator|.
name|add
argument_list|(
operator|new
name|FulltextResultRow
argument_list|(
name|suggestion
operator|.
name|string
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|luceneRequestFacade
operator|.
name|getLuceneRequest
argument_list|()
operator|instanceof
name|SuggestHelper
operator|.
name|SuggestQuery
condition|)
block|{
name|SuggestHelper
operator|.
name|SuggestQuery
name|suggestQuery
init|=
operator|(
name|SuggestHelper
operator|.
name|SuggestQuery
operator|)
name|luceneRequestFacade
operator|.
name|getLuceneRequest
argument_list|()
decl_stmt|;
name|noDocs
operator|=
literal|true
expr_stmt|;
name|List
argument_list|<
name|Lookup
operator|.
name|LookupResult
argument_list|>
name|lookupResults
init|=
name|SuggestHelper
operator|.
name|getSuggestions
argument_list|(
name|indexNode
operator|.
name|getLookup
argument_list|()
argument_list|,
name|suggestQuery
argument_list|)
decl_stmt|;
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
name|Version
operator|.
name|LUCENE_47
argument_list|,
name|FieldNames
operator|.
name|SUGGEST
argument_list|,
name|indexNode
operator|.
name|getDefinition
argument_list|()
operator|.
name|isSuggestAnalyzed
argument_list|()
condition|?
name|indexNode
operator|.
name|getDefinition
argument_list|()
operator|.
name|getAnalyzer
argument_list|()
else|:
name|SuggestHelper
operator|.
name|getAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
comment|// ACL filter suggestions
for|for
control|(
name|Lookup
operator|.
name|LookupResult
name|suggestion
range|:
name|lookupResults
control|)
block|{
name|Query
name|query
init|=
name|qp
operator|.
name|parse
argument_list|(
literal|"\""
operator|+
name|QueryParserBase
operator|.
name|escape
argument_list|(
name|suggestion
operator|.
name|key
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
decl_stmt|;
name|query
operator|=
name|addDescendantClauseIfRequired
argument_list|(
name|query
argument_list|,
name|plan
argument_list|)
expr_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|topDocs
operator|.
name|totalHits
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ScoreDoc
name|doc
range|:
name|topDocs
operator|.
name|scoreDocs
control|)
block|{
name|Document
name|retrievedDoc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|doc
operator|.
name|doc
argument_list|)
decl_stmt|;
name|String
name|prefix
init|=
name|filter
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|prefix
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|filter
operator|.
name|isAccessible
argument_list|(
name|prefix
operator|+
name|retrievedDoc
operator|.
name|get
argument_list|(
name|FieldNames
operator|.
name|PATH
argument_list|)
argument_list|)
condition|)
block|{
name|queue
operator|.
name|add
argument_list|(
operator|new
name|FulltextResultRow
argument_list|(
name|suggestion
operator|.
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|suggestion
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"query via {} failed."
argument_list|,
name|LucenePropertyIndex
operator|.
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexNode
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lastDocToRecord
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|lastDoc
operator|=
name|lastDocToRecord
expr_stmt|;
block|}
return|return
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|private
name|IndexSearcher
name|getCurrentSearcher
parameter_list|(
name|LuceneIndexNode
name|indexNode
parameter_list|)
block|{
comment|//The searcher once obtained is held till either cursor is finished
comment|//or if the index gets updated. It needs to be ensured that
comment|//searcher is obtained via this method only in this iterator
comment|//Refresh the searcher if change in indexNode is detected
comment|//For NRT case its fine to keep a reference to searcher i.e. not
comment|//acquire it for every loadDocs call otherwise with frequent change
comment|//the reset of lastDoc would happen very frequently.
comment|//Upon LuceneIndexNode change i.e. when new async index update is detected
comment|//the searcher would be refreshed as done earlier
if|if
condition|(
name|indexNodeId
operator|!=
name|indexNode
operator|.
name|getIndexNodeId
argument_list|()
condition|)
block|{
comment|//if already initialized then log about change
if|if
condition|(
name|indexNodeId
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Change in index version detected. Query would be performed without offset"
argument_list|)
expr_stmt|;
block|}
name|indexSearcher
operator|=
name|indexNode
operator|.
name|getSearcher
argument_list|()
expr_stmt|;
name|indexNodeId
operator|=
name|indexNode
operator|.
name|getIndexNodeId
argument_list|()
expr_stmt|;
name|lastDoc
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|indexSearcher
return|;
block|}
specifier|private
name|void
name|releaseSearcher
parameter_list|()
block|{
comment|//For now nullifying it.
name|indexSearcher
operator|=
literal|null
expr_stmt|;
block|}
block|}
decl_stmt|;
name|SizeEstimator
name|sizeEstimator
init|=
name|getSizeEstimator
argument_list|(
name|plan
argument_list|)
decl_stmt|;
if|if
condition|(
name|pr
operator|.
name|hasPropertyIndexResult
argument_list|()
operator|||
name|pr
operator|.
name|evaluateSyncNodeTypeRestriction
argument_list|()
condition|)
block|{
name|itr
operator|=
name|mergePropertyIndexResult
argument_list|(
name|plan
argument_list|,
name|rootState
argument_list|,
name|itr
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FulltextPathCursor
argument_list|(
name|itr
argument_list|,
name|plan
argument_list|,
name|settings
argument_list|,
name|sizeEstimator
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Query
name|addDescendantClauseIfRequired
parameter_list|(
name|Query
name|query
parameter_list|,
name|IndexPlan
name|plan
parameter_list|)
block|{
name|Filter
name|filter
init|=
name|plan
operator|.
name|getFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|getPathRestriction
argument_list|()
operator|==
name|Filter
operator|.
name|PathRestriction
operator|.
name|ALL_CHILDREN
condition|)
block|{
name|String
name|path
init|=
name|getPathRestriction
argument_list|(
name|plan
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
name|getPlanResult
argument_list|(
name|plan
argument_list|)
operator|.
name|indexDefinition
operator|.
name|evaluatePathRestrictions
argument_list|()
condition|)
block|{
name|BooleanQuery
name|compositeQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|compositeQuery
operator|.
name|add
argument_list|(
name|query
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|Query
name|pathQuery
init|=
operator|new
name|TermQuery
argument_list|(
name|newAncestorTerm
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|compositeQuery
operator|.
name|add
argument_list|(
name|pathQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|=
name|compositeQuery
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Descendant clause could not be added without path restrictions enabled. Plan: {}"
argument_list|,
name|plan
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|query
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getExcerpt
parameter_list|(
name|Query
name|query
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|excerptFields
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|,
name|ScoreDoc
name|doc
parameter_list|,
name|FieldInfos
name|fieldInfos
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|excerptFieldNames
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fieldNameToColumnNameMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnNameToExcerpts
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nodeExcerptColumns
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|excerptFields
operator|.
name|forEach
argument_list|(
name|columnName
lambda|->
block|{
name|String
name|fieldName
decl_stmt|;
if|if
condition|(
name|REP_EXCERPT
operator|.
name|equals
argument_list|(
name|columnName
argument_list|)
condition|)
block|{
name|fieldName
operator|=
name|FulltextIndexConstants
operator|.
name|EXCERPT_NODE_FIELD_NAME
expr_stmt|;
block|}
else|else
block|{
name|fieldName
operator|=
name|columnName
operator|.
name|substring
argument_list|(
name|REP_EXCERPT
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
name|columnName
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|FulltextIndexConstants
operator|.
name|EXCERPT_NODE_FIELD_NAME
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|excerptFieldNames
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|fieldNameToColumnNameMap
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|columnName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nodeExcerptColumns
operator|.
name|add
argument_list|(
name|columnName
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|requireNodeLevelExcerpt
init|=
name|nodeExcerptColumns
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
name|int
name|docID
init|=
name|doc
operator|.
name|doc
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexableField
name|field
range|:
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|document
argument_list|(
name|docID
argument_list|)
operator|.
name|getFields
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|field
operator|.
name|name
argument_list|()
decl_stmt|;
comment|// postings highlighter can be used on analyzed fields with docs, freqs, positions and offsets stored.
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|FieldNames
operator|.
name|ANALYZED_FIELD_PREFIX
argument_list|)
operator|&&
name|fieldInfos
operator|.
name|hasProx
argument_list|()
operator|&&
name|fieldInfos
operator|.
name|hasOffsets
argument_list|()
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|requireNodeLevelExcerpt
condition|)
block|{
name|names
operator|.
name|retainAll
argument_list|(
name|excerptFieldNames
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|names
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
index|[]
name|maxPassages
init|=
operator|new
name|int
index|[
name|names
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxPassages
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|maxPassages
index|[
name|i
index|]
operator|=
literal|1
expr_stmt|;
block|}
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|stringMap
init|=
name|postingsHighlighter
operator|.
name|highlightFields
argument_list|(
name|names
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|names
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|query
argument_list|,
name|searcher
argument_list|,
operator|new
name|int
index|[]
block|{
name|docID
block|}
argument_list|,
name|maxPassages
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|entry
range|:
name|stringMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|Arrays
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|contains
argument_list|(
literal|"<b>"
argument_list|)
condition|)
block|{
name|String
name|fieldName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|columnName
init|=
name|fieldNameToColumnNameMap
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|columnNameToExcerpts
operator|.
name|put
argument_list|(
name|columnName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"postings highlighting failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// fallback if no excerpt could be retrieved using postings highlighter
if|if
condition|(
name|columnNameToExcerpts
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|IndexableField
name|field
range|:
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|document
argument_list|(
name|doc
operator|.
name|doc
argument_list|)
operator|.
name|getFields
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|field
operator|.
name|name
argument_list|()
decl_stmt|;
comment|// only full text or analyzed fields
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|FieldNames
operator|.
name|FULLTEXT
argument_list|)
operator|||
name|name
operator|.
name|startsWith
argument_list|(
name|FieldNames
operator|.
name|ANALYZED_FIELD_PREFIX
argument_list|)
condition|)
block|{
name|String
name|text
init|=
name|field
operator|.
name|stringValue
argument_list|()
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|name
argument_list|,
name|text
argument_list|)
decl_stmt|;
try|try
block|{
name|TextFragment
index|[]
name|textFragments
init|=
name|highlighter
operator|.
name|getBestTextFragments
argument_list|(
name|tokenStream
argument_list|,
name|text
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|textFragments
operator|!=
literal|null
operator|&&
name|textFragments
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|TextFragment
name|fragment
range|:
name|textFragments
control|)
block|{
name|String
name|columnName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|FieldNames
operator|.
name|ANALYZED_FIELD_PREFIX
argument_list|)
condition|)
block|{
name|columnName
operator|=
name|fieldNameToColumnNameMap
operator|.
name|get
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|FieldNames
operator|.
name|ANALYZED_FIELD_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|columnName
operator|==
literal|null
operator|&&
name|requireNodeLevelExcerpt
condition|)
block|{
name|columnName
operator|=
name|name
expr_stmt|;
block|}
if|if
condition|(
name|columnName
operator|!=
literal|null
condition|)
block|{
name|columnNameToExcerpts
operator|.
name|put
argument_list|(
name|columnName
argument_list|,
name|fragment
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|excerptFieldNames
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InvalidTokenOffsetsException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"higlighting failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|requireNodeLevelExcerpt
condition|)
block|{
name|String
name|nodeExcerpt
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|"..."
argument_list|)
operator|.
name|join
argument_list|(
name|columnNameToExcerpts
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|nodeExcerptColumns
operator|.
name|forEach
argument_list|(
name|nodeExcerptColumnName
lambda|->
block|{
name|columnNameToExcerpts
operator|.
name|put
argument_list|(
name|nodeExcerptColumnName
argument_list|,
name|nodeExcerpt
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
name|columnNameToExcerpts
operator|.
name|keySet
argument_list|()
operator|.
name|retainAll
argument_list|(
name|excerptFields
argument_list|)
expr_stmt|;
return|return
name|columnNameToExcerpts
return|;
block|}
annotation|@
name|Override
specifier|protected
name|LuceneIndexNode
name|acquireIndexNode
parameter_list|(
name|String
name|indexPath
parameter_list|)
block|{
return|return
name|tracker
operator|.
name|acquireIndexNode
argument_list|(
name|indexPath
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|LuceneIndexNode
name|acquireIndexNode
parameter_list|(
name|IndexPlan
name|plan
parameter_list|)
block|{
return|return
operator|(
name|LuceneIndexNode
operator|)
name|super
operator|.
name|acquireIndexNode
argument_list|(
name|plan
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getType
parameter_list|()
block|{
return|return
name|TYPE_LUCENE
return|;
block|}
annotation|@
name|Override
specifier|protected
name|SizeEstimator
name|getSizeEstimator
parameter_list|(
name|IndexPlan
name|plan
parameter_list|)
block|{
return|return
parameter_list|()
lambda|->
block|{
name|LuceneIndexNode
name|indexNode
init|=
name|acquireIndexNode
argument_list|(
name|plan
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|indexNode
operator|!=
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|IndexSearcher
name|searcher
init|=
name|indexNode
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
name|LuceneRequestFacade
name|luceneRequestFacade
init|=
name|getLuceneRequest
argument_list|(
name|plan
argument_list|,
name|augmentorFactory
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|luceneRequestFacade
operator|.
name|getLuceneRequest
argument_list|()
operator|instanceof
name|Query
condition|)
block|{
name|Query
name|query
init|=
operator|(
name|Query
operator|)
name|luceneRequestFacade
operator|.
name|getLuceneRequest
argument_list|()
decl_stmt|;
name|TotalHitCountCollector
name|collector
init|=
operator|new
name|TotalHitCountCollector
argument_list|()
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|collector
argument_list|)
expr_stmt|;
name|int
name|totalHits
init|=
name|collector
operator|.
name|getTotalHits
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Estimated size for query {} is {}"
argument_list|,
name|query
argument_list|,
name|totalHits
argument_list|)
expr_stmt|;
return|return
name|totalHits
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"estimate size: not a Query: {}"
argument_list|,
name|luceneRequestFacade
operator|.
name|getLuceneRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"query via {} failed."
argument_list|,
name|LucenePropertyIndex
operator|.
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexNode
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Predicate
argument_list|<
name|NodeState
argument_list|>
name|getIndexDefinitionPredicate
parameter_list|()
block|{
return|return
name|LUCENE_INDEX_DEFINITION_PREDICATE
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getFulltextRequestString
parameter_list|(
name|IndexPlan
name|plan
parameter_list|,
name|IndexNode
name|indexNode
parameter_list|)
block|{
return|return
name|getLuceneRequest
argument_list|(
name|plan
argument_list|,
name|augmentorFactory
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|Sort
name|getSort
parameter_list|(
name|IndexPlan
name|plan
parameter_list|)
block|{
name|List
argument_list|<
name|OrderEntry
argument_list|>
name|sortOrder
init|=
name|plan
operator|.
name|getSortOrder
argument_list|()
decl_stmt|;
if|if
condition|(
name|sortOrder
operator|==
literal|null
operator|||
name|sortOrder
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|sortOrder
operator|=
name|removeNativeSort
argument_list|(
name|sortOrder
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SortField
argument_list|>
name|fieldsList
init|=
name|newArrayListWithCapacity
argument_list|(
name|sortOrder
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|PlanResult
name|planResult
init|=
name|getPlanResult
argument_list|(
name|plan
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortOrder
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|OrderEntry
name|oe
init|=
name|sortOrder
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|PropertyDefinition
name|pd
init|=
name|planResult
operator|.
name|getOrderedProperty
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|boolean
name|reverse
init|=
name|oe
operator|.
name|getOrder
argument_list|()
operator|!=
name|OrderEntry
operator|.
name|Order
operator|.
name|ASCENDING
decl_stmt|;
name|String
name|propName
init|=
name|oe
operator|.
name|getPropertyName
argument_list|()
decl_stmt|;
name|propName
operator|=
name|FieldNames
operator|.
name|createDocValFieldName
argument_list|(
name|propName
argument_list|)
expr_stmt|;
name|fieldsList
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
name|propName
argument_list|,
name|toLuceneSortType
argument_list|(
name|oe
argument_list|,
name|pd
argument_list|)
argument_list|,
name|reverse
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fieldsList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|Sort
argument_list|(
name|fieldsList
operator|.
name|toArray
argument_list|(
operator|new
name|SortField
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Remove all "jcr:score" entries.      *      * @param original the original list (is not modified)      * @return the list with the entries removed      */
specifier|private
specifier|static
name|List
argument_list|<
name|OrderEntry
argument_list|>
name|removeNativeSort
parameter_list|(
name|List
argument_list|<
name|OrderEntry
argument_list|>
name|original
parameter_list|)
block|{
if|if
condition|(
name|original
operator|==
literal|null
operator|||
name|original
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|original
return|;
block|}
name|ArrayList
argument_list|<
name|OrderEntry
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|OrderEntry
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OrderEntry
name|oe
range|:
name|original
control|)
block|{
if|if
condition|(
operator|!
name|isNativeSort
argument_list|(
name|oe
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|oe
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * Identifies the default sort order used by the index (@jcr:score descending)      *      * @param oe order entry      * @return      */
specifier|private
specifier|static
name|boolean
name|isNativeSort
parameter_list|(
name|OrderEntry
name|oe
parameter_list|)
block|{
return|return
name|oe
operator|.
name|getPropertyName
argument_list|()
operator|.
name|equals
argument_list|(
name|NATIVE_SORT_ORDER
operator|.
name|getPropertyName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|SortField
operator|.
name|Type
name|toLuceneSortType
parameter_list|(
name|OrderEntry
name|oe
parameter_list|,
name|PropertyDefinition
name|defn
parameter_list|)
block|{
name|Type
argument_list|<
name|?
argument_list|>
name|t
init|=
name|oe
operator|.
name|getPropertyType
argument_list|()
decl_stmt|;
name|checkState
argument_list|(
name|t
operator|!=
literal|null
argument_list|,
literal|"Type cannot be null"
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
operator|!
name|t
operator|.
name|isArray
argument_list|()
argument_list|,
literal|"Array types are not supported"
argument_list|)
expr_stmt|;
name|int
name|type
init|=
name|getPropertyType
argument_list|(
name|defn
argument_list|,
name|oe
operator|.
name|getPropertyName
argument_list|()
argument_list|,
name|t
operator|.
name|tag
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|PropertyType
operator|.
name|LONG
case|:
case|case
name|PropertyType
operator|.
name|DATE
case|:
return|return
name|SortField
operator|.
name|Type
operator|.
name|LONG
return|;
case|case
name|PropertyType
operator|.
name|DOUBLE
case|:
return|return
name|SortField
operator|.
name|Type
operator|.
name|DOUBLE
return|;
default|default:
comment|//TODO Check about SortField.Type.STRING_VAL
return|return
name|SortField
operator|.
name|Type
operator|.
name|STRING
return|;
block|}
block|}
comment|/**      * Get the Lucene query for the given filter.      *      * @param plan index plan containing filter details      * @param reader the Lucene reader      * @return the Lucene query      */
specifier|private
specifier|static
name|LuceneRequestFacade
name|getLuceneRequest
parameter_list|(
name|IndexPlan
name|plan
parameter_list|,
name|IndexAugmentorFactory
name|augmentorFactory
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
block|{
name|FulltextQueryTermsProvider
name|augmentor
init|=
name|getIndexAgumentor
argument_list|(
name|plan
argument_list|,
name|augmentorFactory
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|qs
init|=
operator|new
name|ArrayList
argument_list|<
name|Query
argument_list|>
argument_list|()
decl_stmt|;
name|Filter
name|filter
init|=
name|plan
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|FullTextExpression
name|ft
init|=
name|filter
operator|.
name|getFullTextConstraint
argument_list|()
decl_stmt|;
name|PlanResult
name|planResult
init|=
name|getPlanResult
argument_list|(
name|plan
argument_list|)
decl_stmt|;
name|LuceneIndexDefinition
name|defn
init|=
operator|(
name|LuceneIndexDefinition
operator|)
name|planResult
operator|.
name|indexDefinition
decl_stmt|;
name|Analyzer
name|analyzer
init|=
name|defn
operator|.
name|getAnalyzer
argument_list|()
decl_stmt|;
if|if
condition|(
name|ft
operator|==
literal|null
condition|)
block|{
comment|// there might be no full-text constraint
comment|// when using the LowCostLuceneIndexProvider
comment|// which is used for testing
block|}
else|else
block|{
name|qs
operator|.
name|add
argument_list|(
name|getFullTextQuery
argument_list|(
name|plan
argument_list|,
name|ft
argument_list|,
name|analyzer
argument_list|,
name|augmentor
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Check if native function is supported
name|PropertyRestriction
name|pr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|defn
operator|.
name|hasFunctionDefined
argument_list|()
condition|)
block|{
name|pr
operator|=
name|filter
operator|.
name|getPropertyRestriction
argument_list|(
name|defn
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pr
operator|!=
literal|null
condition|)
block|{
name|String
name|query
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|pr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|pr
operator|.
name|first
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QueryParser
name|queryParser
init|=
operator|new
name|QueryParser
argument_list|(
name|VERSION
argument_list|,
literal|""
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|startsWith
argument_list|(
literal|"mlt?"
argument_list|)
condition|)
block|{
name|String
name|mltQueryString
init|=
name|query
operator|.
name|replace
argument_list|(
literal|"mlt?"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|PropertyDefinition
argument_list|>
name|sp
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexingRule
name|r
range|:
name|defn
operator|.
name|getDefinedRules
argument_list|()
control|)
block|{
name|sp
operator|.
name|addAll
argument_list|(
name|r
operator|.
name|getSimilarityProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Query
name|moreLikeThis
init|=
name|MoreLikeThisHelper
operator|.
name|getMoreLikeThis
argument_list|(
name|reader
argument_list|,
name|analyzer
argument_list|,
name|mltQueryString
argument_list|)
decl_stmt|;
if|if
condition|(
name|moreLikeThis
operator|!=
literal|null
condition|)
block|{
name|qs
operator|.
name|add
argument_list|(
name|moreLikeThis
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Query
name|similarityQuery
init|=
name|SimSearchUtils
operator|.
name|getSimilarityQuery
argument_list|(
name|sp
argument_list|,
name|reader
argument_list|,
name|mltQueryString
argument_list|)
decl_stmt|;
if|if
condition|(
name|similarityQuery
operator|!=
literal|null
condition|)
block|{
name|qs
operator|.
name|add
argument_list|(
name|similarityQuery
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|query
operator|.
name|startsWith
argument_list|(
literal|"spellcheck?"
argument_list|)
condition|)
block|{
name|String
name|spellcheckQueryString
init|=
name|query
operator|.
name|replace
argument_list|(
literal|"spellcheck?"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|LuceneRequestFacade
argument_list|<
name|SpellcheckHelper
operator|.
name|SpellcheckQuery
argument_list|>
argument_list|(
name|SpellcheckHelper
operator|.
name|getSpellcheckQuery
argument_list|(
name|spellcheckQueryString
argument_list|,
name|reader
argument_list|)
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|query
operator|.
name|startsWith
argument_list|(
literal|"suggest?"
argument_list|)
condition|)
block|{
name|String
name|suggestQueryString
init|=
name|query
operator|.
name|replace
argument_list|(
literal|"suggest?"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|LuceneRequestFacade
argument_list|<
name|SuggestHelper
operator|.
name|SuggestQuery
argument_list|>
argument_list|(
name|SuggestHelper
operator|.
name|getSuggestQuery
argument_list|(
name|suggestQueryString
argument_list|)
argument_list|)
return|;
block|}
block|}
else|else
block|{
try|try
block|{
name|qs
operator|.
name|add
argument_list|(
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|planResult
operator|.
name|evaluateNonFullTextConstraints
argument_list|()
condition|)
block|{
name|addNonFullTextConstraints
argument_list|(
name|qs
argument_list|,
name|plan
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|qs
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|plan
operator|.
name|getSortOrder
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|//This case indicates that query just had order by and no
comment|//property restriction defined. In this case property
comment|//existence queries for each sort entry
name|List
argument_list|<
name|OrderEntry
argument_list|>
name|orders
init|=
name|removeNativeSort
argument_list|(
name|plan
operator|.
name|getSortOrder
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|orders
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|OrderEntry
name|oe
init|=
name|orders
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|PropertyDefinition
name|pd
init|=
name|planResult
operator|.
name|getOrderedProperty
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|PropertyRestriction
name|orderRest
init|=
operator|new
name|PropertyRestriction
argument_list|()
decl_stmt|;
name|orderRest
operator|.
name|propertyName
operator|=
name|oe
operator|.
name|getPropertyName
argument_list|()
expr_stmt|;
name|Query
name|q
init|=
name|createQuery
argument_list|(
name|oe
operator|.
name|getPropertyName
argument_list|()
argument_list|,
name|orderRest
argument_list|,
name|pd
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|qs
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|qs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
comment|//When called in planning mode then some queries like rep:similar
comment|//cannot create query as reader is not provided. In such case we
comment|//just return match all queries
return|return
operator|new
name|LuceneRequestFacade
argument_list|<
name|Query
argument_list|>
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|)
return|;
block|}
comment|//For purely nodeType based queries all the documents would have to
comment|//be returned (if the index definition has a single rule)
if|if
condition|(
name|planResult
operator|.
name|evaluateNodeTypeRestriction
argument_list|()
condition|)
block|{
return|return
operator|new
name|LuceneRequestFacade
argument_list|<
name|Query
argument_list|>
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No query created for filter "
operator|+
name|filter
argument_list|)
throw|;
block|}
return|return
name|performAdditionalWraps
argument_list|(
name|qs
argument_list|)
return|;
block|}
comment|/**      * Perform additional wraps on the list of queries to allow, for example, the NOT CONTAINS to      * play properly when sent to lucene.      *      * @param qs the list of queries. Cannot be null.      * @return      */
annotation|@
name|NotNull
specifier|public
specifier|static
name|LuceneRequestFacade
argument_list|<
name|Query
argument_list|>
name|performAdditionalWraps
parameter_list|(
annotation|@
name|NotNull
name|List
argument_list|<
name|Query
argument_list|>
name|qs
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|qs
argument_list|)
expr_stmt|;
if|if
condition|(
name|qs
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Query
name|q
init|=
name|qs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|instanceof
name|BooleanQuery
condition|)
block|{
name|BooleanQuery
name|ibq
init|=
operator|(
name|BooleanQuery
operator|)
name|q
decl_stmt|;
name|boolean
name|onlyNotClauses
init|=
literal|true
decl_stmt|;
for|for
control|(
name|BooleanClause
name|c
range|:
name|ibq
operator|.
name|getClauses
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getOccur
argument_list|()
operator|!=
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
condition|)
block|{
name|onlyNotClauses
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|onlyNotClauses
condition|)
block|{
comment|// if we have only NOT CLAUSES we have to add a match all docs (*.*) for the
comment|// query to work
name|ibq
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|LuceneRequestFacade
argument_list|<
name|Query
argument_list|>
argument_list|(
name|qs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|Query
name|q
range|:
name|qs
control|)
block|{
name|boolean
name|unwrapped
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|q
operator|instanceof
name|BooleanQuery
condition|)
block|{
name|unwrapped
operator|=
name|unwrapMustNot
argument_list|(
operator|(
name|BooleanQuery
operator|)
name|q
argument_list|,
name|bq
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|unwrapped
condition|)
block|{
name|bq
operator|.
name|add
argument_list|(
name|q
argument_list|,
name|MUST
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|LuceneRequestFacade
argument_list|<
name|Query
argument_list|>
argument_list|(
name|bq
argument_list|)
return|;
block|}
comment|/**      * unwraps any NOT clauses from the provided boolean query into another boolean query.      *      * @param input the query to be analysed for the existence of NOT clauses. Cannot be null.      * @param output the query where the unwrapped NOTs will be saved into. Cannot be null.      * @return true if there where at least one unwrapped NOT. false otherwise.      */
specifier|private
specifier|static
name|boolean
name|unwrapMustNot
parameter_list|(
annotation|@
name|NotNull
name|BooleanQuery
name|input
parameter_list|,
annotation|@
name|NotNull
name|BooleanQuery
name|output
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|boolean
name|unwrapped
init|=
literal|false
decl_stmt|;
for|for
control|(
name|BooleanClause
name|bc
range|:
name|input
operator|.
name|getClauses
argument_list|()
control|)
block|{
if|if
condition|(
name|bc
operator|.
name|getOccur
argument_list|()
operator|==
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
condition|)
block|{
name|output
operator|.
name|add
argument_list|(
name|bc
argument_list|)
expr_stmt|;
name|unwrapped
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|unwrapped
condition|)
block|{
comment|// if we have unwrapped "must not" conditions,
comment|// then we need to unwrap "must" conditions as well
for|for
control|(
name|BooleanClause
name|bc
range|:
name|input
operator|.
name|getClauses
argument_list|()
control|)
block|{
if|if
condition|(
name|bc
operator|.
name|getOccur
argument_list|()
operator|==
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
condition|)
block|{
name|output
operator|.
name|add
argument_list|(
name|bc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|unwrapped
return|;
block|}
specifier|private
name|CustomScoreQuery
name|getCustomScoreQuery
parameter_list|(
name|IndexPlan
name|plan
parameter_list|,
name|Query
name|subQuery
parameter_list|)
block|{
name|PlanResult
name|planResult
init|=
name|getPlanResult
argument_list|(
name|plan
argument_list|)
decl_stmt|;
name|IndexDefinition
name|idxDef
init|=
name|planResult
operator|.
name|indexDefinition
decl_stmt|;
name|String
name|providerName
init|=
name|idxDef
operator|.
name|getScorerProviderName
argument_list|()
decl_stmt|;
if|if
condition|(
name|scorerProviderFactory
operator|!=
literal|null
operator|&&
name|providerName
operator|!=
literal|null
condition|)
block|{
return|return
name|scorerProviderFactory
operator|.
name|getScorerProvider
argument_list|(
name|providerName
argument_list|)
operator|.
name|createCustomScoreQuery
argument_list|(
name|subQuery
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|FulltextQueryTermsProvider
name|getIndexAgumentor
parameter_list|(
name|IndexPlan
name|plan
parameter_list|,
name|IndexAugmentorFactory
name|augmentorFactory
parameter_list|)
block|{
name|PlanResult
name|planResult
init|=
name|getPlanResult
argument_list|(
name|plan
argument_list|)
decl_stmt|;
if|if
condition|(
name|augmentorFactory
operator|!=
literal|null
condition|)
block|{
return|return
name|augmentorFactory
operator|.
name|getFulltextQueryTermsProvider
argument_list|(
name|planResult
operator|.
name|indexingRule
operator|.
name|getNodeTypeName
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|void
name|addNonFullTextConstraints
parameter_list|(
name|List
argument_list|<
name|Query
argument_list|>
name|qs
parameter_list|,
name|IndexPlan
name|plan
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
block|{
name|Filter
name|filter
init|=
name|plan
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|PlanResult
name|planResult
init|=
name|getPlanResult
argument_list|(
name|plan
argument_list|)
decl_stmt|;
name|IndexDefinition
name|defn
init|=
name|planResult
operator|.
name|indexDefinition
decl_stmt|;
if|if
condition|(
operator|!
name|filter
operator|.
name|matchesAllTypes
argument_list|()
condition|)
block|{
name|addNodeTypeConstraints
argument_list|(
name|planResult
operator|.
name|indexingRule
argument_list|,
name|qs
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
name|String
name|path
init|=
name|getPathRestriction
argument_list|(
name|plan
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|filter
operator|.
name|getPathRestriction
argument_list|()
condition|)
block|{
case|case
name|ALL_CHILDREN
case|:
if|if
condition|(
name|defn
operator|.
name|evaluatePathRestrictions
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"/"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
break|break;
block|}
name|qs
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|newAncestorTerm
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DIRECT_CHILDREN
case|:
if|if
condition|(
name|defn
operator|.
name|evaluatePathRestrictions
argument_list|()
condition|)
block|{
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|newAncestorTerm
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|newDepthQuery
argument_list|(
name|path
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|qs
operator|.
name|add
argument_list|(
name|bq
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|EXACT
case|:
name|qs
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|newPathTerm
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|PARENT
case|:
if|if
condition|(
name|denotesRoot
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// there's no parent of the root node
comment|// we add a path that can not possibly occur because there
comment|// is no way to say "match no documents" in Lucene
name|qs
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FieldNames
operator|.
name|PATH
argument_list|,
literal|"///"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qs
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|newPathTerm
argument_list|(
name|getParentPath
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NO_RESTRICTION
case|:
break|break;
block|}
for|for
control|(
name|PropertyRestriction
name|pr
range|:
name|filter
operator|.
name|getPropertyRestrictions
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|pr
operator|.
name|propertyName
decl_stmt|;
if|if
condition|(
name|QueryConstants
operator|.
name|REP_EXCERPT
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
name|QueryConstants
operator|.
name|OAK_SCORE_EXPLANATION
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
name|QueryConstants
operator|.
name|REP_FACET
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|QueryConstants
operator|.
name|RESTRICTION_LOCAL_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|planResult
operator|.
name|evaluateNodeNameRestriction
argument_list|()
condition|)
block|{
name|Query
name|q
init|=
name|createNodeNameQuery
argument_list|(
name|pr
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|qs
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
continue|continue;
block|}
if|if
condition|(
name|pr
operator|.
name|first
operator|!=
literal|null
operator|&&
name|pr
operator|.
name|first
operator|.
name|equals
argument_list|(
name|pr
operator|.
name|last
argument_list|)
operator|&&
name|pr
operator|.
name|firstIncluding
operator|&&
name|pr
operator|.
name|lastIncluding
condition|)
block|{
name|String
name|first
init|=
name|pr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
decl_stmt|;
name|first
operator|=
name|first
operator|.
name|replace
argument_list|(
literal|"\\"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|JCR_PATH
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|qs
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|newPathTerm
argument_list|(
name|first
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|//TODO Revisit reference constraint. For performant impl
comment|//references need to be indexed in a different manner
name|addReferenceConstraint
argument_list|(
name|first
argument_list|,
name|qs
argument_list|,
name|reader
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|PropertyDefinition
name|pd
init|=
name|planResult
operator|.
name|getPropDefn
argument_list|(
name|pr
argument_list|)
decl_stmt|;
if|if
condition|(
name|pd
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Query
name|q
init|=
name|createQuery
argument_list|(
name|planResult
operator|.
name|getPropertyName
argument_list|(
name|pr
argument_list|)
argument_list|,
name|pr
argument_list|,
name|pd
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|qs
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|Query
name|createLikeQuery
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|first
parameter_list|)
block|{
name|first
operator|=
name|first
operator|.
name|replace
argument_list|(
literal|'%'
argument_list|,
name|WildcardQuery
operator|.
name|WILDCARD_STRING
argument_list|)
expr_stmt|;
name|first
operator|=
name|first
operator|.
name|replace
argument_list|(
literal|'_'
argument_list|,
name|WildcardQuery
operator|.
name|WILDCARD_CHAR
argument_list|)
expr_stmt|;
name|int
name|indexOfWS
init|=
name|first
operator|.
name|indexOf
argument_list|(
name|WildcardQuery
operator|.
name|WILDCARD_STRING
argument_list|)
decl_stmt|;
name|int
name|indexOfWC
init|=
name|first
operator|.
name|indexOf
argument_list|(
name|WildcardQuery
operator|.
name|WILDCARD_CHAR
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|first
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexOfWS
operator|==
name|len
operator|||
name|indexOfWC
operator|==
name|len
condition|)
block|{
comment|// remove trailing "*" for prefixquery
name|first
operator|=
name|first
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|first
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|JCR_PATH
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
operator|new
name|PrefixQuery
argument_list|(
name|newPathTerm
argument_list|(
name|first
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|name
argument_list|,
name|first
argument_list|)
argument_list|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|JCR_PATH
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
operator|new
name|WildcardQuery
argument_list|(
name|newPathTerm
argument_list|(
name|first
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|name
argument_list|,
name|first
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
annotation|@
name|Nullable
specifier|private
specifier|static
name|Query
name|createQuery
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|PropertyRestriction
name|pr
parameter_list|,
name|PropertyDefinition
name|defn
parameter_list|)
block|{
name|int
name|propType
init|=
name|determinePropertyType
argument_list|(
name|defn
argument_list|,
name|pr
argument_list|)
decl_stmt|;
if|if
condition|(
name|pr
operator|.
name|isNullRestriction
argument_list|()
condition|)
block|{
return|return
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FieldNames
operator|.
name|NULL_PROPS
argument_list|,
name|defn
operator|.
name|name
argument_list|)
argument_list|)
return|;
block|}
comment|//If notNullCheckEnabled explicitly enabled use the simple TermQuery
comment|//otherwise later fallback to range query
if|if
condition|(
name|pr
operator|.
name|isNotNullRestriction
argument_list|()
operator|&&
name|defn
operator|.
name|notNullCheckEnabled
condition|)
block|{
return|return
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FieldNames
operator|.
name|NOT_NULL_PROPS
argument_list|,
name|defn
operator|.
name|name
argument_list|)
argument_list|)
return|;
block|}
switch|switch
condition|(
name|propType
condition|)
block|{
case|case
name|PropertyType
operator|.
name|DATE
case|:
block|{
name|Long
name|first
init|=
name|pr
operator|.
name|first
operator|!=
literal|null
condition|?
name|FieldFactory
operator|.
name|dateToLong
argument_list|(
name|pr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
argument_list|)
else|:
literal|null
decl_stmt|;
name|Long
name|last
init|=
name|pr
operator|.
name|last
operator|!=
literal|null
condition|?
name|FieldFactory
operator|.
name|dateToLong
argument_list|(
name|pr
operator|.
name|last
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|pr
operator|.
name|first
operator|!=
literal|null
operator|&&
name|pr
operator|.
name|first
operator|.
name|equals
argument_list|(
name|pr
operator|.
name|last
argument_list|)
operator|&&
name|pr
operator|.
name|firstIncluding
operator|&&
name|pr
operator|.
name|lastIncluding
condition|)
block|{
comment|// [property]=[value]
return|return
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
name|propertyName
argument_list|,
name|first
argument_list|,
name|first
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|first
operator|!=
literal|null
operator|&&
name|pr
operator|.
name|last
operator|!=
literal|null
condition|)
block|{
return|return
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
name|propertyName
argument_list|,
name|first
argument_list|,
name|last
argument_list|,
name|pr
operator|.
name|firstIncluding
argument_list|,
name|pr
operator|.
name|lastIncluding
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|first
operator|!=
literal|null
operator|&&
name|pr
operator|.
name|last
operator|==
literal|null
condition|)
block|{
comment|// '>'& '>=' use cases
return|return
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
name|propertyName
argument_list|,
name|first
argument_list|,
literal|null
argument_list|,
name|pr
operator|.
name|firstIncluding
argument_list|,
literal|true
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|last
operator|!=
literal|null
operator|&&
operator|!
name|pr
operator|.
name|last
operator|.
name|equals
argument_list|(
name|pr
operator|.
name|first
argument_list|)
condition|)
block|{
comment|// '<'& '<='
return|return
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
name|propertyName
argument_list|,
literal|null
argument_list|,
name|last
argument_list|,
literal|true
argument_list|,
name|pr
operator|.
name|lastIncluding
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|list
operator|!=
literal|null
condition|)
block|{
name|BooleanQuery
name|in
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyValue
name|value
range|:
name|pr
operator|.
name|list
control|)
block|{
name|Long
name|dateVal
init|=
name|FieldFactory
operator|.
name|dateToLong
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
argument_list|)
decl_stmt|;
name|in
operator|.
name|add
argument_list|(
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
name|propertyName
argument_list|,
name|dateVal
argument_list|,
name|dateVal
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
return|return
name|in
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|isNotNullRestriction
argument_list|()
condition|)
block|{
comment|// not null. For date lower bound of zero can be used
return|return
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
name|propertyName
argument_list|,
literal|0L
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
break|break;
block|}
case|case
name|PropertyType
operator|.
name|DOUBLE
case|:
block|{
name|Double
name|first
init|=
name|pr
operator|.
name|first
operator|!=
literal|null
condition|?
name|pr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
else|:
literal|null
decl_stmt|;
name|Double
name|last
init|=
name|pr
operator|.
name|last
operator|!=
literal|null
condition|?
name|pr
operator|.
name|last
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|pr
operator|.
name|first
operator|!=
literal|null
operator|&&
name|pr
operator|.
name|first
operator|.
name|equals
argument_list|(
name|pr
operator|.
name|last
argument_list|)
operator|&&
name|pr
operator|.
name|firstIncluding
operator|&&
name|pr
operator|.
name|lastIncluding
condition|)
block|{
comment|// [property]=[value]
return|return
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|propertyName
argument_list|,
name|first
argument_list|,
name|first
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|first
operator|!=
literal|null
operator|&&
name|pr
operator|.
name|last
operator|!=
literal|null
condition|)
block|{
return|return
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|propertyName
argument_list|,
name|first
argument_list|,
name|last
argument_list|,
name|pr
operator|.
name|firstIncluding
argument_list|,
name|pr
operator|.
name|lastIncluding
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|first
operator|!=
literal|null
operator|&&
name|pr
operator|.
name|last
operator|==
literal|null
condition|)
block|{
comment|// '>'& '>=' use cases
return|return
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|propertyName
argument_list|,
name|first
argument_list|,
literal|null
argument_list|,
name|pr
operator|.
name|firstIncluding
argument_list|,
literal|true
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|last
operator|!=
literal|null
operator|&&
operator|!
name|pr
operator|.
name|last
operator|.
name|equals
argument_list|(
name|pr
operator|.
name|first
argument_list|)
condition|)
block|{
comment|// '<'& '<='
return|return
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|propertyName
argument_list|,
literal|null
argument_list|,
name|last
argument_list|,
literal|true
argument_list|,
name|pr
operator|.
name|lastIncluding
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|list
operator|!=
literal|null
condition|)
block|{
name|BooleanQuery
name|in
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyValue
name|value
range|:
name|pr
operator|.
name|list
control|)
block|{
name|Double
name|doubleVal
init|=
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|in
operator|.
name|add
argument_list|(
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|propertyName
argument_list|,
name|doubleVal
argument_list|,
name|doubleVal
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
return|return
name|in
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|isNotNullRestriction
argument_list|()
condition|)
block|{
comment|// not null.
return|return
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|propertyName
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
break|break;
block|}
case|case
name|PropertyType
operator|.
name|LONG
case|:
block|{
name|Long
name|first
init|=
name|pr
operator|.
name|first
operator|!=
literal|null
condition|?
name|pr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|LONG
argument_list|)
else|:
literal|null
decl_stmt|;
name|Long
name|last
init|=
name|pr
operator|.
name|last
operator|!=
literal|null
condition|?
name|pr
operator|.
name|last
operator|.
name|getValue
argument_list|(
name|LONG
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|pr
operator|.
name|first
operator|!=
literal|null
operator|&&
name|pr
operator|.
name|first
operator|.
name|equals
argument_list|(
name|pr
operator|.
name|last
argument_list|)
operator|&&
name|pr
operator|.
name|firstIncluding
operator|&&
name|pr
operator|.
name|lastIncluding
condition|)
block|{
comment|// [property]=[value]
return|return
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
name|propertyName
argument_list|,
name|first
argument_list|,
name|first
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|first
operator|!=
literal|null
operator|&&
name|pr
operator|.
name|last
operator|!=
literal|null
condition|)
block|{
return|return
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
name|propertyName
argument_list|,
name|first
argument_list|,
name|last
argument_list|,
name|pr
operator|.
name|firstIncluding
argument_list|,
name|pr
operator|.
name|lastIncluding
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|first
operator|!=
literal|null
operator|&&
name|pr
operator|.
name|last
operator|==
literal|null
condition|)
block|{
comment|// '>'& '>=' use cases
return|return
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
name|propertyName
argument_list|,
name|first
argument_list|,
literal|null
argument_list|,
name|pr
operator|.
name|firstIncluding
argument_list|,
literal|true
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|last
operator|!=
literal|null
operator|&&
operator|!
name|pr
operator|.
name|last
operator|.
name|equals
argument_list|(
name|pr
operator|.
name|first
argument_list|)
condition|)
block|{
comment|// '<'& '<='
return|return
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
name|propertyName
argument_list|,
literal|null
argument_list|,
name|last
argument_list|,
literal|true
argument_list|,
name|pr
operator|.
name|lastIncluding
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|list
operator|!=
literal|null
condition|)
block|{
name|BooleanQuery
name|in
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyValue
name|value
range|:
name|pr
operator|.
name|list
control|)
block|{
name|Long
name|longVal
init|=
name|value
operator|.
name|getValue
argument_list|(
name|LONG
argument_list|)
decl_stmt|;
name|in
operator|.
name|add
argument_list|(
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
name|propertyName
argument_list|,
name|longVal
argument_list|,
name|longVal
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
return|return
name|in
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|isNotNullRestriction
argument_list|()
condition|)
block|{
comment|// not null.
return|return
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
name|propertyName
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
break|break;
block|}
default|default:
block|{
if|if
condition|(
name|pr
operator|.
name|isLike
condition|)
block|{
return|return
name|createLikeQuery
argument_list|(
name|propertyName
argument_list|,
name|pr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
return|;
block|}
comment|//TODO Confirm that all other types can be treated as string
name|String
name|first
init|=
name|pr
operator|.
name|first
operator|!=
literal|null
condition|?
name|pr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
else|:
literal|null
decl_stmt|;
name|String
name|last
init|=
name|pr
operator|.
name|last
operator|!=
literal|null
condition|?
name|pr
operator|.
name|last
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|pr
operator|.
name|first
operator|!=
literal|null
operator|&&
name|pr
operator|.
name|first
operator|.
name|equals
argument_list|(
name|pr
operator|.
name|last
argument_list|)
operator|&&
name|pr
operator|.
name|firstIncluding
operator|&&
name|pr
operator|.
name|lastIncluding
condition|)
block|{
comment|// [property]=[value]
return|return
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|propertyName
argument_list|,
name|first
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|first
operator|!=
literal|null
operator|&&
name|pr
operator|.
name|last
operator|!=
literal|null
condition|)
block|{
return|return
name|TermRangeQuery
operator|.
name|newStringRange
argument_list|(
name|propertyName
argument_list|,
name|first
argument_list|,
name|last
argument_list|,
name|pr
operator|.
name|firstIncluding
argument_list|,
name|pr
operator|.
name|lastIncluding
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|first
operator|!=
literal|null
operator|&&
name|pr
operator|.
name|last
operator|==
literal|null
condition|)
block|{
comment|// '>'& '>=' use cases
return|return
name|TermRangeQuery
operator|.
name|newStringRange
argument_list|(
name|propertyName
argument_list|,
name|first
argument_list|,
literal|null
argument_list|,
name|pr
operator|.
name|firstIncluding
argument_list|,
literal|true
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|last
operator|!=
literal|null
operator|&&
operator|!
name|pr
operator|.
name|last
operator|.
name|equals
argument_list|(
name|pr
operator|.
name|first
argument_list|)
condition|)
block|{
comment|// '<'& '<='
return|return
name|TermRangeQuery
operator|.
name|newStringRange
argument_list|(
name|propertyName
argument_list|,
literal|null
argument_list|,
name|last
argument_list|,
literal|true
argument_list|,
name|pr
operator|.
name|lastIncluding
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|list
operator|!=
literal|null
condition|)
block|{
name|BooleanQuery
name|in
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyValue
name|value
range|:
name|pr
operator|.
name|list
control|)
block|{
name|String
name|strVal
init|=
name|value
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
decl_stmt|;
name|in
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|propertyName
argument_list|,
name|strVal
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
return|return
name|in
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|isNotNullRestriction
argument_list|()
condition|)
block|{
return|return
operator|new
name|TermRangeQuery
argument_list|(
name|propertyName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"PropertyRestriction not handled "
operator|+
name|pr
operator|+
literal|" for index "
operator|+
name|defn
argument_list|)
throw|;
block|}
specifier|static
name|long
name|getVersion
parameter_list|(
name|IndexSearcher
name|indexSearcher
parameter_list|)
block|{
name|IndexReader
name|reader
init|=
name|indexSearcher
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|reader
operator|instanceof
name|DirectoryReader
condition|)
block|{
return|return
operator|(
operator|(
name|DirectoryReader
operator|)
name|reader
operator|)
operator|.
name|getVersion
argument_list|()
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|private
specifier|static
name|Query
name|createNodeNameQuery
parameter_list|(
name|PropertyRestriction
name|pr
parameter_list|)
block|{
name|String
name|first
init|=
name|pr
operator|.
name|first
operator|!=
literal|null
condition|?
name|pr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|pr
operator|.
name|first
operator|!=
literal|null
operator|&&
name|pr
operator|.
name|first
operator|.
name|equals
argument_list|(
name|pr
operator|.
name|last
argument_list|)
operator|&&
name|pr
operator|.
name|firstIncluding
operator|&&
name|pr
operator|.
name|lastIncluding
condition|)
block|{
comment|// [property]=[value]
return|return
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FieldNames
operator|.
name|NODE_NAME
argument_list|,
name|first
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|pr
operator|.
name|isLike
condition|)
block|{
return|return
name|createLikeQuery
argument_list|(
name|FieldNames
operator|.
name|NODE_NAME
argument_list|,
name|first
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"For nodeName queries only EQUALS and LIKE are supported "
operator|+
name|pr
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|void
name|addReferenceConstraint
parameter_list|(
name|String
name|uuid
parameter_list|,
name|List
argument_list|<
name|Query
argument_list|>
name|qs
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
comment|// getPlan call
name|qs
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"*"
argument_list|,
name|uuid
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// reference query
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|MultiFields
operator|.
name|getIndexedFields
argument_list|(
name|reader
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|fields
control|)
block|{
name|bq
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|f
argument_list|,
name|uuid
argument_list|)
argument_list|)
argument_list|,
name|SHOULD
argument_list|)
expr_stmt|;
block|}
name|qs
operator|.
name|add
argument_list|(
name|bq
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|addNodeTypeConstraints
parameter_list|(
name|IndexingRule
name|defn
parameter_list|,
name|List
argument_list|<
name|Query
argument_list|>
name|qs
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|PropertyDefinition
name|primaryType
init|=
name|defn
operator|.
name|getConfig
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
comment|//TODO OAK-2198 Add proper nodeType query support
if|if
condition|(
name|primaryType
operator|!=
literal|null
operator|&&
name|primaryType
operator|.
name|propertyIndex
condition|)
block|{
for|for
control|(
name|String
name|type
range|:
name|filter
operator|.
name|getPrimaryTypes
argument_list|()
control|)
block|{
name|bq
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|type
argument_list|)
argument_list|)
argument_list|,
name|SHOULD
argument_list|)
expr_stmt|;
block|}
block|}
name|PropertyDefinition
name|mixinType
init|=
name|defn
operator|.
name|getConfig
argument_list|(
name|JCR_MIXINTYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|mixinType
operator|!=
literal|null
operator|&&
name|mixinType
operator|.
name|propertyIndex
condition|)
block|{
for|for
control|(
name|String
name|type
range|:
name|filter
operator|.
name|getMixinTypes
argument_list|()
control|)
block|{
name|bq
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|JCR_MIXINTYPES
argument_list|,
name|type
argument_list|)
argument_list|)
argument_list|,
name|SHOULD
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bq
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|qs
operator|.
name|add
argument_list|(
name|bq
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|Query
name|getFullTextQuery
parameter_list|(
specifier|final
name|IndexPlan
name|plan
parameter_list|,
name|FullTextExpression
name|ft
parameter_list|,
specifier|final
name|Analyzer
name|analyzer
parameter_list|,
specifier|final
name|FulltextQueryTermsProvider
name|augmentor
parameter_list|)
block|{
specifier|final
name|PlanResult
name|pr
init|=
name|getPlanResult
argument_list|(
name|plan
argument_list|)
decl_stmt|;
comment|// a reference to the query, so it can be set in the visitor
comment|// (a "non-local return")
specifier|final
name|AtomicReference
argument_list|<
name|Query
argument_list|>
name|result
init|=
operator|new
name|AtomicReference
argument_list|<
name|Query
argument_list|>
argument_list|()
decl_stmt|;
name|ft
operator|.
name|accept
argument_list|(
operator|new
name|FullTextVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|FullTextContains
name|contains
parameter_list|)
block|{
name|visitTerm
argument_list|(
name|contains
operator|.
name|getPropertyName
argument_list|()
argument_list|,
name|contains
operator|.
name|getRawText
argument_list|()
argument_list|,
literal|null
argument_list|,
name|contains
operator|.
name|isNot
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|FullTextOr
name|or
parameter_list|)
block|{
name|BooleanQuery
name|q
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|FullTextExpression
name|e
range|:
name|or
operator|.
name|list
control|)
block|{
name|Query
name|x
init|=
name|getFullTextQuery
argument_list|(
name|plan
argument_list|,
name|e
argument_list|,
name|analyzer
argument_list|,
name|augmentor
argument_list|)
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|x
argument_list|,
name|SHOULD
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|q
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|FullTextAnd
name|and
parameter_list|)
block|{
name|BooleanQuery
name|q
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|FullTextExpression
name|e
range|:
name|and
operator|.
name|list
control|)
block|{
name|Query
name|x
init|=
name|getFullTextQuery
argument_list|(
name|plan
argument_list|,
name|e
argument_list|,
name|analyzer
argument_list|,
name|augmentor
argument_list|)
decl_stmt|;
comment|/* Only unwrap the clause if MUST_NOT(x) */
name|boolean
name|hasMustNot
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|x
operator|instanceof
name|BooleanQuery
condition|)
block|{
name|BooleanQuery
name|bq
init|=
operator|(
name|BooleanQuery
operator|)
name|x
decl_stmt|;
if|if
condition|(
operator|(
name|bq
operator|.
name|getClauses
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|)
operator|&&
operator|(
name|bq
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
operator|.
name|getOccur
argument_list|()
operator|==
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
operator|)
condition|)
block|{
name|hasMustNot
operator|=
literal|true
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|bq
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|hasMustNot
condition|)
block|{
name|q
operator|.
name|add
argument_list|(
name|x
argument_list|,
name|MUST
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|set
argument_list|(
name|q
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|FullTextTerm
name|term
parameter_list|)
block|{
return|return
name|visitTerm
argument_list|(
name|term
operator|.
name|getPropertyName
argument_list|()
argument_list|,
name|term
operator|.
name|getText
argument_list|()
argument_list|,
name|term
operator|.
name|getBoost
argument_list|()
argument_list|,
name|term
operator|.
name|isNot
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|visitTerm
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|boost
parameter_list|,
name|boolean
name|not
parameter_list|)
block|{
name|String
name|p
init|=
name|getLuceneFieldName
argument_list|(
name|propertyName
argument_list|,
name|pr
argument_list|)
decl_stmt|;
name|Query
name|q
init|=
name|tokenToQuery
argument_list|(
name|text
argument_list|,
name|p
argument_list|,
name|pr
argument_list|,
name|analyzer
argument_list|,
name|augmentor
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|boost
operator|!=
literal|null
condition|)
block|{
name|q
operator|.
name|setBoost
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|boost
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|not
condition|)
block|{
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|q
argument_list|,
name|MUST_NOT
argument_list|)
expr_stmt|;
name|result
operator|.
name|set
argument_list|(
name|bq
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|set
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|get
argument_list|()
return|;
block|}
specifier|static
name|String
name|getLuceneFieldName
parameter_list|(
annotation|@
name|Nullable
name|String
name|p
parameter_list|,
name|PlanResult
name|pr
parameter_list|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
return|return
name|FieldNames
operator|.
name|FULLTEXT
return|;
block|}
if|if
condition|(
name|isNodePath
argument_list|(
name|p
argument_list|)
condition|)
block|{
if|if
condition|(
name|pr
operator|.
name|isPathTransformed
argument_list|()
condition|)
block|{
name|p
operator|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Get rid of /* as aggregated fulltext field name is the
comment|//node relative path
name|p
operator|=
name|FieldNames
operator|.
name|createFulltextFieldName
argument_list|(
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|pr
operator|.
name|isPathTransformed
argument_list|()
condition|)
block|{
name|p
operator|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|p
operator|=
name|FieldNames
operator|.
name|createAnalyzedFieldName
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|p
operator|=
name|FieldNames
operator|.
name|FULLTEXT
expr_stmt|;
block|}
return|return
name|p
return|;
block|}
specifier|private
specifier|static
name|Query
name|tokenToQuery
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|PlanResult
name|pr
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|FulltextQueryTermsProvider
name|augmentor
parameter_list|)
block|{
name|Query
name|ret
decl_stmt|;
name|IndexingRule
name|indexingRule
init|=
name|pr
operator|.
name|indexingRule
decl_stmt|;
comment|//Expand the query on fulltext field
if|if
condition|(
name|FieldNames
operator|.
name|FULLTEXT
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|&&
operator|!
name|indexingRule
operator|.
name|getNodeScopeAnalyzedProps
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|BooleanQuery
name|in
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyDefinition
name|pd
range|:
name|indexingRule
operator|.
name|getNodeScopeAnalyzedProps
argument_list|()
control|)
block|{
name|Query
name|q
init|=
name|tokenToQuery
argument_list|(
name|text
argument_list|,
name|FieldNames
operator|.
name|createAnalyzedFieldName
argument_list|(
name|pd
operator|.
name|name
argument_list|)
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
name|q
operator|.
name|setBoost
argument_list|(
name|pd
operator|.
name|boost
argument_list|)
expr_stmt|;
name|in
operator|.
name|add
argument_list|(
name|q
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
comment|//Add the query for actual fulltext field also. That query would
comment|//not be boosted
name|in
operator|.
name|add
argument_list|(
name|tokenToQuery
argument_list|(
name|text
argument_list|,
name|fieldName
argument_list|,
name|analyzer
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|ret
operator|=
name|in
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|tokenToQuery
argument_list|(
name|text
argument_list|,
name|fieldName
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
comment|//Augment query terms if available (as a 'SHOULD' clause)
if|if
condition|(
name|augmentor
operator|!=
literal|null
operator|&&
name|FieldNames
operator|.
name|FULLTEXT
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|Query
name|subQuery
init|=
name|augmentor
operator|.
name|getQueryTerm
argument_list|(
name|text
argument_list|,
name|analyzer
argument_list|,
name|pr
operator|.
name|indexDefinition
operator|.
name|getDefinitionNodeState
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|subQuery
operator|!=
literal|null
condition|)
block|{
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
name|ret
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|subQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|ret
operator|=
name|query
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|static
name|Query
name|tokenToQuery
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
block|{
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StandardQueryParser
name|parserHelper
init|=
operator|new
name|StandardQueryParser
argument_list|(
name|analyzer
argument_list|)
decl_stmt|;
name|parserHelper
operator|.
name|setAllowLeadingWildcard
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|parserHelper
operator|.
name|setDefaultOperator
argument_list|(
name|StandardQueryConfigHandler
operator|.
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
name|text
operator|=
name|rewriteQueryText
argument_list|(
name|text
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|parserHelper
operator|.
name|parse
argument_list|(
name|text
argument_list|,
name|fieldName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|QueryNodeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|Query
name|newDepthQuery
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|int
name|depth
init|=
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|path
argument_list|)
operator|+
literal|1
decl_stmt|;
return|return
name|NumericRangeQuery
operator|.
name|newIntRange
argument_list|(
name|FieldNames
operator|.
name|PATH_DEPTH
argument_list|,
name|depth
argument_list|,
name|depth
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"Guava"
argument_list|)
specifier|private
specifier|static
name|Iterator
argument_list|<
name|FulltextResultRow
argument_list|>
name|mergePropertyIndexResult
parameter_list|(
name|IndexPlan
name|plan
parameter_list|,
name|NodeState
name|rootState
parameter_list|,
name|Iterator
argument_list|<
name|FulltextResultRow
argument_list|>
name|itr
parameter_list|)
block|{
name|PlanResult
name|pr
init|=
name|getPlanResult
argument_list|(
name|plan
argument_list|)
decl_stmt|;
name|HybridPropertyIndexLookup
name|lookup
init|=
operator|new
name|HybridPropertyIndexLookup
argument_list|(
name|pr
operator|.
name|indexPath
argument_list|,
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|rootState
argument_list|,
name|pr
operator|.
name|indexPath
argument_list|)
argument_list|,
name|plan
operator|.
name|getPathPrefix
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|PropertyIndexResult
name|pir
init|=
name|pr
operator|.
name|getPropertyIndexResult
argument_list|()
decl_stmt|;
name|FluentIterable
argument_list|<
name|String
argument_list|>
name|paths
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pir
operator|!=
literal|null
condition|)
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|queryResult
init|=
name|lookup
operator|.
name|query
argument_list|(
name|plan
operator|.
name|getFilter
argument_list|()
argument_list|,
name|pir
operator|.
name|propertyName
argument_list|,
name|pir
operator|.
name|pr
argument_list|)
decl_stmt|;
name|paths
operator|=
name|FluentIterable
operator|.
name|from
argument_list|(
name|queryResult
argument_list|)
operator|.
name|transform
argument_list|(
name|path
lambda|->
name|pr
operator|.
name|isPathTransformed
argument_list|()
condition|?
name|pr
operator|.
name|transformPath
argument_list|(
name|path
argument_list|)
else|:
name|path
argument_list|)
operator|.
name|filter
argument_list|(
name|notNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkState
argument_list|(
name|pr
operator|.
name|evaluateSyncNodeTypeRestriction
argument_list|()
argument_list|)
expr_stmt|;
comment|//Either of property or nodetype should not be null
name|Filter
name|filter
init|=
name|plan
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|paths
operator|=
name|FluentIterable
operator|.
name|from
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|lookup
operator|.
name|query
argument_list|(
name|filter
argument_list|,
name|JCR_PRIMARYTYPE
argument_list|,
name|newName
argument_list|(
name|filter
operator|.
name|getPrimaryTypes
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|lookup
operator|.
name|query
argument_list|(
name|filter
argument_list|,
name|JCR_MIXINTYPES
argument_list|,
name|newName
argument_list|(
name|filter
operator|.
name|getMixinTypes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//No need for path restriction evaluation as thats taken care by PropertyIndex impl itself
comment|//via content mirror strategy
name|FluentIterable
argument_list|<
name|FulltextResultRow
argument_list|>
name|propIndex
init|=
name|paths
operator|.
name|transform
argument_list|(
name|path
lambda|->
operator|new
name|FulltextResultRow
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
comment|//Property index itr should come first
return|return
name|Iterators
operator|.
name|concat
argument_list|(
name|propIndex
operator|.
name|iterator
argument_list|()
argument_list|,
name|itr
argument_list|)
return|;
block|}
specifier|static
class|class
name|LuceneFacetProvider
implements|implements
name|FacetProvider
block|{
specifier|private
specifier|final
name|Facets
name|facets
decl_stmt|;
name|LuceneFacetProvider
parameter_list|(
name|Facets
name|facets
parameter_list|)
block|{
name|this
operator|.
name|facets
operator|=
name|facets
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Facet
argument_list|>
name|getFacets
parameter_list|(
name|int
name|numberOfFacets
parameter_list|,
name|String
name|columnName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|facetFieldName
init|=
name|FulltextIndex
operator|.
name|parseFacetField
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|facets
operator|!=
literal|null
condition|)
block|{
name|ImmutableList
operator|.
name|Builder
name|res
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Facet
argument_list|>
argument_list|()
decl_stmt|;
name|FacetResult
name|topChildren
init|=
name|facets
operator|.
name|getTopChildren
argument_list|(
name|numberOfFacets
argument_list|,
name|facetFieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|topChildren
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|LabelAndValue
name|lav
range|:
name|topChildren
operator|.
name|labelValues
control|)
block|{
name|res
operator|.
name|add
argument_list|(
operator|new
name|Facet
argument_list|(
name|lav
operator|.
name|label
argument_list|,
name|lav
operator|.
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|res
operator|.
name|build
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

