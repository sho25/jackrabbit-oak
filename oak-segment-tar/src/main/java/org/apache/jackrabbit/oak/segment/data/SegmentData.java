begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|data
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|WritableByteChannel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|HexDump
import|;
end_import

begin_comment
comment|/**  * Access the data of a segment.  *<p>  * A segment is composed of a header and the proper data. The header has a  * fixed- and a variable-length part.  *<p>  * The fixed-length part of the header contains a {@link #getSignature()  * signature}, which is a string that uniquely identifies the rest of the  * content as a segment; a {@link #getVersion()}, which specifies the version of  * the binary format used to serialize the content of the segment; a {@link  * #getFullGeneration() full generation}, which describes the generation of the  * segment with regards to full compaction; a {@link #getGeneration()  * generation}, which identifies the generation of the segment with regards to  * full or tail compaction; a {@link #isCompacted() compacted flag}, which  * determines if the segment was written by a compaction operation; the {@link  * #getRecordReferencesCount() number of record references}, which is the number  * of record entries in the segment; the {@link #getSegmentReferencesCount()  * number of segment references}, which is the number of identifiers of other  * segments used by this segment.  *<p>  * The variable part of the header contains the list of segment references and  * the list of record references. A segment references is composed by the {@link  * #getSegmentReferenceMsb(int) most significant bits} and {@link  * #getSegmentReferenceLsb(int) lsb} of the segment identifier. A record  * reference is composed of a {@link #getRecordReferenceNumber(int) record  * number}, a {@link #getRecordReferenceType(int) record type} and a {@link  * #getRecordReferenceOffset(int) record offset}.  *<p>  * The most prominent use for a segment is to hold record data. Many methods of  * this class allows access to the record data. These methods accept an integer  * representing an absolute position pointing to the record data. The absolute  * position, though, is virtual: it is computed on a virtual segment 256K long.  * This offset is usually obtained by accessing the {@link  * #getRecordReferenceOffset(int) record offset} of a record reference entry.  * The class will normalize the offset for the actual size of the segment, which  * can be smaller than 256K. It is acceptable to displace the offset of a record  * reference entry by a positive amount. This can be useful to access a field of  * a composite record saved at a specific offset.  */
end_comment

begin_class
specifier|public
class|class
name|SegmentData
block|{
specifier|private
specifier|static
specifier|final
name|int
name|HEADER_SIZE
init|=
literal|32
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SIGNATURE_OFFSET
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SIGNATURE_LENGTH
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|VERSION_OFFSET
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|FULL_GENERATION_OFFSET
init|=
literal|4
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|GENERATION_OFFSET
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SEGMENT_REFERENCES_COUNT_OFFSET
init|=
literal|14
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SEGMENT_REFERENCE_LENGTH
init|=
literal|16
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|RECORD_REFERENCES_COUNT_OFFSET
init|=
literal|18
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|RECORD_REFERENCE_LENGTH
init|=
literal|9
decl_stmt|;
comment|// Relative to a segment reference - BEGIN
specifier|private
specifier|static
specifier|final
name|int
name|SEGMENT_REFERENCE_MSB_OFFSET
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SEGMENT_REFERENCE_LSB_OFFSET
init|=
literal|8
decl_stmt|;
comment|// Relative to a segment reference - END
comment|// Relative to a record reference - BEGIN
specifier|private
specifier|static
specifier|final
name|int
name|RECORD_REFERENCE_NUMBER_OFFSET
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|RECORD_REFERENCE_TYPE_OFFSET
init|=
literal|4
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|RECORD_REFERENCE_OFFSET_OFFSET
init|=
literal|5
decl_stmt|;
comment|// Relative to a record reference - END
specifier|private
specifier|static
specifier|final
name|int
name|MAX_SMALL_LENGTH_VALUE
init|=
literal|1
operator|<<
literal|7
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_MEDIUM_LENGTH_VALUE
init|=
operator|(
literal|1
operator|<<
literal|14
operator|)
operator|+
name|MAX_SMALL_LENGTH_VALUE
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_SEGMENT_SIZE
init|=
literal|1
operator|<<
literal|18
decl_stmt|;
specifier|public
specifier|static
name|SegmentData
name|newSegmentData
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|)
block|{
return|return
operator|new
name|SegmentData
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SegmentData
name|newSegmentData
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
return|return
operator|new
name|SegmentData
argument_list|(
name|buffer
argument_list|)
return|;
block|}
specifier|private
name|SegmentData
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
block|}
specifier|private
specifier|final
name|ByteBuffer
name|buffer
decl_stmt|;
specifier|public
name|byte
name|getVersion
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|get
argument_list|(
name|VERSION_OFFSET
argument_list|)
return|;
block|}
specifier|public
name|String
name|getSignature
parameter_list|()
block|{
name|byte
index|[]
name|signature
init|=
operator|new
name|byte
index|[
name|SIGNATURE_LENGTH
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SIGNATURE_LENGTH
condition|;
name|i
operator|++
control|)
block|{
name|signature
index|[
name|i
index|]
operator|=
name|buffer
operator|.
name|get
argument_list|(
name|SIGNATURE_OFFSET
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|signature
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
specifier|public
name|int
name|getFullGeneration
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|getInt
argument_list|(
name|FULL_GENERATION_OFFSET
argument_list|)
operator|&
literal|0x7fffffff
return|;
block|}
specifier|public
name|boolean
name|isCompacted
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|getInt
argument_list|(
name|FULL_GENERATION_OFFSET
argument_list|)
operator|<
literal|0
return|;
block|}
specifier|public
name|int
name|getGeneration
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|getInt
argument_list|(
name|GENERATION_OFFSET
argument_list|)
return|;
block|}
specifier|public
name|int
name|getSegmentReferencesCount
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|getInt
argument_list|(
name|SEGMENT_REFERENCES_COUNT_OFFSET
argument_list|)
return|;
block|}
specifier|public
name|int
name|getRecordReferencesCount
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|getInt
argument_list|(
name|RECORD_REFERENCES_COUNT_OFFSET
argument_list|)
return|;
block|}
specifier|private
name|int
name|getRecordReferenceBase
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|HEADER_SIZE
operator|+
name|getSegmentReferencesCount
argument_list|()
operator|*
name|SEGMENT_REFERENCE_LENGTH
operator|+
name|i
operator|*
name|RECORD_REFERENCE_LENGTH
return|;
block|}
specifier|public
name|int
name|getRecordReferenceNumber
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|buffer
operator|.
name|getInt
argument_list|(
name|getRecordReferenceBase
argument_list|(
name|i
argument_list|)
operator|+
name|RECORD_REFERENCE_NUMBER_OFFSET
argument_list|)
return|;
block|}
specifier|public
name|byte
name|getRecordReferenceType
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|buffer
operator|.
name|get
argument_list|(
name|getRecordReferenceBase
argument_list|(
name|i
argument_list|)
operator|+
name|RECORD_REFERENCE_TYPE_OFFSET
argument_list|)
return|;
block|}
specifier|public
name|int
name|getRecordReferenceOffset
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|buffer
operator|.
name|getInt
argument_list|(
name|getRecordReferenceBase
argument_list|(
name|i
argument_list|)
operator|+
name|RECORD_REFERENCE_OFFSET_OFFSET
argument_list|)
return|;
block|}
specifier|private
name|int
name|getSegmentReferenceBase
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|HEADER_SIZE
operator|+
name|i
operator|*
name|SEGMENT_REFERENCE_LENGTH
return|;
block|}
specifier|public
name|long
name|getSegmentReferenceMsb
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|buffer
operator|.
name|getLong
argument_list|(
name|getSegmentReferenceBase
argument_list|(
name|i
argument_list|)
operator|+
name|SEGMENT_REFERENCE_MSB_OFFSET
argument_list|)
return|;
block|}
specifier|public
name|long
name|getSegmentReferenceLsb
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|buffer
operator|.
name|getLong
argument_list|(
name|getSegmentReferenceBase
argument_list|(
name|i
argument_list|)
operator|+
name|SEGMENT_REFERENCE_LSB_OFFSET
argument_list|)
return|;
block|}
specifier|private
name|int
name|index
parameter_list|(
name|int
name|recordReferenceOffset
parameter_list|)
block|{
return|return
name|buffer
operator|.
name|limit
argument_list|()
operator|-
operator|(
name|MAX_SEGMENT_SIZE
operator|-
name|recordReferenceOffset
operator|)
return|;
block|}
specifier|public
name|long
name|readLength
parameter_list|(
name|int
name|recordReferenceOffset
parameter_list|)
block|{
return|return
name|internalReadLength
argument_list|(
name|index
argument_list|(
name|recordReferenceOffset
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|long
name|internalReadLength
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|int
name|head
init|=
name|buffer
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|&
literal|0xff
decl_stmt|;
if|if
condition|(
operator|(
name|head
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
block|{
return|return
name|head
return|;
block|}
if|if
condition|(
operator|(
name|head
operator|&
literal|0x40
operator|)
operator|==
literal|0
condition|)
block|{
return|return
name|MAX_SMALL_LENGTH_VALUE
operator|+
operator|(
name|buffer
operator|.
name|getShort
argument_list|(
name|index
argument_list|)
operator|&
literal|0x3fff
operator|)
return|;
block|}
return|return
name|MAX_MEDIUM_LENGTH_VALUE
operator|+
operator|(
name|buffer
operator|.
name|getLong
argument_list|(
name|index
argument_list|)
operator|&
literal|0x3fffffffffffffffL
operator|)
return|;
block|}
specifier|public
name|StringData
name|readString
parameter_list|(
name|int
name|recordReferenceOffset
parameter_list|)
block|{
return|return
name|internalReadString
argument_list|(
name|index
argument_list|(
name|recordReferenceOffset
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|StringData
name|internalReadString
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|long
name|length
init|=
name|internalReadLength
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|<
name|MAX_SMALL_LENGTH_VALUE
condition|)
block|{
return|return
name|internalReadString
argument_list|(
name|index
operator|+
name|Byte
operator|.
name|BYTES
argument_list|,
operator|(
name|int
operator|)
name|length
argument_list|)
return|;
block|}
if|if
condition|(
name|length
operator|<
name|MAX_MEDIUM_LENGTH_VALUE
condition|)
block|{
return|return
name|internalReadString
argument_list|(
name|index
operator|+
name|Short
operator|.
name|BYTES
argument_list|,
operator|(
name|int
operator|)
name|length
argument_list|)
return|;
block|}
if|if
condition|(
name|length
operator|<
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
operator|new
name|StringData
argument_list|(
name|internalReadRecordId
argument_list|(
name|index
operator|+
name|Long
operator|.
name|BYTES
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|length
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"String is too long: "
operator|+
name|length
argument_list|)
throw|;
block|}
specifier|private
name|StringData
name|internalReadString
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|ByteBuffer
name|duplicate
init|=
name|buffer
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|duplicate
operator|.
name|position
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|duplicate
operator|.
name|limit
argument_list|(
name|index
operator|+
name|length
argument_list|)
expr_stmt|;
name|String
name|string
init|=
name|Charsets
operator|.
name|UTF_8
operator|.
name|decode
argument_list|(
name|duplicate
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
operator|new
name|StringData
argument_list|(
name|string
argument_list|,
name|length
argument_list|)
return|;
block|}
specifier|public
name|RecordIdData
name|readRecordId
parameter_list|(
name|int
name|recordReferenceOffset
parameter_list|)
block|{
return|return
name|internalReadRecordId
argument_list|(
name|index
argument_list|(
name|recordReferenceOffset
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|RecordIdData
name|internalReadRecordId
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|int
name|segmentReference
init|=
name|buffer
operator|.
name|getShort
argument_list|(
name|index
argument_list|)
operator|&
literal|0xffff
decl_stmt|;
name|int
name|recordNumber
init|=
name|buffer
operator|.
name|getInt
argument_list|(
name|index
operator|+
name|Short
operator|.
name|BYTES
argument_list|)
decl_stmt|;
return|return
operator|new
name|RecordIdData
argument_list|(
name|segmentReference
argument_list|,
name|recordNumber
argument_list|)
return|;
block|}
specifier|public
name|byte
name|readByte
parameter_list|(
name|int
name|recordReferenceOffset
parameter_list|)
block|{
return|return
name|buffer
operator|.
name|get
argument_list|(
name|index
argument_list|(
name|recordReferenceOffset
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|int
name|readInt
parameter_list|(
name|int
name|recordReferenceOffset
parameter_list|)
block|{
return|return
name|buffer
operator|.
name|getInt
argument_list|(
name|index
argument_list|(
name|recordReferenceOffset
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|short
name|readShort
parameter_list|(
name|int
name|recordReferenceOffset
parameter_list|)
block|{
return|return
name|buffer
operator|.
name|getShort
argument_list|(
name|index
argument_list|(
name|recordReferenceOffset
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|long
name|readLong
parameter_list|(
name|int
name|recordReferenceOffset
parameter_list|)
block|{
return|return
name|buffer
operator|.
name|getLong
argument_list|(
name|index
argument_list|(
name|recordReferenceOffset
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|ByteBuffer
name|readBytes
parameter_list|(
name|int
name|recordReferenceOffset
parameter_list|,
name|int
name|size
parameter_list|)
block|{
return|return
name|internalReadBytes
argument_list|(
name|index
argument_list|(
name|recordReferenceOffset
argument_list|)
argument_list|,
name|size
argument_list|)
return|;
block|}
specifier|private
name|ByteBuffer
name|internalReadBytes
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|ByteBuffer
name|duplicate
init|=
name|buffer
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|duplicate
operator|.
name|position
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|duplicate
operator|.
name|limit
argument_list|(
name|index
operator|+
name|size
argument_list|)
expr_stmt|;
return|return
name|duplicate
operator|.
name|slice
argument_list|()
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|remaining
argument_list|()
return|;
block|}
specifier|public
name|void
name|hexDump
parameter_list|(
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|buffer
operator|.
name|remaining
argument_list|()
index|]
decl_stmt|;
name|buffer
operator|.
name|duplicate
argument_list|()
operator|.
name|get
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|HexDump
operator|.
name|dump
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|stream
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|binDump
parameter_list|(
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBuffer
name|data
init|=
name|buffer
operator|.
name|duplicate
argument_list|()
decl_stmt|;
try|try
init|(
name|WritableByteChannel
name|channel
init|=
name|Channels
operator|.
name|newChannel
argument_list|(
name|stream
argument_list|)
init|)
block|{
while|while
condition|(
name|data
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|channel
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|int
name|estimateMemoryUsage
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|isDirect
argument_list|()
condition|?
literal|0
else|:
name|buffer
operator|.
name|remaining
argument_list|()
return|;
block|}
block|}
end_class

end_unit

