begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|observation
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|jmx
operator|.
name|EventListenerMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|observation
operator|.
name|ListenerTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ConsolidatedListenerMBeanTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testListenerStatsData
parameter_list|()
throws|throws
name|MalformedObjectNameException
block|{
name|ConsolidatedListenerMBeanImpl
name|consolidatedListener
init|=
operator|new
name|ConsolidatedListenerMBeanImpl
argument_list|()
decl_stmt|;
name|EventListener
name|listener
init|=
operator|new
name|Listener
argument_list|(
operator|new
name|AtomicInteger
argument_list|()
argument_list|)
decl_stmt|;
name|EventListenerMBean
name|mbean
init|=
operator|new
name|ListenerTracker
argument_list|(
name|listener
argument_list|,
literal|0
argument_list|,
literal|"/"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
operator|.
name|getListenerMBean
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ObjectName
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"jmx.objectname"
argument_list|,
operator|new
name|ObjectName
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|consolidatedListener
operator|.
name|bindListenerMBean
argument_list|(
name|mbean
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|TabularData
name|data
init|=
name|consolidatedListener
operator|.
name|getListenerStats
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|Listener
implements|implements
name|EventListener
block|{
specifier|private
specifier|final
name|AtomicInteger
name|eventCount
decl_stmt|;
name|Listener
parameter_list|(
name|AtomicInteger
name|eventCount
parameter_list|)
block|{
name|this
operator|.
name|eventCount
operator|=
name|eventCount
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onEvent
parameter_list|(
name|EventIterator
name|events
parameter_list|)
block|{
for|for
control|(
init|;
name|events
operator|.
name|hasNext
argument_list|()
condition|;
name|events
operator|.
name|nextEvent
argument_list|()
control|)
block|{
name|eventCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

