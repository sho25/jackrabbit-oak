begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * Base class for {@code Validator} implementations that can be secured.  * That is, with exception of {@link Validator#childNodeChanged(String, NodeState, NodeState)},  * the call back methods of the wrapped validator are only called when its receiver has sufficient  * rights to access the respective items.  *<p>  * Implementors must implement the {@link #create(Tree, Tree, Validator)} factory method for  * creating {@code SecurableValidator} instances. Further implementors should override  * {@link #canRead(Tree, PropertyState, Tree, PropertyState)} and {@link #canRead(Tree, Tree)}  * to determine whether the passed states are accessible. Finally implementors should override,  * {@link #secureBefore(String, NodeState)}, and {@link #secureAfter(String, NodeState)}} wrapping  * the passed node state into a node state that restricts access to accessible child nodes and  * properties.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|SecurableValidator
implements|implements
name|Validator
block|{
comment|/**      * Base tree against which the validation is performed      */
specifier|private
specifier|final
name|Tree
name|beforeTree
decl_stmt|;
comment|/**      * Changed tree against which the validation is performed      */
specifier|private
specifier|final
name|Tree
name|afterTree
decl_stmt|;
comment|/**      * Validator receiving call backs for accessible items      */
specifier|private
specifier|final
name|Validator
name|validator
decl_stmt|;
comment|/**      * Create a new instance wrapping the passed {@code validator}.      * @param beforeTree base tree against which the validation is performed      * @param afterTree  changed tree against which the validation is performed      * @param validator  the wrapped validator      */
specifier|protected
name|SecurableValidator
parameter_list|(
name|Tree
name|beforeTree
parameter_list|,
name|Tree
name|afterTree
parameter_list|,
name|Validator
name|validator
parameter_list|)
block|{
name|this
operator|.
name|beforeTree
operator|=
name|beforeTree
expr_stmt|;
name|this
operator|.
name|afterTree
operator|=
name|afterTree
expr_stmt|;
name|this
operator|.
name|validator
operator|=
name|validator
expr_stmt|;
block|}
comment|/**      * Factory method for creating {@code SecurableValidator} instances of the concrete sub type.      * @return  a new {@code SecurableValidator}      */
annotation|@
name|CheckForNull
specifier|protected
specifier|abstract
name|SecurableValidator
name|create
parameter_list|(
name|Tree
name|beforeTree
parameter_list|,
name|Tree
name|afterTree
parameter_list|,
name|Validator
name|secureValidator
parameter_list|)
function_decl|;
comment|/**      * Determine whether a property is accessible      * @param beforeParent parent before the changes      * @param before  before state of the property      * @param afterParent parent after the changes      * @param after   after state of the property      * @return  {@code true} if accessible, {@code false} otherwise.      */
specifier|protected
name|boolean
name|canRead
parameter_list|(
name|Tree
name|beforeParent
parameter_list|,
name|PropertyState
name|before
parameter_list|,
name|Tree
name|afterParent
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Determine whether a node is accessible      * @param before  before state of the node      * @param after   after state of the node      * @return  {@code true} if accessible, {@code false} otherwise.      */
specifier|protected
name|boolean
name|canRead
parameter_list|(
name|Tree
name|before
parameter_list|,
name|Tree
name|after
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Secure the before state of a child node such that it only provides      * accessible child nodes and properties.      * @param name       name of the child node      * @param nodeState  before state of the child node      * @return  secured before state      */
annotation|@
name|Nonnull
specifier|protected
name|NodeState
name|secureBefore
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|nodeState
parameter_list|)
block|{
return|return
name|nodeState
return|;
block|}
comment|/**      * Secure the after state of a child node such that it only provides      * accessible child nodes and properties.      * @param name       name of the child node      * @param nodeState  after state of the child node      * @return  secured after state      */
annotation|@
name|Nonnull
specifier|protected
name|NodeState
name|secureAfter
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|nodeState
parameter_list|)
block|{
return|return
name|nodeState
return|;
block|}
comment|//------------------------------------------------------------< Validator>---
annotation|@
name|Override
specifier|public
name|void
name|enter
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|leave
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|canRead
argument_list|(
name|beforeTree
argument_list|,
literal|null
argument_list|,
name|afterTree
argument_list|,
name|after
argument_list|)
condition|)
block|{
name|validator
operator|.
name|propertyAdded
argument_list|(
name|after
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|canRead
argument_list|(
name|beforeTree
argument_list|,
name|before
argument_list|,
name|afterTree
argument_list|,
name|after
argument_list|)
condition|)
block|{
name|validator
operator|.
name|propertyChanged
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|canRead
argument_list|(
name|beforeTree
argument_list|,
name|before
argument_list|,
name|afterTree
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|validator
operator|.
name|propertyDeleted
argument_list|(
name|before
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|canRead
argument_list|(
name|beforeTree
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
argument_list|,
name|afterTree
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
argument_list|)
condition|)
block|{
name|Validator
name|childValidator
init|=
name|validator
operator|.
name|childNodeAdded
argument_list|(
name|name
argument_list|,
name|secureAfter
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|childValidator
operator|==
literal|null
condition|?
literal|null
else|:
name|create
argument_list|(
name|beforeTree
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
argument_list|,
name|afterTree
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
argument_list|,
name|childValidator
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Validator
name|childValidator
init|=
name|validator
operator|.
name|childNodeChanged
argument_list|(
name|name
argument_list|,
name|secureBefore
argument_list|(
name|name
argument_list|,
name|before
argument_list|)
argument_list|,
name|secureAfter
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|childValidator
operator|==
literal|null
condition|?
literal|null
else|:
name|create
argument_list|(
name|beforeTree
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
argument_list|,
name|afterTree
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
argument_list|,
name|childValidator
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|canRead
argument_list|(
name|beforeTree
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
argument_list|,
name|afterTree
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
argument_list|)
condition|)
block|{
name|Validator
name|childValidator
init|=
name|validator
operator|.
name|childNodeDeleted
argument_list|(
name|name
argument_list|,
name|secureBefore
argument_list|(
name|name
argument_list|,
name|before
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|childValidator
operator|==
literal|null
condition|?
literal|null
else|:
name|create
argument_list|(
name|beforeTree
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
argument_list|,
name|afterTree
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
argument_list|,
name|childValidator
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

