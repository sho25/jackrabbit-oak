begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|management
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|management
operator|.
name|ManagementOperation
operator|.
name|Status
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|management
operator|.
name|ManagementOperation
operator|.
name|Status
operator|.
name|failed
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|management
operator|.
name|ManagementOperation
operator|.
name|Status
operator|.
name|fromCompositeData
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|management
operator|.
name|ManagementOperation
operator|.
name|Status
operator|.
name|succeeded
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|management
operator|.
name|ManagementOperation
operator|.
name|Status
operator|.
name|toTabularData
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|management
operator|.
name|ManagementOperation
operator|.
name|Status
operator|.
name|unavailable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|RepositoryManagementMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|SessionMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|AnnotatedStandardMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|backup
operator|.
name|FileStoreBackupRestoreMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobGCMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|jmx
operator|.
name|PropertyIndexAsyncReindexMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|RevisionGCMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Tracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_comment
comment|/**  * Default implementation of the {@link RepositoryManagementMBean} based  * on a {@link Whiteboard} instance, which is used to look up individual  * service providers for backup ({@link FileStoreBackupRestoreMBean}), data store  * garbage collections ({@link BlobGCMBean}) and revision store garbage  * collections ({@link RevisionGCMBean}).  */
end_comment

begin_class
specifier|public
class|class
name|RepositoryManager
extends|extends
name|AnnotatedStandardMBean
implements|implements
name|RepositoryManagementMBean
block|{
specifier|private
specifier|final
name|Whiteboard
name|whiteboard
decl_stmt|;
specifier|public
name|RepositoryManager
parameter_list|(
annotation|@
name|Nonnull
name|Whiteboard
name|whiteboard
parameter_list|)
block|{
name|super
argument_list|(
name|RepositoryManagementMBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|whiteboard
operator|=
name|checkNotNull
argument_list|(
name|whiteboard
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"repository manager"
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Status
name|execute
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|serviceType
parameter_list|,
name|Function
argument_list|<
name|T
argument_list|,
name|Status
argument_list|>
name|operation
parameter_list|)
block|{
name|Tracker
argument_list|<
name|T
argument_list|>
name|tracker
init|=
name|whiteboard
operator|.
name|track
argument_list|(
name|serviceType
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|T
argument_list|>
name|services
init|=
name|tracker
operator|.
name|getServices
argument_list|()
decl_stmt|;
if|if
condition|(
name|services
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|operation
operator|.
name|apply
argument_list|(
name|services
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|services
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|unavailable
argument_list|(
literal|"Cannot perform operation: no service of type "
operator|+
name|serviceType
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" found."
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|failed
argument_list|(
literal|"Cannot perform operation: multiple services of type "
operator|+
name|serviceType
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" found."
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
name|tracker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Iterable
argument_list|<
name|Status
argument_list|>
name|executeAll
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|serviceType
parameter_list|,
name|Function
argument_list|<
name|T
argument_list|,
name|Status
argument_list|>
name|operation
parameter_list|)
block|{
name|Tracker
argument_list|<
name|T
argument_list|>
name|tracker
init|=
name|whiteboard
operator|.
name|track
argument_list|(
name|serviceType
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Status
argument_list|>
name|statuses
init|=
name|newArrayList
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|T
name|service
range|:
name|tracker
operator|.
name|getServices
argument_list|()
control|)
block|{
name|statuses
operator|.
name|add
argument_list|(
name|operation
operator|.
name|apply
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|statuses
return|;
block|}
finally|finally
block|{
name|tracker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|startBackup
parameter_list|()
block|{
return|return
name|execute
argument_list|(
name|FileStoreBackupRestoreMBean
operator|.
name|class
argument_list|,
operator|new
name|Function
argument_list|<
name|FileStoreBackupRestoreMBean
argument_list|,
name|Status
argument_list|>
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Status
name|apply
parameter_list|(
name|FileStoreBackupRestoreMBean
name|fileStoreBackupRestoreMBean
parameter_list|)
block|{
return|return
name|fromCompositeData
argument_list|(
name|fileStoreBackupRestoreMBean
operator|.
name|startBackup
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|toCompositeData
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getBackupStatus
parameter_list|()
block|{
return|return
name|execute
argument_list|(
name|FileStoreBackupRestoreMBean
operator|.
name|class
argument_list|,
operator|new
name|Function
argument_list|<
name|FileStoreBackupRestoreMBean
argument_list|,
name|Status
argument_list|>
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Status
name|apply
parameter_list|(
name|FileStoreBackupRestoreMBean
name|backupService
parameter_list|)
block|{
return|return
name|fromCompositeData
argument_list|(
name|backupService
operator|.
name|getBackupStatus
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|toCompositeData
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|startRestore
parameter_list|()
block|{
return|return
name|execute
argument_list|(
name|FileStoreBackupRestoreMBean
operator|.
name|class
argument_list|,
operator|new
name|Function
argument_list|<
name|FileStoreBackupRestoreMBean
argument_list|,
name|Status
argument_list|>
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Status
name|apply
parameter_list|(
name|FileStoreBackupRestoreMBean
name|backupService
parameter_list|)
block|{
return|return
name|fromCompositeData
argument_list|(
name|backupService
operator|.
name|startRestore
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|toCompositeData
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getRestoreStatus
parameter_list|()
block|{
return|return
name|execute
argument_list|(
name|FileStoreBackupRestoreMBean
operator|.
name|class
argument_list|,
operator|new
name|Function
argument_list|<
name|FileStoreBackupRestoreMBean
argument_list|,
name|Status
argument_list|>
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Status
name|apply
parameter_list|(
name|FileStoreBackupRestoreMBean
name|backupService
parameter_list|)
block|{
return|return
name|fromCompositeData
argument_list|(
name|backupService
operator|.
name|getRestoreStatus
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|toCompositeData
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|startDataStoreGC
parameter_list|(
specifier|final
name|boolean
name|markOnly
parameter_list|)
block|{
return|return
name|execute
argument_list|(
name|BlobGCMBean
operator|.
name|class
argument_list|,
operator|new
name|Function
argument_list|<
name|BlobGCMBean
argument_list|,
name|Status
argument_list|>
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Status
name|apply
parameter_list|(
name|BlobGCMBean
name|blobGCService
parameter_list|)
block|{
return|return
name|fromCompositeData
argument_list|(
name|blobGCService
operator|.
name|startBlobGC
argument_list|(
name|markOnly
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|toCompositeData
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getDataStoreGCStatus
parameter_list|()
block|{
return|return
name|execute
argument_list|(
name|BlobGCMBean
operator|.
name|class
argument_list|,
operator|new
name|Function
argument_list|<
name|BlobGCMBean
argument_list|,
name|Status
argument_list|>
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Status
name|apply
parameter_list|(
name|BlobGCMBean
name|blobGCService
parameter_list|)
block|{
return|return
name|fromCompositeData
argument_list|(
name|blobGCService
operator|.
name|getBlobGCStatus
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|toCompositeData
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|startRevisionGC
parameter_list|()
block|{
return|return
name|execute
argument_list|(
name|RevisionGCMBean
operator|.
name|class
argument_list|,
operator|new
name|Function
argument_list|<
name|RevisionGCMBean
argument_list|,
name|Status
argument_list|>
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Status
name|apply
parameter_list|(
name|RevisionGCMBean
name|revisionGCService
parameter_list|)
block|{
return|return
name|fromCompositeData
argument_list|(
name|revisionGCService
operator|.
name|startRevisionGC
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|toCompositeData
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getRevisionGCStatus
parameter_list|()
block|{
return|return
name|execute
argument_list|(
name|RevisionGCMBean
operator|.
name|class
argument_list|,
operator|new
name|Function
argument_list|<
name|RevisionGCMBean
argument_list|,
name|Status
argument_list|>
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Status
name|apply
parameter_list|(
name|RevisionGCMBean
name|revisionGCService
parameter_list|)
block|{
return|return
name|fromCompositeData
argument_list|(
name|revisionGCService
operator|.
name|getRevisionGCStatus
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|toCompositeData
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|checkpoint
parameter_list|(
specifier|final
name|long
name|lifetime
parameter_list|)
block|{
name|Status
name|status
init|=
name|execute
argument_list|(
name|FileStoreBackupRestoreMBean
operator|.
name|class
argument_list|,
operator|new
name|Function
argument_list|<
name|FileStoreBackupRestoreMBean
argument_list|,
name|Status
argument_list|>
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Status
name|apply
parameter_list|(
name|FileStoreBackupRestoreMBean
name|backupService
parameter_list|)
block|{
name|String
name|checkpoint
init|=
name|backupService
operator|.
name|checkpoint
argument_list|(
name|lifetime
argument_list|)
decl_stmt|;
return|return
name|succeeded
argument_list|(
name|checkpoint
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|status
operator|.
name|isSuccess
argument_list|()
condition|?
name|status
operator|.
name|getMessage
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|startPropertyIndexAsyncReindex
parameter_list|()
block|{
return|return
name|execute
argument_list|(
name|PropertyIndexAsyncReindexMBean
operator|.
name|class
argument_list|,
operator|new
name|Function
argument_list|<
name|PropertyIndexAsyncReindexMBean
argument_list|,
name|Status
argument_list|>
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Status
name|apply
parameter_list|(
name|PropertyIndexAsyncReindexMBean
name|reindexer
parameter_list|)
block|{
return|return
name|fromCompositeData
argument_list|(
name|reindexer
operator|.
name|startPropertyIndexAsyncReindex
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|toCompositeData
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getPropertyIndexAsyncReindexStatus
parameter_list|()
block|{
return|return
name|execute
argument_list|(
name|PropertyIndexAsyncReindexMBean
operator|.
name|class
argument_list|,
operator|new
name|Function
argument_list|<
name|PropertyIndexAsyncReindexMBean
argument_list|,
name|Status
argument_list|>
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Status
name|apply
parameter_list|(
name|PropertyIndexAsyncReindexMBean
name|reindexer
parameter_list|)
block|{
return|return
name|fromCompositeData
argument_list|(
name|reindexer
operator|.
name|getPropertyIndexAsyncReindexStatus
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|toCompositeData
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|TabularData
name|refreshAllSessions
parameter_list|()
block|{
return|return
name|toTabularData
argument_list|(
name|executeAll
argument_list|(
name|SessionMBean
operator|.
name|class
argument_list|,
operator|new
name|Function
argument_list|<
name|SessionMBean
argument_list|,
name|Status
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Status
name|apply
parameter_list|(
name|SessionMBean
name|sessionMBean
parameter_list|)
block|{
name|sessionMBean
operator|.
name|refresh
argument_list|()
expr_stmt|;
return|return
name|succeeded
argument_list|(
literal|"OK"
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

