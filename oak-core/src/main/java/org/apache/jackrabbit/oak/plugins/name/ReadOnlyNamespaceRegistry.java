begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|name
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|toArray
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRINGS
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceRegistry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|UnsupportedRepositoryOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|namespace
operator|.
name|NamespaceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_comment
comment|/**  * Read-only namespace registry. Used mostly internally when access to the  * in-content registered namespaces is needed. See the  * {@link ReadWriteNamespaceRegistry} subclass for a more complete registry  * implementation that supports also namespace modifications and that's thus  * better suited for use in in implementing the full JCR API.  */
end_comment

begin_class
specifier|public
class|class
name|ReadOnlyNamespaceRegistry
implements|implements
name|NamespaceRegistry
implements|,
name|NamespaceConstants
block|{
specifier|protected
specifier|final
name|Tree
name|namespaces
decl_stmt|;
specifier|protected
specifier|final
name|Tree
name|nsdata
decl_stmt|;
specifier|public
name|ReadOnlyNamespaceRegistry
parameter_list|(
name|Root
name|root
parameter_list|)
block|{
name|this
operator|.
name|namespaces
operator|=
name|root
operator|.
name|getTree
argument_list|(
name|NAMESPACES_PATH
argument_list|)
expr_stmt|;
name|this
operator|.
name|nsdata
operator|=
name|namespaces
operator|.
name|getChild
argument_list|(
name|REP_NSDATA
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Iterable
argument_list|<
name|String
argument_list|>
name|getNSData
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|PropertyState
name|property
init|=
name|nsdata
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
operator|&&
name|property
operator|.
name|getType
argument_list|()
operator|==
name|STRINGS
condition|)
block|{
return|return
name|property
operator|.
name|getValue
argument_list|(
name|STRINGS
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|emptyList
argument_list|()
return|;
block|}
block|}
comment|//--------------------------------------------------< NamespaceRegistry>---
annotation|@
name|Override
specifier|public
name|void
name|registerNamespace
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unregisterNamespace
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
annotation|@
name|NotNull
specifier|public
name|String
index|[]
name|getPrefixes
parameter_list|()
block|{
return|return
name|toArray
argument_list|(
name|getNSData
argument_list|(
name|REP_PREFIXES
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|NotNull
specifier|public
name|String
index|[]
name|getURIs
parameter_list|()
block|{
return|return
name|toArray
argument_list|(
name|getNSData
argument_list|(
name|REP_URIS
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|NotNull
specifier|public
name|String
name|getURI
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|NamespaceException
block|{
if|if
condition|(
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|prefix
return|;
comment|// the default empty namespace
block|}
name|PropertyState
name|property
init|=
name|namespaces
operator|.
name|getProperty
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
operator|&&
name|property
operator|.
name|getType
argument_list|()
operator|==
name|STRING
condition|)
block|{
return|return
name|property
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
return|;
block|}
throw|throw
operator|new
name|NamespaceException
argument_list|(
literal|"No namespace registered for prefix "
operator|+
name|prefix
argument_list|)
throw|;
block|}
annotation|@
name|Override
annotation|@
name|NotNull
specifier|public
name|String
name|getPrefix
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|NamespaceException
block|{
if|if
condition|(
name|uri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|uri
return|;
comment|// the default empty namespace
block|}
name|PropertyState
name|property
init|=
name|nsdata
operator|.
name|getProperty
argument_list|(
name|Namespaces
operator|.
name|encodeUri
argument_list|(
name|uri
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
operator|&&
name|property
operator|.
name|getType
argument_list|()
operator|==
name|STRING
condition|)
block|{
return|return
name|property
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
return|;
block|}
throw|throw
operator|new
name|NamespaceException
argument_list|(
literal|"No namespace prefix registered for URI "
operator|+
name|uri
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

