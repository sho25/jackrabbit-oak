begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|fulltext
package|;
end_package

begin_comment
comment|/**  * The base class for fulltext condition expression.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|FullTextExpression
block|{
comment|/**      * The operator precedence for OR conditions.      */
specifier|public
specifier|static
specifier|final
name|int
name|PRECEDENCE_OR
init|=
literal|1
decl_stmt|;
comment|/**      * The operator precedence for AND conditions.      */
specifier|public
specifier|static
specifier|final
name|int
name|PRECEDENCE_AND
init|=
literal|2
decl_stmt|;
comment|/**      * The operator precedence for terms.      */
specifier|public
specifier|static
specifier|final
name|int
name|PRECEDENCE_TERM
init|=
literal|3
decl_stmt|;
comment|/**      * Get the operator precedence.      *       * @return the precedence      */
specifier|public
specifier|abstract
name|int
name|getPrecedence
parameter_list|()
function_decl|;
comment|/**      * Evaluate whether the value matches the condition.      *       * @param value the value      * @return true if it matches      */
specifier|public
specifier|abstract
name|boolean
name|evaluate
parameter_list|(
name|String
name|value
parameter_list|)
function_decl|;
comment|/**      * Simplify the expression if possible (removing duplicate conditions).      *       * @return the simplified expression      */
specifier|abstract
name|FullTextExpression
name|simplify
parameter_list|()
function_decl|;
comment|/**      * Get the string representation of the condition.      */
annotation|@
name|Override
specifier|public
specifier|abstract
name|String
name|toString
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|FullTextExpression
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**      * Let the expression call the applicable visit method of the visitor.       *       * @param v the visitor      * @return true if the visit method returned true      */
specifier|public
specifier|abstract
name|boolean
name|accept
parameter_list|(
name|FullTextVisitor
name|v
parameter_list|)
function_decl|;
comment|/**      * Whether the current {@link FullTextExpression} is a {@code NOT} condition or not. Default is      * false      *       * @return true if the current condition represent a NOT, false otherwise.      */
specifier|public
name|boolean
name|isNot
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

