begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|s3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonClientException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|ClientConfiguration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AWSCredentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|BasicAWSCredentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|regions
operator|.
name|Regions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|AmazonS3
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|AmazonS3Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ObjectListing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|S3ObjectSummary
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Amazon S3 utilities.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Utils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Utils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_CONFIG_FILE
init|=
literal|"aws.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DELETE_CONFIG_SUFFIX
init|=
literal|";burn"
decl_stmt|;
comment|/**      * The default value AWS bucket region.      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_AWS_BUCKET_REGION
init|=
literal|"us-standard"
decl_stmt|;
comment|/**      * constants to define endpoint to various AWS region      */
specifier|public
specifier|static
specifier|final
name|String
name|AWSDOTCOM
init|=
literal|"amazonaws.com"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|S3
init|=
literal|"s3"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DOT
init|=
literal|"."
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DASH
init|=
literal|"-"
decl_stmt|;
comment|/**      * private constructor so that class cannot initialized from outside.      */
specifier|private
name|Utils
parameter_list|()
block|{      }
comment|/**      * Create AmazonS3Client from properties.      *       * @param prop properties to configure @link {@link AmazonS3Client}      * @return {@link AmazonS3Client}      */
specifier|public
specifier|static
name|AmazonS3Client
name|openService
parameter_list|(
specifier|final
name|Properties
name|prop
parameter_list|)
block|{
name|String
name|accessKey
init|=
name|prop
operator|.
name|getProperty
argument_list|(
name|S3Constants
operator|.
name|ACCESS_KEY
argument_list|)
decl_stmt|;
name|String
name|secretKey
init|=
name|prop
operator|.
name|getProperty
argument_list|(
name|S3Constants
operator|.
name|SECRET_KEY
argument_list|)
decl_stmt|;
name|AmazonS3Client
name|s3service
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNullOrEmpty
argument_list|(
name|accessKey
argument_list|)
operator|||
name|StringUtils
operator|.
name|isNullOrEmpty
argument_list|(
name|secretKey
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Configuring Amazon Client from environment"
argument_list|)
expr_stmt|;
name|s3service
operator|=
operator|new
name|AmazonS3Client
argument_list|(
name|getClientConfiguration
argument_list|(
name|prop
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Configuring Amazon Client from property file."
argument_list|)
expr_stmt|;
name|AWSCredentials
name|credentials
init|=
operator|new
name|BasicAWSCredentials
argument_list|(
name|accessKey
argument_list|,
name|secretKey
argument_list|)
decl_stmt|;
name|s3service
operator|=
operator|new
name|AmazonS3Client
argument_list|(
name|credentials
argument_list|,
name|getClientConfiguration
argument_list|(
name|prop
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|region
init|=
name|prop
operator|.
name|getProperty
argument_list|(
name|S3Constants
operator|.
name|S3_REGION
argument_list|)
decl_stmt|;
name|String
name|endpoint
init|=
literal|null
decl_stmt|;
name|String
name|propEndPoint
init|=
name|prop
operator|.
name|getProperty
argument_list|(
name|S3Constants
operator|.
name|S3_END_POINT
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|propEndPoint
operator|!=
literal|null
operator|)
operator|&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|propEndPoint
argument_list|)
condition|)
block|{
name|endpoint
operator|=
name|propEndPoint
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isNullOrEmpty
argument_list|(
name|region
argument_list|)
condition|)
block|{
name|com
operator|.
name|amazonaws
operator|.
name|regions
operator|.
name|Region
name|s3Region
init|=
name|Regions
operator|.
name|getCurrentRegion
argument_list|()
decl_stmt|;
if|if
condition|(
name|s3Region
operator|!=
literal|null
condition|)
block|{
name|region
operator|=
name|s3Region
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AmazonClientException
argument_list|(
literal|"parameter ["
operator|+
name|S3Constants
operator|.
name|S3_REGION
operator|+
literal|"] not configured and cannot be derived from environment"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|DEFAULT_AWS_BUCKET_REGION
operator|.
name|equals
argument_list|(
name|region
argument_list|)
condition|)
block|{
name|endpoint
operator|=
name|S3
operator|+
name|DOT
operator|+
name|AWSDOTCOM
expr_stmt|;
block|}
else|else
block|{
name|endpoint
operator|=
name|S3
operator|+
name|DOT
operator|+
name|region
operator|+
name|DOT
operator|+
name|AWSDOTCOM
expr_stmt|;
block|}
block|}
comment|/*          * setting endpoint to remove latency of redirection. If endpoint is          * not set, invocation first goes us standard region, which          * redirects it to correct location.          */
name|s3service
operator|.
name|setEndpoint
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"S3 service endpoint [{}] "
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
return|return
name|s3service
return|;
block|}
comment|/**      * Waits for an S3 bucket, one we expect to exist, to report that it exists.      * A check for the bucket is called with a limited number of repeats with      * an increasing backoff.      *      * Usually you would call this after creating a bucket to block until the      * bucket is actually available before moving forward with other tasks that      * expect the bucket to be available.      *      * @param s3Client The AmazonS3 client connection to the storage service.      * @param bucketName The name of the bucket to check.      * @return True if the bucket exists; false otherwise.      */
specifier|public
specifier|static
name|boolean
name|waitForBucket
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|AmazonS3
name|s3Client
parameter_list|,
annotation|@
name|NotNull
specifier|final
name|String
name|bucketName
parameter_list|)
block|{
name|int
name|tries
init|=
literal|0
decl_stmt|;
name|boolean
name|bucketExists
init|=
literal|false
decl_stmt|;
while|while
condition|(
literal|20
operator|>
name|tries
operator|++
condition|)
block|{
name|bucketExists
operator|=
name|s3Client
operator|.
name|doesBucketExistV2
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
if|if
condition|(
name|bucketExists
condition|)
break|break;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
operator|*
name|tries
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{ }
block|}
return|return
name|bucketExists
return|;
block|}
comment|/**      * Delete S3 bucket. This method first deletes all objects from bucket and      * then delete empty bucket.      *       * @param bucketName the bucket name.      */
specifier|public
specifier|static
name|void
name|deleteBucket
parameter_list|(
specifier|final
name|String
name|bucketName
parameter_list|)
throws|throws
name|IOException
block|{
name|Properties
name|prop
init|=
name|readConfig
argument_list|(
name|DEFAULT_CONFIG_FILE
argument_list|)
decl_stmt|;
name|AmazonS3
name|s3service
init|=
name|openService
argument_list|(
name|prop
argument_list|)
decl_stmt|;
name|ObjectListing
name|prevObjectListing
init|=
name|s3service
operator|.
name|listObjects
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
for|for
control|(
name|S3ObjectSummary
name|s3ObjSumm
range|:
name|prevObjectListing
operator|.
name|getObjectSummaries
argument_list|()
control|)
block|{
name|s3service
operator|.
name|deleteObject
argument_list|(
name|bucketName
argument_list|,
name|s3ObjSumm
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|prevObjectListing
operator|.
name|isTruncated
argument_list|()
condition|)
block|{
break|break;
block|}
name|prevObjectListing
operator|=
name|s3service
operator|.
name|listNextBatchOfObjects
argument_list|(
name|prevObjectListing
argument_list|)
expr_stmt|;
block|}
name|s3service
operator|.
name|deleteBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read a configuration properties file. If the file name ends with ";burn",      * the file is deleted after reading.      *       * @param fileName the properties file name      * @return the properties      * @throws java.io.IOException if the file doesn't exist      */
specifier|public
specifier|static
name|Properties
name|readConfig
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|delete
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|endsWith
argument_list|(
name|DELETE_CONFIG_SUFFIX
argument_list|)
condition|)
block|{
name|delete
operator|=
literal|true
expr_stmt|;
name|fileName
operator|=
name|fileName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fileName
operator|.
name|length
argument_list|()
operator|-
name|DELETE_CONFIG_SUFFIX
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Config file not found: "
operator|+
name|fileName
argument_list|)
throw|;
block|}
name|Properties
name|prop
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|prop
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|delete
condition|)
block|{
name|deleteIfPossible
argument_list|(
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|prop
return|;
block|}
specifier|private
specifier|static
name|void
name|deleteIfPossible
parameter_list|(
specifier|final
name|File
name|file
parameter_list|)
block|{
name|boolean
name|deleted
init|=
name|file
operator|.
name|delete
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|deleted
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not delete "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|ClientConfiguration
name|getClientConfiguration
parameter_list|(
name|Properties
name|prop
parameter_list|)
block|{
name|int
name|connectionTimeOut
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|prop
operator|.
name|getProperty
argument_list|(
name|S3Constants
operator|.
name|S3_CONN_TIMEOUT
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|socketTimeOut
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|prop
operator|.
name|getProperty
argument_list|(
name|S3Constants
operator|.
name|S3_SOCK_TIMEOUT
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|maxConnections
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|prop
operator|.
name|getProperty
argument_list|(
name|S3Constants
operator|.
name|S3_MAX_CONNS
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|maxErrorRetry
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|prop
operator|.
name|getProperty
argument_list|(
name|S3Constants
operator|.
name|S3_MAX_ERR_RETRY
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|encryptionType
init|=
name|prop
operator|.
name|getProperty
argument_list|(
name|S3Constants
operator|.
name|S3_ENCRYPTION
argument_list|)
decl_stmt|;
name|String
name|protocol
init|=
name|prop
operator|.
name|getProperty
argument_list|(
name|S3Constants
operator|.
name|S3_CONN_PROTOCOL
argument_list|)
decl_stmt|;
name|String
name|proxyHost
init|=
name|prop
operator|.
name|getProperty
argument_list|(
name|S3Constants
operator|.
name|PROXY_HOST
argument_list|)
decl_stmt|;
name|String
name|proxyPort
init|=
name|prop
operator|.
name|getProperty
argument_list|(
name|S3Constants
operator|.
name|PROXY_PORT
argument_list|)
decl_stmt|;
name|ClientConfiguration
name|cc
init|=
operator|new
name|ClientConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|protocol
operator|!=
literal|null
operator|&&
name|protocol
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"http"
argument_list|)
condition|)
block|{
name|cc
operator|.
name|setProtocol
argument_list|(
name|Protocol
operator|.
name|HTTP
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proxyHost
operator|!=
literal|null
operator|&&
operator|!
name|proxyHost
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cc
operator|.
name|setProxyHost
argument_list|(
name|proxyHost
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proxyPort
operator|!=
literal|null
operator|&&
operator|!
name|proxyPort
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cc
operator|.
name|setProxyPort
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|proxyPort
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cc
operator|.
name|setConnectionTimeout
argument_list|(
name|connectionTimeOut
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setSocketTimeout
argument_list|(
name|socketTimeOut
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setMaxConnections
argument_list|(
name|maxConnections
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setMaxErrorRetry
argument_list|(
name|maxErrorRetry
argument_list|)
expr_stmt|;
if|if
condition|(
name|encryptionType
operator|!=
literal|null
operator|&&
name|encryptionType
operator|.
name|equals
argument_list|(
name|S3Constants
operator|.
name|S3_ENCRYPTION_SSE_KMS
argument_list|)
condition|)
block|{
name|cc
operator|.
name|withSignerOverride
argument_list|(
literal|"AWSS3V4SignerType"
argument_list|)
expr_stmt|;
block|}
return|return
name|cc
return|;
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|asMap
parameter_list|(
name|Properties
name|props
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|props
operator|.
name|keySet
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|key
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
block|}
end_class

end_unit

