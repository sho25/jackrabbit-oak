begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_class
specifier|public
class|class
name|SegmentIdFactory
block|{
specifier|private
specifier|static
specifier|final
name|SecureRandom
name|random
init|=
operator|new
name|SecureRandom
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|MSB_MASK
init|=
operator|~
operator|(
literal|0xfL
operator|<<
literal|12
operator|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|VERSION
init|=
operator|(
literal|0x4L
operator|<<
literal|12
operator|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|LSB_MASK
init|=
operator|~
operator|(
literal|0xfL
operator|<<
literal|60
operator|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|DATA
init|=
literal|0xAL
operator|<<
literal|60
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|BULK
init|=
literal|0xBL
operator|<<
literal|60
decl_stmt|;
specifier|private
specifier|static
name|UUID
name|newSegmentId
parameter_list|(
name|long
name|type
parameter_list|)
block|{
name|long
name|msb
init|=
operator|(
name|random
operator|.
name|nextLong
argument_list|()
operator|&
name|MSB_MASK
operator|)
operator||
name|VERSION
decl_stmt|;
name|long
name|lsb
init|=
operator|(
name|random
operator|.
name|nextLong
argument_list|()
operator|&
name|LSB_MASK
operator|)
operator||
name|type
decl_stmt|;
return|return
operator|new
name|UUID
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
return|;
block|}
specifier|static
name|UUID
name|newDataSegmentId
parameter_list|()
block|{
return|return
name|newSegmentId
argument_list|(
name|DATA
argument_list|)
return|;
block|}
specifier|static
name|UUID
name|newBulkSegmentId
parameter_list|()
block|{
return|return
name|newSegmentId
argument_list|(
name|BULK
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isDataSegmentId
parameter_list|(
name|UUID
name|id
parameter_list|)
block|{
return|return
operator|(
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
operator|&
operator|~
name|LSB_MASK
operator|)
operator|==
name|DATA
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isBulkSegmentId
parameter_list|(
name|UUID
name|id
parameter_list|)
block|{
return|return
operator|(
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
operator|&
operator|~
name|LSB_MASK
operator|)
operator|==
name|BULK
return|;
block|}
block|}
end_class

end_unit

