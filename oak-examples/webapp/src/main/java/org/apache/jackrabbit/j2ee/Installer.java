begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|j2ee
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_comment
comment|/**  * Provides very basic installation capabilities.  */
end_comment

begin_class
specifier|public
class|class
name|Installer
block|{
comment|/**      * the default logger      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Installer
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Return code for installation succeeded      */
specifier|public
specifier|static
specifier|final
name|int
name|C_INSTALL_OK
init|=
literal|0
decl_stmt|;
comment|/**      * Return code for invalid input parameter      */
specifier|public
specifier|static
specifier|final
name|int
name|C_INVALID_INPUT
init|=
literal|1
decl_stmt|;
comment|/**      * Return code for repository home already exists      */
specifier|public
specifier|static
specifier|final
name|int
name|C_HOME_EXISTS
init|=
literal|2
decl_stmt|;
comment|/**      * Return code for repository home is missing      */
specifier|public
specifier|static
specifier|final
name|int
name|C_HOME_MISSING
init|=
literal|3
decl_stmt|;
comment|/**      * Return code for repository config already exists      */
specifier|public
specifier|static
specifier|final
name|int
name|C_CONFIG_EXISTS
init|=
literal|4
decl_stmt|;
comment|/**      * Return code for repository config is missing      */
specifier|public
specifier|static
specifier|final
name|int
name|C_CONFIG_MISSING
init|=
literal|5
decl_stmt|;
comment|/**      * Return code for bootstrap config already exists      */
specifier|public
specifier|static
specifier|final
name|int
name|C_BOOTSTRAP_EXISTS
init|=
literal|6
decl_stmt|;
comment|/**      * Return code for a general install error      */
specifier|public
specifier|static
specifier|final
name|int
name|C_INSTALL_ERROR
init|=
literal|7
decl_stmt|;
comment|/**      * place to store the config file      */
specifier|private
specifier|final
name|File
name|bootstrapConfigFile
decl_stmt|;
comment|/**      * the servlet context      */
specifier|private
specifier|final
name|ServletContext
name|context
decl_stmt|;
comment|/**      * the place for the repository config template      * todo: to be configured      */
specifier|private
specifier|final
name|String
name|configTemplate
init|=
literal|"/WEB-INF/templates/repository-config.json"
decl_stmt|;
comment|/**      * the place for the bootstrap properties template      * todo: to be configured      */
specifier|private
specifier|final
name|String
name|bootstrapTemplate
init|=
literal|"/WEB-INF/templates/bootstrap.properties"
decl_stmt|;
comment|/**      * Creates a new installer      * @param bootstrapConfigFile the location for the config file      * @param context the servlet context for accessing resources      */
specifier|public
name|Installer
parameter_list|(
name|File
name|bootstrapConfigFile
parameter_list|,
name|ServletContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|bootstrapConfigFile
operator|=
name|bootstrapConfigFile
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
comment|/**      * Handles the installation.      *      * @param req the servlet request with the input parameters      * @return the installation return code      *      * @throws ServletException if a servlet error occurs.      * @throws IOException if an I/O error occurs.      */
specifier|public
name|int
name|installRepository
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|String
name|repHome
init|=
name|req
operator|.
name|getParameter
argument_list|(
literal|"repository_home"
argument_list|)
decl_stmt|;
name|String
name|mode
init|=
name|req
operator|.
name|getParameter
argument_list|(
literal|"mode"
argument_list|)
decl_stmt|;
if|if
condition|(
name|repHome
operator|==
literal|null
operator|||
name|mode
operator|==
literal|null
condition|)
block|{
return|return
name|C_INVALID_INPUT
return|;
block|}
name|File
name|home
init|=
operator|new
name|File
argument_list|(
name|repHome
argument_list|)
decl_stmt|;
name|File
name|config
init|=
operator|new
name|File
argument_list|(
name|home
argument_list|,
literal|"repository-config.json"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"new"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
comment|// Test internal folder repository existence and not home because home is already created
comment|// by org.apache.jackrabbit.server.remoting.davex.JcrRemotingServlet
if|if
condition|(
name|config
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Trying to install new repository config '{}' but already exists"
argument_list|,
name|config
argument_list|)
expr_stmt|;
return|return
name|C_CONFIG_EXISTS
return|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Creating new repository home '{}'"
argument_list|,
name|repHome
argument_list|)
expr_stmt|;
name|home
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
try|try
block|{
name|installRepositoryConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error while installing new repository config '{}': {}"
argument_list|,
name|config
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|C_BOOTSTRAP_EXISTS
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|home
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Trying to use existing repository home '{}' but does not exists"
argument_list|,
name|repHome
argument_list|)
expr_stmt|;
return|return
name|C_HOME_MISSING
return|;
block|}
if|if
condition|(
operator|!
name|config
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Trying to use existing repository config '{}' but does not exists"
argument_list|,
name|config
argument_list|)
expr_stmt|;
return|return
name|C_CONFIG_MISSING
return|;
block|}
block|}
comment|// install bootstrap.properties
try|try
block|{
name|installBootstrap
argument_list|(
name|bootstrapConfigFile
argument_list|,
name|repHome
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error while installing '{}': {}"
argument_list|,
name|bootstrapConfigFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|C_INSTALL_ERROR
return|;
block|}
return|return
name|C_INSTALL_OK
return|;
block|}
comment|/**      * Installs the repository config file from the template      * @param dest the destination location      * @throws IOException if an I/O error occurs.      */
specifier|private
name|void
name|installRepositoryConfig
parameter_list|(
name|File
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Creating new repository config: {}"
argument_list|,
name|dest
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|context
operator|.
name|getResourceAsStream
argument_list|(
name|configTemplate
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
name|in
operator|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|configTemplate
argument_list|)
expr_stmt|;
block|}
name|OutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|8192
index|]
decl_stmt|;
name|int
name|read
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Installs the bootstrap config file from the template      * @param dest the destination location      * @param repHome the repository home location      * @throws IOException if an I/O error occurs      */
specifier|private
name|void
name|installBootstrap
parameter_list|(
name|File
name|dest
parameter_list|,
name|String
name|repHome
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Creating new bootstrap properties: {}"
argument_list|,
name|dest
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|context
operator|.
name|getResourceAsStream
argument_list|(
name|bootstrapTemplate
argument_list|)
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"repository.home"
argument_list|,
name|repHome
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|dest
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|dest
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|OutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|props
operator|.
name|store
argument_list|(
name|out
argument_list|,
literal|"bootstrap properties for the repository startup servlet."
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

