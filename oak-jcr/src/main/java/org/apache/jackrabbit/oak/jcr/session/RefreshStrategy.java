begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|session
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * Implementations of this interface determine whether a session needs  * to be refreshed before the next session operation is performed. This is  * done by the session calling {@link #needsRefresh(long)} to determine  * whether a refresh is needed.  *  * @see Composite  * @see Timed  */
end_comment

begin_interface
specifier|public
interface|interface
name|RefreshStrategy
block|{
comment|/**      * Determine whether the given session needs to refresh before the next      * session operation is performed.      *<p>      * This implementation returns {@code true} if and only if any of the      * individual refresh strategies passed to the constructor returns      * {@code true}.      *      * @param secondsSinceLastAccess seconds since last access      * @return  {@code true} if and only if the session needs to refresh.      */
name|boolean
name|needsRefresh
parameter_list|(
name|long
name|secondsSinceLastAccess
parameter_list|)
function_decl|;
name|void
name|refreshed
parameter_list|()
function_decl|;
comment|/**      * Composite of zero or more {@code RefreshStrategy} instances,      * each of which covers a certain strategy.      */
class|class
name|Composite
implements|implements
name|RefreshStrategy
block|{
specifier|private
specifier|final
name|RefreshStrategy
index|[]
name|refreshStrategies
decl_stmt|;
specifier|public
specifier|static
name|RefreshStrategy
name|create
parameter_list|(
name|RefreshStrategy
modifier|...
name|refreshStrategies
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|RefreshStrategy
argument_list|>
name|strategies
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|RefreshStrategy
name|strategy
range|:
name|refreshStrategies
control|)
block|{
if|if
condition|(
name|strategy
operator|instanceof
name|Composite
condition|)
block|{
name|strategies
operator|.
name|addAll
argument_list|(
name|asList
argument_list|(
operator|(
operator|(
name|Composite
operator|)
name|strategy
operator|)
operator|.
name|refreshStrategies
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|strategies
operator|.
name|add
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Composite
argument_list|(
name|strategies
operator|.
name|toArray
argument_list|(
operator|new
name|RefreshStrategy
index|[
name|strategies
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
comment|/**          * Create a new instance consisting of the composite of the          * passed {@code RefreshStrategy} instances.          * @param refreshStrategies  individual refresh strategies          */
specifier|private
name|Composite
parameter_list|(
name|RefreshStrategy
modifier|...
name|refreshStrategies
parameter_list|)
block|{
name|this
operator|.
name|refreshStrategies
operator|=
name|refreshStrategies
expr_stmt|;
block|}
comment|/**          * Determine whether the given session needs to refresh before the next          * session operation is performed.          *<p>          * This implementation returns {@code true} if and only if any of the          * individual refresh strategies passed to the constructor returns          * {@code true}.          *          * @param secondsSinceLastAccess seconds since last access          * @return  {@code true} if and only if the session needs to refresh.          */
annotation|@
name|Override
specifier|public
name|boolean
name|needsRefresh
parameter_list|(
name|long
name|secondsSinceLastAccess
parameter_list|)
block|{
for|for
control|(
name|RefreshStrategy
name|r
range|:
name|refreshStrategies
control|)
block|{
if|if
condition|(
name|r
operator|.
name|needsRefresh
argument_list|(
name|secondsSinceLastAccess
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|refreshed
parameter_list|()
block|{
for|for
control|(
name|RefreshStrategy
name|refreshStrategy
range|:
name|refreshStrategies
control|)
block|{
name|refreshStrategy
operator|.
name|refreshed
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|sep
init|=
literal|""
decl_stmt|;
for|for
control|(
name|RefreshStrategy
name|strategy
range|:
name|refreshStrategies
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|sep
argument_list|)
operator|.
name|append
argument_list|(
name|strategy
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sep
operator|=
literal|", "
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * This refresh strategy refreshes after a given timeout of inactivity.      */
class|class
name|Timed
implements|implements
name|RefreshStrategy
block|{
specifier|protected
specifier|final
name|long
name|interval
decl_stmt|;
comment|/**          * @param interval  Interval in seconds after which a session should refresh if there was no          *                  activity.          */
specifier|public
name|Timed
parameter_list|(
name|long
name|interval
parameter_list|)
block|{
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsRefresh
parameter_list|(
name|long
name|secondsSinceLastAccess
parameter_list|)
block|{
return|return
name|secondsSinceLastAccess
operator|>
name|interval
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|refreshed
parameter_list|()
block|{
comment|// empty
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Refresh every "
operator|+
name|interval
operator|+
literal|" seconds"
return|;
block|}
block|}
block|}
end_interface

end_unit

