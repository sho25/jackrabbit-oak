begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|registerMBean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|registerObserver
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|scheduleWithFixedDelay
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NoSuchWorkspaceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|JMException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|IndexStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|QueryEngineSettingsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|RepositoryManagementMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|ContentRepositoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|management
operator|.
name|RepositoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|commit
operator|.
name|ConflictHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|CompositeIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUpdateProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|jmx
operator|.
name|PropertyIndexAsyncReindex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|jmx
operator|.
name|PropertyIndexAsyncReindexMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|QueryEngineSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CompositeEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CompositeHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ConflictHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|lifecycle
operator|.
name|CompositeInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|lifecycle
operator|.
name|OakInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|lifecycle
operator|.
name|RepositoryInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|lifecycle
operator|.
name|WorkspaceInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|CompositeQueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|DefaultWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Builder class for constructing {@link ContentRepository} instances with  * a set of specified plugin components. This class acts as a public facade  * that hides the internal implementation classes and the details of how  * they get instantiated and wired together.  *  * @since Oak 0.6  */
end_comment

begin_class
specifier|public
class|class
name|Oak
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Oak
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Constant for the default workspace name      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_WORKSPACE_NAME
init|=
literal|"default"
decl_stmt|;
specifier|private
specifier|final
name|NodeStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|RepositoryInitializer
argument_list|>
name|initializers
init|=
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
name|QueryEngineSettings
name|queryEngineSettings
init|=
operator|new
name|QueryEngineSettings
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|QueryIndexProvider
argument_list|>
name|queryIndexProviders
init|=
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|IndexEditorProvider
argument_list|>
name|indexEditorProviders
init|=
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|CommitHook
argument_list|>
name|commitHooks
init|=
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Observer
argument_list|>
name|observers
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|EditorProvider
argument_list|>
name|editorProviders
init|=
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
name|SecurityProvider
name|securityProvider
decl_stmt|;
specifier|private
name|ScheduledExecutorService
name|scheduledExecutor
init|=
name|defaultScheduledExecutor
argument_list|()
decl_stmt|;
specifier|private
name|Executor
name|executor
init|=
name|defaultExecutorService
argument_list|()
decl_stmt|;
comment|/**      * Default {@code ScheduledExecutorService} used for scheduling background tasks.      * This default spawns up to 32 background thread on an as need basis. Idle      * threads are pruned after one minute.      * @return  fresh ScheduledExecutorService      */
specifier|public
specifier|static
name|ScheduledExecutorService
name|defaultScheduledExecutor
parameter_list|()
block|{
name|ScheduledThreadPoolExecutor
name|executor
init|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|32
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|private
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|,
name|createName
argument_list|()
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|thread
return|;
block|}
specifier|private
name|String
name|createName
parameter_list|()
block|{
return|return
literal|"oak-scheduled-executor-"
operator|+
name|counter
operator|.
name|getAndIncrement
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|executor
operator|.
name|setKeepAliveTime
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|executor
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|executor
return|;
block|}
comment|/**      * Default {@code ExecutorService} used for scheduling concurrent tasks.      * This default spawns as many threads as required with a priority of      * {@code Thread.MIN_PRIORITY}. Idle threads are pruned after one minute.      * @return  fresh ExecutorService      */
specifier|public
specifier|static
name|ExecutorService
name|defaultExecutorService
parameter_list|()
block|{
name|ThreadPoolExecutor
name|executor
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|60L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|private
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|,
name|createName
argument_list|()
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|Thread
operator|.
name|MIN_PRIORITY
argument_list|)
expr_stmt|;
return|return
name|thread
return|;
block|}
specifier|private
name|String
name|createName
parameter_list|()
block|{
return|return
literal|"oak-executor-"
operator|+
name|counter
operator|.
name|getAndIncrement
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|executor
operator|.
name|setKeepAliveTime
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|executor
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|executor
return|;
block|}
specifier|private
name|MBeanServer
name|mbeanServer
decl_stmt|;
specifier|private
name|String
name|defaultWorkspaceName
init|=
name|DEFAULT_WORKSPACE_NAME
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getValue
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|,
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|T
name|def
parameter_list|)
block|{
name|Object
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isInstance
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|value
return|;
block|}
else|else
block|{
return|return
name|def
return|;
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getValue
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|,
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|getValue
argument_list|(
name|properties
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|Whiteboard
name|whiteboard
init|=
operator|new
name|DefaultWhiteboard
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Registration
name|register
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|T
name|service
parameter_list|,
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|)
block|{
specifier|final
name|Registration
name|registration
init|=
name|super
operator|.
name|register
argument_list|(
name|type
argument_list|,
name|service
argument_list|,
name|properties
argument_list|)
decl_stmt|;
specifier|final
name|Closer
name|observerSubscription
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|future
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|scheduledExecutor
operator|!=
literal|null
operator|&&
name|type
operator|==
name|Runnable
operator|.
name|class
condition|)
block|{
name|Runnable
name|runnable
init|=
operator|(
name|Runnable
operator|)
name|service
decl_stmt|;
name|Long
name|period
init|=
name|getValue
argument_list|(
name|properties
argument_list|,
literal|"scheduler.period"
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|period
operator|!=
literal|null
condition|)
block|{
name|Boolean
name|concurrent
init|=
name|getValue
argument_list|(
name|properties
argument_list|,
literal|"scheduler.concurrent"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
decl_stmt|;
if|if
condition|(
name|concurrent
condition|)
block|{
name|future
operator|=
name|scheduledExecutor
operator|.
name|scheduleAtFixedRate
argument_list|(
name|runnable
argument_list|,
name|period
argument_list|,
name|period
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|=
name|scheduledExecutor
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|runnable
argument_list|,
name|period
argument_list|,
name|period
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Observer
operator|.
name|class
operator|&&
name|store
operator|instanceof
name|Observable
condition|)
block|{
name|observerSubscription
operator|.
name|register
argument_list|(
operator|(
operator|(
name|Observable
operator|)
name|store
operator|)
operator|.
name|addObserver
argument_list|(
operator|(
name|Observer
operator|)
name|service
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ObjectName
name|objectName
init|=
literal|null
decl_stmt|;
name|Object
name|name
init|=
name|properties
operator|.
name|get
argument_list|(
literal|"jmx.objectname"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mbeanServer
operator|!=
literal|null
operator|&&
name|name
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|name
operator|instanceof
name|ObjectName
condition|)
block|{
name|objectName
operator|=
operator|(
name|ObjectName
operator|)
name|name
expr_stmt|;
block|}
else|else
block|{
name|objectName
operator|=
operator|new
name|ObjectName
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mbeanServer
operator|.
name|registerMBean
argument_list|(
name|service
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
specifier|final
name|Future
argument_list|<
name|?
argument_list|>
name|f
init|=
name|future
decl_stmt|;
specifier|final
name|ObjectName
name|on
init|=
name|objectName
decl_stmt|;
return|return
operator|new
name|Registration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|unregister
parameter_list|()
block|{
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
name|f
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|on
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|mbeanServer
operator|.
name|unregisterMBean
argument_list|(
name|on
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
try|try
block|{
name|observerSubscription
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected IOException while unsubscribing observer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|registration
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
comment|/**      * Flag controlling the asynchronous indexing behavior. If false (default)      * there will be no background indexing happening.      *       */
specifier|private
name|boolean
name|asyncIndexing
init|=
literal|false
decl_stmt|;
specifier|public
name|Oak
parameter_list|(
name|NodeStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|checkNotNull
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Oak
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|MemoryNodeStore
argument_list|()
argument_list|)
expr_stmt|;
comment|// this(new DocumentMK.Builder().open());
comment|// this(new LogWrapper(new DocumentMK.Builder().open()));
block|}
comment|/**      * Sets the default workspace name that should be used in case of login      * with {@code null} workspace name. If this method has not been called      * some internal default value will be used.      *      * @param defaultWorkspaceName The name of the default workspace.      * @return this builder.      */
annotation|@
name|Nonnull
specifier|public
name|Oak
name|with
parameter_list|(
annotation|@
name|Nonnull
name|String
name|defaultWorkspaceName
parameter_list|)
block|{
name|this
operator|.
name|defaultWorkspaceName
operator|=
name|checkNotNull
argument_list|(
name|defaultWorkspaceName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|Oak
name|with
parameter_list|(
annotation|@
name|Nonnull
name|RepositoryInitializer
name|initializer
parameter_list|)
block|{
name|initializers
operator|.
name|add
argument_list|(
name|checkNotNull
argument_list|(
name|initializer
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|Oak
name|with
parameter_list|(
annotation|@
name|Nonnull
name|QueryEngineSettings
name|queryEngineSettings
parameter_list|)
block|{
name|this
operator|.
name|queryEngineSettings
operator|=
name|queryEngineSettings
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Associates the given query index provider with the repository to      * be created.      *      * @param provider query index provider      * @return this builder      */
annotation|@
name|Nonnull
specifier|public
name|Oak
name|with
parameter_list|(
annotation|@
name|Nonnull
name|QueryIndexProvider
name|provider
parameter_list|)
block|{
name|queryIndexProviders
operator|.
name|add
argument_list|(
name|checkNotNull
argument_list|(
name|provider
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Associates the given index hook provider with the repository to      * be created.      *      * @param provider index hook provider      * @return this builder      */
annotation|@
name|Nonnull
specifier|public
name|Oak
name|with
parameter_list|(
annotation|@
name|Nonnull
name|IndexEditorProvider
name|provider
parameter_list|)
block|{
name|indexEditorProviders
operator|.
name|add
argument_list|(
name|checkNotNull
argument_list|(
name|provider
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Associates the given commit hook with the repository to be created.      *      * @param hook commit hook      * @return this builder      */
annotation|@
name|Nonnull
specifier|public
name|Oak
name|with
parameter_list|(
annotation|@
name|Nonnull
name|CommitHook
name|hook
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|hook
argument_list|)
expr_stmt|;
name|withEditorHook
argument_list|()
expr_stmt|;
name|commitHooks
operator|.
name|add
argument_list|(
name|hook
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Turns all currently tracked editors to an editor commit hook and      * associates that hook with the repository to be created. This way      * a sequence of {@code with()} calls that alternates between editors      * and other commit hooks will have all the editors in the correct      * order while still being able to leverage the performance gains of      * multiple editors iterating over the changes simultaneously.      */
specifier|private
name|void
name|withEditorHook
parameter_list|()
block|{
if|if
condition|(
operator|!
name|editorProviders
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|commitHooks
operator|.
name|add
argument_list|(
operator|new
name|EditorHook
argument_list|(
name|CompositeEditorProvider
operator|.
name|compose
argument_list|(
name|editorProviders
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|editorProviders
operator|=
name|newArrayList
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Associates the given editor provider with the repository to be created.      *      * @param provider editor provider      * @return this builder      */
annotation|@
name|Nonnull
specifier|public
name|Oak
name|with
parameter_list|(
annotation|@
name|Nonnull
name|EditorProvider
name|provider
parameter_list|)
block|{
name|editorProviders
operator|.
name|add
argument_list|(
name|checkNotNull
argument_list|(
name|provider
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Associates the given editor with the repository to be created.      *      * @param editor editor      * @return this builder      */
annotation|@
name|Nonnull
specifier|public
name|Oak
name|with
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|Editor
name|editor
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|editor
argument_list|)
expr_stmt|;
return|return
name|with
argument_list|(
operator|new
name|EditorProvider
argument_list|()
block|{
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Editor
name|getRootEditor
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
return|return
name|editor
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|Oak
name|with
parameter_list|(
annotation|@
name|Nonnull
name|SecurityProvider
name|securityProvider
parameter_list|)
block|{
name|this
operator|.
name|securityProvider
operator|=
name|checkNotNull
argument_list|(
name|securityProvider
argument_list|)
expr_stmt|;
if|if
condition|(
name|securityProvider
operator|instanceof
name|WhiteboardAware
condition|)
block|{
operator|(
operator|(
name|WhiteboardAware
operator|)
name|securityProvider
operator|)
operator|.
name|setWhiteboard
argument_list|(
name|whiteboard
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SecurityConfiguration
name|sc
range|:
name|securityProvider
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
name|RepositoryInitializer
name|ri
init|=
name|sc
operator|.
name|getRepositoryInitializer
argument_list|()
decl_stmt|;
if|if
condition|(
name|ri
operator|!=
name|RepositoryInitializer
operator|.
name|DEFAULT
condition|)
block|{
name|initializers
operator|.
name|add
argument_list|(
name|ri
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**      * Associates the given conflict handler with the repository to be created.      *      * @param conflictHandler conflict handler      * @return this builder      */
annotation|@
name|Nonnull
specifier|public
name|Oak
name|with
parameter_list|(
annotation|@
name|Nonnull
name|ConflictHandler
name|conflictHandler
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|conflictHandler
argument_list|)
expr_stmt|;
name|withEditorHook
argument_list|()
expr_stmt|;
name|commitHooks
operator|.
name|add
argument_list|(
operator|new
name|ConflictHook
argument_list|(
name|conflictHandler
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|Oak
name|with
parameter_list|(
annotation|@
name|Nonnull
name|ScheduledExecutorService
name|scheduledExecutor
parameter_list|)
block|{
name|this
operator|.
name|scheduledExecutor
operator|=
name|checkNotNull
argument_list|(
name|scheduledExecutor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|Oak
name|with
parameter_list|(
annotation|@
name|Nonnull
name|Executor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|checkNotNull
argument_list|(
name|executor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|Oak
name|with
parameter_list|(
annotation|@
name|Nonnull
name|MBeanServer
name|mbeanServer
parameter_list|)
block|{
name|this
operator|.
name|mbeanServer
operator|=
name|checkNotNull
argument_list|(
name|mbeanServer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|Oak
name|with
parameter_list|(
annotation|@
name|Nonnull
name|Whiteboard
name|whiteboard
parameter_list|)
block|{
name|this
operator|.
name|whiteboard
operator|=
name|checkNotNull
argument_list|(
name|whiteboard
argument_list|)
expr_stmt|;
if|if
condition|(
name|securityProvider
operator|instanceof
name|WhiteboardAware
condition|)
block|{
operator|(
operator|(
name|WhiteboardAware
operator|)
name|securityProvider
operator|)
operator|.
name|setWhiteboard
argument_list|(
name|whiteboard
argument_list|)
expr_stmt|;
block|}
name|QueryEngineSettings
name|queryEngineSettings
init|=
name|WhiteboardUtils
operator|.
name|getService
argument_list|(
name|whiteboard
argument_list|,
name|QueryEngineSettings
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryEngineSettings
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|queryEngineSettings
operator|=
name|queryEngineSettings
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|Oak
name|with
parameter_list|(
annotation|@
name|Nonnull
name|Observer
name|observer
parameter_list|)
block|{
name|observers
operator|.
name|add
argument_list|(
name|checkNotNull
argument_list|(
name|observer
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enable the asynchronous (background) indexing behavior.      *       * Please not that when enabling the background indexer, you need to take      * care of calling      *<code>#shutdown<code> on the<code>executor<code> provided for this Oak instance.      *       */
specifier|public
name|Oak
name|withAsyncIndexing
parameter_list|()
block|{
name|this
operator|.
name|asyncIndexing
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|Whiteboard
name|getWhiteboard
parameter_list|()
block|{
return|return
name|this
operator|.
name|whiteboard
return|;
block|}
specifier|public
name|ContentRepository
name|createContentRepository
parameter_list|()
block|{
name|whiteboard
operator|.
name|register
argument_list|(
name|Executor
operator|.
name|class
argument_list|,
name|executor
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|IndexEditorProvider
name|indexEditors
init|=
name|CompositeIndexEditorProvider
operator|.
name|compose
argument_list|(
name|indexEditorProviders
argument_list|)
decl_stmt|;
name|OakInitializer
operator|.
name|initialize
argument_list|(
name|store
argument_list|,
operator|new
name|CompositeInitializer
argument_list|(
name|initializers
argument_list|)
argument_list|,
name|indexEditors
argument_list|)
expr_stmt|;
name|QueryIndexProvider
name|indexProvider
init|=
name|CompositeQueryIndexProvider
operator|.
name|compose
argument_list|(
name|queryIndexProviders
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CommitHook
argument_list|>
name|initHooks
init|=
operator|new
name|ArrayList
argument_list|<
name|CommitHook
argument_list|>
argument_list|(
name|commitHooks
argument_list|)
decl_stmt|;
name|initHooks
operator|.
name|add
argument_list|(
operator|new
name|EditorHook
argument_list|(
name|CompositeEditorProvider
operator|.
name|compose
argument_list|(
name|editorProviders
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|asyncIndexing
condition|)
block|{
name|String
name|name
init|=
literal|"async"
decl_stmt|;
name|AsyncIndexUpdate
name|task
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
name|name
argument_list|,
name|store
argument_list|,
name|indexEditors
argument_list|)
decl_stmt|;
name|scheduleWithFixedDelay
argument_list|(
name|whiteboard
argument_list|,
name|task
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|IndexStatsMBean
operator|.
name|class
argument_list|,
name|task
operator|.
name|getIndexStats
argument_list|()
argument_list|,
name|IndexStatsMBean
operator|.
name|TYPE
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|PropertyIndexAsyncReindex
name|asyncPI
init|=
operator|new
name|PropertyIndexAsyncReindex
argument_list|(
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async-reindex"
argument_list|,
name|store
argument_list|,
name|indexEditors
argument_list|,
literal|true
argument_list|)
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|PropertyIndexAsyncReindexMBean
operator|.
name|class
argument_list|,
name|asyncPI
argument_list|,
name|PropertyIndexAsyncReindexMBean
operator|.
name|TYPE
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|QueryEngineSettingsMBean
operator|.
name|class
argument_list|,
name|queryEngineSettings
argument_list|,
name|QueryEngineSettingsMBean
operator|.
name|TYPE
argument_list|,
literal|"settings"
argument_list|)
expr_stmt|;
comment|// FIXME: OAK-810 move to proper workspace initialization
comment|// initialize default workspace
name|Iterable
argument_list|<
name|WorkspaceInitializer
argument_list|>
name|workspaceInitializers
init|=
name|Iterables
operator|.
name|transform
argument_list|(
name|securityProvider
operator|.
name|getConfigurations
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|SecurityConfiguration
argument_list|,
name|WorkspaceInitializer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|WorkspaceInitializer
name|apply
parameter_list|(
name|SecurityConfiguration
name|sc
parameter_list|)
block|{
return|return
name|sc
operator|.
name|getWorkspaceInitializer
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|OakInitializer
operator|.
name|initialize
argument_list|(
name|workspaceInitializers
argument_list|,
name|store
argument_list|,
name|defaultWorkspaceName
argument_list|,
name|indexEditors
argument_list|,
name|queryEngineSettings
argument_list|,
name|indexProvider
argument_list|,
name|CompositeHook
operator|.
name|compose
argument_list|(
name|initHooks
argument_list|)
argument_list|)
expr_stmt|;
comment|// add index hooks later to prevent the OakInitializer to do excessive indexing
name|with
argument_list|(
operator|new
name|IndexUpdateProvider
argument_list|(
name|indexEditors
argument_list|)
argument_list|)
expr_stmt|;
name|withEditorHook
argument_list|()
expr_stmt|;
comment|// Register observer last to prevent sending events while initialising
for|for
control|(
name|Observer
name|observer
range|:
name|observers
control|)
block|{
name|registerObserver
argument_list|(
name|whiteboard
argument_list|,
name|observer
argument_list|)
expr_stmt|;
block|}
name|RepositoryManager
name|repositoryManager
init|=
operator|new
name|RepositoryManager
argument_list|(
name|whiteboard
argument_list|)
decl_stmt|;
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|RepositoryManagementMBean
operator|.
name|class
argument_list|,
name|repositoryManager
argument_list|,
name|RepositoryManagementMBean
operator|.
name|TYPE
argument_list|,
name|repositoryManager
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|ContentRepositoryImpl
argument_list|(
name|store
argument_list|,
name|CompositeHook
operator|.
name|compose
argument_list|(
name|commitHooks
argument_list|)
argument_list|,
name|defaultWorkspaceName
argument_list|,
name|queryEngineSettings
argument_list|,
name|indexProvider
argument_list|,
name|securityProvider
argument_list|)
return|;
block|}
comment|/**      * Creates a content repository with the given configuration      * and logs in to the default workspace with no credentials,      * returning the resulting content session.      *<p/>      * This method exists mostly as a convenience for one-off tests,      * as there's no way to create other sessions for accessing the      * same repository.      *<p/>      * There is typically no need to explicitly close the returned      * session unless the repository has explicitly been configured      * to reserve some resources until all sessions have been closed.      * The repository will be garbage collected once the session is no      * longer used.      *      * @return content session      */
specifier|public
name|ContentSession
name|createContentSession
parameter_list|()
block|{
try|try
block|{
return|return
name|createContentRepository
argument_list|()
operator|.
name|login
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchWorkspaceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Default workspace not found"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Anonymous login not allowed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Creates a content repository with the given configuration      * and returns a {@link Root} instance after logging in to the      * default workspace with no credentials.      *<p/>      * This method exists mostly as a convenience for one-off tests, as      * the returned root is the only way to access the session or the      * repository.      *<p/>      * Note that since there is no way to close the underlying content      * session, this method should only be used when no components that      * require sessions to be closed have been configured. The repository      * and the session will be garbage collected once the root is no longer      * used.      *      * @return root instance      */
specifier|public
name|Root
name|createRoot
parameter_list|()
block|{
return|return
name|createContentSession
argument_list|()
operator|.
name|getLatestRoot
argument_list|()
return|;
block|}
block|}
end_class

end_unit

