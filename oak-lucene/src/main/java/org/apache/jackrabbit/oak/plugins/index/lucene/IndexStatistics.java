begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|FieldNames
operator|.
name|isPropertyField
import|;
end_import

begin_comment
comment|/**  * This class would populate some statistics from a reader. We want to be careful here such that  * we only collect statistics which don't incur reads from the index i.e. we would only collect  * stats that lucene would already have read into memory when the reader was opened.  */
end_comment

begin_class
specifier|public
class|class
name|IndexStatistics
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IndexStatistics
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|numDocs
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|numDocsForField
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|safelyInitialized
decl_stmt|;
comment|// For ease of tests as there didn't seem an easy way to make an IndexReader delegator
comment|// that would fail calls to reader on-demand.
specifier|static
name|boolean
name|failReadingFields
init|=
literal|false
decl_stmt|;
specifier|static
name|boolean
name|failReadingSyntheticallyFalliableField
init|=
literal|false
decl_stmt|;
specifier|static
specifier|final
name|String
name|SYNTHETICALLY_FALLIABLE_FIELD
init|=
literal|"synthetically-falliable-field"
decl_stmt|;
comment|/**      * @param reader {@link IndexReader} for which statistics need to be collected.      */
name|IndexStatistics
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
block|{
name|numDocs
operator|=
name|reader
operator|.
name|numDocs
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|numDocsForField
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|Fields
name|fields
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|failReadingFields
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Synthetically fail to read fields"
argument_list|)
throw|;
block|}
name|fields
operator|=
name|MultiFields
operator|.
name|getFields
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't open fields for reader ({}). Won't extract doc count per field"
argument_list|,
name|reader
argument_list|)
expr_stmt|;
name|numDocsForField
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|f
range|:
name|fields
control|)
block|{
if|if
condition|(
name|isPropertyField
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|int
name|docCntForField
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
if|if
condition|(
name|failReadingSyntheticallyFalliableField
operator|&&
name|SYNTHETICALLY_FALLIABLE_FIELD
operator|.
name|equals
argument_list|(
name|f
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Synthetically fail to read count for field jcr:title"
argument_list|)
throw|;
block|}
name|docCntForField
operator|=
name|reader
operator|.
name|getDocCount
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't read doc count for field {} via reader ({})."
argument_list|)
expr_stmt|;
block|}
name|numDocsForField
operator|.
name|put
argument_list|(
name|f
argument_list|,
name|docCntForField
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|numDocsForField
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|numDocsForField
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|numDocsForField
argument_list|)
expr_stmt|;
name|this
operator|.
name|safelyInitialized
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|numDocsForField
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|safelyInitialized
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**      * @return number of documents in the index      */
specifier|public
name|int
name|numDocs
parameter_list|()
block|{
return|return
name|numDocs
return|;
block|}
comment|/**      * @param field Index field for which number of indexed documents are to be return      * @return number of indexed documents (without subtracting potentially deleted ones)      *         for the given {@code field}.<br/>      *         -1: if index codec doesn't store doc-count-for-field statistics, OR<br/>      *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reader threw an exception while reading fields, OR<br/>      *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exception thrown while reading count for the field, OR<br/>      *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doc-count is asked for a non-property field.      */
specifier|public
name|int
name|getDocCountFor
parameter_list|(
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
operator|!
name|safelyInitialized
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|docCntForField
init|=
name|isPropertyField
argument_list|(
name|field
argument_list|)
condition|?
literal|0
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|numDocsForField
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|docCntForField
operator|=
name|numDocsForField
operator|.
name|get
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
return|return
name|docCntForField
return|;
block|}
block|}
end_class

end_unit

