begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Suppliers
operator|.
name|memoize
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BOOLEAN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|LONG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|MISSING_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|AbstractNodeState
operator|.
name|checkValidName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Suppliers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|AbstractNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|MeterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|NoopStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A record of type "NODE". This class can read a node record from a segment. It  * currently doesn't cache data (but the template is fully loaded).  */
end_comment

begin_class
specifier|public
class|class
name|SegmentNodeState
extends|extends
name|Record
implements|implements
name|NodeState
block|{
annotation|@
name|NotNull
specifier|private
specifier|final
name|SegmentReader
name|reader
decl_stmt|;
annotation|@
name|Nullable
specifier|private
specifier|final
name|BlobStore
name|blobStore
decl_stmt|;
annotation|@
name|NotNull
specifier|private
specifier|final
name|Supplier
argument_list|<
name|SegmentWriter
argument_list|>
name|writer
decl_stmt|;
specifier|private
specifier|final
name|MeterStats
name|readStats
decl_stmt|;
specifier|private
specifier|volatile
name|RecordId
name|templateId
init|=
literal|null
decl_stmt|;
specifier|private
specifier|volatile
name|Template
name|template
init|=
literal|null
decl_stmt|;
name|SegmentNodeState
parameter_list|(
annotation|@
name|NotNull
name|SegmentReader
name|reader
parameter_list|,
annotation|@
name|NotNull
name|Supplier
argument_list|<
name|SegmentWriter
argument_list|>
name|writer
parameter_list|,
annotation|@
name|Nullable
name|BlobStore
name|blobStore
parameter_list|,
annotation|@
name|NotNull
name|RecordId
name|id
parameter_list|,
name|MeterStats
name|readStats
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|checkNotNull
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|checkNotNull
argument_list|(
name|memoize
argument_list|(
name|writer
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
name|this
operator|.
name|readStats
operator|=
name|readStats
expr_stmt|;
block|}
specifier|public
name|SegmentNodeState
parameter_list|(
annotation|@
name|NotNull
name|SegmentReader
name|reader
parameter_list|,
annotation|@
name|NotNull
name|SegmentWriter
name|writer
parameter_list|,
annotation|@
name|Nullable
name|BlobStore
name|blobStore
parameter_list|,
annotation|@
name|NotNull
name|RecordId
name|id
parameter_list|)
block|{
name|this
argument_list|(
name|reader
argument_list|,
name|Suppliers
operator|.
name|ofInstance
argument_list|(
name|writer
argument_list|)
argument_list|,
name|blobStore
argument_list|,
name|id
argument_list|,
name|NoopStats
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SegmentNodeState
parameter_list|(
annotation|@
name|NotNull
name|SegmentReader
name|reader
parameter_list|,
annotation|@
name|NotNull
name|SegmentWriter
name|writer
parameter_list|,
annotation|@
name|Nullable
name|BlobStore
name|blobStore
parameter_list|,
annotation|@
name|NotNull
name|RecordId
name|id
parameter_list|,
name|MeterStats
name|readStats
parameter_list|)
block|{
name|this
argument_list|(
name|reader
argument_list|,
name|Suppliers
operator|.
name|ofInstance
argument_list|(
name|writer
argument_list|)
argument_list|,
name|blobStore
argument_list|,
name|id
argument_list|,
name|readStats
argument_list|)
expr_stmt|;
block|}
name|RecordId
name|getTemplateId
parameter_list|()
block|{
if|if
condition|(
name|templateId
operator|==
literal|null
condition|)
block|{
comment|// no problem if updated concurrently,
comment|// as each concurrent thread will just get the same value
name|templateId
operator|=
name|getSegment
argument_list|()
operator|.
name|readRecordId
argument_list|(
name|getRecordNumber
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|templateId
return|;
block|}
name|Template
name|getTemplate
parameter_list|()
block|{
if|if
condition|(
name|template
operator|==
literal|null
condition|)
block|{
comment|// no problem if updated concurrently,
comment|// as each concurrent thread will just get the same value
name|template
operator|=
name|reader
operator|.
name|readTemplate
argument_list|(
name|getTemplateId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|template
return|;
block|}
name|MapRecord
name|getChildNodeMap
parameter_list|()
block|{
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
return|return
name|reader
operator|.
name|readMap
argument_list|(
name|segment
operator|.
name|readRecordId
argument_list|(
name|getRecordNumber
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|static
name|String
name|getStableId
parameter_list|(
annotation|@
name|NotNull
name|Buffer
name|stableId
parameter_list|)
block|{
name|Buffer
name|buffer
init|=
name|stableId
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|long
name|msb
init|=
name|buffer
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|long
name|lsb
init|=
name|buffer
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|buffer
operator|.
name|getInt
argument_list|()
decl_stmt|;
return|return
operator|new
name|UUID
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
operator|+
literal|":"
operator|+
name|offset
return|;
block|}
comment|/**      * Returns the stable id of this node. In contrast to the node's record id      * (which is technically the node's address) the stable id doesn't change      * after an online gc cycle. It might though change after an offline gc cycle.      *      * @return  stable id      */
specifier|public
name|String
name|getStableId
parameter_list|()
block|{
return|return
name|getStableId
argument_list|(
name|getStableIdBytes
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns the stable ID of this node, non parsed. In contrast to the node's      * record id (which is technically the node's address) the stable id doesn't      * change after an online gc cycle. It might though change after an offline      * gc cycle.      *      * @return the stable ID of this node.      */
specifier|public
name|Buffer
name|getStableIdBytes
parameter_list|()
block|{
comment|// The first record id of this node points to the stable id.
name|RecordId
name|id
init|=
name|getSegment
argument_list|()
operator|.
name|readRecordId
argument_list|(
name|getRecordNumber
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|getRecordId
argument_list|()
argument_list|)
condition|)
block|{
comment|// If that id is equal to the record id of this node then the stable
comment|// id is the string representation of the record id of this node.
comment|// See RecordWriters.NodeStateWriter.writeRecordContent()
return|return
name|id
operator|.
name|getBytes
argument_list|()
return|;
block|}
else|else
block|{
comment|// Otherwise that id points to the serialised (msb, lsb, offset)
comment|// stable id.
return|return
name|id
operator|.
name|getSegment
argument_list|()
operator|.
name|readBytes
argument_list|(
name|id
operator|.
name|getRecordNumber
argument_list|()
argument_list|,
literal|0
argument_list|,
name|RecordId
operator|.
name|SERIALIZED_RECORD_ID_BYTES
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPropertyCount
parameter_list|()
block|{
name|readStats
operator|.
name|mark
argument_list|()
expr_stmt|;
name|Template
name|template
init|=
name|getTemplate
argument_list|()
decl_stmt|;
name|long
name|count
init|=
name|template
operator|.
name|getPropertyTemplates
argument_list|()
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|template
operator|.
name|getPrimaryType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|template
operator|.
name|getMixinTypes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasProperty
parameter_list|(
annotation|@
name|NotNull
name|String
name|name
parameter_list|)
block|{
name|readStats
operator|.
name|mark
argument_list|()
expr_stmt|;
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Template
name|template
init|=
name|getTemplate
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|name
condition|)
block|{
case|case
name|JCR_PRIMARYTYPE
case|:
return|return
name|template
operator|.
name|getPrimaryType
argument_list|()
operator|!=
literal|null
return|;
case|case
name|JCR_MIXINTYPES
case|:
return|return
name|template
operator|.
name|getMixinTypes
argument_list|()
operator|!=
literal|null
return|;
default|default:
return|return
name|template
operator|.
name|getPropertyTemplate
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nullable
specifier|public
name|PropertyState
name|getProperty
parameter_list|(
annotation|@
name|NotNull
name|String
name|name
parameter_list|)
block|{
name|readStats
operator|.
name|mark
argument_list|()
expr_stmt|;
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Template
name|template
init|=
name|getTemplate
argument_list|()
decl_stmt|;
name|PropertyState
name|property
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|JCR_PRIMARYTYPE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|property
operator|=
name|template
operator|.
name|getPrimaryType
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|JCR_MIXINTYPES
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|property
operator|=
name|template
operator|.
name|getMixinTypes
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
return|return
name|property
return|;
block|}
name|PropertyTemplate
name|propertyTemplate
init|=
name|template
operator|.
name|getPropertyTemplate
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyTemplate
operator|!=
literal|null
condition|)
block|{
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
name|RecordId
name|id
init|=
name|getRecordId
argument_list|(
name|segment
argument_list|,
name|template
argument_list|,
name|propertyTemplate
argument_list|)
decl_stmt|;
return|return
name|reader
operator|.
name|readProperty
argument_list|(
name|id
argument_list|,
name|propertyTemplate
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|RecordId
name|getRecordId
parameter_list|(
name|Segment
name|segment
parameter_list|,
name|Template
name|template
parameter_list|,
name|PropertyTemplate
name|propertyTemplate
parameter_list|)
block|{
name|int
name|ids
init|=
literal|2
decl_stmt|;
if|if
condition|(
name|template
operator|.
name|getChildName
argument_list|()
operator|!=
name|Template
operator|.
name|ZERO_CHILD_NODES
condition|)
block|{
name|ids
operator|++
expr_stmt|;
block|}
name|RecordId
name|rid
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getRecordNumber
argument_list|()
argument_list|,
literal|0
argument_list|,
name|ids
argument_list|)
decl_stmt|;
name|ListRecord
name|pIds
init|=
operator|new
name|ListRecord
argument_list|(
name|rid
argument_list|,
name|template
operator|.
name|getPropertyTemplates
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
return|return
name|pIds
operator|.
name|getEntry
argument_list|(
name|propertyTemplate
operator|.
name|getIndex
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|NotNull
specifier|public
name|Iterable
argument_list|<
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
name|readStats
operator|.
name|mark
argument_list|()
expr_stmt|;
name|Template
name|template
init|=
name|getTemplate
argument_list|()
decl_stmt|;
name|PropertyTemplate
index|[]
name|propertyTemplates
init|=
name|template
operator|.
name|getPropertyTemplates
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PropertyState
argument_list|>
name|list
init|=
name|newArrayListWithCapacity
argument_list|(
name|propertyTemplates
operator|.
name|length
operator|+
literal|2
argument_list|)
decl_stmt|;
name|PropertyState
name|primaryType
init|=
name|template
operator|.
name|getPrimaryType
argument_list|()
decl_stmt|;
if|if
condition|(
name|primaryType
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|primaryType
argument_list|)
expr_stmt|;
block|}
name|PropertyState
name|mixinTypes
init|=
name|template
operator|.
name|getMixinTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|mixinTypes
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|mixinTypes
argument_list|)
expr_stmt|;
block|}
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
name|int
name|ids
init|=
literal|2
decl_stmt|;
if|if
condition|(
name|template
operator|.
name|getChildName
argument_list|()
operator|!=
name|Template
operator|.
name|ZERO_CHILD_NODES
condition|)
block|{
name|ids
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|propertyTemplates
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|ListRecord
name|pIds
init|=
operator|new
name|ListRecord
argument_list|(
name|segment
operator|.
name|readRecordId
argument_list|(
name|getRecordNumber
argument_list|()
argument_list|,
literal|0
argument_list|,
name|ids
argument_list|)
argument_list|,
name|propertyTemplates
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propertyTemplates
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|RecordId
name|propertyId
init|=
name|pIds
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|reader
operator|.
name|readProperty
argument_list|(
name|propertyId
argument_list|,
name|propertyTemplates
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getBoolean
parameter_list|(
annotation|@
name|NotNull
name|String
name|name
parameter_list|)
block|{
name|readStats
operator|.
name|mark
argument_list|()
expr_stmt|;
return|return
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|getValueAsString
argument_list|(
name|name
argument_list|,
name|BOOLEAN
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLong
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|readStats
operator|.
name|mark
argument_list|()
expr_stmt|;
name|String
name|value
init|=
name|getValueAsString
argument_list|(
name|name
argument_list|,
name|LONG
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nullable
specifier|public
name|String
name|getString
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|readStats
operator|.
name|mark
argument_list|()
expr_stmt|;
return|return
name|getValueAsString
argument_list|(
name|name
argument_list|,
name|STRING
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|NotNull
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getStrings
parameter_list|(
annotation|@
name|NotNull
name|String
name|name
parameter_list|)
block|{
name|readStats
operator|.
name|mark
argument_list|()
expr_stmt|;
return|return
name|getValuesAsStrings
argument_list|(
name|name
argument_list|,
name|STRINGS
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
specifier|public
name|String
name|getName
parameter_list|(
annotation|@
name|NotNull
name|String
name|name
parameter_list|)
block|{
name|readStats
operator|.
name|mark
argument_list|()
expr_stmt|;
return|return
name|getValueAsString
argument_list|(
name|name
argument_list|,
name|NAME
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|NotNull
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getNames
parameter_list|(
annotation|@
name|NotNull
name|String
name|name
parameter_list|)
block|{
name|readStats
operator|.
name|mark
argument_list|()
expr_stmt|;
return|return
name|getValuesAsStrings
argument_list|(
name|name
argument_list|,
name|NAMES
argument_list|)
return|;
block|}
comment|/**      * Optimized value access method. Returns the string value of a property      * of a given non-array type. Returns {@code null} if the named property      * does not exist, or is of a different type than given.      *      * @param name property name      * @param type property type      * @return string value of the property, or {@code null}      */
annotation|@
name|Nullable
specifier|private
name|String
name|getValueAsString
parameter_list|(
name|String
name|name
parameter_list|,
name|Type
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|checkArgument
argument_list|(
operator|!
name|type
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|Template
name|template
init|=
name|getTemplate
argument_list|()
decl_stmt|;
if|if
condition|(
name|JCR_PRIMARYTYPE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|PropertyState
name|primary
init|=
name|template
operator|.
name|getPrimaryType
argument_list|()
decl_stmt|;
if|if
condition|(
name|primary
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|NAME
condition|)
block|{
return|return
name|primary
operator|.
name|getValue
argument_list|(
name|NAME
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|JCR_MIXINTYPES
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
name|template
operator|.
name|getMixinTypes
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|PropertyTemplate
name|propertyTemplate
init|=
name|template
operator|.
name|getPropertyTemplate
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyTemplate
operator|==
literal|null
operator|||
name|propertyTemplate
operator|.
name|getType
argument_list|()
operator|!=
name|type
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
name|RecordId
name|id
init|=
name|getRecordId
argument_list|(
name|segment
argument_list|,
name|template
argument_list|,
name|propertyTemplate
argument_list|)
decl_stmt|;
return|return
name|reader
operator|.
name|readString
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**      * Optimized value access method. Returns the string values of a property      * of a given array type. Returns an empty iterable if the named property      * does not exist, or is of a different type than given.      *      * @param name property name      * @param type property type      * @return string values of the property, or an empty iterable      */
annotation|@
name|NotNull
specifier|private
name|Iterable
argument_list|<
name|String
argument_list|>
name|getValuesAsStrings
parameter_list|(
name|String
name|name
parameter_list|,
name|Type
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|type
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|Template
name|template
init|=
name|getTemplate
argument_list|()
decl_stmt|;
if|if
condition|(
name|JCR_MIXINTYPES
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|PropertyState
name|mixin
init|=
name|template
operator|.
name|getMixinTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|NAMES
operator|&&
name|mixin
operator|!=
literal|null
condition|)
block|{
return|return
name|mixin
operator|.
name|getValue
argument_list|(
name|NAMES
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|NAMES
operator|||
name|mixin
operator|!=
literal|null
condition|)
block|{
return|return
name|emptyList
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|JCR_PRIMARYTYPE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
name|template
operator|.
name|getPrimaryType
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|emptyList
argument_list|()
return|;
block|}
name|PropertyTemplate
name|propertyTemplate
init|=
name|template
operator|.
name|getPropertyTemplate
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyTemplate
operator|==
literal|null
operator|||
name|propertyTemplate
operator|.
name|getType
argument_list|()
operator|!=
name|type
condition|)
block|{
return|return
name|emptyList
argument_list|()
return|;
block|}
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
name|RecordId
name|id
init|=
name|getRecordId
argument_list|(
name|segment
argument_list|,
name|template
argument_list|,
name|propertyTemplate
argument_list|)
decl_stmt|;
name|segment
operator|=
name|id
operator|.
name|getSegment
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|segment
operator|.
name|readInt
argument_list|(
name|id
operator|.
name|getRecordNumber
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
name|emptyList
argument_list|()
return|;
block|}
name|id
operator|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|id
operator|.
name|getRecordNumber
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
name|singletonList
argument_list|(
name|reader
operator|.
name|readString
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|newArrayListWithCapacity
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|ListRecord
name|list
init|=
operator|new
name|ListRecord
argument_list|(
name|id
argument_list|,
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|RecordId
name|value
range|:
name|list
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|reader
operator|.
name|readString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|(
name|long
name|max
parameter_list|)
block|{
name|readStats
operator|.
name|mark
argument_list|()
expr_stmt|;
name|String
name|childName
init|=
name|getTemplate
argument_list|()
operator|.
name|getChildName
argument_list|()
decl_stmt|;
if|if
condition|(
name|childName
operator|==
name|Template
operator|.
name|ZERO_CHILD_NODES
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|childName
operator|==
name|Template
operator|.
name|MANY_CHILD_NODES
condition|)
block|{
return|return
name|getChildNodeMap
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasChildNode
parameter_list|(
annotation|@
name|NotNull
name|String
name|name
parameter_list|)
block|{
name|readStats
operator|.
name|mark
argument_list|()
expr_stmt|;
name|String
name|childName
init|=
name|getTemplate
argument_list|()
operator|.
name|getChildName
argument_list|()
decl_stmt|;
if|if
condition|(
name|childName
operator|==
name|Template
operator|.
name|ZERO_CHILD_NODES
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|childName
operator|==
name|Template
operator|.
name|MANY_CHILD_NODES
condition|)
block|{
return|return
name|getChildNodeMap
argument_list|()
operator|.
name|getEntry
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
else|else
block|{
return|return
name|childName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|NotNull
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
annotation|@
name|NotNull
name|String
name|name
parameter_list|)
block|{
name|readStats
operator|.
name|mark
argument_list|()
expr_stmt|;
name|String
name|childName
init|=
name|getTemplate
argument_list|()
operator|.
name|getChildName
argument_list|()
decl_stmt|;
if|if
condition|(
name|childName
operator|==
name|Template
operator|.
name|MANY_CHILD_NODES
condition|)
block|{
name|MapEntry
name|child
init|=
name|getChildNodeMap
argument_list|()
operator|.
name|getEntry
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
return|return
name|child
operator|.
name|getNodeState
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|childName
operator|!=
name|Template
operator|.
name|ZERO_CHILD_NODES
operator|&&
name|childName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|RecordId
name|childNodeId
init|=
name|getSegment
argument_list|()
operator|.
name|readRecordId
argument_list|(
name|getRecordNumber
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
return|return
name|reader
operator|.
name|readNode
argument_list|(
name|childNodeId
argument_list|)
return|;
block|}
name|checkValidName
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|MISSING_NODE
return|;
block|}
annotation|@
name|Override
annotation|@
name|NotNull
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getChildNodeNames
parameter_list|()
block|{
name|readStats
operator|.
name|mark
argument_list|()
expr_stmt|;
name|String
name|childName
init|=
name|getTemplate
argument_list|()
operator|.
name|getChildName
argument_list|()
decl_stmt|;
if|if
condition|(
name|childName
operator|==
name|Template
operator|.
name|ZERO_CHILD_NODES
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|childName
operator|==
name|Template
operator|.
name|MANY_CHILD_NODES
condition|)
block|{
return|return
name|getChildNodeMap
argument_list|()
operator|.
name|getKeys
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|childName
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|NotNull
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|()
block|{
name|readStats
operator|.
name|mark
argument_list|()
expr_stmt|;
name|String
name|childName
init|=
name|getTemplate
argument_list|()
operator|.
name|getChildName
argument_list|()
decl_stmt|;
if|if
condition|(
name|childName
operator|==
name|Template
operator|.
name|ZERO_CHILD_NODES
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|childName
operator|==
name|Template
operator|.
name|MANY_CHILD_NODES
condition|)
block|{
return|return
name|getChildNodeMap
argument_list|()
operator|.
name|getEntries
argument_list|()
return|;
block|}
else|else
block|{
name|RecordId
name|childNodeId
init|=
name|getSegment
argument_list|()
operator|.
name|readRecordId
argument_list|(
name|getRecordNumber
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|MemoryChildNodeEntry
argument_list|(
name|childName
argument_list|,
name|reader
operator|.
name|readNode
argument_list|(
name|childNodeId
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|NotNull
specifier|public
name|SegmentNodeBuilder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|SegmentNodeBuilder
argument_list|(
name|this
argument_list|,
name|blobStore
argument_list|,
name|reader
argument_list|,
name|writer
operator|.
name|get
argument_list|()
argument_list|,
name|readStats
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|compareAgainstBaseState
parameter_list|(
name|NodeState
name|base
parameter_list|,
name|NodeStateDiff
name|diff
parameter_list|)
block|{
name|readStats
operator|.
name|mark
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|==
name|base
operator|||
name|fastEquals
argument_list|(
name|this
argument_list|,
name|base
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
comment|// no changes
block|}
elseif|else
if|if
condition|(
name|base
operator|==
name|EMPTY_NODE
operator|||
operator|!
name|base
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// special case
return|return
name|EmptyNodeState
operator|.
name|compareAgainstEmptyState
argument_list|(
name|this
argument_list|,
name|diff
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|base
operator|instanceof
name|SegmentNodeState
operator|)
condition|)
block|{
comment|// fallback
return|return
name|AbstractNodeState
operator|.
name|compareAgainstBaseState
argument_list|(
name|this
argument_list|,
name|base
argument_list|,
name|diff
argument_list|)
return|;
block|}
name|SegmentNodeState
name|that
init|=
operator|(
name|SegmentNodeState
operator|)
name|base
decl_stmt|;
name|Template
name|beforeTemplate
init|=
name|that
operator|.
name|getTemplate
argument_list|()
decl_stmt|;
name|RecordId
name|beforeId
init|=
name|that
operator|.
name|getRecordId
argument_list|()
decl_stmt|;
name|Template
name|afterTemplate
init|=
name|getTemplate
argument_list|()
decl_stmt|;
name|RecordId
name|afterId
init|=
name|getRecordId
argument_list|()
decl_stmt|;
comment|// Compare type properties
if|if
condition|(
operator|!
name|compareProperties
argument_list|(
name|beforeTemplate
operator|.
name|getPrimaryType
argument_list|()
argument_list|,
name|afterTemplate
operator|.
name|getPrimaryType
argument_list|()
argument_list|,
name|diff
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|compareProperties
argument_list|(
name|beforeTemplate
operator|.
name|getMixinTypes
argument_list|()
argument_list|,
name|afterTemplate
operator|.
name|getMixinTypes
argument_list|()
argument_list|,
name|diff
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Compare other properties, leveraging the ordering
name|int
name|beforeIndex
init|=
literal|0
decl_stmt|;
name|int
name|afterIndex
init|=
literal|0
decl_stmt|;
name|PropertyTemplate
index|[]
name|beforeProperties
init|=
name|beforeTemplate
operator|.
name|getPropertyTemplates
argument_list|()
decl_stmt|;
name|PropertyTemplate
index|[]
name|afterProperties
init|=
name|afterTemplate
operator|.
name|getPropertyTemplates
argument_list|()
decl_stmt|;
while|while
condition|(
name|beforeIndex
operator|<
name|beforeProperties
operator|.
name|length
operator|&&
name|afterIndex
operator|<
name|afterProperties
operator|.
name|length
condition|)
block|{
name|int
name|d
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|afterProperties
index|[
name|afterIndex
index|]
operator|.
name|hashCode
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|beforeProperties
index|[
name|beforeIndex
index|]
operator|.
name|hashCode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|0
condition|)
block|{
name|d
operator|=
name|afterProperties
index|[
name|afterIndex
index|]
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|beforeProperties
index|[
name|beforeIndex
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|PropertyState
name|beforeProperty
init|=
literal|null
decl_stmt|;
name|PropertyState
name|afterProperty
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|d
operator|<
literal|0
condition|)
block|{
name|afterProperty
operator|=
name|afterTemplate
operator|.
name|getProperty
argument_list|(
name|afterId
argument_list|,
name|afterIndex
operator|++
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|>
literal|0
condition|)
block|{
name|beforeProperty
operator|=
name|beforeTemplate
operator|.
name|getProperty
argument_list|(
name|beforeId
argument_list|,
name|beforeIndex
operator|++
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|afterProperty
operator|=
name|afterTemplate
operator|.
name|getProperty
argument_list|(
name|afterId
argument_list|,
name|afterIndex
operator|++
argument_list|)
expr_stmt|;
name|beforeProperty
operator|=
name|beforeTemplate
operator|.
name|getProperty
argument_list|(
name|beforeId
argument_list|,
name|beforeIndex
operator|++
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|compareProperties
argument_list|(
name|beforeProperty
argument_list|,
name|afterProperty
argument_list|,
name|diff
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
while|while
condition|(
name|afterIndex
operator|<
name|afterProperties
operator|.
name|length
condition|)
block|{
if|if
condition|(
operator|!
name|diff
operator|.
name|propertyAdded
argument_list|(
name|afterTemplate
operator|.
name|getProperty
argument_list|(
name|afterId
argument_list|,
name|afterIndex
operator|++
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
while|while
condition|(
name|beforeIndex
operator|<
name|beforeProperties
operator|.
name|length
condition|)
block|{
name|PropertyState
name|beforeProperty
init|=
name|beforeTemplate
operator|.
name|getProperty
argument_list|(
name|beforeId
argument_list|,
name|beforeIndex
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|diff
operator|.
name|propertyDeleted
argument_list|(
name|beforeProperty
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|String
name|beforeChildName
init|=
name|beforeTemplate
operator|.
name|getChildName
argument_list|()
decl_stmt|;
name|String
name|afterChildName
init|=
name|afterTemplate
operator|.
name|getChildName
argument_list|()
decl_stmt|;
if|if
condition|(
name|afterChildName
operator|==
name|Template
operator|.
name|ZERO_CHILD_NODES
condition|)
block|{
if|if
condition|(
name|beforeChildName
operator|!=
name|Template
operator|.
name|ZERO_CHILD_NODES
condition|)
block|{
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|beforeTemplate
operator|.
name|getChildNodeEntries
argument_list|(
name|beforeId
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|diff
operator|.
name|childNodeDeleted
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
operator|.
name|getNodeState
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|afterChildName
operator|!=
name|Template
operator|.
name|MANY_CHILD_NODES
condition|)
block|{
name|NodeState
name|afterNode
init|=
name|afterTemplate
operator|.
name|getChildNode
argument_list|(
name|afterChildName
argument_list|,
name|afterId
argument_list|)
decl_stmt|;
name|NodeState
name|beforeNode
init|=
name|beforeTemplate
operator|.
name|getChildNode
argument_list|(
name|afterChildName
argument_list|,
name|beforeId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|beforeNode
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|diff
operator|.
name|childNodeAdded
argument_list|(
name|afterChildName
argument_list|,
name|afterNode
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|fastEquals
argument_list|(
name|afterNode
argument_list|,
name|beforeNode
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|diff
operator|.
name|childNodeChanged
argument_list|(
name|afterChildName
argument_list|,
name|beforeNode
argument_list|,
name|afterNode
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|beforeChildName
operator|==
name|Template
operator|.
name|MANY_CHILD_NODES
operator|||
operator|(
name|beforeChildName
operator|!=
name|Template
operator|.
name|ZERO_CHILD_NODES
operator|&&
operator|!
name|beforeNode
operator|.
name|exists
argument_list|()
operator|)
condition|)
block|{
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|beforeTemplate
operator|.
name|getChildNodeEntries
argument_list|(
name|beforeId
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|afterChildName
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|diff
operator|.
name|childNodeDeleted
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
operator|.
name|getNodeState
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|beforeChildName
operator|==
name|Template
operator|.
name|ZERO_CHILD_NODES
condition|)
block|{
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|afterTemplate
operator|.
name|getChildNodeEntries
argument_list|(
name|afterId
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|diff
operator|.
name|childNodeAdded
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
operator|.
name|getNodeState
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|beforeChildName
operator|!=
name|Template
operator|.
name|MANY_CHILD_NODES
condition|)
block|{
name|boolean
name|beforeChildRemoved
init|=
literal|true
decl_stmt|;
name|NodeState
name|beforeChild
init|=
name|beforeTemplate
operator|.
name|getChildNode
argument_list|(
name|beforeChildName
argument_list|,
name|beforeId
argument_list|)
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|afterTemplate
operator|.
name|getChildNodeEntries
argument_list|(
name|afterId
argument_list|)
control|)
block|{
name|String
name|childName
init|=
name|entry
operator|.
name|getName
argument_list|()
decl_stmt|;
name|NodeState
name|afterChild
init|=
name|entry
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
if|if
condition|(
name|beforeChildName
operator|.
name|equals
argument_list|(
name|childName
argument_list|)
condition|)
block|{
name|beforeChildRemoved
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|fastEquals
argument_list|(
name|afterChild
argument_list|,
name|beforeChild
argument_list|)
operator|&&
operator|!
name|diff
operator|.
name|childNodeChanged
argument_list|(
name|childName
argument_list|,
name|beforeChild
argument_list|,
name|afterChild
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|diff
operator|.
name|childNodeAdded
argument_list|(
name|childName
argument_list|,
name|afterChild
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|beforeChildRemoved
condition|)
block|{
if|if
condition|(
operator|!
name|diff
operator|.
name|childNodeDeleted
argument_list|(
name|beforeChildName
argument_list|,
name|beforeChild
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
else|else
block|{
name|MapRecord
name|afterMap
init|=
name|afterTemplate
operator|.
name|getChildNodeMap
argument_list|(
name|afterId
argument_list|)
decl_stmt|;
name|MapRecord
name|beforeMap
init|=
name|beforeTemplate
operator|.
name|getChildNodeMap
argument_list|(
name|beforeId
argument_list|)
decl_stmt|;
return|return
name|afterMap
operator|.
name|compare
argument_list|(
name|beforeMap
argument_list|,
name|diff
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|boolean
name|compareProperties
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|,
name|NodeStateDiff
name|diff
parameter_list|)
block|{
if|if
condition|(
name|before
operator|==
literal|null
condition|)
block|{
return|return
name|after
operator|==
literal|null
operator|||
name|diff
operator|.
name|propertyAdded
argument_list|(
name|after
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|after
operator|==
literal|null
condition|)
block|{
return|return
name|diff
operator|.
name|propertyDeleted
argument_list|(
name|before
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|before
operator|.
name|equals
argument_list|(
name|after
argument_list|)
operator|||
name|diff
operator|.
name|propertyChanged
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
return|;
block|}
block|}
comment|//------------------------------------------------------------< Object>--
comment|/**      * Indicates whether two {@link NodeState} instances are equal to each      * other. A return value of {@code true} clearly means that the instances      * are equal, while a return value of {@code false} doesn't necessarily mean      * the instances are not equal. These "false negatives" are an      * implementation detail and callers cannot rely on them being stable.      *       * @param a      *            the first {@link NodeState} instance      * @param b      *            the second {@link NodeState} instance      * @return {@code true}, if these two instances are equal.      */
specifier|public
specifier|static
name|boolean
name|fastEquals
parameter_list|(
name|NodeState
name|a
parameter_list|,
name|NodeState
name|b
parameter_list|)
block|{
if|if
condition|(
name|Record
operator|.
name|fastEquals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|a
operator|instanceof
name|SegmentNodeState
operator|&&
name|b
operator|instanceof
name|SegmentNodeState
operator|&&
operator|(
operator|(
name|SegmentNodeState
operator|)
name|a
operator|)
operator|.
name|getStableId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|SegmentNodeState
operator|)
name|b
operator|)
operator|.
name|getStableId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getStableId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|SegmentNodeState
condition|)
block|{
name|SegmentNodeState
name|that
init|=
operator|(
name|SegmentNodeState
operator|)
name|object
decl_stmt|;
if|if
condition|(
name|fastEquals
argument_list|(
name|this
argument_list|,
name|that
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|Template
name|template
init|=
name|getTemplate
argument_list|()
decl_stmt|;
return|return
name|template
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getTemplate
argument_list|()
argument_list|)
operator|&&
name|template
operator|.
name|compare
argument_list|(
name|getRecordId
argument_list|()
argument_list|,
name|that
operator|.
name|getRecordId
argument_list|()
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|object
operator|instanceof
name|NodeState
operator|&&
name|AbstractNodeState
operator|.
name|equals
argument_list|(
name|this
argument_list|,
operator|(
name|NodeState
operator|)
name|object
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|AbstractNodeState
operator|.
name|toString
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
end_class

end_unit

