begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|evaluation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|RepoLevelPolicyTest
extends|extends
name|AbstractOakCoreTest
implements|implements
name|PrivilegeConstants
block|{
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PathNotFoundException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetApplicablePoliciesRootNotReadable
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
literal|null
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
literal|true
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|getAccessControlManager
argument_list|(
name|getTestRoot
argument_list|()
argument_list|)
operator|.
name|getApplicablePolicies
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PathNotFoundException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetApplicablePoliciesRootNotReadable2
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
literal|null
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
literal|true
argument_list|,
name|JCR_READ
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|getAccessControlManager
argument_list|(
name|getTestRoot
argument_list|()
argument_list|)
operator|.
name|getApplicablePolicies
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetApplicablePoliciesMissingAcPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
literal|true
argument_list|,
name|JCR_READ
argument_list|)
expr_stmt|;
name|getAccessControlManager
argument_list|(
name|getTestRoot
argument_list|()
argument_list|)
operator|.
name|getApplicablePolicies
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetApplicablePoliciesMissingAcPermission2
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
literal|true
argument_list|,
name|JCR_READ
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|getAccessControlManager
argument_list|(
name|getTestRoot
argument_list|()
argument_list|)
operator|.
name|getApplicablePolicies
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetApplicablePolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
literal|true
argument_list|,
name|JCR_READ
argument_list|)
expr_stmt|;
name|setupPermission
argument_list|(
literal|null
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
literal|true
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|getAccessControlManager
argument_list|(
name|getTestRoot
argument_list|()
argument_list|)
operator|.
name|getApplicablePolicies
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSetPolicyMissingAcPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
literal|true
argument_list|,
name|JCR_READ
argument_list|)
expr_stmt|;
name|setupPermission
argument_list|(
literal|null
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
literal|true
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|setupPermission
argument_list|(
name|getTestRoot
argument_list|()
argument_list|,
literal|null
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|false
argument_list|,
name|JCR_NAMESPACE_MANAGEMENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSetPolicyMissingAcPermission2
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
literal|true
argument_list|,
name|JCR_READ
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|setupPermission
argument_list|(
literal|null
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
literal|true
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|setupPermission
argument_list|(
name|getTestRoot
argument_list|()
argument_list|,
literal|null
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|false
argument_list|,
name|JCR_NAMESPACE_MANAGEMENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
literal|true
argument_list|,
name|JCR_READ
argument_list|)
expr_stmt|;
name|setupPermission
argument_list|(
literal|null
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
literal|true
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|setupPermission
argument_list|(
name|getTestRoot
argument_list|()
argument_list|,
literal|null
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|false
argument_list|,
name|JCR_NAMESPACE_MANAGEMENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPolicy2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// see above: ac-related permissions should not be required on ROOT_PATH (workaround for OAK-5947)
name|setupPermission
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
literal|true
argument_list|,
name|JCR_READ
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|setupPermission
argument_list|(
literal|null
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
literal|true
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|setupPermission
argument_list|(
name|getTestRoot
argument_list|()
argument_list|,
literal|null
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|false
argument_list|,
name|JCR_NAMESPACE_MANAGEMENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilege
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
literal|null
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
literal|true
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_NAMESPACE_MANAGEMENT
argument_list|)
expr_stmt|;
name|AccessControlManager
name|testAcMgr
init|=
name|getAccessControlManager
argument_list|(
name|getTestRoot
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
literal|null
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_NAMESPACE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
literal|null
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
literal|null
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_NAMESPACE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
literal|null
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
literal|null
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
literal|null
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
literal|true
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_NAMESPACE_MANAGEMENT
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Privilege
argument_list|>
name|expected
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|privilegesFromNames
argument_list|(
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_NAMESPACE_MANAGEMENT
argument_list|)
argument_list|)
decl_stmt|;
name|AccessControlManager
name|testAcMgr
init|=
name|getAccessControlManager
argument_list|(
name|getTestRoot
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

