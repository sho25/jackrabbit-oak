begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Represents binary data which is backed by a byte[] (in memory).  */
end_comment

begin_class
class|class
name|InMemoryDataRecord
implements|implements
name|DataRecord
block|{
comment|/**      * Logger instance for this class      */
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InMemoryDataRecord
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * the prefix of the string representation of this value      */
specifier|private
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"0x"
decl_stmt|;
comment|/**      * the data      */
specifier|private
specifier|final
name|byte
index|[]
name|data
decl_stmt|;
specifier|private
name|DataIdentifier
name|identifier
decl_stmt|;
comment|/**      * empty array      */
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_BYTE_ARRAY
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
comment|/**      * empty instance      */
specifier|private
specifier|static
specifier|final
name|InMemoryDataRecord
name|EMPTY
init|=
operator|new
name|InMemoryDataRecord
argument_list|(
name|EMPTY_BYTE_ARRAY
argument_list|)
decl_stmt|;
comment|/**      * Creates a new instance from a      *<code>byte[]</code> array.      *      * @param data the byte array      */
specifier|private
name|InMemoryDataRecord
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
comment|/**      * Creates a new instance from a      *<code>byte[]</code> array.      *      * @param data the byte array      */
specifier|static
name|InMemoryDataRecord
name|getInstance
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|EMPTY
return|;
block|}
else|else
block|{
return|return
operator|new
name|InMemoryDataRecord
argument_list|(
name|data
argument_list|)
return|;
block|}
block|}
comment|/**      * Checks if String can be converted to an instance of this class.      * @param id DataRecord identifier      * @return true if it can be converted      */
specifier|static
name|boolean
name|isInstance
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|id
operator|.
name|startsWith
argument_list|(
name|PREFIX
argument_list|)
return|;
block|}
comment|/**      * Convert a String to an instance of this class.      * @param id DataRecord identifier      * @return the instance      */
specifier|static
name|InMemoryDataRecord
name|getInstance
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
assert|assert
name|id
operator|.
name|startsWith
argument_list|(
name|PREFIX
argument_list|)
assert|;
name|id
operator|=
name|id
operator|.
name|substring
argument_list|(
name|PREFIX
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|id
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|%
literal|2
operator|!=
literal|0
condition|)
block|{
name|String
name|msg
init|=
literal|"unable to deserialize byte array "
operator|+
name|id
operator|+
literal|" , length="
operator|+
name|id
operator|.
name|length
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|len
operator|/=
literal|2
expr_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|Character
operator|.
name|digit
argument_list|(
name|id
operator|.
name|charAt
argument_list|(
literal|2
operator|*
name|i
argument_list|)
argument_list|,
literal|16
argument_list|)
operator|<<
literal|4
operator|)
operator||
operator|(
name|Character
operator|.
name|digit
argument_list|(
name|id
operator|.
name|charAt
argument_list|(
literal|2
operator|*
name|i
operator|+
literal|1
argument_list|)
argument_list|,
literal|16
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"unable to deserialize byte array "
operator|+
name|id
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
name|InMemoryDataRecord
operator|.
name|getInstance
argument_list|(
name|data
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataIdentifier
name|getIdentifier
parameter_list|()
block|{
if|if
condition|(
name|identifier
operator|==
literal|null
condition|)
block|{
name|identifier
operator|=
operator|new
name|DataIdentifier
argument_list|(
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|identifier
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getReference
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|()
throws|throws
name|DataStoreException
block|{
return|return
name|data
operator|.
name|length
return|;
block|}
specifier|public
name|InputStream
name|getStream
parameter_list|()
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLastModified
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|(
name|PREFIX
operator|.
name|length
argument_list|()
operator|+
literal|2
operator|*
name|data
operator|.
name|length
argument_list|)
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|PREFIX
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
name|aData
range|:
name|data
control|)
block|{
name|int
name|c
init|=
name|aData
operator|&
literal|0xff
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|c
operator|>>
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|c
operator|&
literal|0xf
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|InMemoryDataRecord
condition|)
block|{
name|InMemoryDataRecord
name|other
init|=
operator|(
name|InMemoryDataRecord
operator|)
name|obj
decl_stmt|;
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|data
argument_list|,
name|other
operator|.
name|data
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns zero to satisfy the Object equals/hashCode contract.      * This class is mutable and not meant to be used as a hash key.      *      * @return always zero      * @see Object#hashCode()      */
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

