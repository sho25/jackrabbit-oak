begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Collections2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ImportBehavior
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|final
class|class
name|Utils
implements|implements
name|Constants
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Utils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Utils
parameter_list|()
block|{}
comment|/**      * Returns {@code true} if the given tree exists and represents a valid principal policy node, i.e. name equals to      * {@link #REP_PRINCIPAL_POLICY} and primary type name equals to {@link #NT_REP_PRINCIPAL_POLICY}. Otherwise this      * method returns {@code false}.      *      * @param tree The tree to be tested.      * @return {@code true} if the given tree exists and represents a valid principal policy node, i.e. name equals to      * {@link #REP_PRINCIPAL_POLICY} and primary type name equals to {@link #NT_REP_PRINCIPAL_POLICY}; otherwise      * returns {@code false}.      */
specifier|public
specifier|static
name|boolean
name|isPrincipalPolicyTree
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|)
block|{
return|return
name|tree
operator|.
name|exists
argument_list|()
operator|&&
name|REP_PRINCIPAL_POLICY
operator|.
name|equals
argument_list|(
name|tree
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|NT_REP_PRINCIPAL_POLICY
operator|.
name|equals
argument_list|(
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|tree
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isPrincipalEntry
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|)
block|{
return|return
name|NT_REP_PRINCIPAL_ENTRY
operator|.
name|equals
argument_list|(
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|tree
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Validate the specified {@code principal} taking the configured      * {@link ImportBehavior} into account.      *      * @param principal The principal to validate.      * @return if the principal can be handled by the filter      * @throws AccessControlException If the principal has an invalid name or      * if {@link ImportBehavior#ABORT} is configured and this principal cannot be handled by the filter.      */
specifier|public
specifier|static
name|boolean
name|canHandle
parameter_list|(
annotation|@
name|NotNull
name|Principal
name|principal
parameter_list|,
annotation|@
name|NotNull
name|Filter
name|filter
parameter_list|,
name|int
name|importBehavior
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|String
name|name
init|=
name|principal
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Invalid principal "
operator|+
name|name
argument_list|)
throw|;
block|}
name|boolean
name|canHandle
init|=
name|filter
operator|.
name|canHandle
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|principal
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|importBehavior
condition|)
block|{
case|case
name|ImportBehavior
operator|.
name|ABORT
case|:
if|if
condition|(
operator|!
name|canHandle
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Unsupported principal "
operator|+
name|name
argument_list|)
throw|;
block|}
break|break;
case|case
name|ImportBehavior
operator|.
name|IGNORE
case|:
case|case
name|ImportBehavior
operator|.
name|BESTEFFORT
case|:
name|log
operator|.
name|debug
argument_list|(
literal|"Ignoring unsupported principal {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported import behavior "
operator|+
name|importBehavior
argument_list|)
throw|;
block|}
return|return
name|canHandle
return|;
block|}
comment|/**      * Returns an array of privileges from the given Oak names. Note that {@link RepositoryException} thrown by      * {@link PrivilegeManager#getPrivilege(String)} will be swallowed but notified in the error log.      *      * @param privilegeNames The Oak names of privileges as stored in the repository.      * @param privilegeManager The {@link PrivilegeManager} to retrieve the privileges.      * @param namePathMapper The {@link NamePathMapper} to convert the Oak names to JCR names.      * @return An array of {@link Privilege} for the given names.      */
specifier|public
specifier|static
name|Privilege
index|[]
name|privilegesFromOakNames
parameter_list|(
annotation|@
name|NotNull
name|Set
argument_list|<
name|String
argument_list|>
name|privilegeNames
parameter_list|,
annotation|@
name|NotNull
name|PrivilegeManager
name|privilegeManager
parameter_list|,
annotation|@
name|NotNull
name|NamePathMapper
name|namePathMapper
parameter_list|)
block|{
return|return
name|Collections2
operator|.
name|filter
argument_list|(
name|Collections2
operator|.
name|transform
argument_list|(
name|privilegeNames
argument_list|,
name|privilegeName
lambda|->
block|{
try|try
block|{
return|return
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|namePathMapper
operator|.
name|getJcrName
argument_list|(
name|privilegeName
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unknown privilege in access control entry : {}"
argument_list|,
name|privilegeName
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
argument_list|,
name|Predicates
operator|.
name|notNull
argument_list|()
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|hasModAcPermission
parameter_list|(
annotation|@
name|NotNull
name|PermissionProvider
name|permissionProvider
parameter_list|,
annotation|@
name|NotNull
name|String
name|effectivePath
parameter_list|)
block|{
if|if
condition|(
name|REPOSITORY_PERMISSION_PATH
operator|.
name|equals
argument_list|(
name|effectivePath
argument_list|)
condition|)
block|{
return|return
name|permissionProvider
operator|.
name|getRepositoryPermission
argument_list|()
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|effectivePath
argument_list|,
name|Permissions
operator|.
name|getString
argument_list|(
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

