begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|cli
operator|.
name|node
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_class
specifier|public
class|class
name|StoreFactory
block|{
specifier|private
specifier|final
name|Jackrabbit2Factory
name|jcr2Factory
decl_stmt|;
specifier|private
specifier|final
name|NodeStoreFactory
name|nodeStoreFactory
decl_stmt|;
specifier|public
name|StoreFactory
parameter_list|(
name|Jackrabbit2Factory
name|crx2Factory
parameter_list|)
block|{
name|this
operator|.
name|jcr2Factory
operator|=
name|crx2Factory
expr_stmt|;
name|this
operator|.
name|nodeStoreFactory
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|StoreFactory
parameter_list|(
name|NodeStoreFactory
name|nodeStoreFactory
parameter_list|)
block|{
name|this
operator|.
name|jcr2Factory
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|nodeStoreFactory
operator|=
name|nodeStoreFactory
expr_stmt|;
block|}
specifier|public
name|RepositoryContext
name|create
parameter_list|(
name|Closer
name|closer
parameter_list|)
throws|throws
name|IOException
throws|,
name|RepositoryException
block|{
if|if
condition|(
name|jcr2Factory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
return|return
name|jcr2Factory
operator|.
name|create
argument_list|(
name|closer
argument_list|)
return|;
block|}
specifier|public
name|NodeStore
name|create
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|,
name|Closer
name|closer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|nodeStoreFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
return|return
name|nodeStoreFactory
operator|.
name|create
argument_list|(
name|blobStore
argument_list|,
name|closer
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isJcr2
parameter_list|()
block|{
return|return
name|jcr2Factory
operator|!=
literal|null
return|;
block|}
specifier|public
name|boolean
name|hasExternalBlobReferences
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isJcr2
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|nodeStoreFactory
operator|.
name|hasExternalBlobReferences
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

