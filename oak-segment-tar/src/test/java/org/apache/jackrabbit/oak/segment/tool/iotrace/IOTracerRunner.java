begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
operator|.
name|iotrace
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|parseBoolean
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Integer
operator|.
name|getInteger
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|System
operator|.
name|getProperty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
operator|.
name|iotrace
operator|.
name|IOTracer
operator|.
name|newIOTracer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|InvalidFileStoreVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|monitor
operator|.
name|IOMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|monitor
operator|.
name|IOMonitorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This test case can be used to collect {@link IOTracer io traces}. It is disabled  * by default and needs to be enabled via {@code -Dtest=IOTraceRunner}.  *<br>  * The test accepts the following properties:<br>  * {@code -Dinput=/path/to/segmentstore}. Required.<br>  * {@code -Doutput=/path/to/trace.cvs}. Default: {@code iotrace.csv}<br>  * {@code -Dmmap=true|false}. Default {@code true}<br>  * {@code -Dsegment-cache=n}. Default {@code 256}<br>  * {@code -Ddepth=n}. Default {@code 5}<br>  * {@code -Dpath=/path/to/start/node}. Default {@code /root}  *<p>  * FIXME OAK-5655: Turn this into a development tool and move to the right place.  */
end_comment

begin_class
specifier|public
class|class
name|IOTracerRunner
extends|extends
name|IOMonitorAdapter
block|{
specifier|private
specifier|static
specifier|final
name|boolean
name|ENABLED
init|=
name|IOTracerRunner
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|.
name|equals
argument_list|(
name|getProperty
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OUTPUT
init|=
name|getProperty
argument_list|(
literal|"output"
argument_list|,
literal|"iotrace.csv"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INPUT
init|=
name|getProperty
argument_list|(
literal|"segmentstore"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|MMAP
init|=
name|parseBoolean
argument_list|(
name|getProperty
argument_list|(
literal|"mmap"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SEGMENT_CACHE
init|=
name|getInteger
argument_list|(
literal|"segment-cache"
argument_list|,
literal|256
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEPTH
init|=
name|getInteger
argument_list|(
literal|"depth"
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PATH
init|=
name|getProperty
argument_list|(
literal|"path"
argument_list|,
literal|"/root"
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
name|format
argument_list|(
literal|"Test disabled. Specify -Dtest=%s to enable it"
argument_list|,
name|IOTracerRunner
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|,
name|ENABLED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|collectTrace
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidFileStoreVersionException
block|{
name|checkArgument
argument_list|(
name|INPUT
operator|!=
literal|null
argument_list|,
literal|"No segment store directory specified"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|format
argument_list|(
literal|"Breadth first traversing %d levels of %s starting at %s"
argument_list|,
name|DEPTH
argument_list|,
name|INPUT
argument_list|,
name|PATH
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|format
argument_list|(
literal|"mmap=%b, segment cache=%d"
argument_list|,
name|MMAP
argument_list|,
name|SEGMENT_CACHE
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|format
argument_list|(
literal|"Writing trace to %s"
argument_list|,
name|OUTPUT
argument_list|)
argument_list|)
expr_stmt|;
name|collectTrace
argument_list|(
name|INPUT
argument_list|,
name|MMAP
argument_list|,
name|SEGMENT_CACHE
argument_list|,
name|PATH
argument_list|,
name|DEPTH
argument_list|,
name|OUTPUT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|collectTrace
parameter_list|(
annotation|@
name|Nonnull
name|String
name|segmentStore
parameter_list|,
name|boolean
name|mmap
parameter_list|,
name|int
name|segmentCacheSize
parameter_list|,
annotation|@
name|Nonnull
name|String
name|path
parameter_list|,
name|int
name|depth
parameter_list|,
annotation|@
name|Nonnull
name|String
name|output
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidFileStoreVersionException
block|{
name|checkNotNull
argument_list|(
name|segmentStore
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|output
argument_list|)
expr_stmt|;
try|try
init|(
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|output
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|Function
argument_list|<
name|IOMonitor
argument_list|,
name|FileStore
argument_list|>
name|factory
init|=
name|ioMonitor
lambda|->
name|newFileStore
argument_list|(
name|fileStoreBuilder
argument_list|(
operator|new
name|File
argument_list|(
name|segmentStore
argument_list|)
argument_list|)
operator|.
name|withMemoryMapping
argument_list|(
name|mmap
argument_list|)
operator|.
name|withSegmentCacheSize
argument_list|(
name|segmentCacheSize
argument_list|)
operator|.
name|withIOMonitor
argument_list|(
name|ioMonitor
argument_list|)
argument_list|)
decl_stmt|;
name|IOTracer
name|ioTracer
init|=
name|newIOTracer
argument_list|(
name|factory
argument_list|,
name|out
argument_list|,
name|BreadthFirstTrace
operator|.
name|CONTEXT_SPEC
argument_list|)
decl_stmt|;
name|ioTracer
operator|.
name|collectTrace
argument_list|(
operator|new
name|BreadthFirstTrace
argument_list|(
name|depth
argument_list|,
name|path
argument_list|,
name|ioTracer
operator|::
name|setContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Nonnull
specifier|private
specifier|static
name|FileStore
name|newFileStore
parameter_list|(
name|FileStoreBuilder
name|fileStoreBuilder
parameter_list|)
block|{
try|try
block|{
return|return
name|fileStoreBuilder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InvalidFileStoreVersionException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

