begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|ImpersonationCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|PasswordUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|ISO8601
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Default implementation of the {@code TokenProvider} interface with the  * following characteristics.  *  *<h3>doCreateToken</h3>  * The {@link #doCreateToken(javax.jcr.Credentials)} returns {@code true} if  * {@code SimpleCredentials} can be extracted from the specified credentials  * object and that simple credentials object has a {@link #TOKEN_ATTRIBUTE}  * attribute with an empty value.  *  *<h3>createToken</h3>  * This implementation of {@link #createToken(javax.jcr.Credentials)} will  * create a separate token node underneath the user home node. That token  * node contains the hashed token, the expiration time and additional  * mandatory attributes that will be verified during login.  */
end_comment

begin_class
specifier|public
class|class
name|TokenProviderImpl
implements|implements
name|TokenProvider
block|{
comment|/**      * logger instance      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TokenProviderImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Constant for the token attribute passed with simple credentials to      * trigger the generation of a new token.      */
specifier|private
specifier|static
specifier|final
name|String
name|TOKEN_ATTRIBUTE
init|=
literal|".token"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TOKEN_ATTRIBUTE_EXPIRY
init|=
name|TOKEN_ATTRIBUTE
operator|+
literal|".exp"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TOKEN_ATTRIBUTE_KEY
init|=
name|TOKEN_ATTRIBUTE
operator|+
literal|".key"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TOKENS_NODE_NAME
init|=
literal|".tokens"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TOKENS_NT_NAME
init|=
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|STATUS_VALID
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|STATUS_EXPIRED
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|STATUS_MISMATCH
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
name|DELIM
init|=
literal|'_'
decl_stmt|;
specifier|private
specifier|final
name|ContentSession
name|contentSession
decl_stmt|;
specifier|private
specifier|final
name|Root
name|root
decl_stmt|;
specifier|private
specifier|final
name|UserProvider
name|userProvider
decl_stmt|;
specifier|private
specifier|final
name|long
name|tokenExpiration
decl_stmt|;
specifier|public
name|TokenProviderImpl
parameter_list|(
name|ContentSession
name|contentSession
parameter_list|,
name|long
name|tokenExpiration
parameter_list|,
name|UserContext
name|userContext
parameter_list|)
block|{
name|this
operator|.
name|contentSession
operator|=
name|contentSession
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|contentSession
operator|.
name|getLatestRoot
argument_list|()
expr_stmt|;
name|this
operator|.
name|tokenExpiration
operator|=
name|tokenExpiration
expr_stmt|;
name|this
operator|.
name|userProvider
operator|=
name|userContext
operator|.
name|getUserProvider
argument_list|(
name|contentSession
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------< TokenProvider>---
annotation|@
name|Override
specifier|public
name|boolean
name|doCreateToken
parameter_list|(
name|Credentials
name|credentials
parameter_list|)
block|{
name|SimpleCredentials
name|sc
init|=
name|extractSimpleCredentials
argument_list|(
name|credentials
argument_list|)
decl_stmt|;
if|if
condition|(
name|sc
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|Object
name|attr
init|=
name|sc
operator|.
name|getAttribute
argument_list|(
name|TOKEN_ATTRIBUTE
argument_list|)
decl_stmt|;
return|return
operator|(
name|attr
operator|!=
literal|null
operator|&&
literal|""
operator|.
name|equals
argument_list|(
name|attr
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TokenInfo
name|createToken
parameter_list|(
name|Credentials
name|credentials
parameter_list|)
block|{
name|SimpleCredentials
name|sc
init|=
name|extractSimpleCredentials
argument_list|(
name|credentials
argument_list|)
decl_stmt|;
if|if
condition|(
name|sc
operator|!=
literal|null
condition|)
block|{
name|String
name|userId
init|=
name|sc
operator|.
name|getUserID
argument_list|()
decl_stmt|;
name|CoreValueFactory
name|valueFactory
init|=
name|contentSession
operator|.
name|getCoreValueFactory
argument_list|()
decl_stmt|;
try|try
block|{
name|Tree
name|userTree
init|=
name|userProvider
operator|.
name|getAuthorizable
argument_list|(
name|userId
argument_list|,
name|Type
operator|.
name|USER
argument_list|)
decl_stmt|;
if|if
condition|(
name|userTree
operator|!=
literal|null
condition|)
block|{
name|NodeUtil
name|userNode
init|=
operator|new
name|NodeUtil
argument_list|(
name|userTree
argument_list|,
name|valueFactory
argument_list|)
decl_stmt|;
name|NodeUtil
name|tokenParent
init|=
name|userNode
operator|.
name|getChild
argument_list|(
name|TOKENS_NODE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenParent
operator|==
literal|null
condition|)
block|{
name|tokenParent
operator|=
name|userNode
operator|.
name|addChild
argument_list|(
name|TOKENS_NODE_NAME
argument_list|,
name|TOKENS_NT_NAME
argument_list|)
expr_stmt|;
block|}
name|long
name|creationTime
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|Calendar
name|creation
init|=
name|GregorianCalendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|creation
operator|.
name|setTimeInMillis
argument_list|(
name|creationTime
argument_list|)
expr_stmt|;
name|String
name|tokenName
init|=
name|Text
operator|.
name|replace
argument_list|(
name|ISO8601
operator|.
name|format
argument_list|(
name|creation
argument_list|)
argument_list|,
literal|":"
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
name|NodeUtil
name|tokenNode
init|=
name|tokenParent
operator|.
name|addChild
argument_list|(
name|tokenName
argument_list|,
name|TOKENS_NT_NAME
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|generateKey
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|String
name|token
init|=
operator|new
name|StringBuilder
argument_list|(
name|tokenNode
operator|.
name|getTree
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|DELIM
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|tokenHash
init|=
name|PasswordUtility
operator|.
name|buildPasswordHash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|tokenNode
operator|.
name|setString
argument_list|(
name|TOKEN_ATTRIBUTE_KEY
argument_list|,
name|tokenHash
argument_list|)
expr_stmt|;
specifier|final
name|long
name|expirationTime
init|=
name|creationTime
operator|+
name|tokenExpiration
decl_stmt|;
name|tokenNode
operator|.
name|setDate
argument_list|(
name|TOKEN_ATTRIBUTE_EXPIRY
argument_list|,
name|expirationTime
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|sc
operator|.
name|getAttributeNames
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|TOKEN_ATTRIBUTE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
name|attr
init|=
name|sc
operator|.
name|getAttribute
argument_list|(
name|name
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|tokenNode
operator|.
name|setString
argument_list|(
name|name
argument_list|,
name|attr
argument_list|)
expr_stmt|;
block|}
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// also set the new token to the simple credentials.
name|sc
operator|.
name|setAttribute
argument_list|(
name|TOKEN_ATTRIBUTE
argument_list|,
name|token
argument_list|)
expr_stmt|;
return|return
operator|new
name|TokenInfoImpl
argument_list|(
name|tokenNode
argument_list|,
name|token
argument_list|,
name|userId
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Cannot create login token: No corresponding node for User "
operator|+
name|userId
operator|+
literal|'.'
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Failed to create login token "
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Failed to create login token "
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Failed to create login token "
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenInfo
name|getTokenInfo
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|int
name|pos
init|=
name|token
operator|.
name|indexOf
argument_list|(
name|DELIM
argument_list|)
decl_stmt|;
name|String
name|tokenPath
init|=
operator|(
name|pos
operator|==
operator|-
literal|1
operator|)
condition|?
name|token
else|:
name|token
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|Tree
name|tokenTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|tokenPath
argument_list|)
decl_stmt|;
name|String
name|userId
init|=
name|getUserId
argument_list|(
name|tokenTree
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenTree
operator|==
literal|null
operator|||
name|userId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|TokenInfoImpl
argument_list|(
operator|new
name|NodeUtil
argument_list|(
name|tokenTree
argument_list|,
name|contentSession
argument_list|)
argument_list|,
name|token
argument_list|,
name|userId
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeToken
parameter_list|(
name|TokenInfo
name|tokenInfo
parameter_list|)
block|{
name|Tree
name|tokenTree
init|=
name|getTokenTree
argument_list|(
name|tokenInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenTree
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|tokenTree
operator|.
name|remove
argument_list|()
condition|)
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Error while removing expired token"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|resetTokenExpiration
parameter_list|(
name|TokenInfo
name|tokenInfo
parameter_list|,
name|long
name|loginTime
parameter_list|)
block|{
name|Tree
name|tokenTree
init|=
name|getTokenTree
argument_list|(
name|tokenInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenTree
operator|!=
literal|null
condition|)
block|{
name|NodeUtil
name|tokenNode
init|=
operator|new
name|NodeUtil
argument_list|(
name|tokenTree
argument_list|,
name|contentSession
argument_list|)
decl_stmt|;
name|long
name|expTime
init|=
name|tokenNode
operator|.
name|getLong
argument_list|(
name|TOKEN_ATTRIBUTE_EXPIRY
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|expTime
operator|-
name|loginTime
operator|<=
name|tokenExpiration
operator|/
literal|2
condition|)
block|{
name|long
name|expirationTime
init|=
name|loginTime
operator|+
name|tokenExpiration
decl_stmt|;
try|try
block|{
name|tokenNode
operator|.
name|setDate
argument_list|(
name|TOKEN_ATTRIBUTE_EXPIRY
argument_list|,
name|expirationTime
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error while resetting token expiration"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|//--------------------------------------------------------------------------
annotation|@
name|CheckForNull
specifier|private
specifier|static
name|SimpleCredentials
name|extractSimpleCredentials
parameter_list|(
name|Credentials
name|credentials
parameter_list|)
block|{
if|if
condition|(
name|credentials
operator|instanceof
name|SimpleCredentials
condition|)
block|{
return|return
operator|(
name|SimpleCredentials
operator|)
name|credentials
return|;
block|}
if|if
condition|(
name|credentials
operator|instanceof
name|ImpersonationCredentials
condition|)
block|{
name|Credentials
name|base
init|=
operator|(
operator|(
name|ImpersonationCredentials
operator|)
name|credentials
operator|)
operator|.
name|getBaseCredentials
argument_list|()
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|SimpleCredentials
condition|)
block|{
return|return
operator|(
name|SimpleCredentials
operator|)
name|base
return|;
block|}
block|}
comment|// cannot extract SimpleCredentials
return|return
literal|null
return|;
block|}
annotation|@
name|Nonnull
specifier|private
specifier|static
name|String
name|generateKey
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|SecureRandom
name|random
init|=
operator|new
name|SecureRandom
argument_list|()
decl_stmt|;
name|byte
name|key
index|[]
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|StringBuilder
name|res
init|=
operator|new
name|StringBuilder
argument_list|(
name|key
operator|.
name|length
operator|*
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
name|b
range|:
name|key
control|)
block|{
name|res
operator|.
name|append
argument_list|(
name|Text
operator|.
name|hexTable
index|[
operator|(
name|b
operator|>>
literal|4
operator|)
operator|&
literal|15
index|]
argument_list|)
expr_stmt|;
name|res
operator|.
name|append
argument_list|(
name|Text
operator|.
name|hexTable
index|[
name|b
operator|&
literal|15
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|CheckForNull
specifier|private
name|Tree
name|getTokenTree
parameter_list|(
name|TokenInfo
name|tokenInfo
parameter_list|)
block|{
if|if
condition|(
name|tokenInfo
operator|instanceof
name|TokenInfoImpl
condition|)
block|{
return|return
name|root
operator|.
name|getTree
argument_list|(
operator|(
operator|(
name|TokenInfoImpl
operator|)
name|tokenInfo
operator|)
operator|.
name|tokenPath
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|CheckForNull
specifier|private
name|String
name|getUserId
parameter_list|(
name|Tree
name|tokenTree
parameter_list|)
block|{
if|if
condition|(
name|tokenTree
operator|!=
literal|null
condition|)
block|{
name|Tree
name|userTree
init|=
name|tokenTree
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
return|return
name|userProvider
operator|.
name|getAuthorizableId
argument_list|(
name|userTree
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|//--------------------------------------------------------------------------
specifier|private
specifier|static
class|class
name|TokenInfoImpl
implements|implements
name|TokenInfo
block|{
specifier|private
specifier|final
name|String
name|token
decl_stmt|;
specifier|private
specifier|final
name|String
name|tokenPath
decl_stmt|;
specifier|private
specifier|final
name|String
name|userId
decl_stmt|;
specifier|private
specifier|final
name|long
name|expirationTime
decl_stmt|;
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mandatoryAttributes
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|publicAttributes
decl_stmt|;
specifier|private
name|TokenInfoImpl
parameter_list|(
name|NodeUtil
name|tokenNode
parameter_list|,
name|String
name|token
parameter_list|,
name|String
name|userId
parameter_list|)
block|{
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
name|this
operator|.
name|tokenPath
operator|=
name|tokenNode
operator|.
name|getTree
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|this
operator|.
name|userId
operator|=
name|userId
expr_stmt|;
name|expirationTime
operator|=
name|tokenNode
operator|.
name|getLong
argument_list|(
name|TOKEN_ATTRIBUTE_EXPIRY
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|key
operator|=
name|tokenNode
operator|.
name|getString
argument_list|(
name|TOKEN_ATTRIBUTE_KEY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mandatoryAttributes
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|publicAttributes
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|PropertyState
name|propertyState
range|:
name|tokenNode
operator|.
name|getTree
argument_list|()
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|propertyState
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|propertyState
operator|.
name|getValue
argument_list|()
operator|.
name|getString
argument_list|()
decl_stmt|;
if|if
condition|(
name|isMandatoryAttribute
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|mandatoryAttributes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isInfoAttribute
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// info attribute
name|publicAttributes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|// else: jcr specific property
block|}
block|}
comment|//------------------------------------------------------< TokenInfo>---
annotation|@
name|Override
specifier|public
name|String
name|getUserId
parameter_list|()
block|{
return|return
name|userId
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getToken
parameter_list|()
block|{
return|return
name|token
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isExpired
parameter_list|(
name|long
name|loginTime
parameter_list|)
block|{
return|return
name|expirationTime
operator|<
name|loginTime
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|TokenCredentials
name|tokenCredentials
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
literal|null
operator|||
operator|!
name|PasswordUtility
operator|.
name|isSame
argument_list|(
name|key
argument_list|,
name|tokenCredentials
operator|.
name|getToken
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|String
name|name
range|:
name|mandatoryAttributes
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|expectedValue
init|=
name|mandatoryAttributes
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|expectedValue
operator|.
name|equals
argument_list|(
name|tokenCredentials
operator|.
name|getAttribute
argument_list|(
name|name
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// update set of informative attributes on the credentials
comment|// based on the properties present on the token node.
name|Collection
argument_list|<
name|String
argument_list|>
name|attrNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|tokenCredentials
operator|.
name|getAttributeNames
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|publicAttributes
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|attrNames
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|tokenCredentials
operator|.
name|setAttribute
argument_list|(
name|name
argument_list|,
name|publicAttributes
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPrivateAttributes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|mandatoryAttributes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPublicAttributes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|publicAttributes
argument_list|)
return|;
block|}
comment|/**          * Returns {@code true} if the specified {@code attributeName}          * starts with or equals {@link #TOKEN_ATTRIBUTE}.          *          * @param attributeName          * @return {@code true} if the specified {@code attributeName}          * starts with or equals {@link #TOKEN_ATTRIBUTE}.          */
specifier|private
specifier|static
name|boolean
name|isMandatoryAttribute
parameter_list|(
name|String
name|attributeName
parameter_list|)
block|{
return|return
name|attributeName
operator|!=
literal|null
operator|&&
name|attributeName
operator|.
name|startsWith
argument_list|(
name|TOKEN_ATTRIBUTE
argument_list|)
return|;
block|}
comment|/**          * Returns {@code false} if the specified attribute name doesn't have          * a 'jcr' or 'rep' namespace prefix; {@code true} otherwise. This is          * a lazy evaluation in order to avoid testing the defining node type of          * the associated jcr property.          *          * @param propertyName          * @return {@code true} if the specified property name doesn't seem          * to represent repository internal information.          */
specifier|private
specifier|static
name|boolean
name|isInfoAttribute
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
name|String
name|prefix
init|=
name|Text
operator|.
name|getNamespacePrefix
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
return|return
operator|!
literal|"jcr"
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
operator|&&
operator|!
literal|"rep"
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

