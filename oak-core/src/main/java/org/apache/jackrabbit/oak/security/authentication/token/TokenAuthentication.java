begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|Authentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of the {@code Authentication} interface that deals with  * token based login. {@link #authenticate(javax.jcr.Credentials) Authentication}  * will be successful if the specified credentials are valid {@link TokenCredentials}  * according to the characteristics and constraints enforced by {@link org.apache.jackrabbit.oak.spi.security.authentication.token.TokenProvider}  * and the information obtained using {@link org.apache.jackrabbit.oak.spi.security.authentication.token.TokenProvider#getTokenInfo(String)}  * respectively.  */
end_comment

begin_class
class|class
name|TokenAuthentication
implements|implements
name|Authentication
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TokenAuthentication
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|TokenProvider
name|tokenProvider
decl_stmt|;
specifier|private
name|TokenInfo
name|tokenInfo
decl_stmt|;
name|TokenAuthentication
parameter_list|(
annotation|@
name|NotNull
name|TokenProvider
name|tokenProvider
parameter_list|)
block|{
name|this
operator|.
name|tokenProvider
operator|=
name|tokenProvider
expr_stmt|;
block|}
comment|//-----------------------------------------------------< Authentication>---
annotation|@
name|Override
specifier|public
name|boolean
name|authenticate
parameter_list|(
annotation|@
name|Nullable
name|Credentials
name|credentials
parameter_list|)
throws|throws
name|LoginException
block|{
if|if
condition|(
name|credentials
operator|instanceof
name|TokenCredentials
condition|)
block|{
name|TokenCredentials
name|tc
init|=
operator|(
name|TokenCredentials
operator|)
name|credentials
decl_stmt|;
if|if
condition|(
operator|!
name|validateCredentials
argument_list|(
name|tc
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"Invalid token credentials."
argument_list|)
throw|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
comment|// other credentials implementation -> not handled here.
return|return
literal|false
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|getUserId
parameter_list|()
block|{
if|if
condition|(
name|tokenInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"UserId can only be retrieved after successful authentication."
argument_list|)
throw|;
block|}
return|return
name|tokenInfo
operator|.
name|getUserId
argument_list|()
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
if|if
condition|(
name|tokenInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Token info can only be retrieved after successful authentication."
argument_list|)
throw|;
block|}
if|if
condition|(
name|tokenInfo
operator|instanceof
name|TokenProviderImpl
operator|.
name|TokenInfoImpl
condition|)
block|{
return|return
operator|(
operator|(
name|TokenProviderImpl
operator|.
name|TokenInfoImpl
operator|)
name|tokenInfo
operator|)
operator|.
name|getPrincipal
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|//-----------------------------------------------------------< internal>---
annotation|@
name|NotNull
name|TokenInfo
name|getTokenInfo
parameter_list|()
block|{
if|if
condition|(
name|tokenInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Token info can only be retrieved after successful authentication."
argument_list|)
throw|;
block|}
return|return
name|tokenInfo
return|;
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
name|boolean
name|validateCredentials
parameter_list|(
annotation|@
name|NotNull
name|TokenCredentials
name|tokenCredentials
parameter_list|)
block|{
comment|// credentials without userID -> check if attributes provide
comment|// sufficient information for successful authentication.
name|String
name|token
init|=
name|tokenCredentials
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|tokenInfo
operator|=
name|tokenProvider
operator|.
name|getTokenInfo
argument_list|(
name|token
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenInfo
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No valid TokenInfo for token."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|long
name|loginTime
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenInfo
operator|.
name|isExpired
argument_list|(
name|loginTime
argument_list|)
condition|)
block|{
comment|// token is expired
name|log
operator|.
name|debug
argument_list|(
literal|"Token is expired"
argument_list|)
expr_stmt|;
name|tokenInfo
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|tokenInfo
operator|.
name|matches
argument_list|(
name|tokenCredentials
argument_list|)
condition|)
block|{
if|if
condition|(
name|tokenCredentials
operator|.
name|getAttribute
argument_list|(
name|TokenConstants
operator|.
name|TOKEN_SKIP_REFRESH
argument_list|)
operator|==
literal|null
condition|)
block|{
name|boolean
name|reset
init|=
name|tokenInfo
operator|.
name|resetExpiration
argument_list|(
name|loginTime
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Token reset={}"
argument_list|,
name|reset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Token reset skipped."
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

