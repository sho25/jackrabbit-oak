begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|com
operator|.
name|mongodb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|fakemongo
operator|.
name|Fongo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|FindIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|MongoCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|model
operator|.
name|BulkWriteOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|model
operator|.
name|DeleteOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|model
operator|.
name|FindOneAndUpdateOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|model
operator|.
name|InsertManyOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|model
operator|.
name|ReturnDocument
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|model
operator|.
name|UpdateOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|model
operator|.
name|WriteModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|result
operator|.
name|DeleteResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|result
operator|.
name|UpdateResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|connection
operator|.
name|ServerVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|MongoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bson
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bson
operator|.
name|codecs
operator|.
name|configuration
operator|.
name|CodecRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bson
operator|.
name|conversions
operator|.
name|Bson
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|bson
operator|.
name|codecs
operator|.
name|configuration
operator|.
name|CodecRegistries
operator|.
name|fromRegistries
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|OakFongo
extends|extends
name|Fongo
block|{
specifier|private
specifier|static
specifier|final
name|CodecRegistry
name|CODEC_REGISTRY
init|=
name|fromRegistries
argument_list|(
name|MongoClient
operator|.
name|getDefaultCodecRegistry
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FongoDB
argument_list|>
name|dbMap
decl_stmt|;
specifier|private
specifier|final
name|MongoClient
name|client
decl_stmt|;
specifier|public
name|OakFongo
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|dbMap
operator|=
name|getDBMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|createClientProxy
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|MongoClient
name|getMongo
parameter_list|()
block|{
return|return
name|client
return|;
block|}
annotation|@
name|Override
specifier|public
name|FongoDB
name|getDB
parameter_list|(
name|String
name|dbname
parameter_list|)
block|{
synchronized|synchronized
init|(
name|dbMap
init|)
block|{
name|FongoDB
name|fongoDb
init|=
name|dbMap
operator|.
name|get
argument_list|(
name|dbname
argument_list|)
decl_stmt|;
if|if
condition|(
name|fongoDb
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|fongoDb
operator|=
operator|new
name|OakFongoDB
argument_list|(
name|this
argument_list|,
name|dbname
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MongoException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|dbMap
operator|.
name|put
argument_list|(
name|dbname
argument_list|,
name|fongoDb
argument_list|)
expr_stmt|;
block|}
return|return
name|fongoDb
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|FongoMongoDatabase
name|getDatabase
parameter_list|(
name|String
name|databaseName
parameter_list|)
block|{
return|return
operator|new
name|OakFongoMongoDatabase
argument_list|(
name|databaseName
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|FongoDB
argument_list|>
name|getDBMap
parameter_list|()
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|Fongo
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"dbMap"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|FongoDB
argument_list|>
operator|)
name|f
operator|.
name|get
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|private
name|MongoClient
name|createClientProxy
parameter_list|()
block|{
name|MongoClient
name|c
init|=
name|spy
argument_list|(
name|super
operator|.
name|getMongo
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|dbName
range|:
operator|new
name|String
index|[]
block|{
name|MongoUtils
operator|.
name|DB
block|,
literal|"oak"
block|}
control|)
block|{
name|when
argument_list|(
name|c
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|OakFongoMongoDatabase
argument_list|(
name|dbName
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
specifier|protected
name|void
name|beforeInsert
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|DBObject
argument_list|>
name|documents
parameter_list|,
name|InsertOptions
name|insertOptions
parameter_list|)
block|{}
specifier|protected
name|void
name|afterInsert
parameter_list|(
name|WriteResult
name|result
parameter_list|)
block|{}
specifier|protected
name|void
name|beforeFindAndModify
parameter_list|(
name|DBObject
name|query
parameter_list|,
name|DBObject
name|fields
parameter_list|,
name|DBObject
name|sort
parameter_list|,
name|boolean
name|remove
parameter_list|,
name|DBObject
name|update
parameter_list|,
name|boolean
name|returnNew
parameter_list|,
name|boolean
name|upsert
parameter_list|)
block|{}
specifier|protected
name|void
name|afterFindAndModify
parameter_list|(
name|DBObject
name|result
parameter_list|)
block|{}
specifier|protected
name|void
name|beforeUpdate
parameter_list|(
name|DBObject
name|q
parameter_list|,
name|DBObject
name|o
parameter_list|,
name|boolean
name|upsert
parameter_list|,
name|boolean
name|multi
parameter_list|,
name|WriteConcern
name|concern
parameter_list|,
name|DBEncoder
name|encoder
parameter_list|)
block|{}
specifier|protected
name|void
name|afterUpdate
parameter_list|(
name|WriteResult
name|result
parameter_list|)
block|{}
specifier|protected
name|void
name|beforeRemove
parameter_list|(
name|DBObject
name|query
parameter_list|,
name|WriteConcern
name|writeConcern
parameter_list|)
block|{}
specifier|protected
name|void
name|afterRemove
parameter_list|(
name|WriteResult
name|result
parameter_list|)
block|{}
specifier|protected
name|void
name|beforeExecuteBulkWriteOperation
parameter_list|(
name|boolean
name|ordered
parameter_list|,
name|Boolean
name|bypassDocumentValidation
parameter_list|,
name|List
argument_list|<
name|?
argument_list|>
name|writeRequests
parameter_list|,
name|WriteConcern
name|aWriteConcern
parameter_list|)
block|{}
specifier|protected
name|void
name|beforeFind
parameter_list|(
name|DBObject
name|query
parameter_list|,
name|DBObject
name|projection
parameter_list|)
block|{}
specifier|protected
name|void
name|afterFind
parameter_list|(
name|DBCursor
name|cursor
parameter_list|)
block|{}
specifier|protected
name|void
name|afterExecuteBulkWriteOperation
parameter_list|(
name|BulkWriteResult
name|result
parameter_list|)
block|{}
specifier|private
class|class
name|OakFongoDB
extends|extends
name|FongoDB
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FongoDBCollection
argument_list|>
name|collMap
decl_stmt|;
specifier|public
name|OakFongoDB
parameter_list|(
name|Fongo
name|fongo
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|fongo
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|collMap
operator|=
name|getCollMap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|FongoDBCollection
argument_list|>
name|getCollMap
parameter_list|()
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|FongoDB
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"collMap"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|FongoDBCollection
argument_list|>
operator|)
name|f
operator|.
name|get
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CommandResult
name|command
parameter_list|(
name|DBObject
name|cmd
parameter_list|,
name|ReadPreference
name|readPreference
parameter_list|,
name|DBEncoder
name|encoder
parameter_list|)
block|{
if|if
condition|(
name|cmd
operator|.
name|containsField
argument_list|(
literal|"serverStatus"
argument_list|)
condition|)
block|{
name|CommandResult
name|commandResult
init|=
name|okResult
argument_list|()
decl_stmt|;
name|commandResult
operator|.
name|append
argument_list|(
literal|"version"
argument_list|,
name|asString
argument_list|(
name|getServerVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|commandResult
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|command
argument_list|(
name|cmd
argument_list|,
name|readPreference
argument_list|,
name|encoder
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|FongoDBCollection
name|doGetCollection
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|idIsNotUniq
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"system."
argument_list|)
condition|)
block|{
return|return
name|super
operator|.
name|doGetCollection
argument_list|(
name|name
argument_list|,
name|idIsNotUniq
argument_list|)
return|;
block|}
name|FongoDBCollection
name|coll
init|=
name|collMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|coll
operator|==
literal|null
condition|)
block|{
name|coll
operator|=
operator|new
name|OakFongoDBCollection
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|idIsNotUniq
argument_list|)
expr_stmt|;
name|collMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|coll
argument_list|)
expr_stmt|;
block|}
return|return
name|coll
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|asString
parameter_list|(
name|ServerVersion
name|serverVersion
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|serverVersion
operator|.
name|getVersionList
argument_list|()
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
class|class
name|OakFongoDBCollection
extends|extends
name|FongoDBCollection
block|{
specifier|public
name|OakFongoDBCollection
parameter_list|(
name|FongoDB
name|db
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|idIsNotUniq
parameter_list|)
block|{
name|super
argument_list|(
name|db
argument_list|,
name|name
argument_list|,
name|idIsNotUniq
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|WriteResult
name|insert
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|DBObject
argument_list|>
name|documents
parameter_list|,
name|InsertOptions
name|insertOptions
parameter_list|)
block|{
name|beforeInsert
argument_list|(
name|documents
argument_list|,
name|insertOptions
argument_list|)
expr_stmt|;
name|WriteResult
name|result
init|=
name|super
operator|.
name|insert
argument_list|(
name|documents
argument_list|,
name|insertOptions
argument_list|)
decl_stmt|;
name|afterInsert
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|WriteResult
name|remove
parameter_list|(
name|DBObject
name|query
parameter_list|,
name|WriteConcern
name|writeConcern
parameter_list|)
block|{
name|beforeRemove
argument_list|(
name|query
argument_list|,
name|writeConcern
argument_list|)
expr_stmt|;
name|WriteResult
name|result
init|=
name|super
operator|.
name|remove
argument_list|(
name|query
argument_list|,
name|writeConcern
argument_list|)
decl_stmt|;
name|afterRemove
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|WriteResult
name|update
parameter_list|(
name|DBObject
name|q
parameter_list|,
name|DBObject
name|o
parameter_list|,
name|boolean
name|upsert
parameter_list|,
name|boolean
name|multi
parameter_list|,
name|WriteConcern
name|concern
parameter_list|,
name|DBEncoder
name|encoder
parameter_list|)
block|{
name|beforeUpdate
argument_list|(
name|q
argument_list|,
name|o
argument_list|,
name|upsert
argument_list|,
name|multi
argument_list|,
name|concern
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
name|WriteResult
name|result
init|=
name|super
operator|.
name|update
argument_list|(
name|q
argument_list|,
name|o
argument_list|,
name|upsert
argument_list|,
name|multi
argument_list|,
name|concern
argument_list|,
name|encoder
argument_list|)
decl_stmt|;
name|afterUpdate
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|DBObject
name|findAndModify
parameter_list|(
name|DBObject
name|query
parameter_list|,
name|DBObject
name|fields
parameter_list|,
name|DBObject
name|sort
parameter_list|,
name|boolean
name|remove
parameter_list|,
name|DBObject
name|update
parameter_list|,
name|boolean
name|returnNew
parameter_list|,
name|boolean
name|upsert
parameter_list|)
block|{
name|beforeFindAndModify
argument_list|(
name|query
argument_list|,
name|fields
argument_list|,
name|sort
argument_list|,
name|remove
argument_list|,
name|update
argument_list|,
name|returnNew
argument_list|,
name|upsert
argument_list|)
expr_stmt|;
name|DBObject
name|result
init|=
name|super
operator|.
name|findAndModify
argument_list|(
name|query
argument_list|,
name|fields
argument_list|,
name|sort
argument_list|,
name|remove
argument_list|,
name|update
argument_list|,
name|returnNew
argument_list|,
name|upsert
argument_list|)
decl_stmt|;
name|afterFindAndModify
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|BulkWriteResult
name|executeBulkWriteOperation
parameter_list|(
name|boolean
name|ordered
parameter_list|,
name|Boolean
name|bypassDocumentValidation
parameter_list|,
name|List
argument_list|<
name|WriteRequest
argument_list|>
name|writeRequests
parameter_list|,
name|WriteConcern
name|aWriteConcern
parameter_list|)
block|{
name|beforeExecuteBulkWriteOperation
argument_list|(
name|ordered
argument_list|,
name|bypassDocumentValidation
argument_list|,
name|writeRequests
argument_list|,
name|aWriteConcern
argument_list|)
expr_stmt|;
name|BulkWriteResult
name|result
init|=
name|super
operator|.
name|executeBulkWriteOperation
argument_list|(
name|ordered
argument_list|,
name|bypassDocumentValidation
argument_list|,
name|writeRequests
argument_list|,
name|aWriteConcern
argument_list|)
decl_stmt|;
name|afterExecuteBulkWriteOperation
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|DBCursor
name|find
parameter_list|(
name|DBObject
name|query
parameter_list|,
name|DBObject
name|projection
parameter_list|)
block|{
name|beforeFind
argument_list|(
name|query
argument_list|,
name|projection
argument_list|)
expr_stmt|;
name|DBCursor
name|result
init|=
name|super
operator|.
name|find
argument_list|(
name|query
argument_list|,
name|projection
argument_list|)
decl_stmt|;
name|afterFind
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
specifier|private
class|class
name|OakFongoMongoDatabase
extends|extends
name|FongoMongoDatabase
block|{
specifier|private
specifier|final
name|Fongo
name|fongo
decl_stmt|;
specifier|public
name|OakFongoMongoDatabase
parameter_list|(
name|String
name|databaseName
parameter_list|,
name|Fongo
name|fongo
parameter_list|)
block|{
name|super
argument_list|(
name|databaseName
argument_list|,
name|fongo
argument_list|)
expr_stmt|;
name|this
operator|.
name|fongo
operator|=
name|fongo
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|MongoCollection
argument_list|<
name|Document
argument_list|>
name|getCollection
parameter_list|(
name|String
name|collectionName
parameter_list|)
block|{
return|return
operator|new
name|OakFongoMongoCollection
argument_list|(
name|this
operator|.
name|fongo
argument_list|,
operator|new
name|MongoNamespace
argument_list|(
name|super
operator|.
name|getName
argument_list|()
argument_list|,
name|collectionName
argument_list|)
argument_list|,
name|super
operator|.
name|getCodecRegistry
argument_list|()
argument_list|,
name|super
operator|.
name|getReadPreference
argument_list|()
argument_list|,
name|super
operator|.
name|getWriteConcern
argument_list|()
argument_list|,
name|super
operator|.
name|getReadConcern
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|TResult
parameter_list|>
name|TResult
name|runCommand
parameter_list|(
name|Bson
name|command
parameter_list|,
name|ReadPreference
name|readPreference
parameter_list|,
name|Class
argument_list|<
name|TResult
argument_list|>
name|tResultClass
parameter_list|)
block|{
if|if
condition|(
name|BasicDBObject
operator|.
name|class
operator|.
name|equals
argument_list|(
name|tResultClass
argument_list|)
condition|)
block|{
name|BasicDBObject
name|result
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"version"
argument_list|,
name|asString
argument_list|(
name|getServerVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|TResult
operator|)
name|result
return|;
block|}
return|return
name|super
operator|.
name|runCommand
argument_list|(
name|command
argument_list|,
name|readPreference
argument_list|,
name|tResultClass
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|OakFongoMongoCollection
extends|extends
name|FongoMongoCollection
argument_list|<
name|Document
argument_list|>
block|{
specifier|private
specifier|final
name|Fongo
name|fongo
decl_stmt|;
name|OakFongoMongoCollection
parameter_list|(
name|Fongo
name|fongo
parameter_list|,
name|MongoNamespace
name|namespace
parameter_list|,
name|CodecRegistry
name|codecRegistry
parameter_list|,
name|ReadPreference
name|readPreference
parameter_list|,
name|WriteConcern
name|writeConcern
parameter_list|,
name|ReadConcern
name|readConcern
parameter_list|)
block|{
name|super
argument_list|(
name|fongo
argument_list|,
name|namespace
argument_list|,
name|Document
operator|.
name|class
argument_list|,
name|codecRegistry
argument_list|,
name|readPreference
argument_list|,
name|writeConcern
argument_list|,
name|readConcern
argument_list|)
expr_stmt|;
name|this
operator|.
name|fongo
operator|=
name|fongo
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|insertMany
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Document
argument_list|>
name|documents
parameter_list|,
name|InsertManyOptions
name|options
parameter_list|)
block|{
name|beforeInsert
argument_list|(
name|asDBObjects
argument_list|(
name|documents
argument_list|)
argument_list|,
operator|new
name|InsertOptions
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|insertMany
argument_list|(
name|documents
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|WriteResult
name|result
init|=
operator|new
name|WriteResult
argument_list|(
name|documents
operator|.
name|size
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|afterInsert
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|DeleteResult
name|deleteMany
parameter_list|(
name|Bson
name|filter
parameter_list|,
name|DeleteOptions
name|options
parameter_list|)
block|{
name|beforeRemove
argument_list|(
name|asDBObject
argument_list|(
name|filter
argument_list|)
argument_list|,
name|getWriteConcern
argument_list|()
argument_list|)
expr_stmt|;
name|DeleteResult
name|result
init|=
name|super
operator|.
name|deleteMany
argument_list|(
name|filter
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|afterRemove
argument_list|(
operator|new
name|WriteResult
argument_list|(
operator|(
name|int
operator|)
name|result
operator|.
name|getDeletedCount
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|UpdateResult
name|updateMany
parameter_list|(
name|Bson
name|filter
parameter_list|,
name|Bson
name|update
parameter_list|,
name|UpdateOptions
name|updateOptions
parameter_list|)
block|{
name|beforeUpdate
argument_list|(
name|asDBObject
argument_list|(
name|filter
argument_list|)
argument_list|,
name|asDBObject
argument_list|(
name|update
argument_list|)
argument_list|,
name|updateOptions
operator|.
name|isUpsert
argument_list|()
argument_list|,
literal|true
argument_list|,
name|getWriteConcern
argument_list|()
argument_list|,
operator|new
name|DefaultDBEncoder
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateResult
name|result
init|=
name|super
operator|.
name|updateMany
argument_list|(
name|filter
argument_list|,
name|update
argument_list|,
name|updateOptions
argument_list|)
decl_stmt|;
name|afterUpdate
argument_list|(
operator|new
name|WriteResult
argument_list|(
operator|(
name|int
operator|)
name|result
operator|.
name|getModifiedCount
argument_list|()
argument_list|,
literal|true
argument_list|,
name|result
operator|.
name|getUpsertedId
argument_list|()
operator|.
name|asString
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Document
name|findOneAndUpdate
parameter_list|(
name|Bson
name|filter
parameter_list|,
name|Bson
name|update
parameter_list|,
name|FindOneAndUpdateOptions
name|options
parameter_list|)
block|{
name|beforeFindAndModify
argument_list|(
name|asDBObject
argument_list|(
name|filter
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|asDBObject
argument_list|(
name|update
argument_list|)
argument_list|,
name|options
operator|.
name|getReturnDocument
argument_list|()
operator|==
name|ReturnDocument
operator|.
name|AFTER
argument_list|,
name|options
operator|.
name|isUpsert
argument_list|()
argument_list|)
expr_stmt|;
name|Document
name|result
init|=
name|super
operator|.
name|findOneAndUpdate
argument_list|(
name|filter
argument_list|,
name|update
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|afterFindAndModify
argument_list|(
name|asDBObject
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|FindIterable
argument_list|<
name|Document
argument_list|>
name|find
parameter_list|(
name|Bson
name|filter
parameter_list|)
block|{
name|beforeFind
argument_list|(
name|asDBObject
argument_list|(
name|filter
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FindIterable
argument_list|<
name|Document
argument_list|>
name|result
init|=
name|super
operator|.
name|find
argument_list|(
name|filter
argument_list|)
decl_stmt|;
name|afterFind
argument_list|(
operator|new
name|FongoDBCursor
argument_list|(
name|fongo
operator|.
name|getDB
argument_list|(
name|getNamespace
argument_list|()
operator|.
name|getDatabaseName
argument_list|()
argument_list|)
operator|.
name|getCollection
argument_list|(
name|getNamespace
argument_list|()
operator|.
name|getCollectionName
argument_list|()
argument_list|)
argument_list|,
name|asDBObject
argument_list|(
name|filter
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|com
operator|.
name|mongodb
operator|.
name|bulk
operator|.
name|BulkWriteResult
name|bulkWrite
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|WriteModel
argument_list|<
name|?
extends|extends
name|Document
argument_list|>
argument_list|>
name|requests
parameter_list|,
name|BulkWriteOptions
name|options
parameter_list|)
block|{
name|beforeExecuteBulkWriteOperation
argument_list|(
name|options
operator|.
name|isOrdered
argument_list|()
argument_list|,
name|options
operator|.
name|getBypassDocumentValidation
argument_list|()
argument_list|,
name|requests
argument_list|,
name|getWriteConcern
argument_list|()
argument_list|)
expr_stmt|;
name|com
operator|.
name|mongodb
operator|.
name|bulk
operator|.
name|BulkWriteResult
name|result
init|=
name|super
operator|.
name|bulkWrite
argument_list|(
name|requests
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|afterExecuteBulkWriteOperation
argument_list|(
operator|new
name|AcknowledgedBulkWriteResult
argument_list|(
name|result
operator|.
name|getInsertedCount
argument_list|()
argument_list|,
name|result
operator|.
name|getMatchedCount
argument_list|()
argument_list|,
name|result
operator|.
name|getDeletedCount
argument_list|()
argument_list|,
name|result
operator|.
name|getModifiedCount
argument_list|()
argument_list|,
name|this
operator|.
name|transform
argument_list|(
name|result
operator|.
name|getUpserts
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|List
argument_list|<
name|BulkWriteUpsert
argument_list|>
name|transform
parameter_list|(
name|List
argument_list|<
name|com
operator|.
name|mongodb
operator|.
name|bulk
operator|.
name|BulkWriteUpsert
argument_list|>
name|upserts
parameter_list|)
block|{
return|return
name|upserts
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|bulkWriteUpsert
lambda|->
operator|new
name|BulkWriteUpsert
argument_list|(
name|bulkWriteUpsert
operator|.
name|getIndex
argument_list|()
argument_list|,
name|bulkWriteUpsert
operator|.
name|getId
argument_list|()
operator|.
name|asString
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MongoCollection
argument_list|<
name|Document
argument_list|>
name|withCodecRegistry
parameter_list|(
name|CodecRegistry
name|codecRegistry
parameter_list|)
block|{
return|return
operator|new
name|OakFongoMongoCollection
argument_list|(
name|fongo
argument_list|,
name|super
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|codecRegistry
argument_list|,
name|super
operator|.
name|getReadPreference
argument_list|()
argument_list|,
name|super
operator|.
name|getWriteConcern
argument_list|()
argument_list|,
name|super
operator|.
name|getReadConcern
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MongoCollection
argument_list|<
name|Document
argument_list|>
name|withReadPreference
parameter_list|(
name|ReadPreference
name|readPreference
parameter_list|)
block|{
return|return
operator|new
name|OakFongoMongoCollection
argument_list|(
name|fongo
argument_list|,
name|super
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|super
operator|.
name|getCodecRegistry
argument_list|()
argument_list|,
name|readPreference
argument_list|,
name|super
operator|.
name|getWriteConcern
argument_list|()
argument_list|,
name|super
operator|.
name|getReadConcern
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MongoCollection
argument_list|<
name|Document
argument_list|>
name|withWriteConcern
parameter_list|(
name|WriteConcern
name|writeConcern
parameter_list|)
block|{
return|return
operator|new
name|OakFongoMongoCollection
argument_list|(
name|fongo
argument_list|,
name|super
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|super
operator|.
name|getCodecRegistry
argument_list|()
argument_list|,
name|super
operator|.
name|getReadPreference
argument_list|()
argument_list|,
name|writeConcern
argument_list|,
name|super
operator|.
name|getReadConcern
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MongoCollection
argument_list|<
name|Document
argument_list|>
name|withReadConcern
parameter_list|(
name|ReadConcern
name|readConcern
parameter_list|)
block|{
return|return
operator|new
name|OakFongoMongoCollection
argument_list|(
name|fongo
argument_list|,
name|super
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|super
operator|.
name|getCodecRegistry
argument_list|()
argument_list|,
name|super
operator|.
name|getReadPreference
argument_list|()
argument_list|,
name|super
operator|.
name|getWriteConcern
argument_list|()
argument_list|,
name|readConcern
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|DBObject
argument_list|>
name|asDBObjects
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Document
argument_list|>
name|docs
parameter_list|)
block|{
return|return
name|docs
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|asDBObject
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|DBObject
name|asDBObject
parameter_list|(
name|Bson
name|bson
parameter_list|)
block|{
return|return
operator|new
name|BasicDBObject
argument_list|(
name|bson
operator|.
name|toBsonDocument
argument_list|(
name|Document
operator|.
name|class
argument_list|,
name|CODEC_REGISTRY
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

