begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|spi
operator|.
name|JournalProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|spi
operator|.
name|JournalPropertyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|spi
operator|.
name|JournalPropertyService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_class
class|class
name|JournalPropertyHandler
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|JournalPropertyBuilder
argument_list|<
name|JournalProperty
argument_list|>
argument_list|>
name|builders
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|public
name|JournalPropertyHandler
parameter_list|(
name|List
argument_list|<
name|JournalPropertyService
argument_list|>
name|services
parameter_list|)
block|{
for|for
control|(
name|JournalPropertyService
name|srv
range|:
name|services
control|)
block|{
name|String
name|name
init|=
name|srv
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|builders
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|builders
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|srv
operator|.
name|newBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Duplicate JournalPropertyService found "
operator|+
literal|"for name - "
operator|+
name|name
operator|+
literal|" Currently known services "
operator|+
name|services
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|readFrom
parameter_list|(
name|CommitInfo
name|info
parameter_list|)
block|{
name|CommitContext
name|commitContext
init|=
operator|(
name|CommitContext
operator|)
name|info
operator|.
name|getInfo
argument_list|()
operator|.
name|get
argument_list|(
name|CommitContext
operator|.
name|NAME
argument_list|)
decl_stmt|;
comment|//Even if commit content is null do a callback to builder to indicate
comment|//that it may miss out on some data collection
if|if
condition|(
name|commitContext
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|JournalPropertyBuilder
argument_list|<
name|?
argument_list|>
name|builder
range|:
name|builders
operator|.
name|values
argument_list|()
control|)
block|{
name|builder
operator|.
name|addProperty
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JournalPropertyBuilder
argument_list|<
name|JournalProperty
argument_list|>
argument_list|>
name|e
range|:
name|builders
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|JournalPropertyBuilder
argument_list|<
name|JournalProperty
argument_list|>
name|builder
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addProperty
argument_list|(
name|getEntry
argument_list|(
name|commitContext
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|readFrom
parameter_list|(
name|JournalEntry
name|entry
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JournalPropertyBuilder
argument_list|<
name|JournalProperty
argument_list|>
argument_list|>
name|e
range|:
name|builders
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|JournalPropertyBuilder
argument_list|<
name|JournalProperty
argument_list|>
name|builder
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|Utils
operator|.
name|escapePropertyName
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addSerializedProperty
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addTo
parameter_list|(
name|CommitContext
name|commitContext
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JournalPropertyBuilder
argument_list|<
name|JournalProperty
argument_list|>
argument_list|>
name|e
range|:
name|builders
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|JournalPropertyBuilder
argument_list|<
name|JournalProperty
argument_list|>
name|builder
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|commitContext
operator|.
name|set
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addTo
parameter_list|(
name|UpdateOp
name|op
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JournalPropertyBuilder
argument_list|<
name|JournalProperty
argument_list|>
argument_list|>
name|e
range|:
name|builders
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|JournalPropertyBuilder
argument_list|<
name|JournalProperty
argument_list|>
name|builder
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|Utils
operator|.
name|escapePropertyName
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|op
operator|.
name|set
argument_list|(
name|name
argument_list|,
name|builder
operator|.
name|buildAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|JournalProperty
name|getEntry
parameter_list|(
name|CommitContext
name|cc
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Object
name|o
init|=
name|cc
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|checkArgument
argument_list|(
name|o
operator|instanceof
name|JournalProperty
argument_list|,
literal|"CommitContext entry for name [%s] "
operator|+
literal|"having value [%s] is not of type JournalEntry"
argument_list|,
name|name
argument_list|,
name|o
argument_list|)
expr_stmt|;
return|return
operator|(
name|JournalProperty
operator|)
name|o
return|;
block|}
block|}
end_class

end_unit

