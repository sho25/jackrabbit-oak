begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_comment
comment|/**  * ReadTest... TODO  */
end_comment

begin_class
specifier|public
class|class
name|ReadTest
extends|extends
name|AbstractEvaluationTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testChildNodes
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* create some new nodes below 'path' */
name|Node
name|n
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|n
operator|=
name|n
operator|.
name|addNode
argument_list|(
name|nodeName4
argument_list|,
name|testNodeType
argument_list|)
expr_stmt|;
block|}
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|/* make sure the same privileges/permissions are granted as at path. */
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|childPath
init|=
name|n
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|readPrivileges
argument_list|,
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
name|childPath
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|checkPermission
argument_list|(
name|childPath
argument_list|,
name|Session
operator|.
name|ACTION_READ
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonExistingItem
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*           precondition:           testuser must have READ-only permission on the root node and below         */
name|String
name|rootPath
init|=
name|testSession
operator|.
name|getRootNode
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertReadOnly
argument_list|(
name|rootPath
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|checkPermission
argument_list|(
name|rootPath
operator|+
literal|"nonExistingItem"
argument_list|,
name|Session
operator|.
name|ACTION_READ
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeniedReadOnSubTree
parameter_list|()
throws|throws
name|Exception
throws|,
name|InterruptedException
block|{
comment|// withdraw READ privilege to 'testUser' at 'path'
name|deny
argument_list|(
name|childNPath
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
comment|/*          testuser must now have          - READ-only permission at path          - READ-only permission for the child-props of path           testuser must not have          - any permission on child-node and all its subtree         */
comment|// must still have read-access to path, ...
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|path
argument_list|,
name|Session
operator|.
name|ACTION_READ
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// ... siblings of childN
name|testSession
operator|.
name|getNode
argument_list|(
name|childNPath2
argument_list|)
expr_stmt|;
comment|// ... and props of path
name|assertTrue
argument_list|(
name|n
operator|.
name|getProperties
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|//testSession must not have access to 'childNPath'
name|assertFalse
argument_list|(
name|testSession
operator|.
name|itemExists
argument_list|(
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|testSession
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Read access has been denied -> cannot retrieve child node."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// ok.
block|}
comment|/*         -> must not have access to subtree below 'childNPath'         */
name|assertFalse
argument_list|(
name|testSession
operator|.
name|itemExists
argument_list|(
name|childchildPPath
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|testSession
operator|.
name|getItem
argument_list|(
name|childchildPPath
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Read access has been denied -> cannot retrieve prop below child node."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// ok.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllowWriteDenyRead
parameter_list|()
throws|throws
name|Exception
block|{
comment|// allow 'testUser' to write at 'path'
name|allow
argument_list|(
name|path
argument_list|,
name|repWritePrivileges
argument_list|)
expr_stmt|;
comment|// deny read access
name|deny
argument_list|(
name|path
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
comment|// testuser must not be able to access that node
name|assertFalse
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"OAK-766"
argument_list|)
comment|// FIXME
annotation|@
name|Test
specifier|public
name|void
name|testReadDenied
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* deny READ privilege for testUser at 'path' */
name|deny
argument_list|(
name|path
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
comment|/*          allow READ privilege for testUser at 'childNPath'          */
name|allow
argument_list|(
name|childNPath
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
decl_stmt|;
name|n
operator|.
name|getDefinition
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDenyUserAllowGroup
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*          deny READ privilege for testUser at 'path'          */
name|deny
argument_list|(
name|path
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
comment|/*          allow READ privilege for group at 'path'          */
name|allow
argument_list|(
name|path
argument_list|,
name|getTestGroup
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllowGroupDenyUser
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*         allow READ privilege for group at 'path'         */
name|allow
argument_list|(
name|path
argument_list|,
name|getTestGroup
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
comment|/*         deny READ privilege for testUser at 'path'         */
name|deny
argument_list|(
name|path
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllowUserDenyGroup
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*          allow READ privilege for testUser at 'path'          */
name|allow
argument_list|(
name|path
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
comment|/*          deny READ privilege for group at 'path'          */
name|deny
argument_list|(
name|path
argument_list|,
name|getTestGroup
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDenyGroupAllowUser
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*          deny READ privilege for group at 'path'          */
name|deny
argument_list|(
name|path
argument_list|,
name|getTestGroup
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
comment|/*          allow READ privilege for testUser at 'path'          */
name|allow
argument_list|(
name|path
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDenyGroupAllowEveryone
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*          deny READ privilege for group at 'path'          */
name|deny
argument_list|(
name|path
argument_list|,
name|getTestGroup
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
comment|/*          allow READ privilege for everyone at 'path'          */
name|allow
argument_list|(
name|path
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"OAK-51"
argument_list|)
comment|// FIXME
annotation|@
name|Test
specifier|public
name|void
name|testAllowEveryoneDenyGroup
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*          allow READ privilege for everyone at 'path'          */
name|allow
argument_list|(
name|path
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
comment|/*          deny READ privilege for group at 'path'          */
name|deny
argument_list|(
name|path
argument_list|,
name|getTestGroup
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDenyGroupPathAllowEveryoneChildPath
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*          deny READ privilege for group at 'path'          */
name|deny
argument_list|(
name|path
argument_list|,
name|getTestGroup
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
comment|/*          allow READ privilege for everyone at 'childNPath'          */
name|allow
argument_list|(
name|path
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"OAK-51"
argument_list|)
comment|// FIXME
annotation|@
name|Test
specifier|public
name|void
name|testAllowEveryonePathDenyGroupChildPath
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*          allow READ privilege for everyone at 'path'          */
name|allow
argument_list|(
name|path
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
comment|/*          deny READ privilege for group at 'childNPath'          */
name|deny
argument_list|(
name|childNPath
argument_list|,
name|getTestGroup
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllowUserPathDenyGroupChildPath
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*          allow READ privilege for testUser at 'path'          */
name|allow
argument_list|(
name|path
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
comment|/*          deny READ privilege for group at 'childPath'          */
name|deny
argument_list|(
name|path
argument_list|,
name|getTestGroup
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDenyGroupPathAllowUserChildPath
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*          deny READ privilege for group at 'path'          */
name|deny
argument_list|(
name|path
argument_list|,
name|getTestGroup
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
comment|/*          allow READ privilege for testUser at 'childNPath'          */
name|allow
argument_list|(
name|path
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDenyUserPathAllowGroupChildPath
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*          deny READ privilege for testUser at 'path'          */
name|deny
argument_list|(
name|path
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
comment|/*          allow READ privilege for group at 'childNPath'          */
name|allow
argument_list|(
name|path
argument_list|,
name|getTestGroup
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllowGroupPathDenyUserChildPath
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*         allow READ privilege for the group at 'path'         */
name|allow
argument_list|(
name|path
argument_list|,
name|getTestGroup
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
comment|/*         deny READ privilege for testUser at 'childNPath'         */
name|deny
argument_list|(
name|path
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGlobRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|deny
argument_list|(
name|path
argument_list|,
name|readPrivileges
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"*/"
operator|+
name|jcrPrimaryType
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|readPrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|path
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_READ
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath
argument_list|,
name|readPrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_READ
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
expr_stmt|;
name|String
name|propPath
init|=
name|path
operator|+
literal|'/'
operator|+
name|jcrPrimaryType
decl_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|propPath
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|propertyExists
argument_list|(
name|propPath
argument_list|)
argument_list|)
expr_stmt|;
name|propPath
operator|=
name|childNPath
operator|+
literal|'/'
operator|+
name|jcrPrimaryType
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|propPath
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|propertyExists
argument_list|(
name|propPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

