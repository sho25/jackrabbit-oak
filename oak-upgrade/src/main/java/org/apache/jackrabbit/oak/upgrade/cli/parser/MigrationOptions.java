begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|cli
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|MigrationOptions
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MigrationOptions
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DateFormat
name|DATE_FORMAT
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|copyBinaries
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|disableMmap
decl_stmt|;
specifier|private
specifier|final
name|int
name|cacheSizeInMB
decl_stmt|;
specifier|private
specifier|final
name|Calendar
name|copyVersions
decl_stmt|;
specifier|private
specifier|final
name|Calendar
name|copyOrphanedVersions
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|includePaths
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|excludePaths
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|excludeFragments
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|mergePaths
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|includeIndex
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|failOnError
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|earlyShutdown
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|skipInitialization
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|skipNameCheck
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|ignoreMissingBinaries
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|verify
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|onlyVerify
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|skipCheckpoints
decl_stmt|;
specifier|private
specifier|final
name|String
name|srcUser
decl_stmt|;
specifier|private
specifier|final
name|String
name|srcPassword
decl_stmt|;
specifier|private
specifier|final
name|String
name|dstUser
decl_stmt|;
specifier|private
specifier|final
name|String
name|dstPassword
decl_stmt|;
specifier|private
specifier|final
name|String
name|srcFbs
decl_stmt|;
specifier|private
specifier|final
name|String
name|srcFds
decl_stmt|;
specifier|private
specifier|final
name|String
name|srcS3Config
decl_stmt|;
specifier|private
specifier|final
name|String
name|srcS3
decl_stmt|;
specifier|private
specifier|final
name|String
name|dstFbs
decl_stmt|;
specifier|private
specifier|final
name|String
name|dstFds
decl_stmt|;
specifier|private
specifier|final
name|String
name|dstS3Config
decl_stmt|;
specifier|private
specifier|final
name|String
name|dstS3
decl_stmt|;
specifier|private
specifier|final
name|Boolean
name|srcExternalBlobs
decl_stmt|;
specifier|public
name|MigrationOptions
parameter_list|(
name|MigrationCliArguments
name|args
parameter_list|)
throws|throws
name|CliArgumentException
block|{
name|this
operator|.
name|disableMmap
operator|=
name|args
operator|.
name|hasOption
argument_list|(
name|OptionParserFactory
operator|.
name|DISABLE_MMAP
argument_list|)
expr_stmt|;
name|this
operator|.
name|copyBinaries
operator|=
name|args
operator|.
name|hasOption
argument_list|(
name|OptionParserFactory
operator|.
name|COPY_BINARIES
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|hasOption
argument_list|(
name|OptionParserFactory
operator|.
name|CACHE_SIZE
argument_list|)
condition|)
block|{
name|this
operator|.
name|cacheSizeInMB
operator|=
name|args
operator|.
name|getIntOption
argument_list|(
name|OptionParserFactory
operator|.
name|CACHE_SIZE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|cacheSizeInMB
operator|=
literal|256
expr_stmt|;
block|}
specifier|final
name|Calendar
name|epoch
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|epoch
operator|.
name|setTimeInMillis
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|hasOption
argument_list|(
name|OptionParserFactory
operator|.
name|COPY_VERSIONS
argument_list|)
condition|)
block|{
name|this
operator|.
name|copyVersions
operator|=
name|parseVersionCopyArgument
argument_list|(
name|args
operator|.
name|getOption
argument_list|(
name|OptionParserFactory
operator|.
name|COPY_VERSIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|copyVersions
operator|=
name|epoch
expr_stmt|;
block|}
if|if
condition|(
name|args
operator|.
name|hasOption
argument_list|(
name|OptionParserFactory
operator|.
name|COPY_ORPHANED_VERSIONS
argument_list|)
condition|)
block|{
name|this
operator|.
name|copyOrphanedVersions
operator|=
name|parseVersionCopyArgument
argument_list|(
name|args
operator|.
name|getOption
argument_list|(
name|OptionParserFactory
operator|.
name|COPY_ORPHANED_VERSIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|copyOrphanedVersions
operator|=
name|epoch
expr_stmt|;
block|}
name|this
operator|.
name|includePaths
operator|=
name|checkPaths
argument_list|(
name|args
operator|.
name|getOptionList
argument_list|(
name|OptionParserFactory
operator|.
name|INCLUDE_PATHS
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|excludePaths
operator|=
name|checkPaths
argument_list|(
name|args
operator|.
name|getOptionList
argument_list|(
name|OptionParserFactory
operator|.
name|EXCLUDE_PATHS
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|excludeFragments
operator|=
name|args
operator|.
name|getOptionList
argument_list|(
name|OptionParserFactory
operator|.
name|EXCLUDE_FRAGMENTS
argument_list|)
expr_stmt|;
name|this
operator|.
name|mergePaths
operator|=
name|checkPaths
argument_list|(
name|args
operator|.
name|getOptionList
argument_list|(
name|OptionParserFactory
operator|.
name|MERGE_PATHS
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|includeIndex
operator|=
name|args
operator|.
name|hasOption
argument_list|(
name|OptionParserFactory
operator|.
name|INCLUDE_INDEX
argument_list|)
expr_stmt|;
name|this
operator|.
name|failOnError
operator|=
name|args
operator|.
name|hasOption
argument_list|(
name|OptionParserFactory
operator|.
name|FAIL_ON_ERROR
argument_list|)
expr_stmt|;
name|this
operator|.
name|earlyShutdown
operator|=
name|args
operator|.
name|hasOption
argument_list|(
name|OptionParserFactory
operator|.
name|EARLY_SHUTDOWN
argument_list|)
expr_stmt|;
name|this
operator|.
name|skipInitialization
operator|=
name|args
operator|.
name|hasOption
argument_list|(
name|OptionParserFactory
operator|.
name|SKIP_INIT
argument_list|)
expr_stmt|;
name|this
operator|.
name|skipNameCheck
operator|=
name|args
operator|.
name|hasOption
argument_list|(
name|OptionParserFactory
operator|.
name|SKIP_NAME_CHECK
argument_list|)
expr_stmt|;
name|this
operator|.
name|ignoreMissingBinaries
operator|=
name|args
operator|.
name|hasOption
argument_list|(
name|OptionParserFactory
operator|.
name|IGNORE_MISSING_BINARIES
argument_list|)
expr_stmt|;
name|this
operator|.
name|verify
operator|=
name|args
operator|.
name|hasOption
argument_list|(
name|OptionParserFactory
operator|.
name|VERIFY
argument_list|)
expr_stmt|;
name|this
operator|.
name|onlyVerify
operator|=
name|args
operator|.
name|hasOption
argument_list|(
name|OptionParserFactory
operator|.
name|ONLY_VERIFY
argument_list|)
expr_stmt|;
name|this
operator|.
name|skipCheckpoints
operator|=
name|args
operator|.
name|hasOption
argument_list|(
name|OptionParserFactory
operator|.
name|SKIP_CHECKPOINTS
argument_list|)
expr_stmt|;
name|this
operator|.
name|srcUser
operator|=
name|args
operator|.
name|getOption
argument_list|(
name|OptionParserFactory
operator|.
name|SRC_USER
argument_list|)
expr_stmt|;
name|this
operator|.
name|srcPassword
operator|=
name|args
operator|.
name|getOption
argument_list|(
name|OptionParserFactory
operator|.
name|SRC_USER
argument_list|)
expr_stmt|;
name|this
operator|.
name|dstUser
operator|=
name|args
operator|.
name|getOption
argument_list|(
name|OptionParserFactory
operator|.
name|DST_USER
argument_list|)
expr_stmt|;
name|this
operator|.
name|dstPassword
operator|=
name|args
operator|.
name|getOption
argument_list|(
name|OptionParserFactory
operator|.
name|DST_PASSWORD
argument_list|)
expr_stmt|;
name|this
operator|.
name|srcFbs
operator|=
name|args
operator|.
name|getOption
argument_list|(
name|OptionParserFactory
operator|.
name|SRC_FBS
argument_list|)
expr_stmt|;
name|this
operator|.
name|srcFds
operator|=
name|args
operator|.
name|getOption
argument_list|(
name|OptionParserFactory
operator|.
name|SRC_FDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|srcS3
operator|=
name|args
operator|.
name|getOption
argument_list|(
name|OptionParserFactory
operator|.
name|SRC_S3
argument_list|)
expr_stmt|;
name|this
operator|.
name|srcS3Config
operator|=
name|args
operator|.
name|getOption
argument_list|(
name|OptionParserFactory
operator|.
name|SRC_S3_CONFIG
argument_list|)
expr_stmt|;
name|this
operator|.
name|dstFbs
operator|=
name|args
operator|.
name|getOption
argument_list|(
name|OptionParserFactory
operator|.
name|DST_FBS
argument_list|)
expr_stmt|;
name|this
operator|.
name|dstFds
operator|=
name|args
operator|.
name|getOption
argument_list|(
name|OptionParserFactory
operator|.
name|DST_FDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|dstS3
operator|=
name|args
operator|.
name|getOption
argument_list|(
name|OptionParserFactory
operator|.
name|DST_S3
argument_list|)
expr_stmt|;
name|this
operator|.
name|dstS3Config
operator|=
name|args
operator|.
name|getOption
argument_list|(
name|OptionParserFactory
operator|.
name|DST_S3_CONFIG
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|hasOption
argument_list|(
name|OptionParserFactory
operator|.
name|SRC_EXTERNAL_BLOBS
argument_list|)
condition|)
block|{
name|this
operator|.
name|srcExternalBlobs
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|OptionParserFactory
operator|.
name|SRC_EXTERNAL_BLOBS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|srcExternalBlobs
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isCopyBinaries
parameter_list|()
block|{
return|return
name|copyBinaries
return|;
block|}
specifier|public
name|boolean
name|isDisableMmap
parameter_list|()
block|{
return|return
name|disableMmap
return|;
block|}
specifier|public
name|int
name|getCacheSizeInMB
parameter_list|()
block|{
return|return
name|cacheSizeInMB
return|;
block|}
specifier|public
name|Calendar
name|getCopyVersions
parameter_list|()
block|{
return|return
name|copyVersions
return|;
block|}
specifier|public
name|Calendar
name|getCopyOrphanedVersions
parameter_list|()
block|{
return|return
name|copyOrphanedVersions
return|;
block|}
specifier|public
name|String
index|[]
name|getIncludePaths
parameter_list|()
block|{
return|return
name|includePaths
return|;
block|}
specifier|public
name|String
index|[]
name|getExcludePaths
parameter_list|()
block|{
return|return
name|excludePaths
return|;
block|}
specifier|public
name|String
index|[]
name|getExcludeFragments
parameter_list|()
block|{
return|return
name|excludeFragments
return|;
block|}
specifier|public
name|String
index|[]
name|getMergePaths
parameter_list|()
block|{
return|return
name|mergePaths
return|;
block|}
specifier|public
name|boolean
name|isFailOnError
parameter_list|()
block|{
return|return
name|failOnError
return|;
block|}
specifier|public
name|boolean
name|isEarlyShutdown
parameter_list|()
block|{
return|return
name|earlyShutdown
return|;
block|}
specifier|public
name|boolean
name|isSkipInitialization
parameter_list|()
block|{
return|return
name|skipInitialization
return|;
block|}
specifier|public
name|boolean
name|isSkipNameCheck
parameter_list|()
block|{
return|return
name|skipNameCheck
return|;
block|}
specifier|public
name|boolean
name|isIncludeIndex
parameter_list|()
block|{
return|return
name|includeIndex
return|;
block|}
specifier|public
name|boolean
name|isIgnoreMissingBinaries
parameter_list|()
block|{
return|return
name|ignoreMissingBinaries
return|;
block|}
specifier|public
name|boolean
name|isVerify
parameter_list|()
block|{
return|return
name|verify
return|;
block|}
specifier|public
name|boolean
name|isOnlyVerify
parameter_list|()
block|{
return|return
name|onlyVerify
return|;
block|}
specifier|public
name|boolean
name|isSkipCheckpoints
parameter_list|()
block|{
return|return
name|skipCheckpoints
return|;
block|}
specifier|public
name|String
name|getSrcUser
parameter_list|()
block|{
return|return
name|srcUser
return|;
block|}
specifier|public
name|String
name|getSrcPassword
parameter_list|()
block|{
return|return
name|srcPassword
return|;
block|}
specifier|public
name|String
name|getDstUser
parameter_list|()
block|{
return|return
name|dstUser
return|;
block|}
specifier|public
name|String
name|getDstPassword
parameter_list|()
block|{
return|return
name|dstPassword
return|;
block|}
specifier|public
name|String
name|getSrcFbs
parameter_list|()
block|{
return|return
name|srcFbs
return|;
block|}
specifier|public
name|String
name|getSrcFds
parameter_list|()
block|{
return|return
name|srcFds
return|;
block|}
specifier|public
name|String
name|getSrcS3Config
parameter_list|()
block|{
return|return
name|srcS3Config
return|;
block|}
specifier|public
name|String
name|getSrcS3
parameter_list|()
block|{
return|return
name|srcS3
return|;
block|}
specifier|public
name|String
name|getDstFbs
parameter_list|()
block|{
return|return
name|dstFbs
return|;
block|}
specifier|public
name|String
name|getDstFds
parameter_list|()
block|{
return|return
name|dstFds
return|;
block|}
specifier|public
name|String
name|getDstS3Config
parameter_list|()
block|{
return|return
name|dstS3Config
return|;
block|}
specifier|public
name|String
name|getDstS3
parameter_list|()
block|{
return|return
name|dstS3
return|;
block|}
specifier|public
name|boolean
name|isSrcFds
parameter_list|()
block|{
return|return
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|srcFds
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isSrcFbs
parameter_list|()
block|{
return|return
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|srcFbs
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isSrcS3
parameter_list|()
block|{
return|return
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|srcS3
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|srcS3Config
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isDstFds
parameter_list|()
block|{
return|return
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|dstFds
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isDstFbs
parameter_list|()
block|{
return|return
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|dstFbs
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isDstS3
parameter_list|()
block|{
return|return
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|dstS3
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|dstS3Config
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isSrcBlobStoreDefined
parameter_list|()
block|{
return|return
name|isSrcFbs
argument_list|()
operator|||
name|isSrcFds
argument_list|()
operator|||
name|isSrcS3
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isDstBlobStoreDefined
parameter_list|()
block|{
return|return
name|isDstFbs
argument_list|()
operator|||
name|isDstFds
argument_list|()
operator|||
name|isDstS3
argument_list|()
return|;
block|}
specifier|public
name|void
name|logOptions
parameter_list|()
block|{
if|if
condition|(
name|disableMmap
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Disabling memory mapped file access for Segment Store"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|copyVersions
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"copyVersions parameter set to false"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"copyVersions parameter set to {}"
argument_list|,
name|DATE_FORMAT
operator|.
name|format
argument_list|(
name|copyVersions
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|copyOrphanedVersions
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"copyOrphanedVersions parameter set to false"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"copyOrphanedVersions parameter set to {}"
argument_list|,
name|DATE_FORMAT
operator|.
name|format
argument_list|(
name|copyOrphanedVersions
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includePaths
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"paths to include: {}"
argument_list|,
operator|(
name|Object
operator|)
name|includePaths
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|excludePaths
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"paths to exclude: {}"
argument_list|,
operator|(
name|Object
operator|)
name|excludePaths
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|excludeFragments
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"fragments to exclude: {}"
argument_list|,
operator|(
name|Object
operator|)
name|excludeFragments
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|failOnError
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Unreadable nodes will cause failure of the entire transaction"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|earlyShutdown
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Source repository would be shutdown post copying of nodes"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|skipInitialization
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"The repository initialization will be skipped"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|skipNameCheck
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Test for long-named nodes will be disabled"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeIndex
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Index data for the paths {} will be copied"
argument_list|,
operator|(
name|Object
operator|)
name|includePaths
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ignoreMissingBinaries
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Missing binaries won't break the migration"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|srcExternalBlobs
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Source DataStore external blobs: {}"
argument_list|,
name|srcExternalBlobs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|skipCheckpoints
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Checkpoints won't be migrated"
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Cache size: {} MB"
argument_list|,
name|cacheSizeInMB
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Calendar
name|parseVersionCopyArgument
parameter_list|(
name|String
name|string
parameter_list|)
block|{
specifier|final
name|Calendar
name|calendar
decl_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|string
argument_list|)
condition|)
block|{
name|calendar
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|calendar
operator|.
name|setTimeInMillis
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|string
operator|!=
literal|null
operator|&&
name|string
operator|.
name|matches
argument_list|(
literal|"^\\d{4}-\\d{2}-\\d{2}$"
argument_list|)
condition|)
block|{
name|calendar
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|()
expr_stmt|;
try|try
block|{
name|calendar
operator|.
name|setTime
argument_list|(
name|DATE_FORMAT
operator|.
name|parse
argument_list|(
name|string
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
name|calendar
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|calendar
return|;
block|}
specifier|public
name|Boolean
name|getSrcExternalBlobs
parameter_list|()
block|{
return|return
name|srcExternalBlobs
return|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|checkPaths
parameter_list|(
name|String
index|[]
name|paths
parameter_list|)
throws|throws
name|CliArgumentException
block|{
if|if
condition|(
name|paths
operator|==
literal|null
condition|)
block|{
return|return
name|paths
return|;
block|}
for|for
control|(
name|String
name|p
range|:
name|paths
control|)
block|{
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isValid
argument_list|(
name|p
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CliArgumentException
argument_list|(
literal|"Following path is not valid: "
operator|+
name|p
argument_list|,
literal|1
argument_list|)
throw|;
block|}
block|}
return|return
name|paths
return|;
block|}
block|}
end_class

end_unit

