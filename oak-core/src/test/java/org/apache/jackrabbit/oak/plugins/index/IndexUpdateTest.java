begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_BASE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|ASYNC_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|ASYNC_REINDEX_VALUE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEXING_MODE_NRT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_CONTENT_NODE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|REINDEX_ASYNC_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUtils
operator|.
name|createIndexDefinition
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContent
operator|.
name|INITIAL_CONTENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUpdate
operator|.
name|MissingIndexProviderStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|NodeStateNodeTypeInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|QueryEngineSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|NodeTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|NodeTypeInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|SelectorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
operator|.
name|FilterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|ISO8601
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
specifier|public
class|class
name|IndexUpdateTest
block|{
specifier|private
specifier|static
specifier|final
name|EditorHook
name|HOOK
init|=
operator|new
name|EditorHook
argument_list|(
operator|new
name|IndexUpdateProvider
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
specifier|private
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|/**      * Simple Test      *<ul>      *<li>Add an index definition</li>      *<li>Add some content</li>      *<li>Search& verify</li>      *</ul>      *      */
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
literal|"newchild"
argument_list|)
operator|.
name|child
argument_list|(
literal|"other"
argument_list|)
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"subIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add nodes
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"newchild"
argument_list|)
operator|.
name|child
argument_list|(
literal|"other"
argument_list|)
operator|.
name|child
argument_list|(
literal|"testChild"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
comment|// first check that the index content nodes exist
name|checkPathExists
argument_list|(
name|indexed
argument_list|,
name|INDEX_DEFINITIONS_NAME
argument_list|,
literal|"rootIndex"
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|)
expr_stmt|;
name|checkPathExists
argument_list|(
name|indexed
argument_list|,
literal|"newchild"
argument_list|,
literal|"other"
argument_list|,
name|INDEX_DEFINITIONS_NAME
argument_list|,
literal|"subIndex"
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|)
expr_stmt|;
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"testRoot"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyIndexLookup
name|lookupChild
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
operator|.
name|getChildNode
argument_list|(
literal|"newchild"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"other"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"testChild"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookupChild
argument_list|,
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|find
argument_list|(
name|lookupChild
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reindex Test      *<ul>      *<li>Add some content</li>      *<li>Add an index definition with the reindex flag set</li>      *<li>Search& verify</li>      *</ul>      */
annotation|@
name|Test
specifier|public
name|void
name|testReindex
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
comment|// first check that the index content nodes exist
name|NodeState
name|ns
init|=
name|checkPathExists
argument_list|(
name|indexed
argument_list|,
name|INDEX_DEFINITIONS_NAME
argument_list|,
literal|"rootIndex"
argument_list|)
decl_stmt|;
name|checkPathExists
argument_list|(
name|ns
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|)
expr_stmt|;
name|PropertyState
name|ps
init|=
name|ns
operator|.
name|getProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
comment|// next, lookup
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"testRoot"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reindex Test      *<ul>      *<li>Add some content& an index definition</li>      *<li>Update the index def by setting the reindex flag to true</li>      *<li>Search& verify</li>      *</ul>      */
annotation|@
name|Test
specifier|public
name|void
name|testReindex2
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|removeProperty
argument_list|(
literal|"reindex"
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|child
argument_list|(
literal|"rootIndex"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
comment|// first check that the index content nodes exist
name|NodeState
name|ns
init|=
name|checkPathExists
argument_list|(
name|indexed
argument_list|,
name|INDEX_DEFINITIONS_NAME
argument_list|,
literal|"rootIndex"
argument_list|)
decl_stmt|;
name|checkPathExists
argument_list|(
name|ns
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|)
expr_stmt|;
name|PropertyState
name|ps
init|=
name|ns
operator|.
name|getProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
comment|// next, lookup
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"testRoot"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Auto Reindex Test      *<ul>      *<li>Add some content</li>      *<li>Add an index definition without a reindex flag (see OAK-1874)</li>      *<li>Search& verify</li>      *</ul>      */
annotation|@
name|Test
specifier|public
name|void
name|testReindexAuto
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
comment|// first check that the index content nodes exist
name|NodeState
name|ns
init|=
name|checkPathExists
argument_list|(
name|indexed
argument_list|,
name|INDEX_DEFINITIONS_NAME
argument_list|,
literal|"rootIndex"
argument_list|)
decl_stmt|;
name|checkPathExists
argument_list|(
name|ns
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|)
expr_stmt|;
name|PropertyState
name|ps
init|=
name|ns
operator|.
name|getProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
comment|// next, lookup
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"testRoot"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReindexHidden
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|before
init|=
name|EmptyNodeState
operator|.
name|EMPTY_NODE
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|before
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
comment|// first check that the index content nodes exist
name|NodeState
name|ns
init|=
name|checkPathExists
argument_list|(
name|indexed
argument_list|,
name|INDEX_DEFINITIONS_NAME
argument_list|,
literal|"rootIndex"
argument_list|)
decl_stmt|;
name|NodeState
name|index
init|=
name|checkPathExists
argument_list|(
name|ns
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|)
decl_stmt|;
name|PropertyState
name|ps
init|=
name|ns
operator|.
name|getProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|index
operator|.
name|getChildNodeCount
argument_list|(
literal|1
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|before
operator|=
name|indexed
expr_stmt|;
name|builder
operator|=
name|before
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|child
argument_list|(
literal|"rootIndex"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"reindex"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|after
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|indexed
operator|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|index
operator|=
name|checkPathExists
argument_list|(
name|ns
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|)
expr_stmt|;
name|ps
operator|=
name|ns
operator|.
name|getProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|index
operator|.
name|getChildNodeCount
argument_list|(
literal|1
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIndexDefinitions
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"existing"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeBuilder
name|other
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
literal|"other"
argument_list|)
decl_stmt|;
comment|// Add index definition
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|createIndexDefinition
argument_list|(
name|other
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"index2"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
comment|// check that the index content nodes exist
name|checkPathExists
argument_list|(
name|indexed
argument_list|,
name|INDEX_DEFINITIONS_NAME
argument_list|,
literal|"existing"
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|)
expr_stmt|;
name|checkPathExists
argument_list|(
name|indexed
argument_list|,
literal|"test"
argument_list|,
literal|"other"
argument_list|,
name|INDEX_DEFINITIONS_NAME
argument_list|,
literal|"index2"
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|reindexAndIndexDefnChildRemoval_OAK_2117
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeBuilder
name|nb
init|=
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"prop1"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
comment|// first check that the index content nodes exist
name|NodeState
name|ns
init|=
name|checkPathExists
argument_list|(
name|indexed
argument_list|,
name|INDEX_DEFINITIONS_NAME
argument_list|,
literal|"rootIndex"
argument_list|)
decl_stmt|;
comment|//Check index defn child node exist
name|checkPathExists
argument_list|(
name|ns
argument_list|,
literal|"prop1"
argument_list|)
expr_stmt|;
name|checkPathExists
argument_list|(
name|ns
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|)
expr_stmt|;
comment|// next, lookup
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"testRoot"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Async Reindex Test (OAK-2174)      *<ul>      *<li>Add some content</li>      *<li>Add an index definition with the reindex flag and the reindex-async flag set</li>      *<li>Run the background async job manually</li>      *<li>Search& verify</li>      *</ul>      */
annotation|@
name|Test
specifier|public
name|void
name|testReindexAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexEditorProvider
name|provider
init|=
operator|new
name|PropertyIndexEditorProvider
argument_list|()
decl_stmt|;
name|EditorHook
name|hook
init|=
operator|new
name|EditorHook
argument_list|(
operator|new
name|IndexUpdateProvider
argument_list|(
name|provider
argument_list|)
argument_list|)
decl_stmt|;
name|NodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setProperty
argument_list|(
name|REINDEX_ASYNC_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
comment|// merge it back in
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|hook
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// first check that the async flag exist
name|NodeState
name|ns1
init|=
name|checkPathExists
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
argument_list|,
name|INDEX_DEFINITIONS_NAME
argument_list|,
literal|"rootIndex"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ns1
operator|.
name|getProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ns1
operator|.
name|getProperty
argument_list|(
name|REINDEX_ASYNC_PROPERTY_NAME
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ASYNC_REINDEX_VALUE
argument_list|,
name|ns1
operator|.
name|getString
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
name|ASYNC_REINDEX_VALUE
argument_list|,
name|store
argument_list|,
name|provider
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|max
init|=
literal|5
decl_stmt|;
comment|// same behaviour as PropertyIndexAsyncReindex mbean
name|boolean
name|done
init|=
literal|false
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|done
operator|||
name|count
operator|>=
name|max
condition|)
block|{
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|done
operator|=
name|async
operator|.
name|isFinished
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
comment|// first check that the index content nodes exist
name|NodeState
name|ns
init|=
name|checkPathExists
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
argument_list|,
name|INDEX_DEFINITIONS_NAME
argument_list|,
literal|"rootIndex"
argument_list|)
decl_stmt|;
name|checkPathExists
argument_list|(
name|ns
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ns
operator|.
name|getProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ns
operator|.
name|getProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// next, lookup
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"testRoot"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * OAK-2203 Test reindex behavior on a sync index when the index provider is missing      * for a given type      */
annotation|@
name|Test
specifier|public
name|void
name|testReindexSyncMissingProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|EditorHook
name|hook
init|=
operator|new
name|EditorHook
argument_list|(
operator|new
name|IndexUpdateProvider
argument_list|(
name|emptyProvider
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|child
argument_list|(
literal|"azerty"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|NodeState
name|rootIndex
init|=
name|checkPathExists
argument_list|(
name|indexed
argument_list|,
name|INDEX_DEFINITIONS_NAME
argument_list|,
literal|"rootIndex"
argument_list|)
decl_stmt|;
name|PropertyState
name|ps
init|=
name|rootIndex
operator|.
name|getProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|azerty
init|=
name|checkPathExists
argument_list|(
name|indexed
argument_list|,
name|INDEX_DEFINITIONS_NAME
argument_list|,
literal|"azerty"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Node should be ignored by reindexer"
argument_list|,
name|azerty
operator|.
name|getProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * OAK-3505 Provide an optionally stricter policy for missing synchronous      * index editor providers      */
annotation|@
name|Test
specifier|public
name|void
name|testMissingProviderFailsCommit
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|IndexUpdateCallback
name|noop
init|=
operator|new
name|IndexUpdateCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|indexUpdate
parameter_list|()
block|{             }
block|}
decl_stmt|;
specifier|final
name|MissingIndexProviderStrategy
name|mips
init|=
operator|new
name|MissingIndexProviderStrategy
argument_list|()
decl_stmt|;
name|mips
operator|.
name|setFailOnMissingIndexProvider
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EditorHook
name|hook
init|=
operator|new
name|EditorHook
argument_list|(
operator|new
name|EditorProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Editor
name|getRootEditor
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
operator|new
name|IndexUpdate
argument_list|(
name|emptyProvider
argument_list|()
argument_list|,
literal|null
argument_list|,
name|after
argument_list|,
name|builder
argument_list|,
name|noop
argument_list|)
operator|.
name|withMissingProviderStrategy
argument_list|(
name|mips
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|child
argument_list|(
literal|"azerty"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
try|try
block|{
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"commit should fail on missing index provider"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReindexCount
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|long
name|t1
init|=
name|getReindexCount
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|NodeBuilder
name|b2
init|=
name|indexed
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b2
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|child
argument_list|(
literal|"rootIndex"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|indexed
operator|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|indexed
argument_list|,
name|b2
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|long
name|t2
init|=
name|getReindexCount
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|t2
operator|>
name|t1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|contextAwareCallback
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|CallbackCapturingProvider
name|provider
init|=
operator|new
name|CallbackCapturingProvider
argument_list|()
decl_stmt|;
name|EditorHook
name|hook
init|=
operator|new
name|EditorHook
argument_list|(
operator|new
name|IndexUpdateProvider
argument_list|(
name|provider
argument_list|)
argument_list|)
decl_stmt|;
name|CommitInfo
name|info
init|=
operator|new
name|CommitInfo
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|NodeState
name|indexed
init|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|provider
operator|.
name|callback
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|provider
operator|.
name|callback
argument_list|,
name|instanceOf
argument_list|(
name|ContextAwareCallback
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ContextAwareCallback
name|contextualCallback
init|=
operator|(
name|ContextAwareCallback
operator|)
name|provider
operator|.
name|callback
decl_stmt|;
name|IndexingContext
name|context
init|=
name|contextualCallback
operator|.
name|getIndexingContext
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/oak:index/rootIndex"
argument_list|,
name|context
operator|.
name|getIndexPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|context
operator|.
name|isReindexing
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|context
operator|.
name|isAsync
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|info
argument_list|,
name|context
operator|.
name|getCommitInfo
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|=
name|indexed
expr_stmt|;
name|builder
operator|=
name|indexed
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|after
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|ContextAwareCallback
operator|)
name|provider
operator|.
name|callback
operator|)
operator|.
name|getIndexingContext
argument_list|()
operator|.
name|isReindexing
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|contextAwareCallback_async
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeBuilder
name|idx
init|=
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
literal|"async"
argument_list|,
name|asList
argument_list|(
literal|"sync"
argument_list|,
literal|"async"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|CallbackCapturingProvider
name|provider
init|=
operator|new
name|CallbackCapturingProvider
argument_list|()
decl_stmt|;
name|EditorHook
name|hook
init|=
operator|new
name|EditorHook
argument_list|(
operator|new
name|IndexUpdateProvider
argument_list|(
name|provider
argument_list|,
literal|"async"
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|ContextAwareCallback
operator|)
name|provider
operator|.
name|callback
operator|)
operator|.
name|getIndexingContext
argument_list|()
operator|.
name|isAsync
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|CallbackCapturingProvider
extends|extends
name|PropertyIndexEditorProvider
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|IndexingContext
argument_list|>
name|callbacks
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|IndexUpdateCallback
name|callback
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Editor
name|getIndexEditor
parameter_list|(
annotation|@
name|Nonnull
name|String
name|type
parameter_list|,
annotation|@
name|Nonnull
name|NodeBuilder
name|definition
parameter_list|,
annotation|@
name|Nonnull
name|NodeState
name|root
parameter_list|,
annotation|@
name|Nonnull
name|IndexUpdateCallback
name|callback
parameter_list|)
block|{
name|Editor
name|editor
init|=
name|super
operator|.
name|getIndexEditor
argument_list|(
name|type
argument_list|,
name|definition
argument_list|,
name|root
argument_list|,
name|callback
argument_list|)
decl_stmt|;
if|if
condition|(
name|editor
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
if|if
condition|(
name|callback
operator|instanceof
name|ContextAwareCallback
condition|)
block|{
name|IndexingContext
name|context
init|=
operator|(
operator|(
name|ContextAwareCallback
operator|)
name|callback
operator|)
operator|.
name|getIndexingContext
argument_list|()
decl_stmt|;
name|callbacks
operator|.
name|put
argument_list|(
name|context
operator|.
name|getIndexPath
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|editor
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|callback
operator|=
literal|null
expr_stmt|;
name|callbacks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|IndexingContext
name|getContext
parameter_list|(
name|String
name|indexPath
parameter_list|)
block|{
return|return
name|callbacks
operator|.
name|get
argument_list|(
name|indexPath
argument_list|)
return|;
block|}
block|}
name|long
name|getReindexCount
parameter_list|(
name|NodeState
name|indexed
parameter_list|)
block|{
return|return
name|indexed
operator|.
name|getChildNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"rootIndex"
argument_list|)
operator|.
name|getProperty
argument_list|(
name|IndexConstants
operator|.
name|REINDEX_COUNT
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|IndexEditorProvider
name|emptyProvider
parameter_list|()
block|{
return|return
operator|new
name|IndexEditorProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Editor
name|getIndexEditor
parameter_list|(
annotation|@
name|Nonnull
name|String
name|type
parameter_list|,
annotation|@
name|Nonnull
name|NodeBuilder
name|definition
parameter_list|,
annotation|@
name|Nonnull
name|NodeState
name|root
parameter_list|,
annotation|@
name|Nonnull
name|IndexUpdateCallback
name|callback
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|find
parameter_list|(
name|PropertyIndexLookup
name|lookup
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|NodeTypeInfoProvider
name|nodeTypes
init|=
operator|new
name|NodeStateNodeTypeInfoProvider
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|NodeTypeInfo
name|type
init|=
name|nodeTypes
operator|.
name|getNodeTypeInfo
argument_list|(
name|NT_BASE
argument_list|)
decl_stmt|;
name|SelectorImpl
name|selector
init|=
operator|new
name|SelectorImpl
argument_list|(
name|type
argument_list|,
name|NT_BASE
argument_list|)
decl_stmt|;
name|Filter
name|filter
init|=
operator|new
name|FilterImpl
argument_list|(
name|selector
argument_list|,
literal|"SELECT * FROM [nt:base]"
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Sets
operator|.
name|newHashSet
argument_list|(
name|lookup
operator|.
name|query
argument_list|(
name|filter
argument_list|,
name|name
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|NodeState
name|checkPathExists
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|String
modifier|...
name|verify
parameter_list|)
block|{
name|NodeState
name|c
init|=
name|state
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|verify
control|)
block|{
name|c
operator|=
name|c
operator|.
name|getChildNode
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAsyncMVPDefinition
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|base
decl_stmt|;
comment|// async null
name|base
operator|=
name|EmptyNodeState
operator|.
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|IndexUpdate
operator|.
name|isIncluded
argument_list|(
literal|null
argument_list|,
name|base
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|IndexUpdate
operator|.
name|isIncluded
argument_list|(
literal|"async"
argument_list|,
name|base
argument_list|)
argument_list|)
expr_stmt|;
comment|// async single value
name|base
operator|=
name|EmptyNodeState
operator|.
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|IndexUpdate
operator|.
name|isIncluded
argument_list|(
literal|null
argument_list|,
name|base
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|IndexUpdate
operator|.
name|isIncluded
argument_list|(
literal|"async"
argument_list|,
name|base
argument_list|)
argument_list|)
expr_stmt|;
comment|// async multiple values: "" for sync
name|base
operator|=
name|EmptyNodeState
operator|.
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|INDEXING_MODE_NRT
argument_list|,
literal|"async"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|IndexUpdate
operator|.
name|isIncluded
argument_list|(
literal|null
argument_list|,
name|base
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|IndexUpdate
operator|.
name|isIncluded
argument_list|(
literal|"async"
argument_list|,
name|base
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|IndexUpdate
operator|.
name|isIncluded
argument_list|(
literal|"async-other"
argument_list|,
name|base
argument_list|)
argument_list|)
expr_stmt|;
comment|// async multiple values: "sync" for sync
name|base
operator|=
name|EmptyNodeState
operator|.
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"sync"
argument_list|,
literal|"async"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|IndexUpdate
operator|.
name|isIncluded
argument_list|(
literal|null
argument_list|,
name|base
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|IndexUpdate
operator|.
name|isIncluded
argument_list|(
literal|"async"
argument_list|,
name|base
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|IndexUpdate
operator|.
name|isIncluded
argument_list|(
literal|"async-other"
argument_list|,
name|base
argument_list|)
argument_list|)
expr_stmt|;
comment|// async multiple values: no sync present
name|base
operator|=
name|EmptyNodeState
operator|.
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"async"
argument_list|,
literal|"async-other"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|IndexUpdate
operator|.
name|isIncluded
argument_list|(
literal|null
argument_list|,
name|base
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|IndexUpdate
operator|.
name|isIncluded
argument_list|(
literal|"async"
argument_list|,
name|base
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|IndexUpdate
operator|.
name|isIncluded
argument_list|(
literal|"async-other"
argument_list|,
name|base
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|corruptIndexSkipped
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|CallbackCapturingProvider
name|provider
init|=
operator|new
name|CallbackCapturingProvider
argument_list|()
decl_stmt|;
name|EditorHook
name|hook
init|=
operator|new
name|EditorHook
argument_list|(
operator|new
name|IndexUpdateProvider
argument_list|(
name|provider
argument_list|)
argument_list|)
decl_stmt|;
comment|//1. Basic sanity - provider gets invoked
name|NodeState
name|indexed
init|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|String
name|indexPath
init|=
literal|"/oak:index/rootIndex"
decl_stmt|;
name|assertNotNull
argument_list|(
name|provider
operator|.
name|getContext
argument_list|(
name|indexPath
argument_list|)
argument_list|)
expr_stmt|;
comment|//2. Mark as corrupt and assert that editor is not invoked
name|builder
operator|=
name|indexed
operator|.
name|builder
argument_list|()
expr_stmt|;
name|before
operator|=
name|indexed
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|markCorrupt
argument_list|(
name|builder
argument_list|,
literal|"rootIndex"
argument_list|)
expr_stmt|;
name|after
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|provider
operator|.
name|reset
argument_list|()
expr_stmt|;
name|indexed
operator|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|provider
operator|.
name|getContext
argument_list|(
name|indexPath
argument_list|)
argument_list|)
expr_stmt|;
comment|//3. Now reindex and that should reset corrupt flag
name|builder
operator|=
name|indexed
operator|.
name|builder
argument_list|()
expr_stmt|;
name|before
operator|=
name|indexed
expr_stmt|;
name|child
argument_list|(
name|builder
argument_list|,
name|indexPath
argument_list|)
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|after
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|provider
operator|.
name|reset
argument_list|()
expr_stmt|;
name|indexed
operator|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|indexed
argument_list|,
name|indexPath
argument_list|)
operator|.
name|hasProperty
argument_list|(
name|IndexConstants
operator|.
name|CORRUPT_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|provider
operator|.
name|getContext
argument_list|(
name|indexPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ignoreReindexingFlag
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|indexPath
init|=
literal|"/oak:index/rootIndex"
decl_stmt|;
name|CallbackCapturingProvider
name|provider
init|=
operator|new
name|CallbackCapturingProvider
argument_list|()
decl_stmt|;
name|IndexUpdateProvider
name|indexUpdate
init|=
operator|new
name|IndexUpdateProvider
argument_list|(
name|provider
argument_list|)
decl_stmt|;
name|EditorHook
name|hook
init|=
operator|new
name|EditorHook
argument_list|(
name|indexUpdate
argument_list|)
decl_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|provider
operator|.
name|getContext
argument_list|(
name|indexPath
argument_list|)
operator|.
name|isReindexing
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|=
name|indexed
expr_stmt|;
name|builder
operator|=
name|before
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|)
expr_stmt|;
name|child
argument_list|(
name|builder
argument_list|,
name|indexPath
argument_list|)
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|after
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|provider
operator|.
name|reset
argument_list|()
expr_stmt|;
name|indexed
operator|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|provider
operator|.
name|getContext
argument_list|(
name|indexPath
argument_list|)
operator|.
name|isReindexing
argument_list|()
argument_list|)
expr_stmt|;
comment|//Now set IndexUpdate to ignore the reindex flag
name|indexUpdate
operator|.
name|setIgnoreReindexFlags
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|indexed
operator|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|provider
operator|.
name|getContext
argument_list|(
name|indexPath
argument_list|)
operator|.
name|isReindexing
argument_list|()
argument_list|)
expr_stmt|;
comment|//Despite reindex flag set to true and reindexing not done new
comment|//content should still get picked up
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldNotReindexAsyncIndexInSyncMode
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|indexPath
init|=
literal|"/oak:index/rootIndex"
decl_stmt|;
name|CallbackCapturingProvider
name|provider
init|=
operator|new
name|CallbackCapturingProvider
argument_list|()
decl_stmt|;
name|IndexUpdateProvider
name|indexUpdate
init|=
operator|new
name|IndexUpdateProvider
argument_list|(
name|provider
argument_list|)
decl_stmt|;
name|EditorHook
name|hook
init|=
operator|new
name|EditorHook
argument_list|(
name|indexUpdate
argument_list|)
decl_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeBuilder
name|idx
init|=
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
literal|"async"
argument_list|,
name|asList
argument_list|(
literal|"async"
argument_list|,
literal|"sync"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|provider
operator|.
name|getContext
argument_list|(
name|indexPath
argument_list|)
operator|.
name|isReindexing
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexUpdateToleratesMalignCommitProgressCallback
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|IndexUpdateCallback
name|noop
init|=
operator|new
name|IndexUpdateCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|indexUpdate
parameter_list|()
block|{             }
block|}
decl_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|CallbackCapturingProvider
name|provider
init|=
operator|new
name|CallbackCapturingProvider
argument_list|()
decl_stmt|;
name|IndexUpdate
name|indexUpdate
init|=
operator|new
name|IndexUpdate
argument_list|(
name|provider
argument_list|,
literal|null
argument_list|,
name|after
argument_list|,
name|builder
argument_list|,
name|noop
argument_list|)
decl_stmt|;
name|indexUpdate
operator|.
name|enter
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|ContextAwareCallback
name|contextualCallback
init|=
operator|(
name|ContextAwareCallback
operator|)
name|provider
operator|.
name|callback
decl_stmt|;
name|IndexingContext
name|context
init|=
name|contextualCallback
operator|.
name|getIndexingContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|registerIndexCommitCallback
argument_list|(
operator|new
name|IndexCommitCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|commitProgress
parameter_list|(
name|IndexProgress
name|indexProgress
parameter_list|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Malign callback"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|indexUpdate
operator|.
name|commitProgress
argument_list|(
name|IndexCommitCallback
operator|.
name|IndexProgress
operator|.
name|COMMIT_SUCCEDED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|commitProgressCallback
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|IndexUpdateCallback
name|noop
init|=
operator|new
name|IndexUpdateCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|indexUpdate
parameter_list|()
block|{             }
block|}
decl_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|CallbackCapturingProvider
name|provider
init|=
operator|new
name|CallbackCapturingProvider
argument_list|()
decl_stmt|;
name|IndexUpdate
name|indexUpdate
init|=
operator|new
name|IndexUpdate
argument_list|(
name|provider
argument_list|,
literal|null
argument_list|,
name|after
argument_list|,
name|builder
argument_list|,
name|noop
argument_list|)
decl_stmt|;
name|indexUpdate
operator|.
name|enter
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|ContextAwareCallback
name|contextualCallback
init|=
operator|(
name|ContextAwareCallback
operator|)
name|provider
operator|.
name|callback
decl_stmt|;
name|IndexingContext
name|context
init|=
name|contextualCallback
operator|.
name|getIndexingContext
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|numCallbacks
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|IndexCommitCallback
name|callback1
init|=
operator|new
name|IndexCommitCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|commitProgress
parameter_list|(
name|IndexProgress
name|indexProgress
parameter_list|)
block|{
name|numCallbacks
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|IndexCommitCallback
name|callback2
init|=
operator|new
name|IndexCommitCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|commitProgress
parameter_list|(
name|IndexProgress
name|indexProgress
parameter_list|)
block|{
name|numCallbacks
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|context
operator|.
name|registerIndexCommitCallback
argument_list|(
name|callback1
argument_list|)
expr_stmt|;
name|context
operator|.
name|registerIndexCommitCallback
argument_list|(
name|callback2
argument_list|)
expr_stmt|;
name|context
operator|.
name|registerIndexCommitCallback
argument_list|(
name|callback1
argument_list|)
expr_stmt|;
comment|//intentionally adding same one twice
for|for
control|(
name|IndexCommitCallback
operator|.
name|IndexProgress
name|progress
range|:
name|IndexCommitCallback
operator|.
name|IndexProgress
operator|.
name|values
argument_list|()
control|)
block|{
name|numCallbacks
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|indexUpdate
operator|.
name|commitProgress
argument_list|(
name|IndexCommitCallback
operator|.
name|IndexProgress
operator|.
name|COMMIT_SUCCEDED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Either not all callbacks are called OR same callback got called twice for "
operator|+
name|progress
argument_list|,
literal|2
argument_list|,
name|numCallbacks
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|markCorrupt
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|indexName
parameter_list|)
block|{
name|builder
operator|.
name|getChildNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|indexName
argument_list|)
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|CORRUPT_PROPERTY_NAME
argument_list|,
name|ISO8601
operator|.
name|format
argument_list|(
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|NodeBuilder
name|child
parameter_list|(
name|NodeBuilder
name|nb
parameter_list|,
name|String
name|path
parameter_list|)
block|{
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|checkNotNull
argument_list|(
name|path
argument_list|)
argument_list|)
control|)
block|{
name|nb
operator|=
name|nb
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|nb
return|;
block|}
block|}
end_class

end_unit

