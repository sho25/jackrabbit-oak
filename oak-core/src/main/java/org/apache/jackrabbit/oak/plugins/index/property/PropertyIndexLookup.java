begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|PropertyValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * Is responsible for querying the property index content.  *   *<p>  * This class can be used directly on a subtree where there is an index defined  * by supplying a {@link NodeState} root.  *</p>  *   *<pre>  *<code>  * {  *     NodeState state = ... // get a node state  *     PropertyIndexLookup lookup = new PropertyIndexLookup(state);  *     Set<String> hits = lookup.find("foo", PropertyValues.newString("xyz"));  * }  *</code>  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|PropertyIndexLookup
block|{
specifier|private
specifier|final
name|NodeState
name|root
decl_stmt|;
specifier|public
name|PropertyIndexLookup
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
block|}
comment|/**      * Checks whether the named property is indexed somewhere along the given      * path. Lookup starts at the current path (at the root of this object) and      * traverses down the path.      *       * @param name property name      * @param path lookup path      * @return true if the property is indexed      */
specifier|public
name|boolean
name|isIndexed
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|getIndexDefinitionNode
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// TODO use PathUtils
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|int
name|slash
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|slash
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|NodeState
name|child
init|=
name|root
operator|.
name|getChildNode
argument_list|(
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|slash
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|PropertyIndexLookup
argument_list|(
name|child
argument_list|)
operator|.
name|isIndexed
argument_list|(
name|name
argument_list|,
name|path
operator|.
name|substring
argument_list|(
name|slash
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Searches for a given<code>String<code> value within this index.      *       *<p><b>Note</b> if the property you are looking for is not of type<code>String<code>,       * the converted key value might not match the index key, and there will be no hits on the index.</p>      *       * @param name the property name      * @param value the property value      * @return the set of matched paths      */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|find
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|find
argument_list|(
name|name
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Searches for a given value within this index.      *       * @param name the property name      * @param value the property value      * @return the set of matched paths      */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|find
parameter_list|(
name|String
name|name
parameter_list|,
name|PropertyValue
name|value
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|PropertyState
name|property
decl_stmt|;
name|NodeState
name|state
init|=
name|getIndexDefinitionNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
operator|&&
name|state
operator|.
name|getChildNode
argument_list|(
literal|":index"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|state
operator|=
name|state
operator|.
name|getChildNode
argument_list|(
literal|":index"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|p
range|:
name|PropertyIndex
operator|.
name|encode
argument_list|(
name|value
argument_list|)
control|)
block|{
name|property
operator|=
name|state
operator|.
name|getProperty
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
comment|// We have an entry for this value, so use it
for|for
control|(
name|String
name|path
range|:
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
control|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// No index available, so first check this node for a match
name|property
operator|=
name|root
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|isArray
argument_list|()
condition|)
block|{
comment|// let query engine handle multi-valued look ups
comment|// simply return all nodes that have this property
name|paths
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// does it match any of the values of this property?
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|property
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|property
operator|.
name|getValue
argument_list|(
name|value
operator|.
name|getType
argument_list|()
argument_list|,
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|value
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|// no need to check for more matches in this property
break|break;
block|}
block|}
block|}
block|}
comment|// ... and then recursively look up from the rest of the tree
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|root
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|String
name|base
init|=
name|entry
operator|.
name|getName
argument_list|()
decl_stmt|;
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|entry
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|lookup
operator|.
name|find
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
control|)
block|{
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|base
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|paths
operator|.
name|add
argument_list|(
name|base
operator|+
literal|"/"
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|paths
return|;
block|}
specifier|public
name|double
name|getCost
parameter_list|(
name|String
name|name
parameter_list|,
name|PropertyValue
name|value
parameter_list|)
block|{
name|double
name|cost
init|=
literal|0.0
decl_stmt|;
name|NodeState
name|state
init|=
name|getIndexDefinitionNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
operator|&&
name|state
operator|.
name|getChildNode
argument_list|(
literal|":index"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|state
operator|=
name|state
operator|.
name|getChildNode
argument_list|(
literal|":index"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|p
range|:
name|PropertyIndex
operator|.
name|encode
argument_list|(
name|value
argument_list|)
control|)
block|{
name|PropertyState
name|property
init|=
name|state
operator|.
name|getProperty
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|cost
operator|+=
name|property
operator|.
name|count
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|cost
operator|=
name|Double
operator|.
name|POSITIVE_INFINITY
expr_stmt|;
block|}
return|return
name|cost
return|;
block|}
comment|/**      * Get the node with the index definition node for the given property.      *       * @param name the property name      * @return the node where the index definition is stored, or null if no      *         index definition node was found      */
annotation|@
name|Nullable
specifier|private
name|NodeState
name|getIndexDefinitionNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|NodeState
name|state
init|=
name|root
operator|.
name|getChildNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|state
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|PropertyState
name|type
init|=
name|entry
operator|.
name|getNodeState
argument_list|()
operator|.
name|getProperty
argument_list|(
name|IndexConstants
operator|.
name|TYPE_PROPERTY_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|||
name|type
operator|.
name|isArray
argument_list|()
operator|||
operator|!
name|PropertyIndex
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|PropertyState
name|names
init|=
name|entry
operator|.
name|getNodeState
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"propertyNames"
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|names
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|entry
operator|.
name|getNodeState
argument_list|()
return|;
block|}
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

