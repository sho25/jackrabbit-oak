begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|json
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|json
operator|.
name|DefaultJsopHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|json
operator|.
name|JsopParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|JsopParserTest
block|{
specifier|private
specifier|static
class|class
name|CountingHandler
extends|extends
name|DefaultJsopHandler
block|{
specifier|private
specifier|static
class|class
name|Node
block|{
specifier|private
specifier|final
name|String
name|jsop
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
name|Node
parameter_list|(
name|String
name|jsop
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|jsop
operator|=
name|jsop
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Node
name|other
init|=
operator|(
name|Node
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|jsop
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|jsop
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|this
operator|.
name|jsop
operator|.
name|equals
argument_list|(
name|other
operator|.
name|jsop
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|path
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|path
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|this
operator|.
name|path
operator|.
name|equals
argument_list|(
name|other
operator|.
name|path
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
operator|(
operator|(
name|this
operator|.
name|jsop
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|jsop
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
operator|(
operator|(
name|this
operator|.
name|path
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|path
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|NodeMoved
block|{
specifier|private
specifier|final
name|String
name|newPath
decl_stmt|;
specifier|private
specifier|final
name|String
name|oldPath
decl_stmt|;
specifier|private
specifier|final
name|String
name|rootPath
decl_stmt|;
name|NodeMoved
parameter_list|(
name|String
name|rootPath
parameter_list|,
name|String
name|oldPath
parameter_list|,
name|String
name|newPath
parameter_list|)
block|{
name|this
operator|.
name|rootPath
operator|=
name|rootPath
expr_stmt|;
name|this
operator|.
name|oldPath
operator|=
name|oldPath
expr_stmt|;
name|this
operator|.
name|newPath
operator|=
name|newPath
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|NodeMoved
name|other
init|=
operator|(
name|NodeMoved
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|newPath
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|newPath
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|this
operator|.
name|newPath
operator|.
name|equals
argument_list|(
name|other
operator|.
name|newPath
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|oldPath
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|oldPath
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|this
operator|.
name|oldPath
operator|.
name|equals
argument_list|(
name|other
operator|.
name|oldPath
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|rootPath
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|rootPath
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|this
operator|.
name|rootPath
operator|.
name|equals
argument_list|(
name|other
operator|.
name|rootPath
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
operator|(
operator|(
name|this
operator|.
name|newPath
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|newPath
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
operator|(
operator|(
name|this
operator|.
name|oldPath
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|oldPath
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
operator|(
operator|(
name|this
operator|.
name|rootPath
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|rootPath
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|Property
block|{
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|Object
name|value
decl_stmt|;
name|Property
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Property
name|other
init|=
operator|(
name|Property
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|key
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|key
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|this
operator|.
name|key
operator|.
name|equals
argument_list|(
name|other
operator|.
name|key
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|path
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|path
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|this
operator|.
name|path
operator|.
name|equals
argument_list|(
name|other
operator|.
name|path
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|value
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|value
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|value
operator|instanceof
name|Object
index|[]
condition|)
block|{
return|return
name|Arrays
operator|.
name|deepEquals
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|this
operator|.
name|value
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|other
operator|.
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|this
operator|.
name|value
operator|.
name|equals
argument_list|(
name|other
operator|.
name|value
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
operator|(
operator|(
name|this
operator|.
name|key
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|key
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
operator|(
operator|(
name|this
operator|.
name|path
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|path
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
operator|(
operator|(
name|this
operator|.
name|value
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|value
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|final
name|List
argument_list|<
name|Node
argument_list|>
name|nodesAdded
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|NodeMoved
argument_list|>
name|nodesCopied
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|NodeMoved
argument_list|>
name|nodesMoved
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Node
argument_list|>
name|nodesRemoved
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Property
argument_list|>
name|propertiesSet
decl_stmt|;
name|CountingHandler
parameter_list|()
block|{
name|this
operator|.
name|nodesAdded
operator|=
operator|new
name|LinkedList
argument_list|<
name|Node
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodesCopied
operator|=
operator|new
name|LinkedList
argument_list|<
name|NodeMoved
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodesMoved
operator|=
operator|new
name|LinkedList
argument_list|<
name|NodeMoved
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodesRemoved
operator|=
operator|new
name|LinkedList
argument_list|<
name|Node
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|propertiesSet
operator|=
operator|new
name|LinkedList
argument_list|<
name|Property
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|assertNodeCopied
parameter_list|(
name|String
name|parentPath
parameter_list|,
name|String
name|oldPath
parameter_list|,
name|String
name|newPath
parameter_list|)
block|{
name|NodeMoved
name|expected
init|=
operator|new
name|NodeMoved
argument_list|(
name|parentPath
argument_list|,
name|oldPath
argument_list|,
name|newPath
argument_list|)
decl_stmt|;
name|int
name|firstIndex
init|=
name|this
operator|.
name|nodesCopied
operator|.
name|indexOf
argument_list|(
name|expected
argument_list|)
decl_stmt|;
name|int
name|lastIndex
init|=
name|this
operator|.
name|nodesCopied
operator|.
name|lastIndexOf
argument_list|(
name|expected
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|firstIndex
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|firstIndex
argument_list|,
name|lastIndex
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertNodeMoved
parameter_list|(
name|String
name|parentPath
parameter_list|,
name|String
name|oldPath
parameter_list|,
name|String
name|newPath
parameter_list|)
block|{
name|NodeMoved
name|expected
init|=
operator|new
name|NodeMoved
argument_list|(
name|parentPath
argument_list|,
name|oldPath
argument_list|,
name|newPath
argument_list|)
decl_stmt|;
name|int
name|firstIndex
init|=
name|this
operator|.
name|nodesMoved
operator|.
name|indexOf
argument_list|(
name|expected
argument_list|)
decl_stmt|;
name|int
name|lastIndex
init|=
name|this
operator|.
name|nodesMoved
operator|.
name|lastIndexOf
argument_list|(
name|expected
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|firstIndex
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|firstIndex
argument_list|,
name|lastIndex
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertNodeRemoved
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Node
name|expected
init|=
operator|new
name|Node
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|int
name|firstIndex
init|=
name|this
operator|.
name|nodesRemoved
operator|.
name|indexOf
argument_list|(
name|expected
argument_list|)
decl_stmt|;
name|int
name|lastIndex
init|=
name|this
operator|.
name|nodesRemoved
operator|.
name|lastIndexOf
argument_list|(
name|expected
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|firstIndex
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|firstIndex
argument_list|,
name|lastIndex
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertNoOfNodesCopied
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|num
argument_list|,
name|this
operator|.
name|nodesCopied
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertNoOfNodesMoved
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|num
argument_list|,
name|this
operator|.
name|nodesMoved
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertNoOfNodesRemoved
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|num
argument_list|,
name|this
operator|.
name|nodesRemoved
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertNoOfPropertiesSet
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|num
argument_list|,
name|this
operator|.
name|propertiesSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeAdded
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|nodesAdded
operator|.
name|add
argument_list|(
operator|new
name|Node
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeCopied
parameter_list|(
name|String
name|rootPath
parameter_list|,
name|String
name|oldPath
parameter_list|,
name|String
name|newPath
parameter_list|)
block|{
name|this
operator|.
name|nodesCopied
operator|.
name|add
argument_list|(
operator|new
name|NodeMoved
argument_list|(
name|rootPath
argument_list|,
name|oldPath
argument_list|,
name|newPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeMoved
parameter_list|(
name|String
name|rootPath
parameter_list|,
name|String
name|oldPath
parameter_list|,
name|String
name|newPath
parameter_list|)
block|{
name|this
operator|.
name|nodesMoved
operator|.
name|add
argument_list|(
operator|new
name|NodeMoved
argument_list|(
name|rootPath
argument_list|,
name|oldPath
argument_list|,
name|newPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeRemoved
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|nodesRemoved
operator|.
name|add
argument_list|(
operator|new
name|Node
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertySet
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|propertiesSet
operator|.
name|add
argument_list|(
operator|new
name|Property
argument_list|(
name|path
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|assertNodeAdded
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Node
name|expected
init|=
operator|new
name|Node
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|int
name|firstIndex
init|=
name|this
operator|.
name|nodesAdded
operator|.
name|indexOf
argument_list|(
name|expected
argument_list|)
decl_stmt|;
name|int
name|lastIndex
init|=
name|this
operator|.
name|nodesAdded
operator|.
name|lastIndexOf
argument_list|(
name|expected
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|firstIndex
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|firstIndex
argument_list|,
name|lastIndex
argument_list|)
expr_stmt|;
block|}
name|void
name|assertPropertySet
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|Property
name|expected
init|=
operator|new
name|Property
argument_list|(
name|path
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|int
name|firstIndex
init|=
name|this
operator|.
name|propertiesSet
operator|.
name|indexOf
argument_list|(
name|expected
argument_list|)
decl_stmt|;
name|int
name|lastIndex
init|=
name|this
operator|.
name|propertiesSet
operator|.
name|lastIndexOf
argument_list|(
name|expected
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|firstIndex
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|firstIndex
argument_list|,
name|lastIndex
argument_list|)
expr_stmt|;
block|}
name|void
name|assetNoOfNodesAdded
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|num
argument_list|,
name|this
operator|.
name|nodesAdded
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddNestedNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|rootPath
init|=
literal|"/"
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"+\"a\" : { \"integer\" : 123 ,\"b\" : { \"double\" : 123.456 , \"d\" : {} } , \"c\" : { \"string\" : \"string\" }}"
argument_list|)
expr_stmt|;
name|CountingHandler
name|countingHandler
init|=
operator|new
name|CountingHandler
argument_list|()
decl_stmt|;
name|JsopParser
name|jsopParser
init|=
operator|new
name|JsopParser
argument_list|(
name|rootPath
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|countingHandler
argument_list|)
decl_stmt|;
name|jsopParser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|countingHandler
operator|.
name|assetNoOfNodesAdded
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertNodeAdded
argument_list|(
literal|"/"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertNodeAdded
argument_list|(
literal|"/a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertNodeAdded
argument_list|(
literal|"/a/b"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertNodeAdded
argument_list|(
literal|"/a"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertNoOfPropertiesSet
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertPropertySet
argument_list|(
literal|"/a"
argument_list|,
literal|"integer"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertPropertySet
argument_list|(
literal|"/a/b"
argument_list|,
literal|"double"
argument_list|,
literal|123.456
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertPropertySet
argument_list|(
literal|"/a/c"
argument_list|,
literal|"string"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddNodesAndProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|rootPath
init|=
literal|"/"
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"+\"a\" : { \"int\" : 1 } \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"+\"a/b\" : { \"string\" : \"foo\" } \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"+\"a/c\" : { \"bool\" : true }"
argument_list|)
expr_stmt|;
name|CountingHandler
name|countingHandler
init|=
operator|new
name|CountingHandler
argument_list|()
decl_stmt|;
name|JsopParser
name|jsopParser
init|=
operator|new
name|JsopParser
argument_list|(
name|rootPath
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|countingHandler
argument_list|)
decl_stmt|;
name|jsopParser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|countingHandler
operator|.
name|assetNoOfNodesAdded
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertNodeAdded
argument_list|(
literal|"/"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertNodeAdded
argument_list|(
literal|"/a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertNodeAdded
argument_list|(
literal|"/a"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertNoOfPropertiesSet
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertPropertySet
argument_list|(
literal|"/a"
argument_list|,
literal|"int"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertPropertySet
argument_list|(
literal|"/a/b"
argument_list|,
literal|"string"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertPropertySet
argument_list|(
literal|"/a/c"
argument_list|,
literal|"bool"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddNodesAndPropertiesSeparately
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|rootPath
init|=
literal|"/"
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"+\"a\" : {} \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"+\"a\" : { \"int\" : 1 } \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"+\"a/b\" : {} \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"+\"a/b\" : { \"string\" : \"foo\" } \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"+\"a/c\" : {} \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"+\"a/c\" : { \"bool\" : true }"
argument_list|)
expr_stmt|;
name|CountingHandler
name|countingHandler
init|=
operator|new
name|CountingHandler
argument_list|()
decl_stmt|;
name|JsopParser
name|jsopParser
init|=
operator|new
name|JsopParser
argument_list|(
name|rootPath
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|countingHandler
argument_list|)
decl_stmt|;
name|jsopParser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|countingHandler
operator|.
name|assetNoOfNodesAdded
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertNoOfPropertiesSet
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertPropertySet
argument_list|(
literal|"/a"
argument_list|,
literal|"int"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertPropertySet
argument_list|(
literal|"/a/b"
argument_list|,
literal|"string"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertPropertySet
argument_list|(
literal|"/a/c"
argument_list|,
literal|"bool"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPropertiesWithComplexArray
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|rootPath
init|=
literal|"/"
decl_stmt|;
name|String
name|jsop
init|=
literal|"+ \"a\" : { \"array_complex\" : [ 123, 123.456, true, false, null, \"string\", [1,2,3,4,5] ] }"
decl_stmt|;
name|CountingHandler
name|countingHandler
init|=
operator|new
name|CountingHandler
argument_list|()
decl_stmt|;
name|JsopParser
name|jsopParser
init|=
operator|new
name|JsopParser
argument_list|(
name|rootPath
argument_list|,
name|jsop
argument_list|,
name|countingHandler
argument_list|)
decl_stmt|;
name|jsopParser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|countingHandler
operator|.
name|assertNoOfPropertiesSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertPropertySet
argument_list|(
literal|"/a"
argument_list|,
literal|"array_complex"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|123
block|,
literal|123.456
block|,
literal|true
block|,
literal|false
block|,
literal|null
block|,
literal|"string"
block|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|}
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddWithEmptyPath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|rootPath
init|=
literal|""
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"+\"/\" : { \"int\" : 1 } \n"
argument_list|)
expr_stmt|;
name|CountingHandler
name|countingHandler
init|=
operator|new
name|CountingHandler
argument_list|()
decl_stmt|;
name|JsopParser
name|jsopParser
init|=
operator|new
name|JsopParser
argument_list|(
name|rootPath
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|countingHandler
argument_list|)
decl_stmt|;
name|jsopParser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|countingHandler
operator|.
name|assetNoOfNodesAdded
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertNodeAdded
argument_list|(
literal|""
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertNoOfPropertiesSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertPropertySet
argument_list|(
literal|"/"
argument_list|,
literal|"int"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleAddNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|rootPath
init|=
literal|"/"
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"+\"a\" : {} \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"+\"a/b\" : {} \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"+\"a/c\" : {}"
argument_list|)
expr_stmt|;
name|CountingHandler
name|countingHandler
init|=
operator|new
name|CountingHandler
argument_list|()
decl_stmt|;
name|JsopParser
name|jsopParser
init|=
operator|new
name|JsopParser
argument_list|(
name|rootPath
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|countingHandler
argument_list|)
decl_stmt|;
name|jsopParser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|countingHandler
operator|.
name|assetNoOfNodesAdded
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertNodeAdded
argument_list|(
literal|"/"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertNodeAdded
argument_list|(
literal|"/a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertNodeAdded
argument_list|(
literal|"/a"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleAddProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|rootPath
init|=
literal|"/"
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"+ \"a\" : {}"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"+ \"a\" : { \"integer\" : 123, \"double\" : 123.456, \"true\" : true, \"false\" : false, \"null\" : null, \"string\" : \"string\", \"array\" : [1,2,3,4,5] }"
argument_list|)
expr_stmt|;
name|CountingHandler
name|countingHandler
init|=
operator|new
name|CountingHandler
argument_list|()
decl_stmt|;
name|JsopParser
name|jsopParser
init|=
operator|new
name|JsopParser
argument_list|(
name|rootPath
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|countingHandler
argument_list|)
decl_stmt|;
name|jsopParser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|countingHandler
operator|.
name|assertNoOfPropertiesSet
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertPropertySet
argument_list|(
literal|"/a"
argument_list|,
literal|"integer"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertPropertySet
argument_list|(
literal|"/a"
argument_list|,
literal|"double"
argument_list|,
literal|123.456
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertPropertySet
argument_list|(
literal|"/a"
argument_list|,
literal|"true"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertPropertySet
argument_list|(
literal|"/a"
argument_list|,
literal|"false"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertPropertySet
argument_list|(
literal|"/a"
argument_list|,
literal|"null"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertPropertySet
argument_list|(
literal|"/a"
argument_list|,
literal|"string"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertPropertySet
argument_list|(
literal|"/a"
argument_list|,
literal|"array"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleCopyNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|rootPath
init|=
literal|"/"
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"*\"a\" : \"b\"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"*\"a/b\" : \"a/c\"\n"
argument_list|)
expr_stmt|;
name|CountingHandler
name|countingHandler
init|=
operator|new
name|CountingHandler
argument_list|()
decl_stmt|;
name|JsopParser
name|jsopParser
init|=
operator|new
name|JsopParser
argument_list|(
name|rootPath
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|countingHandler
argument_list|)
decl_stmt|;
name|jsopParser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|countingHandler
operator|.
name|assertNoOfNodesCopied
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertNodeCopied
argument_list|(
literal|"/"
argument_list|,
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertNodeCopied
argument_list|(
literal|"/"
argument_list|,
literal|"/a/b"
argument_list|,
literal|"/a/c"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleMoveNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|rootPath
init|=
literal|"/"
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|">\"a\" : \"b\"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|">\"a/b\" : \"a/c\"\n"
argument_list|)
expr_stmt|;
name|CountingHandler
name|countingHandler
init|=
operator|new
name|CountingHandler
argument_list|()
decl_stmt|;
name|JsopParser
name|jsopParser
init|=
operator|new
name|JsopParser
argument_list|(
name|rootPath
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|countingHandler
argument_list|)
decl_stmt|;
name|jsopParser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|countingHandler
operator|.
name|assertNoOfNodesMoved
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertNodeMoved
argument_list|(
literal|"/"
argument_list|,
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertNodeMoved
argument_list|(
literal|"/"
argument_list|,
literal|"/a/b"
argument_list|,
literal|"/a/c"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleRemoveNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|rootPath
init|=
literal|"/"
decl_stmt|;
name|String
name|jsop
init|=
literal|"-\"a\""
decl_stmt|;
name|CountingHandler
name|countingHandler
init|=
operator|new
name|CountingHandler
argument_list|()
decl_stmt|;
name|JsopParser
name|jsopParser
init|=
operator|new
name|JsopParser
argument_list|(
name|rootPath
argument_list|,
name|jsop
argument_list|,
name|countingHandler
argument_list|)
decl_stmt|;
name|jsopParser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|countingHandler
operator|.
name|assertNoOfNodesRemoved
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertNodeRemoved
argument_list|(
literal|"/"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleSetNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|rootPath
init|=
literal|"/"
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"^\"a\" : \"b\""
argument_list|)
expr_stmt|;
name|CountingHandler
name|countingHandler
init|=
operator|new
name|CountingHandler
argument_list|()
decl_stmt|;
name|JsopParser
name|jsopParser
init|=
operator|new
name|JsopParser
argument_list|(
name|rootPath
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|countingHandler
argument_list|)
decl_stmt|;
name|jsopParser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|countingHandler
operator|.
name|assertNoOfPropertiesSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|countingHandler
operator|.
name|assertPropertySet
argument_list|(
literal|"/"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

