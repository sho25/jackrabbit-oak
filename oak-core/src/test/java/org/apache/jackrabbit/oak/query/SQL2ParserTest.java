begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SYSTEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_NODE_TYPES
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|SQL2ParserTest
block|{
specifier|private
specifier|final
name|NodeState
name|types
init|=
operator|new
name|InitialContent
argument_list|()
operator|.
name|initialize
argument_list|(
name|EMPTY_NODE
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|JCR_SYSTEM
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|JCR_NODE_TYPES
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SQL2Parser
name|p
init|=
operator|new
name|SQL2Parser
argument_list|(
name|types
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testIgnoreSqlComment
parameter_list|()
throws|throws
name|ParseException
block|{
name|p
operator|.
name|parse
argument_list|(
literal|"select * from [nt:unstructured] /* sql comment */"
argument_list|)
expr_stmt|;
name|p
operator|.
name|parse
argument_list|(
literal|"select [jcr:path], [jcr:score], * from [nt:base] as a /* xpath: //* */"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ParseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testUnfinishedSqlComment
parameter_list|()
throws|throws
name|ParseException
block|{
name|p
operator|.
name|parse
argument_list|(
literal|"select [jcr:path], [jcr:score], * from [nt:base] as a /* xpath: //* "
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

