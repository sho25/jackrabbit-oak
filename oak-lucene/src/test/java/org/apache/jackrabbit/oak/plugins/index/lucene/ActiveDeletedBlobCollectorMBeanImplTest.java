begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|IndexStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMKBuilderProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexPathService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexPathServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|ActiveDeletedBlobCollectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|ActiveDeletedBlobCollectorFactory
operator|.
name|ActiveDeletedBlobCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|ActiveDeletedBlobCollectorFactory
operator|.
name|BlobDeletionCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|IndexConsistencyChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|nodetype
operator|.
name|NodeTypeIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|MemoryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|testing
operator|.
name|mock
operator|.
name|osgi
operator|.
name|junit
operator|.
name|OsgiContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|sameThreadExecutor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|IndexStatsMBean
operator|.
name|STATUS_DONE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|IndexStatsMBean
operator|.
name|STATUS_RUNNING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexCommitCallback
operator|.
name|IndexProgress
operator|.
name|COMMIT_SUCCEDED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|TYPE_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|TYPE_LUCENE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|OakDirectory
operator|.
name|PROP_UNSAFE_FOR_ACTIVE_DELETION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|ActiveDeletedBlobCollectorMBeanImplTest
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|OsgiContext
name|context
init|=
operator|new
name|OsgiContext
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|DocumentMKBuilderProvider
name|builderProvider
init|=
operator|new
name|DocumentMKBuilderProvider
argument_list|()
decl_stmt|;
specifier|private
name|Whiteboard
name|wb
decl_stmt|;
specifier|private
name|NodeStore
name|nodeStore
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|indexPaths
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Clock
name|clock
init|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|wb
operator|=
operator|new
name|OsgiWhiteboard
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|)
expr_stmt|;
name|nodeStore
operator|=
operator|new
name|MemoryNodeStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
block|{
name|indexPaths
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ActiveDeletedBlobCollectorFactory
operator|.
name|NOOP
operator|.
name|flagActiveDeletionUnsafe
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|onlyRunningIndexesRequireToBeWaitedOn
parameter_list|()
block|{
name|IndexPathService
name|indexPathService
init|=
name|MockRegistrar
operator|.
name|getIndexPathsService
argument_list|(
name|indexPaths
argument_list|)
decl_stmt|;
specifier|final
name|StatusSupplier
name|statusSupplier
init|=
operator|new
name|StatusSupplier
argument_list|()
decl_stmt|;
specifier|final
name|AtomicLong
name|returnExecCount
init|=
operator|new
name|AtomicLong
argument_list|(
literal|2L
argument_list|)
decl_stmt|;
name|AsyncIndexInfoService
name|asyncIndexInfoService
init|=
name|MockRegistrar
operator|.
name|getAsyncIndexInfoService
argument_list|(
name|newArrayList
argument_list|(
operator|new
name|IndexMBeanInfoSupplier
argument_list|(
literal|"foo-async"
argument_list|,
name|statusSupplier
argument_list|,
name|returnExecCount
operator|::
name|get
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ActiveDeletedBlobCollectorMBean
name|bean
init|=
name|getTestBean
argument_list|(
name|indexPathService
argument_list|,
name|asyncIndexInfoService
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|bean
operator|.
name|flagActiveDeletionUnsafeForCurrentState
argument_list|()
expr_stmt|;
name|long
name|elapsed
init|=
name|clock
operator|.
name|getTime
argument_list|()
operator|-
name|start
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Non running index lane was polled for "
operator|+
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|elapsed
argument_list|)
operator|+
literal|" seconds."
argument_list|,
name|elapsed
operator|<
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|// running index with stalled exec count waits for 2 minutes
name|statusSupplier
operator|.
name|status
operator|=
name|STATUS_RUNNING
expr_stmt|;
name|start
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|bean
operator|.
name|flagActiveDeletionUnsafeForCurrentState
argument_list|()
expr_stmt|;
name|elapsed
operator|=
name|clock
operator|.
name|getTime
argument_list|()
operator|-
name|start
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Running index lane without changing execCnt was polled for "
operator|+
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|elapsed
argument_list|)
operator|+
literal|" seconds."
argument_list|,
name|elapsed
operator|>
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|120
argument_list|)
operator|&&
name|elapsed
operator|<
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|125
argument_list|)
argument_list|)
expr_stmt|;
comment|// running index with not stalled exec count doesn't wait
name|statusSupplier
operator|.
name|status
operator|=
name|STATUS_RUNNING
expr_stmt|;
name|asyncIndexInfoService
operator|=
name|MockRegistrar
operator|.
name|getAsyncIndexInfoService
argument_list|(
name|newArrayList
argument_list|(
operator|new
name|IndexMBeanInfoSupplier
argument_list|(
literal|"foo-async"
argument_list|,
name|statusSupplier
argument_list|,
name|returnExecCount
operator|::
name|incrementAndGet
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bean
operator|=
name|getTestBean
argument_list|(
name|indexPathService
argument_list|,
name|asyncIndexInfoService
argument_list|)
expr_stmt|;
name|start
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|bean
operator|.
name|flagActiveDeletionUnsafeForCurrentState
argument_list|()
expr_stmt|;
name|elapsed
operator|=
name|clock
operator|.
name|getTime
argument_list|()
operator|-
name|start
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Running index lane without changing execCnt was polled for "
operator|+
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|elapsed
argument_list|)
operator|+
literal|" seconds."
argument_list|,
name|elapsed
operator|<
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|headIndexFilesGetMarkedUnsafe
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|indexPath
init|=
literal|"/fooIndex"
decl_stmt|;
name|createFakeIndex
argument_list|(
name|indexPath
argument_list|)
expr_stmt|;
name|IndexPathService
name|indexPathService
init|=
name|MockRegistrar
operator|.
name|getIndexPathsService
argument_list|(
name|indexPaths
argument_list|)
decl_stmt|;
name|AsyncIndexInfoService
name|asyncIndexInfoService
init|=
name|MockRegistrar
operator|.
name|getAsyncIndexInfoService
argument_list|(
name|newArrayList
argument_list|(
operator|new
name|IndexMBeanInfoSupplier
argument_list|(
literal|"foo-async"
argument_list|,
parameter_list|()
lambda|->
name|STATUS_DONE
argument_list|,
parameter_list|()
lambda|->
literal|2L
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ActiveDeletedBlobCollectorMBean
name|bean
init|=
name|getTestBean
argument_list|(
name|indexPathService
argument_list|,
name|asyncIndexInfoService
argument_list|)
decl_stmt|;
name|bean
operator|.
name|flagActiveDeletionUnsafeForCurrentState
argument_list|()
expr_stmt|;
name|NodeState
name|indexFile
init|=
name|getFakeIndexFile
argument_list|(
name|indexPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|indexFile
operator|.
name|getBoolean
argument_list|(
name|PROP_UNSAFE_FOR_ACTIVE_DELETION
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|pauseResumeSetsInMemFlag
parameter_list|()
block|{
name|IndexPathService
name|indexPathService
init|=
name|MockRegistrar
operator|.
name|getIndexPathsService
argument_list|(
name|indexPaths
argument_list|)
decl_stmt|;
name|AsyncIndexInfoService
name|asyncIndexInfoService
init|=
name|MockRegistrar
operator|.
name|getAsyncIndexInfoService
argument_list|(
name|newArrayList
argument_list|(
operator|new
name|IndexMBeanInfoSupplier
argument_list|(
literal|"foo-async"
argument_list|,
parameter_list|()
lambda|->
name|STATUS_DONE
argument_list|,
parameter_list|()
lambda|->
literal|2L
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ActiveDeletedBlobCollectorMBean
name|bean
init|=
name|getTestBean
argument_list|(
name|indexPathService
argument_list|,
name|asyncIndexInfoService
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Bean should delegate the call correctly"
argument_list|,
name|bean
operator|.
name|isActiveDeletionUnsafe
argument_list|()
argument_list|)
expr_stmt|;
name|bean
operator|.
name|flagActiveDeletionUnsafeForCurrentState
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Active deleted blob collector isn't notified to stop marking"
argument_list|,
name|ActiveDeletedBlobCollectorFactory
operator|.
name|NOOP
operator|.
name|isActiveDeletionUnsafe
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Bean should delegate the call correctly"
argument_list|,
name|bean
operator|.
name|isActiveDeletionUnsafe
argument_list|()
argument_list|)
expr_stmt|;
name|bean
operator|.
name|flagActiveDeletionSafe
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Active deleted blob collector isn't notified to resume marking"
argument_list|,
name|ActiveDeletedBlobCollectorFactory
operator|.
name|NOOP
operator|.
name|isActiveDeletionUnsafe
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Bean should delegate the call correctly"
argument_list|,
name|bean
operator|.
name|isActiveDeletionUnsafe
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|timedOutWhileWaitingForIndexerShouldAutoResume
parameter_list|()
block|{
name|IndexPathService
name|indexPathService
init|=
name|MockRegistrar
operator|.
name|getIndexPathsService
argument_list|(
name|indexPaths
argument_list|)
decl_stmt|;
name|AsyncIndexInfoService
name|asyncIndexInfoService
init|=
name|MockRegistrar
operator|.
name|getAsyncIndexInfoService
argument_list|(
name|newArrayList
argument_list|(
operator|new
name|IndexMBeanInfoSupplier
argument_list|(
literal|"foo-async"
argument_list|,
parameter_list|()
lambda|->
name|STATUS_RUNNING
argument_list|,
parameter_list|()
lambda|->
literal|2L
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ActiveDeletedBlobCollectorMBean
name|bean
init|=
name|getTestBean
argument_list|(
name|indexPathService
argument_list|,
name|asyncIndexInfoService
argument_list|)
decl_stmt|;
name|bean
operator|.
name|flagActiveDeletionUnsafeForCurrentState
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Timing out on running indexer didn't resume marking blobs"
argument_list|,
name|bean
operator|.
name|isActiveDeletionUnsafe
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|failureToFlagAllIndexFilesShouldAutoResume
parameter_list|()
block|{
name|IndexPathService
name|indexPathService
init|=
name|MockRegistrar
operator|.
name|getIndexPathsService
argument_list|(
name|indexPaths
argument_list|)
decl_stmt|;
name|AsyncIndexInfoService
name|asyncIndexInfoService
init|=
name|MockRegistrar
operator|.
name|getAsyncIndexInfoService
argument_list|(
name|newArrayList
argument_list|(
operator|new
name|IndexMBeanInfoSupplier
argument_list|(
literal|"foo-async"
argument_list|,
parameter_list|()
lambda|->
name|STATUS_DONE
argument_list|,
parameter_list|()
lambda|->
literal|2L
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|NodeStore
name|failingNodeStore
init|=
operator|new
name|MemoryNodeStore
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
specifier|synchronized
name|NodeState
name|merge
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|builder
parameter_list|,
annotation|@
name|Nonnull
name|CommitHook
name|commitHook
parameter_list|,
annotation|@
name|Nonnull
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"TestFail"
argument_list|,
literal|1
argument_list|,
literal|"We must never merge"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
name|ActiveDeletedBlobCollectorMBeanImpl
name|bean
init|=
operator|new
name|ActiveDeletedBlobCollectorMBeanImpl
argument_list|(
name|ActiveDeletedBlobCollectorFactory
operator|.
name|NOOP
argument_list|,
name|wb
argument_list|,
name|failingNodeStore
argument_list|,
name|indexPathService
argument_list|,
name|asyncIndexInfoService
argument_list|,
operator|new
name|MemoryBlobStore
argument_list|()
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|)
decl_stmt|;
name|bean
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
name|bean
operator|.
name|flagActiveDeletionUnsafeForCurrentState
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Failure to update head index files didn't resume marking blobs"
argument_list|,
name|bean
operator|.
name|isActiveDeletionUnsafe
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|orderOfFlaggingWaitForIndexersAndUpdateIndexFiles
parameter_list|()
block|{
specifier|final
name|AtomicBoolean
name|isPaused
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|hadWaitedForIndex
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|IndexPathService
name|indexPathService
init|=
name|mock
argument_list|(
name|IndexPathService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|indexPathService
operator|.
name|getIndexPaths
argument_list|()
argument_list|)
operator|.
name|then
argument_list|(
name|mockObj
lambda|->
block|{
name|assertTrue
argument_list|(
literal|"Must wait for indexers before going to update index files"
argument_list|,
name|hadWaitedForIndex
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|indexPaths
return|;
block|}
argument_list|)
expr_stmt|;
name|AsyncIndexInfoService
name|asyncIndexInfoService
init|=
name|MockRegistrar
operator|.
name|getAsyncIndexInfoService
argument_list|(
name|newArrayList
argument_list|(
operator|new
name|IndexMBeanInfoSupplier
argument_list|(
literal|"foo-async"
argument_list|,
parameter_list|()
lambda|->
block|{
name|assertTrue
argument_list|(
literal|"Must pause before waiting for indexers"
argument_list|,
name|isPaused
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|hadWaitedForIndex
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|STATUS_DONE
return|;
block|}
argument_list|,
parameter_list|()
lambda|->
literal|2L
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ActiveDeletedBlobCollectorMBeanImpl
name|bean
init|=
operator|new
name|ActiveDeletedBlobCollectorMBeanImpl
argument_list|(
operator|new
name|PauseNotifyingActiveDeletedBlobCollector
argument_list|(
parameter_list|()
lambda|->
block|{
name|isPaused
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
argument_list|,
name|wb
argument_list|,
name|nodeStore
argument_list|,
name|indexPathService
argument_list|,
name|asyncIndexInfoService
argument_list|,
operator|new
name|MemoryBlobStore
argument_list|()
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|)
decl_stmt|;
name|bean
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
name|bean
operator|.
name|flagActiveDeletionUnsafeForCurrentState
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|clonedNSWithSharedDS
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryBlobStore
name|bs
init|=
operator|new
name|MemoryBlobStore
argument_list|()
decl_stmt|;
name|bs
operator|.
name|setBlockSizeMin
argument_list|(
literal|48
argument_list|)
expr_stmt|;
name|MemoryDocumentStore
name|mds1
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|dns1
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|mds1
argument_list|)
operator|.
name|setBlobStore
argument_list|(
name|bs
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Create initial repo with InitialContent. It has enough data to create blobs
name|LuceneIndexEditorProvider
name|editorProvider
init|=
operator|new
name|LuceneIndexEditorProvider
argument_list|()
decl_stmt|;
name|ContentRepository
name|repository
init|=
operator|new
name|Oak
argument_list|(
name|dns1
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
name|editorProvider
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|NodeTypeIndexProvider
argument_list|()
argument_list|)
operator|.
name|createContentRepository
argument_list|()
decl_stmt|;
name|ContentSession
name|session
init|=
name|repository
operator|.
name|login
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Root
name|root
init|=
name|session
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|TestUtil
operator|.
name|createFulltextIndex
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"testIndex"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// pause active deletion
name|IndexPathService
name|indexPathService
init|=
operator|new
name|IndexPathServiceImpl
argument_list|(
name|dns1
argument_list|)
decl_stmt|;
name|AsyncIndexInfoService
name|asyncIndexInfoService
init|=
name|MockRegistrar
operator|.
name|getAsyncIndexInfoService
argument_list|(
name|newArrayList
argument_list|(
operator|new
name|IndexMBeanInfoSupplier
argument_list|(
literal|"foo-async"
argument_list|,
parameter_list|()
lambda|->
name|STATUS_DONE
argument_list|,
parameter_list|()
lambda|->
literal|2L
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ActiveDeletedBlobCollectorMBeanImpl
name|bean
init|=
operator|new
name|ActiveDeletedBlobCollectorMBeanImpl
argument_list|(
name|ActiveDeletedBlobCollectorFactory
operator|.
name|NOOP
argument_list|,
name|wb
argument_list|,
name|dns1
argument_list|,
name|indexPathService
argument_list|,
name|asyncIndexInfoService
argument_list|,
operator|new
name|MemoryBlobStore
argument_list|()
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|)
decl_stmt|;
name|bean
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
name|bean
operator|.
name|flagActiveDeletionUnsafeForCurrentState
argument_list|()
expr_stmt|;
comment|// we try here to create some churn and we want some files to get created at dns1
comment|// BUT get deleted at dns2. "segments_1" is one such file.
comment|// since our "creation" of churn is assumed, we should assert that dns1 has "segments_1"
comment|// (and later dns2 doesn't have it)
name|root
operator|=
name|session
operator|.
name|getLatestRoot
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"First pass indexing should generate segments_1"
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
literal|"/oak:index/testIndex/:data/segments_1"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// shutdown first instance
name|dns1
operator|.
name|dispose
argument_list|()
expr_stmt|;
comment|// clone
name|MemoryDocumentStore
name|mds2
init|=
name|mds1
operator|.
name|copy
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|dns2
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|mds2
argument_list|)
operator|.
name|setBlobStore
argument_list|(
name|bs
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// create some churn to delete some index files - using clone store
comment|// we'd setup lucene editor with active deletion collector
name|DeletedFileTrackingADBC
name|deletedFileTrackingADBC
init|=
operator|new
name|DeletedFileTrackingADBC
argument_list|(
operator|new
name|File
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|"adbc-workdir"
argument_list|)
argument_list|)
decl_stmt|;
name|editorProvider
operator|=
operator|new
name|LuceneIndexEditorProvider
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|ExtractedTextCache
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Mounts
operator|.
name|defaultMountInfoProvider
argument_list|()
argument_list|,
name|deletedFileTrackingADBC
argument_list|)
expr_stmt|;
name|repository
operator|=
operator|new
name|Oak
argument_list|(
name|dns2
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
name|editorProvider
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|NodeTypeIndexProvider
argument_list|()
argument_list|)
operator|.
name|createContentRepository
argument_list|()
expr_stmt|;
name|session
operator|=
name|repository
operator|.
name|login
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|root
operator|=
name|session
operator|.
name|getLatestRoot
argument_list|()
expr_stmt|;
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|Tree
name|child
init|=
name|rootTree
operator|.
name|addChild
argument_list|(
literal|"a"
operator|+
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|20
condition|;
name|j
operator|++
control|)
block|{
name|child
operator|.
name|setProperty
argument_list|(
literal|"foo"
operator|+
name|j
argument_list|,
literal|"bar"
operator|+
name|j
argument_list|)
expr_stmt|;
block|}
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//since our index is not async, we are unable to track commit progress automatically.
comment|// OR, iow, we need to play the rold of AsyncIndexUpdate explicitly
name|deletedFileTrackingADBC
operator|.
name|blobDeletionCallback
operator|.
name|commitProgress
argument_list|(
name|COMMIT_SUCCEDED
argument_list|)
expr_stmt|;
name|deletedFileTrackingADBC
operator|.
name|purgeBlobsDeleted
argument_list|(
name|Clock
operator|.
name|SIMPLE
operator|.
name|getTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|root
operator|=
name|session
operator|.
name|getLatestRoot
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Churn created via dns2 should delete segments_1"
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
literal|"/oak:index/testIndex/:data/segments_1"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|dns2
operator|.
name|dispose
argument_list|()
expr_stmt|;
comment|// validate index using dns1 which should still have valid index data even
comment|// after dns2's churn
name|dns1
operator|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|mds1
argument_list|)
operator|.
name|setBlobStore
argument_list|(
name|bs
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|IndexConsistencyChecker
name|checker
init|=
operator|new
name|IndexConsistencyChecker
argument_list|(
name|dns1
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|"/oak:index/testIndex"
argument_list|,
operator|new
name|File
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|"checker-workdir"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexConsistencyChecker
operator|.
name|Result
name|result
init|=
name|checker
operator|.
name|check
argument_list|(
name|IndexConsistencyChecker
operator|.
name|Level
operator|.
name|BLOBS_ONLY
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Nodestore1 can't read blobs: "
operator|+
name|result
operator|.
name|missingBlobIds
operator|+
literal|" while reading index"
argument_list|,
name|result
operator|.
name|missingBlobs
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|IndexMBeanInfoSupplier
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|Supplier
argument_list|<
name|String
argument_list|>
name|statusSupplier
decl_stmt|;
specifier|private
specifier|final
name|Supplier
argument_list|<
name|Long
argument_list|>
name|execCntSupplier
decl_stmt|;
name|IndexMBeanInfoSupplier
parameter_list|(
name|String
name|name
parameter_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
name|statusSupplier
parameter_list|,
name|Supplier
argument_list|<
name|Long
argument_list|>
name|execCntSupplier
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|statusSupplier
operator|=
name|statusSupplier
expr_stmt|;
name|this
operator|.
name|execCntSupplier
operator|=
name|execCntSupplier
expr_stmt|;
block|}
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
name|String
name|getStatus
parameter_list|()
block|{
return|return
name|statusSupplier
operator|.
name|get
argument_list|()
return|;
block|}
name|long
name|getExecCnt
parameter_list|()
block|{
return|return
name|execCntSupplier
operator|.
name|get
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MockRegistrar
block|{
specifier|static
name|AsyncIndexInfoService
name|getAsyncIndexInfoService
parameter_list|(
name|List
argument_list|<
name|IndexMBeanInfoSupplier
argument_list|>
name|infoSuppliers
parameter_list|)
block|{
name|AsyncIndexInfoService
name|service
init|=
name|mock
argument_list|(
name|AsyncIndexInfoService
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|asyncLanes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexMBeanInfoSupplier
name|info
range|:
name|infoSuppliers
control|)
block|{
name|String
name|lane
init|=
name|info
operator|.
name|getName
argument_list|()
decl_stmt|;
name|IndexStatsMBean
name|bean
init|=
name|mock
argument_list|(
name|IndexStatsMBean
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|bean
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|lane
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|bean
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|then
argument_list|(
name|mockObj
lambda|->
name|info
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|bean
operator|.
name|getTotalExecutionCount
argument_list|()
argument_list|)
operator|.
name|then
argument_list|(
name|mockObj
lambda|->
name|info
operator|.
name|getExecCnt
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|service
operator|.
name|getInfo
argument_list|(
name|lane
argument_list|)
argument_list|)
operator|.
name|then
argument_list|(
name|mockObj
lambda|->
operator|new
name|AsyncIndexInfo
argument_list|(
name|lane
argument_list|,
literal|1324L
argument_list|,
literal|4567L
argument_list|,
name|STATUS_RUNNING
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getStatus
argument_list|()
argument_list|)
argument_list|,
name|bean
argument_list|)
argument_list|)
expr_stmt|;
name|asyncLanes
operator|.
name|add
argument_list|(
name|lane
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|service
operator|.
name|getAsyncLanes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|asyncLanes
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|static
name|IndexPathService
name|getIndexPathsService
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|indexPaths
parameter_list|)
block|{
name|IndexPathService
name|service
init|=
name|mock
argument_list|(
name|IndexPathService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|service
operator|.
name|getIndexPaths
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|indexPaths
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|StatusSupplier
implements|implements
name|Supplier
argument_list|<
name|String
argument_list|>
block|{
name|String
name|status
init|=
name|STATUS_DONE
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|()
block|{
return|return
name|status
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|PauseNotifyingActiveDeletedBlobCollector
implements|implements
name|ActiveDeletedBlobCollector
block|{
specifier|private
specifier|final
name|Callable
name|callback
decl_stmt|;
name|PauseNotifyingActiveDeletedBlobCollector
parameter_list|(
annotation|@
name|Nonnull
name|Callable
name|callback
parameter_list|)
block|{
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|BlobDeletionCallback
name|getBlobDeletionCallback
parameter_list|()
block|{
return|return
name|ActiveDeletedBlobCollectorFactory
operator|.
name|NOOP
operator|.
name|getBlobDeletionCallback
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|purgeBlobsDeleted
parameter_list|(
name|long
name|before
parameter_list|,
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|)
block|{
name|ActiveDeletedBlobCollectorFactory
operator|.
name|NOOP
operator|.
name|purgeBlobsDeleted
argument_list|(
name|before
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cancelBlobCollection
parameter_list|()
block|{
name|ActiveDeletedBlobCollectorFactory
operator|.
name|NOOP
operator|.
name|cancelBlobCollection
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flagActiveDeletionUnsafe
parameter_list|(
name|boolean
name|toFlag
parameter_list|)
block|{
try|try
block|{
name|callback
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignored
block|}
name|ActiveDeletedBlobCollectorFactory
operator|.
name|NOOP
operator|.
name|flagActiveDeletionUnsafe
argument_list|(
name|toFlag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isActiveDeletionUnsafe
parameter_list|()
block|{
return|return
name|ActiveDeletedBlobCollectorFactory
operator|.
name|NOOP
operator|.
name|isActiveDeletionUnsafe
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|DeletedFileTrackingADBC
implements|implements
name|ActiveDeletedBlobCollector
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|deletedFiles
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|BlobDeletionCallback
name|blobDeletionCallback
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|ActiveDeletedBlobCollector
name|delegate
decl_stmt|;
name|DeletedFileTrackingADBC
parameter_list|(
name|File
name|tempFolder
parameter_list|)
block|{
name|delegate
operator|=
name|ActiveDeletedBlobCollectorFactory
operator|.
name|newInstance
argument_list|(
name|tempFolder
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|BlobDeletionCallback
name|getBlobDeletionCallback
parameter_list|()
block|{
specifier|final
name|BlobDeletionCallback
name|deletionCallback
init|=
name|delegate
operator|.
name|getBlobDeletionCallback
argument_list|()
decl_stmt|;
name|blobDeletionCallback
operator|=
operator|new
name|BlobDeletionCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|deleted
parameter_list|(
name|String
name|blobId
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|)
block|{
name|deletedFiles
operator|.
name|add
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|ids
argument_list|)
argument_list|)
expr_stmt|;
name|deletionCallback
operator|.
name|deleted
argument_list|(
name|blobId
argument_list|,
name|ids
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMarkingForActiveDeletionUnsafe
parameter_list|()
block|{
return|return
name|deletionCallback
operator|.
name|isMarkingForActiveDeletionUnsafe
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitProgress
parameter_list|(
name|IndexProgress
name|indexProgress
parameter_list|)
block|{
name|deletionCallback
operator|.
name|commitProgress
argument_list|(
name|indexProgress
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
return|return
name|blobDeletionCallback
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|purgeBlobsDeleted
parameter_list|(
name|long
name|before
parameter_list|,
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|)
block|{
name|delegate
operator|.
name|purgeBlobsDeleted
argument_list|(
name|before
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cancelBlobCollection
parameter_list|()
block|{
name|delegate
operator|.
name|cancelBlobCollection
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flagActiveDeletionUnsafe
parameter_list|(
name|boolean
name|toFlag
parameter_list|)
block|{
name|delegate
operator|.
name|flagActiveDeletionUnsafe
argument_list|(
name|toFlag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isActiveDeletionUnsafe
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isActiveDeletionUnsafe
argument_list|()
return|;
block|}
block|}
specifier|private
name|void
name|createFakeIndex
parameter_list|(
name|String
name|indexPath
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|String
name|indexFileName
init|=
literal|"fakeIndexFile"
decl_stmt|;
comment|// create index in node store
name|NodeBuilder
name|rootBuilder
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|nodeBuilder
init|=
name|rootBuilder
decl_stmt|;
for|for
control|(
name|String
name|elem
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|indexPath
argument_list|)
control|)
block|{
name|nodeBuilder
operator|=
name|nodeBuilder
operator|.
name|child
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
name|nodeBuilder
operator|.
name|setProperty
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|,
name|TYPE_LUCENE
argument_list|)
expr_stmt|;
name|nodeBuilder
operator|=
name|nodeBuilder
operator|.
name|child
argument_list|(
literal|":data"
argument_list|)
expr_stmt|;
name|nodeBuilder
operator|.
name|child
argument_list|(
name|indexFileName
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|rootBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|indexPaths
operator|.
name|add
argument_list|(
name|indexPath
argument_list|)
expr_stmt|;
block|}
specifier|private
name|NodeState
name|getFakeIndexFile
parameter_list|(
name|String
name|indexPath
parameter_list|)
block|{
name|String
name|indexFileName
init|=
literal|"fakeIndexFile"
decl_stmt|;
name|NodeState
name|state
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|elem
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|indexPath
argument_list|)
control|)
block|{
name|state
operator|=
name|state
operator|.
name|getChildNode
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
name|state
operator|=
name|state
operator|.
name|getChildNode
argument_list|(
literal|":data"
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|indexFileName
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
specifier|private
name|ActiveDeletedBlobCollectorMBean
name|getTestBean
parameter_list|(
name|IndexPathService
name|indexPathService
parameter_list|,
name|AsyncIndexInfoService
name|asyncIndexInfoService
parameter_list|)
block|{
name|ActiveDeletedBlobCollectorMBeanImpl
name|bean
init|=
operator|new
name|ActiveDeletedBlobCollectorMBeanImpl
argument_list|(
name|ActiveDeletedBlobCollectorFactory
operator|.
name|NOOP
argument_list|,
name|wb
argument_list|,
name|nodeStore
argument_list|,
name|indexPathService
argument_list|,
name|asyncIndexInfoService
argument_list|,
operator|new
name|MemoryBlobStore
argument_list|()
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|)
decl_stmt|;
name|bean
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
return|return
name|bean
return|;
block|}
block|}
end_class

end_unit

