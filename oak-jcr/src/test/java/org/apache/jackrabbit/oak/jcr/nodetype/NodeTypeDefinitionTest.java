begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|nodetype
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ItemVisitor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|util
operator|.
name|TraversingItemVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_class
specifier|public
class|class
name|NodeTypeDefinitionTest
extends|extends
name|AbstractJCRTest
block|{
specifier|public
name|void
name|testReadNodeTypeTree
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ntPath
init|=
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
operator|+
literal|'/'
operator|+
name|NodeTypeConstants
operator|.
name|NT_UNSTRUCTURED
decl_stmt|;
name|Node
name|ntNode
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|ntPath
argument_list|)
decl_stmt|;
name|ItemVisitor
name|visitor
init|=
operator|new
name|TraversingItemVisitor
operator|.
name|Default
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|entering
parameter_list|(
name|Node
name|node
parameter_list|,
name|int
name|level
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|assertTrue
argument_list|(
name|superuser
operator|.
name|nodeExists
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|entering
argument_list|(
name|node
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|visitor
operator|.
name|visit
argument_list|(
name|ntNode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIndexedChildDefinition
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ntPath
init|=
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
operator|+
literal|'/'
operator|+
name|NodeTypeConstants
operator|.
name|NT_VERSIONHISTORY
decl_stmt|;
name|assertTrue
argument_list|(
name|superuser
operator|.
name|nodeExists
argument_list|(
name|ntPath
operator|+
literal|"/jcr:childNodeDefinition"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|superuser
operator|.
name|nodeExists
argument_list|(
name|ntPath
operator|+
literal|"/jcr:childNodeDefinition[1]"
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|cdNode
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|ntPath
operator|+
literal|"/jcr:childNodeDefinition[1]"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ntPath
operator|+
literal|"/jcr:childNodeDefinition"
argument_list|,
name|cdNode
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|defNames
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|NodeType
name|nt
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNodeTypeManager
argument_list|()
operator|.
name|getNodeType
argument_list|(
name|NodeTypeConstants
operator|.
name|NT_VERSIONHISTORY
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeDefinition
name|nd
range|:
name|nt
operator|.
name|getDeclaredChildNodeDefinitions
argument_list|()
control|)
block|{
name|defNames
operator|.
name|add
argument_list|(
name|nd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Node
name|ntNode
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|ntPath
argument_list|)
decl_stmt|;
name|NodeIterator
name|it
init|=
name|ntNode
operator|.
name|getNodes
argument_list|(
literal|"jcr:childNodeDefinition*"
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Node
name|def
init|=
name|it
operator|.
name|nextNode
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|getIndex
argument_list|(
name|def
argument_list|)
decl_stmt|;
name|String
name|name
init|=
operator|(
name|def
operator|.
name|hasProperty
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_NAME
argument_list|)
operator|)
condition|?
name|def
operator|.
name|getProperty
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_NAME
argument_list|)
operator|.
name|getString
argument_list|()
else|:
name|NodeTypeConstants
operator|.
name|RESIDUAL_NAME
decl_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|defNames
operator|.
name|get
argument_list|(
name|index
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testIndexedPropertyDefinition
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ntPath
init|=
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
operator|+
literal|'/'
operator|+
name|NodeTypeConstants
operator|.
name|NT_VERSION
decl_stmt|;
name|assertTrue
argument_list|(
name|superuser
operator|.
name|nodeExists
argument_list|(
name|ntPath
operator|+
literal|"/jcr:propertyDefinition"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|superuser
operator|.
name|nodeExists
argument_list|(
name|ntPath
operator|+
literal|"/jcr:propertyDefinition[1]"
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|pdNode
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|ntPath
operator|+
literal|"/jcr:propertyDefinition[1]"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ntPath
operator|+
literal|"/jcr:propertyDefinition"
argument_list|,
name|pdNode
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|defNames
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|NodeType
name|nt
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNodeTypeManager
argument_list|()
operator|.
name|getNodeType
argument_list|(
name|NodeTypeConstants
operator|.
name|NT_VERSION
argument_list|)
decl_stmt|;
for|for
control|(
name|PropertyDefinition
name|nd
range|:
name|nt
operator|.
name|getDeclaredPropertyDefinitions
argument_list|()
control|)
block|{
name|defNames
operator|.
name|add
argument_list|(
name|nd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Node
name|ntNode
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|ntPath
argument_list|)
decl_stmt|;
name|NodeIterator
name|it
init|=
name|ntNode
operator|.
name|getNodes
argument_list|(
literal|"jcr:propertyDefinition*"
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Node
name|def
init|=
name|it
operator|.
name|nextNode
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|getIndex
argument_list|(
name|def
argument_list|)
decl_stmt|;
name|String
name|name
init|=
operator|(
name|def
operator|.
name|hasProperty
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_NAME
argument_list|)
operator|)
condition|?
name|def
operator|.
name|getProperty
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_NAME
argument_list|)
operator|.
name|getString
argument_list|()
else|:
name|NodeTypeConstants
operator|.
name|RESIDUAL_NAME
decl_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|defNames
operator|.
name|get
argument_list|(
name|index
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|int
name|getIndex
parameter_list|(
annotation|@
name|Nonnull
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|name
init|=
name|node
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'['
argument_list|)
decl_stmt|;
return|return
operator|(
name|i
operator|==
operator|-
literal|1
operator|)
condition|?
literal|1
else|:
name|Integer
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|']'
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

