begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|aggregate
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|elements
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getDepth
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getParentPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_comment
comment|/**  * List based NodeAggregator  *   */
end_comment

begin_class
specifier|public
class|class
name|SimpleNodeAggregator
implements|implements
name|NodeAggregator
block|{
specifier|public
specifier|static
specifier|final
name|String
name|INCLUDE_ALL
init|=
literal|"*"
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|ChildNameRule
argument_list|>
name|aggregates
init|=
operator|new
name|ArrayList
argument_list|<
name|ChildNameRule
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getParents
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
name|getParents
argument_list|(
name|root
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|Iterator
argument_list|<
name|String
argument_list|>
name|getParents
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|acceptStarIncludes
parameter_list|)
block|{
name|int
name|levelsUp
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|primaryType
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChildNameRule
name|r
range|:
name|aggregates
control|)
block|{
name|String
name|name
init|=
name|getName
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|inc
range|:
name|r
operator|.
name|includes
control|)
block|{
comment|// check node name match
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|getName
argument_list|(
name|inc
argument_list|)
argument_list|)
condition|)
block|{
name|levelsUp
operator|=
literal|1
expr_stmt|;
name|primaryType
operator|.
name|add
argument_list|(
name|r
operator|.
name|primaryType
argument_list|)
expr_stmt|;
if|if
condition|(
name|acceptStarIncludes
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|acceptStarIncludes
condition|)
block|{
comment|// check '*' rule, which could span over more than one level
if|if
condition|(
name|INCLUDE_ALL
operator|.
name|equals
argument_list|(
name|getName
argument_list|(
name|inc
argument_list|)
argument_list|)
condition|)
block|{
comment|// basic approach to dealing with a '*' include
name|levelsUp
operator|=
name|Math
operator|.
name|max
argument_list|(
name|getDepth
argument_list|(
name|inc
argument_list|)
argument_list|,
name|levelsUp
argument_list|)
expr_stmt|;
name|primaryType
operator|.
name|add
argument_list|(
name|r
operator|.
name|primaryType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|levelsUp
operator|>
literal|0
operator|&&
operator|!
name|primaryType
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parents
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|levelsUp
operator|=
name|Math
operator|.
name|min
argument_list|(
name|levelsUp
argument_list|,
name|getDepth
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|parentPath
init|=
name|path
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|levelsUp
condition|;
name|i
operator|++
control|)
block|{
name|parentPath
operator|=
name|getParentPath
argument_list|(
name|parentPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|isNodeType
argument_list|(
name|root
argument_list|,
name|parentPath
argument_list|,
name|primaryType
argument_list|)
condition|)
block|{
name|parents
operator|.
name|add
argument_list|(
name|parentPath
argument_list|)
expr_stmt|;
name|parents
operator|.
name|addAll
argument_list|(
name|newArrayList
argument_list|(
name|getParents
argument_list|(
name|root
argument_list|,
name|parentPath
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|parents
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
block|}
return|return
name|Iterators
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isNodeType
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|String
name|path
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|types
parameter_list|)
block|{
name|NodeState
name|state
init|=
name|root
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
if|if
condition|(
name|state
operator|.
name|hasChildNode
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|state
operator|=
name|state
operator|.
name|getChildNode
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
name|PropertyState
name|ps
init|=
name|state
operator|.
name|getProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|types
operator|.
name|contains
argument_list|(
name|ps
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
return|;
block|}
comment|// ----- builder methods
comment|/**      * Include children with the provided name. '*' means include all children      *       * Note: there is no support for property names yet      *       */
specifier|public
name|SimpleNodeAggregator
name|newRuleWithName
parameter_list|(
name|String
name|primaryType
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|includes
parameter_list|)
block|{
name|aggregates
operator|.
name|add
argument_list|(
operator|new
name|ChildNameRule
argument_list|(
name|primaryType
argument_list|,
name|includes
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// ----- aggregation rules
specifier|private
specifier|static
interface|interface
name|Rule
block|{      }
specifier|private
specifier|static
class|class
name|ChildNameRule
implements|implements
name|Rule
block|{
specifier|private
specifier|final
name|String
name|primaryType
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|includes
decl_stmt|;
name|ChildNameRule
parameter_list|(
name|String
name|primaryType
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|includes
parameter_list|)
block|{
name|this
operator|.
name|primaryType
operator|=
name|primaryType
expr_stmt|;
name|this
operator|.
name|includes
operator|=
name|includes
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

