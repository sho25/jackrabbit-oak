begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|stats
operator|.
name|TimeSeriesStatsUtil
operator|.
name|asCompositeData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|SimpleType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|stats
operator|.
name|TimeSeries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|CommitsTracker
operator|.
name|Commit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|CounterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|MeterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatsOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|TimerStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_class
specifier|public
class|class
name|SegmentNodeStoreStats
implements|implements
name|SegmentNodeStoreStatsMBean
implements|,
name|SegmentNodeStoreMonitor
block|{
specifier|private
specifier|static
specifier|final
name|boolean
name|COLLECT_STACK_TRACES
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"oak.commitsTracker.collectStackTraces"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|OTHER_WRITERS_LIMIT
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.commitsTracker.otherWritersLimit"
argument_list|,
literal|20
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COMMITS_COUNT
init|=
literal|"COMMITS_COUNT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COMMIT_QUEUE_SIZE
init|=
literal|"COMMIT_QUEUE_SIZE"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COMMIT_TIME
init|=
literal|"COMMIT_TIME"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|QUEUEING_TIME
init|=
literal|"QUEUEING_TIME"
decl_stmt|;
specifier|private
specifier|final
name|StatisticsProvider
name|statisticsProvider
decl_stmt|;
specifier|private
specifier|final
name|MeterStats
name|commitsCount
decl_stmt|;
specifier|private
specifier|final
name|CounterStats
name|commitQueueSize
decl_stmt|;
specifier|private
specifier|final
name|TimerStats
name|commitTime
decl_stmt|;
specifier|private
specifier|final
name|TimerStats
name|queueingTime
decl_stmt|;
specifier|private
specifier|volatile
name|CommitsTracker
name|commitsTracker
decl_stmt|;
specifier|private
name|boolean
name|collectStackTraces
init|=
name|COLLECT_STACK_TRACES
decl_stmt|;
specifier|private
name|int
name|otherWritersLimit
init|=
name|OTHER_WRITERS_LIMIT
decl_stmt|;
specifier|private
name|String
index|[]
name|writerGroups
decl_stmt|;
specifier|public
name|SegmentNodeStoreStats
parameter_list|(
name|StatisticsProvider
name|statisticsProvider
parameter_list|)
block|{
name|this
operator|.
name|statisticsProvider
operator|=
name|statisticsProvider
expr_stmt|;
name|this
operator|.
name|commitsTracker
operator|=
operator|new
name|CommitsTracker
argument_list|(
name|writerGroups
argument_list|,
name|otherWritersLimit
argument_list|)
expr_stmt|;
name|this
operator|.
name|commitsCount
operator|=
name|statisticsProvider
operator|.
name|getMeter
argument_list|(
name|COMMITS_COUNT
argument_list|,
name|StatsOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|commitQueueSize
operator|=
name|statisticsProvider
operator|.
name|getCounterStats
argument_list|(
name|COMMIT_QUEUE_SIZE
argument_list|,
name|StatsOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|commitTime
operator|=
name|statisticsProvider
operator|.
name|getTimer
argument_list|(
name|COMMIT_TIME
argument_list|,
name|StatsOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|queueingTime
operator|=
name|statisticsProvider
operator|.
name|getTimer
argument_list|(
name|QUEUEING_TIME
argument_list|,
name|StatsOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|// ~--------------------------------< SegmentStoreMonitor>
annotation|@
name|Override
specifier|public
name|void
name|onCommit
parameter_list|(
name|Thread
name|t
parameter_list|,
name|long
name|time
parameter_list|)
block|{
name|commitsCount
operator|.
name|mark
argument_list|()
expr_stmt|;
name|commitTime
operator|.
name|update
argument_list|(
name|time
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
name|commitsTracker
operator|.
name|trackExecutedCommitOf
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCommitQueued
parameter_list|(
name|Thread
name|t
parameter_list|)
block|{
name|commitQueueSize
operator|.
name|inc
argument_list|()
expr_stmt|;
name|commitsTracker
operator|.
name|trackQueuedCommitOf
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCommitDequeued
parameter_list|(
name|Thread
name|t
parameter_list|,
name|long
name|time
parameter_list|)
block|{
name|commitQueueSize
operator|.
name|dec
argument_list|()
expr_stmt|;
name|queueingTime
operator|.
name|update
argument_list|(
name|time
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
name|commitsTracker
operator|.
name|trackDequedCommitOf
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
comment|// ~--------------------------------< SegmentStoreStatsMBean>
annotation|@
name|Override
specifier|public
name|CompositeData
name|getCommitsCount
parameter_list|()
block|{
return|return
name|asCompositeData
argument_list|(
name|getTimeSeries
argument_list|(
name|COMMITS_COUNT
argument_list|)
argument_list|,
name|COMMITS_COUNT
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getQueuingCommitsCount
parameter_list|()
block|{
return|return
name|asCompositeData
argument_list|(
name|getTimeSeries
argument_list|(
name|COMMIT_QUEUE_SIZE
argument_list|)
argument_list|,
name|COMMIT_QUEUE_SIZE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getCommitTimes
parameter_list|()
block|{
return|return
name|asCompositeData
argument_list|(
name|getTimeSeries
argument_list|(
name|COMMIT_TIME
argument_list|)
argument_list|,
name|COMMIT_TIME
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getQueuingTimes
parameter_list|()
block|{
return|return
name|asCompositeData
argument_list|(
name|getTimeSeries
argument_list|(
name|QUEUEING_TIME
argument_list|)
argument_list|,
name|QUEUEING_TIME
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TabularData
name|getCommitsCountPerWriterGroupLastMinute
parameter_list|()
throws|throws
name|OpenDataException
block|{
return|return
name|createTabularDataFromCountMap
argument_list|(
name|commitsTracker
operator|.
name|getCommitsCountPerGroupLastMinute
argument_list|()
argument_list|,
literal|"commitsPerWriterGroup"
argument_list|,
literal|"writerGroup"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TabularData
name|getCommitsCountForOtherWriters
parameter_list|()
throws|throws
name|OpenDataException
block|{
return|return
name|createTabularDataFromCountMap
argument_list|(
name|commitsTracker
operator|.
name|getCommitsCountOthers
argument_list|()
argument_list|,
literal|"commitsPerWriter"
argument_list|,
literal|"writerName"
argument_list|)
return|;
block|}
specifier|private
name|TabularData
name|createTabularDataFromCountMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|commitsCountMap
parameter_list|,
name|String
name|typeName
parameter_list|,
name|String
name|writerDescription
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|CompositeType
name|commitsPerWriterRowType
init|=
operator|new
name|CompositeType
argument_list|(
name|typeName
argument_list|,
name|typeName
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"count"
block|,
name|writerDescription
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"count"
block|,
name|writerDescription
block|}
argument_list|,
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|STRING
block|}
argument_list|)
decl_stmt|;
name|TabularDataSupport
name|tabularData
init|=
operator|new
name|TabularDataSupport
argument_list|(
operator|new
name|TabularType
argument_list|(
name|typeName
argument_list|,
literal|"Most active writers"
argument_list|,
name|commitsPerWriterRowType
argument_list|,
operator|new
name|String
index|[]
block|{
name|writerDescription
block|}
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|commitsCountMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|commitsCountMap
operator|.
name|put
argument_list|(
literal|"N/A"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
name|commitsCountMap
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|(
name|Comparator
operator|.
expr|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
operator|>
name|comparingLong
argument_list|(
name|Entry
operator|::
name|getValue
argument_list|)
operator|.
name|reversed
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|e
lambda|->
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"count"
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|writerDescription
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
argument_list|)
operator|.
name|map
argument_list|(
name|d
lambda|->
name|mapToCompositeData
argument_list|(
name|commitsPerWriterRowType
argument_list|,
name|d
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|tabularData
operator|::
name|put
argument_list|)
expr_stmt|;
return|return
name|tabularData
return|;
block|}
annotation|@
name|NotNull
specifier|private
specifier|static
name|CompositeType
name|getCompositeType
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|OpenDataException
block|{
return|return
operator|new
name|CompositeType
argument_list|(
name|name
argument_list|,
name|name
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"writerName"
block|,
literal|"writerDetails"
block|,
literal|"queued"
block|,
literal|"dequeued"
block|,
literal|"applied"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"writerName"
block|,
literal|"writerDetails"
block|,
literal|"queued"
block|,
literal|"dequeued"
block|,
literal|"applied"
block|}
argument_list|,
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|LONG
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TabularData
name|getQueuedWriters
parameter_list|()
throws|throws
name|OpenDataException
block|{
name|CompositeType
name|queuedWritersDetailsRowType
init|=
name|getCompositeType
argument_list|(
literal|"queuedWritersDetails"
argument_list|)
decl_stmt|;
name|TabularDataSupport
name|tabularData
init|=
operator|new
name|TabularDataSupport
argument_list|(
operator|new
name|TabularType
argument_list|(
literal|"queuedWritersDetails"
argument_list|,
literal|"Queued writers details"
argument_list|,
name|queuedWritersDetailsRowType
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"writerName"
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|commitsTracker
operator|.
name|getQueuedWritersMap
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|toMap
argument_list|)
operator|.
name|map
argument_list|(
name|d
lambda|->
name|mapToCompositeData
argument_list|(
name|queuedWritersDetailsRowType
argument_list|,
name|d
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|tabularData
operator|::
name|put
argument_list|)
expr_stmt|;
return|return
name|tabularData
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
specifier|public
name|CompositeData
name|getCurrentWriter
parameter_list|()
throws|throws
name|OpenDataException
block|{
name|Commit
name|writer
init|=
name|commitsTracker
operator|.
name|getCurrentWriter
argument_list|()
decl_stmt|;
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
return|return
name|mapToCompositeData
argument_list|(
name|getCompositeType
argument_list|(
literal|"currentWritersDetails"
argument_list|)
argument_list|,
name|toMap
argument_list|(
name|writer
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|NotNull
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toMap
parameter_list|(
annotation|@
name|NotNull
name|Commit
name|commit
parameter_list|)
block|{
return|return
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"writerName"
argument_list|,
name|commit
operator|.
name|getThreadName
argument_list|()
argument_list|,
literal|"writerDetails"
argument_list|,
name|collectStackTraces
condition|?
name|commit
operator|.
name|getStackTrace
argument_list|()
else|:
literal|"N/A"
argument_list|,
literal|"queued"
argument_list|,
name|commit
operator|.
name|getQueued
argument_list|()
argument_list|,
literal|"dequeued"
argument_list|,
name|commit
operator|.
name|getDequeued
argument_list|()
argument_list|,
literal|"applied"
argument_list|,
name|commit
operator|.
name|getApplied
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCollectStackTraces
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|this
operator|.
name|collectStackTraces
operator|=
name|flag
expr_stmt|;
name|commitsTracker
operator|=
operator|new
name|CommitsTracker
argument_list|(
name|writerGroups
argument_list|,
name|otherWritersLimit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCollectStackTraces
parameter_list|()
block|{
return|return
name|collectStackTraces
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumberOfOtherWritersToDetail
parameter_list|()
block|{
return|return
name|otherWritersLimit
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNumberOfOtherWritersToDetail
parameter_list|(
name|int
name|otherWritersLimit
parameter_list|)
block|{
name|this
operator|.
name|otherWritersLimit
operator|=
name|otherWritersLimit
expr_stmt|;
name|commitsTracker
operator|=
operator|new
name|CommitsTracker
argument_list|(
name|writerGroups
argument_list|,
name|otherWritersLimit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getWriterGroupsForLastMinuteCounts
parameter_list|()
block|{
return|return
name|writerGroups
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setWriterGroupsForLastMinuteCounts
parameter_list|(
name|String
index|[]
name|writerGroups
parameter_list|)
block|{
name|this
operator|.
name|writerGroups
operator|=
name|writerGroups
expr_stmt|;
name|commitsTracker
operator|=
operator|new
name|CommitsTracker
argument_list|(
name|writerGroups
argument_list|,
name|otherWritersLimit
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TimeSeries
name|getTimeSeries
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|statisticsProvider
operator|.
name|getStats
argument_list|()
operator|.
name|getTimeSeries
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|CompositeData
name|mapToCompositeData
parameter_list|(
name|CompositeType
name|compositeType
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|data
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|CompositeDataSupport
argument_list|(
name|compositeType
argument_list|,
name|data
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
decl||
name|ArrayStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

