begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_class
specifier|final
class|class
name|NumEntries
block|{
specifier|static
specifier|final
name|NumEntries
name|ZERO
init|=
operator|new
name|NumEntries
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|long
name|size
decl_stmt|;
specifier|final
name|boolean
name|isExact
decl_stmt|;
specifier|private
name|NumEntries
parameter_list|(
name|long
name|size
parameter_list|,
name|boolean
name|isExact
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|isExact
operator|=
name|isExact
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|size
argument_list|,
name|isExact
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|NumEntries
condition|)
block|{
name|NumEntries
name|other
init|=
operator|(
name|NumEntries
operator|)
name|obj
decl_stmt|;
return|return
name|size
operator|==
name|other
operator|.
name|size
operator|&&
name|isExact
operator|==
name|other
operator|.
name|isExact
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|NotNull
specifier|static
name|NumEntries
name|valueOf
parameter_list|(
name|long
name|size
parameter_list|,
name|boolean
name|isExact
parameter_list|)
block|{
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
comment|// if size is zero we assume that this is the correct value
comment|// irrespective of the isExact flag.
return|return
name|ZERO
return|;
block|}
else|else
block|{
return|return
operator|new
name|NumEntries
argument_list|(
name|size
argument_list|,
name|isExact
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

