begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|MathContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|SimpleType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CacheStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|ConsolidatedDataStoreCacheStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|DataStoreBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|InMemoryDataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|humanReadableByteCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|registerMBean
import|;
end_import

begin_comment
comment|/**  * Stats for caching data store.  */
end_comment

begin_class
annotation|@
name|Component
specifier|public
class|class
name|ConsolidatedDataStoreCacheStats
implements|implements
name|ConsolidatedDataStoreCacheStatsMBean
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Registration
argument_list|>
name|registrations
init|=
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|DataStoreCacheStatsMBean
argument_list|>
name|cacheStats
init|=
name|newArrayList
argument_list|()
decl_stmt|;
annotation|@
name|Reference
specifier|public
name|AbstractSharedCachingDataStore
name|cachingDataStore
decl_stmt|;
annotation|@
name|Reference
specifier|public
name|NodeStore
name|nodeStore
decl_stmt|;
annotation|@
name|Override
specifier|public
name|TabularData
name|getCacheStats
parameter_list|()
block|{
name|TabularDataSupport
name|tds
decl_stmt|;
try|try
block|{
name|TabularType
name|tt
init|=
operator|new
name|TabularType
argument_list|(
name|CacheStatsData
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Consolidated DataStore Cache Stats"
argument_list|,
name|CacheStatsData
operator|.
name|TYPE
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"name"
block|}
argument_list|)
decl_stmt|;
name|tds
operator|=
operator|new
name|TabularDataSupport
argument_list|(
name|tt
argument_list|)
expr_stmt|;
for|for
control|(
name|DataStoreCacheStatsMBean
name|stats
range|:
name|cacheStats
control|)
block|{
name|tds
operator|.
name|put
argument_list|(
operator|new
name|CacheStatsData
argument_list|(
name|stats
argument_list|)
operator|.
name|toCompositeData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|tds
return|;
block|}
annotation|@
name|Activate
specifier|private
name|void
name|activate
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
name|Whiteboard
name|wb
init|=
operator|new
name|OsgiWhiteboard
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DataStoreCacheStatsMBean
argument_list|>
name|allStats
init|=
name|cachingDataStore
operator|.
name|getStats
argument_list|()
decl_stmt|;
for|for
control|(
name|DataStoreCacheStatsMBean
name|stat
range|:
name|allStats
control|)
block|{
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|wb
argument_list|,
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|stat
argument_list|,
name|CacheStatsMBean
operator|.
name|TYPE
argument_list|,
name|stat
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cacheStats
operator|.
name|add
argument_list|(
name|stat
argument_list|)
expr_stmt|;
block|}
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|wb
argument_list|,
name|ConsolidatedDataStoreCacheStatsMBean
operator|.
name|class
argument_list|,
name|this
argument_list|,
name|ConsolidatedDataStoreCacheStatsMBean
operator|.
name|TYPE
argument_list|,
literal|"Consolidated DataStore Cache statistics"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|private
name|void
name|deactivate
parameter_list|()
block|{
for|for
control|(
name|Registration
name|r
range|:
name|registrations
control|)
block|{
name|r
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
name|registrations
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Determines whether a file-like entity with the given name      * has been "synced" (completely copied) to S3.      *      * Determination of "synced":      * - A nodeName of null or "" is always "not synced".      * - A nodeName that does not map to a valid node is always "not synced".      * - If the node for this nodeName does not have a binary property,      * this node is always "not synced" since such a node would never be      * copied to S3.      * - If the node for this nodeName is not in the nodeStore, this node is      * always "not synced".      * - Otherwise, the state is "synced" if the corresponding blob is      * completely stored in S3.      *      * @param nodePathName - Path to the entity to check.  This is      *                       a node path, not an external file path.      * @return true if the file is synced to S3.      */
annotation|@
name|Override
specifier|public
name|boolean
name|isFileSynced
parameter_list|(
specifier|final
name|String
name|nodePathName
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|nodePathName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
literal|null
operator|==
name|nodeStore
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|NodeState
name|leafNode
init|=
name|findLeafNode
argument_list|(
name|nodePathName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|leafNode
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|nodeHasBinaryProperties
init|=
literal|false
decl_stmt|;
for|for
control|(
specifier|final
name|PropertyState
name|propertyState
range|:
name|leafNode
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|nodeHasBinaryProperties
operator||=
operator|(
name|propertyState
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BINARY
operator|||
name|propertyState
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BINARIES
operator|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|propertyState
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BINARY
condition|)
block|{
specifier|final
name|Blob
name|blob
init|=
operator|(
name|Blob
operator|)
name|propertyState
operator|.
name|getValue
argument_list|(
name|propertyState
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|blob
operator|||
operator|!
name|haveRecordForBlob
argument_list|(
name|blob
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|propertyState
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BINARIES
condition|)
block|{
specifier|final
name|List
argument_list|<
name|Blob
argument_list|>
name|blobs
init|=
operator|(
name|List
argument_list|<
name|Blob
argument_list|>
operator|)
name|propertyState
operator|.
name|getValue
argument_list|(
name|propertyState
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|blobs
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
specifier|final
name|Blob
name|blob
range|:
name|blobs
control|)
block|{
if|if
condition|(
operator|!
name|haveRecordForBlob
argument_list|(
name|blob
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// If we got here and nodeHasBinaryProperties is true,
comment|// it means at least one binary property was found for
comment|// the leaf node and that we were able to locate a
comment|// records for binaries found.
return|return
name|nodeHasBinaryProperties
return|;
block|}
specifier|private
name|NodeState
name|findLeafNode
parameter_list|(
specifier|final
name|String
name|nodePathName
parameter_list|)
block|{
specifier|final
name|Iterable
argument_list|<
name|String
argument_list|>
name|pathNodes
init|=
name|PathUtils
operator|.
name|elements
argument_list|(
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|nodePathName
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|leafNodeName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|nodePathName
argument_list|)
decl_stmt|;
name|NodeState
name|currentNode
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|pathNodeName
range|:
name|pathNodes
control|)
block|{
if|if
condition|(
name|pathNodeName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|NodeState
name|childNode
init|=
name|currentNode
operator|.
name|getChildNode
argument_list|(
name|pathNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|childNode
operator|.
name|exists
argument_list|()
condition|)
block|{
break|break;
block|}
name|currentNode
operator|=
name|childNode
expr_stmt|;
block|}
block|}
return|return
name|currentNode
operator|.
name|getChildNode
argument_list|(
name|leafNodeName
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|haveRecordForBlob
parameter_list|(
specifier|final
name|Blob
name|blob
parameter_list|)
block|{
specifier|final
name|String
name|fullBlobId
init|=
name|blob
operator|.
name|getContentIdentity
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|fullBlobId
argument_list|)
operator|&&
operator|!
name|InMemoryDataRecord
operator|.
name|isInstance
argument_list|(
name|fullBlobId
argument_list|)
condition|)
block|{
name|String
name|blobId
init|=
name|DataStoreBlobStore
operator|.
name|BlobId
operator|.
name|of
argument_list|(
name|fullBlobId
argument_list|)
operator|.
name|getBlobId
argument_list|()
decl_stmt|;
return|return
name|cachingDataStore
operator|.
name|exists
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|blobId
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
class|class
name|CacheStatsData
block|{
specifier|static
specifier|final
name|String
index|[]
name|FIELD_NAMES
init|=
operator|new
name|String
index|[]
block|{
literal|"name"
block|,
literal|"requestCount"
block|,
literal|"hitCount"
block|,
literal|"hitRate"
block|,
literal|"missCount"
block|,
literal|"missRate"
block|,
literal|"loadCount"
block|,
literal|"loadSuccessCount"
block|,
literal|"loadExceptionCount"
block|,
literal|"totalLoadTime"
block|,
literal|"averageLoadPenalty"
block|,
literal|"evictionCount"
block|,
literal|"elementCount"
block|,
literal|"totalWeight"
block|,
literal|"totalMemWeight"
block|,
literal|"maxWeight"
block|,         }
decl_stmt|;
specifier|static
specifier|final
name|String
index|[]
name|FIELD_DESCRIPTIONS
init|=
name|FIELD_NAMES
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|static
specifier|final
name|OpenType
index|[]
name|FIELD_TYPES
init|=
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|BIGDECIMAL
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|BIGDECIMAL
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,         }
decl_stmt|;
specifier|static
specifier|final
name|CompositeType
name|TYPE
init|=
name|createCompositeType
argument_list|()
decl_stmt|;
specifier|static
name|CompositeType
name|createCompositeType
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|CompositeType
argument_list|(
name|CacheStatsData
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Composite data type for Cache statistics"
argument_list|,
name|CacheStatsData
operator|.
name|FIELD_NAMES
argument_list|,
name|CacheStatsData
operator|.
name|FIELD_DESCRIPTIONS
argument_list|,
name|CacheStatsData
operator|.
name|FIELD_TYPES
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|final
name|DataStoreCacheStatsMBean
name|stats
decl_stmt|;
specifier|public
name|CacheStatsData
parameter_list|(
name|DataStoreCacheStatsMBean
name|stats
parameter_list|)
block|{
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
block|}
name|CompositeDataSupport
name|toCompositeData
parameter_list|()
block|{
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[]
block|{
name|stats
operator|.
name|getName
argument_list|()
block|,
name|stats
operator|.
name|getRequestCount
argument_list|()
block|,
name|stats
operator|.
name|getHitCount
argument_list|()
block|,
operator|new
name|BigDecimal
argument_list|(
name|stats
operator|.
name|getHitRate
argument_list|()
argument_list|,
operator|new
name|MathContext
argument_list|(
literal|2
argument_list|)
argument_list|)
block|,
name|stats
operator|.
name|getMissCount
argument_list|()
block|,
operator|new
name|BigDecimal
argument_list|(
name|stats
operator|.
name|getMissRate
argument_list|()
argument_list|,
operator|new
name|MathContext
argument_list|(
literal|2
argument_list|)
argument_list|)
block|,
name|stats
operator|.
name|getLoadCount
argument_list|()
block|,
name|stats
operator|.
name|getLoadSuccessCount
argument_list|()
block|,
name|stats
operator|.
name|getLoadExceptionCount
argument_list|()
block|,
name|timeInWords
argument_list|(
name|stats
operator|.
name|getTotalLoadTime
argument_list|()
argument_list|)
block|,
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
operator|(
name|long
operator|)
name|stats
operator|.
name|getAverageLoadPenalty
argument_list|()
argument_list|)
operator|+
literal|"ms"
block|,
name|stats
operator|.
name|getEvictionCount
argument_list|()
block|,
name|stats
operator|.
name|getElementCount
argument_list|()
block|,
name|humanReadableByteCount
argument_list|(
name|stats
operator|.
name|estimateCurrentWeight
argument_list|()
argument_list|)
block|,
name|humanReadableByteCount
argument_list|(
name|stats
operator|.
name|estimateCurrentMemoryWeight
argument_list|()
argument_list|)
block|,
name|humanReadableByteCount
argument_list|(
name|stats
operator|.
name|getMaxTotalWeight
argument_list|()
argument_list|)
block|,             }
decl_stmt|;
try|try
block|{
return|return
operator|new
name|CompositeDataSupport
argument_list|(
name|TYPE
argument_list|,
name|FIELD_NAMES
argument_list|,
name|values
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|static
name|String
name|timeInWords
parameter_list|(
name|long
name|nanos
parameter_list|)
block|{
name|long
name|millis
init|=
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|nanos
argument_list|)
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%d min, %d sec"
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMinutes
argument_list|(
name|millis
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|millis
argument_list|)
operator|-
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toSeconds
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMinutes
argument_list|(
name|millis
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

