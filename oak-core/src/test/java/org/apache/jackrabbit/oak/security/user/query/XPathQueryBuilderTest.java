begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|AuthorizableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|XPathQueryBuilderTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
name|XPathQueryBuilder
name|builder
init|=
operator|new
name|XPathQueryBuilder
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Value
name|v
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Value
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|relPath
init|=
literal|"re/l/path"
decl_stmt|;
specifier|private
name|void
name|assertPropertyCondition
parameter_list|(
annotation|@
name|NotNull
name|Condition
name|condition
parameter_list|,
annotation|@
name|NotNull
name|RelationOp
name|expectedOp
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|condition
operator|instanceof
name|Condition
operator|.
name|Property
argument_list|)
expr_stmt|;
name|Condition
operator|.
name|Property
name|cp
init|=
operator|(
name|Condition
operator|.
name|Property
operator|)
name|condition
decl_stmt|;
name|assertSame
argument_list|(
name|expectedOp
argument_list|,
name|cp
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relPath
argument_list|,
name|cp
operator|.
name|getRelPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|v
argument_list|,
name|cp
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cp
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|builder
operator|.
name|getCondition
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSortIgnoreCase
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|builder
operator|.
name|getSortIgnoreCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSortDirection
parameter_list|()
block|{
name|assertSame
argument_list|(
name|QueryBuilder
operator|.
name|Direction
operator|.
name|ASCENDING
argument_list|,
name|builder
operator|.
name|getSortDirection
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSortProperty
parameter_list|()
block|{
name|assertNull
argument_list|(
name|builder
operator|.
name|getSortProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetSortOrder
parameter_list|()
block|{
name|builder
operator|.
name|setSortOrder
argument_list|(
literal|"propName"
argument_list|,
name|QueryBuilder
operator|.
name|Direction
operator|.
name|DESCENDING
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"propName"
argument_list|,
name|builder
operator|.
name|getSortProperty
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|QueryBuilder
operator|.
name|Direction
operator|.
name|DESCENDING
argument_list|,
name|builder
operator|.
name|getSortDirection
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|builder
operator|.
name|getSortIgnoreCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetSortOrder2
parameter_list|()
block|{
name|builder
operator|.
name|setSortOrder
argument_list|(
literal|"propName"
argument_list|,
name|QueryBuilder
operator|.
name|Direction
operator|.
name|DESCENDING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"propName"
argument_list|,
name|builder
operator|.
name|getSortProperty
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|QueryBuilder
operator|.
name|Direction
operator|.
name|DESCENDING
argument_list|,
name|builder
operator|.
name|getSortDirection
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|builder
operator|.
name|getSortIgnoreCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSelectorType
parameter_list|()
block|{
name|assertSame
argument_list|(
name|AuthorizableType
operator|.
name|AUTHORIZABLE
argument_list|,
name|builder
operator|.
name|getSelectorType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetSelector
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Authorizable
argument_list|>
argument_list|,
name|AuthorizableType
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|User
operator|.
name|class
argument_list|,
name|AuthorizableType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|AuthorizableType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Authorizable
operator|.
name|class
argument_list|,
name|AuthorizableType
operator|.
name|AUTHORIZABLE
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Group
operator|.
name|class
argument_list|,
name|AuthorizableType
operator|.
name|GROUP
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createGroup
argument_list|(
literal|"testGroup"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|,
name|AuthorizableType
operator|.
name|GROUP
argument_list|)
expr_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|Authorizable
argument_list|>
name|cl
range|:
name|m
operator|.
name|keySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|setSelector
argument_list|(
name|cl
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|m
operator|.
name|get
argument_list|(
name|cl
argument_list|)
argument_list|,
name|builder
operator|.
name|getSelectorType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetGroupId
parameter_list|()
block|{
name|assertNull
argument_list|(
name|builder
operator|.
name|getGroupID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsDeclaredMembersOnly
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|builder
operator|.
name|isDeclaredMembersOnly
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetScope
parameter_list|()
block|{
name|builder
operator|.
name|setScope
argument_list|(
literal|"gr"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"gr"
argument_list|,
name|builder
operator|.
name|getGroupID
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|builder
operator|.
name|isDeclaredMembersOnly
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetOffset
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|builder
operator|.
name|getMaxCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetOffset
parameter_list|()
block|{
name|builder
operator|.
name|setLimit
argument_list|(
literal|25
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|builder
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetOffsetResetsBoundLimit
parameter_list|()
block|{
name|builder
operator|.
name|setLimit
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|Value
operator|.
name|class
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setLimit
argument_list|(
literal|25
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|builder
operator|.
name|getBound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBound
parameter_list|()
block|{
name|assertNull
argument_list|(
name|builder
operator|.
name|getBound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetBound
parameter_list|()
block|{
name|builder
operator|.
name|setLimit
argument_list|(
name|v
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|v
argument_list|,
name|builder
operator|.
name|getBound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetBoundResetsOffset
parameter_list|()
block|{
name|builder
operator|.
name|setLimit
argument_list|(
literal|25
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setLimit
argument_list|(
name|v
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|builder
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMaxCount
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|builder
operator|.
name|getMaxCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetMaxCountMinusOne
parameter_list|()
block|{
name|builder
operator|.
name|setLimit
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|builder
operator|.
name|getMaxCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetMaxCount
parameter_list|()
block|{
name|builder
operator|.
name|setLimit
argument_list|(
literal|0
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|builder
operator|.
name|getMaxCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNameMatches
parameter_list|()
block|{
name|Condition
name|c
init|=
name|builder
operator|.
name|nameMatches
argument_list|(
literal|"pattern"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|instanceof
name|Condition
operator|.
name|Node
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pattern"
argument_list|,
operator|(
operator|(
name|Condition
operator|.
name|Node
operator|)
name|c
operator|)
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNeq
parameter_list|()
block|{
name|Condition
name|c
init|=
name|builder
operator|.
name|neq
argument_list|(
name|relPath
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|assertPropertyCondition
argument_list|(
name|c
argument_list|,
name|RelationOp
operator|.
name|NE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEq
parameter_list|()
block|{
name|Condition
name|c
init|=
name|builder
operator|.
name|eq
argument_list|(
name|relPath
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|assertPropertyCondition
argument_list|(
name|c
argument_list|,
name|RelationOp
operator|.
name|EQ
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLt
parameter_list|()
block|{
name|Condition
name|c
init|=
name|builder
operator|.
name|lt
argument_list|(
name|relPath
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|assertPropertyCondition
argument_list|(
name|c
argument_list|,
name|RelationOp
operator|.
name|LT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLe
parameter_list|()
block|{
name|Condition
name|c
init|=
name|builder
operator|.
name|le
argument_list|(
name|relPath
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|assertPropertyCondition
argument_list|(
name|c
argument_list|,
name|RelationOp
operator|.
name|LE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGt
parameter_list|()
block|{
name|Condition
name|c
init|=
name|builder
operator|.
name|gt
argument_list|(
name|relPath
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|assertPropertyCondition
argument_list|(
name|c
argument_list|,
name|RelationOp
operator|.
name|GT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGe
parameter_list|()
block|{
name|Condition
name|c
init|=
name|builder
operator|.
name|ge
argument_list|(
name|relPath
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|assertPropertyCondition
argument_list|(
name|c
argument_list|,
name|RelationOp
operator|.
name|GE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExists
parameter_list|()
block|{
name|Condition
name|c
init|=
name|builder
operator|.
name|exists
argument_list|(
name|relPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|instanceof
name|Condition
operator|.
name|Property
argument_list|)
expr_stmt|;
name|Condition
operator|.
name|Property
name|cp
init|=
operator|(
name|Condition
operator|.
name|Property
operator|)
name|c
decl_stmt|;
name|assertSame
argument_list|(
name|RelationOp
operator|.
name|EX
argument_list|,
name|cp
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relPath
argument_list|,
name|cp
operator|.
name|getRelPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cp
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cp
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLike
parameter_list|()
block|{
name|Condition
name|c
init|=
name|builder
operator|.
name|like
argument_list|(
name|relPath
argument_list|,
literal|"pattern"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|instanceof
name|Condition
operator|.
name|Property
argument_list|)
expr_stmt|;
name|Condition
operator|.
name|Property
name|cp
init|=
operator|(
name|Condition
operator|.
name|Property
operator|)
name|c
decl_stmt|;
name|assertSame
argument_list|(
name|RelationOp
operator|.
name|LIKE
argument_list|,
name|cp
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relPath
argument_list|,
name|cp
operator|.
name|getRelPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cp
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pattern"
argument_list|,
name|cp
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContains
parameter_list|()
block|{
name|Condition
name|c
init|=
name|builder
operator|.
name|contains
argument_list|(
name|relPath
argument_list|,
literal|"searchEx"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|instanceof
name|Condition
operator|.
name|Contains
argument_list|)
expr_stmt|;
name|Condition
operator|.
name|Contains
name|ct
init|=
operator|(
name|Condition
operator|.
name|Contains
operator|)
name|c
decl_stmt|;
name|assertEquals
argument_list|(
name|relPath
argument_list|,
name|ct
operator|.
name|getRelPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"searchEx"
argument_list|,
name|ct
operator|.
name|getSearchExpr
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImpersonates
parameter_list|()
block|{
name|Condition
name|c
init|=
name|builder
operator|.
name|impersonates
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|instanceof
name|Condition
operator|.
name|Impersonation
argument_list|)
expr_stmt|;
name|Condition
operator|.
name|Impersonation
name|ci
init|=
operator|(
name|Condition
operator|.
name|Impersonation
operator|)
name|c
decl_stmt|;
name|assertEquals
argument_list|(
literal|"name"
argument_list|,
name|ci
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNot
parameter_list|()
block|{
name|Condition
name|condition
init|=
name|builder
operator|.
name|exists
argument_list|(
name|relPath
argument_list|)
decl_stmt|;
name|Condition
name|c
init|=
name|builder
operator|.
name|not
argument_list|(
name|condition
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|instanceof
name|Condition
operator|.
name|Not
argument_list|)
expr_stmt|;
name|Condition
operator|.
name|Not
name|cn
init|=
operator|(
name|Condition
operator|.
name|Not
operator|)
name|c
decl_stmt|;
name|assertEquals
argument_list|(
name|condition
argument_list|,
name|cn
operator|.
name|getCondition
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAnd
parameter_list|()
block|{
name|Condition
name|condition
init|=
name|builder
operator|.
name|exists
argument_list|(
name|relPath
argument_list|)
decl_stmt|;
name|Condition
name|condition2
init|=
name|builder
operator|.
name|lt
argument_list|(
name|relPath
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|Condition
name|c
init|=
name|builder
operator|.
name|and
argument_list|(
name|condition
argument_list|,
name|condition2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|instanceof
name|Condition
operator|.
name|And
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOr
parameter_list|()
block|{
name|Condition
name|condition
init|=
name|builder
operator|.
name|exists
argument_list|(
name|relPath
argument_list|)
decl_stmt|;
name|Condition
name|condition2
init|=
name|builder
operator|.
name|lt
argument_list|(
name|relPath
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|Condition
name|c
init|=
name|builder
operator|.
name|or
argument_list|(
name|condition
argument_list|,
name|condition2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|instanceof
name|Condition
operator|.
name|Or
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetCondition
parameter_list|()
block|{
name|assertNull
argument_list|(
name|builder
operator|.
name|getCondition
argument_list|()
argument_list|)
expr_stmt|;
name|Condition
name|condition
init|=
name|builder
operator|.
name|exists
argument_list|(
name|relPath
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setCondition
argument_list|(
name|condition
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|condition
argument_list|,
name|builder
operator|.
name|getCondition
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertyCondition
parameter_list|()
block|{
name|Condition
name|c
init|=
name|builder
operator|.
name|property
argument_list|(
name|relPath
argument_list|,
name|RelationOp
operator|.
name|GT
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|assertPropertyCondition
argument_list|(
name|c
argument_list|,
name|RelationOp
operator|.
name|GT
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

