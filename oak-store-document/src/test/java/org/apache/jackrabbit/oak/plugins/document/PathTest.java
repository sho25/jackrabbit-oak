begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Path
operator|.
name|ROOT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|contains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|emptyIterable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|PathTest
block|{
specifier|private
specifier|final
name|Path
name|root
init|=
name|ROOT
decl_stmt|;
specifier|private
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Path
name|fooBar
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Path
name|fooBarQuux
init|=
operator|new
name|Path
argument_list|(
name|fooBar
argument_list|,
literal|"quux"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Path
name|relFoo
init|=
operator|new
name|Path
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Path
name|relFooBar
init|=
operator|new
name|Path
argument_list|(
name|relFoo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Path
name|relFooBarQuux
init|=
operator|new
name|Path
argument_list|(
name|relFooBar
argument_list|,
literal|"quux"
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|equals
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|ROOT
argument_list|,
name|Path
operator|.
name|fromString
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|foo
argument_list|,
name|Path
operator|.
name|fromString
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fooBar
argument_list|,
name|Path
operator|.
name|fromString
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relFoo
argument_list|,
name|Path
operator|.
name|fromString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relFooBar
argument_list|,
name|Path
operator|.
name|fromString
argument_list|(
literal|"foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|fooBar
argument_list|,
name|Path
operator|.
name|fromString
argument_list|(
literal|"foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|relFooBar
argument_list|,
name|Path
operator|.
name|fromString
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|pathToString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|root
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/foo"
argument_list|,
name|foo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/foo/bar"
argument_list|,
name|fooBar
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/foo/bar/quux"
argument_list|,
name|fooBarQuux
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|relFoo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo/bar"
argument_list|,
name|relFooBar
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo/bar/quux"
argument_list|,
name|relFooBarQuux
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|toStringBuilder
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|root
operator|.
name|toStringBuilder
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
operator|.
name|toString
argument_list|()
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|foo
operator|.
name|toStringBuilder
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|foo
operator|.
name|toString
argument_list|()
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fooBar
operator|.
name|toStringBuilder
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fooBar
operator|.
name|toString
argument_list|()
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fooBarQuux
operator|.
name|toStringBuilder
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fooBarQuux
operator|.
name|toString
argument_list|()
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|relFoo
operator|.
name|toStringBuilder
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relFoo
operator|.
name|toString
argument_list|()
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|relFooBar
operator|.
name|toStringBuilder
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relFooBar
operator|.
name|toString
argument_list|()
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|relFooBarQuux
operator|.
name|toStringBuilder
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relFooBarQuux
operator|.
name|toString
argument_list|()
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fromString
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|root
argument_list|,
name|Path
operator|.
name|fromString
argument_list|(
name|root
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|foo
argument_list|,
name|Path
operator|.
name|fromString
argument_list|(
name|foo
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fooBar
argument_list|,
name|Path
operator|.
name|fromString
argument_list|(
name|fooBar
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fooBarQuux
argument_list|,
name|Path
operator|.
name|fromString
argument_list|(
name|fooBarQuux
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relFoo
argument_list|,
name|Path
operator|.
name|fromString
argument_list|(
name|relFoo
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relFooBar
argument_list|,
name|Path
operator|.
name|fromString
argument_list|(
name|relFooBar
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relFooBarQuux
argument_list|,
name|Path
operator|.
name|fromString
argument_list|(
name|relFooBarQuux
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|length
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|root
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
name|root
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|foo
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
name|foo
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fooBar
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
name|fooBar
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fooBarQuux
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
name|fooBarQuux
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relFoo
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
name|relFoo
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relFooBar
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
name|relFooBar
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relFooBarQuux
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
name|relFooBarQuux
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isRoot
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|root
operator|.
name|isRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|foo
operator|.
name|isRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fooBar
operator|.
name|isRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fooBarQuux
operator|.
name|isRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|relFoo
operator|.
name|isRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|relFooBar
operator|.
name|isRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|relFooBarQuux
operator|.
name|isRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getParent
parameter_list|()
block|{
name|assertNull
argument_list|(
name|root
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|foo
operator|.
name|getParent
argument_list|()
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fooBar
operator|.
name|getParent
argument_list|()
argument_list|,
name|foo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fooBarQuux
operator|.
name|getParent
argument_list|()
argument_list|,
name|fooBar
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|relFoo
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relFooBar
operator|.
name|getParent
argument_list|()
argument_list|,
name|relFoo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relFooBarQuux
operator|.
name|getParent
argument_list|()
argument_list|,
name|relFooBar
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getDepth
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|root
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|root
operator|.
name|getDepth
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|foo
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|foo
operator|.
name|getDepth
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|fooBar
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|fooBar
operator|.
name|getDepth
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|fooBarQuux
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|fooBarQuux
operator|.
name|getDepth
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|relFoo
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|relFoo
operator|.
name|getDepth
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|relFooBar
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|relFooBar
operator|.
name|getDepth
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|relFooBarQuux
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|relFooBarQuux
operator|.
name|getDepth
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getAncestor
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|root
argument_list|,
name|root
operator|.
name|getAncestor
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
argument_list|,
name|root
operator|.
name|getAncestor
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
argument_list|,
name|root
operator|.
name|getAncestor
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|foo
argument_list|,
name|foo
operator|.
name|getAncestor
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
argument_list|,
name|foo
operator|.
name|getAncestor
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
argument_list|,
name|foo
operator|.
name|getAncestor
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fooBar
argument_list|,
name|fooBar
operator|.
name|getAncestor
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|foo
argument_list|,
name|fooBar
operator|.
name|getAncestor
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
argument_list|,
name|fooBar
operator|.
name|getAncestor
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
argument_list|,
name|fooBar
operator|.
name|getAncestor
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fooBar
argument_list|,
name|fooBarQuux
operator|.
name|getAncestor
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relFoo
argument_list|,
name|relFoo
operator|.
name|getAncestor
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relFoo
argument_list|,
name|relFoo
operator|.
name|getAncestor
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relFoo
argument_list|,
name|relFoo
operator|.
name|getAncestor
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relFooBar
argument_list|,
name|relFooBar
operator|.
name|getAncestor
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relFoo
argument_list|,
name|relFooBar
operator|.
name|getAncestor
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relFoo
argument_list|,
name|relFooBar
operator|.
name|getAncestor
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relFoo
argument_list|,
name|relFooBar
operator|.
name|getAncestor
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relFooBar
argument_list|,
name|relFooBarQuux
operator|.
name|getAncestor
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getName
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|root
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|foo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|fooBar
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"quux"
argument_list|,
name|fooBarQuux
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|relFoo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|relFooBar
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"quux"
argument_list|,
name|relFooBarQuux
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|elements
parameter_list|()
block|{
name|assertThat
argument_list|(
name|root
operator|.
name|elements
argument_list|()
argument_list|,
name|emptyIterable
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|foo
operator|.
name|elements
argument_list|()
argument_list|,
name|contains
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fooBar
operator|.
name|elements
argument_list|()
argument_list|,
name|contains
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fooBarQuux
operator|.
name|elements
argument_list|()
argument_list|,
name|contains
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"quux"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|relFoo
operator|.
name|elements
argument_list|()
argument_list|,
name|contains
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|relFooBar
operator|.
name|elements
argument_list|()
argument_list|,
name|contains
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|relFooBarQuux
operator|.
name|elements
argument_list|()
argument_list|,
name|contains
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"quux"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isAncestorOf
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|root
operator|.
name|isAncestorOf
argument_list|(
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|isAncestorOf
argument_list|(
name|fooBar
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foo
operator|.
name|isAncestorOf
argument_list|(
name|fooBar
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fooBar
operator|.
name|isAncestorOf
argument_list|(
name|fooBarQuux
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|isAncestorOf
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|foo
operator|.
name|isAncestorOf
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|foo
operator|.
name|isAncestorOf
argument_list|(
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fooBar
operator|.
name|isAncestorOf
argument_list|(
name|fooBar
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fooBar
operator|.
name|isAncestorOf
argument_list|(
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fooBar
operator|.
name|isAncestorOf
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|isAncestorOf
argument_list|(
name|relFoo
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|isAncestorOf
argument_list|(
name|relFooBar
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|relFoo
operator|.
name|isAncestorOf
argument_list|(
name|relFoo
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|relFooBar
operator|.
name|isAncestorOf
argument_list|(
name|relFoo
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|relFooBar
operator|.
name|isAncestorOf
argument_list|(
name|relFooBar
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|relFooBarQuux
operator|.
name|isAncestorOf
argument_list|(
name|relFooBar
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|relFooBarQuux
operator|.
name|isAncestorOf
argument_list|(
name|relFooBarQuux
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|relFoo
operator|.
name|isAncestorOf
argument_list|(
name|relFooBar
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|relFooBar
operator|.
name|isAncestorOf
argument_list|(
name|relFooBarQuux
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|foo
operator|.
name|isAncestorOf
argument_list|(
name|relFooBar
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|foo
operator|.
name|isAncestorOf
argument_list|(
name|relFooBarQuux
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|relFoo
operator|.
name|isAncestorOf
argument_list|(
name|fooBar
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|relFoo
operator|.
name|isAncestorOf
argument_list|(
name|fooBarQuux
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isAbsolute
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|ROOT
operator|.
name|isAbsolute
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foo
operator|.
name|isAbsolute
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fooBar
operator|.
name|isAbsolute
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fooBarQuux
operator|.
name|isAbsolute
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|relFoo
operator|.
name|isAbsolute
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|relFooBar
operator|.
name|isAbsolute
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|relFooBarQuux
operator|.
name|isAbsolute
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|emptyName
parameter_list|()
block|{
operator|new
name|Path
argument_list|(
name|ROOT
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|fromStringWithEmptyString
parameter_list|()
block|{
name|Path
operator|.
name|fromString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compareTo
parameter_list|()
block|{
name|Path
name|baz
init|=
name|Path
operator|.
name|fromString
argument_list|(
literal|"/baz"
argument_list|)
decl_stmt|;
name|Path
name|fooBaz
init|=
name|Path
operator|.
name|fromString
argument_list|(
literal|"/foo/baz"
argument_list|)
decl_stmt|;
name|Path
name|relFooBaz
init|=
name|Path
operator|.
name|fromString
argument_list|(
literal|"foo/baz"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|baz
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|fooBar
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|fooBaz
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|fooBarQuux
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|relFoo
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|relFooBar
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|relFooBaz
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|paths
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|paths
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paths
argument_list|,
name|contains
argument_list|(
name|root
argument_list|,
name|baz
argument_list|,
name|foo
argument_list|,
name|fooBar
argument_list|,
name|fooBarQuux
argument_list|,
name|fooBaz
argument_list|,
name|relFoo
argument_list|,
name|relFooBar
argument_list|,
name|relFooBaz
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

