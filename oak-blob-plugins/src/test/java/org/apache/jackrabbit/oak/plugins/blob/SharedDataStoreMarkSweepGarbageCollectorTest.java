begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CheckpointMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|concurrent
operator|.
name|ExecutorCloser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|SharedDataStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Tracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|DefaultStatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|junit
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|SharedDataStore
operator|.
name|Type
operator|.
name|SHARED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|SharedDataStoreMarkSweepGarbageCollectorTest
block|{
annotation|@
name|Mock
specifier|private
name|MockGarbageCollectableSharedDataStore
name|blobStore
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|BlobReferenceRetriever
name|marker
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|Whiteboard
name|whiteboard
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|Tracker
argument_list|<
name|CheckpointMBean
argument_list|>
name|tracker
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
specifier|private
name|MarkSweepGarbageCollector
name|collector
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|CheckpointMBean
name|checkpointMBean
decl_stmt|;
specifier|private
name|ScheduledExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|when
argument_list|(
name|whiteboard
operator|.
name|track
argument_list|(
name|CheckpointMBean
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tracker
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|tracker
operator|.
name|getServices
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|checkpointMBean
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|blobStore
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|SHARED
argument_list|)
expr_stmt|;
name|collector
operator|=
operator|new
name|MarkSweepGarbageCollector
argument_list|(
name|marker
argument_list|,
name|blobStore
argument_list|,
name|executor
argument_list|,
name|MarkSweepGarbageCollector
operator|.
name|TEMP_DIR
argument_list|,
literal|1
argument_list|,
literal|0L
argument_list|,
literal|"repo"
argument_list|,
name|whiteboard
argument_list|,
operator|new
name|DefaultStatisticsProvider
argument_list|(
name|executor
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tear
parameter_list|()
block|{
operator|new
name|ExecutorCloser
argument_list|(
name|executor
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|markAndSweepShouldFailIfNotAllRepositoriesHaveMarkedReferencesAvailable
parameter_list|()
throws|throws
name|Exception
block|{
name|setupSharedDataRecords
argument_list|(
literal|"REPO1"
argument_list|,
literal|"REPO2"
argument_list|)
expr_stmt|;
name|collector
operator|.
name|markAndSweep
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|collector
operator|.
name|getOperationStats
argument_list|()
operator|.
name|numDeleted
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|collector
operator|.
name|getOperationStats
argument_list|()
operator|.
name|getFailureCount
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|markAndSweepShouldSucceedWhenAllRepositoriesAreAvailable
parameter_list|()
throws|throws
name|Exception
block|{
name|setupSharedDataRecords
argument_list|(
literal|"REPO1"
argument_list|,
literal|"REPO1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|blobStore
operator|.
name|getAllChunkIds
argument_list|(
literal|0L
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|collector
operator|.
name|markAndSweep
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|collector
operator|.
name|getOperationStats
argument_list|()
operator|.
name|numDeleted
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|collector
operator|.
name|getOperationStats
argument_list|()
operator|.
name|getFailureCount
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setupSharedDataRecords
parameter_list|(
specifier|final
name|String
name|refRepoId
parameter_list|,
specifier|final
name|String
name|repoRepoId
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|DataRecord
name|refDataRecord
init|=
name|mock
argument_list|(
name|DataRecord
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|refDataRecord
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
literal|"references-"
operator|+
name|refRepoId
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|refDataRecord
operator|.
name|getStream
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|refDataRecord
operator|.
name|getLastModified
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|10L
argument_list|)
expr_stmt|;
name|DataRecord
name|repoDataRecord
init|=
name|mock
argument_list|(
name|DataRecord
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|repoDataRecord
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
literal|"repository-"
operator|+
name|repoRepoId
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DataRecord
argument_list|>
name|refs
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|refDataRecord
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DataRecord
argument_list|>
name|repos
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|repoDataRecord
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|blobStore
operator|.
name|getAllMetadataRecords
argument_list|(
name|SharedDataStoreUtils
operator|.
name|SharedStoreRecordType
operator|.
name|REFERENCES
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|refs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|blobStore
operator|.
name|getAllMetadataRecords
argument_list|(
name|SharedDataStoreUtils
operator|.
name|SharedStoreRecordType
operator|.
name|REPOSITORY
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|repos
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|blobStore
operator|.
name|getAllMetadataRecords
argument_list|(
name|SharedDataStoreUtils
operator|.
name|SharedStoreRecordType
operator|.
name|MARKED_START_MARKER
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|refs
argument_list|)
expr_stmt|;
block|}
specifier|private
interface|interface
name|MockGarbageCollectableSharedDataStore
extends|extends
name|GarbageCollectableBlobStore
extends|,
name|SharedDataStore
block|{   }
block|}
end_class

end_unit

