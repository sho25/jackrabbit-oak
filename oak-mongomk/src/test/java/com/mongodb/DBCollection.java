begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// DBCollection.java
end_comment

begin_comment
comment|/**  *      Copyright (C) 2008 10gen Inc.  *  *   Licensed under the Apache License, Version 2.0 (the "License");  *   you may not use this file except in compliance with the License.  *   You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *   Unless required by applicable law or agreed to in writing, software  *   distributed under the License is distributed on an "AS IS" BASIS,  *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *   See the License for the specific language governing permissions and  *   limitations under the License.  */
end_comment

begin_package
package|package
name|com
operator|.
name|mongodb
package|;
end_package

begin_comment
comment|// Mongo
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bson
operator|.
name|types
operator|.
name|ObjectId
import|;
end_import

begin_comment
comment|/** This class provides a skeleton implementation of a database collection.  *<p>A typical invocation sequence is thus  *<blockquote><pre>  *     Mongo mongo = new Mongo( new DBAddress( "localhost", 127017 ) );  *     DB db = mongo.getDB( "mydb" );  *     DBCollection collection = db.getCollection( "test" );  *</pre></blockquote>  * @dochub collections  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|public
specifier|abstract
class|class
name|DBCollection
block|{
comment|// THIS HAS BEEN PATCHED TO REMOVE SOME FINAL MODIFIER ON METHODS WHICH NEEDED TO BE MOCKED FOR TESTING
comment|/**      * Saves document(s) to the database.      * if doc doesn't have an _id, one will be added      * you can get the _id that was added from doc after the insert      *      * @param arr  array of documents to save      * @param concern the write concern      * @return      * @throws MongoException      * @dochub insert      */
specifier|public
name|WriteResult
name|insert
parameter_list|(
name|DBObject
index|[]
name|arr
parameter_list|,
name|WriteConcern
name|concern
parameter_list|)
throws|throws
name|MongoException
block|{
return|return
name|insert
argument_list|(
name|arr
argument_list|,
name|concern
argument_list|,
name|getDBEncoderFactory
argument_list|()
operator|.
name|create
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Saves document(s) to the database.      * if doc doesn't have an _id, one will be added      * you can get the _id that was added from doc after the insert      *      * @param arr  array of documents to save      * @param concern the write concern      * @param encoder the DBEncoder to use      * @return      * @throws MongoException      * @dochub insert      */
specifier|public
specifier|abstract
name|WriteResult
name|insert
parameter_list|(
name|DBObject
index|[]
name|arr
parameter_list|,
name|WriteConcern
name|concern
parameter_list|,
name|DBEncoder
name|encoder
parameter_list|)
throws|throws
name|MongoException
function_decl|;
comment|/**      * Inserts a document into the database.      * if doc doesn't have an _id, one will be added      * you can get the _id that was added from doc after the insert      *      * @param o      * @param concern the write concern      * @return      * @throws MongoException      * @dochub insert      */
specifier|public
name|WriteResult
name|insert
parameter_list|(
name|DBObject
name|o
parameter_list|,
name|WriteConcern
name|concern
parameter_list|)
throws|throws
name|MongoException
block|{
return|return
name|insert
argument_list|(
operator|new
name|DBObject
index|[]
block|{
name|o
block|}
argument_list|,
name|concern
argument_list|)
return|;
block|}
comment|/**      * Saves document(s) to the database.      * if doc doesn't have an _id, one will be added      * you can get the _id that was added from doc after the insert      *      * @param arr  array of documents to save      * @return      * @throws MongoException      * @dochub insert      */
specifier|public
name|WriteResult
name|insert
parameter_list|(
name|DBObject
modifier|...
name|arr
parameter_list|)
throws|throws
name|MongoException
block|{
return|return
name|insert
argument_list|(
name|arr
argument_list|,
name|getWriteConcern
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Saves document(s) to the database.      * if doc doesn't have an _id, one will be added      * you can get the _id that was added from doc after the insert      *      * @param arr  array of documents to save      * @return      * @throws MongoException      * @dochub insert      */
specifier|public
name|WriteResult
name|insert
parameter_list|(
name|WriteConcern
name|concern
parameter_list|,
name|DBObject
modifier|...
name|arr
parameter_list|)
throws|throws
name|MongoException
block|{
return|return
name|insert
argument_list|(
name|arr
argument_list|,
name|concern
argument_list|)
return|;
block|}
comment|/**      * Saves document(s) to the database.      * if doc doesn't have an _id, one will be added      * you can get the _id that was added from doc after the insert      *      * @param list list of documents to save      * @return      * @throws MongoException      * @dochub insert      */
specifier|public
name|WriteResult
name|insert
parameter_list|(
name|List
argument_list|<
name|DBObject
argument_list|>
name|list
parameter_list|)
throws|throws
name|MongoException
block|{
return|return
name|insert
argument_list|(
name|list
argument_list|,
name|getWriteConcern
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Saves document(s) to the database.      * if doc doesn't have an _id, one will be added      * you can get the _id that was added from doc after the insert      *      * @param list list of documents to save      * @param concern the write concern      * @return      * @throws MongoException      * @dochub insert      */
specifier|public
name|WriteResult
name|insert
parameter_list|(
name|List
argument_list|<
name|DBObject
argument_list|>
name|list
parameter_list|,
name|WriteConcern
name|concern
parameter_list|)
throws|throws
name|MongoException
block|{
return|return
name|insert
argument_list|(
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|DBObject
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|concern
argument_list|)
return|;
block|}
comment|/**      * Performs an update operation.      * @param q search query for old object to update      * @param o object with which to update<tt>q</tt>      * @param upsert if the database should create the element if it does not exist      * @param multi if the update should be applied to all objects matching (db version 1.1.3 and above). An object will      * not be inserted if it does not exist in the collection and upsert=true and multi=true.      * See<a href="http://www.mongodb.org/display/DOCS/Atomic+Operations">http://www.mongodb.org/display/DOCS/Atomic+Operations</a>      * @param concern the write concern      * @return      * @throws MongoException      * @dochub update      */
specifier|public
name|WriteResult
name|update
parameter_list|(
name|DBObject
name|q
parameter_list|,
name|DBObject
name|o
parameter_list|,
name|boolean
name|upsert
parameter_list|,
name|boolean
name|multi
parameter_list|,
name|WriteConcern
name|concern
parameter_list|)
throws|throws
name|MongoException
block|{
return|return
name|update
argument_list|(
name|q
argument_list|,
name|o
argument_list|,
name|upsert
argument_list|,
name|multi
argument_list|,
name|concern
argument_list|,
name|getDBEncoderFactory
argument_list|()
operator|.
name|create
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Performs an update operation.      * @param q search query for old object to update      * @param o object with which to update<tt>q</tt>      * @param upsert if the database should create the element if it does not exist      * @param multi if the update should be applied to all objects matching (db version 1.1.3 and above). An object will      * not be inserted if it does not exist in the collection and upsert=true and multi=true.      * See<a href="http://www.mongodb.org/display/DOCS/Atomic+Operations">http://www.mongodb.org/display/DOCS/Atomic+Operations</a>      * @param concern the write concern      * @param encoder the DBEncoder to use      * @return      * @throws MongoException      * @dochub update      */
specifier|public
specifier|abstract
name|WriteResult
name|update
parameter_list|(
name|DBObject
name|q
parameter_list|,
name|DBObject
name|o
parameter_list|,
name|boolean
name|upsert
parameter_list|,
name|boolean
name|multi
parameter_list|,
name|WriteConcern
name|concern
parameter_list|,
name|DBEncoder
name|encoder
parameter_list|)
throws|throws
name|MongoException
function_decl|;
comment|/**      * calls {@link DBCollection#update(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean, com.mongodb.WriteConcern)} with default WriteConcern.      * @param q search query for old object to update      * @param o object with which to update<tt>q</tt>      * @param upsert if the database should create the element if it does not exist      * @param multi if the update should be applied to all objects matching (db version 1.1.3 and above)      *              See http://www.mongodb.org/display/DOCS/Atomic+Operations      * @return      * @throws MongoException      * @dochub update      */
specifier|public
name|WriteResult
name|update
parameter_list|(
name|DBObject
name|q
parameter_list|,
name|DBObject
name|o
parameter_list|,
name|boolean
name|upsert
parameter_list|,
name|boolean
name|multi
parameter_list|)
throws|throws
name|MongoException
block|{
return|return
name|update
argument_list|(
name|q
argument_list|,
name|o
argument_list|,
name|upsert
argument_list|,
name|multi
argument_list|,
name|getWriteConcern
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * calls {@link DBCollection#update(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean)} with upsert=false and multi=false      * @param q search query for old object to update      * @param o object with which to update<tt>q</tt>      * @return      * @throws MongoException      * @dochub update      */
specifier|public
name|WriteResult
name|update
parameter_list|(
name|DBObject
name|q
parameter_list|,
name|DBObject
name|o
parameter_list|)
throws|throws
name|MongoException
block|{
return|return
name|update
argument_list|(
name|q
argument_list|,
name|o
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * calls {@link DBCollection#update(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean)} with upsert=false and multi=true      * @param q search query for old object to update      * @param o object with which to update<tt>q</tt>      * @return      * @throws MongoException      * @dochub update      */
specifier|public
name|WriteResult
name|updateMulti
parameter_list|(
name|DBObject
name|q
parameter_list|,
name|DBObject
name|o
parameter_list|)
throws|throws
name|MongoException
block|{
return|return
name|update
argument_list|(
name|q
argument_list|,
name|o
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Adds any necessary fields to a given object before saving it to the collection.      * @param o object to which to add the fields      */
specifier|protected
specifier|abstract
name|void
name|doapply
parameter_list|(
name|DBObject
name|o
parameter_list|)
function_decl|;
comment|/**      * Removes objects from the database collection.      * @param o the object that documents to be removed must match      * @param concern WriteConcern for this operation      * @return      * @throws MongoException      * @dochub remove      */
specifier|public
name|WriteResult
name|remove
parameter_list|(
name|DBObject
name|o
parameter_list|,
name|WriteConcern
name|concern
parameter_list|)
throws|throws
name|MongoException
block|{
return|return
name|remove
argument_list|(
name|o
argument_list|,
name|concern
argument_list|,
name|getDBEncoderFactory
argument_list|()
operator|.
name|create
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Removes objects from the database collection.      * @param o the object that documents to be removed must match      * @param concern WriteConcern for this operation      * @param encoder the DBEncoder to use      * @return      * @throws MongoException      * @dochub remove      */
specifier|public
specifier|abstract
name|WriteResult
name|remove
parameter_list|(
name|DBObject
name|o
parameter_list|,
name|WriteConcern
name|concern
parameter_list|,
name|DBEncoder
name|encoder
parameter_list|)
throws|throws
name|MongoException
function_decl|;
comment|/**      * calls {@link DBCollection#remove(com.mongodb.DBObject, com.mongodb.WriteConcern)} with the default WriteConcern      * @param o the object that documents to be removed must match      * @return      * @throws MongoException      * @dochub remove      */
specifier|public
name|WriteResult
name|remove
parameter_list|(
name|DBObject
name|o
parameter_list|)
throws|throws
name|MongoException
block|{
return|return
name|remove
argument_list|(
name|o
argument_list|,
name|getWriteConcern
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Finds objects      */
specifier|abstract
name|Iterator
argument_list|<
name|DBObject
argument_list|>
name|__find
parameter_list|(
name|DBObject
name|ref
parameter_list|,
name|DBObject
name|fields
parameter_list|,
name|int
name|numToSkip
parameter_list|,
name|int
name|batchSize
parameter_list|,
name|int
name|limit
parameter_list|,
name|int
name|options
parameter_list|,
name|ReadPreference
name|readPref
parameter_list|,
name|DBDecoder
name|decoder
parameter_list|)
throws|throws
name|MongoException
function_decl|;
comment|/**      * Calls {@link DBCollection#find(com.mongodb.DBObject, com.mongodb.DBObject, int, int)} and applies the query options      * @param query query used to search      * @param fields the fields of matching objects to return      * @param numToSkip number of objects to skip      * @param batchSize the batch size. This option has a complex behavior, see {@link DBCursor#batchSize(int) }      * @param options - see Bytes QUERYOPTION_*      * @return the cursor      * @throws MongoException      * @dochub find      */
annotation|@
name|Deprecated
specifier|public
specifier|final
name|DBCursor
name|find
parameter_list|(
name|DBObject
name|query
parameter_list|,
name|DBObject
name|fields
parameter_list|,
name|int
name|numToSkip
parameter_list|,
name|int
name|batchSize
parameter_list|,
name|int
name|options
parameter_list|)
throws|throws
name|MongoException
block|{
return|return
name|find
argument_list|(
name|query
argument_list|,
name|fields
argument_list|,
name|numToSkip
argument_list|,
name|batchSize
argument_list|)
operator|.
name|addOption
argument_list|(
name|options
argument_list|)
return|;
block|}
comment|/**      * Finds objects from the database that match a query.      * A DBCursor object is returned, that can be iterated to go through the results.      *      * @param query query used to search      * @param fields the fields of matching objects to return      * @param numToSkip number of objects to skip      * @param batchSize the batch size. This option has a complex behavior, see {@link DBCursor#batchSize(int) }      * @return the cursor      * @throws MongoException      * @dochub find      */
annotation|@
name|Deprecated
specifier|public
specifier|final
name|DBCursor
name|find
parameter_list|(
name|DBObject
name|query
parameter_list|,
name|DBObject
name|fields
parameter_list|,
name|int
name|numToSkip
parameter_list|,
name|int
name|batchSize
parameter_list|)
block|{
name|DBCursor
name|cursor
init|=
name|find
argument_list|(
name|query
argument_list|,
name|fields
argument_list|)
operator|.
name|skip
argument_list|(
name|numToSkip
argument_list|)
operator|.
name|batchSize
argument_list|(
name|batchSize
argument_list|)
decl_stmt|;
return|return
name|cursor
return|;
block|}
comment|// ------
comment|/**      * Finds an object by its id.      * This compares the passed in value to the _id field of the document      *      * @param obj any valid object      * @return the object, if found, otherwise<code>null</code>      * @throws MongoException      */
specifier|public
specifier|final
name|DBObject
name|findOne
parameter_list|(
name|Object
name|obj
parameter_list|)
throws|throws
name|MongoException
block|{
return|return
name|findOne
argument_list|(
name|obj
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Finds an object by its id.      * This compares the passed in value to the _id field of the document      *      * @param obj any valid object      * @param fields fields to return      * @return the object, if found, otherwise<code>null</code>      * @dochub find      */
specifier|public
specifier|final
name|DBObject
name|findOne
parameter_list|(
name|Object
name|obj
parameter_list|,
name|DBObject
name|fields
parameter_list|)
block|{
name|Iterator
argument_list|<
name|DBObject
argument_list|>
name|iterator
init|=
name|__find
argument_list|(
operator|new
name|BasicDBObject
argument_list|(
literal|"_id"
argument_list|,
name|obj
argument_list|)
argument_list|,
name|fields
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|getOptions
argument_list|()
argument_list|,
name|getReadPreference
argument_list|()
argument_list|,
name|_decoderFactory
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|iterator
operator|!=
literal|null
condition|?
name|iterator
operator|.
name|next
argument_list|()
else|:
literal|null
operator|)
return|;
block|}
comment|/**      * Finds the first document in the query and updates it.      * @param query query to match      * @param fields fields to be returned      * @param sort sort to apply before picking first document      * @param remove if true, document found will be removed      * @param update update to apply      * @param returnNew if true, the updated document is returned, otherwise the old document is returned (or it would be lost forever)      * @param upsert do upsert (insert if document not present)      * @return the document      */
specifier|public
name|DBObject
name|findAndModify
parameter_list|(
name|DBObject
name|query
parameter_list|,
name|DBObject
name|fields
parameter_list|,
name|DBObject
name|sort
parameter_list|,
name|boolean
name|remove
parameter_list|,
name|DBObject
name|update
parameter_list|,
name|boolean
name|returnNew
parameter_list|,
name|boolean
name|upsert
parameter_list|)
block|{
name|BasicDBObject
name|cmd
init|=
operator|new
name|BasicDBObject
argument_list|(
literal|"findandmodify"
argument_list|,
name|_name
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
operator|&&
operator|!
name|query
operator|.
name|keySet
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|cmd
operator|.
name|append
argument_list|(
literal|"query"
argument_list|,
name|query
argument_list|)
expr_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
operator|&&
operator|!
name|fields
operator|.
name|keySet
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|cmd
operator|.
name|append
argument_list|(
literal|"fields"
argument_list|,
name|fields
argument_list|)
expr_stmt|;
if|if
condition|(
name|sort
operator|!=
literal|null
operator|&&
operator|!
name|sort
operator|.
name|keySet
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|cmd
operator|.
name|append
argument_list|(
literal|"sort"
argument_list|,
name|sort
argument_list|)
expr_stmt|;
if|if
condition|(
name|remove
condition|)
name|cmd
operator|.
name|append
argument_list|(
literal|"remove"
argument_list|,
name|remove
argument_list|)
expr_stmt|;
else|else
block|{
if|if
condition|(
name|update
operator|!=
literal|null
operator|&&
operator|!
name|update
operator|.
name|keySet
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// if 1st key doesnt start with $, then object will be inserted as is, need to check it
name|String
name|key
init|=
name|update
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'$'
condition|)
name|_checkObject
argument_list|(
name|update
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|append
argument_list|(
literal|"update"
argument_list|,
name|update
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|returnNew
condition|)
name|cmd
operator|.
name|append
argument_list|(
literal|"new"
argument_list|,
name|returnNew
argument_list|)
expr_stmt|;
if|if
condition|(
name|upsert
condition|)
name|cmd
operator|.
name|append
argument_list|(
literal|"upsert"
argument_list|,
name|upsert
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remove
operator|&&
operator|!
operator|(
name|update
operator|==
literal|null
operator|||
name|update
operator|.
name|keySet
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|returnNew
operator|)
condition|)
throw|throw
operator|new
name|MongoException
argument_list|(
literal|"FindAndModify: Remove cannot be mixed with the Update, or returnNew params!"
argument_list|)
throw|;
name|CommandResult
name|res
init|=
name|this
operator|.
name|_db
operator|.
name|command
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|ok
argument_list|()
operator|||
name|res
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"No matching object found"
argument_list|)
condition|)
return|return
operator|(
name|DBObject
operator|)
name|res
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
return|;
name|res
operator|.
name|throwOnError
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**      * calls {@link DBCollection#findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean)}      * with fields=null, remove=false, returnNew=false, upsert=false      * @param query      * @param sort      * @param update      * @return the old document      */
specifier|public
name|DBObject
name|findAndModify
parameter_list|(
name|DBObject
name|query
parameter_list|,
name|DBObject
name|sort
parameter_list|,
name|DBObject
name|update
parameter_list|)
block|{
return|return
name|findAndModify
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
name|sort
argument_list|,
literal|false
argument_list|,
name|update
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * calls {@link DBCollection#findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean)}      * with fields=null, sort=null, remove=false, returnNew=false, upsert=false      * @param query      * @param update      * @return the old document      */
specifier|public
name|DBObject
name|findAndModify
parameter_list|(
name|DBObject
name|query
parameter_list|,
name|DBObject
name|update
parameter_list|)
block|{
return|return
name|findAndModify
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|update
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * calls {@link DBCollection#findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean)}      * with fields=null, sort=null, remove=true, returnNew=false, upsert=false      * @param query      * @return the removed document      */
specifier|public
name|DBObject
name|findAndRemove
parameter_list|(
name|DBObject
name|query
parameter_list|)
block|{
return|return
name|findAndModify
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|// --- START INDEX CODE ---
comment|/**      * calls {@link DBCollection#createIndex(com.mongodb.DBObject, com.mongodb.DBObject)} with default index options      * @param keys an object with a key set of the fields desired for the index      * @throws MongoException      */
specifier|public
specifier|final
name|void
name|createIndex
parameter_list|(
specifier|final
name|DBObject
name|keys
parameter_list|)
throws|throws
name|MongoException
block|{
name|createIndex
argument_list|(
name|keys
argument_list|,
name|defaultOptions
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Forces creation of an index on a set of fields, if one does not already exist.      * @param keys      * @param options      * @throws MongoException      */
specifier|public
name|void
name|createIndex
parameter_list|(
name|DBObject
name|keys
parameter_list|,
name|DBObject
name|options
parameter_list|)
throws|throws
name|MongoException
block|{
name|createIndex
argument_list|(
name|keys
argument_list|,
name|options
argument_list|,
name|getDBEncoderFactory
argument_list|()
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Forces creation of an index on a set of fields, if one does not already exist.      * @param keys      * @param options      * @param encoder the DBEncoder to use      * @throws MongoException      */
specifier|public
specifier|abstract
name|void
name|createIndex
parameter_list|(
name|DBObject
name|keys
parameter_list|,
name|DBObject
name|options
parameter_list|,
name|DBEncoder
name|encoder
parameter_list|)
throws|throws
name|MongoException
function_decl|;
comment|/**      * Creates an ascending index on a field with default options, if one does not already exist.      * @param name name of field to index on      */
specifier|public
specifier|final
name|void
name|ensureIndex
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|ensureIndex
argument_list|(
operator|new
name|BasicDBObject
argument_list|(
name|name
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * calls {@link DBCollection#ensureIndex(com.mongodb.DBObject, com.mongodb.DBObject)} with default options      * @param keys an object with a key set of the fields desired for the index      * @throws MongoException      */
specifier|public
specifier|final
name|void
name|ensureIndex
parameter_list|(
specifier|final
name|DBObject
name|keys
parameter_list|)
throws|throws
name|MongoException
block|{
name|ensureIndex
argument_list|(
name|keys
argument_list|,
name|defaultOptions
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * calls {@link DBCollection#ensureIndex(com.mongodb.DBObject, java.lang.String, boolean)} with unique=false      * @param keys fields to use for index      * @param name an identifier for the index      * @throws MongoException      * @dochub indexes      */
specifier|public
name|void
name|ensureIndex
parameter_list|(
name|DBObject
name|keys
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|MongoException
block|{
name|ensureIndex
argument_list|(
name|keys
argument_list|,
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Ensures an index on this collection (that is, the index will be created if it does not exist).      * @param keys fields to use for index      * @param name an identifier for the index. If null or empty, the default name will be used.      * @param unique if the index should be unique      * @throws MongoException      */
specifier|public
name|void
name|ensureIndex
parameter_list|(
name|DBObject
name|keys
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|unique
parameter_list|)
throws|throws
name|MongoException
block|{
name|DBObject
name|options
init|=
name|defaultOptions
argument_list|(
name|keys
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|options
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|unique
condition|)
name|options
operator|.
name|put
argument_list|(
literal|"unique"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|ensureIndex
argument_list|(
name|keys
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates an index on a set of fields, if one does not already exist.      * @param keys an object with a key set of the fields desired for the index      * @param optionsIN options for the index (name, unique, etc)      * @throws MongoException      */
specifier|public
specifier|final
name|void
name|ensureIndex
parameter_list|(
specifier|final
name|DBObject
name|keys
parameter_list|,
specifier|final
name|DBObject
name|optionsIN
parameter_list|)
throws|throws
name|MongoException
block|{
if|if
condition|(
name|checkReadOnly
argument_list|(
literal|false
argument_list|)
condition|)
return|return;
specifier|final
name|DBObject
name|options
init|=
name|defaultOptions
argument_list|(
name|keys
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|k
range|:
name|optionsIN
operator|.
name|keySet
argument_list|()
control|)
name|options
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|optionsIN
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|name
init|=
name|options
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|_createdIndexes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
return|return;
name|createIndex
argument_list|(
name|keys
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|_createdIndexes
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Clears all indices that have not yet been applied to this collection.      */
specifier|public
name|void
name|resetIndexCache
parameter_list|()
block|{
name|_createdIndexes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|DBObject
name|defaultOptions
parameter_list|(
name|DBObject
name|keys
parameter_list|)
block|{
name|DBObject
name|o
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|o
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|genIndexName
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
name|o
operator|.
name|put
argument_list|(
literal|"ns"
argument_list|,
name|_fullName
argument_list|)
expr_stmt|;
return|return
name|o
return|;
block|}
comment|/**      * Convenience method to generate an index name from the set of fields it is over.      * @param keys the names of the fields used in this index      * @return a string representation of this index's fields      */
specifier|public
specifier|static
name|String
name|genIndexName
parameter_list|(
name|DBObject
name|keys
parameter_list|)
block|{
name|StringBuilder
name|name
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|keys
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|name
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
name|name
operator|.
name|append
argument_list|(
name|s
argument_list|)
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
name|Object
name|val
init|=
name|keys
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|Number
operator|||
name|val
operator|instanceof
name|String
condition|)
name|name
operator|.
name|append
argument_list|(
name|val
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|name
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// --- END INDEX CODE ---
comment|/**      * Set hint fields for this collection (to optimize queries).      * @param lst a list of<code>DBObject</code>s to be used as hints      */
specifier|public
name|void
name|setHintFields
parameter_list|(
name|List
argument_list|<
name|DBObject
argument_list|>
name|lst
parameter_list|)
block|{
name|_hintFields
operator|=
name|lst
expr_stmt|;
block|}
comment|/**      * Queries for an object in this collection.      * @param ref object for which to search      * @return an iterator over the results      * @dochub find      */
specifier|public
name|DBCursor
name|find
parameter_list|(
name|DBObject
name|ref
parameter_list|)
block|{
return|return
operator|new
name|DBCursor
argument_list|(
name|this
argument_list|,
name|ref
argument_list|,
literal|null
argument_list|,
name|getReadPreference
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Queries for an object in this collection.      *      *<p>      * An empty DBObject will match every document in the collection.      * Regardless of fields specified, the _id fields are always returned.      *</p>      *<p>      * An example that returns the "x" and "_id" fields for every document      * in the collection that has an "x" field:      *</p>      *<blockquote><pre>      * BasicDBObject keys = new BasicDBObject();      * keys.put("x", 1);      *      * DBCursor cursor = collection.find(new BasicDBObject(), keys);      *</pre></blockquote>      *      * @param ref object for which to search      * @param keys fields to return      * @return a cursor to iterate over results      * @dochub find      */
specifier|public
name|DBCursor
name|find
parameter_list|(
name|DBObject
name|ref
parameter_list|,
name|DBObject
name|keys
parameter_list|)
block|{
return|return
operator|new
name|DBCursor
argument_list|(
name|this
argument_list|,
name|ref
argument_list|,
name|keys
argument_list|,
name|getReadPreference
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Queries for all objects in this collection.      * @return a cursor which will iterate over every object      * @dochub find      */
specifier|public
name|DBCursor
name|find
parameter_list|()
block|{
return|return
operator|new
name|DBCursor
argument_list|(
name|this
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|getReadPreference
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns a single object from this collection.      * @return the object found, or<code>null</code> if the collection is empty      * @throws MongoException      */
specifier|public
name|DBObject
name|findOne
parameter_list|()
throws|throws
name|MongoException
block|{
return|return
name|findOne
argument_list|(
operator|new
name|BasicDBObject
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns a single object from this collection matching the query.      * @param o the query object      * @return the object found, or<code>null</code> if no such object exists      * @throws MongoException      */
specifier|public
name|DBObject
name|findOne
parameter_list|(
name|DBObject
name|o
parameter_list|)
throws|throws
name|MongoException
block|{
return|return
name|findOne
argument_list|(
name|o
argument_list|,
literal|null
argument_list|,
name|getReadPreference
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns a single object from this collection matching the query.      * @param o the query object      * @param fields fields to return      * @return the object found, or<code>null</code> if no such object exists      * @dochub find      */
specifier|public
name|DBObject
name|findOne
parameter_list|(
name|DBObject
name|o
parameter_list|,
name|DBObject
name|fields
parameter_list|)
block|{
return|return
name|findOne
argument_list|(
name|o
argument_list|,
name|fields
argument_list|,
name|getReadPreference
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns a single object from this collection matching the query.      * @param o the query object      * @param fields fields to return      * @return the object found, or<code>null</code> if no such object exists      * @dochub find      */
specifier|public
name|DBObject
name|findOne
parameter_list|(
name|DBObject
name|o
parameter_list|,
name|DBObject
name|fields
parameter_list|,
name|ReadPreference
name|readPref
parameter_list|)
block|{
name|Iterator
argument_list|<
name|DBObject
argument_list|>
name|i
init|=
name|__find
argument_list|(
name|o
argument_list|,
name|fields
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|getOptions
argument_list|()
argument_list|,
name|readPref
argument_list|,
name|_decoderFactory
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|DBObject
name|obj
init|=
operator|(
name|i
operator|==
literal|null
condition|?
literal|null
else|:
name|i
operator|.
name|next
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
operator|&&
operator|(
name|fields
operator|!=
literal|null
operator|&&
name|fields
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|obj
operator|.
name|markAsPartialObject
argument_list|()
expr_stmt|;
block|}
return|return
name|obj
return|;
block|}
comment|/**      * calls {@link DBCollection#apply(com.mongodb.DBObject, boolean)} with ensureID=true      * @param o<code>DBObject</code> to which to add fields      * @return the modified parameter object      */
specifier|public
specifier|final
name|Object
name|apply
parameter_list|(
name|DBObject
name|o
parameter_list|)
block|{
return|return
name|apply
argument_list|(
name|o
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * calls {@link DBCollection#doapply(com.mongodb.DBObject)}, optionally adding an automatic _id field      * @param jo object to add fields to      * @param ensureID whether to add an<code>_id</code> field      * @return the modified object<code>o</code>      */
specifier|public
specifier|final
name|Object
name|apply
parameter_list|(
name|DBObject
name|jo
parameter_list|,
name|boolean
name|ensureID
parameter_list|)
block|{
name|Object
name|id
init|=
name|jo
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ensureID
operator|&&
name|id
operator|==
literal|null
condition|)
block|{
name|id
operator|=
name|ObjectId
operator|.
name|get
argument_list|()
expr_stmt|;
name|jo
operator|.
name|put
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|doapply
argument_list|(
name|jo
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
comment|/**      * calls {@link DBCollection#save(com.mongodb.DBObject, com.mongodb.WriteConcern)} with default WriteConcern      * @param jo the<code>DBObject</code> to save      *        will add<code>_id</code> field to jo if needed      * @return      */
specifier|public
specifier|final
name|WriteResult
name|save
parameter_list|(
name|DBObject
name|jo
parameter_list|)
block|{
return|return
name|save
argument_list|(
name|jo
argument_list|,
name|getWriteConcern
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Saves an object to this collection (does insert or update based on the object _id).      * @param jo the<code>DBObject</code> to save      * @param concern the write concern      * @return      * @throws MongoException      */
specifier|public
specifier|final
name|WriteResult
name|save
parameter_list|(
name|DBObject
name|jo
parameter_list|,
name|WriteConcern
name|concern
parameter_list|)
throws|throws
name|MongoException
block|{
if|if
condition|(
name|checkReadOnly
argument_list|(
literal|true
argument_list|)
condition|)
return|return
literal|null
return|;
name|_checkObject
argument_list|(
name|jo
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Object
name|id
init|=
name|jo
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
operator|(
name|id
operator|instanceof
name|ObjectId
operator|&&
operator|(
operator|(
name|ObjectId
operator|)
name|id
operator|)
operator|.
name|isNew
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
name|id
operator|instanceof
name|ObjectId
condition|)
operator|(
operator|(
name|ObjectId
operator|)
name|id
operator|)
operator|.
name|notNew
argument_list|()
expr_stmt|;
if|if
condition|(
name|concern
operator|==
literal|null
condition|)
return|return
name|insert
argument_list|(
name|jo
argument_list|)
return|;
else|else
return|return
name|insert
argument_list|(
name|jo
argument_list|,
name|concern
argument_list|)
return|;
block|}
name|DBObject
name|q
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|q
operator|.
name|put
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|concern
operator|==
literal|null
condition|)
return|return
name|update
argument_list|(
name|q
argument_list|,
name|jo
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
return|;
else|else
return|return
name|update
argument_list|(
name|q
argument_list|,
name|jo
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|concern
argument_list|)
return|;
block|}
comment|// ---- DB COMMANDS ----
comment|/**      * Drops all indices from this collection      * @throws MongoException      */
specifier|public
name|void
name|dropIndexes
parameter_list|()
throws|throws
name|MongoException
block|{
name|dropIndexes
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Drops an index from this collection      * @param name the index name      * @throws MongoException      */
specifier|public
name|void
name|dropIndexes
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MongoException
block|{
name|DBObject
name|cmd
init|=
name|BasicDBObjectBuilder
operator|.
name|start
argument_list|()
operator|.
name|add
argument_list|(
literal|"deleteIndexes"
argument_list|,
name|getName
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"index"
argument_list|,
name|name
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|resetIndexCache
argument_list|()
expr_stmt|;
name|CommandResult
name|res
init|=
name|_db
operator|.
name|command
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|ok
argument_list|()
operator|||
name|res
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"ns not found"
argument_list|)
condition|)
return|return;
name|res
operator|.
name|throwOnError
argument_list|()
expr_stmt|;
block|}
comment|/**      * Drops (deletes) this collection. Use with care.      * @throws MongoException      */
specifier|public
name|void
name|drop
parameter_list|()
throws|throws
name|MongoException
block|{
name|resetIndexCache
argument_list|()
expr_stmt|;
name|CommandResult
name|res
init|=
name|_db
operator|.
name|command
argument_list|(
name|BasicDBObjectBuilder
operator|.
name|start
argument_list|()
operator|.
name|add
argument_list|(
literal|"drop"
argument_list|,
name|getName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|ok
argument_list|()
operator|||
name|res
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"ns not found"
argument_list|)
condition|)
return|return;
name|res
operator|.
name|throwOnError
argument_list|()
expr_stmt|;
block|}
comment|/**      * returns the number of documents in this collection.      * @return      * @throws MongoException      */
specifier|public
name|long
name|count
parameter_list|()
throws|throws
name|MongoException
block|{
return|return
name|getCount
argument_list|(
operator|new
name|BasicDBObject
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * returns the number of documents that match a query.      * @param query query to match      * @return      * @throws MongoException      */
specifier|public
name|long
name|count
parameter_list|(
name|DBObject
name|query
parameter_list|)
throws|throws
name|MongoException
block|{
return|return
name|getCount
argument_list|(
name|query
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      *  calls {@link DBCollection#getCount(com.mongodb.DBObject, com.mongodb.DBObject)} with an empty query and null fields.      *  @return number of documents that match query      * @throws MongoException      */
specifier|public
name|long
name|getCount
parameter_list|()
throws|throws
name|MongoException
block|{
return|return
name|getCount
argument_list|(
operator|new
name|BasicDBObject
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      *  calls {@link DBCollection#getCount(com.mongodb.DBObject, com.mongodb.DBObject)} with null fields.      *  @param query query to match      *  @return      * @throws MongoException      */
specifier|public
name|long
name|getCount
parameter_list|(
name|DBObject
name|query
parameter_list|)
throws|throws
name|MongoException
block|{
return|return
name|getCount
argument_list|(
name|query
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      *  calls {@link DBCollection#getCount(com.mongodb.DBObject, com.mongodb.DBObject, long, long)} with limit=0 and skip=0      *  @param query query to match      *  @param fields fields to return      *  @return      * @throws MongoException      */
specifier|public
name|long
name|getCount
parameter_list|(
name|DBObject
name|query
parameter_list|,
name|DBObject
name|fields
parameter_list|)
throws|throws
name|MongoException
block|{
return|return
name|getCount
argument_list|(
name|query
argument_list|,
name|fields
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      *  Returns the number of documents in the collection      *  that match the specified query      *      *  @param query query to select documents to count      *  @param fields fields to return      *  @param limit limit the count to this value      * @param skip number of entries to skip      * @return number of documents that match query and fields      * @throws MongoException      */
specifier|public
name|long
name|getCount
parameter_list|(
name|DBObject
name|query
parameter_list|,
name|DBObject
name|fields
parameter_list|,
name|long
name|limit
parameter_list|,
name|long
name|skip
parameter_list|)
throws|throws
name|MongoException
block|{
name|BasicDBObject
name|cmd
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|put
argument_list|(
literal|"count"
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|put
argument_list|(
literal|"query"
argument_list|,
name|query
argument_list|)
expr_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
name|cmd
operator|.
name|put
argument_list|(
literal|"fields"
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|limit
operator|>
literal|0
condition|)
name|cmd
operator|.
name|put
argument_list|(
literal|"limit"
argument_list|,
name|limit
argument_list|)
expr_stmt|;
if|if
condition|(
name|skip
operator|>
literal|0
condition|)
name|cmd
operator|.
name|put
argument_list|(
literal|"skip"
argument_list|,
name|skip
argument_list|)
expr_stmt|;
name|CommandResult
name|res
init|=
name|_db
operator|.
name|command
argument_list|(
name|cmd
argument_list|,
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|ok
argument_list|()
condition|)
block|{
name|String
name|errmsg
init|=
name|res
operator|.
name|getErrorMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|errmsg
operator|.
name|equals
argument_list|(
literal|"ns does not exist"
argument_list|)
operator|||
name|errmsg
operator|.
name|equals
argument_list|(
literal|"ns missing"
argument_list|)
condition|)
block|{
comment|// for now, return 0 - lets pretend it does exist
return|return
literal|0
return|;
block|}
name|res
operator|.
name|throwOnError
argument_list|()
expr_stmt|;
block|}
return|return
name|res
operator|.
name|getLong
argument_list|(
literal|"n"
argument_list|)
return|;
block|}
comment|/**      * Calls {@link DBCollection#rename(java.lang.String, boolean)} with dropTarget=false      * @param newName new collection name (not a full namespace)      * @return the new collection      * @throws MongoException      */
specifier|public
name|DBCollection
name|rename
parameter_list|(
name|String
name|newName
parameter_list|)
throws|throws
name|MongoException
block|{
return|return
name|rename
argument_list|(
name|newName
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * renames of this collection to newName      * @param newName new collection name (not a full namespace)      * @param dropTarget if a collection with the new name exists, whether or not to drop it      * @return the new collection      * @throws MongoException      */
specifier|public
name|DBCollection
name|rename
parameter_list|(
name|String
name|newName
parameter_list|,
name|boolean
name|dropTarget
parameter_list|)
throws|throws
name|MongoException
block|{
name|CommandResult
name|ret
init|=
name|_db
operator|.
name|getSisterDB
argument_list|(
literal|"admin"
argument_list|)
operator|.
name|command
argument_list|(
name|BasicDBObjectBuilder
operator|.
name|start
argument_list|()
operator|.
name|add
argument_list|(
literal|"renameCollection"
argument_list|,
name|_fullName
argument_list|)
operator|.
name|add
argument_list|(
literal|"to"
argument_list|,
name|_db
operator|.
name|_name
operator|+
literal|"."
operator|+
name|newName
argument_list|)
operator|.
name|add
argument_list|(
literal|"dropTarget"
argument_list|,
name|dropTarget
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|.
name|throwOnError
argument_list|()
expr_stmt|;
name|resetIndexCache
argument_list|()
expr_stmt|;
return|return
name|_db
operator|.
name|getCollection
argument_list|(
name|newName
argument_list|)
return|;
block|}
comment|/**      * calls {@link DBCollection#group(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String)} with finalize=null      * @param key - { a : true }      * @param cond - optional condition on query      * @param reduce javascript reduce function      * @param initial initial value for first match on a key      * @return      * @throws MongoException      * @see<a href="http://www.mongodb.org/display/DOCS/Aggregation">http://www.mongodb.org/display/DOCS/Aggregation</a>      */
specifier|public
name|DBObject
name|group
parameter_list|(
name|DBObject
name|key
parameter_list|,
name|DBObject
name|cond
parameter_list|,
name|DBObject
name|initial
parameter_list|,
name|String
name|reduce
parameter_list|)
throws|throws
name|MongoException
block|{
return|return
name|group
argument_list|(
name|key
argument_list|,
name|cond
argument_list|,
name|initial
argument_list|,
name|reduce
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Applies a group operation      * @param key - { a : true }      * @param cond - optional condition on query      * @param reduce javascript reduce function      * @param initial initial value for first match on a key      * @param finalize An optional function that can operate on the result(s) of the reduce function.      * @return      * @throws MongoException      * @see<a href="http://www.mongodb.org/display/DOCS/Aggregation">http://www.mongodb.org/display/DOCS/Aggregation</a>      */
specifier|public
name|DBObject
name|group
parameter_list|(
name|DBObject
name|key
parameter_list|,
name|DBObject
name|cond
parameter_list|,
name|DBObject
name|initial
parameter_list|,
name|String
name|reduce
parameter_list|,
name|String
name|finalize
parameter_list|)
throws|throws
name|MongoException
block|{
name|GroupCommand
name|cmd
init|=
operator|new
name|GroupCommand
argument_list|(
name|this
argument_list|,
name|key
argument_list|,
name|cond
argument_list|,
name|initial
argument_list|,
name|reduce
argument_list|,
name|finalize
argument_list|)
decl_stmt|;
return|return
name|group
argument_list|(
name|cmd
argument_list|)
return|;
block|}
comment|/**      * Applies a group operation      * @param cmd the group command      * @return      * @throws MongoException      * @see<a href="http://www.mongodb.org/display/DOCS/Aggregation">http://www.mongodb.org/display/DOCS/Aggregation</a>      */
specifier|public
name|DBObject
name|group
parameter_list|(
name|GroupCommand
name|cmd
parameter_list|)
block|{
name|CommandResult
name|res
init|=
name|_db
operator|.
name|command
argument_list|(
name|cmd
operator|.
name|toDBObject
argument_list|()
argument_list|,
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
name|res
operator|.
name|throwOnError
argument_list|()
expr_stmt|;
return|return
operator|(
name|DBObject
operator|)
name|res
operator|.
name|get
argument_list|(
literal|"retval"
argument_list|)
return|;
block|}
comment|/**      * @deprecated prefer the {@link DBCollection#group(com.mongodb.GroupCommand)} which is more standard      * Applies a group operation      * @param args object representing the arguments to the group function      * @return      * @throws MongoException      * @see<a href="http://www.mongodb.org/display/DOCS/Aggregation">http://www.mongodb.org/display/DOCS/Aggregation</a>      */
annotation|@
name|Deprecated
specifier|public
name|DBObject
name|group
parameter_list|(
name|DBObject
name|args
parameter_list|)
throws|throws
name|MongoException
block|{
name|args
operator|.
name|put
argument_list|(
literal|"ns"
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|CommandResult
name|res
init|=
name|_db
operator|.
name|command
argument_list|(
operator|new
name|BasicDBObject
argument_list|(
literal|"group"
argument_list|,
name|args
argument_list|)
argument_list|,
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
name|res
operator|.
name|throwOnError
argument_list|()
expr_stmt|;
return|return
operator|(
name|DBObject
operator|)
name|res
operator|.
name|get
argument_list|(
literal|"retval"
argument_list|)
return|;
block|}
comment|/**      * find distinct values for a key      * @param key      * @return      */
specifier|public
name|List
name|distinct
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|distinct
argument_list|(
name|key
argument_list|,
operator|new
name|BasicDBObject
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * find distinct values for a key      * @param key      * @param query query to match      * @return      */
specifier|public
name|List
name|distinct
parameter_list|(
name|String
name|key
parameter_list|,
name|DBObject
name|query
parameter_list|)
block|{
name|DBObject
name|c
init|=
name|BasicDBObjectBuilder
operator|.
name|start
argument_list|()
operator|.
name|add
argument_list|(
literal|"distinct"
argument_list|,
name|getName
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"key"
argument_list|,
name|key
argument_list|)
operator|.
name|add
argument_list|(
literal|"query"
argument_list|,
name|query
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|CommandResult
name|res
init|=
name|_db
operator|.
name|command
argument_list|(
name|c
argument_list|,
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
name|res
operator|.
name|throwOnError
argument_list|()
expr_stmt|;
return|return
call|(
name|List
call|)
argument_list|(
name|res
operator|.
name|get
argument_list|(
literal|"values"
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * performs a map reduce operation      * Runs the command in REPLACE output mode (saves to named collection)      *      * @param map      *            map function in javascript code      * @param outputTarget      *            optional - leave null if want to use temp collection      * @param reduce      *            reduce function in javascript code      * @param query      *            to match      * @return      * @throws MongoException      * @dochub mapreduce      */
specifier|public
name|MapReduceOutput
name|mapReduce
parameter_list|(
name|String
name|map
parameter_list|,
name|String
name|reduce
parameter_list|,
name|String
name|outputTarget
parameter_list|,
name|DBObject
name|query
parameter_list|)
throws|throws
name|MongoException
block|{
return|return
name|mapReduce
argument_list|(
operator|new
name|MapReduceCommand
argument_list|(
name|this
argument_list|,
name|map
argument_list|,
name|reduce
argument_list|,
name|outputTarget
argument_list|,
name|MapReduceCommand
operator|.
name|OutputType
operator|.
name|REPLACE
argument_list|,
name|query
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * performs a map reduce operation      * Specify an outputType to control job execution      * * INLINE - Return results inline      * * REPLACE - Replace the output collection with the job output      * * MERGE - Merge the job output with the existing contents of outputTarget      * * REDUCE - Reduce the job output with the existing contents of      * outputTarget      *      * @param map      *            map function in javascript code      * @param outputTarget      *            optional - leave null if want to use temp collection      * @param outputType      *            set the type of job output      * @param reduce      *            reduce function in javascript code      * @param query      *            to match      * @return      * @throws MongoException      * @dochub mapreduce      */
specifier|public
name|MapReduceOutput
name|mapReduce
parameter_list|(
name|String
name|map
parameter_list|,
name|String
name|reduce
parameter_list|,
name|String
name|outputTarget
parameter_list|,
name|MapReduceCommand
operator|.
name|OutputType
name|outputType
parameter_list|,
name|DBObject
name|query
parameter_list|)
throws|throws
name|MongoException
block|{
return|return
name|mapReduce
argument_list|(
operator|new
name|MapReduceCommand
argument_list|(
name|this
argument_list|,
name|map
argument_list|,
name|reduce
argument_list|,
name|outputTarget
argument_list|,
name|outputType
argument_list|,
name|query
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * performs a map reduce operation      *      * @param command      *            object representing the parameters      * @return      * @throws MongoException      */
specifier|public
name|MapReduceOutput
name|mapReduce
parameter_list|(
name|MapReduceCommand
name|command
parameter_list|)
throws|throws
name|MongoException
block|{
name|DBObject
name|cmd
init|=
name|command
operator|.
name|toDBObject
argument_list|()
decl_stmt|;
comment|// if type in inline, then query options like slaveOk is fine
name|CommandResult
name|res
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|getOutputType
argument_list|()
operator|==
name|MapReduceCommand
operator|.
name|OutputType
operator|.
name|INLINE
condition|)
name|res
operator|=
name|_db
operator|.
name|command
argument_list|(
name|cmd
argument_list|,
name|getOptions
argument_list|()
argument_list|,
name|command
operator|.
name|getReadPreference
argument_list|()
operator|!=
literal|null
condition|?
name|command
operator|.
name|getReadPreference
argument_list|()
else|:
name|getReadPreference
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|res
operator|=
name|_db
operator|.
name|command
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|res
operator|.
name|throwOnError
argument_list|()
expr_stmt|;
return|return
operator|new
name|MapReduceOutput
argument_list|(
name|this
argument_list|,
name|cmd
argument_list|,
name|res
argument_list|)
return|;
block|}
comment|/**      * performs a map reduce operation      *      * @param command      *            object representing the parameters      * @return      * @throws MongoException      */
specifier|public
name|MapReduceOutput
name|mapReduce
parameter_list|(
name|DBObject
name|command
parameter_list|)
throws|throws
name|MongoException
block|{
if|if
condition|(
name|command
operator|.
name|get
argument_list|(
literal|"mapreduce"
argument_list|)
operator|==
literal|null
operator|&&
name|command
operator|.
name|get
argument_list|(
literal|"mapReduce"
argument_list|)
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"need mapreduce arg"
argument_list|)
throw|;
name|CommandResult
name|res
init|=
name|_db
operator|.
name|command
argument_list|(
name|command
argument_list|)
decl_stmt|;
name|res
operator|.
name|throwOnError
argument_list|()
expr_stmt|;
return|return
operator|new
name|MapReduceOutput
argument_list|(
name|this
argument_list|,
name|command
argument_list|,
name|res
argument_list|)
return|;
block|}
comment|/**      *   Return a list of the indexes for this collection.  Each object      *   in the list is the "info document" from MongoDB      *      *   @return list of index documents      */
specifier|public
name|List
argument_list|<
name|DBObject
argument_list|>
name|getIndexInfo
parameter_list|()
block|{
name|BasicDBObject
name|cmd
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|put
argument_list|(
literal|"ns"
argument_list|,
name|getFullName
argument_list|()
argument_list|)
expr_stmt|;
name|DBCursor
name|cur
init|=
name|_db
operator|.
name|getCollection
argument_list|(
literal|"system.indexes"
argument_list|)
operator|.
name|find
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DBObject
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|DBObject
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|cur
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|cur
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|/**      * Drops an index from this collection      * @param keys keys of the index      * @throws MongoException      */
specifier|public
name|void
name|dropIndex
parameter_list|(
name|DBObject
name|keys
parameter_list|)
throws|throws
name|MongoException
block|{
name|dropIndexes
argument_list|(
name|genIndexName
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Drops an index from this collection      * @param name name of index to drop      * @throws MongoException      */
specifier|public
name|void
name|dropIndex
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MongoException
block|{
name|dropIndexes
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * gets the collections statistics ("collstats" command)      * @return      */
specifier|public
name|CommandResult
name|getStats
parameter_list|()
block|{
return|return
name|getDB
argument_list|()
operator|.
name|command
argument_list|(
operator|new
name|BasicDBObject
argument_list|(
literal|"collstats"
argument_list|,
name|getName
argument_list|()
argument_list|)
argument_list|,
name|getOptions
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * returns whether or not this is a capped collection      * @return      */
specifier|public
name|boolean
name|isCapped
parameter_list|()
block|{
name|CommandResult
name|stats
init|=
name|getStats
argument_list|()
decl_stmt|;
name|Object
name|capped
init|=
name|stats
operator|.
name|get
argument_list|(
literal|"capped"
argument_list|)
decl_stmt|;
return|return
operator|(
name|capped
operator|!=
literal|null
operator|&&
operator|(
name|Integer
operator|)
name|capped
operator|==
literal|1
operator|)
return|;
block|}
comment|// ------
comment|/**      * Initializes a new collection. No operation is actually performed on the database.      * @param base database in which to create the collection      * @param name the name of the collection      */
specifier|protected
name|DBCollection
parameter_list|(
name|DB
name|base
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|_db
operator|=
name|base
expr_stmt|;
name|_name
operator|=
name|name
expr_stmt|;
name|_fullName
operator|=
name|_db
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|name
expr_stmt|;
name|_options
operator|=
operator|new
name|Bytes
operator|.
name|OptionHolder
argument_list|(
name|_db
operator|.
name|_options
argument_list|)
expr_stmt|;
name|_decoderFactory
operator|=
name|_db
operator|.
name|getMongo
argument_list|()
operator|.
name|getMongoOptions
argument_list|()
operator|.
name|dbDecoderFactory
expr_stmt|;
name|_encoderFactory
operator|=
name|_db
operator|.
name|getMongo
argument_list|()
operator|.
name|getMongoOptions
argument_list|()
operator|.
name|dbEncoderFactory
expr_stmt|;
block|}
specifier|protected
name|DBObject
name|_checkObject
parameter_list|(
name|DBObject
name|o
parameter_list|,
name|boolean
name|canBeNull
parameter_list|,
name|boolean
name|query
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|canBeNull
condition|)
return|return
literal|null
return|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"can't be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|o
operator|.
name|isPartialObject
argument_list|()
operator|&&
operator|!
name|query
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"can't save partial objects"
argument_list|)
throw|;
if|if
condition|(
operator|!
name|query
condition|)
block|{
name|_checkKeys
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
return|return
name|o
return|;
block|}
comment|/**      * Checks key strings for invalid characters.      */
specifier|private
name|void
name|_checkKeys
parameter_list|(
name|DBObject
name|o
parameter_list|)
block|{
for|for
control|(
name|String
name|s
range|:
name|o
operator|.
name|keySet
argument_list|()
control|)
block|{
name|validateKey
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|Object
name|inner
init|=
name|o
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|inner
operator|instanceof
name|DBObject
condition|)
block|{
name|_checkKeys
argument_list|(
operator|(
name|DBObject
operator|)
name|inner
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inner
operator|instanceof
name|Map
condition|)
block|{
name|_checkKeys
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|inner
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Checks key strings for invalid characters.      */
specifier|private
name|void
name|_checkKeys
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|o
parameter_list|)
block|{
for|for
control|(
name|String
name|s
range|:
name|o
operator|.
name|keySet
argument_list|()
control|)
block|{
name|validateKey
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|Object
name|inner
init|=
name|o
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|inner
operator|instanceof
name|DBObject
condition|)
block|{
name|_checkKeys
argument_list|(
operator|(
name|DBObject
operator|)
name|inner
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inner
operator|instanceof
name|Map
condition|)
block|{
name|_checkKeys
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|inner
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Check for invalid key names      * @param s the string field/key to check      * @exception IllegalArgumentException if the key is not valid.      */
specifier|private
name|void
name|validateKey
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"fields stored in the db can't have . in them. (Bad Key: '"
operator|+
name|s
operator|+
literal|"')"
argument_list|)
throw|;
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"$"
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"fields stored in the db can't start with '$' (Bad Key: '"
operator|+
name|s
operator|+
literal|"')"
argument_list|)
throw|;
block|}
comment|/**      * Finds a collection that is prefixed with this collection's name.      * A typical use of this might be      *<blockquote><pre>      *    DBCollection users = mongo.getCollection( "wiki" ).getCollection( "users" );      *</pre></blockquote>      * Which is equivalent to      *<pre><blockquote>      *   DBCollection users = mongo.getCollection( "wiki.users" );      *</pre></blockquote>      * @param n the name of the collection to find      * @return the matching collection      */
specifier|public
name|DBCollection
name|getCollection
parameter_list|(
name|String
name|n
parameter_list|)
block|{
return|return
name|_db
operator|.
name|getCollection
argument_list|(
name|_name
operator|+
literal|"."
operator|+
name|n
argument_list|)
return|;
block|}
comment|/**      * Returns the name of this collection.      * @return  the name of this collection      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|_name
return|;
block|}
comment|/**      * Returns the full name of this collection, with the database name as a prefix.      * @return  the name of this collection      */
specifier|public
name|String
name|getFullName
parameter_list|()
block|{
return|return
name|_fullName
return|;
block|}
comment|/**      * Returns the database this collection is a member of.      * @return this collection's database      */
specifier|public
name|DB
name|getDB
parameter_list|()
block|{
return|return
name|_db
return|;
block|}
comment|/**      * Returns if this collection's database is read-only      * @param strict if an exception should be thrown if the database is read-only      * @return if this collection's database is read-only      * @throws RuntimeException if the database is read-only and<code>strict</code> is set      */
specifier|protected
name|boolean
name|checkReadOnly
parameter_list|(
name|boolean
name|strict
parameter_list|)
block|{
if|if
condition|(
operator|!
name|_db
operator|.
name|_readOnly
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|strict
condition|)
return|return
literal|true
return|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"db is read only"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|_fullName
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|_name
return|;
block|}
comment|/**      * Sets a default class for objects in this collection; null resets the class to nothing.      * @param c the class      * @throws IllegalArgumentException if<code>c</code> is not a DBObject      */
specifier|public
name|void
name|setObjectClass
parameter_list|(
name|Class
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
comment|// reset
name|_wrapper
operator|=
literal|null
expr_stmt|;
name|_objectClass
operator|=
literal|null
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|DBObject
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|c
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|c
operator|.
name|getName
argument_list|()
operator|+
literal|" is not a DBObject"
argument_list|)
throw|;
name|_objectClass
operator|=
name|c
expr_stmt|;
if|if
condition|(
name|ReflectionDBObject
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|c
argument_list|)
condition|)
name|_wrapper
operator|=
name|ReflectionDBObject
operator|.
name|getWrapper
argument_list|(
name|c
argument_list|)
expr_stmt|;
else|else
name|_wrapper
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Gets the default class for objects in the collection      * @return the class      */
specifier|public
name|Class
name|getObjectClass
parameter_list|()
block|{
return|return
name|_objectClass
return|;
block|}
comment|/**      * sets the internal class      * @param path      * @param c      */
specifier|public
name|void
name|setInternalClass
parameter_list|(
name|String
name|path
parameter_list|,
name|Class
name|c
parameter_list|)
block|{
name|_internalClass
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
comment|/**      * gets the internal class      * @param path      * @return      */
specifier|protected
name|Class
name|getInternalClass
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|Class
name|c
init|=
name|_internalClass
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
return|return
name|c
return|;
if|if
condition|(
name|_wrapper
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|_wrapper
operator|.
name|getInternalClass
argument_list|(
name|path
argument_list|)
return|;
block|}
comment|/**      * Set the write concern for this collection. Will be used for      * writes to this collection. Overrides any setting of write      * concern at the DB level. See the documentation for      * {@link WriteConcern} for more information.      *      * @param concern write concern to use      */
specifier|public
name|void
name|setWriteConcern
parameter_list|(
name|WriteConcern
name|concern
parameter_list|)
block|{
name|_concern
operator|=
name|concern
expr_stmt|;
block|}
comment|/**      * Get the write concern for this collection.      * @return      */
specifier|public
name|WriteConcern
name|getWriteConcern
parameter_list|()
block|{
if|if
condition|(
name|_concern
operator|!=
literal|null
condition|)
return|return
name|_concern
return|;
return|return
name|_db
operator|.
name|getWriteConcern
argument_list|()
return|;
block|}
comment|/**      * Sets the read preference for this collection. Will be used as default      * for reads from this collection; overrides DB& Connection level settings.      * See the * documentation for {@link ReadPreference} for more information.      *      * @param preference Read Preference to use      */
specifier|public
name|void
name|setReadPreference
parameter_list|(
name|ReadPreference
name|preference
parameter_list|)
block|{
name|_readPref
operator|=
name|preference
expr_stmt|;
block|}
comment|/**      * Gets the read preference      * @return      */
specifier|public
name|ReadPreference
name|getReadPreference
parameter_list|()
block|{
if|if
condition|(
name|_readPref
operator|!=
literal|null
condition|)
return|return
name|_readPref
return|;
return|return
name|_db
operator|.
name|getReadPreference
argument_list|()
return|;
block|}
comment|/**      * makes this query ok to run on a slave node      *      * @deprecated Replaced with ReadPreference.SECONDARY      * @see com.mongodb.ReadPreference.SECONDARY      */
annotation|@
name|Deprecated
specifier|public
name|void
name|slaveOk
parameter_list|()
block|{
name|addOption
argument_list|(
name|Bytes
operator|.
name|QUERYOPTION_SLAVEOK
argument_list|)
expr_stmt|;
block|}
comment|/**      * adds a default query option      * @param option      */
specifier|public
name|void
name|addOption
parameter_list|(
name|int
name|option
parameter_list|)
block|{
name|_options
operator|.
name|add
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
comment|/**      * sets the default query options      * @param options      */
specifier|public
name|void
name|setOptions
parameter_list|(
name|int
name|options
parameter_list|)
block|{
name|_options
operator|.
name|set
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**      * resets the default query options      */
specifier|public
name|void
name|resetOptions
parameter_list|()
block|{
name|_options
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|/**      * gets the default query options      * @return      */
specifier|public
name|int
name|getOptions
parameter_list|()
block|{
return|return
name|_options
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|setDBDecoderFactory
parameter_list|(
name|DBDecoderFactory
name|fact
parameter_list|)
block|{
if|if
condition|(
name|fact
operator|==
literal|null
condition|)
name|_decoderFactory
operator|=
name|_db
operator|.
name|getMongo
argument_list|()
operator|.
name|getMongoOptions
argument_list|()
operator|.
name|dbDecoderFactory
expr_stmt|;
else|else
name|_decoderFactory
operator|=
name|fact
expr_stmt|;
block|}
specifier|public
name|DBDecoderFactory
name|getDBDecoderFactory
parameter_list|()
block|{
return|return
name|_decoderFactory
return|;
block|}
specifier|public
name|void
name|setDBEncoderFactory
parameter_list|(
name|DBEncoderFactory
name|fact
parameter_list|)
block|{
if|if
condition|(
name|fact
operator|==
literal|null
condition|)
name|_encoderFactory
operator|=
name|_db
operator|.
name|getMongo
argument_list|()
operator|.
name|getMongoOptions
argument_list|()
operator|.
name|dbEncoderFactory
expr_stmt|;
else|else
name|_encoderFactory
operator|=
name|fact
expr_stmt|;
block|}
specifier|public
name|DBEncoderFactory
name|getDBEncoderFactory
parameter_list|()
block|{
return|return
name|_encoderFactory
return|;
block|}
specifier|final
name|DB
name|_db
decl_stmt|;
specifier|final
specifier|protected
name|String
name|_name
decl_stmt|;
specifier|final
specifier|protected
name|String
name|_fullName
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|DBObject
argument_list|>
name|_hintFields
decl_stmt|;
specifier|private
name|WriteConcern
name|_concern
init|=
literal|null
decl_stmt|;
specifier|private
name|ReadPreference
name|_readPref
init|=
literal|null
decl_stmt|;
specifier|private
name|DBDecoderFactory
name|_decoderFactory
decl_stmt|;
specifier|private
name|DBEncoderFactory
name|_encoderFactory
decl_stmt|;
specifier|final
name|Bytes
operator|.
name|OptionHolder
name|_options
decl_stmt|;
specifier|protected
name|Class
name|_objectClass
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|_internalClass
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|ReflectionDBObject
operator|.
name|JavaWrapper
name|_wrapper
init|=
literal|null
decl_stmt|;
specifier|final
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|_createdIndexes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

