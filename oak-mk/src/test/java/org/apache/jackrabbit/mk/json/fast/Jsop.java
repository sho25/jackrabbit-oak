begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|fast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_comment
comment|/**  * A Jsop object.  */
end_comment

begin_class
specifier|public
class|class
name|Jsop
block|{
specifier|protected
name|String
name|jsop
decl_stmt|;
specifier|protected
name|int
name|start
decl_stmt|,
name|end
decl_stmt|;
name|Jsop
parameter_list|(
name|String
name|jsop
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|this
operator|.
name|jsop
operator|=
name|jsop
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|"null"
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
return|return
name|JsopBuilder
operator|.
name|encode
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
return|;
block|}
return|return
name|o
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Object
name|parse
parameter_list|(
name|String
name|jsop
parameter_list|)
block|{
return|return
name|parse
argument_list|(
name|jsop
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Object
name|parse
parameter_list|(
name|String
name|jsop
parameter_list|,
name|int
name|start
parameter_list|)
block|{
if|if
condition|(
name|jsop
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|char
name|c
init|=
name|jsop
operator|.
name|charAt
argument_list|(
name|start
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'{'
case|:
return|return
operator|new
name|JsopObject
argument_list|(
name|jsop
argument_list|,
name|start
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
case|case
literal|'['
case|:
return|return
operator|new
name|JsopArray
argument_list|(
name|jsop
argument_list|,
name|start
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
case|case
literal|'n'
case|:
return|return
literal|null
return|;
case|case
literal|'t'
case|:
return|return
name|Boolean
operator|.
name|TRUE
return|;
case|case
literal|'f'
case|:
return|return
name|Boolean
operator|.
name|FALSE
return|;
case|case
literal|'\"'
case|:
return|return
name|readString
argument_list|(
name|jsop
argument_list|,
name|start
operator|+
literal|1
argument_list|)
return|;
case|case
literal|'-'
case|:
return|return
name|readNumber
argument_list|(
name|jsop
argument_list|,
name|start
argument_list|)
return|;
default|default:
if|if
condition|(
name|c
operator|>=
literal|'0'
operator|&&
name|c
operator|<=
literal|'9'
condition|)
block|{
return|return
name|readNumber
argument_list|(
name|jsop
argument_list|,
name|start
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid jsop: "
operator|+
name|jsop
operator|.
name|substring
argument_list|(
name|start
argument_list|)
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|String
name|readString
parameter_list|(
name|String
name|j
parameter_list|,
name|int
name|start
parameter_list|)
block|{
name|int
name|pos
init|=
name|start
decl_stmt|;
name|int
name|length
init|=
name|j
operator|.
name|length
argument_list|()
decl_stmt|;
name|boolean
name|escaped
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|length
condition|)
block|{
name|char
name|c
init|=
name|j
operator|.
name|charAt
argument_list|(
name|pos
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\\'
condition|)
block|{
name|escaped
operator|=
literal|true
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'"'
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|escaped
condition|)
block|{
return|return
name|JsopTokenizer
operator|.
name|decode
argument_list|(
name|j
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|pos
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
return|return
name|j
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|pos
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|BigDecimal
name|readNumber
parameter_list|(
name|String
name|j
parameter_list|,
name|int
name|start
parameter_list|)
block|{
name|int
name|pos
init|=
name|start
decl_stmt|;
name|int
name|length
init|=
name|j
operator|.
name|length
argument_list|()
decl_stmt|;
name|char
name|ch
init|=
name|j
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'-'
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|ch
operator|=
name|j
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|ch
operator|>=
literal|'0'
operator|&&
name|ch
operator|<=
literal|'9'
condition|)
block|{
while|while
condition|(
name|pos
operator|<
name|length
condition|)
block|{
name|ch
operator|=
name|j
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|ch
argument_list|<
literal|'0'
operator|||
name|ch
argument_list|>
literal|'9'
condition|)
block|{
break|break;
block|}
name|pos
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|ch
operator|==
literal|'.'
condition|)
block|{
name|pos
operator|++
expr_stmt|;
while|while
condition|(
name|pos
operator|<
name|length
condition|)
block|{
name|ch
operator|=
name|j
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|ch
argument_list|<
literal|'0'
operator|||
name|ch
argument_list|>
literal|'9'
condition|)
block|{
break|break;
block|}
name|pos
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ch
operator|==
literal|'e'
operator|||
name|ch
operator|==
literal|'E'
condition|)
block|{
name|ch
operator|=
name|j
operator|.
name|charAt
argument_list|(
operator|++
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'+'
operator|||
name|ch
operator|==
literal|'-'
condition|)
block|{
name|ch
operator|=
name|j
operator|.
name|charAt
argument_list|(
operator|++
name|pos
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|pos
operator|<
name|length
condition|)
block|{
name|ch
operator|=
name|j
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|ch
argument_list|<
literal|'0'
operator|||
name|ch
argument_list|>
literal|'9'
condition|)
block|{
break|break;
block|}
name|pos
operator|++
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
return|return
operator|new
name|BigDecimal
argument_list|(
name|j
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|pos
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

