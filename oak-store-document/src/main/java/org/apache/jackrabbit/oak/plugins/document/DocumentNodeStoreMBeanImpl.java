begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotCompliantMBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|stats
operator|.
name|RepositoryStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|stats
operator|.
name|TimeSeries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|AnnotatedStandardMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|stats
operator|.
name|TimeSeriesStatsUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|filter
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|toArray
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|transform
import|;
end_import

begin_comment
comment|/**  * Implementation of a DocumentNodeStoreMBean.  */
end_comment

begin_class
specifier|final
class|class
name|DocumentNodeStoreMBeanImpl
extends|extends
name|AnnotatedStandardMBean
implements|implements
name|DocumentNodeStoreMBean
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ISO_FORMAT
init|=
literal|"yyyy-MM-dd'T'HH:mm:ss.SSS zzz"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TimeZone
name|TZ_UTC
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|DocumentNodeStore
name|nodeStore
decl_stmt|;
specifier|private
specifier|final
name|RepositoryStatistics
name|repoStats
decl_stmt|;
specifier|private
specifier|final
name|Iterable
argument_list|<
name|ClusterNodeInfoDocument
argument_list|>
name|clusterNodes
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|DocumentNodeStoreMBeanImpl
parameter_list|(
name|DocumentNodeStore
name|nodeStore
parameter_list|,
name|RepositoryStatistics
name|repoStats
parameter_list|,
name|Iterable
argument_list|<
name|ClusterNodeInfoDocument
argument_list|>
name|clusterNodes
parameter_list|)
throws|throws
name|NotCompliantMBeanException
block|{
name|super
argument_list|(
name|DocumentNodeStoreMBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|this
operator|.
name|repoStats
operator|=
name|repoStats
expr_stmt|;
name|this
operator|.
name|clusterNodes
operator|=
name|clusterNodes
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRevisionComparatorState
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHead
parameter_list|()
block|{
return|return
name|nodeStore
operator|.
name|getHeadRevision
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getClusterId
parameter_list|()
block|{
return|return
name|nodeStore
operator|.
name|getClusterId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getUnmergedBranchCount
parameter_list|()
block|{
return|return
name|nodeStore
operator|.
name|getBranches
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getInactiveClusterNodes
parameter_list|()
block|{
return|return
name|toArray
argument_list|(
name|transform
argument_list|(
name|filter
argument_list|(
name|clusterNodes
argument_list|,
operator|new
name|Predicate
argument_list|<
name|ClusterNodeInfoDocument
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|ClusterNodeInfoDocument
name|input
parameter_list|)
block|{
return|return
operator|!
name|input
operator|.
name|isActive
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|,
operator|new
name|Function
argument_list|<
name|ClusterNodeInfoDocument
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|ClusterNodeInfoDocument
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getClusterId
argument_list|()
operator|+
literal|"="
operator|+
name|input
operator|.
name|getCreated
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getActiveClusterNodes
parameter_list|()
block|{
return|return
name|toArray
argument_list|(
name|transform
argument_list|(
name|filter
argument_list|(
name|clusterNodes
argument_list|,
operator|new
name|Predicate
argument_list|<
name|ClusterNodeInfoDocument
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|ClusterNodeInfoDocument
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|isActive
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|,
operator|new
name|Function
argument_list|<
name|ClusterNodeInfoDocument
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|ClusterNodeInfoDocument
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getClusterId
argument_list|()
operator|+
literal|"="
operator|+
name|input
operator|.
name|getLeaseEndTime
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getLastKnownRevisions
parameter_list|()
block|{
return|return
name|toArray
argument_list|(
name|transform
argument_list|(
name|filter
argument_list|(
name|nodeStore
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Revision
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Revision
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getClusterId
argument_list|()
operator|!=
name|getClusterId
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|,
operator|new
name|Function
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|Revision
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getClusterId
argument_list|()
operator|+
literal|"="
operator|+
name|input
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|formatRevision
parameter_list|(
name|String
name|rev
parameter_list|,
name|boolean
name|utc
parameter_list|)
block|{
name|Revision
name|r
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|rev
argument_list|)
decl_stmt|;
specifier|final
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|ISO_FORMAT
argument_list|)
decl_stmt|;
if|if
condition|(
name|utc
condition|)
block|{
name|sdf
operator|.
name|setTimeZone
argument_list|(
name|TZ_UTC
argument_list|)
expr_stmt|;
block|}
return|return
name|sdf
operator|.
name|format
argument_list|(
name|r
operator|.
name|getTimestamp
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|determineServerTimeDifferenceMillis
parameter_list|()
block|{
return|return
name|nodeStore
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|determineServerTimeDifferenceMillis
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getMergeSuccessHistory
parameter_list|()
block|{
return|return
name|getTimeSeriesData
argument_list|(
name|DocumentNodeStoreStats
operator|.
name|MERGE_SUCCESS_COUNT
argument_list|,
literal|"Merge Success Count"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getMergeFailureHistory
parameter_list|()
block|{
return|return
name|getTimeSeriesData
argument_list|(
name|DocumentNodeStoreStats
operator|.
name|MERGE_FAILED_EXCLUSIVE
argument_list|,
literal|"Merge failure count"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getExternalChangeCountHistory
parameter_list|()
block|{
return|return
name|getTimeSeriesData
argument_list|(
name|DocumentNodeStoreStats
operator|.
name|BGR_NUM_CHANGES_RATE
argument_list|,
literal|"Count of nodes modified by other "
operator|+
literal|"cluster nodes since last background read"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getBackgroundUpdateCountHistory
parameter_list|()
block|{
return|return
name|getTimeSeriesData
argument_list|(
name|DocumentNodeStoreStats
operator|.
name|BGW_NUM_WRITES_RATE
argument_list|,
literal|"Count of nodes updated as part of "
operator|+
literal|"background update"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getBranchCommitHistory
parameter_list|()
block|{
return|return
name|getTimeSeriesData
argument_list|(
name|DocumentNodeStoreStats
operator|.
name|BRANCH_COMMIT_COUNT
argument_list|,
literal|"Branch commit count"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getMergeBranchCommitHistory
parameter_list|()
block|{
return|return
name|getTimeSeriesData
argument_list|(
name|DocumentNodeStoreStats
operator|.
name|MERGE_BRANCH_COMMIT_COUNT
argument_list|,
literal|"Number of merged branch commits"
argument_list|)
return|;
block|}
specifier|private
name|CompositeData
name|getTimeSeriesData
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|)
block|{
return|return
name|TimeSeriesStatsUtil
operator|.
name|asCompositeData
argument_list|(
name|getTimeSeries
argument_list|(
name|name
argument_list|)
argument_list|,
name|desc
argument_list|)
return|;
block|}
specifier|private
name|TimeSeries
name|getTimeSeries
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|repoStats
operator|.
name|getTimeSeries
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|recover
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|clusterId
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|path
argument_list|,
literal|"path must not be null"
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|path
argument_list|)
argument_list|,
literal|"path must be absolute"
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|clusterId
operator|>=
literal|0
argument_list|,
literal|"clusterId must not be a negative"
argument_list|)
expr_stmt|;
name|DocumentStore
name|docStore
init|=
name|nodeStore
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|boolean
name|isActive
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ClusterNodeInfoDocument
name|it
range|:
name|ClusterNodeInfoDocument
operator|.
name|all
argument_list|(
name|docStore
argument_list|)
control|)
block|{
if|if
condition|(
name|it
operator|.
name|getClusterId
argument_list|()
operator|==
name|clusterId
operator|&&
name|it
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|isActive
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isActive
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot run recover on clusterId "
operator|+
name|clusterId
operator|+
literal|" as it's currently active"
argument_list|)
throw|;
block|}
name|String
name|p
init|=
name|path
decl_stmt|;
name|NodeDocument
name|nodeDocument
init|=
name|docStore
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|p
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeDocument
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"Document node with given path = "
operator|+
name|p
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
name|boolean
name|dryRun
init|=
name|nodeStore
operator|.
name|isReadOnlyMode
argument_list|()
decl_stmt|;
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Running recovery on child documents of path = "
operator|+
name|p
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|childDocs
init|=
name|getChildDocs
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|sum
operator|+=
name|nodeStore
operator|.
name|getLastRevRecoveryAgent
argument_list|()
operator|.
name|recover
argument_list|(
name|childDocs
argument_list|,
name|clusterId
argument_list|,
name|dryRun
argument_list|)
expr_stmt|;
if|if
condition|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|p
argument_list|)
condition|)
block|{
break|break;
block|}
name|p
operator|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
specifier|private
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|getChildDocs
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|Path
name|pathRef
init|=
name|Path
operator|.
name|fromString
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|final
name|String
name|to
init|=
name|Utils
operator|.
name|getKeyUpperLimit
argument_list|(
name|pathRef
argument_list|)
decl_stmt|;
specifier|final
name|String
name|from
init|=
name|Utils
operator|.
name|getKeyLowerLimit
argument_list|(
name|pathRef
argument_list|)
decl_stmt|;
return|return
name|nodeStore
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|query
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
literal|10000
argument_list|)
return|;
block|}
block|}
end_class

end_unit

