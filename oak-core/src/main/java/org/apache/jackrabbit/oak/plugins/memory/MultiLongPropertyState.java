begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|value
operator|.
name|Conversions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|value
operator|.
name|Conversions
operator|.
name|Converter
import|;
end_import

begin_class
specifier|public
class|class
name|MultiLongPropertyState
extends|extends
name|MultiPropertyState
argument_list|<
name|Long
argument_list|>
block|{
specifier|private
specifier|final
name|Type
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
specifier|public
name|MultiLongPropertyState
parameter_list|(
name|String
name|name
parameter_list|,
name|Iterable
argument_list|<
name|Long
argument_list|>
name|values
parameter_list|,
name|Type
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/**      * Create a multi valued {@code PropertyState} from a list of longs.      * @param name  The name of the property state      * @param values  The values of the property state      * @return  The new property state of type {@link Type#LONGS}      */
specifier|public
specifier|static
name|PropertyState
name|createLongProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Iterable
argument_list|<
name|Long
argument_list|>
name|values
parameter_list|)
block|{
return|return
operator|new
name|MultiLongPropertyState
argument_list|(
name|name
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|values
argument_list|)
argument_list|,
name|Type
operator|.
name|LONGS
argument_list|)
return|;
block|}
comment|/**      * Create a multi valued {@code PropertyState} of dates from a list of longs.      * @param name  The name of the property state      * @param values  The values of the property state      * @return  The new property state of type {@link Type#DATES}      */
specifier|public
specifier|static
name|PropertyState
name|createDatePropertyFromLong
parameter_list|(
name|String
name|name
parameter_list|,
name|Iterable
argument_list|<
name|Long
argument_list|>
name|values
parameter_list|)
block|{
return|return
operator|new
name|MultiLongPropertyState
argument_list|(
name|name
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|values
argument_list|)
argument_list|,
name|Type
operator|.
name|DATES
argument_list|)
return|;
block|}
comment|/**      * Create a multi valued {@code PropertyState} of dates.      * @param name  The name of the property state      * @param values  The values of the property state      * @return  The new property state of type {@link Type#DATES}      */
specifier|public
specifier|static
name|PropertyState
name|createDatePropertyFromCalendar
parameter_list|(
name|String
name|name
parameter_list|,
name|Iterable
argument_list|<
name|Calendar
argument_list|>
name|values
parameter_list|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|dates
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Calendar
name|v
range|:
name|values
control|)
block|{
name|dates
operator|.
name|add
argument_list|(
name|Conversions
operator|.
name|convert
argument_list|(
name|v
argument_list|)
operator|.
name|toLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MultiLongPropertyState
argument_list|(
name|name
argument_list|,
name|dates
argument_list|,
name|Type
operator|.
name|DATES
argument_list|)
return|;
block|}
comment|/**      * Create a multi valued {@code PropertyState} of dates from a list of strings.      * @param name  The name of the property state      * @param values  The values of the property state      * @return  The new property state of type {@link Type#DATES}      * @throws IllegalArgumentException if one of the {@code values} is not a parseable to a date.      */
specifier|public
specifier|static
name|PropertyState
name|createDateProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|dates
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|v
range|:
name|values
control|)
block|{
name|dates
operator|.
name|add
argument_list|(
name|Conversions
operator|.
name|convert
argument_list|(
name|Conversions
operator|.
name|convert
argument_list|(
name|v
argument_list|)
operator|.
name|toCalendar
argument_list|()
argument_list|)
operator|.
name|toLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MultiLongPropertyState
argument_list|(
name|name
argument_list|,
name|dates
argument_list|,
name|Type
operator|.
name|DATES
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Converter
name|getConverter
parameter_list|(
name|Long
name|value
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|DATES
condition|)
block|{
return|return
name|Conversions
operator|.
name|convert
argument_list|(
name|Conversions
operator|.
name|convert
argument_list|(
name|value
argument_list|)
operator|.
name|toCalendar
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Conversions
operator|.
name|convert
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Type
argument_list|<
name|?
argument_list|>
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
block|}
end_class

end_unit

