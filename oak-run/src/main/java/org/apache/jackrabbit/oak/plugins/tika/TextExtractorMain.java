begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tika
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|datastore
operator|.
name|DataStoreTextWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|BlobStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|BlobStoreFixtureProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|CommonOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|NodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|NodeStoreFixtureProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionParser
import|;
end_import

begin_class
specifier|public
class|class
name|TextExtractorMain
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TextExtractorMain
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TextExtractorMain
parameter_list|()
block|{     }
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|OptionParser
name|parser
init|=
operator|new
name|OptionParser
argument_list|()
decl_stmt|;
name|Options
name|opts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|opts
operator|.
name|setCommandName
argument_list|(
name|TikaCommandOptions
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|opts
operator|.
name|setSummary
argument_list|(
literal|"Provides text extraction related operations"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|setConnectionString
argument_list|(
name|CommonOptions
operator|.
name|DEFAULT_CONNECTION_STRING
argument_list|)
expr_stmt|;
name|opts
operator|.
name|registerOptionsFactory
argument_list|(
name|TikaCommandOptions
operator|.
name|FACTORY
argument_list|)
expr_stmt|;
name|opts
operator|.
name|parseAndConfigure
argument_list|(
name|parser
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|TikaCommandOptions
name|tikaOpts
init|=
name|opts
operator|.
name|getOptionBean
argument_list|(
name|TikaCommandOptions
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
init|(
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
init|)
block|{
name|boolean
name|report
init|=
name|tikaOpts
operator|.
name|report
argument_list|()
decl_stmt|;
name|boolean
name|extract
init|=
name|tikaOpts
operator|.
name|extract
argument_list|()
decl_stmt|;
name|boolean
name|generate
init|=
name|tikaOpts
operator|.
name|generate
argument_list|()
decl_stmt|;
name|BlobStore
name|blobStore
decl_stmt|;
name|NodeStore
name|nodeStore
init|=
literal|null
decl_stmt|;
name|File
name|dataFile
init|=
name|tikaOpts
operator|.
name|getDataFile
argument_list|()
decl_stmt|;
name|File
name|storeDir
init|=
name|tikaOpts
operator|.
name|getStoreDir
argument_list|()
decl_stmt|;
name|File
name|tikaConfigFile
init|=
name|tikaOpts
operator|.
name|getTikaConfig
argument_list|()
decl_stmt|;
name|BinaryResourceProvider
name|binaryResourceProvider
init|=
literal|null
decl_stmt|;
name|BinaryStats
name|stats
init|=
literal|null
decl_stmt|;
name|String
name|path
init|=
name|tikaOpts
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|tikaConfigFile
operator|!=
literal|null
condition|)
block|{
name|checkArgument
argument_list|(
name|tikaConfigFile
operator|.
name|exists
argument_list|()
argument_list|,
literal|"Tika config file %s does not exist"
argument_list|,
name|tikaConfigFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|storeDir
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|storeDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|checkArgument
argument_list|(
name|storeDir
operator|.
name|isDirectory
argument_list|()
argument_list|,
literal|"Path [%s] specified for storing extracted "
operator|+
literal|"text content is not a directory"
argument_list|,
name|storeDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|checkNotNull
argument_list|(
name|dataFile
argument_list|,
literal|"Data file not configured with %s"
argument_list|,
name|tikaOpts
operator|.
name|getDataFileSpecOpt
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|generate
condition|)
block|{
comment|//For report and extract case we do not need NodeStore access so create BlobStore directly
name|BlobStoreFixture
name|blobStoreFixture
init|=
name|BlobStoreFixtureProvider
operator|.
name|create
argument_list|(
name|opts
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|blobStoreFixture
argument_list|)
expr_stmt|;
name|blobStore
operator|=
name|checkNotNull
argument_list|(
name|blobStoreFixture
argument_list|)
operator|.
name|getBlobStore
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|NodeStoreFixture
name|nodeStoreFixture
init|=
name|NodeStoreFixtureProvider
operator|.
name|create
argument_list|(
name|opts
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|nodeStoreFixture
argument_list|)
expr_stmt|;
name|blobStore
operator|=
name|nodeStoreFixture
operator|.
name|getBlobStore
argument_list|()
expr_stmt|;
name|nodeStore
operator|=
name|nodeStoreFixture
operator|.
name|getStore
argument_list|()
expr_stmt|;
block|}
name|checkNotNull
argument_list|(
name|blobStore
argument_list|,
literal|"This command requires an external BlobStore configured"
argument_list|)
expr_stmt|;
if|if
condition|(
name|generate
condition|)
block|{
name|checkNotNull
argument_list|(
name|dataFile
argument_list|,
literal|"Data file path not provided"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Generated csv data to be stored in {}"
argument_list|,
name|dataFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|BinaryResourceProvider
name|brp
init|=
operator|new
name|NodeStoreBinaryResourceProvider
argument_list|(
name|nodeStore
argument_list|,
name|blobStore
argument_list|)
decl_stmt|;
name|CSVFileGenerator
name|generator
init|=
operator|new
name|CSVFileGenerator
argument_list|(
name|dataFile
argument_list|)
decl_stmt|;
name|generator
operator|.
name|generate
argument_list|(
name|brp
operator|.
name|getBinaries
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|report
operator|||
name|extract
condition|)
block|{
name|checkArgument
argument_list|(
name|dataFile
operator|.
name|exists
argument_list|()
argument_list|,
literal|"Data file %s does not exist"
argument_list|,
name|dataFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|CSVFileBinaryResourceProvider
name|csvProvider
init|=
operator|new
name|CSVFileBinaryResourceProvider
argument_list|(
name|dataFile
argument_list|,
name|blobStore
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|csvProvider
argument_list|)
expr_stmt|;
name|binaryResourceProvider
operator|=
name|csvProvider
expr_stmt|;
name|stats
operator|=
operator|new
name|BinaryStats
argument_list|(
name|tikaConfigFile
argument_list|,
name|binaryResourceProvider
argument_list|)
expr_stmt|;
name|String
name|summary
init|=
name|stats
operator|.
name|getSummary
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|summary
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extract
condition|)
block|{
name|checkNotNull
argument_list|(
name|storeDir
argument_list|,
literal|"Directory to store extracted text content "
operator|+
literal|"must be specified via %s"
argument_list|,
name|tikaOpts
operator|.
name|getStoreDirSpecOpt
argument_list|()
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|blobStore
argument_list|,
literal|"BlobStore found to be null."
argument_list|)
expr_stmt|;
name|DataStoreTextWriter
name|writer
init|=
operator|new
name|DataStoreTextWriter
argument_list|(
name|storeDir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|TextExtractor
name|extractor
init|=
operator|new
name|TextExtractor
argument_list|(
name|writer
argument_list|)
decl_stmt|;
if|if
condition|(
name|tikaOpts
operator|.
name|isPoolSizeDefined
argument_list|()
condition|)
block|{
name|extractor
operator|.
name|setThreadPoolSize
argument_list|(
name|tikaOpts
operator|.
name|getPoolSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tikaConfigFile
operator|!=
literal|null
condition|)
block|{
name|extractor
operator|.
name|setTikaConfig
argument_list|(
name|tikaConfigFile
argument_list|)
expr_stmt|;
block|}
name|closer
operator|.
name|register
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|extractor
argument_list|)
expr_stmt|;
name|extractor
operator|.
name|setStats
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Using path {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|extractor
operator|.
name|extract
argument_list|(
name|binaryResourceProvider
operator|.
name|getBinaries
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|extractor
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

