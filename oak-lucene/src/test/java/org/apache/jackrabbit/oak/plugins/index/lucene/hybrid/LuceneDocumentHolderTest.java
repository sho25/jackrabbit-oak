begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|hybrid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsInAnyOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasItems
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_class
specifier|public
class|class
name|LuceneDocumentHolderTest
block|{
specifier|private
name|DummyQueue
name|queue
init|=
operator|new
name|DummyQueue
argument_list|()
decl_stmt|;
specifier|private
name|LuceneDocumentHolder
name|holder
init|=
operator|new
name|LuceneDocumentHolder
argument_list|(
name|queue
argument_list|,
literal|100
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testAllLuceneDocReturned
parameter_list|()
throws|throws
name|Exception
block|{
name|queue
operator|.
name|enabled
operator|=
literal|false
expr_stmt|;
name|holder
operator|.
name|add
argument_list|(
literal|true
argument_list|,
name|LuceneDoc
operator|.
name|forDelete
argument_list|(
literal|"/oak:index/foo"
argument_list|,
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|holder
operator|.
name|add
argument_list|(
literal|false
argument_list|,
name|LuceneDoc
operator|.
name|forDelete
argument_list|(
literal|"/oak:index/bar"
argument_list|,
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|enabled
operator|=
literal|true
expr_stmt|;
name|holder
operator|.
name|add
argument_list|(
literal|true
argument_list|,
name|LuceneDoc
operator|.
name|forDelete
argument_list|(
literal|"/oak:index/foo"
argument_list|,
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
name|holder
operator|.
name|add
argument_list|(
literal|false
argument_list|,
name|LuceneDoc
operator|.
name|forDelete
argument_list|(
literal|"/oak:index/bar"
argument_list|,
literal|"/d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|asMultiMap
argument_list|(
name|holder
operator|.
name|getAllLuceneDocInfo
argument_list|()
argument_list|)
operator|.
name|values
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"/a"
argument_list|,
literal|"/b"
argument_list|,
literal|"/c"
argument_list|,
literal|"/d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|unprocessedSyncQueuedDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|queue
operator|.
name|enabled
operator|=
literal|true
expr_stmt|;
name|holder
operator|.
name|add
argument_list|(
literal|true
argument_list|,
name|LuceneDoc
operator|.
name|forDelete
argument_list|(
literal|"/oak:index/foo"
argument_list|,
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|holder
operator|.
name|add
argument_list|(
literal|true
argument_list|,
name|LuceneDoc
operator|.
name|forDelete
argument_list|(
literal|"/oak:index/foo"
argument_list|,
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|enabled
operator|=
literal|false
expr_stmt|;
name|holder
operator|.
name|add
argument_list|(
literal|true
argument_list|,
name|LuceneDoc
operator|.
name|forDelete
argument_list|(
literal|"/oak:index/foo"
argument_list|,
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|luceneDocs
operator|.
name|get
argument_list|(
literal|"/c"
argument_list|)
operator|.
name|markProcessed
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|asMultiMap
argument_list|(
name|holder
operator|.
name|getSyncIndexedDocs
argument_list|()
argument_list|)
operator|.
name|values
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|asMultiMap
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|LuceneDocInfo
argument_list|>
name|itr
parameter_list|)
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|docs
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|LuceneDocInfo
name|d
range|:
name|itr
control|)
block|{
name|docs
operator|.
name|put
argument_list|(
name|d
operator|.
name|getIndexPath
argument_list|()
argument_list|,
name|d
operator|.
name|getDocPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|docs
return|;
block|}
specifier|private
specifier|static
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|asMultiMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|LuceneDoc
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|docs
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|Collection
argument_list|<
name|LuceneDoc
argument_list|>
name|lds
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|LuceneDoc
name|d
range|:
name|lds
control|)
block|{
name|docs
operator|.
name|put
argument_list|(
name|d
operator|.
name|getIndexPath
argument_list|()
argument_list|,
name|d
operator|.
name|getDocPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|docs
return|;
block|}
specifier|private
specifier|static
class|class
name|DummyQueue
implements|implements
name|IndexingQueue
block|{
name|boolean
name|enabled
decl_stmt|;
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|docs
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LuceneDoc
argument_list|>
name|luceneDocs
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|addIfNotFullWithoutWait
parameter_list|(
name|LuceneDoc
name|doc
parameter_list|)
block|{
if|if
condition|(
name|enabled
condition|)
block|{
name|docs
operator|.
name|put
argument_list|(
name|doc
operator|.
name|indexPath
argument_list|,
name|doc
operator|.
name|docPath
argument_list|)
expr_stmt|;
name|luceneDocs
operator|.
name|put
argument_list|(
name|doc
operator|.
name|docPath
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
return|return
name|enabled
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|LuceneDoc
name|doc
parameter_list|)
block|{
throw|throw
operator|new
name|AbstractMethodError
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addAllSynchronously
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|LuceneDoc
argument_list|>
argument_list|>
name|docsPerIndex
parameter_list|)
block|{
throw|throw
operator|new
name|AbstractMethodError
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|scheduleQueuedDocsProcessing
parameter_list|()
block|{          }
block|}
block|}
end_class

end_unit

