begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|ASYNC_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|TYPE_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUtils
operator|.
name|getBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUtils
operator|.
name|getString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUtils
operator|.
name|isIndexNodeType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|DefaultEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|VisibleEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStoreBranch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|AsyncIndexUpdate
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AsyncIndexUpdate
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|CONFIG_WATCH_DELAY_MS
init|=
literal|30000
decl_stmt|;
comment|// TODO index impl run frequency could be picked up from the index config
comment|// directly
specifier|private
specifier|final
specifier|static
name|int
name|INDEX_TASK_DELAY_MS
init|=
literal|5000
decl_stmt|;
specifier|private
specifier|final
name|NodeStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|ScheduledExecutorService
name|executor
decl_stmt|;
specifier|private
specifier|final
name|IndexEditorProvider
name|provider
decl_stmt|;
specifier|private
name|NodeState
name|current
init|=
name|EmptyNodeState
operator|.
name|EMPTY_NODE
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|IndexTask
argument_list|>
name|active
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|IndexTask
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|started
decl_stmt|;
specifier|public
name|AsyncIndexUpdate
parameter_list|(
annotation|@
name|Nonnull
name|NodeStore
name|store
parameter_list|,
annotation|@
name|Nonnull
name|ScheduledExecutorService
name|executor
parameter_list|,
annotation|@
name|Nonnull
name|IndexEditorProvider
name|provider
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|checkNotNull
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|checkNotNull
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|this
operator|.
name|provider
operator|=
name|checkNotNull
argument_list|(
name|provider
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|started
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Background index config watcher task already started"
argument_list|)
expr_stmt|;
return|return;
block|}
name|started
operator|=
literal|true
expr_stmt|;
name|executor
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|this
argument_list|,
literal|100
argument_list|,
name|CONFIG_WATCH_DELAY_MS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Running background index config watcher task"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|store
operator|.
name|getRoot
argument_list|()
decl_stmt|;
try|try
block|{
name|EditorHook
name|hook
init|=
operator|new
name|EditorHook
argument_list|(
operator|new
name|EditorProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Editor
name|getRootEditor
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|)
block|{
return|return
name|VisibleEditor
operator|.
name|wrap
argument_list|(
operator|new
name|IndexConfigWatcher
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|hook
operator|.
name|processCommit
argument_list|(
name|current
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|current
operator|=
name|after
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"IndexTask update failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|replace
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|async
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|in
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|async
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existing
init|=
name|active
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|existing
control|)
block|{
if|if
condition|(
name|in
operator|.
name|remove
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|defs
init|=
name|async
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|defs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|remove
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addOrUpdate
argument_list|(
name|type
argument_list|,
name|defs
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|remove
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|type
range|:
name|in
control|)
block|{
name|addOrUpdate
argument_list|(
name|type
argument_list|,
name|async
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|addOrUpdate
parameter_list|(
name|String
name|type
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|defs
parameter_list|)
block|{
name|IndexTask
name|task
init|=
name|active
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
name|task
operator|=
operator|new
name|IndexTask
argument_list|(
name|store
argument_list|,
name|provider
argument_list|,
name|type
argument_list|,
name|defs
argument_list|)
expr_stmt|;
name|active
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|task
argument_list|)
expr_stmt|;
name|task
operator|.
name|start
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|task
operator|.
name|update
argument_list|(
name|defs
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|remove
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|IndexTask
name|task
init|=
name|active
operator|.
name|remove
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|!=
literal|null
condition|)
block|{
name|task
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * This Editor is responsible for watching over changes on async index defs:      * added index defs and deleted index defs are pushed forward to the      * #replace method      *       */
class|class
name|IndexConfigWatcher
extends|extends
name|DefaultEditor
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|async
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|enter
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
operator|!
name|after
operator|.
name|hasChildNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
condition|)
block|{
return|return;
block|}
name|NodeState
name|index
init|=
name|after
operator|.
name|getChildNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|indexName
range|:
name|index
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
name|NodeState
name|indexChild
init|=
name|index
operator|.
name|getChildNode
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|isIndexNodeType
argument_list|(
name|indexChild
argument_list|)
condition|)
block|{
name|boolean
name|isasync
init|=
name|getBoolean
argument_list|(
name|indexChild
argument_list|,
name|ASYNC_PROPERTY_NAME
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|getString
argument_list|(
name|indexChild
argument_list|,
name|TYPE_PROPERTY_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|||
operator|!
name|isasync
condition|)
block|{
comment|// skip null and non-async types
continue|continue;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|defs
init|=
name|async
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|defs
operator|==
literal|null
condition|)
block|{
name|defs
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|async
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|defs
argument_list|)
expr_stmt|;
block|}
name|defs
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|leave
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|replace
argument_list|(
name|async
argument_list|)
expr_stmt|;
name|async
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|IndexTask
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IndexTask
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|NodeStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|defs
decl_stmt|;
specifier|private
specifier|final
name|IndexEditorProvider
name|provider
decl_stmt|;
specifier|private
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|future
decl_stmt|;
specifier|private
name|NodeState
name|before
decl_stmt|;
specifier|public
name|IndexTask
parameter_list|(
name|NodeStore
name|store
parameter_list|,
name|IndexEditorProvider
name|provider
parameter_list|,
name|String
name|type
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|defs
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|defs
operator|=
name|defs
expr_stmt|;
name|this
operator|.
name|before
operator|=
name|EmptyNodeState
operator|.
name|EMPTY_NODE
expr_stmt|;
block|}
specifier|public
name|void
name|update
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|defs
parameter_list|)
block|{
comment|// check of there are any changes
comment|// TODO what happens when I move a def? (rm + add appears as a no-op
comment|// in the set)
if|if
condition|(
name|this
operator|.
name|defs
operator|.
name|equals
argument_list|(
name|defs
argument_list|)
condition|)
block|{
comment|// no-op
return|return;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Updated index def for type {}, reindexing"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|defs
operator|=
name|defs
expr_stmt|;
name|this
operator|.
name|before
operator|=
name|EmptyNodeState
operator|.
name|EMPTY_NODE
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|(
name|ScheduledExecutorService
name|executor
parameter_list|)
block|{
if|if
condition|(
name|future
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"IndexTask has already started"
argument_list|)
throw|;
block|}
name|future
operator|=
name|executor
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|this
argument_list|,
literal|100
argument_list|,
name|INDEX_TASK_DELAY_MS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|future
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"IndexTask has already stopped."
argument_list|)
expr_stmt|;
return|return;
block|}
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Running background index task for type {}."
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|NodeStoreBranch
name|branch
init|=
name|store
operator|.
name|branch
argument_list|()
decl_stmt|;
name|NodeState
name|after
init|=
name|branch
operator|.
name|getHead
argument_list|()
decl_stmt|;
try|try
block|{
name|EditorHook
name|hook
init|=
operator|new
name|EditorHook
argument_list|(
operator|new
name|TypedEditorProvider
argument_list|(
name|provider
argument_list|,
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|NodeState
name|processed
init|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
decl_stmt|;
name|branch
operator|.
name|setRoot
argument_list|(
name|processed
argument_list|)
expr_stmt|;
name|branch
operator|.
name|merge
argument_list|(
name|EmptyHook
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|before
operator|=
name|after
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"IndexTask update failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This creates a composite editor from a type-filtered index provider.      *       */
specifier|private
specifier|static
class|class
name|TypedEditorProvider
implements|implements
name|EditorProvider
block|{
specifier|private
specifier|final
name|IndexEditorProvider
name|provider
decl_stmt|;
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
specifier|public
name|TypedEditorProvider
parameter_list|(
name|IndexEditorProvider
name|provider
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
block|}
comment|/**          * This does not make any effort to filter async definitions. The          * assumption is that given an index type, all of the returned index          * hooks inherit the same async assumption.          *           */
annotation|@
name|Override
specifier|public
name|Editor
name|getRootEditor
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|)
block|{
return|return
name|VisibleEditor
operator|.
name|wrap
argument_list|(
name|provider
operator|.
name|getIndexEditor
argument_list|(
name|type
argument_list|,
name|builder
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

