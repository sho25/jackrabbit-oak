begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_comment
comment|/**  * This class is used to define the evaluation behavior of a given aggregated  * permission provider. It can be SUFFICIENT or REQUISITE.  */
end_comment

begin_enum
specifier|public
enum|enum
name|ControlFlag
block|{
comment|/**      * The {@code AggregatedPermissionProvider} is not required to return {@code true}      * upon permission evaluation. If it does grant the permissions in question,      * control is immediately returned to the caller and the evaluation does      * not proceed down the list of {@code PermissionProvider}s. If it returns      * {@code false}, the evaluation continues down the list of {@code PermissionProvider}s.      */
name|SUFFICIENT
argument_list|(
literal|"SUFFICIENT"
argument_list|)
block|,
comment|/**      * The {@code AggregatedPermissionProvider} is required to return {@code true}      * upon permission evaluation. If it grants access the evaluation continues      * down the list of {@code PermissionProvider}s. However, if it returns      * {@code false} indicating that permissions are not granted, the evaluation      * is immediately stopped at this point control is returned to the caller      * without proceeding down the list of the {@code PermissionProvider}s.      */
name|REQUISITE
argument_list|(
literal|"REQUISITE"
argument_list|)
block|;
specifier|public
specifier|static
specifier|final
name|String
name|SUFFICIENT_NAME
init|=
literal|"SUFFICIENT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REQUISITE_NAME
init|=
literal|"REQUISITE"
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
name|ControlFlag
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
end_enum

end_unit

