begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|delegate
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|InvalidItemStateException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|value
operator|.
name|Conversions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionConstants
import|;
end_import

begin_comment
comment|/**  * {@code VersionHistoryDelegate}...  */
end_comment

begin_class
specifier|public
class|class
name|VersionHistoryDelegate
extends|extends
name|NodeDelegate
block|{
name|VersionHistoryDelegate
parameter_list|(
annotation|@
name|Nonnull
name|SessionDelegate
name|sessionDelegate
parameter_list|,
annotation|@
name|Nonnull
name|Tree
name|vhTree
parameter_list|)
block|{
name|super
argument_list|(
name|sessionDelegate
argument_list|,
name|checkNotNull
argument_list|(
name|vhTree
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getVersionableIdentifier
parameter_list|()
throws|throws
name|InvalidItemStateException
block|{
return|return
name|getTree
argument_list|()
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_VERSIONABLEUUID
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|VersionDelegate
name|getRootVersion
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Tree
name|rootVersion
init|=
name|getTree
argument_list|()
operator|.
name|getChildOrNull
argument_list|(
name|VersionConstants
operator|.
name|JCR_ROOTVERSION
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootVersion
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Inconsistent version storage. "
operator|+
literal|"VersionHistory does not have a root version"
argument_list|)
throw|;
block|}
return|return
name|VersionDelegate
operator|.
name|create
argument_list|(
name|sessionDelegate
argument_list|,
name|rootVersion
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|VersionDelegate
name|getVersion
parameter_list|(
annotation|@
name|Nonnull
name|String
name|versionName
parameter_list|)
throws|throws
name|VersionException
throws|,
name|RepositoryException
block|{
name|checkNotNull
argument_list|(
name|versionName
argument_list|)
expr_stmt|;
name|Tree
name|version
init|=
name|getTree
argument_list|()
operator|.
name|getChildOrNull
argument_list|(
name|versionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|VersionException
argument_list|(
literal|"No such Version: "
operator|+
name|versionName
argument_list|)
throw|;
block|}
return|return
name|VersionDelegate
operator|.
name|create
argument_list|(
name|sessionDelegate
argument_list|,
name|version
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|VersionDelegate
name|getVersionByLabel
parameter_list|(
annotation|@
name|Nonnull
name|String
name|label
parameter_list|)
throws|throws
name|VersionException
throws|,
name|RepositoryException
block|{
name|checkNotNull
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|Tree
name|versionLabels
init|=
name|getVersionLabelsTree
argument_list|()
decl_stmt|;
name|PropertyState
name|p
init|=
name|versionLabels
operator|.
name|getProperty
argument_list|(
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|VersionException
argument_list|(
literal|"Unknown label: "
operator|+
name|label
argument_list|)
throw|;
block|}
name|String
name|id
init|=
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCE
argument_list|)
decl_stmt|;
name|Tree
name|version
init|=
name|sessionDelegate
operator|.
name|getIdManager
argument_list|()
operator|.
name|getTree
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|VersionException
argument_list|(
literal|"Invalid label: "
operator|+
name|label
operator|+
literal|"("
operator|+
name|id
operator|+
literal|")"
argument_list|)
throw|;
block|}
return|return
name|VersionDelegate
operator|.
name|create
argument_list|(
name|sessionDelegate
argument_list|,
name|version
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getVersionLabels
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Tree
name|versionLabels
init|=
name|getVersionLabelsTree
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|labels
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyState
name|p
range|:
name|versionLabels
operator|.
name|getProperties
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|REFERENCE
condition|)
block|{
name|labels
operator|.
name|add
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|labels
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getVersionLabels
parameter_list|(
annotation|@
name|Nonnull
name|String
name|identifier
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkNotNull
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|Tree
name|versionLabels
init|=
name|getVersionLabelsTree
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|labels
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyState
name|p
range|:
name|versionLabels
operator|.
name|getProperties
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|REFERENCE
operator|&&
name|identifier
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCE
argument_list|)
argument_list|)
condition|)
block|{
name|labels
operator|.
name|add
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|labels
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|Iterator
argument_list|<
name|VersionDelegate
argument_list|>
name|getAllVersions
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|SortedMap
argument_list|<
name|Calendar
argument_list|,
name|String
argument_list|>
name|versions
init|=
operator|new
name|TreeMap
argument_list|<
name|Calendar
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|NodeDelegate
argument_list|>
name|it
init|=
name|getChildren
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NodeDelegate
name|n
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|primaryType
init|=
name|n
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
operator|.
name|getString
argument_list|()
decl_stmt|;
if|if
condition|(
name|primaryType
operator|.
name|equals
argument_list|(
name|VersionConstants
operator|.
name|NT_VERSION
argument_list|)
condition|)
block|{
name|PropertyDelegate
name|created
init|=
name|n
operator|.
name|getPropertyOrNull
argument_list|(
name|JcrConstants
operator|.
name|JCR_CREATED
argument_list|)
decl_stmt|;
if|if
condition|(
name|created
operator|!=
literal|null
condition|)
block|{
name|Calendar
name|cal
init|=
name|Conversions
operator|.
name|convert
argument_list|(
name|created
operator|.
name|getDate
argument_list|()
argument_list|)
operator|.
name|toCalendar
argument_list|()
decl_stmt|;
name|versions
operator|.
name|put
argument_list|(
name|cal
argument_list|,
name|n
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|Tree
name|thisTree
init|=
name|getTree
argument_list|()
decl_stmt|;
return|return
name|Iterators
operator|.
name|transform
argument_list|(
name|versions
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|VersionDelegate
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|VersionDelegate
name|apply
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|VersionDelegate
operator|.
name|create
argument_list|(
name|sessionDelegate
argument_list|,
name|thisTree
operator|.
name|getChildOrNull
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|//-----------------------------< internal>---------------------------------
comment|/**      * @return the jcr:versionLabels tree or throws a {@code RepositoryException}      *         if it doesn't exist.      * @throws RepositoryException if the jcr:versionLabels child does not      *                             exist.      */
annotation|@
name|Nonnull
specifier|private
name|Tree
name|getVersionLabelsTree
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Tree
name|versionLabels
init|=
name|getTree
argument_list|()
operator|.
name|getChildOrNull
argument_list|(
name|VersionConstants
operator|.
name|JCR_VERSIONLABELS
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionLabels
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Inconsistent version storage. "
operator|+
literal|"VersionHistory does not have jcr:versionLabels child node"
argument_list|)
throw|;
block|}
return|return
name|versionLabels
return|;
block|}
block|}
end_class

end_unit

