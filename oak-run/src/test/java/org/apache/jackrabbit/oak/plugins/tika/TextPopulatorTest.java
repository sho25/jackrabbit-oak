begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tika
package|;
end_package

begin_import
import|import
name|com
operator|.
name|beust
operator|.
name|jcommander
operator|.
name|internal
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|TextWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|FieldFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|OakAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tika
operator|.
name|TextPopulator
operator|.
name|PopulatorStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|TextPopulatorTest
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|private
name|File
name|indexDir
init|=
literal|null
decl_stmt|;
specifier|private
name|File
name|csv
init|=
literal|null
decl_stmt|;
specifier|private
name|FakeTextWriter
name|textWriter
init|=
operator|new
name|FakeTextWriter
argument_list|()
decl_stmt|;
specifier|private
name|PopulatorStats
name|stats
init|=
operator|new
name|PopulatorStats
argument_list|()
decl_stmt|;
specifier|private
name|TextPopulator
name|textPopulator
init|=
operator|new
name|TextPopulator
argument_list|(
name|textWriter
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|indexDir
operator|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|(
literal|"index-dump"
argument_list|)
expr_stmt|;
name|csv
operator|=
name|temporaryFolder
operator|.
name|newFile
argument_list|(
literal|"blobs.csv"
argument_list|)
expr_stmt|;
name|textPopulator
operator|.
name|setStats
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|setupIndexData
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setupIndexData
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dataMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|dataMap
operator|.
name|put
argument_list|(
literal|"/sentence"
argument_list|,
literal|"some sentence."
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|put
argument_list|(
literal|"/para"
argument_list|,
literal|"some sentence.\nAnd more sentence after a new line"
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|put
argument_list|(
literal|"/error"
argument_list|,
name|TextPopulator
operator|.
name|ERROR_TEXT
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|put
argument_list|(
literal|"/null"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|put
argument_list|(
literal|"/empty"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|put
argument_list|(
literal|"/untrimmed-empty"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|put
argument_list|(
literal|"/untrimmed"
argument_list|,
literal|" untrimmed "
argument_list|)
expr_stmt|;
name|FSDirectory
name|directory
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
name|indexDir
argument_list|)
decl_stmt|;
name|IndexWriterConfig
name|config
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|Version
operator|.
name|LUCENE_47
argument_list|,
operator|new
name|OakAnalyzer
argument_list|(
name|Version
operator|.
name|LUCENE_47
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|directory
argument_list|,
name|config
argument_list|)
init|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
range|:
name|dataMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|createLuceneDocument
argument_list|(
name|data
operator|.
name|getKey
argument_list|()
argument_list|,
name|data
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add document with multiple :fulltext
name|writer
operator|.
name|addDocument
argument_list|(
name|createLuceneDocument
argument_list|(
literal|"/multi"
argument_list|,
literal|"value1"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setupCSV
parameter_list|(
name|String
modifier|...
name|paths
parameter_list|)
throws|throws
name|IOException
block|{
name|BinaryResourceProvider
name|brp
init|=
operator|new
name|FakeBinaryResourceProvider
argument_list|(
name|paths
argument_list|)
decl_stmt|;
name|CSVFileGenerator
name|generator
init|=
operator|new
name|CSVFileGenerator
argument_list|(
name|csv
argument_list|)
decl_stmt|;
name|generator
operator|.
name|generate
argument_list|(
name|brp
operator|.
name|getBinaries
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Field
argument_list|>
name|createLuceneDocument
parameter_list|(
annotation|@
name|Nonnull
name|String
name|path
parameter_list|,
name|String
modifier|...
name|values
parameter_list|)
block|{
name|List
argument_list|<
name|Field
argument_list|>
name|fields
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|FieldFactory
operator|.
name|newFulltextField
argument_list|(
name|value
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|fields
operator|.
name|add
argument_list|(
name|FieldFactory
operator|.
name|newPathField
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|fields
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|simpleTest
parameter_list|()
throws|throws
name|Exception
block|{
name|setupCSV
argument_list|(
literal|"/sentence"
argument_list|,
literal|"/para"
argument_list|)
expr_stmt|;
name|textPopulator
operator|.
name|populate
argument_list|(
name|csv
argument_list|,
name|indexDir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect binaries processed"
argument_list|,
literal|2
argument_list|,
name|stats
operator|.
name|processed
argument_list|)
expr_stmt|;
name|textPopulator
operator|.
name|populate
argument_list|(
name|csv
argument_list|,
name|indexDir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Repeated call for already processed stuff shouldn't process anything more"
argument_list|,
literal|2
argument_list|,
name|stats
operator|.
name|ignored
argument_list|)
expr_stmt|;
name|assertConsistentStatsAndWriter
argument_list|()
expr_stmt|;
name|assertStatsInvariants
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|untrimmedText
parameter_list|()
throws|throws
name|Exception
block|{
name|setupCSV
argument_list|(
literal|"/untrimmed"
argument_list|)
expr_stmt|;
name|textPopulator
operator|.
name|populate
argument_list|(
name|csv
argument_list|,
name|indexDir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Store generation didn't trim data"
argument_list|,
literal|"untrimmed"
argument_list|,
name|textWriter
operator|.
name|data
operator|.
name|get
argument_list|(
name|FakeBinaryResourceProvider
operator|.
name|getBlobId
argument_list|(
literal|"/untrimmed"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertConsistentStatsAndWriter
argument_list|()
expr_stmt|;
name|assertStatsInvariants
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexedError
parameter_list|()
throws|throws
name|Exception
block|{
name|setupCSV
argument_list|(
literal|"/error"
argument_list|)
expr_stmt|;
name|textPopulator
operator|.
name|populate
argument_list|(
name|csv
argument_list|,
name|indexDir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Indexed data reporting errored extraction not marked as error"
argument_list|,
literal|1
argument_list|,
name|stats
operator|.
name|errored
argument_list|)
expr_stmt|;
name|textPopulator
operator|.
name|populate
argument_list|(
name|csv
argument_list|,
name|indexDir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Repeated run for indexed error shouldn't get processed again"
argument_list|,
literal|1
argument_list|,
name|stats
operator|.
name|ignored
argument_list|)
expr_stmt|;
name|assertConsistentStatsAndWriter
argument_list|()
expr_stmt|;
name|assertStatsInvariants
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexedEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|setupCSV
argument_list|(
literal|"/empty"
argument_list|)
expr_stmt|;
name|textPopulator
operator|.
name|populate
argument_list|(
name|csv
argument_list|,
name|indexDir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Indexed data for empty extraction not marked as empty"
argument_list|,
literal|1
argument_list|,
name|stats
operator|.
name|empty
argument_list|)
expr_stmt|;
name|textPopulator
operator|.
name|populate
argument_list|(
name|csv
argument_list|,
name|indexDir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Repeated run for empty extraction shouldn't get processed again"
argument_list|,
literal|1
argument_list|,
name|stats
operator|.
name|ignored
argument_list|)
expr_stmt|;
name|assertConsistentStatsAndWriter
argument_list|()
expr_stmt|;
name|assertStatsInvariants
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexedUntrimmedEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|setupCSV
argument_list|(
literal|"/untrimmed-empty"
argument_list|)
expr_stmt|;
name|textPopulator
operator|.
name|populate
argument_list|(
name|csv
argument_list|,
name|indexDir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Indexed data for untrimmed empty extraction not marked as empty"
argument_list|,
literal|1
argument_list|,
name|stats
operator|.
name|empty
argument_list|)
expr_stmt|;
name|textPopulator
operator|.
name|populate
argument_list|(
name|csv
argument_list|,
name|indexDir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Repeated run for untrimmed empty extraction shouldn't get processed again"
argument_list|,
literal|1
argument_list|,
name|stats
operator|.
name|ignored
argument_list|)
expr_stmt|;
name|assertConsistentStatsAndWriter
argument_list|()
expr_stmt|;
name|assertStatsInvariants
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multiFTField
parameter_list|()
throws|throws
name|Exception
block|{
name|setupCSV
argument_list|(
literal|"/multi"
argument_list|)
expr_stmt|;
name|textPopulator
operator|.
name|populate
argument_list|(
name|csv
argument_list|,
name|indexDir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Multi FT field in a doc not marked as error"
argument_list|,
literal|1
argument_list|,
name|stats
operator|.
name|errored
argument_list|)
expr_stmt|;
name|textPopulator
operator|.
name|populate
argument_list|(
name|csv
argument_list|,
name|indexDir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Repeated run for multi FT error should get processed again"
argument_list|,
literal|0
argument_list|,
name|stats
operator|.
name|ignored
argument_list|)
expr_stmt|;
name|assertStatsInvariants
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexHasDocumentButNotData
parameter_list|()
throws|throws
name|Exception
block|{
name|setupCSV
argument_list|(
literal|"/null"
argument_list|)
expr_stmt|;
name|textPopulator
operator|.
name|populate
argument_list|(
name|csv
argument_list|,
name|indexDir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No FT field in a doc not marked as error"
argument_list|,
literal|1
argument_list|,
name|stats
operator|.
name|errored
argument_list|)
expr_stmt|;
name|textPopulator
operator|.
name|populate
argument_list|(
name|csv
argument_list|,
name|indexDir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Repeated run for no FT error should get processed again"
argument_list|,
literal|0
argument_list|,
name|stats
operator|.
name|ignored
argument_list|)
expr_stmt|;
name|assertStatsInvariants
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexDoesNotHaveDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|setupCSV
argument_list|(
literal|"/somethingRandom"
argument_list|)
expr_stmt|;
name|textPopulator
operator|.
name|populate
argument_list|(
name|csv
argument_list|,
name|indexDir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No indexed doc not marked as error"
argument_list|,
literal|1
argument_list|,
name|stats
operator|.
name|errored
argument_list|)
expr_stmt|;
name|textPopulator
operator|.
name|populate
argument_list|(
name|csv
argument_list|,
name|indexDir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Repeated run for no indexed doc error should get processed again"
argument_list|,
literal|0
argument_list|,
name|stats
operator|.
name|ignored
argument_list|)
expr_stmt|;
name|assertStatsInvariants
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|assertConsistentStatsAndWriter
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Num blobs processed by text writer didn't process same not same as reported in stats"
argument_list|,
name|textWriter
operator|.
name|processed
operator|.
name|size
argument_list|()
argument_list|,
name|stats
operator|.
name|processed
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertStatsInvariants
parameter_list|()
block|{
name|assertTrue
argument_list|(
literal|"Read ("
operator|+
name|stats
operator|.
name|read
operator|+
literal|") !="
operator|+
literal|" Processed ("
operator|+
name|stats
operator|.
name|processed
operator|+
literal|") + Ignored ("
operator|+
name|stats
operator|.
name|ignored
operator|+
literal|")"
argument_list|,
name|stats
operator|.
name|read
operator|==
name|stats
operator|.
name|processed
operator|+
name|stats
operator|.
name|ignored
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Processed ("
operator|+
name|stats
operator|.
name|processed
operator|+
literal|") !="
operator|+
literal|" Empty ("
operator|+
name|stats
operator|.
name|empty
operator|+
literal|") + Errored ("
operator|+
name|stats
operator|.
name|errored
operator|+
literal|") + Parsed ("
operator|+
name|stats
operator|.
name|parsed
operator|+
literal|")"
argument_list|,
name|stats
operator|.
name|processed
operator|==
name|stats
operator|.
name|empty
operator|+
name|stats
operator|.
name|errored
operator|+
name|stats
operator|.
name|parsed
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|FakeTextWriter
implements|implements
name|TextWriter
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|processed
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
annotation|@
name|Nonnull
name|String
name|blobId
parameter_list|,
annotation|@
name|Nonnull
name|String
name|text
parameter_list|)
block|{
name|processed
operator|.
name|add
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|blobId
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|markEmpty
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{
name|processed
operator|.
name|add
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|markError
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{
name|processed
operator|.
name|add
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isProcessed
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{
return|return
name|processed
operator|.
name|contains
argument_list|(
name|blobId
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|FakeBinaryResourceProvider
implements|implements
name|BinaryResourceProvider
block|{
specifier|private
name|List
argument_list|<
name|BinaryResource
argument_list|>
name|binaries
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|FakeBinaryResourceProvider
parameter_list|(
name|String
modifier|...
name|paths
parameter_list|)
block|{
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|binaries
operator|.
name|add
argument_list|(
operator|new
name|BinaryResource
argument_list|(
operator|new
name|StringByteSource
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|path
argument_list|,
name|getBlobId
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|String
name|getBlobId
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|path
operator|+
literal|":"
operator|+
name|path
return|;
block|}
annotation|@
name|Override
specifier|public
name|FluentIterable
argument_list|<
name|BinaryResource
argument_list|>
name|getBinaries
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
operator|new
name|FluentIterable
argument_list|<
name|BinaryResource
argument_list|>
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|BinaryResource
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|binaries
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|StringByteSource
extends|extends
name|ByteSource
block|{
specifier|private
specifier|final
name|String
name|data
decl_stmt|;
name|StringByteSource
parameter_list|(
name|String
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|openStream
parameter_list|()
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

