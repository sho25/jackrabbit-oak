begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheLIRS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|PathRev
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Revision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_class
specifier|public
class|class
name|BroadcastTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|broadcastInMemory
parameter_list|()
throws|throws
name|Exception
block|{
name|broadcast
argument_list|(
literal|"inMemory"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|broadcastUDP
parameter_list|()
throws|throws
name|Exception
block|{
name|broadcast
argument_list|(
literal|"udp:"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|broadcastEncryptedUDP
parameter_list|()
throws|throws
name|Exception
block|{
name|broadcast
argument_list|(
literal|"udp:group:228.6.7.9;key:test;port:9876;aes"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|broadcast
parameter_list|(
name|String
name|type
parameter_list|,
name|int
name|minPercentCorrect
parameter_list|)
throws|throws
name|Exception
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/broadcastTest"
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|File
argument_list|(
literal|"target/broadcastTest"
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|PersistentCache
name|p1
init|=
operator|new
name|PersistentCache
argument_list|(
literal|"target/broadcastTest/p1,broadcast="
operator|+
name|type
argument_list|)
decl_stmt|;
name|PersistentCache
name|p2
init|=
operator|new
name|PersistentCache
argument_list|(
literal|"target/broadcastTest/p2,broadcast="
operator|+
name|type
argument_list|)
decl_stmt|;
name|Cache
argument_list|<
name|PathRev
argument_list|,
name|StringValue
argument_list|>
name|c1
init|=
name|openCache
argument_list|(
name|p1
argument_list|)
decl_stmt|;
name|Cache
argument_list|<
name|PathRev
argument_list|,
name|StringValue
argument_list|>
name|c2
init|=
name|openCache
argument_list|(
name|p2
argument_list|)
decl_stmt|;
name|String
name|key
init|=
literal|"/test"
operator|+
name|Math
operator|.
name|random
argument_list|()
decl_stmt|;
name|PathRev
name|k
init|=
operator|new
name|PathRev
argument_list|(
name|key
argument_list|,
operator|new
name|Revision
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|correct
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|c1
operator|.
name|put
argument_list|(
name|k
argument_list|,
operator|new
name|StringValue
argument_list|(
literal|"Hello World "
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|waitFor
argument_list|(
name|c2
argument_list|,
name|k
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|StringValue
name|v2
init|=
name|c2
operator|.
name|getIfPresent
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|v2
operator|!=
literal|null
operator|&&
name|v2
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Hello World "
operator|+
name|i
argument_list|)
condition|)
block|{
name|correct
operator|++
expr_stmt|;
block|}
name|c2
operator|.
name|invalidate
argument_list|(
name|k
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c2
operator|.
name|getIfPresent
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
name|waitFor
argument_list|(
name|c1
argument_list|,
name|k
argument_list|,
literal|null
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|StringValue
name|v1
init|=
name|c1
operator|.
name|getIfPresent
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|v1
operator|==
literal|null
condition|)
block|{
name|correct
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"min: "
operator|+
name|minPercentCorrect
operator|+
literal|" got: "
operator|+
name|correct
argument_list|,
name|correct
operator|>=
name|minPercentCorrect
argument_list|)
expr_stmt|;
name|p1
operator|.
name|close
argument_list|()
expr_stmt|;
name|p2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|waitFor
parameter_list|(
name|Callable
argument_list|<
name|Boolean
argument_list|>
name|call
parameter_list|,
name|int
name|timeout
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
comment|// ignore
block|}
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
try|try
block|{
if|if
condition|(
name|call
operator|.
name|call
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|time
operator|>
name|timeout
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|boolean
name|waitFor
parameter_list|(
specifier|final
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|,
specifier|final
name|K
name|key
parameter_list|,
specifier|final
name|V
name|value
parameter_list|,
name|int
name|timeout
parameter_list|)
block|{
return|return
name|waitFor
argument_list|(
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
block|{
name|V
name|v
init|=
name|map
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|//System.out.println("key " + key + " result " + v + " map " + map);
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|v
operator|==
literal|null
return|;
block|}
return|return
name|value
operator|.
name|equals
argument_list|(
name|v
argument_list|)
return|;
block|}
block|}
argument_list|,
name|timeout
argument_list|)
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|boolean
name|waitFor
parameter_list|(
specifier|final
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|,
specifier|final
name|K
name|key
parameter_list|,
name|int
name|timeout
parameter_list|)
block|{
return|return
name|waitFor
argument_list|(
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|map
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
argument_list|,
name|timeout
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Cache
argument_list|<
name|PathRev
argument_list|,
name|StringValue
argument_list|>
name|openCache
parameter_list|(
name|PersistentCache
name|p
parameter_list|)
block|{
name|CacheLIRS
argument_list|<
name|PathRev
argument_list|,
name|StringValue
argument_list|>
name|cache
init|=
operator|new
name|CacheLIRS
operator|.
name|Builder
argument_list|<
name|PathRev
argument_list|,
name|StringValue
argument_list|>
argument_list|()
operator|.
name|maximumSize
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|p
operator|.
name|wrap
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|cache
argument_list|,
name|CacheType
operator|.
name|DIFF
argument_list|)
return|;
block|}
block|}
end_class

end_unit

