begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests for OAK-1768.  */
end_comment

begin_class
specifier|public
class|class
name|LargeTreeOperationTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|removeLargeSubtree
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|DocumentNodeStore
name|ns
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setUseSimpleRevision
argument_list|(
literal|true
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|test
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DocumentRootBuilder
operator|.
name|UPDATE_LIMIT
operator|*
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|test
operator|.
name|child
argument_list|(
literal|"child-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|ns
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|builder
operator|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|Revision
name|r1
init|=
name|ns
operator|.
name|newRevision
argument_list|()
decl_stmt|;
comment|// must trigger branch commit
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"test"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|Revision
name|r2
init|=
name|ns
operator|.
name|newRevision
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"remove of large subtree must trigger branch commits"
argument_list|,
name|r2
operator|.
name|getTimestamp
argument_list|()
operator|-
name|r1
operator|.
name|getTimestamp
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setLargeSubtreeOnRoot
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|setLargeSubtree
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setLargeSubtree
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|setLargeSubtree
argument_list|(
literal|"child"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setLargeSubtree
parameter_list|(
name|String
modifier|...
name|path
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|MemoryNodeStore
name|memStore
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|memStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|test
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DocumentRootBuilder
operator|.
name|UPDATE_LIMIT
operator|*
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|test
operator|.
name|child
argument_list|(
literal|"child-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|memStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|DocumentNodeStore
name|ns
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setUseSimpleRevision
argument_list|(
literal|true
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|builder
operator|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|path
control|)
block|{
name|builder
operator|=
name|builder
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|Revision
name|r1
init|=
name|ns
operator|.
name|newRevision
argument_list|()
decl_stmt|;
comment|// must trigger branch commit
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"test"
argument_list|,
name|memStore
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|Revision
name|r2
init|=
name|ns
operator|.
name|newRevision
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"setting a large subtree must trigger branch commits"
argument_list|,
name|r2
operator|.
name|getTimestamp
argument_list|()
operator|-
name|r1
operator|.
name|getTimestamp
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

