begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * interface for shared constants around different actors: QueryIndex, IndexEditors,  * IndexEditorProviders, ...  */
end_comment

begin_interface
specifier|public
interface|interface
name|OrderedIndex
block|{
comment|/**      * enum for easing the order direction of the index      */
enum|enum
name|OrderDirection
block|{
comment|/**          * ascending order configuration (default)          */
name|ASC
argument_list|(
literal|"ascending"
argument_list|)
block|,
comment|/**          * descending order configuration          */
name|DESC
argument_list|(
literal|"descending"
argument_list|)
block|;
specifier|private
specifier|final
name|String
name|direction
decl_stmt|;
specifier|private
name|OrderDirection
parameter_list|(
name|String
name|direction
parameter_list|)
block|{
name|this
operator|.
name|direction
operator|=
name|direction
expr_stmt|;
block|}
specifier|public
name|String
name|getDirection
parameter_list|()
block|{
return|return
name|direction
return|;
block|}
comment|/**          * retrieve an {@code OrderDirection} from a provided String. Will return null in case of          * no-match          *           * @param direction the direction of the sorting: ascending or descending          * @return the direction          */
annotation|@
name|Nullable
annotation|@
name|CheckForNull
specifier|public
specifier|static
name|OrderDirection
name|fromString
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|direction
parameter_list|)
block|{
for|for
control|(
name|OrderDirection
name|d
range|:
name|OrderDirection
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|getDirection
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|direction
argument_list|)
condition|)
block|{
return|return
name|d
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**          * tells whether the provided index definition is ascending or descending          *           * @param indexMeta          * @return the direction          */
specifier|public
specifier|static
name|OrderDirection
name|fromIndexMeta
parameter_list|(
specifier|final
name|NodeState
name|indexMeta
parameter_list|)
block|{
name|OrderDirection
name|direction
init|=
name|ASC
decl_stmt|;
if|if
condition|(
name|indexMeta
operator|!=
literal|null
operator|&&
name|DESC
operator|.
name|getDirection
argument_list|()
operator|.
name|equals
argument_list|(
name|indexMeta
operator|.
name|getString
argument_list|(
name|DIRECTION
argument_list|)
argument_list|)
condition|)
block|{
name|direction
operator|=
name|DESC
expr_stmt|;
block|}
return|return
name|direction
return|;
block|}
comment|/**          * convenience method that tells if the provided index definition is descending          *           * @param indexMeta          * @return true if descending          */
specifier|public
specifier|static
name|boolean
name|isDescending
parameter_list|(
name|NodeState
name|indexMeta
parameter_list|)
block|{
return|return
name|DESC
operator|.
name|equals
argument_list|(
name|fromIndexMeta
argument_list|(
name|indexMeta
argument_list|)
argument_list|)
return|;
block|}
comment|/**          * convenience method that tells if the provided index definition is ascending          *           * @param indexMeta          * @return true if ascending          */
specifier|public
specifier|static
name|boolean
name|isAscending
parameter_list|(
name|NodeState
name|indexMeta
parameter_list|)
block|{
return|return
name|ASC
operator|.
name|equals
argument_list|(
name|fromIndexMeta
argument_list|(
name|indexMeta
argument_list|)
argument_list|)
return|;
block|}
block|}
empty_stmt|;
name|String
name|TYPE
init|=
literal|"ordered"
decl_stmt|;
comment|/**      * the 'key' used for specifying the direction of the index when providing the configuration      *       * {@code  { "propertyNames"="foobar", "direction"="ascending" } }      */
name|String
name|DIRECTION
init|=
literal|"direction"
decl_stmt|;
comment|/**      * the default direction for sorting the index      */
name|OrderDirection
name|DEFAULT_DIRECTION
init|=
name|OrderDirection
operator|.
name|ASC
decl_stmt|;
block|}
end_interface

end_unit

