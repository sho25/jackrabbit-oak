begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_comment
comment|/**  * A MicroKernel wrapper that can be used to log and also time MicroKernel  * calls.  */
end_comment

begin_class
specifier|public
class|class
name|TimingWrapper
implements|implements
name|MicroKernel
block|{
specifier|private
specifier|static
specifier|final
name|boolean
name|DEBUG
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"mk.debug"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|NEXT_ID
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|MicroKernel
name|mk
decl_stmt|;
specifier|private
specifier|final
name|int
name|id
init|=
name|NEXT_ID
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
specifier|private
name|long
name|startTime
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Count
argument_list|>
name|counts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Count
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|lastLogTime
decl_stmt|;
specifier|private
name|long
name|totalLogTime
decl_stmt|;
comment|/**      * A class that keeps track of timing data and call counts.      */
specifier|static
class|class
name|Count
block|{
specifier|public
name|long
name|count
decl_stmt|;
specifier|public
name|long
name|max
decl_stmt|;
specifier|public
name|long
name|total
decl_stmt|;
specifier|public
name|long
name|paramSize
decl_stmt|;
specifier|public
name|long
name|resultSize
decl_stmt|;
name|void
name|update
parameter_list|(
name|long
name|time
parameter_list|,
name|int
name|paramSize
parameter_list|,
name|int
name|resultSize
parameter_list|)
block|{
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|time
operator|>
name|max
condition|)
block|{
name|max
operator|=
name|time
expr_stmt|;
block|}
name|total
operator|+=
name|time
expr_stmt|;
name|this
operator|.
name|paramSize
operator|+=
name|paramSize
expr_stmt|;
name|this
operator|.
name|resultSize
operator|+=
name|resultSize
expr_stmt|;
block|}
block|}
specifier|public
name|TimingWrapper
parameter_list|(
name|MicroKernel
name|mk
parameter_list|)
block|{
name|this
operator|.
name|mk
operator|=
name|mk
expr_stmt|;
name|lastLogTime
operator|=
name|now
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|commit
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|jsonDiff
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|String
name|message
parameter_list|)
block|{
try|try
block|{
name|long
name|start
init|=
name|now
argument_list|()
decl_stmt|;
name|String
name|result
init|=
name|mk
operator|.
name|commit
argument_list|(
name|path
argument_list|,
name|jsonDiff
argument_list|,
name|revisionId
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|updateAndLogTimes
argument_list|(
literal|"commit"
argument_list|,
name|start
argument_list|,
name|size
argument_list|(
name|path
argument_list|)
operator|+
name|size
argument_list|(
name|jsonDiff
argument_list|)
operator|+
name|size
argument_list|(
name|message
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHeadRevision
parameter_list|()
block|{
try|try
block|{
name|long
name|start
init|=
name|now
argument_list|()
decl_stmt|;
name|String
name|result
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|updateAndLogTimes
argument_list|(
literal|"getHeadRevision"
argument_list|,
name|start
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getJournal
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|path
parameter_list|)
block|{
try|try
block|{
name|long
name|start
init|=
name|now
argument_list|()
decl_stmt|;
name|String
name|result
init|=
name|mk
operator|.
name|getJournal
argument_list|(
name|fromRevisionId
argument_list|,
name|toRevisionId
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|updateAndLogTimes
argument_list|(
literal|"getJournal"
argument_list|,
name|start
argument_list|,
name|size
argument_list|(
name|path
argument_list|)
argument_list|,
name|size
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|diff
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
try|try
block|{
name|long
name|start
init|=
name|now
argument_list|()
decl_stmt|;
name|String
name|result
init|=
name|mk
operator|.
name|diff
argument_list|(
name|fromRevisionId
argument_list|,
name|toRevisionId
argument_list|,
name|path
argument_list|,
name|depth
argument_list|)
decl_stmt|;
name|updateAndLogTimes
argument_list|(
literal|"diff"
argument_list|,
name|start
argument_list|,
name|size
argument_list|(
name|path
argument_list|)
argument_list|,
name|size
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{
try|try
block|{
name|long
name|start
init|=
name|now
argument_list|()
decl_stmt|;
name|long
name|result
init|=
name|mk
operator|.
name|getLength
argument_list|(
name|blobId
argument_list|)
decl_stmt|;
name|updateAndLogTimes
argument_list|(
literal|"getLength"
argument_list|,
name|start
argument_list|,
name|size
argument_list|(
name|blobId
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNodes
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|int
name|depth
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|maxChildNodes
parameter_list|,
name|String
name|filter
parameter_list|)
block|{
try|try
block|{
name|long
name|start
init|=
name|now
argument_list|()
decl_stmt|;
name|String
name|result
init|=
name|mk
operator|.
name|getNodes
argument_list|(
name|path
argument_list|,
name|revisionId
argument_list|,
name|depth
argument_list|,
name|offset
argument_list|,
name|maxChildNodes
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|updateAndLogTimes
argument_list|(
literal|"getNodes"
argument_list|,
name|start
argument_list|,
name|size
argument_list|(
name|path
argument_list|)
operator|+
name|size
argument_list|(
name|filter
argument_list|)
argument_list|,
name|size
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRevisionHistory
parameter_list|(
name|long
name|since
parameter_list|,
name|int
name|maxEntries
parameter_list|,
name|String
name|path
parameter_list|)
block|{
try|try
block|{
name|long
name|start
init|=
name|now
argument_list|()
decl_stmt|;
name|String
name|result
init|=
name|mk
operator|.
name|getRevisionHistory
argument_list|(
name|since
argument_list|,
name|maxEntries
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|updateAndLogTimes
argument_list|(
literal|"getRevisionHistory"
argument_list|,
name|start
argument_list|,
name|size
argument_list|(
name|path
argument_list|)
argument_list|,
name|size
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|nodeExists
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{
try|try
block|{
name|long
name|start
init|=
name|now
argument_list|()
decl_stmt|;
name|boolean
name|result
init|=
name|mk
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|,
name|revisionId
argument_list|)
decl_stmt|;
name|updateAndLogTimes
argument_list|(
literal|"nodeExists"
argument_list|,
name|start
argument_list|,
name|size
argument_list|(
name|path
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{
try|try
block|{
name|long
name|start
init|=
name|now
argument_list|()
decl_stmt|;
name|long
name|result
init|=
name|mk
operator|.
name|getChildNodeCount
argument_list|(
name|path
argument_list|,
name|revisionId
argument_list|)
decl_stmt|;
name|updateAndLogTimes
argument_list|(
literal|"getChildNodeCount"
argument_list|,
name|start
argument_list|,
name|size
argument_list|(
name|path
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|String
name|blobId
parameter_list|,
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|buff
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
block|{
try|try
block|{
name|long
name|start
init|=
name|now
argument_list|()
decl_stmt|;
name|int
name|result
init|=
name|mk
operator|.
name|read
argument_list|(
name|blobId
argument_list|,
name|pos
argument_list|,
name|buff
argument_list|,
name|off
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|updateAndLogTimes
argument_list|(
literal|"read"
argument_list|,
name|start
argument_list|,
name|size
argument_list|(
name|blobId
argument_list|)
operator|+
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|waitForCommit
parameter_list|(
name|String
name|oldHeadRevisionId
parameter_list|,
name|long
name|maxWaitMillis
parameter_list|)
throws|throws
name|InterruptedException
block|{
try|try
block|{
name|long
name|start
init|=
name|now
argument_list|()
decl_stmt|;
name|String
name|result
init|=
name|mk
operator|.
name|waitForCommit
argument_list|(
name|oldHeadRevisionId
argument_list|,
name|maxWaitMillis
argument_list|)
decl_stmt|;
name|updateAndLogTimes
argument_list|(
literal|"waitForCommit"
argument_list|,
name|start
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|write
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
try|try
block|{
name|long
name|start
init|=
name|now
argument_list|()
decl_stmt|;
name|String
name|result
init|=
name|mk
operator|.
name|write
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|updateAndLogTimes
argument_list|(
literal|"write"
argument_list|,
name|start
argument_list|,
literal|0
argument_list|,
name|size
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|branch
parameter_list|(
name|String
name|trunkRevisionId
parameter_list|)
block|{
try|try
block|{
name|long
name|start
init|=
name|now
argument_list|()
decl_stmt|;
name|String
name|result
init|=
name|mk
operator|.
name|branch
argument_list|(
name|trunkRevisionId
argument_list|)
decl_stmt|;
name|updateAndLogTimes
argument_list|(
literal|"branch"
argument_list|,
name|start
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|merge
parameter_list|(
name|String
name|branchRevisionId
parameter_list|,
name|String
name|message
parameter_list|)
block|{
try|try
block|{
name|long
name|start
init|=
name|now
argument_list|()
decl_stmt|;
name|String
name|result
init|=
name|mk
operator|.
name|merge
argument_list|(
name|branchRevisionId
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|updateAndLogTimes
argument_list|(
literal|"merge"
argument_list|,
name|start
argument_list|,
name|size
argument_list|(
name|message
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|rebase
parameter_list|(
annotation|@
name|Nonnull
name|String
name|branchRevisionId
parameter_list|,
name|String
name|newBaseRevisionId
parameter_list|)
block|{
try|try
block|{
name|long
name|start
init|=
name|now
argument_list|()
decl_stmt|;
name|String
name|result
init|=
name|mk
operator|.
name|rebase
argument_list|(
name|branchRevisionId
argument_list|,
name|newBaseRevisionId
argument_list|)
decl_stmt|;
name|updateAndLogTimes
argument_list|(
literal|"rebase"
argument_list|,
name|start
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|RuntimeException
name|convert
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RuntimeException
condition|)
block|{
return|return
operator|(
name|RuntimeException
operator|)
name|e
return|;
block|}
return|return
operator|new
name|MicroKernelException
argument_list|(
literal|"Unexpected exception: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
return|;
block|}
specifier|private
name|void
name|log
parameter_list|(
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"["
operator|+
name|id
operator|+
literal|"] "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|int
name|size
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|==
literal|null
condition|?
literal|0
else|:
name|s
operator|.
name|length
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|long
name|now
parameter_list|()
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
specifier|private
name|void
name|updateAndLogTimes
parameter_list|(
name|String
name|operation
parameter_list|,
name|long
name|start
parameter_list|,
name|int
name|paramSize
parameter_list|,
name|int
name|resultSize
parameter_list|)
block|{
name|long
name|now
init|=
name|now
argument_list|()
decl_stmt|;
if|if
condition|(
name|startTime
operator|==
literal|0
condition|)
block|{
name|startTime
operator|=
name|now
expr_stmt|;
block|}
name|Count
name|c
init|=
name|counts
operator|.
name|get
argument_list|(
name|operation
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|c
operator|=
operator|new
name|Count
argument_list|()
expr_stmt|;
name|counts
operator|.
name|put
argument_list|(
name|operation
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|update
argument_list|(
name|now
operator|-
name|start
argument_list|,
name|paramSize
argument_list|,
name|resultSize
argument_list|)
expr_stmt|;
name|long
name|t
init|=
name|now
operator|-
name|lastLogTime
decl_stmt|;
if|if
condition|(
name|t
operator|>=
literal|2000
condition|)
block|{
name|totalLogTime
operator|+=
name|t
expr_stmt|;
name|lastLogTime
operator|=
name|now
expr_stmt|;
name|long
name|totalCount
init|=
literal|0
decl_stmt|,
name|totalTime
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Count
name|count
range|:
name|counts
operator|.
name|values
argument_list|()
control|)
block|{
name|totalCount
operator|+=
name|count
operator|.
name|count
expr_stmt|;
name|totalTime
operator|+=
name|count
operator|.
name|total
expr_stmt|;
block|}
name|totalCount
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|totalCount
argument_list|)
expr_stmt|;
name|totalTime
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|totalTime
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Count
argument_list|>
name|e
range|:
name|counts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|c
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|long
name|count
init|=
name|c
operator|.
name|count
decl_stmt|;
name|long
name|total
init|=
name|c
operator|.
name|total
decl_stmt|;
name|long
name|in
init|=
name|c
operator|.
name|paramSize
operator|/
literal|1024
operator|/
literal|1024
decl_stmt|;
name|long
name|out
init|=
name|c
operator|.
name|resultSize
operator|/
literal|1024
operator|/
literal|1024
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|log
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|" count "
operator|+
name|count
operator|+
literal|" "
operator|+
operator|(
literal|100
operator|*
name|count
operator|/
name|totalCount
operator|)
operator|+
literal|"%"
operator|+
literal|" in "
operator|+
name|in
operator|+
literal|" out "
operator|+
name|out
operator|+
literal|" time "
operator|+
name|total
operator|+
literal|" "
operator|+
operator|(
literal|100
operator|*
name|total
operator|/
name|totalTime
operator|)
operator|+
literal|"%"
argument_list|)
expr_stmt|;
block|}
block|}
name|log
argument_list|(
literal|"all count "
operator|+
name|totalCount
operator|+
literal|" time "
operator|+
name|totalTime
operator|+
literal|" "
operator|+
operator|(
literal|100
operator|*
name|totalTime
operator|/
name|totalLogTime
operator|)
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"------"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

