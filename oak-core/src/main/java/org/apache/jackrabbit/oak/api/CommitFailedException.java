begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_comment
comment|/**  * Main exception thrown by methods defined on the {@code ContentSession} interface  * indicating that committing a given set of changes failed.  */
end_comment

begin_class
specifier|public
class|class
name|CommitFailedException
extends|extends
name|Exception
block|{
specifier|public
name|CommitFailedException
parameter_list|()
block|{     }
specifier|public
name|CommitFailedException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CommitFailedException
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CommitFailedException
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
comment|/**      * Rethrow this exception cast into a {@link RepositoryException}: if the cause      * for this exception already is a {@code RepositoryException}, this exception is      * wrapped into the actual type of the cause and rethrown. If creating an instance      * of the actual type of the cause fails, cause is simply re-thrown.      * If the cause for this exception is not a {@code RepositoryException} then  a      * new {@code RepositoryException} instance with this {@code CommitFailedException}      * is thrown.      * @throws RepositoryException      */
specifier|public
name|void
name|throwRepositoryException
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Throwable
name|cause
init|=
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|RepositoryException
condition|)
block|{
name|RepositoryException
name|e
decl_stmt|;
try|try
block|{
name|e
operator|=
operator|(
name|RepositoryException
operator|)
name|cause
operator|.
name|getClass
argument_list|()
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|e
operator|.
name|initCause
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|e
operator|=
operator|(
name|RepositoryException
operator|)
name|cause
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

