begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_comment
comment|/**  * A class that can perform simple operations.  */
end_comment

begin_class
specifier|public
class|class
name|SimpleNodeScenario
block|{
specifier|private
specifier|final
name|MicroKernel
name|mk
decl_stmt|;
specifier|public
name|SimpleNodeScenario
parameter_list|(
name|MicroKernel
name|mk
parameter_list|)
block|{
name|this
operator|.
name|mk
operator|=
name|mk
expr_stmt|;
block|}
specifier|public
name|String
name|create
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a\" : { \"int\" : 1 , \"b\" : { \"string\" : \"foo\" } , \"c\" : { \"bool\" : true } }"
argument_list|,
literal|null
argument_list|,
literal|"Simple node scenario with nodes /, /a, /a/b, /a/c"
argument_list|)
return|;
block|}
specifier|public
name|String
name|addChildrenToA
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|revisionId
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|count
condition|;
name|i
operator|++
control|)
block|{
name|revisionId
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/a"
argument_list|,
literal|"+\"child"
operator|+
name|i
operator|+
literal|"\" : {}"
argument_list|,
literal|null
argument_list|,
literal|"Add child"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|revisionId
return|;
block|}
specifier|public
name|String
name|deleteA
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"a\""
argument_list|,
literal|null
argument_list|,
literal|"Commit with deleted /a"
argument_list|)
return|;
block|}
specifier|public
name|String
name|deleteB
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|mk
operator|.
name|commit
argument_list|(
literal|"/a"
argument_list|,
literal|"-\"b\""
argument_list|,
literal|null
argument_list|,
literal|"Commit with deleted /a/b"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

