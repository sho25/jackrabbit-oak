begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|ReadStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|AbstractNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateDiff
import|;
end_import

begin_comment
comment|/**  * SecureNodeState...  *  * TODO: clarify if HIDDEN items should be filtered by this NodeState implementation  * TODO: add proper implementation for getPropertyCount and getChildrenCount  * TODO: clarify usage of ReadStatus in getChildNodeEntries  * TODO: add proper equals/hashcode implementation  * TODO: should be package-private  */
end_comment

begin_class
specifier|public
class|class
name|SecureNodeState
extends|extends
name|AbstractNodeState
block|{
comment|/**      * Underlying node state.      */
specifier|private
specifier|final
name|NodeState
name|state
decl_stmt|;
comment|/**      * Immutable tree based on the underlying node state.      */
specifier|private
specifier|final
name|ImmutableTree
name|base
decl_stmt|;
specifier|private
specifier|final
name|PermissionProvider
name|permissionProvider
decl_stmt|;
specifier|private
name|ReadStatus
name|readStatus
decl_stmt|;
specifier|public
name|SecureNodeState
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|rootState
parameter_list|,
annotation|@
name|Nonnull
name|PermissionProvider
name|permissionProvider
parameter_list|,
annotation|@
name|Nonnull
name|ImmutableTree
operator|.
name|TypeProvider
name|typeProvider
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|checkNotNull
argument_list|(
name|rootState
argument_list|)
expr_stmt|;
name|this
operator|.
name|base
operator|=
operator|new
name|ImmutableTree
argument_list|(
name|rootState
argument_list|,
name|typeProvider
argument_list|)
expr_stmt|;
name|this
operator|.
name|permissionProvider
operator|=
name|permissionProvider
expr_stmt|;
block|}
specifier|private
name|SecureNodeState
parameter_list|(
annotation|@
name|Nonnull
name|SecureNodeState
name|parent
parameter_list|,
annotation|@
name|Nonnull
name|String
name|name
parameter_list|,
annotation|@
name|Nonnull
name|NodeState
name|nodeState
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|checkNotNull
argument_list|(
name|nodeState
argument_list|)
expr_stmt|;
name|this
operator|.
name|base
operator|=
operator|new
name|ImmutableTree
argument_list|(
name|parent
operator|.
name|base
argument_list|,
name|name
argument_list|,
name|nodeState
argument_list|)
expr_stmt|;
name|this
operator|.
name|permissionProvider
operator|=
name|parent
operator|.
name|permissionProvider
expr_stmt|;
if|if
condition|(
name|base
operator|.
name|getType
argument_list|()
operator|==
name|parent
operator|.
name|base
operator|.
name|getType
argument_list|()
condition|)
block|{
name|this
operator|.
name|readStatus
operator|=
operator|(
name|ReadStatus
operator|.
name|getChildStatus
argument_list|(
name|parent
operator|.
name|readStatus
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
name|getReadStatus
argument_list|()
operator|.
name|includes
argument_list|(
name|ReadStatus
operator|.
name|ALLOW_THIS
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
specifier|public
name|PropertyState
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|PropertyState
name|property
init|=
name|state
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|canReadProperty
argument_list|(
name|property
argument_list|)
condition|)
block|{
return|return
name|property
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPropertyCount
parameter_list|()
block|{
comment|// TODO: make sure cnt respects read permissions (OAK-708)
return|return
name|state
operator|.
name|getPropertyCount
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
name|ReadStatus
name|rs
init|=
name|getReadStatus
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|properties
init|=
name|state
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|includes
argument_list|(
name|ReadStatus
operator|.
name|ALLOW_PROPERTIES
argument_list|)
condition|)
block|{
return|return
name|properties
return|;
block|}
elseif|else
if|if
condition|(
name|rs
operator|.
name|includes
argument_list|(
name|ReadStatus
operator|.
name|DENY_PROPERTIES
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
else|else
block|{
name|Iterable
argument_list|<
name|PropertyState
argument_list|>
name|readable
init|=
name|Iterables
operator|.
name|transform
argument_list|(
name|properties
argument_list|,
operator|new
name|ReadableProperties
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Iterables
operator|.
name|filter
argument_list|(
name|readable
argument_list|,
name|Predicates
operator|.
name|notNull
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasChildNode
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
block|{
return|return
name|getChildNode
argument_list|(
name|name
argument_list|)
operator|.
name|exists
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
block|{
name|NodeState
name|child
init|=
name|state
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
operator|new
name|SecureNodeState
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|child
argument_list|)
return|;
block|}
else|else
block|{
comment|// a non-existing child node
return|return
name|child
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|()
block|{
comment|// TODO: make sure cnt respects read permissions (OAK-708)
return|return
name|state
operator|.
name|getChildNodeCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getChildNodeNames
parameter_list|()
block|{
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|getChildNodeEntries
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|ChildNodeEntry
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
annotation|@
name|Nullable
name|ChildNodeEntry
name|cnEntry
parameter_list|)
block|{
return|return
operator|(
name|cnEntry
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|cnEntry
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|()
block|{
name|ReadStatus
name|rs
init|=
name|getReadStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|includes
argument_list|(
name|ReadStatus
operator|.
name|DENY_CHILDREN
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
else|else
block|{
comment|// TODO: review if ALLOW_CHILDREN could be used as well although we
comment|// don't know the type of all child-nodes where ac node would need special treatment
name|Iterable
argument_list|<
name|ChildNodeEntry
argument_list|>
name|readable
init|=
name|Iterables
operator|.
name|transform
argument_list|(
name|state
operator|.
name|getChildNodeEntries
argument_list|()
argument_list|,
operator|new
name|ReadableChildNodeEntries
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Iterables
operator|.
name|filter
argument_list|(
name|readable
argument_list|,
name|Predicates
operator|.
name|notNull
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeBuilder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|MemoryNodeBuilder
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|compareAgainstBaseState
parameter_list|(
name|NodeState
name|base
parameter_list|,
name|NodeStateDiff
name|diff
parameter_list|)
block|{
comment|// FIXME: should not bypass access controls
name|state
operator|.
name|compareAgainstBaseState
argument_list|(
name|base
argument_list|,
name|diff
argument_list|)
expr_stmt|;
block|}
comment|//--------------------------------------------------------------------------
specifier|private
name|ReadStatus
name|getReadStatus
parameter_list|()
block|{
if|if
condition|(
name|readStatus
operator|==
literal|null
condition|)
block|{
name|readStatus
operator|=
name|permissionProvider
operator|.
name|getReadStatus
argument_list|(
name|base
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|readStatus
return|;
block|}
specifier|private
name|boolean
name|canReadProperty
parameter_list|(
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|)
block|{
if|if
condition|(
name|property
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|readStatus
operator|==
literal|null
operator|||
name|readStatus
operator|.
name|appliesToThis
argument_list|()
condition|)
block|{
name|ReadStatus
name|rs
init|=
name|permissionProvider
operator|.
name|getReadStatus
argument_list|(
name|this
operator|.
name|base
argument_list|,
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|appliesToThis
argument_list|()
condition|)
block|{
comment|// status applies to this property only -> recalc for others
return|return
name|rs
operator|.
name|isAllow
argument_list|()
return|;
block|}
else|else
block|{
name|readStatus
operator|=
name|rs
expr_stmt|;
block|}
block|}
return|return
name|readStatus
operator|.
name|includes
argument_list|(
name|ReadStatus
operator|.
name|ALLOW_PROPERTIES
argument_list|)
return|;
block|}
specifier|private
class|class
name|ReadableProperties
implements|implements
name|Function
argument_list|<
name|PropertyState
argument_list|,
name|PropertyState
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|PropertyState
name|apply
parameter_list|(
name|PropertyState
name|property
parameter_list|)
block|{
if|if
condition|(
name|canReadProperty
argument_list|(
name|property
argument_list|)
condition|)
block|{
return|return
name|property
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|private
class|class
name|ReadableChildNodeEntries
implements|implements
name|Function
argument_list|<
name|ChildNodeEntry
argument_list|,
name|ChildNodeEntry
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|ChildNodeEntry
name|apply
parameter_list|(
name|ChildNodeEntry
name|input
parameter_list|)
block|{
name|String
name|name
init|=
name|input
operator|.
name|getName
argument_list|()
decl_stmt|;
name|NodeState
name|child
init|=
operator|new
name|SecureNodeState
argument_list|(
name|SecureNodeState
operator|.
name|this
argument_list|,
name|name
argument_list|,
name|input
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
operator|new
name|MemoryChildNodeEntry
argument_list|(
name|name
argument_list|,
name|child
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
comment|//-------------------------------------------------------------< Object>---
comment|// FIXME: add proper equals/hashcode implementation (see OAK-709)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|state
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
block|}
end_class

end_unit

