begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_comment
comment|/**  * Implementation note: the 'key' parameter is ignored  * since it's not required for binary serialization.  */
end_comment

begin_class
specifier|public
class|class
name|BinaryBinding
implements|implements
name|Binding
block|{
specifier|protected
name|InputStream
name|in
decl_stmt|;
specifier|protected
name|OutputStream
name|out
decl_stmt|;
specifier|public
name|BinaryBinding
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|BinaryBinding
parameter_list|(
name|OutputStream
name|out
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|in
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|out
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no OutputStream provided"
argument_list|)
throw|;
block|}
name|IOUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|String
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|out
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no OutputStream provided"
argument_list|)
throw|;
block|}
name|IOUtils
operator|.
name|writeBytes
argument_list|(
name|out
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|String
name|key
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|out
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no OutputStream provided"
argument_list|)
throw|;
block|}
name|IOUtils
operator|.
name|writeVarLong
argument_list|(
name|out
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|String
name|key
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|out
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no OutputStream provided"
argument_list|)
throw|;
block|}
name|IOUtils
operator|.
name|writeVarInt
argument_list|(
name|out
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeMap
parameter_list|(
name|String
name|key
parameter_list|,
name|int
name|count
parameter_list|,
name|StringEntryIterator
name|iterator
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|out
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no OutputStream provided"
argument_list|)
throw|;
block|}
name|IOUtils
operator|.
name|writeVarInt
argument_list|(
name|out
argument_list|,
name|count
argument_list|)
expr_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|StringEntry
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeMap
parameter_list|(
name|String
name|key
parameter_list|,
name|int
name|count
parameter_list|,
name|BytesEntryIterator
name|iterator
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|out
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no OutputStream provided"
argument_list|)
throw|;
block|}
name|IOUtils
operator|.
name|writeVarInt
argument_list|(
name|out
argument_list|,
name|count
argument_list|)
expr_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BytesEntry
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|writeBytes
argument_list|(
name|out
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|readStringValue
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no InputStream provided"
argument_list|)
throw|;
block|}
return|return
name|IOUtils
operator|.
name|readString
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readBytesValue
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no InputStream provided"
argument_list|)
throw|;
block|}
return|return
name|IOUtils
operator|.
name|readBytes
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|readLongValue
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no InputStream provided"
argument_list|)
throw|;
block|}
return|return
name|IOUtils
operator|.
name|readVarLong
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|readIntValue
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no InputStream provided"
argument_list|)
throw|;
block|}
return|return
name|IOUtils
operator|.
name|readVarInt
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|StringEntryIterator
name|readStringMap
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no InputStream provided"
argument_list|)
throw|;
block|}
specifier|final
name|int
name|size
init|=
name|IOUtils
operator|.
name|readVarInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
return|return
operator|new
name|StringEntryIterator
argument_list|()
block|{
name|int
name|count
init|=
name|size
decl_stmt|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|count
operator|>
literal|0
return|;
block|}
specifier|public
name|StringEntry
name|next
parameter_list|()
block|{
if|if
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|String
name|key
init|=
name|IOUtils
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|IOUtils
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
return|return
operator|new
name|StringEntry
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"deserialization failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesEntryIterator
name|readBytesMap
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no InputStream provided"
argument_list|)
throw|;
block|}
specifier|final
name|int
name|size
init|=
name|IOUtils
operator|.
name|readVarInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
return|return
operator|new
name|BytesEntryIterator
argument_list|()
block|{
name|int
name|count
init|=
name|size
decl_stmt|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|count
operator|>
literal|0
return|;
block|}
specifier|public
name|BytesEntry
name|next
parameter_list|()
block|{
if|if
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|String
name|key
init|=
name|IOUtils
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|IOUtils
operator|.
name|readBytes
argument_list|(
name|in
argument_list|)
decl_stmt|;
return|return
operator|new
name|BytesEntry
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"deserialization failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

