begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
operator|.
name|checks
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
operator|.
name|MountedNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|ReadOnlyNodeTypeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|RootFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_comment
comment|/**  * Checks that no<tt>versionable</tt> nodes are present in a non-default<tt>NodeStore</tt>  */
end_comment

begin_class
annotation|@
name|Component
annotation|@
name|Service
argument_list|(
name|MountedNodeStoreChecker
operator|.
name|class
argument_list|)
specifier|public
class|class
name|VersionableNodesMountedNodeStoreChecker
implements|implements
name|MountedNodeStoreChecker
argument_list|<
name|VersionableNodesMountedNodeStoreChecker
operator|.
name|Context
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Context
name|createContext
parameter_list|(
name|NodeStore
name|globalStore
parameter_list|)
block|{
name|Root
name|globalRoot
init|=
name|RootFactory
operator|.
name|createReadOnlyRoot
argument_list|(
name|globalStore
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|ReadOnlyNodeTypeManager
name|typeManager
init|=
name|ReadOnlyNodeTypeManager
operator|.
name|getInstance
argument_list|(
name|globalRoot
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
return|return
operator|new
name|Context
argument_list|(
name|typeManager
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|check
parameter_list|(
name|MountedNodeStore
name|mountedStore
parameter_list|,
name|Tree
name|tree
parameter_list|,
name|ErrorHolder
name|errorHolder
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|.
name|getTypeManager
argument_list|()
operator|.
name|isNodeType
argument_list|(
name|tree
argument_list|,
name|VersionConstants
operator|.
name|MIX_VERSIONABLE
argument_list|)
condition|)
block|{
name|errorHolder
operator|.
name|report
argument_list|(
name|mountedStore
argument_list|,
name|tree
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"versionable node"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|Context
block|{
specifier|private
specifier|final
name|ReadOnlyNodeTypeManager
name|typeManager
decl_stmt|;
name|Context
parameter_list|(
name|ReadOnlyNodeTypeManager
name|typeManager
parameter_list|)
block|{
name|this
operator|.
name|typeManager
operator|=
name|typeManager
expr_stmt|;
block|}
specifier|public
name|ReadOnlyNodeTypeManager
name|getTypeManager
parameter_list|()
block|{
return|return
name|typeManager
return|;
block|}
block|}
block|}
end_class

end_unit

