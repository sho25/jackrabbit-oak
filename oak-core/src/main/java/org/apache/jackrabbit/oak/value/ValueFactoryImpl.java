begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|value
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFormatException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteStreams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|identifier
operator|.
name|IdentifierManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|StringPropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|ISO8601
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link ValueFactory} interface.  */
end_comment

begin_class
specifier|public
class|class
name|ValueFactoryImpl
implements|implements
name|ValueFactory
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ValueFactoryImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|NamePathMapper
name|namePathMapper
decl_stmt|;
comment|/**      * Creates a new instance of {@code ValueFactory}.      *      * @param namePathMapper The name/path mapping used for converting JCR names/paths to      * the internal representation.      */
specifier|public
name|ValueFactoryImpl
parameter_list|(
name|NamePathMapper
name|namePathMapper
parameter_list|)
block|{
name|this
operator|.
name|namePathMapper
operator|=
name|namePathMapper
expr_stmt|;
block|}
specifier|public
specifier|static
name|Value
name|createValue
parameter_list|(
name|PropertyState
name|property
parameter_list|,
name|NamePathMapper
name|namePathMapper
parameter_list|)
block|{
return|return
operator|new
name|ValueImpl
argument_list|(
name|property
argument_list|,
name|namePathMapper
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Value
argument_list|>
name|createValues
parameter_list|(
name|PropertyState
name|property
parameter_list|,
name|NamePathMapper
name|namePathMapper
parameter_list|)
block|{
name|List
argument_list|<
name|Value
argument_list|>
name|values
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|property
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
operator|new
name|ValueImpl
argument_list|(
name|property
argument_list|,
name|i
argument_list|,
name|namePathMapper
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
comment|//-------------------------------------------------------< ValueFactory>---
annotation|@
name|Override
specifier|public
name|Value
name|createValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|ValueImpl
argument_list|(
name|PropertyStates
operator|.
name|stringProperty
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
argument_list|,
name|namePathMapper
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ValueImpl
name|createValue
parameter_list|(
name|InputStream
name|value
parameter_list|)
block|{
try|try
block|{
try|try
block|{
comment|// TODO add streaming capability to ContentSession via KernelBasedBlob
return|return
operator|new
name|ValueImpl
argument_list|(
name|PropertyStates
operator|.
name|binaryProperty
argument_list|(
literal|""
argument_list|,
name|ByteStreams
operator|.
name|toByteArray
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|,
name|namePathMapper
argument_list|)
return|;
block|}
finally|finally
block|{
name|value
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// TODO return a value which throws on each access instead
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Value
name|createValue
parameter_list|(
name|Binary
name|value
parameter_list|)
block|{
try|try
block|{
return|return
name|createValue
argument_list|(
name|value
operator|.
name|getStream
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|ex
parameter_list|)
block|{
comment|// TODO return a value which throws on each access instead
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Value
name|createValue
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
operator|new
name|ValueImpl
argument_list|(
name|PropertyStates
operator|.
name|longProperty
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
argument_list|,
name|namePathMapper
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Value
name|createValue
parameter_list|(
name|double
name|value
parameter_list|)
block|{
return|return
operator|new
name|ValueImpl
argument_list|(
name|PropertyStates
operator|.
name|doubleProperty
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
argument_list|,
name|namePathMapper
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Value
name|createValue
parameter_list|(
name|Calendar
name|value
parameter_list|)
block|{
name|String
name|dateStr
init|=
name|ISO8601
operator|.
name|format
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
operator|new
name|ValueImpl
argument_list|(
name|PropertyStates
operator|.
name|dateProperty
argument_list|(
literal|""
argument_list|,
name|dateStr
argument_list|)
argument_list|,
name|namePathMapper
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Value
name|createValue
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
return|return
operator|new
name|ValueImpl
argument_list|(
name|PropertyStates
operator|.
name|booleanProperty
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
argument_list|,
name|namePathMapper
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Value
name|createValue
parameter_list|(
name|Node
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|createValue
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Value
name|createValue
parameter_list|(
name|Node
name|value
parameter_list|,
name|boolean
name|weak
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|weak
condition|?
operator|new
name|ValueImpl
argument_list|(
name|PropertyStates
operator|.
name|weakreferenceProperty
argument_list|(
literal|""
argument_list|,
name|value
operator|.
name|getUUID
argument_list|()
argument_list|)
argument_list|,
name|namePathMapper
argument_list|)
else|:
operator|new
name|ValueImpl
argument_list|(
name|PropertyStates
operator|.
name|referenceProperty
argument_list|(
literal|""
argument_list|,
name|value
operator|.
name|getUUID
argument_list|()
argument_list|)
argument_list|,
name|namePathMapper
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Value
name|createValue
parameter_list|(
name|BigDecimal
name|value
parameter_list|)
block|{
return|return
operator|new
name|ValueImpl
argument_list|(
name|PropertyStates
operator|.
name|decimalProperty
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
argument_list|,
name|namePathMapper
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Value
name|createValue
parameter_list|(
name|String
name|value
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|ValueFormatException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ValueFormatException
argument_list|()
throw|;
block|}
try|try
block|{
name|PropertyState
name|pv
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|PropertyType
operator|.
name|STRING
case|:
return|return
name|createValue
argument_list|(
name|value
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|BINARY
case|:
name|pv
operator|=
name|PropertyStates
operator|.
name|binaryProperty
argument_list|(
literal|""
argument_list|,
name|value
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|PropertyType
operator|.
name|LONG
case|:
return|return
name|createValue
argument_list|(
name|StringPropertyState
operator|.
name|getLong
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DOUBLE
case|:
return|return
name|createValue
argument_list|(
name|StringPropertyState
operator|.
name|getDouble
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DATE
case|:
if|if
condition|(
name|ISO8601
operator|.
name|parse
argument_list|(
name|value
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ValueFormatException
argument_list|(
literal|"Invalid date "
operator|+
name|value
argument_list|)
throw|;
block|}
name|pv
operator|=
name|PropertyStates
operator|.
name|dateProperty
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|PropertyType
operator|.
name|BOOLEAN
case|:
return|return
name|createValue
argument_list|(
name|StringPropertyState
operator|.
name|getBoolean
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|NAME
case|:
name|String
name|oakName
init|=
name|namePathMapper
operator|.
name|getOakName
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|oakName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ValueFormatException
argument_list|(
literal|"Invalid name: "
operator|+
name|value
argument_list|)
throw|;
block|}
name|pv
operator|=
name|PropertyStates
operator|.
name|nameProperty
argument_list|(
literal|""
argument_list|,
name|oakName
argument_list|)
expr_stmt|;
break|break;
case|case
name|PropertyType
operator|.
name|PATH
case|:
name|String
name|oakValue
init|=
name|value
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"["
argument_list|)
operator|&&
name|value
operator|.
name|endsWith
argument_list|(
literal|"]"
argument_list|)
condition|)
block|{
comment|// identifier path; do no change
block|}
else|else
block|{
name|oakValue
operator|=
name|namePathMapper
operator|.
name|getOakPath
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oakValue
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ValueFormatException
argument_list|(
literal|"Invalid path: "
operator|+
name|value
argument_list|)
throw|;
block|}
name|pv
operator|=
name|PropertyStates
operator|.
name|pathProperty
argument_list|(
literal|""
argument_list|,
name|oakValue
argument_list|)
expr_stmt|;
break|break;
case|case
name|PropertyType
operator|.
name|REFERENCE
case|:
if|if
condition|(
operator|!
name|IdentifierManager
operator|.
name|isValidUUID
argument_list|(
name|value
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ValueFormatException
argument_list|(
literal|"Invalid reference value "
operator|+
name|value
argument_list|)
throw|;
block|}
name|pv
operator|=
name|PropertyStates
operator|.
name|referenceProperty
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|PropertyType
operator|.
name|WEAKREFERENCE
case|:
if|if
condition|(
operator|!
name|IdentifierManager
operator|.
name|isValidUUID
argument_list|(
name|value
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ValueFormatException
argument_list|(
literal|"Invalid weak reference value "
operator|+
name|value
argument_list|)
throw|;
block|}
name|pv
operator|=
name|PropertyStates
operator|.
name|weakreferenceProperty
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|PropertyType
operator|.
name|URI
case|:
operator|new
name|URI
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|pv
operator|=
name|PropertyStates
operator|.
name|uriProperty
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|PropertyType
operator|.
name|DECIMAL
case|:
return|return
name|createValue
argument_list|(
name|StringPropertyState
operator|.
name|getDecimal
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|ValueFormatException
argument_list|(
literal|"Invalid type: "
operator|+
name|type
argument_list|)
throw|;
block|}
return|return
operator|new
name|ValueImpl
argument_list|(
name|pv
argument_list|,
name|namePathMapper
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ValueFormatException
argument_list|(
literal|"Encoding UTF-8 not supported (this should not happen!)"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ValueFormatException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ValueFormatException
argument_list|(
literal|"Invalid value "
operator|+
name|value
operator|+
literal|" for type "
operator|+
name|PropertyType
operator|.
name|nameFromValue
argument_list|(
name|type
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ValueFormatException
argument_list|(
literal|"Invalid value "
operator|+
name|value
operator|+
literal|" for type "
operator|+
name|PropertyType
operator|.
name|nameFromValue
argument_list|(
name|type
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Binary
name|createBinary
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
operator|new
name|BinaryImpl
argument_list|(
name|createValue
argument_list|(
name|stream
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

