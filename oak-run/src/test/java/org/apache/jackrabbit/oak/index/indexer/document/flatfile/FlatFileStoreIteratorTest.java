begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|flatfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|NodeStateEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|flatfile
operator|.
name|FlatFileStoreIterator
operator|.
name|BUFFER_MEM_LIMIT_CONFIG_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|flatfile
operator|.
name|TestUtils
operator|.
name|createList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|FlatFileStoreIteratorTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|simpleTraversal
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|preferred
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"jcr:content"
argument_list|)
decl_stmt|;
name|CountingIterable
argument_list|<
name|NodeStateEntry
argument_list|>
name|citr
init|=
name|createList
argument_list|(
name|preferred
argument_list|,
name|asList
argument_list|(
literal|"/a"
argument_list|,
literal|"/a/jcr:content"
argument_list|,
literal|"/a/jcr:content/metadata"
argument_list|,
literal|"/a/d"
argument_list|,
literal|"/e"
argument_list|)
argument_list|)
decl_stmt|;
name|FlatFileStoreIterator
name|fitr
init|=
operator|new
name|FlatFileStoreIterator
argument_list|(
name|citr
operator|.
name|iterator
argument_list|()
argument_list|,
name|preferred
argument_list|)
decl_stmt|;
name|NodeStateEntry
name|a
init|=
name|fitr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/a"
argument_list|,
name|a
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|NodeState
name|ns1
init|=
name|a
operator|.
name|getNodeState
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"jcr:content"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/a/jcr:content"
argument_list|,
name|ns1
operator|.
name|getString
argument_list|(
literal|"path"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fitr
operator|.
name|getBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|NodeState
name|ns2
init|=
name|ns1
operator|.
name|getChildNode
argument_list|(
literal|"metadata"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/a/jcr:content/metadata"
argument_list|,
name|ns2
operator|.
name|getString
argument_list|(
literal|"path"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fitr
operator|.
name|getBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|NodeStateEntry
name|nse1
init|=
name|fitr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/a/jcr:content"
argument_list|,
name|nse1
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|NodeStateEntry
name|nse2
init|=
name|fitr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/a/jcr:content/metadata"
argument_list|,
name|nse2
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|NodeStateEntry
name|nse3
init|=
name|fitr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/a/d"
argument_list|,
name|nse3
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nse3
operator|.
name|getNodeState
argument_list|()
operator|.
name|getChildNodeCount
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|NodeStateEntry
name|nse4
init|=
name|fitr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/e"
argument_list|,
name|nse4
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nse4
operator|.
name|getNodeState
argument_list|()
operator|.
name|getChildNodeCount
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fitr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|invalidOrderAccess
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|preferred
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"jcr:content"
argument_list|)
decl_stmt|;
name|CountingIterable
argument_list|<
name|NodeStateEntry
argument_list|>
name|citr
init|=
name|createList
argument_list|(
name|preferred
argument_list|,
name|asList
argument_list|(
literal|"/a"
argument_list|,
literal|"/a/jcr:content"
argument_list|,
literal|"/a/jcr:content/metadata"
argument_list|,
literal|"/a/d"
argument_list|,
literal|"/e"
argument_list|)
argument_list|)
decl_stmt|;
name|FlatFileStoreIterator
name|fitr
init|=
operator|new
name|FlatFileStoreIterator
argument_list|(
name|citr
operator|.
name|iterator
argument_list|()
argument_list|,
name|preferred
argument_list|)
decl_stmt|;
name|NodeStateEntry
name|a
init|=
name|fitr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/a"
argument_list|,
name|a
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|NodeState
name|ns1
init|=
name|a
operator|.
name|getNodeState
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"jcr:content"
argument_list|)
decl_stmt|;
name|NodeStateEntry
name|nse1
init|=
name|fitr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/a/jcr:content"
argument_list|,
name|nse1
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nse1
operator|.
name|getNodeState
argument_list|()
operator|.
name|getChildNodeCount
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|//Now move past /a/jcr:content
name|NodeStateEntry
name|nse2
init|=
name|fitr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/a/jcr:content/metadata"
argument_list|,
name|nse2
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|//Now access from /a/jcr:content node should fail
name|ns1
operator|.
name|getChildNodeCount
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Access should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ignore
parameter_list|)
block|{          }
block|}
comment|// OAK-7284
annotation|@
name|Test
specifier|public
name|void
name|comodificationException
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|preferred
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"j:c"
argument_list|)
decl_stmt|;
name|CountingIterable
argument_list|<
name|NodeStateEntry
argument_list|>
name|citr
init|=
name|createList
argument_list|(
name|preferred
argument_list|,
name|asList
argument_list|(
literal|"/a"
argument_list|,
literal|"/a/j:c"
argument_list|,
literal|"/a/j:c/j:c"
argument_list|,
literal|"/a/b"
argument_list|)
argument_list|)
decl_stmt|;
name|FlatFileStoreIterator
name|fitr
init|=
operator|new
name|FlatFileStoreIterator
argument_list|(
name|citr
operator|.
name|iterator
argument_list|()
argument_list|,
name|preferred
argument_list|)
decl_stmt|;
name|NodeStateEntry
name|a
init|=
name|fitr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/a"
argument_list|,
name|a
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|NodeState
name|aNS
init|=
name|a
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// fake aggregate rule like "j:c/*"
for|for
control|(
name|ChildNodeEntry
name|cne
range|:
name|aNS
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|NodeState
name|childNS
init|=
name|cne
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// read preferred names for aggregation sub-tree nodes
for|for
control|(
name|String
name|prefName
range|:
name|preferred
control|)
block|{
name|childNS
operator|.
name|getChildNode
argument_list|(
name|prefName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// OAK-7285
annotation|@
name|Test
specifier|public
name|void
name|getChildNodeLimitedByNonPreferred
parameter_list|()
block|{
comment|// have more than 1 preferred names
name|Set
argument_list|<
name|String
argument_list|>
name|preferred
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"j:c"
argument_list|,
literal|"md"
argument_list|)
decl_stmt|;
name|CountingIterable
argument_list|<
name|NodeStateEntry
argument_list|>
name|citr
init|=
name|createList
argument_list|(
name|preferred
argument_list|,
name|asList
argument_list|(
literal|"/a"
argument_list|,
literal|"/a/b"
argument_list|,
literal|"/a/c"
argument_list|)
argument_list|)
decl_stmt|;
name|FlatFileStoreIterator
name|fitr
init|=
operator|new
name|FlatFileStoreIterator
argument_list|(
name|citr
operator|.
name|iterator
argument_list|()
argument_list|,
name|preferred
argument_list|)
decl_stmt|;
name|NodeStateEntry
name|a
init|=
name|fitr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/a"
argument_list|,
name|a
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|NodeState
name|aNS
init|=
name|a
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|aNS
operator|.
name|getChildNode
argument_list|(
literal|"j:c"
argument_list|)
expr_stmt|;
comment|// Don't read whole tree to conclude that "j:c" doesn't exist (reading /a/b should imply that it doesn't exist)
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fitr
operator|.
name|getBufferSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|bufferEstimatesMemory
parameter_list|()
block|{
name|List
argument_list|<
name|NodeStateEntry
argument_list|>
name|nseList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|NodeStateEntry
argument_list|(
name|EmptyNodeState
operator|.
name|EMPTY_NODE
argument_list|,
literal|"/a"
argument_list|,
literal|20
argument_list|)
argument_list|,
operator|new
name|NodeStateEntry
argument_list|(
name|EmptyNodeState
operator|.
name|EMPTY_NODE
argument_list|,
literal|"/a/b"
argument_list|,
literal|30
argument_list|)
argument_list|)
decl_stmt|;
name|FlatFileStoreIterator
name|fitr
init|=
operator|new
name|FlatFileStoreIterator
argument_list|(
name|nseList
operator|.
name|iterator
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|NodeStateEntry
name|entry
init|=
name|fitr
operator|.
name|next
argument_list|()
decl_stmt|;
name|NodeState
name|entryNS
init|=
name|entry
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/a"
argument_list|,
name|entry
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Fetching from iterator doesn't use buffer"
argument_list|,
literal|0
argument_list|,
name|fitr
operator|.
name|getBufferMemoryUsage
argument_list|()
argument_list|)
expr_stmt|;
name|entryNS
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fitr
operator|.
name|getBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reaching child from node state should estimate 30 for /a/b"
argument_list|,
literal|30
argument_list|,
name|fitr
operator|.
name|getBufferMemoryUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|memUsageConfig
parameter_list|()
block|{
name|String
name|configuredValue
init|=
name|System
operator|.
name|clearProperty
argument_list|(
name|BUFFER_MEM_LIMIT_CONFIG_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|NodeStateEntry
name|root
init|=
operator|new
name|NodeStateEntry
argument_list|(
name|EmptyNodeState
operator|.
name|EMPTY_NODE
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|NodeStateEntry
name|e1Byte
init|=
operator|new
name|NodeStateEntry
argument_list|(
name|EmptyNodeState
operator|.
name|EMPTY_NODE
argument_list|,
literal|"/a/b"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|NodeStateEntry
name|e1MB
init|=
operator|new
name|NodeStateEntry
argument_list|(
name|EmptyNodeState
operator|.
name|EMPTY_NODE
argument_list|,
literal|"/a"
argument_list|,
literal|1
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|NodeStateEntry
name|e100MB
init|=
operator|new
name|NodeStateEntry
argument_list|(
name|EmptyNodeState
operator|.
name|EMPTY_NODE
argument_list|,
literal|"/a"
argument_list|,
literal|100
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
block|{
comment|//default configured limit
name|List
argument_list|<
name|NodeStateEntry
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|root
argument_list|,
name|e100MB
argument_list|,
name|e1Byte
argument_list|)
decl_stmt|;
name|FlatFileStoreIterator
name|fitr
init|=
operator|new
name|FlatFileStoreIterator
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|NodeState
name|rootNS
init|=
name|fitr
operator|.
name|next
argument_list|()
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|aNS
init|=
name|rootNS
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
comment|//default is 100MB, this should work
try|try
block|{
name|aNS
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Reading beyond default 100MB must fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|BUFFER_MEM_LIMIT_CONFIG_NAME
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeStateEntry
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|root
argument_list|,
name|e1MB
argument_list|,
name|e1Byte
argument_list|)
decl_stmt|;
name|FlatFileStoreIterator
name|fitr
init|=
operator|new
name|FlatFileStoreIterator
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|NodeState
name|rootNS
init|=
name|fitr
operator|.
name|next
argument_list|()
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|aNS
init|=
name|rootNS
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
comment|//configured limit is 10 bytes, this should work
try|try
block|{
name|aNS
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Reading beyond configured 1MB must fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|{
comment|// illegal config behaves as default
name|System
operator|.
name|setProperty
argument_list|(
name|BUFFER_MEM_LIMIT_CONFIG_NAME
argument_list|,
literal|"1A"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeStateEntry
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|root
argument_list|,
name|e100MB
argument_list|,
name|e1Byte
argument_list|)
decl_stmt|;
name|FlatFileStoreIterator
name|fitr
init|=
operator|new
name|FlatFileStoreIterator
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|NodeState
name|rootNS
init|=
name|fitr
operator|.
name|next
argument_list|()
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|aNS
init|=
name|rootNS
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
comment|//default is 100MB, this should work
try|try
block|{
name|aNS
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Reading beyond default 100MB must fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|{
comment|// negative value for unbounded buffer
name|System
operator|.
name|setProperty
argument_list|(
name|BUFFER_MEM_LIMIT_CONFIG_NAME
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeStateEntry
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|root
argument_list|,
name|e100MB
argument_list|,
name|e1Byte
argument_list|)
decl_stmt|;
name|FlatFileStoreIterator
name|fitr
init|=
operator|new
name|FlatFileStoreIterator
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|NodeState
name|rootNS
init|=
name|fitr
operator|.
name|next
argument_list|()
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|aNS
init|=
name|rootNS
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|aNS
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
comment|//configure negative value - mem usage limit should be unbounded (long_max)
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|configuredValue
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|clearProperty
argument_list|(
name|BUFFER_MEM_LIMIT_CONFIG_NAME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|BUFFER_MEM_LIMIT_CONFIG_NAME
argument_list|,
name|configuredValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

