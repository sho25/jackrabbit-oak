begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_comment
comment|/**  * Helper class to access package private functionality.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|CheckpointsHelper
block|{
specifier|public
specifier|static
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|getCheckpoints
parameter_list|(
name|DocumentNodeStore
name|store
parameter_list|)
block|{
return|return
name|store
operator|.
name|getCheckpoints
argument_list|()
operator|.
name|getCheckpoints
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|long
name|removeAll
parameter_list|(
name|DocumentNodeStore
name|store
parameter_list|)
block|{
name|long
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Revision
name|r
range|:
name|getCheckpoints
argument_list|(
name|store
argument_list|)
operator|.
name|keySet
argument_list|()
control|)
block|{
name|store
operator|.
name|getCheckpoints
argument_list|()
operator|.
name|release
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
block|}
return|return
name|cnt
return|;
block|}
specifier|public
specifier|static
name|long
name|removeOlderThan
parameter_list|(
name|DocumentNodeStore
name|store
parameter_list|,
name|Revision
name|r
parameter_list|)
block|{
name|long
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Revision
name|cp
range|:
name|getCheckpoints
argument_list|(
name|store
argument_list|)
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|cp
operator|.
name|getTimestamp
argument_list|()
operator|<
name|r
operator|.
name|getTimestamp
argument_list|()
condition|)
block|{
name|store
operator|.
name|getCheckpoints
argument_list|()
operator|.
name|release
argument_list|(
name|cp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
block|}
block|}
return|return
name|cnt
return|;
block|}
specifier|public
specifier|static
name|int
name|remove
parameter_list|(
name|DocumentNodeStore
name|store
parameter_list|,
name|Revision
name|r
parameter_list|)
block|{
if|if
condition|(
name|getCheckpoints
argument_list|(
name|store
argument_list|)
operator|.
name|containsKey
argument_list|(
name|r
argument_list|)
condition|)
block|{
name|store
operator|.
name|getCheckpoints
argument_list|()
operator|.
name|release
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

