begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|prototype
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_class
specifier|public
class|class
name|MongoMK
implements|implements
name|MicroKernel
block|{
comment|/**      * The MongoDB store (might be used by multiple MongoMKs).      */
specifier|private
specifier|final
name|DocumentStore
name|store
decl_stmt|;
comment|/**      * The unique cluster id, similar to the unique machine id in MongoDB.      */
specifier|private
specifier|final
name|int
name|clusterId
decl_stmt|;
comment|/**      * The node cache.      *       * Key: path@rev      * Value: node      */
comment|// TODO: should be path@id
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Node
argument_list|>
name|nodeCache
init|=
operator|new
name|Cache
argument_list|<
name|String
argument_list|,
name|Node
argument_list|>
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
comment|/**      * For revisions that are older than this many seconds, the MongoMK will      * assume the revision is valid. For more recent changes, the MongoMK needs      * to verify it first (by reading the revision root). The default is      * Integer.MAX_VALUE, meaning no revisions are trusted. Once the garbage      * collector removes old revisions, this value is changed.      */
specifier|private
specifier|static
specifier|final
name|int
name|trustedRevisionAge
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
comment|/**      * The set of known valid revision.      * The key is the revision id, the value is 1 (because a cache can't be a set).      */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|revCache
init|=
operator|new
name|Cache
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
comment|/**      * Create a new MongoMK.      *       * @param store the store (might be shared)      * @param clusterId the cluster id (must be unique)      */
specifier|public
name|MongoMK
parameter_list|(
name|MemoryDocumentStore
name|store
parameter_list|,
name|int
name|clusterId
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
block|}
name|String
name|getNewRevision
parameter_list|()
block|{
return|return
name|Utils
operator|.
name|createRevision
argument_list|(
name|clusterId
argument_list|)
return|;
block|}
comment|/**      * Get the node for the given path and revision. The returned object might      * not be modified directly.      *       * @param path      * @param rev      * @return the node      */
name|Node
name|getNode
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|rev
parameter_list|)
block|{
name|String
name|key
init|=
name|path
operator|+
literal|"@"
operator|+
name|rev
decl_stmt|;
name|Node
name|node
init|=
name|nodeCache
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|node
operator|=
name|readNode
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|nodeCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|node
return|;
block|}
comment|/**      * Try to add a node.      *       * @param rev the revision      * @param n the node      * @throw IllegalStateException if the node already existed      */
specifier|public
name|void
name|addNode
parameter_list|(
name|String
name|rev
parameter_list|,
name|String
name|commitRoot
parameter_list|,
name|Node
name|n
parameter_list|)
block|{
name|UpdateOp
name|node
init|=
operator|new
name|UpdateOp
argument_list|(
name|n
operator|.
name|path
argument_list|)
decl_stmt|;
name|int
name|depth
init|=
name|Utils
operator|.
name|pathDepth
argument_list|(
name|n
operator|.
name|path
argument_list|)
decl_stmt|;
name|node
operator|.
name|set
argument_list|(
literal|"_path"
argument_list|,
name|n
operator|.
name|path
argument_list|)
expr_stmt|;
name|node
operator|.
name|set
argument_list|(
literal|"_pathDepth"
argument_list|,
name|depth
argument_list|)
expr_stmt|;
name|int
name|commitDepth
init|=
name|depth
operator|-
name|Utils
operator|.
name|pathDepth
argument_list|(
name|commitRoot
argument_list|)
decl_stmt|;
name|node
operator|.
name|addMapEntry
argument_list|(
literal|"_commitDepth"
argument_list|,
name|rev
argument_list|,
name|commitDepth
argument_list|)
expr_stmt|;
comment|// the affected (direct) children of this revision
name|node
operator|.
name|addMapEntry
argument_list|(
literal|"_affectedChildren"
argument_list|,
name|rev
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|node
operator|.
name|increment
argument_list|(
literal|"_changeCount"
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
comment|//        setCommitRoot(path);
for|for
control|(
name|String
name|p
range|:
name|n
operator|.
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|node
operator|.
name|addMapEntry
argument_list|(
name|p
argument_list|,
name|rev
argument_list|,
name|n
operator|.
name|properties
operator|.
name|get
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|store
operator|.
name|createOrUpdate
argument_list|(
name|DocumentStore
operator|.
name|Collection
operator|.
name|NODES
argument_list|,
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
comment|// TODO rollback changes
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Node already exists: "
operator|+
name|n
operator|.
name|path
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Node
name|readNode
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|rev
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|store
operator|.
name|find
argument_list|(
name|DocumentStore
operator|.
name|Collection
operator|.
name|NODES
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Node
name|n
init|=
operator|new
name|Node
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Object
name|v
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
block|}
return|return
name|n
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHeadRevision
parameter_list|()
throws|throws
name|MicroKernelException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRevisionHistory
parameter_list|(
name|long
name|since
parameter_list|,
name|int
name|maxEntries
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|waitForCommit
parameter_list|(
name|String
name|oldHeadRevisionId
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|MicroKernelException
throws|,
name|InterruptedException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getJournal
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|diff
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|nodeExists
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNodes
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|int
name|depth
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|maxChildNodes
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|commit
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|jsonDiff
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|branch
parameter_list|(
name|String
name|trunkRevisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|merge
parameter_list|(
name|String
name|branchRevisionId
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|String
name|rebase
parameter_list|(
annotation|@
name|Nonnull
name|String
name|branchRevisionId
parameter_list|,
name|String
name|newBaseRevisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|String
name|blobId
parameter_list|,
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|buff
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|write
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
specifier|static
class|class
name|Cache
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|LinkedHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|int
name|size
decl_stmt|;
name|Cache
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|size
argument_list|,
operator|(
name|float
operator|)
literal|0.75
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|eldest
parameter_list|)
block|{
return|return
name|size
argument_list|()
operator|>
name|size
return|;
block|}
block|}
block|}
end_class

end_unit

