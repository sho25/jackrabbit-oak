begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|getBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|AzureUtilities
operator|.
name|getSegmentFileName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|AzureUtilities
operator|.
name|readBufferFully
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlob
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobDirectory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlockBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|monitor
operator|.
name|IOMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentArchiveReader
import|;
end_import

begin_class
specifier|public
class|class
name|AzureSegmentArchiveReader
implements|implements
name|SegmentArchiveReader
block|{
specifier|static
specifier|final
name|boolean
name|OFF_HEAP
init|=
name|getBoolean
argument_list|(
literal|"access.off.heap"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CloudBlobDirectory
name|archiveDirectory
decl_stmt|;
specifier|private
specifier|final
name|IOMonitor
name|ioMonitor
decl_stmt|;
specifier|private
specifier|final
name|long
name|length
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|UUID
argument_list|,
name|AzureSegmentArchiveEntry
argument_list|>
name|index
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Boolean
name|hasGraph
decl_stmt|;
name|AzureSegmentArchiveReader
parameter_list|(
name|CloudBlobDirectory
name|archiveDirectory
parameter_list|,
name|IOMonitor
name|ioMonitor
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|archiveDirectory
operator|=
name|archiveDirectory
expr_stmt|;
name|this
operator|.
name|ioMonitor
operator|=
name|ioMonitor
expr_stmt|;
name|long
name|length
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CloudBlob
name|blob
range|:
name|AzureUtilities
operator|.
name|getBlobs
argument_list|(
name|archiveDirectory
argument_list|)
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
init|=
name|blob
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|AzureBlobMetadata
operator|.
name|isSegment
argument_list|(
name|metadata
argument_list|)
condition|)
block|{
name|AzureSegmentArchiveEntry
name|indexEntry
init|=
name|AzureBlobMetadata
operator|.
name|toIndexEntry
argument_list|(
name|metadata
argument_list|,
operator|(
name|int
operator|)
name|blob
operator|.
name|getProperties
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|index
operator|.
name|put
argument_list|(
operator|new
name|UUID
argument_list|(
name|indexEntry
operator|.
name|getMsb
argument_list|()
argument_list|,
name|indexEntry
operator|.
name|getLsb
argument_list|()
argument_list|)
argument_list|,
name|indexEntry
argument_list|)
expr_stmt|;
block|}
name|length
operator|+=
name|blob
operator|.
name|getProperties
argument_list|()
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Buffer
name|readSegment
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
throws|throws
name|IOException
block|{
name|AzureSegmentArchiveEntry
name|indexEntry
init|=
name|index
operator|.
name|get
argument_list|(
operator|new
name|UUID
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexEntry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Buffer
name|buffer
decl_stmt|;
if|if
condition|(
name|OFF_HEAP
condition|)
block|{
name|buffer
operator|=
name|Buffer
operator|.
name|allocateDirect
argument_list|(
name|indexEntry
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|=
name|Buffer
operator|.
name|allocate
argument_list|(
name|indexEntry
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ioMonitor
operator|.
name|beforeSegmentRead
argument_list|(
name|pathAsFile
argument_list|()
argument_list|,
name|msb
argument_list|,
name|lsb
argument_list|,
name|indexEntry
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Stopwatch
name|stopwatch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|readBufferFully
argument_list|(
name|getBlob
argument_list|(
name|getSegmentFileName
argument_list|(
name|indexEntry
argument_list|)
argument_list|)
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|long
name|elapsed
init|=
name|stopwatch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
decl_stmt|;
name|ioMonitor
operator|.
name|afterSegmentRead
argument_list|(
name|pathAsFile
argument_list|()
argument_list|,
name|msb
argument_list|,
name|lsb
argument_list|,
name|indexEntry
operator|.
name|getLength
argument_list|()
argument_list|,
name|elapsed
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsSegment
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
block|{
return|return
name|index
operator|.
name|containsKey
argument_list|(
operator|new
name|UUID
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SegmentArchiveEntry
argument_list|>
name|listSegments
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|index
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Buffer
name|getGraph
parameter_list|()
throws|throws
name|IOException
block|{
name|Buffer
name|graph
init|=
name|readBlob
argument_list|(
name|getName
argument_list|()
operator|+
literal|".gph"
argument_list|)
decl_stmt|;
name|hasGraph
operator|=
name|graph
operator|!=
literal|null
expr_stmt|;
return|return
name|graph
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasGraph
parameter_list|()
block|{
if|if
condition|(
name|hasGraph
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|getGraph
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{ }
block|}
return|return
name|hasGraph
return|;
block|}
annotation|@
name|Override
specifier|public
name|Buffer
name|getBinaryReferences
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|readBlob
argument_list|(
name|getName
argument_list|()
operator|+
literal|".brf"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|length
parameter_list|()
block|{
return|return
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|AzureUtilities
operator|.
name|getName
argument_list|(
name|archiveDirectory
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// do nothing
block|}
annotation|@
name|Override
specifier|public
name|int
name|getEntrySize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
name|size
return|;
block|}
specifier|private
name|File
name|pathAsFile
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|archiveDirectory
operator|.
name|getUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|CloudBlockBlob
name|getBlob
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|archiveDirectory
operator|.
name|getBlockBlobReference
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
decl||
name|StorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Buffer
name|readBlob
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|CloudBlockBlob
name|blob
init|=
name|getBlob
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|blob
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|long
name|length
init|=
name|blob
operator|.
name|getProperties
argument_list|()
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|Buffer
name|buffer
init|=
name|Buffer
operator|.
name|allocate
argument_list|(
operator|(
name|int
operator|)
name|length
argument_list|)
decl_stmt|;
name|AzureUtilities
operator|.
name|readBufferFully
argument_list|(
name|blob
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

