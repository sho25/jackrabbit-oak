begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newLinkedList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|NANOSECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobStoreBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|BinaryPropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MultiBinaryPropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|RecordId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ApplyDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|FileStore
implements|implements
name|SegmentStore
block|{
comment|/** Logger instance */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MB
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|FILE_NAME_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(data|bulk)((0|[1-9][0-9]*)[0-9]{4})([a-z])?.tar"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FILE_NAME_FORMAT
init|=
literal|"data%05d%s.tar"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JOURNAL_FILE_NAME
init|=
literal|"journal.log"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|MEMORY_MAPPING_DEFAULT
init|=
literal|"64"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"sun.arch.data.model"
argument_list|,
literal|"32"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SegmentTracker
name|tracker
decl_stmt|;
specifier|private
specifier|final
name|File
name|directory
decl_stmt|;
specifier|private
specifier|final
name|BlobStore
name|blobStore
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxFileSize
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|memoryMapping
decl_stmt|;
specifier|private
specifier|volatile
name|List
argument_list|<
name|TarReader
argument_list|>
name|readers
decl_stmt|;
specifier|private
name|int
name|writeNumber
decl_stmt|;
specifier|private
name|File
name|writeFile
decl_stmt|;
specifier|private
name|TarWriter
name|writer
decl_stmt|;
specifier|private
specifier|final
name|RandomAccessFile
name|journalFile
decl_stmt|;
specifier|private
specifier|final
name|FileLock
name|journalLock
decl_stmt|;
comment|/**      * The latest head state.      */
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|RecordId
argument_list|>
name|head
decl_stmt|;
comment|/**      * The persisted head of the root journal, used to determine whether the      * latest {@link #head} value should be written to the disk.      */
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|RecordId
argument_list|>
name|persistedHead
decl_stmt|;
comment|/**      * The background flush thread. Automatically flushes the TarMK state      * once every five seconds.      */
specifier|private
specifier|final
name|Thread
name|flushThread
decl_stmt|;
comment|/**      * Flag to request revision cleanup during the next flush.      */
specifier|private
specifier|final
name|AtomicBoolean
name|cleanupNeeded
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|/**      * List of old tar file generations that are waiting to be removed.      */
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|File
argument_list|>
name|toBeRemoved
init|=
name|newLinkedList
argument_list|()
decl_stmt|;
comment|/**      * Synchronization aid used by the background flush thread to stop itself      * as soon as the {@link #close()} method is called.      */
specifier|private
specifier|final
name|CountDownLatch
name|timeToClose
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|FileStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|,
name|File
name|directory
parameter_list|,
name|int
name|maxFileSizeMB
parameter_list|,
name|boolean
name|memoryMapping
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|blobStore
argument_list|,
name|directory
argument_list|,
name|EMPTY_NODE
argument_list|,
name|maxFileSizeMB
argument_list|,
literal|0
argument_list|,
name|memoryMapping
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FileStore
parameter_list|(
name|File
name|directory
parameter_list|,
name|int
name|maxFileSizeMB
parameter_list|,
name|boolean
name|memoryMapping
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|directory
argument_list|,
name|maxFileSizeMB
argument_list|,
name|memoryMapping
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FileStore
parameter_list|(
name|File
name|directory
parameter_list|,
name|int
name|maxFileSizeMB
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|directory
argument_list|,
name|maxFileSizeMB
argument_list|,
name|MEMORY_MAPPING_DEFAULT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FileStore
parameter_list|(
name|File
name|directory
parameter_list|,
name|int
name|maxFileSizeMB
parameter_list|,
name|int
name|cacheSizeMB
parameter_list|,
name|boolean
name|memoryMapping
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|directory
argument_list|,
name|EMPTY_NODE
argument_list|,
name|maxFileSizeMB
argument_list|,
name|cacheSizeMB
argument_list|,
name|memoryMapping
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FileStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|,
specifier|final
name|File
name|directory
parameter_list|,
name|NodeState
name|initial
parameter_list|,
name|int
name|maxFileSizeMB
parameter_list|,
name|int
name|cacheSizeMB
parameter_list|,
name|boolean
name|memoryMapping
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|directory
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
name|cacheSizeMB
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|tracker
operator|=
operator|new
name|SegmentTracker
argument_list|(
name|this
argument_list|,
name|cacheSizeMB
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|tracker
operator|=
operator|new
name|SegmentTracker
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
name|this
operator|.
name|maxFileSize
operator|=
name|maxFileSizeMB
operator|*
name|MB
expr_stmt|;
name|this
operator|.
name|memoryMapping
operator|=
name|memoryMapping
expr_stmt|;
name|journalFile
operator|=
operator|new
name|RandomAccessFile
argument_list|(
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|JOURNAL_FILE_NAME
argument_list|)
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
name|journalLock
operator|=
name|journalFile
operator|.
name|getChannel
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
argument_list|>
name|map
init|=
name|collectFiles
argument_list|(
name|directory
argument_list|)
decl_stmt|;
name|this
operator|.
name|readers
operator|=
name|newArrayListWithCapacity
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
index|[]
name|indices
init|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|map
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|indices
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|indices
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|readers
operator|.
name|add
argument_list|(
name|TarReader
operator|.
name|open
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|indices
index|[
name|i
index|]
argument_list|)
argument_list|,
name|memoryMapping
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indices
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|writeNumber
operator|=
name|indices
index|[
name|indices
operator|.
name|length
operator|-
literal|1
index|]
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|writeNumber
operator|=
literal|0
expr_stmt|;
block|}
name|this
operator|.
name|writeFile
operator|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|FILE_NAME_FORMAT
argument_list|,
name|writeNumber
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|writer
operator|=
operator|new
name|TarWriter
argument_list|(
name|writeFile
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|RecordId
argument_list|>
name|heads
init|=
name|newLinkedList
argument_list|()
decl_stmt|;
name|String
name|line
init|=
name|journalFile
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|int
name|space
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
name|space
operator|!=
operator|-
literal|1
condition|)
block|{
name|heads
operator|.
name|add
argument_list|(
name|RecordId
operator|.
name|fromString
argument_list|(
name|tracker
argument_list|,
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|space
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|journalFile
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|RecordId
name|id
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|id
operator|==
literal|null
operator|&&
operator|!
name|heads
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RecordId
name|last
init|=
name|heads
operator|.
name|removeLast
argument_list|()
decl_stmt|;
name|SegmentId
name|segmentId
init|=
name|last
operator|.
name|getSegmentId
argument_list|()
decl_stmt|;
if|if
condition|(
name|containsSegment
argument_list|(
name|segmentId
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|segmentId
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
condition|)
block|{
name|id
operator|=
name|last
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to access revision {}, rewinding..."
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|head
operator|=
operator|new
name|AtomicReference
argument_list|<
name|RecordId
argument_list|>
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|persistedHead
operator|=
operator|new
name|AtomicReference
argument_list|<
name|RecordId
argument_list|>
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"root"
argument_list|,
name|initial
argument_list|)
expr_stmt|;
name|head
operator|=
operator|new
name|AtomicReference
argument_list|<
name|RecordId
argument_list|>
argument_list|(
name|tracker
operator|.
name|getWriter
argument_list|()
operator|.
name|writeNode
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
name|persistedHead
operator|=
operator|new
name|AtomicReference
argument_list|<
name|RecordId
argument_list|>
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|flushThread
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|timeToClose
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
while|while
condition|(
name|timeToClose
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
try|try
block|{
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to flush the TarMK at"
operator|+
name|directory
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|long
name|time
init|=
name|SECONDS
operator|.
name|convert
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
argument_list|,
name|NANOSECONDS
argument_list|)
decl_stmt|;
name|timeToClose
operator|.
name|await
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|5
argument_list|,
literal|2
operator|*
name|time
argument_list|)
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"TarMK flush thread interrupted"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|flushThread
operator|.
name|setName
argument_list|(
literal|"TarMK flush thread: "
operator|+
name|directory
argument_list|)
expr_stmt|;
name|flushThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|flushThread
operator|.
name|setPriority
argument_list|(
name|Thread
operator|.
name|MIN_PRIORITY
argument_list|)
expr_stmt|;
name|flushThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"TarMK opened: {} (mmap={})"
argument_list|,
name|directory
argument_list|,
name|memoryMapping
argument_list|)
expr_stmt|;
block|}
specifier|static
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
argument_list|>
name|collectFiles
parameter_list|(
name|File
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
argument_list|>
name|dataFiles
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|File
argument_list|>
name|bulkFiles
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|directory
operator|.
name|listFiles
argument_list|()
control|)
block|{
name|Matcher
name|matcher
init|=
name|FILE_NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|Integer
name|index
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"data"
operator|.
name|equals
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
name|files
init|=
name|dataFiles
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
name|files
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
name|dataFiles
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
name|Character
name|generation
init|=
literal|'a'
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|generation
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|checkState
argument_list|(
name|files
operator|.
name|put
argument_list|(
name|generation
argument_list|,
name|file
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkState
argument_list|(
name|bulkFiles
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|file
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|bulkFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Upgrading TarMK file names in {}"
argument_list|,
name|directory
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dataFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// first put all the data segments at the end of the list
name|Integer
index|[]
name|indices
init|=
name|dataFiles
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|dataFiles
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|indices
argument_list|)
expr_stmt|;
name|int
name|position
init|=
name|Math
operator|.
name|max
argument_list|(
name|indices
index|[
name|indices
operator|.
name|length
operator|-
literal|1
index|]
operator|+
literal|1
argument_list|,
name|bulkFiles
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|index
range|:
name|indices
control|)
block|{
name|Map
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
name|files
init|=
name|dataFiles
operator|.
name|remove
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|Integer
name|newIndex
init|=
name|position
operator|++
decl_stmt|;
for|for
control|(
name|Character
name|generation
range|:
name|newHashSet
argument_list|(
name|files
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|File
name|file
init|=
name|files
operator|.
name|get
argument_list|(
name|generation
argument_list|)
decl_stmt|;
name|File
name|newFile
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|format
argument_list|(
name|FILE_NAME_FORMAT
argument_list|,
name|newIndex
argument_list|,
name|generation
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Renaming {} to {}"
argument_list|,
name|file
argument_list|,
name|newFile
argument_list|)
expr_stmt|;
name|file
operator|.
name|renameTo
argument_list|(
name|newFile
argument_list|)
expr_stmt|;
name|files
operator|.
name|put
argument_list|(
name|generation
argument_list|,
name|newFile
argument_list|)
expr_stmt|;
block|}
name|dataFiles
operator|.
name|put
argument_list|(
name|newIndex
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
block|}
comment|// then add all the bulk segments at the beginning of the list
name|Integer
index|[]
name|indices
init|=
name|bulkFiles
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|bulkFiles
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|indices
argument_list|)
expr_stmt|;
name|int
name|position
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|index
range|:
name|indices
control|)
block|{
name|File
name|file
init|=
name|bulkFiles
operator|.
name|remove
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|Integer
name|newIndex
init|=
name|position
operator|++
decl_stmt|;
name|File
name|newFile
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|format
argument_list|(
name|FILE_NAME_FORMAT
argument_list|,
name|newIndex
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Renaming {} to {}"
argument_list|,
name|file
argument_list|,
name|newFile
argument_list|)
expr_stmt|;
name|file
operator|.
name|renameTo
argument_list|(
name|newFile
argument_list|)
expr_stmt|;
name|dataFiles
operator|.
name|put
argument_list|(
name|newIndex
argument_list|,
name|singletonMap
argument_list|(
literal|'a'
argument_list|,
name|newFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dataFiles
return|;
block|}
specifier|public
name|void
name|compact
parameter_list|(
name|int
name|levels
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"TarMK compaction"
argument_list|)
expr_stmt|;
name|SegmentWriter
name|segmentWriter
init|=
name|tracker
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|segmentWriter
operator|.
name|dropCache
argument_list|()
expr_stmt|;
name|SegmentNodeBuilder
name|builder
init|=
name|segmentWriter
operator|.
name|writeNode
argument_list|(
name|EMPTY_NODE
argument_list|)
operator|.
name|builder
argument_list|()
decl_stmt|;
name|SegmentNodeState
name|before
init|=
name|getHead
argument_list|()
decl_stmt|;
name|compact
argument_list|(
name|before
argument_list|,
literal|"/"
argument_list|,
name|levels
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|setHead
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
condition|)
block|{
comment|// Some other concurrent changes have been made.
comment|// Rebase those changes on top of the compacted
comment|// state before retrying setting the head state.
name|SegmentNodeState
name|head
init|=
name|getHead
argument_list|()
decl_stmt|;
name|head
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
operator|new
name|ApplyDiff
argument_list|(
name|builder
argument_list|)
argument_list|)
expr_stmt|;
name|before
operator|=
name|head
expr_stmt|;
name|after
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|compact
parameter_list|(
name|SegmentNodeState
name|state
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|levels
parameter_list|,
name|NodeBuilder
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|PropertyState
name|ps
range|:
name|state
operator|.
name|getProperties
argument_list|()
control|)
block|{
if|if
condition|(
name|Type
operator|.
name|BINARY
operator|.
name|tag
argument_list|()
operator|!=
name|ps
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
condition|)
block|{
name|ps
operator|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|ps
operator|.
name|getName
argument_list|()
argument_list|,
name|ps
operator|.
name|getValue
argument_list|(
name|ps
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|ps
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|Blob
argument_list|>
name|newBlobList
init|=
operator|new
name|ArrayList
argument_list|<
name|Blob
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Blob
name|b
range|:
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARIES
argument_list|)
control|)
block|{
if|if
condition|(
name|b
operator|instanceof
name|SegmentBlob
condition|)
block|{
name|SegmentBlob
name|sb
init|=
operator|(
name|SegmentBlob
operator|)
name|b
decl_stmt|;
name|b
operator|=
name|sb
operator|.
name|clone
argument_list|(
name|tracker
operator|.
name|getWriter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|newBlobList
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ps
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|ps
operator|=
name|MultiBinaryPropertyState
operator|.
name|binaryPropertyFromBlob
argument_list|(
name|ps
operator|.
name|getName
argument_list|()
argument_list|,
name|newBlobList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ps
operator|=
name|BinaryPropertyState
operator|.
name|binaryProperty
argument_list|(
name|ps
operator|.
name|getName
argument_list|()
argument_list|,
name|newBlobList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|dest
operator|.
name|setProperty
argument_list|(
name|ps
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|state
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|SegmentNodeState
name|child
init|=
operator|(
name|SegmentNodeState
operator|)
name|entry
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|String
name|n
init|=
name|entry
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|levels
operator|>
literal|0
condition|)
block|{
name|compact
argument_list|(
name|child
argument_list|,
name|name
operator|+
name|entry
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
argument_list|,
name|levels
operator|-
literal|1
argument_list|,
name|dest
operator|.
name|child
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dest
operator|.
name|setChildNode
argument_list|(
name|n
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|persistedHead
init|)
block|{
name|RecordId
name|before
init|=
name|persistedHead
operator|.
name|get
argument_list|()
decl_stmt|;
name|RecordId
name|after
init|=
name|head
operator|.
name|get
argument_list|()
decl_stmt|;
name|boolean
name|cleanup
init|=
name|cleanupNeeded
operator|.
name|getAndSet
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|cleanup
operator|||
operator|!
name|after
operator|.
name|equals
argument_list|(
name|before
argument_list|)
condition|)
block|{
comment|// needs to happen outside the synchronization block below to
comment|// avoid a deadlock with another thread flushing the writer
name|tracker
operator|.
name|getWriter
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// needs to happen outside the synchronization block below to
comment|// prevent the flush from stopping concurrent reads and writes
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"TarMK journal update {} -> {}"
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|journalFile
operator|.
name|writeBytes
argument_list|(
name|after
operator|+
literal|" root\n"
argument_list|)
expr_stmt|;
name|journalFile
operator|.
name|getChannel
argument_list|()
operator|.
name|force
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|persistedHead
operator|.
name|set
argument_list|(
name|after
argument_list|)
expr_stmt|;
if|if
condition|(
name|cleanup
condition|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|UUID
argument_list|>
name|ids
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|SegmentId
name|id
range|:
name|tracker
operator|.
name|getReferencedSegmentIds
argument_list|()
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
operator|new
name|UUID
argument_list|(
name|id
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|cleanup
argument_list|(
name|ids
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TarReader
argument_list|>
name|list
init|=
name|newArrayListWithCapacity
argument_list|(
name|readers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
name|TarReader
name|cleaned
init|=
name|reader
operator|.
name|cleanup
argument_list|(
name|ids
argument_list|)
decl_stmt|;
if|if
condition|(
name|cleaned
operator|==
name|reader
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|cleaned
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|cleaned
argument_list|)
expr_stmt|;
block|}
name|File
name|file
init|=
name|reader
operator|.
name|close
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"TarMK GC: Cleaned up file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|toBeRemoved
operator|.
name|addLast
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
name|readers
operator|=
name|list
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"TarMK GC: Completed in {}ms"
argument_list|,
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
argument_list|,
name|NANOSECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// remove all obsolete tar generations
name|Iterator
argument_list|<
name|File
argument_list|>
name|iterator
init|=
name|toBeRemoved
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|File
name|file
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
operator|||
name|file
operator|.
name|delete
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"TarMK GC: Removed old file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|Iterable
argument_list|<
name|SegmentId
argument_list|>
name|getSegmentIds
parameter_list|()
block|{
name|List
argument_list|<
name|SegmentId
argument_list|>
name|ids
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|UUID
name|uuid
range|:
name|writer
operator|.
name|getUUIDs
argument_list|()
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|tracker
operator|.
name|getSegmentId
argument_list|(
name|uuid
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|uuid
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
for|for
control|(
name|UUID
name|uuid
range|:
name|reader
operator|.
name|getUUIDs
argument_list|()
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|tracker
operator|.
name|getSegmentId
argument_list|(
name|uuid
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|uuid
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ids
return|;
block|}
annotation|@
name|Override
specifier|public
name|SegmentTracker
name|getTracker
parameter_list|()
block|{
return|return
name|tracker
return|;
block|}
annotation|@
name|Override
specifier|public
name|SegmentNodeState
name|getHead
parameter_list|()
block|{
return|return
operator|new
name|SegmentNodeState
argument_list|(
name|head
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|setHead
parameter_list|(
name|SegmentNodeState
name|base
parameter_list|,
name|SegmentNodeState
name|head
parameter_list|)
block|{
name|RecordId
name|id
init|=
name|this
operator|.
name|head
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|id
operator|.
name|equals
argument_list|(
name|base
operator|.
name|getRecordId
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|head
operator|.
name|compareAndSet
argument_list|(
name|id
argument_list|,
name|head
operator|.
name|getRecordId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
comment|// avoid deadlocks while joining the flush thread
name|timeToClose
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|flushThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Interrupted while joining the TarMK flush thread"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|TarReader
argument_list|>
name|list
init|=
name|readers
decl_stmt|;
name|readers
operator|=
name|newArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|list
control|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|journalLock
operator|.
name|release
argument_list|()
expr_stmt|;
name|journalFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
comment|// for any memory-mappings that are no longer used
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to close the TarMK at "
operator|+
name|directory
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"TarMK closed: {}"
argument_list|,
name|directory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsSegment
parameter_list|(
name|SegmentId
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|.
name|getTracker
argument_list|()
operator|==
name|tracker
condition|)
block|{
return|return
literal|true
return|;
block|}
name|long
name|msb
init|=
name|id
operator|.
name|getMostSignificantBits
argument_list|()
decl_stmt|;
name|long
name|lsb
init|=
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
decl_stmt|;
return|return
name|containsSegment
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|containsSegment
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
block|{
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
if|if
condition|(
name|reader
operator|.
name|containsEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|writer
operator|.
name|containsEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|// the writer might have switched to a new file,
comment|// so we need to re-check the readers
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
if|if
condition|(
name|reader
operator|.
name|containsEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Segment
name|readSegment
parameter_list|(
name|SegmentId
name|id
parameter_list|)
block|{
name|long
name|msb
init|=
name|id
operator|.
name|getMostSignificantBits
argument_list|()
decl_stmt|;
name|long
name|lsb
init|=
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
decl_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
try|try
block|{
name|ByteBuffer
name|buffer
init|=
name|reader
operator|.
name|readEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Segment
argument_list|(
name|tracker
argument_list|,
name|id
argument_list|,
name|buffer
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to read from tar file "
operator|+
name|reader
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
name|ByteBuffer
name|buffer
init|=
name|writer
operator|.
name|readEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Segment
argument_list|(
name|tracker
argument_list|,
name|id
argument_list|,
name|buffer
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to read from tar file "
operator|+
name|writer
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// the writer might have switched to a new file,
comment|// so we need to re-check the readers
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
try|try
block|{
name|ByteBuffer
name|buffer
init|=
name|reader
operator|.
name|readEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Segment
argument_list|(
name|tracker
argument_list|,
name|id
argument_list|,
name|buffer
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to read from tar file "
operator|+
name|reader
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Segment "
operator|+
name|id
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|writeSegment
parameter_list|(
name|SegmentId
name|id
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
try|try
block|{
name|long
name|size
init|=
name|writer
operator|.
name|writeEntry
argument_list|(
name|id
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|,
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|>=
name|maxFileSize
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|TarReader
argument_list|>
name|list
init|=
name|newArrayListWithCapacity
argument_list|(
literal|1
operator|+
name|readers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|TarReader
operator|.
name|open
argument_list|(
name|writeFile
argument_list|,
name|memoryMapping
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|readers
argument_list|)
expr_stmt|;
name|readers
operator|=
name|list
expr_stmt|;
comment|// trigger revision cleanup after next flush
name|cleanupNeeded
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writeNumber
operator|++
expr_stmt|;
name|writeFile
operator|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|FILE_NAME_FORMAT
argument_list|,
name|writeNumber
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|TarWriter
argument_list|(
name|writeFile
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Blob
name|readBlob
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{
if|if
condition|(
name|blobStore
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|BlobStoreBlob
argument_list|(
name|blobStore
argument_list|,
name|blobId
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Attempt to read external blob with blobId ["
operator|+
name|blobId
operator|+
literal|"] "
operator|+
literal|"without specifying BlobStore"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|BlobStore
name|getBlobStore
parameter_list|()
block|{
return|return
name|blobStore
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|gc
parameter_list|()
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|cleanupNeeded
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|getTarReaderIndex
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|index
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
name|index
operator|.
name|put
argument_list|(
name|reader
operator|.
name|getFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|reader
operator|.
name|getUUIDs
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
block|}
end_class

end_unit

