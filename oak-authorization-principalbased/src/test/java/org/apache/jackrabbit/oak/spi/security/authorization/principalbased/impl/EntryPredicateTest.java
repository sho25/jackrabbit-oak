begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|MockUtility
operator|.
name|mockTree
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|EntryPredicateTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TREE_PATH
init|=
literal|"/parent/path"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_PATH
init|=
literal|"/parent/path/prop"
decl_stmt|;
specifier|private
specifier|final
name|String
name|PARENT_PATH
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|TREE_PATH
argument_list|)
decl_stmt|;
specifier|private
name|PermissionEntry
name|pe
init|=
name|mock
argument_list|(
name|PermissionEntry
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Tree
name|tree
decl_stmt|;
specifier|private
name|PropertyState
name|propertyState
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
block|{
name|tree
operator|=
name|mockTree
argument_list|(
name|TREE_PATH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateNullPath
parameter_list|()
block|{
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|predicate
init|=
name|EntryPredicate
operator|.
name|create
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|predicate
operator|.
name|apply
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getPrivilegeBits
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreatePath
parameter_list|()
block|{
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|predicate
init|=
name|EntryPredicate
operator|.
name|create
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|)
decl_stmt|;
name|predicate
operator|.
name|apply
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getPrivilegeBits
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateNonExistingTree
parameter_list|()
block|{
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|predicate
init|=
name|EntryPredicate
operator|.
name|create
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|predicate
operator|.
name|apply
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|(
name|tree
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getPrivilegeBits
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateNonExistingTreeProperty
parameter_list|()
block|{
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|predicate
init|=
name|EntryPredicate
operator|.
name|create
argument_list|(
name|tree
argument_list|,
name|propertyState
argument_list|)
decl_stmt|;
name|predicate
operator|.
name|apply
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|(
name|PROP_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|tree
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getPrivilegeBits
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateExistingTree
parameter_list|()
block|{
name|when
argument_list|(
name|tree
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|predicate
init|=
name|EntryPredicate
operator|.
name|create
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|predicate
operator|.
name|apply
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|TREE_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getPrivilegeBits
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateExistingTreeProperty
parameter_list|()
block|{
name|when
argument_list|(
name|tree
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|predicate
init|=
name|EntryPredicate
operator|.
name|create
argument_list|(
name|tree
argument_list|,
name|propertyState
argument_list|)
decl_stmt|;
name|predicate
operator|.
name|apply
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|PROP_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
name|propertyState
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"another"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getPrivilegeBits
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateParentPathReadPermission
parameter_list|()
block|{
name|assertSame
argument_list|(
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|,
name|EntryPredicate
operator|.
name|createParent
argument_list|(
name|tree
operator|.
name|getPath
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|,
name|EntryPredicate
operator|.
name|createParent
argument_list|(
name|tree
operator|.
name|getPath
argument_list|()
argument_list|,
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateParentPathEmpty
parameter_list|()
block|{
name|assertSame
argument_list|(
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|,
name|EntryPredicate
operator|.
name|createParent
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|,
name|EntryPredicate
operator|.
name|createParent
argument_list|(
literal|""
argument_list|,
name|tree
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateParentPathRoot
parameter_list|()
block|{
name|assertSame
argument_list|(
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|,
name|EntryPredicate
operator|.
name|createParent
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|tree
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateParentPath
parameter_list|()
block|{
name|when
argument_list|(
name|pe
operator|.
name|appliesTo
argument_list|(
name|PARENT_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|predicate
init|=
name|EntryPredicate
operator|.
name|createParent
argument_list|(
name|TREE_PATH
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|predicate
operator|.
name|apply
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|TREE_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|appliesTo
argument_list|(
name|PARENT_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|(
name|PARENT_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|any
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getPrivilegeBits
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateParentPathTree
parameter_list|()
block|{
name|when
argument_list|(
name|pe
operator|.
name|appliesTo
argument_list|(
name|PARENT_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|parentTree
init|=
name|mockTree
argument_list|(
name|PARENT_PATH
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|predicate
init|=
name|EntryPredicate
operator|.
name|createParent
argument_list|(
name|TREE_PATH
argument_list|,
name|parentTree
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|predicate
operator|.
name|apply
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|TREE_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|appliesTo
argument_list|(
name|PARENT_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|(
name|parentTree
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|PARENT_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getPrivilegeBits
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateParentPathTreeNotExisting
parameter_list|()
block|{
name|when
argument_list|(
name|pe
operator|.
name|appliesTo
argument_list|(
name|PARENT_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|predicate
init|=
name|EntryPredicate
operator|.
name|createParent
argument_list|(
name|TREE_PATH
argument_list|,
name|mockTree
argument_list|(
name|PARENT_PATH
argument_list|,
literal|false
argument_list|)
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|predicate
operator|.
name|apply
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|TREE_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|appliesTo
argument_list|(
name|PARENT_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|(
name|PARENT_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|any
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getPrivilegeBits
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateParentPathMismatch
parameter_list|()
block|{
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|predicate
init|=
name|EntryPredicate
operator|.
name|createParent
argument_list|(
name|TREE_PATH
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|predicate
operator|.
name|apply
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|String
name|parentPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|TREE_PATH
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|TREE_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|appliesTo
argument_list|(
name|parentPath
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|parentPath
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|any
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getPrivilegeBits
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateParentPathTreeMismatch
parameter_list|()
block|{
name|Tree
name|parentTree
init|=
name|mockTree
argument_list|(
name|PARENT_PATH
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|predicate
init|=
name|EntryPredicate
operator|.
name|createParent
argument_list|(
name|TREE_PATH
argument_list|,
name|parentTree
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|predicate
operator|.
name|apply
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|String
name|parentPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|TREE_PATH
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|TREE_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|appliesTo
argument_list|(
name|parentPath
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|parentPath
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|any
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getPrivilegeBits
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateParentTreeReadPermission
parameter_list|()
block|{
name|when
argument_list|(
name|tree
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|,
name|EntryPredicate
operator|.
name|createParent
argument_list|(
name|tree
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateParentTreeNotExisting
parameter_list|()
block|{
name|when
argument_list|(
name|pe
operator|.
name|appliesTo
argument_list|(
name|PARENT_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|predicate
init|=
name|EntryPredicate
operator|.
name|createParent
argument_list|(
name|tree
argument_list|,
name|Permissions
operator|.
name|ADD_NODE
operator||
name|Permissions
operator|.
name|READ_NODE
argument_list|)
decl_stmt|;
name|predicate
operator|.
name|apply
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|TREE_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|appliesTo
argument_list|(
name|PARENT_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|(
name|PARENT_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|any
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getPrivilegeBits
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateParentTreeNotExistingMismatch
parameter_list|()
block|{
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|predicate
init|=
name|EntryPredicate
operator|.
name|createParent
argument_list|(
name|tree
argument_list|,
name|Permissions
operator|.
name|ADD_NODE
operator||
name|Permissions
operator|.
name|READ_NODE
argument_list|)
decl_stmt|;
name|predicate
operator|.
name|apply
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|TREE_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|appliesTo
argument_list|(
name|PARENT_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|PARENT_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|any
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getPrivilegeBits
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateParentTreeRoot
parameter_list|()
block|{
name|Tree
name|rootTree
init|=
name|mockTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|,
name|EntryPredicate
operator|.
name|createParent
argument_list|(
name|rootTree
argument_list|,
name|Permissions
operator|.
name|REMOVE
operator||
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateParentTree
parameter_list|()
block|{
name|when
argument_list|(
name|pe
operator|.
name|appliesTo
argument_list|(
name|PARENT_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|parentTree
init|=
name|mockTree
argument_list|(
name|PARENT_PATH
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|tree
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|tree
operator|.
name|getParent
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|parentTree
argument_list|)
expr_stmt|;
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|predicate
init|=
name|EntryPredicate
operator|.
name|createParent
argument_list|(
name|tree
argument_list|,
name|Permissions
operator|.
name|REMOVE_NODE
operator||
name|Permissions
operator|.
name|READ_PROPERTY
operator||
name|Permissions
operator|.
name|LOCK_MANAGEMENT
argument_list|)
decl_stmt|;
name|predicate
operator|.
name|apply
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|TREE_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|PARENT_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|appliesTo
argument_list|(
name|PARENT_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|(
name|parentTree
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getPrivilegeBits
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateParentTreeMismatch
parameter_list|()
block|{
name|Tree
name|parentTree
init|=
name|mockTree
argument_list|(
name|PARENT_PATH
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|tree
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|tree
operator|.
name|getParent
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|parentTree
argument_list|)
expr_stmt|;
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|predicate
init|=
name|EntryPredicate
operator|.
name|createParent
argument_list|(
name|tree
argument_list|,
name|Permissions
operator|.
name|REMOVE_NODE
operator||
name|Permissions
operator|.
name|READ_PROPERTY
operator||
name|Permissions
operator|.
name|LOCK_MANAGEMENT
argument_list|)
decl_stmt|;
name|predicate
operator|.
name|apply
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|TREE_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|PARENT_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|appliesTo
argument_list|(
name|PARENT_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|parentTree
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pe
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getPrivilegeBits
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

