begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|ACE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBitsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|UtilTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DENY
init|=
literal|"deny"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ALLOW
init|=
literal|"allow"
decl_stmt|;
specifier|private
name|PrivilegeBitsProvider
name|bitsProvider
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|bitsProvider
operator|=
operator|new
name|PrivilegeBitsProvider
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGenerateName
parameter_list|()
throws|throws
name|AccessControlException
block|{
name|ACE
name|ace
init|=
operator|new
name|TestAce
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|Util
operator|.
name|generateAceName
argument_list|(
name|ace
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|name
operator|.
name|startsWith
argument_list|(
name|ALLOW
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ALLOW
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|Util
operator|.
name|generateAceName
argument_list|(
name|ace
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|name
operator|=
name|Util
operator|.
name|generateAceName
argument_list|(
name|ace
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|name
operator|.
name|startsWith
argument_list|(
name|ALLOW
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ALLOW
operator|+
literal|1
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|Util
operator|.
name|generateAceName
argument_list|(
name|ace
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGenerateName2
parameter_list|()
throws|throws
name|AccessControlException
block|{
name|ACE
name|ace
init|=
operator|new
name|TestAce
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|Util
operator|.
name|generateAceName
argument_list|(
name|ace
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|name
operator|.
name|startsWith
argument_list|(
name|DENY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DENY
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|Util
operator|.
name|generateAceName
argument_list|(
name|ace
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|name
operator|=
name|Util
operator|.
name|generateAceName
argument_list|(
name|ace
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|name
operator|.
name|startsWith
argument_list|(
name|DENY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DENY
operator|+
literal|2
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|Util
operator|.
name|generateAceName
argument_list|(
name|ace
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGenerateNameDifferentAllow
parameter_list|()
throws|throws
name|Exception
block|{
name|ACE
name|allow
init|=
operator|new
name|TestAce
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ACE
name|deny
init|=
operator|new
name|TestAce
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|Util
operator|.
name|generateAceName
argument_list|(
name|allow
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Util
operator|.
name|generateAceName
argument_list|(
name|deny
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|Util
operator|.
name|generateAceName
argument_list|(
name|allow
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Util
operator|.
name|generateAceName
argument_list|(
name|deny
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|Util
operator|.
name|generateAceName
argument_list|(
name|allow
argument_list|,
literal|20
argument_list|)
argument_list|,
name|Util
operator|.
name|generateAceName
argument_list|(
name|deny
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|Util
operator|.
name|generateAceName
argument_list|(
name|allow
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Util
operator|.
name|generateAceName
argument_list|(
name|deny
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|Util
operator|.
name|generateAceName
argument_list|(
name|allow
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Util
operator|.
name|generateAceName
argument_list|(
name|deny
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
class|class
name|TestAce
extends|extends
name|ACE
block|{
specifier|public
name|TestAce
parameter_list|(
name|boolean
name|isAllow
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|super
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|,
name|isAllow
argument_list|,
literal|null
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getPrivileges
parameter_list|()
block|{
try|try
block|{
return|return
name|privilegesFromNames
argument_list|(
name|bitsProvider
operator|.
name|getPrivilegeNames
argument_list|(
name|getPrivilegeBits
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

