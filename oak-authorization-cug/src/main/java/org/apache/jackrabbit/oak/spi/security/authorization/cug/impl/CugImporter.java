begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|cug
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ImportBehavior
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|PropInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedPropertyImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ReferenceChangeTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|TextValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * CugImporter... TODO  */
end_comment

begin_class
class|class
name|CugImporter
implements|implements
name|ProtectedPropertyImporter
implements|,
name|CugConstants
block|{
comment|/**      * logger instance      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CugImporter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|initialized
decl_stmt|;
specifier|private
name|ConfigurationParameters
name|config
decl_stmt|;
specifier|private
name|int
name|importBehavior
decl_stmt|;
specifier|private
name|PrincipalManager
name|principalManager
decl_stmt|;
comment|//----------------------------------------------< ProtectedItemImporter>---
annotation|@
name|Override
specifier|public
name|boolean
name|init
parameter_list|(
annotation|@
name|Nonnull
name|Session
name|session
parameter_list|,
annotation|@
name|Nonnull
name|Root
name|root
parameter_list|,
annotation|@
name|Nonnull
name|NamePathMapper
name|namePathMapper
parameter_list|,
name|boolean
name|isWorkspaceImport
parameter_list|,
name|int
name|uuidBehavior
parameter_list|,
annotation|@
name|Nonnull
name|ReferenceChangeTracker
name|referenceTracker
parameter_list|,
name|SecurityProvider
name|securityProvider
parameter_list|)
block|{
if|if
condition|(
name|initialized
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Already initialized"
argument_list|)
throw|;
block|}
try|try
block|{
name|config
operator|=
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getParameters
argument_list|()
expr_stmt|;
name|importBehavior
operator|=
name|CugUtil
operator|.
name|getImportBehavior
argument_list|(
name|config
argument_list|)
expr_stmt|;
if|if
condition|(
name|isWorkspaceImport
condition|)
block|{
name|PrincipalConfiguration
name|pConfig
init|=
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|principalManager
operator|=
name|pConfig
operator|.
name|getPrincipalManager
argument_list|(
name|root
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|principalManager
operator|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|session
operator|)
operator|.
name|getPrincipalManager
argument_list|()
expr_stmt|;
block|}
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error while initializing cug importer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|initialized
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|processReferences
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// nothing to do
block|}
comment|//------------------------------------------< ProtectedPropertyImporter>---
annotation|@
name|Override
specifier|public
name|boolean
name|handlePropInfo
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|parent
parameter_list|,
annotation|@
name|Nonnull
name|PropInfo
name|protectedPropInfo
parameter_list|,
annotation|@
name|Nonnull
name|PropertyDefinition
name|def
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|CugUtil
operator|.
name|definesCug
argument_list|(
name|parent
argument_list|)
operator|&&
name|isValid
argument_list|(
name|protectedPropInfo
argument_list|,
name|def
argument_list|)
operator|&&
name|CugUtil
operator|.
name|isSupportedPath
argument_list|(
name|parent
operator|.
name|getPath
argument_list|()
argument_list|,
name|config
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|principalNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TextValue
name|txtValue
range|:
name|protectedPropInfo
operator|.
name|getTextValues
argument_list|()
control|)
block|{
name|String
name|principalName
init|=
name|txtValue
operator|.
name|getString
argument_list|()
decl_stmt|;
name|Principal
name|principal
init|=
name|principalManager
operator|.
name|getPrincipal
argument_list|(
name|principalName
argument_list|)
decl_stmt|;
if|if
condition|(
name|principal
operator|==
literal|null
condition|)
block|{
switch|switch
condition|(
name|importBehavior
condition|)
block|{
case|case
name|ImportBehavior
operator|.
name|IGNORE
case|:
name|log
operator|.
name|debug
argument_list|(
literal|"Unknown principal "
operator|+
name|principalName
operator|+
literal|" -> Ignoring this ACE."
argument_list|)
expr_stmt|;
break|break;
case|case
name|ImportBehavior
operator|.
name|ABORT
case|:
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Unknown principal "
operator|+
name|principalName
argument_list|)
throw|;
case|case
name|ImportBehavior
operator|.
name|BESTEFFORT
case|:
name|principalNames
operator|.
name|add
argument_list|(
name|principalName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|principalNames
operator|.
name|add
argument_list|(
name|principalName
argument_list|)
expr_stmt|;
block|}
block|}
name|parent
operator|.
name|setProperty
argument_list|(
name|REP_PRINCIPAL_NAMES
argument_list|,
name|principalNames
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|//--------------------------------------------------------------------------
specifier|private
name|boolean
name|isValid
parameter_list|(
annotation|@
name|Nonnull
name|PropInfo
name|propInfo
parameter_list|,
annotation|@
name|Nonnull
name|PropertyDefinition
name|def
parameter_list|)
block|{
if|if
condition|(
name|REP_PRINCIPAL_NAMES
operator|.
name|equals
argument_list|(
name|propInfo
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|def
operator|.
name|isMultiple
argument_list|()
operator|&&
name|NT_REP_CUG_POLICY
operator|.
name|equals
argument_list|(
name|def
operator|.
name|getDeclaringNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

