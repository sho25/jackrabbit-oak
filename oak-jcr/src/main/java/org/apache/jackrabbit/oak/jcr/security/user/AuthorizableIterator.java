begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RangeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * AuthorizableIterator...  */
end_comment

begin_class
class|class
name|AuthorizableIterator
implements|implements
name|Iterator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AuthorizableIterator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|authorizables
decl_stmt|;
specifier|private
specifier|final
name|long
name|size
decl_stmt|;
specifier|private
name|Authorizable
name|next
decl_stmt|;
name|AuthorizableIterator
parameter_list|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|authorizableOakPath
parameter_list|,
name|UserManagerImpl
name|userManager
parameter_list|)
block|{
name|this
argument_list|(
name|authorizableOakPath
argument_list|,
name|userManager
argument_list|,
name|UserManager
operator|.
name|SEARCH_TYPE_AUTHORIZABLE
argument_list|)
expr_stmt|;
block|}
name|AuthorizableIterator
parameter_list|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|authorizableOakPaths
parameter_list|,
name|UserManagerImpl
name|userManager
parameter_list|,
name|int
name|authorizableType
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|it
init|=
name|Iterators
operator|.
name|transform
argument_list|(
name|authorizableOakPaths
argument_list|,
operator|new
name|ToAuthorizable
argument_list|(
name|userManager
argument_list|,
name|authorizableType
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|authorizables
operator|=
name|Iterators
operator|.
name|filter
argument_list|(
name|it
argument_list|,
name|Predicates
operator|.
name|notNull
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorizableOakPaths
operator|instanceof
name|RangeIterator
condition|)
block|{
name|size
operator|=
operator|(
operator|(
name|RangeIterator
operator|)
name|authorizableOakPaths
operator|)
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|size
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
comment|//-----------------------------------------------------------< Iterator>---
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|authorizables
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Authorizable
name|next
parameter_list|()
block|{
return|return
name|authorizables
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|//--------------------------------------------------------------------------
name|long
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
comment|//--------------------------------------------------------------------------
specifier|private
specifier|static
class|class
name|ToAuthorizable
implements|implements
name|Function
argument_list|<
name|String
argument_list|,
name|Authorizable
argument_list|>
block|{
specifier|private
specifier|final
name|UserManagerImpl
name|userManager
decl_stmt|;
specifier|private
specifier|final
name|Predicate
name|predicate
decl_stmt|;
specifier|public
name|ToAuthorizable
parameter_list|(
name|UserManagerImpl
name|userManager
parameter_list|,
name|int
name|type
parameter_list|)
block|{
name|this
operator|.
name|userManager
operator|=
name|userManager
expr_stmt|;
name|this
operator|.
name|predicate
operator|=
operator|new
name|AuthorizableTypePredicate
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Authorizable
name|apply
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|)
block|{
name|String
name|jcrPath
init|=
name|userManager
operator|.
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrPath
argument_list|(
name|oakPath
argument_list|)
decl_stmt|;
try|try
block|{
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizableByPath
argument_list|(
name|jcrPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|predicate
operator|.
name|apply
argument_list|(
name|a
argument_list|)
condition|)
block|{
return|return
name|a
return|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Failed to access authorizable "
operator|+
name|jcrPath
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|AuthorizableTypePredicate
implements|implements
name|Predicate
argument_list|<
name|Authorizable
argument_list|>
block|{
specifier|private
specifier|final
name|int
name|authorizableType
decl_stmt|;
name|AuthorizableTypePredicate
parameter_list|(
name|int
name|authorizableType
parameter_list|)
block|{
name|this
operator|.
name|authorizableType
operator|=
name|authorizableType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Authorizable
name|authorizable
parameter_list|)
block|{
if|if
condition|(
name|authorizable
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|authorizableType
condition|)
block|{
case|case
name|UserManager
operator|.
name|SEARCH_TYPE_AUTHORIZABLE
case|:
return|return
literal|true
return|;
case|case
name|UserManager
operator|.
name|SEARCH_TYPE_GROUP
case|:
return|return
name|authorizable
operator|.
name|isGroup
argument_list|()
return|;
case|case
name|UserManager
operator|.
name|SEARCH_TYPE_USER
case|:
return|return
operator|!
name|authorizable
operator|.
name|isGroup
argument_list|()
return|;
default|default:
name|log
operator|.
name|warn
argument_list|(
literal|"Illegal authorizable type "
operator|+
name|authorizableType
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

