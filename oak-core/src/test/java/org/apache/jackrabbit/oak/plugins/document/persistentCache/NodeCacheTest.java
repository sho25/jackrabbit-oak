begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalCause
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|concurrent
operator|.
name|ExecutorCloser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|AbstractDocumentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMKBuilderProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStateCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|PathRev
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|RevisionVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Counting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|DefaultStatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|NodeCacheTest
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|TemporaryFolder
name|tempFolder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|DocumentMKBuilderProvider
name|builderProvider
init|=
operator|new
name|DocumentMKBuilderProvider
argument_list|()
decl_stmt|;
specifier|private
name|DocumentNodeStore
name|ns
decl_stmt|;
specifier|private
name|NodeCache
argument_list|<
name|PathRev
argument_list|,
name|DocumentNodeState
argument_list|>
name|nodeCache
decl_stmt|;
specifier|private
name|NodeCache
argument_list|<
name|PathRev
argument_list|,
name|DocumentNodeState
operator|.
name|Children
argument_list|>
name|nodeChildren
decl_stmt|;
specifier|private
name|ScheduledExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
decl_stmt|;
specifier|private
name|StatisticsProvider
name|statsProvider
init|=
operator|new
name|DefaultStatisticsProvider
argument_list|(
name|executor
argument_list|)
decl_stmt|;
annotation|@
name|After
specifier|public
name|void
name|shutDown
parameter_list|()
block|{
operator|new
name|ExecutorCloser
argument_list|(
name|executor
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAsyncCache
parameter_list|()
throws|throws
name|Exception
block|{
name|initializeNodeStore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ns
operator|.
name|setNodeStateCache
argument_list|(
operator|new
name|PathExcludingCache
argument_list|(
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
operator|.
name|child
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|AbstractDocumentNodeState
name|root
init|=
operator|(
name|AbstractDocumentNodeState
operator|)
name|ns
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|PathRev
name|prc
init|=
operator|new
name|PathRev
argument_list|(
literal|"/c"
argument_list|,
name|root
operator|.
name|getRootRevision
argument_list|()
argument_list|)
decl_stmt|;
name|PathRev
name|pra
init|=
operator|new
name|PathRev
argument_list|(
literal|"/a"
argument_list|,
name|root
operator|.
name|getRootRevision
argument_list|()
argument_list|)
decl_stmt|;
name|Counting
name|counter
init|=
name|nodeCache
operator|.
name|getPersistentCacheStats
argument_list|()
operator|.
name|getPutRejectedAsCachedInSecCounter
argument_list|()
decl_stmt|;
name|long
name|count0
init|=
name|counter
operator|.
name|getCount
argument_list|()
decl_stmt|;
comment|//Adding this should be rejected
name|nodeCache
operator|.
name|evicted
argument_list|(
name|prc
argument_list|,
operator|(
name|DocumentNodeState
operator|)
name|root
operator|.
name|getChildNode
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|RemovalCause
operator|.
name|SIZE
argument_list|)
expr_stmt|;
name|long
name|count1
init|=
name|counter
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|count1
operator|>
name|count0
argument_list|)
expr_stmt|;
comment|//Adding this should NOT be rejected
name|nodeCache
operator|.
name|evicted
argument_list|(
name|pra
argument_list|,
operator|(
name|DocumentNodeState
operator|)
name|root
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|RemovalCause
operator|.
name|SIZE
argument_list|)
expr_stmt|;
name|long
name|count2
init|=
name|counter
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|count1
argument_list|,
name|count2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncCachePut
parameter_list|()
throws|throws
name|Exception
block|{
name|initializeNodeStore
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|ns
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|//Do a read again
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|nodeCache
argument_list|,
literal|"/a/b"
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|nodeCache
argument_list|,
literal|"/a"
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|nodeChildren
argument_list|,
literal|"/a"
argument_list|)
expr_stmt|;
name|ns
operator|.
name|setNodeStateCache
argument_list|(
operator|new
name|PathExcludingCache
argument_list|(
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
operator|.
name|child
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|ns
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"c"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|assertNotContains
argument_list|(
name|nodeCache
argument_list|,
literal|"/c/d"
argument_list|)
expr_stmt|;
name|assertNotContains
argument_list|(
name|nodeCache
argument_list|,
literal|"/c"
argument_list|)
expr_stmt|;
name|assertNotContains
argument_list|(
name|nodeChildren
argument_list|,
literal|"/c"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initializeNodeStore
parameter_list|(
name|boolean
name|asyncCache
parameter_list|)
block|{
name|DocumentMK
operator|.
name|Builder
name|builder
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setStatisticsProvider
argument_list|(
name|statsProvider
argument_list|)
decl_stmt|;
if|if
condition|(
name|asyncCache
condition|)
block|{
name|builder
operator|.
name|setPersistentCache
argument_list|(
literal|"target/persistentCache,time"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|setPersistentCache
argument_list|(
literal|"target/persistentCache,time,-async"
argument_list|)
expr_stmt|;
block|}
name|ns
operator|=
name|builder
operator|.
name|getNodeStore
argument_list|()
expr_stmt|;
name|nodeCache
operator|=
operator|(
name|NodeCache
argument_list|<
name|PathRev
argument_list|,
name|DocumentNodeState
argument_list|>
operator|)
name|ns
operator|.
name|getNodeCache
argument_list|()
expr_stmt|;
name|nodeChildren
operator|=
operator|(
name|NodeCache
argument_list|<
name|PathRev
argument_list|,
name|DocumentNodeState
operator|.
name|Children
argument_list|>
operator|)
name|ns
operator|.
name|getNodeChildrenCache
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
parameter_list|<
name|V
parameter_list|>
name|void
name|assertContains
parameter_list|(
name|NodeCache
argument_list|<
name|PathRev
argument_list|,
name|V
argument_list|>
name|cache
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|assertPathRevs
argument_list|(
name|cache
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
parameter_list|<
name|V
parameter_list|>
name|void
name|assertNotContains
parameter_list|(
name|NodeCache
argument_list|<
name|PathRev
argument_list|,
name|V
argument_list|>
name|cache
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|assertPathRevs
argument_list|(
name|cache
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
parameter_list|<
name|V
parameter_list|>
name|void
name|assertPathRevs
parameter_list|(
name|NodeCache
argument_list|<
name|PathRev
argument_list|,
name|V
argument_list|>
name|cache
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|contains
parameter_list|)
block|{
name|List
argument_list|<
name|PathRev
argument_list|>
name|revs
init|=
name|getPathRevs
argument_list|(
name|cache
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PathRev
argument_list|>
name|matchingRevs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|PathRev
name|pr
range|:
name|revs
control|)
block|{
if|if
condition|(
name|cache
operator|.
name|getGenerationalMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|pr
argument_list|)
condition|)
block|{
name|matchingRevs
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|contains
operator|&&
name|matchingRevs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expecting entry for [%s]. Did not found in %s"
argument_list|,
name|path
argument_list|,
name|matchingRevs
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|contains
operator|&&
operator|!
name|matchingRevs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expecting entry for [%s]. Found %s"
argument_list|,
name|path
argument_list|,
name|revs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|V
parameter_list|>
name|List
argument_list|<
name|PathRev
argument_list|>
name|getPathRevs
parameter_list|(
name|NodeCache
argument_list|<
name|PathRev
argument_list|,
name|V
argument_list|>
name|cache
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|List
argument_list|<
name|PathRev
argument_list|>
name|revs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|PathRev
name|pr
range|:
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|pr
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|revs
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|revs
return|;
block|}
specifier|private
specifier|static
class|class
name|PathExcludingCache
implements|implements
name|DocumentNodeStateCache
block|{
specifier|private
specifier|final
name|String
name|excludeRoot
decl_stmt|;
specifier|private
name|PathExcludingCache
parameter_list|(
name|String
name|excludeRoot
parameter_list|)
block|{
name|this
operator|.
name|excludeRoot
operator|=
name|excludeRoot
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|AbstractDocumentNodeState
name|getDocumentNodeState
parameter_list|(
name|String
name|path
parameter_list|,
name|RevisionVector
name|rootRevision
parameter_list|,
name|RevisionVector
name|lastRev
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCached
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|excludeRoot
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
empty_stmt|;
block|}
end_class

end_unit

