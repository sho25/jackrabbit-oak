begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newLinkedHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newTreeMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSetWithExpectedSize
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Segment
operator|.
name|REF_COUNT_OFFSET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentId
operator|.
name|isDataSegmentId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CRC32
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
class|class
name|TarReader
block|{
comment|/** Logger instance */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TarReader
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Magic byte sequence at the end of the index block. */
specifier|private
specifier|static
specifier|final
name|int
name|INDEX_MAGIC
init|=
name|TarWriter
operator|.
name|INDEX_MAGIC
decl_stmt|;
comment|/**      * Pattern of the segment entry names. Note the trailing (\\..*)? group      * that's included for compatibility with possible future extensions.      */
specifier|private
specifier|static
specifier|final
name|Pattern
name|NAME_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})"
operator|+
literal|"(\\.([0-9a-f]{8}))?(\\..*)?"
argument_list|)
decl_stmt|;
comment|/** The tar file block size. */
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
name|TarWriter
operator|.
name|BLOCK_SIZE
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|getEntrySize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
name|BLOCK_SIZE
operator|+
name|size
operator|+
name|TarWriter
operator|.
name|getPaddingSize
argument_list|(
name|size
argument_list|)
return|;
block|}
specifier|static
name|TarReader
name|open
parameter_list|(
name|File
name|file
parameter_list|,
name|boolean
name|memoryMapping
parameter_list|)
throws|throws
name|IOException
block|{
name|TarReader
name|reader
init|=
name|openFirstFileWithValidIndex
argument_list|(
name|singletonList
argument_list|(
name|file
argument_list|)
argument_list|,
name|memoryMapping
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
return|return
name|reader
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to open tar file "
operator|+
name|file
argument_list|)
throw|;
block|}
block|}
comment|/**      * Creates a TarReader instance for reading content from a tar file.      * If there exist multiple generations of the same tar file, they are      * all passed to this method. The latest generation with a valid tar      * index (which is a good indication of general validity of the file)      * is opened and the other generations are removed to clean things up.      * If none of the generations has a valid index, then something must have      * gone wrong and we'll try recover as much content as we can from the      * existing tar generations.      *      * @param files      * @param memoryMapping      * @return      * @throws IOException      */
specifier|static
name|TarReader
name|open
parameter_list|(
name|Map
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
name|files
parameter_list|,
name|boolean
name|memoryMapping
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedMap
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
name|sorted
init|=
name|newTreeMap
argument_list|()
decl_stmt|;
name|sorted
operator|.
name|putAll
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
name|sorted
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|TarReader
name|reader
init|=
name|openFirstFileWithValidIndex
argument_list|(
name|list
argument_list|,
name|memoryMapping
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
return|return
name|reader
return|;
block|}
comment|// no generation has a valid index, so recover as much as we can
name|log
operator|.
name|warn
argument_list|(
literal|"Could not find a valid tar index in {}, recovering..."
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|LinkedHashMap
argument_list|<
name|UUID
argument_list|,
name|byte
index|[]
argument_list|>
name|entries
init|=
name|newLinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|sorted
operator|.
name|values
argument_list|()
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Recovering segments from tar file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
try|try
block|{
name|RandomAccessFile
name|access
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"r"
argument_list|)
decl_stmt|;
try|try
block|{
name|recoverEntries
argument_list|(
name|file
argument_list|,
name|access
argument_list|,
name|entries
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|access
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not read tar file "
operator|+
name|file
operator|+
literal|", skipping..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|backupSafely
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
comment|// regenerate the first generation based on the recovered data
name|File
name|file
init|=
name|sorted
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Regenerating tar file "
operator|+
name|file
argument_list|)
expr_stmt|;
name|TarWriter
name|writer
init|=
operator|new
name|TarWriter
argument_list|(
name|file
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|UUID
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|entries
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|UUID
name|uuid
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeEntry
argument_list|(
name|uuid
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|uuid
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|openFirstFileWithValidIndex
argument_list|(
name|singletonList
argument_list|(
name|file
argument_list|)
argument_list|,
name|memoryMapping
argument_list|)
expr_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
return|return
name|reader
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to open recoved tar file "
operator|+
name|file
argument_list|)
throw|;
block|}
block|}
comment|/**      * Backup this tar file for manual inspection. Something went      * wrong earlier so we want to prevent the data from being      * accidentally removed or overwritten.      *      * @param file      * @throws IOException      */
specifier|private
specifier|static
name|void
name|backupSafely
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|parent
init|=
name|file
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
name|File
name|backup
init|=
operator|new
name|File
argument_list|(
name|parent
argument_list|,
name|name
operator|+
literal|".bak"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|backup
operator|.
name|exists
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|backup
operator|=
operator|new
name|File
argument_list|(
name|parent
argument_list|,
name|name
operator|+
literal|"."
operator|+
name|i
operator|+
literal|".bak"
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Backing up "
operator|+
name|file
operator|+
literal|" to "
operator|+
name|backup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|renameTo
argument_list|(
name|backup
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Renaming failed, so using copy to backup {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|file
argument_list|,
name|backup
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not remove broken tar file "
operator|+
name|file
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
name|TarReader
name|openFirstFileWithValidIndex
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|files
parameter_list|,
name|boolean
name|memoryMapping
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
try|try
block|{
name|RandomAccessFile
name|access
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"r"
argument_list|)
decl_stmt|;
try|try
block|{
name|ByteBuffer
name|index
init|=
name|loadAndValidateIndex
argument_list|(
name|access
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No tar index found in {}, skipping..."
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// found a file with a valid index, drop the others
for|for
control|(
name|File
name|other
range|:
name|files
control|)
block|{
if|if
condition|(
name|other
operator|!=
name|file
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Removing unused tar file {}"
argument_list|,
name|other
argument_list|)
expr_stmt|;
name|other
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|memoryMapping
condition|)
block|{
name|FileAccess
name|mapped
init|=
operator|new
name|FileAccess
operator|.
name|Mapped
argument_list|(
name|access
argument_list|)
decl_stmt|;
comment|// re-read the index, now with memory mapping
name|int
name|indexSize
init|=
name|index
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|index
operator|=
name|mapped
operator|.
name|read
argument_list|(
name|mapped
operator|.
name|length
argument_list|()
operator|-
name|indexSize
operator|-
literal|16
operator|-
literal|1024
argument_list|,
name|indexSize
argument_list|)
expr_stmt|;
return|return
operator|new
name|TarReader
argument_list|(
name|file
argument_list|,
name|mapped
argument_list|,
name|index
argument_list|)
return|;
block|}
else|else
block|{
name|FileAccess
name|random
init|=
operator|new
name|FileAccess
operator|.
name|Random
argument_list|(
name|access
argument_list|)
decl_stmt|;
comment|// prevent the finally block from closing the file
comment|// as the returned TarReader will take care of that
name|access
operator|=
literal|null
expr_stmt|;
return|return
operator|new
name|TarReader
argument_list|(
name|file
argument_list|,
name|random
argument_list|,
name|index
argument_list|)
return|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|access
operator|!=
literal|null
condition|)
block|{
name|access
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not read file "
operator|+
name|file
operator|+
literal|", skipping..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Tries to read an existing index from the given tar file. The index is      * returned if it is found and looks valid (correct checksum, passes      * sanity checks).      *      * @return tar index, or {@code null} if not found or not valid      * @throws IOException if the tar file could not be read      */
specifier|private
specifier|static
name|ByteBuffer
name|loadAndValidateIndex
parameter_list|(
name|RandomAccessFile
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|length
init|=
name|file
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|%
name|BLOCK_SIZE
operator|!=
literal|0
operator|||
name|length
argument_list|<
literal|6
operator|*
name|BLOCK_SIZE
operator|||
name|length
argument_list|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unexpected size {} of tar file {}"
argument_list|,
name|length
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// unexpected file size
block|}
comment|// read the index metadata just before the two final zero blocks
name|ByteBuffer
name|meta
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|file
operator|.
name|seek
argument_list|(
name|length
operator|-
literal|2
operator|*
name|BLOCK_SIZE
operator|-
literal|16
argument_list|)
expr_stmt|;
name|file
operator|.
name|readFully
argument_list|(
name|meta
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|crc32
init|=
name|meta
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|meta
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|int
name|bytes
init|=
name|meta
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|int
name|magic
init|=
name|meta
operator|.
name|getInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|magic
operator|!=
name|INDEX_MAGIC
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No index found in tar file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// magic byte mismatch
block|}
if|if
condition|(
name|count
operator|<
literal|1
operator|||
name|bytes
operator|<
name|count
operator|*
literal|24
operator|+
literal|16
operator|||
name|bytes
operator|%
name|BLOCK_SIZE
operator|!=
literal|0
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid index metadata in tar file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// impossible entry and/or byte counts
block|}
comment|// this involves seeking backwards in the file, which might not
comment|// perform well, but that's OK since we only do this once per file
name|ByteBuffer
name|index
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|count
operator|*
literal|24
argument_list|)
decl_stmt|;
name|file
operator|.
name|seek
argument_list|(
name|length
operator|-
literal|2
operator|*
name|BLOCK_SIZE
operator|-
literal|16
operator|-
name|count
operator|*
literal|24
argument_list|)
expr_stmt|;
name|file
operator|.
name|readFully
argument_list|(
name|index
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|.
name|mark
argument_list|()
expr_stmt|;
name|CRC32
name|checksum
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
name|long
name|limit
init|=
name|length
operator|-
literal|2
operator|*
name|BLOCK_SIZE
operator|-
name|bytes
operator|-
name|BLOCK_SIZE
decl_stmt|;
name|long
name|lastmsb
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
name|long
name|lastlsb
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
name|byte
index|[]
name|entry
init|=
operator|new
name|byte
index|[
literal|24
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|index
operator|.
name|get
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|long
name|msb
init|=
name|buffer
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|long
name|lsb
init|=
name|buffer
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|buffer
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|buffer
operator|.
name|getInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastmsb
operator|>
name|msb
operator|||
operator|(
name|lastmsb
operator|==
name|msb
operator|&&
name|lastlsb
operator|>
name|lsb
operator|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Incorrect index ordering in tar file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|lastmsb
operator|==
name|msb
operator|&&
name|lastlsb
operator|==
name|lsb
operator|&&
name|i
operator|>
literal|0
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Duplicate index entry in tar file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|offset
operator|<
literal|0
operator|||
name|offset
operator|%
name|BLOCK_SIZE
operator|!=
literal|0
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid index entry offset in tar file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|size
argument_list|<
literal|1
operator|||
name|offset
operator|+
name|size
argument_list|>
name|limit
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid index entry size in tar file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|lastmsb
operator|=
name|msb
expr_stmt|;
name|lastlsb
operator|=
name|lsb
expr_stmt|;
block|}
if|if
condition|(
name|crc32
operator|!=
operator|(
name|int
operator|)
name|checksum
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid index checksum in tar file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// checksum mismatch
block|}
name|index
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|index
return|;
block|}
comment|/**      * Scans through the tar file, looking for all segment entries.      *      * @throws IOException if the tar file could not be read      */
specifier|private
specifier|static
name|void
name|recoverEntries
parameter_list|(
name|File
name|file
parameter_list|,
name|RandomAccessFile
name|access
parameter_list|,
name|LinkedHashMap
argument_list|<
name|UUID
argument_list|,
name|byte
index|[]
argument_list|>
name|entries
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|header
init|=
operator|new
name|byte
index|[
name|BLOCK_SIZE
index|]
decl_stmt|;
while|while
condition|(
name|access
operator|.
name|getFilePointer
argument_list|()
operator|+
name|BLOCK_SIZE
operator|<=
name|access
operator|.
name|length
argument_list|()
condition|)
block|{
comment|// read the tar header block
name|access
operator|.
name|readFully
argument_list|(
name|header
argument_list|)
expr_stmt|;
comment|// compute the header checksum
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BLOCK_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|sum
operator|+=
name|header
index|[
name|i
index|]
operator|&
literal|0xff
expr_stmt|;
block|}
comment|// identify possible zero block
if|if
condition|(
name|sum
operator|==
literal|0
operator|&&
name|access
operator|.
name|getFilePointer
argument_list|()
operator|+
literal|2
operator|*
name|BLOCK_SIZE
operator|==
name|access
operator|.
name|length
argument_list|()
condition|)
block|{
return|return;
comment|// found the zero blocks at the end of the file
block|}
comment|// replace the actual stored checksum with spaces for comparison
for|for
control|(
name|int
name|i
init|=
literal|148
init|;
name|i
operator|<
literal|148
operator|+
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|sum
operator|-=
name|header
index|[
name|i
index|]
operator|&
literal|0xff
expr_stmt|;
name|sum
operator|+=
literal|' '
expr_stmt|;
block|}
name|byte
index|[]
name|checkbytes
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%06o  "
argument_list|,
name|sum
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|checkbytes
index|[
literal|7
index|]
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|checkbytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|checkbytes
index|[
name|i
index|]
operator|!=
name|header
index|[
literal|148
operator|+
name|i
index|]
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid entry checksum at offset {} in tar file {}, skipping..."
argument_list|,
name|access
operator|.
name|getFilePointer
argument_list|()
operator|-
name|BLOCK_SIZE
argument_list|,
name|file
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
comment|// The header checksum passes, so read the entry name and size
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|header
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|readString
argument_list|(
name|buffer
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|position
argument_list|(
literal|124
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|readNumber
argument_list|(
name|buffer
argument_list|,
literal|12
argument_list|)
decl_stmt|;
if|if
condition|(
name|access
operator|.
name|getFilePointer
argument_list|()
operator|+
name|size
operator|>
name|access
operator|.
name|length
argument_list|()
condition|)
block|{
comment|// checksum was correct, so the size field should be accurate
name|log
operator|.
name|warn
argument_list|(
literal|"Partial entry {} in tar file {}, ignoring..."
argument_list|,
name|name
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return;
block|}
name|Matcher
name|matcher
init|=
name|NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|UUID
name|id
init|=
name|UUID
operator|.
name|fromString
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|checksum
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|checksum
operator|!=
literal|null
operator|||
operator|!
name|entries
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|access
operator|.
name|readFully
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// skip possible padding to stay at block boundaries
name|long
name|position
init|=
name|access
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|long
name|remainder
init|=
name|position
operator|%
name|BLOCK_SIZE
decl_stmt|;
if|if
condition|(
name|remainder
operator|!=
literal|0
condition|)
block|{
name|access
operator|.
name|seek
argument_list|(
name|position
operator|+
operator|(
name|BLOCK_SIZE
operator|-
name|remainder
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checksum
operator|!=
literal|null
condition|)
block|{
name|CRC32
name|crc
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
name|crc
operator|.
name|update
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|crc
operator|.
name|getValue
argument_list|()
operator|!=
name|Long
operator|.
name|parseLong
argument_list|(
name|checksum
argument_list|,
literal|16
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Checksum mismatch in entry {} of tar file {}, skipping..."
argument_list|,
name|name
argument_list|,
name|file
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|entries
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|".idx"
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unexpected entry {} in tar file {}, skipping..."
argument_list|,
name|name
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|long
name|position
init|=
name|access
operator|.
name|getFilePointer
argument_list|()
operator|+
name|size
decl_stmt|;
name|long
name|remainder
init|=
name|position
operator|%
name|BLOCK_SIZE
decl_stmt|;
if|if
condition|(
name|remainder
operator|!=
literal|0
condition|)
block|{
name|position
operator|+=
name|BLOCK_SIZE
operator|-
name|remainder
expr_stmt|;
block|}
name|access
operator|.
name|seek
argument_list|(
name|position
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|final
name|File
name|file
decl_stmt|;
specifier|private
specifier|final
name|FileAccess
name|access
decl_stmt|;
specifier|private
specifier|final
name|ByteBuffer
name|index
decl_stmt|;
specifier|private
name|TarReader
parameter_list|(
name|File
name|file
parameter_list|,
name|FileAccess
name|access
parameter_list|,
name|ByteBuffer
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|access
operator|=
name|access
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
name|Set
argument_list|<
name|UUID
argument_list|>
name|getUUIDs
parameter_list|()
block|{
name|Set
argument_list|<
name|UUID
argument_list|>
name|uuids
init|=
name|newHashSetWithExpectedSize
argument_list|(
name|index
operator|.
name|remaining
argument_list|()
operator|/
literal|24
argument_list|)
decl_stmt|;
name|int
name|position
init|=
name|index
operator|.
name|position
argument_list|()
decl_stmt|;
while|while
condition|(
name|position
operator|<
name|index
operator|.
name|limit
argument_list|()
condition|)
block|{
name|uuids
operator|.
name|add
argument_list|(
operator|new
name|UUID
argument_list|(
name|index
operator|.
name|getLong
argument_list|(
name|position
argument_list|)
argument_list|,
name|index
operator|.
name|getLong
argument_list|(
name|position
operator|+
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|position
operator|+=
literal|24
expr_stmt|;
block|}
return|return
name|uuids
return|;
block|}
name|boolean
name|containsEntry
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
block|{
return|return
name|findEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
name|ByteBuffer
name|readEntry
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|position
init|=
name|findEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
decl_stmt|;
if|if
condition|(
name|position
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|access
operator|.
name|read
argument_list|(
name|index
operator|.
name|getInt
argument_list|(
name|position
operator|+
literal|16
argument_list|)
argument_list|,
name|index
operator|.
name|getInt
argument_list|(
name|position
operator|+
literal|20
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|int
name|findEntry
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
block|{
comment|// The segment identifiers are randomly generated with uniform
comment|// distribution, so we can use interpolation search to find the
comment|// matching entry in the index. The average runtime is O(log log n).
name|int
name|lowIndex
init|=
literal|0
decl_stmt|;
name|int
name|highIndex
init|=
name|index
operator|.
name|remaining
argument_list|()
operator|/
literal|24
operator|-
literal|1
decl_stmt|;
name|float
name|lowValue
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
name|float
name|highValue
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|float
name|targetValue
init|=
name|msb
decl_stmt|;
while|while
condition|(
name|lowIndex
operator|<=
name|highIndex
condition|)
block|{
name|int
name|guessIndex
init|=
name|lowIndex
operator|+
name|Math
operator|.
name|round
argument_list|(
operator|(
name|highIndex
operator|-
name|lowIndex
operator|)
operator|*
operator|(
name|targetValue
operator|-
name|lowValue
operator|)
operator|/
operator|(
name|highValue
operator|-
name|lowValue
operator|)
argument_list|)
decl_stmt|;
name|int
name|position
init|=
name|index
operator|.
name|position
argument_list|()
operator|+
name|guessIndex
operator|*
literal|24
decl_stmt|;
name|long
name|m
init|=
name|index
operator|.
name|getLong
argument_list|(
name|position
argument_list|)
decl_stmt|;
if|if
condition|(
name|msb
operator|<
name|m
condition|)
block|{
name|highIndex
operator|=
name|guessIndex
operator|-
literal|1
expr_stmt|;
name|highValue
operator|=
name|m
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|msb
operator|>
name|m
condition|)
block|{
name|lowIndex
operator|=
name|guessIndex
operator|+
literal|1
expr_stmt|;
name|lowValue
operator|=
name|m
expr_stmt|;
block|}
else|else
block|{
comment|// getting close...
name|long
name|l
init|=
name|index
operator|.
name|getLong
argument_list|(
name|position
operator|+
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
name|lsb
operator|<
name|l
condition|)
block|{
name|highIndex
operator|=
name|guessIndex
operator|-
literal|1
expr_stmt|;
name|highValue
operator|=
name|m
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lsb
operator|>
name|l
condition|)
block|{
name|lowIndex
operator|=
name|guessIndex
operator|+
literal|1
expr_stmt|;
name|lowValue
operator|=
name|m
expr_stmt|;
block|}
else|else
block|{
comment|// found it!
return|return
name|position
return|;
block|}
block|}
block|}
comment|// not found
return|return
operator|-
literal|1
return|;
block|}
specifier|synchronized
name|TarReader
name|cleanup
parameter_list|(
name|Set
argument_list|<
name|UUID
argument_list|>
name|referencedIds
parameter_list|)
throws|throws
name|IOException
block|{
name|TarEntry
index|[]
name|sorted
init|=
operator|new
name|TarEntry
index|[
name|index
operator|.
name|remaining
argument_list|()
operator|/
literal|24
index|]
decl_stmt|;
name|int
name|position
init|=
name|index
operator|.
name|position
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|position
operator|<
name|index
operator|.
name|limit
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sorted
index|[
name|i
index|]
operator|=
operator|new
name|TarEntry
argument_list|(
name|index
operator|.
name|getLong
argument_list|(
name|position
argument_list|)
argument_list|,
name|index
operator|.
name|getLong
argument_list|(
name|position
operator|+
literal|8
argument_list|)
argument_list|,
name|index
operator|.
name|getInt
argument_list|(
name|position
operator|+
literal|16
argument_list|)
argument_list|,
name|index
operator|.
name|getInt
argument_list|(
name|position
operator|+
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|position
operator|+=
literal|24
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|sorted
argument_list|,
name|TarEntry
operator|.
name|OFFSET_ORDER
argument_list|)
expr_stmt|;
name|int
name|size
init|=
literal|0
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|sorted
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|TarEntry
name|entry
init|=
name|sorted
index|[
name|i
index|]
decl_stmt|;
name|UUID
name|id
init|=
operator|new
name|UUID
argument_list|(
name|entry
operator|.
name|msb
argument_list|()
argument_list|,
name|entry
operator|.
name|lsb
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|referencedIds
operator|.
name|remove
argument_list|(
name|id
argument_list|)
condition|)
block|{
comment|// this segment is not referenced anywhere
name|sorted
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|size
operator|+=
name|getEntrySize
argument_list|(
name|entry
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|isDataSegmentId
argument_list|(
name|entry
operator|.
name|lsb
argument_list|()
argument_list|)
condition|)
block|{
comment|// this is a referenced data segment, so follow the graph
name|ByteBuffer
name|segment
init|=
name|access
operator|.
name|read
argument_list|(
name|entry
operator|.
name|offset
argument_list|()
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|entry
operator|.
name|size
argument_list|()
argument_list|,
literal|16
operator|*
literal|256
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|segment
operator|.
name|position
argument_list|()
decl_stmt|;
name|int
name|refcount
init|=
name|segment
operator|.
name|get
argument_list|(
name|pos
operator|+
name|REF_COUNT_OFFSET
argument_list|)
operator|&
literal|0xff
decl_stmt|;
name|int
name|refend
init|=
name|pos
operator|+
literal|16
operator|*
operator|(
name|refcount
operator|+
literal|1
operator|)
decl_stmt|;
for|for
control|(
name|int
name|refpos
init|=
name|pos
operator|+
literal|16
init|;
name|refpos
operator|<
name|refend
condition|;
name|refpos
operator|+=
literal|16
control|)
block|{
name|referencedIds
operator|.
name|add
argument_list|(
operator|new
name|UUID
argument_list|(
name|segment
operator|.
name|getLong
argument_list|(
name|refpos
argument_list|)
argument_list|,
name|segment
operator|.
name|getLong
argument_list|(
name|refpos
operator|+
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|size
operator|+=
name|getEntrySize
argument_list|(
literal|24
operator|*
name|count
operator|+
literal|16
argument_list|)
expr_stmt|;
name|size
operator|+=
literal|2
operator|*
name|BLOCK_SIZE
expr_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
comment|// none of the entries within this tar file are referenceable
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|size
operator|>=
name|access
operator|.
name|length
argument_list|()
operator|*
literal|3
operator|/
literal|4
condition|)
block|{
comment|// the space savings are not worth it at less than 25%
return|return
name|this
return|;
block|}
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|name
operator|.
name|length
argument_list|()
operator|-
literal|"a.tar"
operator|.
name|length
argument_list|()
decl_stmt|;
name|char
name|generation
init|=
name|name
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|generation
operator|==
literal|'z'
condition|)
block|{
comment|// no garbage collection after reaching generation z
return|return
name|this
return|;
block|}
name|File
name|newFile
init|=
operator|new
name|File
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
operator|+
call|(
name|char
call|)
argument_list|(
name|generation
operator|+
literal|1
argument_list|)
operator|+
literal|".tar"
argument_list|)
decl_stmt|;
name|TarWriter
name|writer
init|=
operator|new
name|TarWriter
argument_list|(
name|newFile
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sorted
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TarEntry
name|entry
init|=
name|sorted
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|entry
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|access
operator|.
name|read
argument_list|(
name|entry
operator|.
name|offset
argument_list|()
argument_list|,
name|entry
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEntry
argument_list|(
name|entry
operator|.
name|msb
argument_list|()
argument_list|,
name|entry
operator|.
name|lsb
argument_list|()
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|entry
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|TarReader
name|reader
init|=
name|openFirstFileWithValidIndex
argument_list|(
name|singletonList
argument_list|(
name|newFile
argument_list|)
argument_list|,
name|access
operator|.
name|isMemoryMapped
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
return|return
name|reader
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to open cleaned up tar file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
name|File
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|access
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|file
return|;
block|}
comment|//-----------------------------------------------------------< private>--
specifier|private
specifier|static
name|String
name|readString
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|fieldSize
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|fieldSize
index|]
decl_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|n
operator|<
name|fieldSize
operator|&&
name|b
index|[
name|n
index|]
operator|!=
literal|0
condition|)
block|{
name|n
operator|++
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|n
argument_list|,
name|UTF_8
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|readNumber
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|fieldSize
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|fieldSize
index|]
decl_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|int
name|number
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldSize
condition|;
name|i
operator|++
control|)
block|{
name|int
name|digit
init|=
name|b
index|[
name|i
index|]
operator|&
literal|0xff
decl_stmt|;
if|if
condition|(
literal|'0'
operator|<=
name|digit
operator|&&
name|digit
operator|<=
literal|'7'
condition|)
block|{
name|number
operator|=
name|number
operator|*
literal|8
operator|+
name|digit
operator|-
literal|'0'
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|number
return|;
block|}
comment|//------------------------------------------------------------< Object>--
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|file
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

