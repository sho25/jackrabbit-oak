begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|AbstractLazyIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_class
specifier|public
class|class
name|DescendantsIterator
extends|extends
name|AbstractLazyIterator
argument_list|<
name|NodeState
argument_list|>
block|{
specifier|private
specifier|final
name|Deque
argument_list|<
name|Iterator
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
argument_list|>
name|stack
init|=
operator|new
name|ArrayDeque
argument_list|<
name|Iterator
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxLevel
decl_stmt|;
specifier|public
name|DescendantsIterator
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|int
name|maxLevel
parameter_list|)
block|{
name|this
operator|.
name|maxLevel
operator|=
name|maxLevel
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|root
operator|.
name|getChildNodeEntries
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|NodeState
name|getNext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|fillStack
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|stack
operator|.
name|peekFirst
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getNodeState
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|fillStack
parameter_list|()
block|{
while|while
condition|(
name|stack
operator|.
name|size
argument_list|()
operator|<
name|maxLevel
operator|||
operator|!
name|stack
operator|.
name|peekFirst
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|topIterator
init|=
name|stack
operator|.
name|peekFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|topIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|NodeState
name|nextNode
init|=
name|topIterator
operator|.
name|next
argument_list|()
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|nextNode
operator|.
name|getChildNodeEntries
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

