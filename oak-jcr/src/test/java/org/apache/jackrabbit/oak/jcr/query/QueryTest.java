begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|query
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|InvalidQueryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|RowIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|JcrUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|cnd
operator|.
name|CndImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsonObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|AbstractRepositoryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|NodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests the query feature.  */
end_comment

begin_class
specifier|public
class|class
name|QueryTest
extends|extends
name|AbstractRepositoryTest
block|{
specifier|public
name|QueryTest
parameter_list|(
name|NodeStoreFixture
name|fixture
parameter_list|)
block|{
name|super
argument_list|(
name|fixture
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|join
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|Node
name|root
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Node
name|a
init|=
name|root
operator|.
name|addNode
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|a
operator|.
name|addMixin
argument_list|(
literal|"mix:referenceable"
argument_list|)
expr_stmt|;
name|Node
name|b
init|=
name|root
operator|.
name|addNode
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"join"
argument_list|,
name|a
operator|.
name|getProperty
argument_list|(
literal|"jcr:uuid"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|,
name|PropertyType
operator|.
name|REFERENCE
argument_list|)
expr_stmt|;
comment|// b.setProperty("join", a.getProperty("jcr:uuid").getString(), PropertyType.STRING);
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a"
argument_list|,
name|getNodeList
argument_list|(
name|session
argument_list|,
literal|"select [a].* from [nt:unstructured] as [a] "
operator|+
literal|"inner join [nt:unstructured] as [b] "
operator|+
literal|"on [a].[jcr:uuid] = [b].[join] where issamenode([a], '/a')"
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a"
argument_list|,
name|getNodeList
argument_list|(
name|session
argument_list|,
literal|"select [a].* from [nt:unstructured] as [a] "
operator|+
literal|"inner join [nt:unstructured] as [b] "
operator|+
literal|"on [b].[join] = [a].[jcr:uuid] where issamenode([a], '/a')"
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|typeConversion
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|Node
name|root
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Node
name|test
init|=
name|root
operator|.
name|addNode
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addNode
argument_list|(
literal|"a"
argument_list|,
literal|"oak:Unstructured"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"time"
argument_list|,
literal|"2001-01-01T00:00:00.000Z"
argument_list|,
name|PropertyType
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|test
operator|.
name|addNode
argument_list|(
literal|"b"
argument_list|,
literal|"oak:Unstructured"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"time"
argument_list|,
literal|"2010-01-01T00:00:00.000Z"
argument_list|,
name|PropertyType
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|test
operator|.
name|addNode
argument_list|(
literal|"c"
argument_list|,
literal|"oak:Unstructured"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"time"
argument_list|,
literal|"2020-01-01T00:00:00.000Z"
argument_list|,
name|PropertyType
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/c"
argument_list|,
name|getNodeList
argument_list|(
name|session
argument_list|,
literal|"select [jcr:path] "
operator|+
literal|"from [nt:base] "
operator|+
literal|"where [time]> '2011-01-01T00:00:00.000z'"
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|twoSelectors
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|Node
name|root
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Node
name|test
init|=
name|root
operator|.
name|addNode
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addNode
argument_list|(
literal|"testNode"
argument_list|,
literal|"oak:Unstructured"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/testNode"
argument_list|,
name|getNodeList
argument_list|(
name|session
argument_list|,
literal|"select b.[jcr:path] as [jcr:path], b.[jcr:score] as [jcr:score], b.* "
operator|+
literal|"from [nt:base] as a "
operator|+
literal|"inner join [nt:base] as b "
operator|+
literal|"on ischildnode(b, a) "
operator|+
literal|"where issamenode(a, '/test')"
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/testNode"
argument_list|,
name|getNodeList
argument_list|(
name|session
argument_list|,
literal|"select b.[jcr:path] as [jcr:path], b.[jcr:score] as [jcr:score], b.* "
operator|+
literal|"from [nt:base] as b "
operator|+
literal|"inner join [nt:base] as a "
operator|+
literal|"on ischildnode(b, a) "
operator|+
literal|"where issamenode(b, '/test/testNode')"
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test"
argument_list|,
name|getNodeList
argument_list|(
name|session
argument_list|,
literal|"select a.[jcr:path] as [jcr:path], a.[jcr:score] as [jcr:score], a.* "
operator|+
literal|"from [nt:base] as a "
operator|+
literal|"inner join [nt:base] as b "
operator|+
literal|"on ischildnode(b, a) "
operator|+
literal|"where issamenode(a, '/test')"
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test"
argument_list|,
name|getNodeList
argument_list|(
name|session
argument_list|,
literal|"select a.[jcr:path] as [jcr:path], a.[jcr:score] as [jcr:score], a.* "
operator|+
literal|"from [nt:base] as b "
operator|+
literal|"inner join [nt:base] as a "
operator|+
literal|"on ischildnode(b, a) "
operator|+
literal|"where issamenode(b, '/test/testNode')"
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|getNodeList
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|query
parameter_list|,
name|String
name|language
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|QueryResult
name|r
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
operator|.
name|createQuery
argument_list|(
name|query
argument_list|,
name|language
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|NodeIterator
name|it
init|=
name|r
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|buff
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|it
operator|.
name|nextNode
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noDeclaringNodeTypesIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|Node
name|root
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
comment|// set declaringNodeTypes to an empty array
name|Node
name|nodeTypeIndex
init|=
name|root
operator|.
name|getNode
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"nodetype"
argument_list|)
decl_stmt|;
name|nodeTypeIndex
operator|.
name|setProperty
argument_list|(
literal|"declaringNodeTypes"
argument_list|,
operator|new
name|String
index|[]
block|{             }
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// add a node
name|Node
name|test
init|=
name|root
operator|.
name|addNode
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addNode
argument_list|(
literal|"testNode"
argument_list|,
literal|"oak:Unstructured"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// run the query
name|String
name|query
init|=
literal|"/jcr:root/test//*[@jcr:primaryType='oak:Unstructured']"
decl_stmt|;
name|QueryResult
name|r
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
operator|.
name|createQuery
argument_list|(
name|query
argument_list|,
literal|"xpath"
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|NodeIterator
name|it
init|=
name|r
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/testNode"
argument_list|,
name|it
operator|.
name|nextNode
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|orderBy
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|Node
name|root
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
comment|// add an ordered index on "lastMod"
name|Node
name|index
init|=
name|root
operator|.
name|getNode
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"lastMod"
argument_list|,
literal|"oak:QueryIndexDefinition"
argument_list|)
decl_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
literal|"reindex"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// index.setProperty("async", "async");
name|index
operator|.
name|setProperty
argument_list|(
literal|"type"
argument_list|,
literal|"ordered"
argument_list|)
expr_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
literal|"propertyNames"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"lastMod"
block|}
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
expr_stmt|;
comment|// disable the nodetype index
name|Node
name|nodeTypeIndex
init|=
name|root
operator|.
name|getNode
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"nodetype"
argument_list|)
decl_stmt|;
name|nodeTypeIndex
operator|.
name|setProperty
argument_list|(
literal|"declaringNodeTypes"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"nt:Folder"
block|}
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// add 10 nodes
name|Node
name|test
init|=
name|root
operator|.
name|addNode
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|n
init|=
name|test
operator|.
name|addNode
argument_list|(
literal|"test"
operator|+
name|i
argument_list|,
literal|"oak:Unstructured"
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|setTimeInMillis
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2000-01-01 10:00:00"
argument_list|)
operator|.
name|getTime
argument_list|()
operator|+
literal|1000
operator|*
name|i
argument_list|)
expr_stmt|;
name|n
operator|.
name|addNode
argument_list|(
literal|"content"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"lastMod"
argument_list|,
name|cal
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// run the query
name|String
name|query
init|=
literal|"/jcr:root/test//*[@jcr:primaryType='oak:Unstructured'] "
operator|+
literal|"order by content/@lastMod descending"
decl_stmt|;
name|QueryResult
name|r
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
operator|.
name|createQuery
argument_list|(
name|query
argument_list|,
literal|"xpath"
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|NodeIterator
name|it
init|=
name|r
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|buff
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|it
operator|.
name|nextNode
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"/test/test9, /test/test8, /test/test7, /test/test6, /test/test5, /test/test4, /test/test3, /test/test2, /test/test1, /test/test0"
argument_list|,
name|buff
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|RowIterator
name|rit
decl_stmt|;
name|r
operator|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"explain "
operator|+
name|query
argument_list|,
literal|"xpath"
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
name|rit
operator|=
name|r
operator|.
name|getRows
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[nt:base] as [a] /* ordered order by lastMod ancestor 1 "
operator|+
literal|"where ([a].[jcr:primaryType] = 'oak:Unstructured') "
operator|+
literal|"and (isdescendantnode([a], [/test])) */"
argument_list|,
name|rit
operator|.
name|nextRow
argument_list|()
operator|.
name|getValue
argument_list|(
literal|"plan"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"/jcr:root/test//*[@jcr:primaryType='oak:Unstructured' "
operator|+
literal|"and  content/@lastMod> '2001-02-01']"
expr_stmt|;
name|r
operator|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"explain "
operator|+
name|query
argument_list|,
literal|"xpath"
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
name|rit
operator|=
name|r
operator|.
name|getRows
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[nt:base] as [a] /* ordered lastMod> 2001-02-01 "
operator|+
literal|"where ([a].[jcr:primaryType] = 'oak:Unstructured') "
operator|+
literal|"and ([a].[content/lastMod]> '2001-02-01') "
operator|+
literal|"and (isdescendantnode([a], [/test])) */"
argument_list|,
name|rit
operator|.
name|nextRow
argument_list|()
operator|.
name|getValue
argument_list|(
literal|"plan"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|date
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|Node
name|t1
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"t1"
argument_list|)
decl_stmt|;
name|t1
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
literal|"22.06.07"
argument_list|)
expr_stmt|;
name|Node
name|t2
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"t2"
argument_list|)
decl_stmt|;
name|t2
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
literal|"2007-06-22T01:02:03.000Z"
argument_list|,
name|PropertyType
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
name|query
init|=
literal|"//*[x='a' or x='b']"
decl_stmt|;
name|QueryResult
name|r
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
operator|.
name|createQuery
argument_list|(
name|query
argument_list|,
literal|"xpath"
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|NodeIterator
name|it
init|=
name|r
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|unicode
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|Node
name|content
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|String
index|[]
index|[]
name|list
init|=
block|{
block|{
literal|"three"
block|,
literal|"\u00e4\u00f6\u00fc"
block|}
block|,
block|{
literal|"two"
block|,
literal|"123456789"
block|}
block|,
block|{
literal|"one"
block|,
literal|"\u3360\u3361\u3362\u3363\u3364\u3365\u3366\u3367\u3368\u3369"
block|}
block|,          }
decl_stmt|;
for|for
control|(
name|String
index|[]
name|pair
range|:
name|list
control|)
block|{
name|content
operator|.
name|addNode
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"propValue testSearch "
operator|+
name|pair
index|[
literal|1
index|]
operator|+
literal|" data"
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
for|for
control|(
name|String
index|[]
name|pair
range|:
name|list
control|)
block|{
name|String
name|query
init|=
literal|"//*[jcr:contains(., '"
operator|+
name|pair
index|[
literal|1
index|]
operator|+
literal|"')]"
decl_stmt|;
name|QueryResult
name|r
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
operator|.
name|createQuery
argument_list|(
name|query
argument_list|,
literal|"xpath"
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|NodeIterator
name|it
init|=
name|r
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|it
operator|.
name|nextNode
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/test/"
operator|+
name|pair
index|[
literal|0
index|]
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"OAK-1215"
argument_list|)
specifier|public
name|void
name|anyChildNodeProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|Node
name|content
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|content
operator|.
name|addNode
argument_list|(
literal|"one"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|content
operator|.
name|addNode
argument_list|(
literal|"two"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"hi"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
name|query
init|=
literal|"//*[*/@prop = 'hello']"
decl_stmt|;
name|QueryResult
name|r
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
operator|.
name|createQuery
argument_list|(
name|query
argument_list|,
literal|"xpath"
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|NodeIterator
name|it
init|=
name|r
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|it
operator|.
name|nextNode
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/test/one"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"//*[*/*/@prop = 'hello']"
expr_stmt|;
name|r
operator|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
operator|.
name|createQuery
argument_list|(
name|query
argument_list|,
literal|"xpath"
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
name|it
operator|=
name|r
operator|.
name|getNodes
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|=
name|it
operator|.
name|nextNode
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|relativeNotExistsProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|Node
name|content
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|content
operator|.
name|addNode
argument_list|(
literal|"one"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|content
operator|.
name|addNode
argument_list|(
literal|"two"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"child"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
name|query
init|=
literal|"//*[not(child/@prop)]"
decl_stmt|;
name|QueryResult
name|r
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
operator|.
name|createQuery
argument_list|(
name|query
argument_list|,
literal|"xpath"
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|NodeIterator
name|it
init|=
name|r
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|it
operator|.
name|nextNode
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/test/two"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|doubleQuote
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|Node
name|hello
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|;
name|hello
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Node
name|world
init|=
name|hello
operator|.
name|addNode
argument_list|(
literal|"world"
argument_list|)
decl_stmt|;
name|world
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|Query
name|q
decl_stmt|;
name|q
operator|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"SELECT * FROM [nt:base] AS s WHERE ISDESCENDANTNODE(s,[/hello])"
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/hello/world"
argument_list|,
name|getPaths
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"SELECT * FROM [nt:base] AS s WHERE ISDESCENDANTNODE(s,\"/hello\")"
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/hello/world"
argument_list|,
name|getPaths
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|q
operator|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"SELECT * FROM [nt:base] AS s WHERE ISDESCENDANTNODE(s,[\"/hello\"])"
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
expr_stmt|;
name|getPaths
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidQueryException
name|e
parameter_list|)
block|{
comment|// expected: absolute path
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|or
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|Node
name|hello
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|;
name|hello
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Node
name|world
init|=
name|hello
operator|.
name|addNode
argument_list|(
literal|"world"
argument_list|)
decl_stmt|;
name|world
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|Query
name|q
decl_stmt|;
name|q
operator|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"select a.[jcr:path] from [nt:base] as a "
operator|+
literal|"inner join [nt:base] as b "
operator|+
literal|"on ischildnode(a, b) "
operator|+
literal|"where a.x = 1 or a.x = 2 or b.x = 3 or b.x = 4"
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/hello"
argument_list|,
name|getPaths
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"//hello[@x=1]/*[@x=2]"
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/hello/world"
argument_list|,
name|getPaths
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|encodedPath
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"hello"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|Query
name|q
decl_stmt|;
name|q
operator|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"/jcr:root/hel_x006c_o/*"
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/hello/world"
argument_list|,
name|getPaths
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"//hel_x006c_o"
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/hello"
argument_list|,
name|getPaths
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"//element(hel_x006c_o, nt:base)"
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/hello"
argument_list|,
name|getPaths
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|getPaths
parameter_list|(
name|Query
name|q
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|QueryResult
name|r
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|RowIterator
name|it
init|=
name|r
operator|.
name|getRows
argument_list|()
decl_stmt|;
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Row
name|row
init|=
name|it
operator|.
name|nextRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|buff
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|row
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|simple
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|Node
name|hello
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|;
name|hello
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|hello
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"hello_world"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|Node
name|hello2
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"hello2"
argument_list|)
decl_stmt|;
name|hello2
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|hello2
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"hello world"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|ValueFactory
name|vf
init|=
name|session
operator|.
name|getValueFactory
argument_list|()
decl_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
comment|// SQL-2
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"select text from [nt:base] where id = $id"
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|"id"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|QueryResult
name|r
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|RowIterator
name|it
init|=
name|r
operator|.
name|getRows
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Row
name|row
init|=
name|it
operator|.
name|nextRow
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"hello_world"
argument_list|,
name|row
operator|.
name|getValue
argument_list|(
literal|"text"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|columns
init|=
name|r
operator|.
name|getColumnNames
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|columns
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text"
argument_list|,
name|columns
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|q
operator|.
name|execute
argument_list|()
expr_stmt|;
name|NodeIterator
name|nodeIt
init|=
name|r
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|nodeIt
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|nodeIt
operator|.
name|nextNode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"hello_world"
argument_list|,
name|n
operator|.
name|getProperty
argument_list|(
literal|"text"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// SQL
name|q
operator|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"select text from [nt:base] where text like 'hello\\_world' escape '\\'"
argument_list|,
name|Query
operator|.
name|SQL
argument_list|)
expr_stmt|;
name|r
operator|=
name|q
operator|.
name|execute
argument_list|()
expr_stmt|;
name|columns
operator|=
name|r
operator|.
name|getColumnNames
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|columns
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text"
argument_list|,
name|columns
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jcr:path"
argument_list|,
name|columns
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jcr:score"
argument_list|,
name|columns
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|nodeIt
operator|=
name|r
operator|.
name|getNodes
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|nodeIt
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|=
name|nodeIt
operator|.
name|nextNode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello_world"
argument_list|,
name|n
operator|.
name|getProperty
argument_list|(
literal|"text"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nodeIt
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// XPath
name|q
operator|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"//*[@id=1]"
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
expr_stmt|;
name|r
operator|=
name|q
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
literal|"jcr:path"
argument_list|,
literal|"jcr:score"
argument_list|,
literal|"jcr:primaryType"
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|r
operator|.
name|getColumnNames
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|skip
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|Node
name|hello1
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"hello1"
argument_list|)
decl_stmt|;
name|hello1
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|hello1
operator|.
name|setProperty
argument_list|(
literal|"data"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|Node
name|hello3
init|=
name|hello1
operator|.
name|addNode
argument_list|(
literal|"hello3"
argument_list|)
decl_stmt|;
name|hello3
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|hello3
operator|.
name|setProperty
argument_list|(
literal|"data"
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|Node
name|hello2
init|=
name|hello3
operator|.
name|addNode
argument_list|(
literal|"hello2"
argument_list|)
decl_stmt|;
name|hello2
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|hello2
operator|.
name|setProperty
argument_list|(
literal|"data"
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|ValueFactory
name|vf
init|=
name|session
operator|.
name|getValueFactory
argument_list|()
decl_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"select id from [nt:base] where data>= $data order by id"
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|"data"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|-
literal|1
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|QueryResult
name|r
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|RowIterator
name|it
init|=
name|r
operator|.
name|getRows
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|r
operator|.
name|getRows
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|r
operator|.
name|getNodes
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|Row
name|row
decl_stmt|;
try|try
block|{
name|it
operator|.
name|skip
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<=
literal|3
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|i
operator|>=
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<=
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
name|it
operator|.
name|nextRow
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|row
operator|.
name|getValue
argument_list|(
literal|"id"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<=
literal|1
condition|)
block|{
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
name|it
operator|.
name|nextRow
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|row
operator|.
name|getValue
argument_list|(
literal|"id"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<=
literal|2
condition|)
block|{
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
name|it
operator|.
name|nextRow
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|row
operator|.
name|getValue
argument_list|(
literal|"id"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|limit
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|Node
name|hello1
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"hello1"
argument_list|)
decl_stmt|;
name|hello1
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|hello1
operator|.
name|setProperty
argument_list|(
literal|"data"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|Node
name|hello3
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"hello3"
argument_list|)
decl_stmt|;
name|hello3
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|hello3
operator|.
name|setProperty
argument_list|(
literal|"data"
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|Node
name|hello2
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"hello2"
argument_list|)
decl_stmt|;
name|hello2
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|hello2
operator|.
name|setProperty
argument_list|(
literal|"data"
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|ValueFactory
name|vf
init|=
name|session
operator|.
name|getValueFactory
argument_list|()
decl_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"select id from [nt:base] where data>= $data order by id"
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|"data"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|limit
init|=
literal|0
init|;
name|limit
operator|<
literal|5
condition|;
name|limit
operator|++
control|)
block|{
name|q
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|offset
init|=
literal|0
init|;
name|offset
operator|<
literal|3
condition|;
name|offset
operator|++
control|)
block|{
name|q
operator|.
name|setOffset
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|QueryResult
name|r
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|RowIterator
name|it
init|=
name|r
operator|.
name|getRows
argument_list|()
decl_stmt|;
name|int
name|l
init|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
literal|3
operator|-
name|offset
argument_list|)
argument_list|,
name|limit
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|l
argument_list|,
name|r
operator|.
name|getRows
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|l
argument_list|,
name|r
operator|.
name|getNodes
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|Row
name|row
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|offset
operator|+
literal|1
init|,
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
operator|&&
name|x
operator|<
literal|4
condition|;
name|i
operator|++
operator|,
name|x
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
name|it
operator|.
name|nextRow
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|x
argument_list|,
name|row
operator|.
name|getValue
argument_list|(
literal|"id"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|nodeTypeConstraint
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|Node
name|root
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Node
name|folder1
init|=
name|root
operator|.
name|addNode
argument_list|(
literal|"folder1"
argument_list|,
literal|"nt:folder"
argument_list|)
decl_stmt|;
name|Node
name|folder2
init|=
name|root
operator|.
name|addNode
argument_list|(
literal|"folder2"
argument_list|,
literal|"nt:folder"
argument_list|)
decl_stmt|;
name|JcrUtils
operator|.
name|putFile
argument_list|(
name|folder1
argument_list|,
literal|"file"
argument_list|,
literal|"text/plain"
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"foo bar"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|folder2
operator|.
name|addNode
argument_list|(
literal|"folder3"
argument_list|,
literal|"nt:folder"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"//element(*, nt:folder)"
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RowIterator
name|it
init|=
name|q
operator|.
name|execute
argument_list|()
operator|.
name|getRows
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|it
operator|.
name|nextRow
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/folder1"
argument_list|,
literal|"/folder2"
argument_list|,
literal|"/folder2/folder3"
argument_list|)
argument_list|)
argument_list|,
name|paths
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noLiterals
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|ValueFactory
name|vf
init|=
name|session
operator|.
name|getValueFactory
argument_list|()
decl_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
comment|// insecure
try|try
block|{
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"select text from [nt:base] where password = 'x'"
argument_list|,
name|Query
operator|.
name|JCR_SQL2
operator|+
literal|"-noLiterals"
argument_list|)
decl_stmt|;
name|q
operator|.
name|execute
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidQueryException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"literals of this type not allowed"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// secure
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"select text from [nt:base] where password = $p"
argument_list|,
name|Query
operator|.
name|JCR_SQL2
operator|+
literal|"-noLiterals"
argument_list|)
decl_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|"p"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|fnNameEncoding
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"123456_test_name"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|Query
name|q
decl_stmt|;
name|q
operator|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"//*[jcr:like(fn:name(), '%123456%')]"
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/123456_test_name"
argument_list|,
name|getPaths
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"//*[fn:name() = '123456_test_name']"
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|getPaths
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * OAK-1093      */
annotation|@
name|Test
specifier|public
name|void
name|getValuesOnMvp
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|Node
name|hello
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|;
name|hello
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|hello
operator|.
name|setProperty
argument_list|(
literal|"properties"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"p1"
block|,
literal|"p2"
block|}
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"select properties from [nt:base] where id = 1"
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|r
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|RowIterator
name|it
init|=
name|r
operator|.
name|getRows
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Row
name|row
init|=
name|it
operator|.
name|nextRow
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"p1 p2"
argument_list|,
name|row
operator|.
name|getValues
argument_list|()
index|[
literal|0
index|]
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|xpathEscapeTest
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|writer
init|=
name|createAdminSession
argument_list|()
decl_stmt|;
name|Session
name|reader
init|=
name|createAdminSession
argument_list|()
decl_stmt|;
name|UserManager
name|uMgr
init|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|writer
operator|)
operator|.
name|getUserManager
argument_list|()
decl_stmt|;
name|String
name|uid
init|=
literal|"testUser"
decl_stmt|;
try|try
block|{
name|User
name|user
init|=
name|uMgr
operator|.
name|createUser
argument_list|(
literal|"testUser"
argument_list|,
literal|"pw"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|getNode
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|addNode
argument_list|(
literal|".tokens"
argument_list|,
literal|"rep:Unstructured"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|save
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|reader
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"/jcr:root//*[_x002e_tokens/@jcr:primaryType]"
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
decl_stmt|;
name|NodeIterator
name|res
init|=
name|q
operator|.
name|execute
argument_list|()
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Authorizable
name|a
init|=
name|uMgr
operator|.
name|getAuthorizable
argument_list|(
name|uid
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|remove
argument_list|()
expr_stmt|;
name|writer
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOak1096
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|writer
init|=
name|createAdminSession
argument_list|()
decl_stmt|;
name|Session
name|reader
init|=
name|createAdminSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Node
name|rootNode
init|=
name|writer
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|rootNode
operator|.
name|addNode
argument_list|(
literal|"test"
argument_list|,
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"find me"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|save
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|reader
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"select * from 'nt:base' where contains(*, 'find me')"
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|NodeIterator
name|res
init|=
name|q
operator|.
name|execute
argument_list|()
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"False amount of hits"
argument_list|,
literal|1
argument_list|,
name|res
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOak1128
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|createAdminSession
argument_list|()
decl_stmt|;
name|Node
name|p
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"etc"
argument_list|)
decl_stmt|;
name|p
operator|.
name|addNode
argument_list|(
literal|"p1"
argument_list|)
expr_stmt|;
name|Node
name|r
init|=
name|p
operator|.
name|addNode
argument_list|(
literal|"p2"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"r"
argument_list|,
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
name|r
operator|.
name|setProperty
argument_list|(
literal|"nt:resourceType"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|Query
name|q
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"/jcr:root/etc//*["
operator|+
literal|"(@jcr:primaryType = 'a'  or @jcr:primaryType = 'b') "
operator|+
literal|"or @nt:resourceType = 'test']"
argument_list|,
literal|"xpath"
argument_list|)
decl_stmt|;
name|QueryResult
name|qr
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|NodeIterator
name|ni
init|=
name|qr
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|Node
name|n
init|=
name|ni
operator|.
name|nextNode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/etc/p2/r"
argument_list|,
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOak1171
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|createAdminSession
argument_list|()
decl_stmt|;
name|Node
name|p
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"etc"
argument_list|)
decl_stmt|;
name|p
operator|.
name|addNode
argument_list|(
literal|"p1"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"title"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|p
operator|.
name|addNode
argument_list|(
literal|"p2"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"title"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|Query
name|q
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"//*[@title = 'test']"
argument_list|,
literal|"xpath"
argument_list|)
decl_stmt|;
name|QueryResult
name|qr
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|NodeIterator
name|ni
init|=
name|qr
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|ni
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|ni
operator|.
name|nextNode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/etc/p1"
argument_list|,
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ni
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOak1354
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|createAdminSession
argument_list|()
decl_stmt|;
name|NodeTypeManager
name|manager
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|manager
operator|.
name|hasNodeType
argument_list|(
literal|"mymixinOak1354"
argument_list|)
condition|)
block|{
name|StringBuilder
name|defs
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|defs
operator|.
name|append
argument_list|(
literal|"[mymixinOak1354]\n"
argument_list|)
expr_stmt|;
name|defs
operator|.
name|append
argument_list|(
literal|"  mixin"
argument_list|)
expr_stmt|;
name|Reader
name|cndReader
init|=
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|defs
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|CndImporter
operator|.
name|registerNodeTypes
argument_list|(
name|cndReader
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
name|Node
name|p
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"one"
argument_list|)
decl_stmt|;
name|p
operator|.
name|addMixin
argument_list|(
literal|"mymixinOak1354"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|Query
name|q
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"SELECT * FROM [mymixinOak1354]"
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|qr
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|NodeIterator
name|ni
init|=
name|qr
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|ni
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|ni
operator|.
name|nextNode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/one"
argument_list|,
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ni
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|approxCount
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|createAdminSession
argument_list|()
decl_stmt|;
name|double
name|c
init|=
name|getCost
argument_list|(
name|session
argument_list|,
literal|"//*[@x=1]"
argument_list|)
decl_stmt|;
comment|// *with* the counter index, the estimated cost to traverse is low
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|c
argument_list|,
name|c
operator|>
literal|0
operator|&&
name|c
operator|<
literal|100000
argument_list|)
expr_stmt|;
comment|// *without* the counter index, the estimated cost to traverse is high
name|session
operator|.
name|getNode
argument_list|(
literal|"/oak:index/counter"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|double
name|c2
init|=
name|getCost
argument_list|(
name|session
argument_list|,
literal|"//*[@x=1]"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|c2
argument_list|,
name|c2
operator|>
literal|1000000
argument_list|)
expr_stmt|;
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|double
name|getCost
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|xpath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|QueryResult
name|qr
init|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"explain measure "
operator|+
name|xpath
argument_list|,
literal|"xpath"
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|Row
name|r
init|=
name|qr
operator|.
name|getRows
argument_list|()
operator|.
name|nextRow
argument_list|()
decl_stmt|;
name|String
name|plan
init|=
name|r
operator|.
name|getValue
argument_list|(
literal|"plan"
argument_list|)
operator|.
name|getString
argument_list|()
decl_stmt|;
name|String
name|cost
init|=
name|plan
operator|.
name|substring
argument_list|(
name|plan
operator|.
name|lastIndexOf
argument_list|(
literal|'{'
argument_list|)
argument_list|)
decl_stmt|;
name|JsonObject
name|json
init|=
name|parseJson
argument_list|(
name|cost
argument_list|)
decl_stmt|;
name|double
name|c
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|json
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|c
return|;
block|}
specifier|private
specifier|static
name|JsonObject
name|parseJson
parameter_list|(
name|String
name|json
parameter_list|)
block|{
name|JsopTokenizer
name|t
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
return|return
name|JsonObject
operator|.
name|create
argument_list|(
name|t
argument_list|)
return|;
block|}
block|}
end_class

end_unit

