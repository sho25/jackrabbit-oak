begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopWriter
import|;
end_import

begin_comment
comment|/**  * A ChangeSet is a collection of items that have been changed as part of a  * commit. A ChangeSet is immutable and built by a ChangeSetBuilder.  *<p>  * Those items are parent paths, parent node names, parent node types and  * (child) properties. 'Changed' refers to any of add, remove, change (where  * applicable).  *<p>  * A ChangeSet is piggybacked on a CommitInfo in the CommitContext and can be  * used by (downstream) Observers for their convenience.  *<p>  * To limit memory usage, the ChangeSet has a limit on the number of items,  * each, that it collects. If one of those items reach the limit this is called  * an 'overflow' and the corresponding item type is marked as having  * 'overflown'. Downstream Observers should thus check if a particular item has  * overflown or not - this is indicated with null as the return value of the  * corresponding getters (while empty means: not overflown but nothing changed  * of that type).  *<p>  * Also, the ChangeSet carries a 'maxPathDepth' which is the depth of the path  * up until which paths have been collected. Thus any path that is longer than  * this 'maxPathDepth' will be cut off and only reported up to that max depth.  * Downstream Observers should thus inspect the 'maxPathDepth' and compare  * actual path depths with it in order to find out if any child paths have been  * cut off.  *<p>  * Naming: note that path, node name and node types all refer to the *parent* of  * a change. While properties naturally are leafs.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ChangeSet
block|{
specifier|private
specifier|final
name|int
name|maxPathDepth
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|parentPaths
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|parentNodeNames
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|parentNodeTypes
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|propertyNames
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|allNodeTypes
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|hitsMaxPathDepth
decl_stmt|;
name|ChangeSet
parameter_list|(
name|int
name|maxPathDepth
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|parentPaths
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|parentNodeNames
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|parentNodeTypes
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|propertyNames
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|allNodeTypes
parameter_list|)
block|{
name|this
operator|.
name|maxPathDepth
operator|=
name|maxPathDepth
expr_stmt|;
name|this
operator|.
name|parentPaths
operator|=
name|parentPaths
operator|==
literal|null
condition|?
literal|null
else|:
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|parentPaths
argument_list|)
expr_stmt|;
name|this
operator|.
name|parentNodeNames
operator|=
name|parentNodeNames
operator|==
literal|null
condition|?
literal|null
else|:
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|parentNodeNames
argument_list|)
expr_stmt|;
name|this
operator|.
name|parentNodeTypes
operator|=
name|parentNodeTypes
operator|==
literal|null
condition|?
literal|null
else|:
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|parentNodeTypes
argument_list|)
expr_stmt|;
name|this
operator|.
name|propertyNames
operator|=
name|propertyNames
operator|==
literal|null
condition|?
literal|null
else|:
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|propertyNames
argument_list|)
expr_stmt|;
name|this
operator|.
name|allNodeTypes
operator|=
name|allNodeTypes
operator|==
literal|null
condition|?
literal|null
else|:
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|allNodeTypes
argument_list|)
expr_stmt|;
name|boolean
name|hitsMaxPathDepth
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|parentPaths
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|aPath
range|:
name|parentPaths
control|)
block|{
if|if
condition|(
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|aPath
argument_list|)
operator|>=
name|maxPathDepth
condition|)
block|{
name|hitsMaxPathDepth
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
name|this
operator|.
name|hitsMaxPathDepth
operator|=
name|hitsMaxPathDepth
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ChangeSet{paths[maxDepth:"
operator|+
name|maxPathDepth
operator|+
literal|"]="
operator|+
name|parentPaths
operator|+
literal|", propertyNames="
operator|+
name|propertyNames
operator|+
literal|", parentNodeNames="
operator|+
name|parentNodeNames
operator|+
literal|", parentNodeTypes="
operator|+
name|parentNodeTypes
operator|+
literal|", allNodeTypes="
operator|+
name|allNodeTypes
operator|+
literal|", any overflow: "
operator|+
name|anyOverflow
argument_list|()
operator|+
literal|", hits max path depth: "
operator|+
name|hitsMaxPathDepth
operator|+
literal|"}"
return|;
block|}
specifier|public
name|boolean
name|doesHitMaxPathDepth
parameter_list|()
block|{
return|return
name|hitsMaxPathDepth
return|;
block|}
annotation|@
name|CheckForNull
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getParentPaths
parameter_list|()
block|{
return|return
name|parentPaths
return|;
block|}
annotation|@
name|CheckForNull
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getParentNodeNames
parameter_list|()
block|{
return|return
name|parentNodeNames
return|;
block|}
annotation|@
name|CheckForNull
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getParentNodeTypes
parameter_list|()
block|{
return|return
name|parentNodeTypes
return|;
block|}
annotation|@
name|CheckForNull
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getPropertyNames
parameter_list|()
block|{
return|return
name|propertyNames
return|;
block|}
specifier|public
name|int
name|getMaxPrefilterPathDepth
parameter_list|()
block|{
return|return
name|maxPathDepth
return|;
block|}
annotation|@
name|CheckForNull
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAllNodeTypes
parameter_list|()
block|{
return|return
name|allNodeTypes
return|;
block|}
specifier|public
name|boolean
name|anyOverflow
parameter_list|()
block|{
return|return
name|getAllNodeTypes
argument_list|()
operator|==
literal|null
operator|||
name|getParentNodeNames
argument_list|()
operator|==
literal|null
operator|||
name|getParentNodeTypes
argument_list|()
operator|==
literal|null
operator|||
name|getParentPaths
argument_list|()
operator|==
literal|null
operator|||
name|getPropertyNames
argument_list|()
operator|==
literal|null
return|;
block|}
comment|//~---------------------------------------------------< equals/hashcode>
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|ChangeSet
name|changeSet
init|=
operator|(
name|ChangeSet
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|maxPathDepth
operator|!=
name|changeSet
operator|.
name|maxPathDepth
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|parentPaths
operator|!=
literal|null
condition|?
operator|!
name|parentPaths
operator|.
name|equals
argument_list|(
name|changeSet
operator|.
name|parentPaths
argument_list|)
else|:
name|changeSet
operator|.
name|parentPaths
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|parentNodeNames
operator|!=
literal|null
condition|?
operator|!
name|parentNodeNames
operator|.
name|equals
argument_list|(
name|changeSet
operator|.
name|parentNodeNames
argument_list|)
else|:
name|changeSet
operator|.
name|parentNodeNames
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|parentNodeTypes
operator|!=
literal|null
condition|?
operator|!
name|parentNodeTypes
operator|.
name|equals
argument_list|(
name|changeSet
operator|.
name|parentNodeTypes
argument_list|)
else|:
name|changeSet
operator|.
name|parentNodeTypes
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|propertyNames
operator|!=
literal|null
condition|?
operator|!
name|propertyNames
operator|.
name|equals
argument_list|(
name|changeSet
operator|.
name|propertyNames
argument_list|)
else|:
name|changeSet
operator|.
name|propertyNames
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|allNodeTypes
operator|!=
literal|null
condition|?
name|allNodeTypes
operator|.
name|equals
argument_list|(
name|changeSet
operator|.
name|allNodeTypes
argument_list|)
else|:
name|changeSet
operator|.
name|allNodeTypes
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
comment|//~----------------------------------------------------< json support>
specifier|public
name|String
name|asString
parameter_list|()
block|{
name|JsopWriter
name|json
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|json
operator|.
name|object
argument_list|()
expr_stmt|;
name|json
operator|.
name|key
argument_list|(
literal|"maxPathDepth"
argument_list|)
operator|.
name|value
argument_list|(
name|maxPathDepth
argument_list|)
expr_stmt|;
name|addToJson
argument_list|(
name|json
argument_list|,
literal|"parentPaths"
argument_list|,
name|parentPaths
argument_list|)
expr_stmt|;
name|addToJson
argument_list|(
name|json
argument_list|,
literal|"parentNodeNames"
argument_list|,
name|parentNodeNames
argument_list|)
expr_stmt|;
name|addToJson
argument_list|(
name|json
argument_list|,
literal|"parentNodeTypes"
argument_list|,
name|parentNodeTypes
argument_list|)
expr_stmt|;
name|addToJson
argument_list|(
name|json
argument_list|,
literal|"propertyNames"
argument_list|,
name|propertyNames
argument_list|)
expr_stmt|;
name|addToJson
argument_list|(
name|json
argument_list|,
literal|"allNodeTypes"
argument_list|,
name|allNodeTypes
argument_list|)
expr_stmt|;
name|json
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|json
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|ChangeSet
name|fromString
parameter_list|(
name|String
name|json
parameter_list|)
block|{
name|JsopReader
name|reader
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|int
name|maxPathDepth
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parentPaths
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parentNodeNames
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parentNodeTypes
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|propertyNames
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allNodeTypes
init|=
literal|null
decl_stmt|;
name|reader
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|reader
operator|.
name|matches
argument_list|(
literal|'}'
argument_list|)
condition|)
block|{
do|do
block|{
name|String
name|name
init|=
name|reader
operator|.
name|readString
argument_list|()
decl_stmt|;
name|reader
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"maxPathDepth"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|maxPathDepth
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|reader
operator|.
name|read
argument_list|(
name|JsopReader
operator|.
name|NUMBER
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|data
init|=
name|readArrayAsSet
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"parentPaths"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|parentPaths
operator|=
name|data
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"parentNodeNames"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|parentNodeNames
operator|=
name|data
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"parentNodeTypes"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|parentNodeTypes
operator|=
name|data
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"propertyNames"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|propertyNames
operator|=
name|data
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"allNodeTypes"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|allNodeTypes
operator|=
name|data
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|reader
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
condition|)
do|;
name|reader
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|read
argument_list|(
name|JsopReader
operator|.
name|END
argument_list|)
expr_stmt|;
return|return
operator|new
name|ChangeSet
argument_list|(
name|maxPathDepth
argument_list|,
name|parentPaths
argument_list|,
name|parentNodeNames
argument_list|,
name|parentNodeTypes
argument_list|,
name|propertyNames
argument_list|,
name|allNodeTypes
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|readArrayAsSet
parameter_list|(
name|JsopReader
name|reader
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|values
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|reader
operator|.
name|read
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
for|for
control|(
name|boolean
name|first
init|=
literal|true
init|;
operator|!
name|reader
operator|.
name|matches
argument_list|(
literal|']'
argument_list|)
condition|;
name|first
operator|=
literal|false
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|reader
operator|.
name|read
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|values
operator|.
name|add
argument_list|(
name|reader
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
specifier|private
specifier|static
name|void
name|addToJson
parameter_list|(
name|JsopWriter
name|json
parameter_list|,
name|String
name|name
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|json
operator|.
name|key
argument_list|(
name|name
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|v
range|:
name|values
control|)
block|{
name|json
operator|.
name|value
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
name|json
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

