begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * Represents a counted reference to a closeable object.  *<p>  * This class enables reference counting for an instance. The instance should  * always be accessed through a reference ({@link #get()}), which guarantees  * that the underlying instance remains live during its usage.  *<p>  * When a reference is not needed, it should be closed. If the closed reference  * is the last reference to the underlying object, the the underlying object is  * closed. If other references to the underlying object are around, the object  * is kept alive.  *<p>  * Given a reference to an object, it is possible to create a new reference to  * it using the {@link #reference()} method.  *<p>  * References are thread safe. This allows to safely share an object between  * multiple threads. Every thread gets its own reference to the same underlying  * object, and closes it when the reference is not needed anymore. The  * underlying object will automatically be closed by the last thread using the  * resource.  *  * @param<T> The type of the underlying object.  */
end_comment

begin_class
class|class
name|Reference
parameter_list|<
name|T
extends|extends
name|Closeable
parameter_list|>
implements|implements
name|Closeable
block|{
comment|/**      * Create a new reference to an underlying object.      *      * @param instance The underlying object.      * @param<T>      The type of the underlying object.      * @return An instance of {@link Reference}.      */
specifier|static
parameter_list|<
name|T
extends|extends
name|Closeable
parameter_list|>
name|Reference
argument_list|<
name|T
argument_list|>
name|of
parameter_list|(
specifier|final
name|T
name|instance
parameter_list|)
block|{
return|return
operator|new
name|Reference
argument_list|<>
argument_list|(
name|checkNotNull
argument_list|(
name|instance
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|AtomicInteger
name|references
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|T
name|instance
decl_stmt|;
specifier|private
name|Reference
parameter_list|(
name|T
name|instance
parameter_list|)
block|{
name|this
operator|.
name|instance
operator|=
name|instance
expr_stmt|;
block|}
comment|/**      * Get the underlying object referenced from this instance.      *      * @return The underlying object.      */
specifier|public
name|T
name|get
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
comment|/**      * Create a new reference to the underlying object.      *<p>      * The instance must be explicitly closed for the underlying object to be      * closed. Failing to close all the references prevents the underlying      * object from being closed.      *      * @return An instance of {@link Reference}.      */
specifier|public
name|Reference
argument_list|<
name|T
argument_list|>
name|reference
parameter_list|()
block|{
name|references
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Disposes this reference. If this instance is the last reference to the      * underlying object, the underlying object will be disposed of as well.      *      * @throws IOException If an error occurs when closing the underlying      *                     object.      */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|references
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|instance
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

