begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|ConfigurationParametersTest
block|{
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{}
annotation|@
name|Test
specifier|public
name|void
name|testCreation
parameter_list|()
block|{
name|ConfigurationParameters
name|params
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|params
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|params
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|params
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreationFromNull
parameter_list|()
block|{
name|ConfigurationParameters
name|cp
init|=
literal|null
decl_stmt|;
name|ConfigurationParameters
name|params
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
operator|new
name|ConfigurationParameters
index|[]
block|{
name|cp
block|}
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreationFromMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|ConfigurationParameters
name|cp
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|m
operator|.
name|size
argument_list|()
argument_list|,
name|cp
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify shortcut if the passed map is already an instanceof ConfigurationParameters
name|ConfigurationParameters
name|cp2
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|cp
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|cp
argument_list|,
name|cp2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContains
parameter_list|()
block|{
name|ConfigurationParameters
name|params
init|=
name|ConfigurationParameters
operator|.
name|EMPTY
decl_stmt|;
name|assertFalse
argument_list|(
name|params
operator|.
name|contains
argument_list|(
literal|"some"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|params
operator|.
name|contains
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"key1"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"key2"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|params
operator|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|params
operator|.
name|contains
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|params
operator|.
name|contains
argument_list|(
literal|"key2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|params
operator|.
name|contains
argument_list|(
literal|"another"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|params
operator|.
name|contains
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetConfigValue
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"o1"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|ConfigurationParameters
name|options
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"v"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"o1"
argument_list|,
literal|"v2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v2"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"missing"
argument_list|,
literal|"v2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNullableConfigValue
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"o1"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|ConfigurationParameters
name|options
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"v"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"o1"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"o1"
argument_list|,
literal|null
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"o1"
argument_list|,
literal|"v2"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"o1"
argument_list|,
literal|"v2"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v2"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"missing"
argument_list|,
literal|"v2"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v2"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"missing"
argument_list|,
literal|"v2"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"missing"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"missing"
argument_list|,
literal|null
argument_list|,
name|TestObject
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultValue
parameter_list|()
block|{
name|TestObject
name|obj
init|=
operator|new
name|TestObject
argument_list|(
literal|"t"
argument_list|)
decl_stmt|;
name|Integer
name|int1000
init|=
literal|1000
decl_stmt|;
name|ConfigurationParameters
name|options
init|=
name|ConfigurationParameters
operator|.
name|EMPTY
decl_stmt|;
name|assertEquals
argument_list|(
name|obj
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"missing"
argument_list|,
name|obj
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int1000
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"missing"
argument_list|,
name|int1000
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"missing"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"missing"
argument_list|,
literal|null
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|obj
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"missing"
argument_list|,
name|obj
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|obj
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"missing"
argument_list|,
name|obj
argument_list|,
name|TestObject
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int1000
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"missing"
argument_list|,
name|int1000
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArrayDefaultValue
parameter_list|()
block|{
name|TestObject
index|[]
name|testArray
init|=
operator|new
name|TestObject
index|[]
block|{
operator|new
name|TestObject
argument_list|(
literal|"t"
argument_list|)
block|}
decl_stmt|;
name|TestObject
index|[]
name|result
init|=
name|ConfigurationParameters
operator|.
name|EMPTY
operator|.
name|getConfigValue
argument_list|(
literal|"test"
argument_list|,
operator|new
name|TestObject
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|testArray
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
operator|.
name|getConfigValue
argument_list|(
literal|"test"
argument_list|,
name|testArray
argument_list|)
argument_list|)
expr_stmt|;
name|ConfigurationParameters
name|options
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
literal|"test"
argument_list|,
name|testArray
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|testArray
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"test"
argument_list|,
operator|new
name|TestObject
index|[]
block|{
operator|new
name|TestObject
argument_list|(
literal|"s"
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArrayDefaultValue2
parameter_list|()
block|{
name|TestObject
index|[]
name|testArray
init|=
operator|new
name|TestObject
index|[]
block|{
operator|new
name|TestObject
argument_list|(
literal|"t"
argument_list|)
block|}
decl_stmt|;
name|TestObject
index|[]
name|result
init|=
name|ConfigurationParameters
operator|.
name|EMPTY
operator|.
name|getConfigValue
argument_list|(
literal|"test"
argument_list|,
operator|new
name|TestObject
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|testArray
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
operator|.
name|getConfigValue
argument_list|(
literal|"test"
argument_list|,
name|testArray
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|testArray
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
operator|.
name|getConfigValue
argument_list|(
literal|"test"
argument_list|,
name|testArray
argument_list|,
name|TestObject
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConfigurationParameters
name|options
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
literal|"test"
argument_list|,
name|testArray
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|testArray
argument_list|,
operator|(
name|TestObject
index|[]
operator|)
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|testArray
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|,
name|TestObject
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|testArray
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"test"
argument_list|,
operator|new
name|TestObject
index|[]
block|{
operator|new
name|TestObject
argument_list|(
literal|"s"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|testArray
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"test"
argument_list|,
operator|new
name|TestObject
index|[]
block|{
operator|new
name|TestObject
argument_list|(
literal|"s"
argument_list|)
block|}
argument_list|,
name|TestObject
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCollectionAsArray
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|testArray
init|=
block|{
literal|"t"
block|}
decl_stmt|;
name|ConfigurationParameters
name|options
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
literal|"test"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|testArray
argument_list|)
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|testArray
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConversion
parameter_list|()
block|{
name|TestObject
name|testObject
init|=
operator|new
name|TestObject
argument_list|(
literal|"t"
argument_list|)
decl_stmt|;
name|Integer
name|int1000
init|=
literal|1000
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"TEST"
argument_list|,
name|testObject
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"String"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"Int2"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"Int3"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"time0"
argument_list|,
literal|"1s"
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"time1"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|ConfigurationParameters
name|options
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testObject
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"TEST"
argument_list|,
name|testObject
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"t"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"TEST"
argument_list|,
literal|"defaultString"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|1000
operator|==
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"String"
argument_list|,
literal|10
argument_list|,
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|1000
operator|==
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"String"
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int1000
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"String"
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Long
argument_list|(
literal|1000
argument_list|)
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"String"
argument_list|,
literal|10l
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1000"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"String"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int1000
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"Int2"
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1000"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"Int2"
argument_list|,
literal|"1000"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int1000
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"Int3"
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1000"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"Int3"
argument_list|,
literal|"1000"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ConfigurationParameters
operator|.
name|Milliseconds
operator|.
name|of
argument_list|(
literal|1000
argument_list|)
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"time0"
argument_list|,
name|ConfigurationParameters
operator|.
name|Milliseconds
operator|.
name|NULL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ConfigurationParameters
operator|.
name|Milliseconds
operator|.
name|of
argument_list|(
literal|1000
argument_list|)
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"time1"
argument_list|,
name|ConfigurationParameters
operator|.
name|Milliseconds
operator|.
name|NULL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConversion2
parameter_list|()
block|{
name|TestObject
name|testObject
init|=
operator|new
name|TestObject
argument_list|(
literal|"t"
argument_list|)
decl_stmt|;
name|Integer
name|int1000
init|=
literal|1000
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"TEST"
argument_list|,
name|testObject
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"String"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"Int2"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"Int3"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|ConfigurationParameters
name|options
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"TEST"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"TEST"
argument_list|,
literal|null
argument_list|,
name|TestObject
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testObject
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"TEST"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testObject
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"TEST"
argument_list|,
literal|null
argument_list|,
name|TestObject
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testObject
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"TEST"
argument_list|,
name|testObject
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testObject
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"TEST"
argument_list|,
name|testObject
argument_list|,
name|TestObject
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"t"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"TEST"
argument_list|,
literal|"defaultString"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"t"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"TEST"
argument_list|,
literal|"defaultString"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1000"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"String"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1000"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"String"
argument_list|,
literal|null
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int1000
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"String"
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int1000
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"String"
argument_list|,
literal|10
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Long
argument_list|(
literal|1000
argument_list|)
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"String"
argument_list|,
literal|10l
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Long
argument_list|(
literal|1000
argument_list|)
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"String"
argument_list|,
literal|10l
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1000"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"String"
argument_list|,
literal|"10"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1000"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"String"
argument_list|,
literal|"10"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int1000
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"Int2"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int1000
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"Int2"
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1000"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"Int2"
argument_list|,
literal|"1000"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"Int3"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int1000
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"Int3"
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1000"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"Int3"
argument_list|,
literal|"1000"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImpossibleConversion
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"string"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"obj"
argument_list|,
operator|new
name|TestObject
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|ConfigurationParameters
name|options
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|impossible
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
argument_list|()
decl_stmt|;
name|impossible
operator|.
name|put
argument_list|(
literal|"string"
argument_list|,
name|TestObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|impossible
operator|.
name|put
argument_list|(
literal|"string"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|impossible
operator|.
name|put
argument_list|(
literal|"string"
argument_list|,
name|Calendar
operator|.
name|class
argument_list|)
expr_stmt|;
name|impossible
operator|.
name|put
argument_list|(
literal|"obj"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|impossible
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
name|TestObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|impossible
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
name|Calendar
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|impossible
operator|.
name|keySet
argument_list|()
control|)
block|{
try|try
block|{
name|options
operator|.
name|getConfigValue
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|impossible
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Impossible conversion for "
operator|+
name|key
operator|+
literal|" to "
operator|+
name|impossible
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConversionToSet
parameter_list|()
block|{
name|String
index|[]
name|stringArray
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|stringSet
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|stringArray
argument_list|)
decl_stmt|;
name|TestObject
index|[]
name|testObjectArray
init|=
operator|new
name|TestObject
index|[]
block|{
operator|new
name|TestObject
argument_list|(
literal|"a"
argument_list|)
block|,
operator|new
name|TestObject
argument_list|(
literal|"b"
argument_list|)
block|}
decl_stmt|;
name|Set
argument_list|<
name|TestObject
argument_list|>
name|testObjectSet
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|testObjectArray
argument_list|)
decl_stmt|;
comment|// map of config value (key) and expected result set.
name|Map
argument_list|<
name|Object
argument_list|,
name|Set
argument_list|>
name|configValues
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Set
argument_list|>
argument_list|()
decl_stmt|;
name|configValues
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|configValues
operator|.
name|put
argument_list|(
name|stringArray
argument_list|,
name|stringSet
argument_list|)
expr_stmt|;
name|configValues
operator|.
name|put
argument_list|(
name|stringSet
argument_list|,
name|stringSet
argument_list|)
expr_stmt|;
name|configValues
operator|.
name|put
argument_list|(
name|testObjectArray
argument_list|,
name|testObjectSet
argument_list|)
expr_stmt|;
name|configValues
operator|.
name|put
argument_list|(
name|testObjectSet
argument_list|,
name|testObjectSet
argument_list|)
expr_stmt|;
name|configValues
operator|.
name|put
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|configValues
operator|.
name|put
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|configValues
operator|.
name|put
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|configValues
operator|.
name|put
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|configValues
operator|.
name|put
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|defaultStrings
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"abc"
argument_list|,
literal|"def"
argument_list|,
literal|"ghi"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|TestObject
argument_list|>
name|defaultObjects
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|TestObject
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
operator|new
name|TestObject
argument_list|(
literal|"def"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|configValues
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ConfigurationParameters
name|config
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|ConfigurationParameters
condition|)
block|{
name|config
operator|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
operator|(
name|ConfigurationParameters
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
literal|"key"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|Set
name|expected
init|=
name|configValues
operator|.
name|get
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"key"
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"key"
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"key"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"key"
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
name|Set
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"key"
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|Set
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"key"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|Set
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// test with default values
if|if
condition|(
operator|!
name|config
operator|.
name|containsKey
argument_list|(
literal|"key"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|defaultStrings
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"key"
argument_list|,
name|defaultStrings
argument_list|,
name|Set
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|defaultObjects
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"key"
argument_list|,
name|defaultObjects
argument_list|,
name|Set
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"key"
argument_list|,
literal|null
argument_list|,
name|Set
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|defaultStrings
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"key"
argument_list|,
name|defaultStrings
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|defaultObjects
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"key"
argument_list|,
name|defaultObjects
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"key"
argument_list|,
name|defaultStrings
argument_list|,
name|Set
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"key"
argument_list|,
name|defaultObjects
argument_list|,
name|Set
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"key"
argument_list|,
literal|null
argument_list|,
name|Set
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"key"
argument_list|,
name|defaultStrings
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"key"
argument_list|,
name|defaultObjects
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// non existing kez with default values
name|assertEquals
argument_list|(
name|defaultStrings
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"nonexisting"
argument_list|,
name|defaultStrings
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|defaultStrings
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"nonexisting"
argument_list|,
name|defaultStrings
argument_list|,
name|Set
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|defaultObjects
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"nonexisting"
argument_list|,
name|defaultObjects
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|defaultObjects
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"nonexisting"
argument_list|,
name|defaultObjects
argument_list|,
name|Set
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConversionToStringArray
parameter_list|()
block|{
name|String
index|[]
name|stringArray
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|stringSet
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|stringArray
argument_list|)
decl_stmt|;
name|TestObject
index|[]
name|testObjectArray
init|=
operator|new
name|TestObject
index|[]
block|{
operator|new
name|TestObject
argument_list|(
literal|"a"
argument_list|)
block|,
operator|new
name|TestObject
argument_list|(
literal|"b"
argument_list|)
block|}
decl_stmt|;
name|Set
argument_list|<
name|TestObject
argument_list|>
name|testObjectSet
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|testObjectArray
argument_list|)
decl_stmt|;
name|String
index|[]
name|defaultStrings
init|=
operator|new
name|String
index|[]
block|{
literal|"abc"
block|,
literal|"def"
block|,
literal|"ghi"
block|}
decl_stmt|;
comment|// map of config value (key) and expected result set.
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
index|[]
argument_list|>
name|configValues
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|configValues
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
argument_list|)
expr_stmt|;
name|configValues
operator|.
name|put
argument_list|(
name|stringArray
argument_list|,
name|stringArray
argument_list|)
expr_stmt|;
name|configValues
operator|.
name|put
argument_list|(
name|stringSet
argument_list|,
name|stringArray
argument_list|)
expr_stmt|;
name|configValues
operator|.
name|put
argument_list|(
name|testObjectArray
argument_list|,
name|stringArray
argument_list|)
expr_stmt|;
name|configValues
operator|.
name|put
argument_list|(
name|testObjectSet
argument_list|,
name|stringArray
argument_list|)
expr_stmt|;
name|configValues
operator|.
name|put
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|configValues
operator|.
name|put
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|configValues
operator|.
name|put
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|configValues
operator|.
name|put
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|configValues
operator|.
name|put
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|configValues
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ConfigurationParameters
name|config
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|ConfigurationParameters
condition|)
block|{
name|config
operator|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
operator|(
name|ConfigurationParameters
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
literal|"key"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|Object
index|[]
name|expected
init|=
name|configValues
operator|.
name|get
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"key"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"key"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// test with default values
if|if
condition|(
operator|!
name|config
operator|.
name|containsKey
argument_list|(
literal|"key"
argument_list|)
condition|)
block|{
name|assertArrayEquals
argument_list|(
name|defaultStrings
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"key"
argument_list|,
name|defaultStrings
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|null
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"key"
argument_list|,
literal|null
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|defaultStrings
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"key"
argument_list|,
name|defaultStrings
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"key"
argument_list|,
name|defaultStrings
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"key"
argument_list|,
literal|null
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"key"
argument_list|,
name|defaultStrings
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// non existing kez with default values
name|assertArrayEquals
argument_list|(
name|defaultStrings
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"nonexisting"
argument_list|,
name|defaultStrings
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|defaultStrings
argument_list|,
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"nonexisting"
argument_list|,
name|defaultStrings
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullValue
parameter_list|()
block|{
name|ConfigurationParameters
name|options
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"test"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|TestObject
name|to
init|=
operator|new
name|TestObject
argument_list|(
literal|"t"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|to
argument_list|,
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"test"
argument_list|,
name|to
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"test"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullValue2
parameter_list|()
block|{
name|ConfigurationParameters
name|options
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|,
name|TestObject
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"test"
argument_list|,
literal|"value"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"test"
argument_list|,
literal|"value"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"test"
argument_list|,
operator|new
name|TestObject
argument_list|(
literal|"t"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|options
operator|.
name|getConfigValue
argument_list|(
literal|"test"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDurationParser
parameter_list|()
block|{
name|assertNull
argument_list|(
name|ConfigurationParameters
operator|.
name|Milliseconds
operator|.
name|of
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ConfigurationParameters
operator|.
name|Milliseconds
operator|.
name|of
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ConfigurationParameters
operator|.
name|Milliseconds
operator|.
name|of
argument_list|(
literal|"1"
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ConfigurationParameters
operator|.
name|Milliseconds
operator|.
name|of
argument_list|(
literal|"1ms"
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ConfigurationParameters
operator|.
name|Milliseconds
operator|.
name|of
argument_list|(
literal|"  1ms"
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ConfigurationParameters
operator|.
name|Milliseconds
operator|.
name|of
argument_list|(
literal|"  1ms   "
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ConfigurationParameters
operator|.
name|Milliseconds
operator|.
name|of
argument_list|(
literal|"  1ms  foobar"
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|ConfigurationParameters
operator|.
name|Milliseconds
operator|.
name|of
argument_list|(
literal|"1s"
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1500
argument_list|,
name|ConfigurationParameters
operator|.
name|Milliseconds
operator|.
name|of
argument_list|(
literal|"1.5s"
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1500
argument_list|,
name|ConfigurationParameters
operator|.
name|Milliseconds
operator|.
name|of
argument_list|(
literal|"1s 500ms"
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
operator|*
literal|1000
argument_list|,
name|ConfigurationParameters
operator|.
name|Milliseconds
operator|.
name|of
argument_list|(
literal|"1m"
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|90
operator|*
literal|1000
argument_list|,
name|ConfigurationParameters
operator|.
name|Milliseconds
operator|.
name|of
argument_list|(
literal|"1m30s"
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
operator|*
literal|60
operator|*
literal|1000
operator|+
literal|90
operator|*
literal|1000
argument_list|,
name|ConfigurationParameters
operator|.
name|Milliseconds
operator|.
name|of
argument_list|(
literal|"1h1m30s"
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|36
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
operator|+
literal|60
operator|*
literal|60
operator|*
literal|1000
operator|+
literal|90
operator|*
literal|1000
argument_list|,
name|ConfigurationParameters
operator|.
name|Milliseconds
operator|.
name|of
argument_list|(
literal|"1.5d1h1m30s"
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|TestObject
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
name|TestObject
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
return|return
name|object
operator|==
name|this
operator|||
name|object
operator|instanceof
name|TestObject
operator|&&
name|name
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|TestObject
operator|)
name|object
operator|)
operator|.
name|name
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

