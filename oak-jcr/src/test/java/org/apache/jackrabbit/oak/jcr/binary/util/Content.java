begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|util
operator|.
name|BinaryAccessTestUtils
operator|.
name|httpPut
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_class
specifier|public
class|class
name|Content
block|{
specifier|private
specifier|static
specifier|final
name|Charset
name|CHARSET
init|=
name|StandardCharsets
operator|.
name|UTF_8
decl_stmt|;
specifier|private
specifier|final
name|String
name|content
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|bytes
decl_stmt|;
specifier|private
name|Content
parameter_list|(
name|String
name|content
parameter_list|)
block|{
name|this
operator|.
name|content
operator|=
name|content
expr_stmt|;
name|this
operator|.
name|bytes
operator|=
name|content
operator|.
name|getBytes
argument_list|(
name|CHARSET
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Content
name|createRandom
parameter_list|(
name|long
name|size
parameter_list|)
block|{
return|return
operator|new
name|Content
argument_list|(
name|getRandomString
argument_list|(
name|size
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|bytes
operator|.
name|length
return|;
block|}
specifier|public
name|InputStream
name|getStream
parameter_list|()
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|content
return|;
block|}
specifier|public
name|void
name|assertEqualsWith
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|stream
argument_list|,
name|writer
argument_list|,
name|CHARSET
argument_list|)
expr_stmt|;
comment|// converting to string gives us a diff in assertEquals() if it's not equal
name|Assert
operator|.
name|assertEquals
argument_list|(
name|content
argument_list|,
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Uploads this data via HTTP PUT to the provided URI and returns the HTTP status code */
specifier|public
name|int
name|httpPUT
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|httpPut
argument_list|(
name|uri
argument_list|,
name|size
argument_list|()
argument_list|,
name|getStream
argument_list|()
argument_list|)
return|;
block|}
comment|/** Uploads a sub range of this data via HTTP PUT. */
specifier|public
name|int
name|httpPUT
parameter_list|(
name|URI
name|uri
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayInputStream
name|partStream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|,
operator|(
name|int
operator|)
name|offset
argument_list|,
operator|(
name|int
operator|)
name|length
argument_list|)
decl_stmt|;
return|return
name|httpPut
argument_list|(
name|uri
argument_list|,
name|length
argument_list|,
name|partStream
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getRandomString
parameter_list|(
name|long
name|size
parameter_list|)
block|{
comment|//noinspection SpellCheckingInspection
name|String
name|base
init|=
literal|"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ+/"
decl_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|256
condition|)
block|{
specifier|final
name|String
name|str256
init|=
name|getRandomString
argument_list|(
literal|255
argument_list|)
decl_stmt|;
comment|// add newlines for better diffs in failing junit test results
while|while
condition|(
name|size
operator|>=
literal|256
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|str256
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|size
operator|-=
literal|256
expr_stmt|;
block|}
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|str256
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|base
operator|.
name|charAt
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|base
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

