begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|ReadStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * The security context encapsulates all the information needed to make  * read permission checks within a specific subtree.  */
end_comment

begin_class
class|class
name|SecurityContext
block|{
comment|/**      * Underlying root state, used to optimize a common case      * in {@link #equals(Object)}.      */
specifier|private
specifier|final
name|NodeState
name|root
decl_stmt|;
comment|/**      * Immutable tree based on the underlying node state.      */
specifier|private
specifier|final
name|ImmutableTree
name|base
decl_stmt|;
specifier|private
specifier|final
name|PermissionProvider
name|permissionProvider
decl_stmt|;
specifier|private
name|ReadStatus
name|readStatus
decl_stmt|;
name|SecurityContext
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|rootState
parameter_list|,
annotation|@
name|Nonnull
name|PermissionProvider
name|permissionProvider
parameter_list|,
annotation|@
name|Nonnull
name|TreeTypeProvider
name|typeProvider
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|checkNotNull
argument_list|(
name|rootState
argument_list|)
expr_stmt|;
name|this
operator|.
name|base
operator|=
operator|new
name|ImmutableTree
argument_list|(
name|rootState
argument_list|,
name|typeProvider
argument_list|)
expr_stmt|;
name|this
operator|.
name|permissionProvider
operator|=
name|permissionProvider
expr_stmt|;
comment|// calculate the readstatus for the root
name|this
operator|.
name|readStatus
operator|=
name|permissionProvider
operator|.
name|getReadStatus
argument_list|(
name|base
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SecurityContext
parameter_list|(
annotation|@
name|Nonnull
name|SecurityContext
name|parent
parameter_list|,
annotation|@
name|Nonnull
name|String
name|name
parameter_list|,
annotation|@
name|Nonnull
name|NodeState
name|nodeState
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|checkNotNull
argument_list|(
name|parent
argument_list|)
operator|.
name|root
expr_stmt|;
name|this
operator|.
name|base
operator|=
operator|new
name|ImmutableTree
argument_list|(
name|parent
operator|.
name|base
argument_list|,
name|name
argument_list|,
name|nodeState
argument_list|)
expr_stmt|;
name|this
operator|.
name|permissionProvider
operator|=
name|parent
operator|.
name|permissionProvider
expr_stmt|;
if|if
condition|(
name|base
operator|.
name|getType
argument_list|()
operator|==
name|parent
operator|.
name|base
operator|.
name|getType
argument_list|()
condition|)
block|{
name|readStatus
operator|=
name|ReadStatus
operator|.
name|getChildStatus
argument_list|(
name|parent
operator|.
name|readStatus
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|readStatus
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
specifier|synchronized
name|ReadStatus
name|getReadStatus
parameter_list|()
block|{
if|if
condition|(
name|readStatus
operator|==
literal|null
condition|)
block|{
name|readStatus
operator|=
name|permissionProvider
operator|.
name|getReadStatus
argument_list|(
name|base
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|readStatus
return|;
block|}
name|boolean
name|canReadThisNode
parameter_list|()
block|{
return|return
name|getReadStatus
argument_list|()
operator|.
name|includes
argument_list|(
name|ReadStatus
operator|.
name|ALLOW_THIS
argument_list|)
return|;
block|}
name|boolean
name|canReadAllProperties
parameter_list|()
block|{
name|ReadStatus
name|rs
init|=
name|getReadStatus
argument_list|()
decl_stmt|;
return|return
name|rs
operator|.
name|includes
argument_list|(
name|ReadStatus
operator|.
name|ALLOW_PROPERTIES
argument_list|)
return|;
block|}
name|boolean
name|canReadProperty
parameter_list|(
name|PropertyState
name|property
parameter_list|)
block|{
name|ReadStatus
name|rs
init|=
name|getReadStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|includes
argument_list|(
name|ReadStatus
operator|.
name|ALLOW_PROPERTIES
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|rs
operator|.
name|appliesToThis
argument_list|()
condition|)
block|{
name|rs
operator|=
name|permissionProvider
operator|.
name|getReadStatus
argument_list|(
name|base
argument_list|,
name|property
argument_list|)
expr_stmt|;
return|return
name|rs
operator|.
name|isAllow
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
name|boolean
name|canNotReadChildNodes
parameter_list|()
block|{
name|ReadStatus
name|rs
init|=
name|getReadStatus
argument_list|()
decl_stmt|;
return|return
name|rs
operator|.
name|includes
argument_list|(
name|ReadStatus
operator|.
name|DENY_CHILDREN
argument_list|)
return|;
block|}
name|SecurityContext
name|getChildContext
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|state
parameter_list|)
block|{
return|return
operator|new
name|SecurityContext
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|state
argument_list|)
return|;
block|}
comment|//-------------------------------------------------------------< Object>---
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|SecurityContext
condition|)
block|{
name|SecurityContext
name|that
init|=
operator|(
name|SecurityContext
operator|)
name|object
decl_stmt|;
comment|// TODO: We should be able to do this optimization also across
comment|// different revisions (root states) as long as the path,
comment|// the subtree, and any security-related areas like the
comment|// permission store are equal for both states.
return|return
name|root
operator|.
name|equals
argument_list|(
name|that
operator|.
name|root
argument_list|)
operator|&&
name|base
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|base
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

