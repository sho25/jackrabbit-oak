begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|name
operator|.
name|NamespaceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests to assert that all user mgt methods that include name/path conversion  * from JCR to OAK and back are properly implemented.  */
end_comment

begin_class
specifier|public
class|class
name|RemappingTest
extends|extends
name|AbstractUserTest
block|{
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
name|Authorizable
name|authorizable
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|unmappedPaths
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"uTest:property"
argument_list|,
literal|"uTest:node/uTest:property2"
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|mappedPaths
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"my:property"
argument_list|,
literal|"my:node/my:property2"
argument_list|)
decl_stmt|;
specifier|private
name|Value
name|value
decl_stmt|;
specifier|private
name|Value
name|value2
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNamespaceRegistry
argument_list|()
operator|.
name|registerNamespace
argument_list|(
literal|"uTest"
argument_list|,
literal|"http://jackrabbit-oak.apache.org"
argument_list|)
expr_stmt|;
name|value
operator|=
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"uTest:value"
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|value2
operator|=
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"uTest:value2"
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|relPath
range|:
name|unmappedPaths
control|)
block|{
name|user
operator|.
name|setProperty
argument_list|(
name|relPath
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|session
operator|=
name|getHelper
argument_list|()
operator|.
name|getSuperuserSession
argument_list|()
expr_stmt|;
name|session
operator|.
name|setNamespacePrefix
argument_list|(
literal|"my"
argument_list|,
literal|"http://jackrabbit-oak.apache.org"
argument_list|)
expr_stmt|;
name|session
operator|.
name|setNamespacePrefix
argument_list|(
literal|"myRep"
argument_list|,
name|NamespaceConstants
operator|.
name|NAMESPACE_REP
argument_list|)
expr_stmt|;
name|authorizable
operator|=
name|getUserManager
argument_list|(
name|session
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAuthorizablePath
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
operator|.
name|startsWith
argument_list|(
name|UserConstants
operator|.
name|DEFAULT_USER_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|authorizable
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|path
operator|.
name|startsWith
argument_list|(
name|UserConstants
operator|.
name|DEFAULT_USER_PATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAuthorizableByPath
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|getUserManager
argument_list|(
name|session
argument_list|)
operator|.
name|getAuthorizableByPath
argument_list|(
name|authorizable
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAuthorizableByPath2
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|getUserManager
argument_list|(
name|session
argument_list|)
operator|.
name|getAuthorizableByPath
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"invalid path must be detected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindAuthorizable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPropertyNames
parameter_list|()
throws|throws
name|Exception
block|{
name|Iterator
name|it
init|=
name|authorizable
operator|.
name|getPropertyNames
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"my:property"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPropertyNames2
parameter_list|()
throws|throws
name|Exception
block|{
name|Iterator
name|it
init|=
name|authorizable
operator|.
name|getPropertyNames
argument_list|(
literal|"my:node"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"my:property2"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPropertyNames3
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Iterator
name|it
init|=
name|authorizable
operator|.
name|getPropertyNames
argument_list|(
literal|"uTest:node"
argument_list|)
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasProperty
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|relPath
range|:
name|mappedPaths
control|)
block|{
name|assertTrue
argument_list|(
name|authorizable
operator|.
name|hasProperty
argument_list|(
name|relPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasProperty2
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|relPath
range|:
name|unmappedPaths
control|)
block|{
try|try
block|{
name|authorizable
operator|.
name|hasProperty
argument_list|(
name|relPath
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProperty
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|relPath
range|:
name|mappedPaths
control|)
block|{
name|Value
index|[]
name|values
init|=
name|authorizable
operator|.
name|getProperty
argument_list|(
name|relPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"my:value"
argument_list|,
name|values
index|[
literal|0
index|]
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProperty2
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|relPath
range|:
name|unmappedPaths
control|)
block|{
try|try
block|{
name|authorizable
operator|.
name|getProperty
argument_list|(
name|relPath
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetProperty
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|relPath
range|:
name|mappedPaths
control|)
block|{
name|authorizable
operator|.
name|setProperty
argument_list|(
name|relPath
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|authorizable
operator|.
name|setProperty
argument_list|(
name|relPath
argument_list|,
operator|new
name|Value
index|[]
block|{
name|value2
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetProperty2
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|relPath
range|:
name|unmappedPaths
control|)
block|{
try|try
block|{
name|authorizable
operator|.
name|setProperty
argument_list|(
name|relPath
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|authorizable
operator|.
name|setProperty
argument_list|(
name|relPath
argument_list|,
operator|new
name|Value
index|[]
block|{
name|value2
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveProperty
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|relPath
range|:
name|mappedPaths
control|)
block|{
name|authorizable
operator|.
name|removeProperty
argument_list|(
name|relPath
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveProperty2
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|relPath
range|:
name|unmappedPaths
control|)
block|{
try|try
block|{
name|authorizable
operator|.
name|removeProperty
argument_list|(
name|relPath
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
block|}
end_class

end_unit

