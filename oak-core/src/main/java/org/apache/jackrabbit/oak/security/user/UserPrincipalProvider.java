begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|acl
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ResultRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|LongUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|query
operator|.
name|QueryUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|SystemPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|AuthorizableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|util
operator|.
name|UserUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|QueryEngine
operator|.
name|NO_BINDINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_comment
comment|/**  * The {@code PrincipalProviderImpl} is a principal provider implementation  * that operates on principal information read from user information exposed by  * the configured {@link org.apache.jackrabbit.api.security.user.UserManager}.  */
end_comment

begin_class
class|class
name|UserPrincipalProvider
implements|implements
name|PrincipalProvider
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UserPrincipalProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|PARAM_CACHE_EXPIRATION
init|=
literal|"cacheExpiration"
decl_stmt|;
specifier|static
specifier|final
name|long
name|EXPIRATION_NO_CACHE
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|MEMBERSHIP_THRESHOLD
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|Root
name|root
decl_stmt|;
specifier|private
specifier|final
name|UserConfiguration
name|config
decl_stmt|;
specifier|private
specifier|final
name|NamePathMapper
name|namePathMapper
decl_stmt|;
specifier|private
specifier|final
name|UserProvider
name|userProvider
decl_stmt|;
specifier|private
specifier|final
name|MembershipProvider
name|membershipProvider
decl_stmt|;
specifier|private
specifier|final
name|long
name|expiration
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|cacheEnabled
decl_stmt|;
name|UserPrincipalProvider
parameter_list|(
annotation|@
name|Nonnull
name|Root
name|root
parameter_list|,
annotation|@
name|Nonnull
name|UserConfiguration
name|userConfiguration
parameter_list|,
annotation|@
name|Nonnull
name|NamePathMapper
name|namePathMapper
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|userConfiguration
expr_stmt|;
name|this
operator|.
name|namePathMapper
operator|=
name|namePathMapper
expr_stmt|;
name|this
operator|.
name|userProvider
operator|=
operator|new
name|UserProvider
argument_list|(
name|root
argument_list|,
name|config
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|membershipProvider
operator|=
operator|new
name|MembershipProvider
argument_list|(
name|root
argument_list|,
name|config
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|expiration
operator|=
name|config
operator|.
name|getParameters
argument_list|()
operator|.
name|getConfigValue
argument_list|(
name|PARAM_CACHE_EXPIRATION
argument_list|,
name|EXPIRATION_NO_CACHE
argument_list|)
expr_stmt|;
name|cacheEnabled
operator|=
operator|(
name|expiration
operator|>
name|EXPIRATION_NO_CACHE
operator|&&
name|root
operator|.
name|getContentSession
argument_list|()
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getPrincipals
argument_list|()
operator|.
name|contains
argument_list|(
name|SystemPrincipal
operator|.
name|INSTANCE
argument_list|)
operator|)
expr_stmt|;
block|}
comment|//--------------------------------------------------< PrincipalProvider>---
annotation|@
name|Override
specifier|public
name|Principal
name|getPrincipal
parameter_list|(
annotation|@
name|Nonnull
name|String
name|principalName
parameter_list|)
block|{
name|Tree
name|authorizableTree
init|=
name|userProvider
operator|.
name|getAuthorizableByPrincipal
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
name|principalName
argument_list|)
argument_list|)
decl_stmt|;
name|Principal
name|principal
init|=
name|createPrincipal
argument_list|(
name|authorizableTree
argument_list|)
decl_stmt|;
if|if
condition|(
name|principal
operator|==
literal|null
condition|)
block|{
comment|// no such principal or error while accessing principal from user/group
return|return
operator|(
name|EveryonePrincipal
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|principalName
argument_list|)
operator|)
condition|?
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
else|:
literal|null
return|;
block|}
else|else
block|{
return|return
name|principal
return|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Group
argument_list|>
name|getGroupMembership
parameter_list|(
annotation|@
name|Nonnull
name|Principal
name|principal
parameter_list|)
block|{
name|Tree
name|tree
init|=
name|getAuthorizableTree
argument_list|(
name|principal
argument_list|)
decl_stmt|;
if|if
condition|(
name|tree
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|getGroupMembership
argument_list|(
name|tree
argument_list|)
return|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|getPrincipals
parameter_list|(
annotation|@
name|Nonnull
name|String
name|userID
parameter_list|)
block|{
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
operator|new
name|HashSet
argument_list|<
name|Principal
argument_list|>
argument_list|()
decl_stmt|;
name|Tree
name|tree
init|=
name|userProvider
operator|.
name|getAuthorizable
argument_list|(
name|userID
argument_list|)
decl_stmt|;
if|if
condition|(
name|tree
operator|!=
literal|null
operator|&&
name|UserUtil
operator|.
name|isType
argument_list|(
name|tree
argument_list|,
name|AuthorizableType
operator|.
name|USER
argument_list|)
condition|)
block|{
name|Principal
name|userPrincipal
init|=
name|createUserPrincipal
argument_list|(
name|userID
argument_list|,
name|tree
argument_list|)
decl_stmt|;
if|if
condition|(
name|userPrincipal
operator|!=
literal|null
condition|)
block|{
name|principals
operator|.
name|add
argument_list|(
name|userPrincipal
argument_list|)
expr_stmt|;
name|principals
operator|.
name|addAll
argument_list|(
name|getGroupMembership
argument_list|(
name|tree
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|principals
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|findPrincipals
parameter_list|(
specifier|final
name|String
name|nameHint
parameter_list|,
specifier|final
name|int
name|searchType
parameter_list|)
block|{
try|try
block|{
name|AuthorizableType
name|type
init|=
name|AuthorizableType
operator|.
name|getType
argument_list|(
name|searchType
argument_list|)
decl_stmt|;
name|StringBuilder
name|statement
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|QueryUtil
operator|.
name|getSearchRoot
argument_list|(
name|type
argument_list|,
name|config
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"//element(*,"
argument_list|)
operator|.
name|append
argument_list|(
name|QueryUtil
operator|.
name|getNodeTypeName
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
operator|.
name|append
argument_list|(
literal|"[jcr:like(@rep:principalName,'"
argument_list|)
operator|.
name|append
argument_list|(
name|buildSearchPattern
argument_list|(
name|nameHint
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"')]"
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|root
operator|.
name|getQueryEngine
argument_list|()
operator|.
name|executeQuery
argument_list|(
name|statement
operator|.
name|toString
argument_list|()
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
operator|.
name|XPATH
argument_list|,
name|NO_BINDINGS
argument_list|,
name|namePathMapper
operator|.
name|getSessionLocalMappings
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
name|Iterators
operator|.
name|filter
argument_list|(
name|Iterators
operator|.
name|transform
argument_list|(
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|ResultRowToPrincipal
argument_list|()
argument_list|)
argument_list|,
name|Predicates
operator|.
name|notNull
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchesEveryone
argument_list|(
name|nameHint
argument_list|,
name|searchType
argument_list|)
condition|)
block|{
name|principals
operator|=
name|Iterators
operator|.
name|concat
argument_list|(
name|principals
argument_list|,
name|Iterators
operator|.
name|singletonIterator
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Iterators
operator|.
name|filter
argument_list|(
name|principals
argument_list|,
operator|new
name|EveryonePredicate
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|principals
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Iterators
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|findPrincipals
parameter_list|(
name|int
name|searchType
parameter_list|)
block|{
return|return
name|findPrincipals
argument_list|(
literal|null
argument_list|,
name|searchType
argument_list|)
return|;
block|}
comment|//------------------------------------------------------------< private>---
annotation|@
name|CheckForNull
specifier|private
name|Tree
name|getAuthorizableTree
parameter_list|(
annotation|@
name|Nonnull
name|Principal
name|principal
parameter_list|)
block|{
return|return
name|userProvider
operator|.
name|getAuthorizableByPrincipal
argument_list|(
name|principal
argument_list|)
return|;
block|}
annotation|@
name|CheckForNull
specifier|private
name|Principal
name|createPrincipal
parameter_list|(
annotation|@
name|CheckForNull
name|Tree
name|authorizableTree
parameter_list|)
block|{
name|Principal
name|principal
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|authorizableTree
operator|!=
literal|null
condition|)
block|{
name|AuthorizableType
name|type
init|=
name|UserUtil
operator|.
name|getType
argument_list|(
name|authorizableTree
argument_list|)
decl_stmt|;
if|if
condition|(
name|AuthorizableType
operator|.
name|GROUP
operator|==
name|type
condition|)
block|{
name|principal
operator|=
name|createGroupPrincipal
argument_list|(
name|authorizableTree
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|AuthorizableType
operator|.
name|USER
operator|==
name|type
condition|)
block|{
name|principal
operator|=
name|createUserPrincipal
argument_list|(
name|UserUtil
operator|.
name|getAuthorizableId
argument_list|(
name|authorizableTree
argument_list|,
name|type
argument_list|)
argument_list|,
name|authorizableTree
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|principal
return|;
block|}
annotation|@
name|CheckForNull
specifier|private
name|Principal
name|createUserPrincipal
parameter_list|(
annotation|@
name|Nonnull
name|String
name|id
parameter_list|,
annotation|@
name|Nonnull
name|Tree
name|userTree
parameter_list|)
block|{
name|String
name|principalName
init|=
name|getPrincipalName
argument_list|(
name|userTree
argument_list|)
decl_stmt|;
if|if
condition|(
name|principalName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|UserUtil
operator|.
name|isSystemUser
argument_list|(
name|userTree
argument_list|)
condition|)
block|{
return|return
operator|new
name|SystemUserPrincipalImpl
argument_list|(
name|principalName
argument_list|,
name|userTree
argument_list|,
name|namePathMapper
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|UserUtil
operator|.
name|isAdmin
argument_list|(
name|config
operator|.
name|getParameters
argument_list|()
argument_list|,
name|id
argument_list|)
condition|)
block|{
return|return
operator|new
name|AdminPrincipalImpl
argument_list|(
name|principalName
argument_list|,
name|userTree
argument_list|,
name|namePathMapper
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|TreeBasedPrincipal
argument_list|(
name|principalName
argument_list|,
name|userTree
argument_list|,
name|namePathMapper
argument_list|)
return|;
block|}
block|}
annotation|@
name|CheckForNull
specifier|private
name|Group
name|createGroupPrincipal
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|groupTree
parameter_list|)
block|{
name|String
name|principalName
init|=
name|getPrincipalName
argument_list|(
name|groupTree
argument_list|)
decl_stmt|;
if|if
condition|(
name|principalName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|GroupPrincipal
argument_list|(
name|principalName
argument_list|,
name|groupTree
argument_list|)
return|;
block|}
annotation|@
name|CheckForNull
specifier|private
specifier|static
name|String
name|getPrincipalName
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|)
block|{
name|PropertyState
name|principalName
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PRINCIPAL_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|principalName
operator|!=
literal|null
condition|)
block|{
return|return
name|principalName
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
return|;
block|}
else|else
block|{
name|String
name|msg
init|=
literal|"Authorizable without principal name "
operator|+
name|UserUtil
operator|.
name|getAuthorizableId
argument_list|(
name|tree
argument_list|)
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Nonnull
specifier|private
name|Set
argument_list|<
name|Group
argument_list|>
name|getGroupMembership
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|authorizableTree
parameter_list|)
block|{
name|Set
argument_list|<
name|Group
argument_list|>
name|groupPrincipals
init|=
literal|null
decl_stmt|;
name|boolean
name|doCache
init|=
name|cacheEnabled
operator|&&
name|UserUtil
operator|.
name|isType
argument_list|(
name|authorizableTree
argument_list|,
name|AuthorizableType
operator|.
name|USER
argument_list|)
decl_stmt|;
if|if
condition|(
name|doCache
condition|)
block|{
name|groupPrincipals
operator|=
name|readGroupsFromCache
argument_list|(
name|authorizableTree
argument_list|)
expr_stmt|;
block|}
comment|// caching not configured or cache expired: use the membershipProvider to calculate
if|if
condition|(
name|groupPrincipals
operator|==
literal|null
condition|)
block|{
name|groupPrincipals
operator|=
operator|new
name|HashSet
argument_list|<
name|Group
argument_list|>
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|groupPaths
init|=
name|membershipProvider
operator|.
name|getMembership
argument_list|(
name|authorizableTree
argument_list|,
literal|true
argument_list|)
decl_stmt|;
while|while
condition|(
name|groupPaths
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tree
name|groupTree
init|=
name|userProvider
operator|.
name|getAuthorizableByPath
argument_list|(
name|groupPaths
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupTree
operator|!=
literal|null
operator|&&
name|UserUtil
operator|.
name|isType
argument_list|(
name|groupTree
argument_list|,
name|AuthorizableType
operator|.
name|GROUP
argument_list|)
condition|)
block|{
name|Group
name|gr
init|=
name|createGroupPrincipal
argument_list|(
name|groupTree
argument_list|)
decl_stmt|;
if|if
condition|(
name|gr
operator|!=
literal|null
condition|)
block|{
name|groupPrincipals
operator|.
name|add
argument_list|(
name|createGroupPrincipal
argument_list|(
name|groupTree
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// remember the regular groups in case caching is enabled
if|if
condition|(
name|doCache
condition|)
block|{
name|cacheGroups
argument_list|(
name|authorizableTree
argument_list|,
name|groupPrincipals
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add the dynamic everyone principal group which is not included in
comment|// the 'getMembership' call.
name|groupPrincipals
operator|.
name|add
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|groupPrincipals
return|;
block|}
specifier|private
name|void
name|cacheGroups
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|authorizableNode
parameter_list|,
annotation|@
name|Nonnull
name|Set
argument_list|<
name|Group
argument_list|>
name|groupPrincipals
parameter_list|)
block|{
try|try
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|cache
init|=
name|authorizableNode
operator|.
name|getChild
argument_list|(
name|CacheConstants
operator|.
name|REP_CACHE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cache
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|groupPrincipals
operator|.
name|size
argument_list|()
operator|<=
name|MEMBERSHIP_THRESHOLD
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Omit cache creation for user without group membership at "
operator|+
name|authorizableNode
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Create new group membership cache at "
operator|+
name|authorizableNode
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|authorizableNode
argument_list|,
name|CacheConstants
operator|.
name|REP_CACHE
argument_list|,
name|CacheConstants
operator|.
name|NT_REP_CACHE
argument_list|)
expr_stmt|;
block|}
block|}
name|cache
operator|.
name|setProperty
argument_list|(
name|CacheConstants
operator|.
name|REP_EXPIRATION
argument_list|,
name|LongUtils
operator|.
name|calculateExpirationTime
argument_list|(
name|expiration
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|value
init|=
operator|(
name|groupPrincipals
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|""
else|:
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|Iterables
operator|.
name|transform
argument_list|(
name|groupPrincipals
argument_list|,
operator|new
name|Function
argument_list|<
name|Group
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|Group
name|input
parameter_list|)
block|{
return|return
name|Text
operator|.
name|escape
argument_list|(
name|input
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|cache
operator|.
name|setProperty
argument_list|(
name|CacheConstants
operator|.
name|REP_GROUP_PRINCIPAL_NAMES
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|(
name|CacheValidatorProvider
operator|.
name|asCommitAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Cached group membership at "
operator|+
name|authorizableNode
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Failed to cache group membership"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Failed to cache group membership"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|CheckForNull
specifier|private
name|Set
argument_list|<
name|Group
argument_list|>
name|readGroupsFromCache
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|authorizableNode
parameter_list|)
block|{
name|Tree
name|principalCache
init|=
name|authorizableNode
operator|.
name|getChild
argument_list|(
name|CacheConstants
operator|.
name|REP_CACHE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|principalCache
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No group cache at "
operator|+
name|authorizableNode
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|isValidCache
argument_list|(
name|principalCache
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Reading group membership at "
operator|+
name|authorizableNode
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|str
init|=
name|TreeUtil
operator|.
name|getString
argument_list|(
name|principalCache
argument_list|,
name|CacheConstants
operator|.
name|REP_GROUP_PRINCIPAL_NAMES
argument_list|)
decl_stmt|;
if|if
condition|(
name|str
operator|==
literal|null
operator|||
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|Group
argument_list|>
argument_list|(
literal|1
argument_list|)
return|;
block|}
name|Set
argument_list|<
name|Group
argument_list|>
name|groups
init|=
operator|new
name|HashSet
argument_list|<
name|Group
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|Text
operator|.
name|explode
argument_list|(
name|str
argument_list|,
literal|','
argument_list|)
control|)
block|{
specifier|final
name|String
name|name
init|=
name|Text
operator|.
name|unescape
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|groups
operator|.
name|add
argument_list|(
operator|new
name|CachedGroupPrincipal
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|groups
return|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Expired group cache for "
operator|+
name|authorizableNode
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isValidCache
parameter_list|(
name|Tree
name|principalCache
parameter_list|)
block|{
name|long
name|expirationTime
init|=
name|TreeUtil
operator|.
name|getLong
argument_list|(
name|principalCache
argument_list|,
name|CacheConstants
operator|.
name|REP_EXPIRATION
argument_list|,
name|EXPIRATION_NO_CACHE
argument_list|)
decl_stmt|;
name|long
name|now
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
return|return
name|expirationTime
operator|>
name|EXPIRATION_NO_CACHE
operator|&&
name|now
operator|<
name|expirationTime
return|;
block|}
specifier|private
specifier|static
name|String
name|buildSearchPattern
parameter_list|(
name|String
name|nameHint
parameter_list|)
block|{
if|if
condition|(
name|nameHint
operator|==
literal|null
condition|)
block|{
return|return
literal|"%"
return|;
block|}
else|else
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'%'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|nameHint
operator|.
name|replace
argument_list|(
literal|"%"
argument_list|,
literal|"\\%"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"_"
argument_list|,
literal|"\\_"
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'%'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|matchesEveryone
parameter_list|(
name|String
name|nameHint
parameter_list|,
name|int
name|searchType
parameter_list|)
block|{
return|return
name|searchType
operator|!=
name|PrincipalManager
operator|.
name|SEARCH_TYPE_NOT_GROUP
operator|&&
operator|(
name|nameHint
operator|==
literal|null
operator|||
name|EveryonePrincipal
operator|.
name|NAME
operator|.
name|contains
argument_list|(
name|nameHint
argument_list|)
operator|)
return|;
block|}
comment|//--------------------------------------------------------------------------
comment|/**      * Function to covert an authorizable tree (as obtained from the query result) to a principal.      */
specifier|private
specifier|final
class|class
name|ResultRowToPrincipal
implements|implements
name|Function
argument_list|<
name|ResultRow
argument_list|,
name|Principal
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Principal
name|apply
parameter_list|(
annotation|@
name|Nullable
name|ResultRow
name|resultRow
parameter_list|)
block|{
return|return
operator|(
name|resultRow
operator|!=
literal|null
operator|)
condition|?
name|createPrincipal
argument_list|(
name|resultRow
operator|.
name|getTree
argument_list|(
literal|null
argument_list|)
argument_list|)
else|:
literal|null
return|;
block|}
block|}
comment|/**      * Predicate to make sure the everyone principal is only included once in      * the result set.      */
specifier|private
specifier|static
specifier|final
class|class
name|EveryonePredicate
implements|implements
name|Predicate
argument_list|<
name|Principal
argument_list|>
block|{
specifier|private
name|boolean
name|servedEveryone
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|Principal
name|principal
parameter_list|)
block|{
name|String
name|pName
init|=
operator|(
name|principal
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|principal
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|EveryonePrincipal
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|pName
argument_list|)
condition|)
block|{
if|if
condition|(
name|servedEveryone
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|servedEveryone
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
comment|// not everyone
return|return
literal|true
return|;
block|}
block|}
block|}
comment|//--------------------------------------------------------------------------
comment|// Group Principal implementations that retrieve member information on demand
comment|//--------------------------------------------------------------------------
specifier|private
specifier|abstract
class|class
name|BaseGroupPrincipal
extends|extends
name|AbstractGroupPrincipal
block|{
specifier|private
name|UserManager
name|userManager
decl_stmt|;
name|BaseGroupPrincipal
parameter_list|(
annotation|@
name|Nonnull
name|String
name|principalName
parameter_list|,
annotation|@
name|Nonnull
name|Tree
name|groupTree
parameter_list|)
block|{
name|super
argument_list|(
name|principalName
argument_list|,
name|groupTree
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
block|}
name|BaseGroupPrincipal
parameter_list|(
annotation|@
name|Nonnull
name|String
name|principalName
parameter_list|,
annotation|@
name|Nonnull
name|String
name|groupPath
parameter_list|)
block|{
name|super
argument_list|(
name|principalName
argument_list|,
name|groupPath
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|UserManager
name|getUserManager
parameter_list|()
block|{
if|if
condition|(
name|userManager
operator|==
literal|null
condition|)
block|{
name|userManager
operator|=
name|config
operator|.
name|getUserManager
argument_list|(
name|root
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
block|}
return|return
name|userManager
return|;
block|}
annotation|@
name|Override
name|boolean
name|isEveryone
parameter_list|()
block|{
return|return
name|EveryonePrincipal
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
name|boolean
name|isMember
parameter_list|(
annotation|@
name|Nonnull
name|Authorizable
name|authorizable
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
name|g
init|=
name|getGroup
argument_list|()
decl_stmt|;
return|return
name|g
operator|!=
literal|null
operator|&&
name|g
operator|.
name|isMember
argument_list|(
name|authorizable
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|getMembers
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
name|g
init|=
name|getGroup
argument_list|()
decl_stmt|;
return|return
operator|(
name|g
operator|==
literal|null
operator|)
condition|?
name|Iterators
operator|.
expr|<
name|Authorizable
operator|>
name|emptyIterator
argument_list|()
else|:
name|g
operator|.
name|getMembers
argument_list|()
return|;
block|}
annotation|@
name|CheckForNull
specifier|abstract
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
name|getGroup
parameter_list|()
throws|throws
name|RepositoryException
function_decl|;
block|}
comment|/**      * Implementation of {@link AbstractGroupPrincipal} that reads the underlying      * authorizable group lazily in case the group membership must be retrieved.      */
specifier|private
specifier|final
class|class
name|GroupPrincipal
extends|extends
name|BaseGroupPrincipal
block|{
specifier|private
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
name|group
decl_stmt|;
name|GroupPrincipal
parameter_list|(
annotation|@
name|Nonnull
name|String
name|principalName
parameter_list|,
annotation|@
name|Nonnull
name|Tree
name|groupTree
parameter_list|)
block|{
name|super
argument_list|(
name|principalName
argument_list|,
name|groupTree
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
name|getGroup
parameter_list|()
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|Authorizable
name|authorizable
init|=
name|getUserManager
argument_list|()
operator|.
name|getAuthorizable
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|authorizable
operator|!=
literal|null
operator|&&
name|authorizable
operator|.
name|isGroup
argument_list|()
condition|)
block|{
name|group
operator|=
operator|(
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
operator|)
name|authorizable
expr_stmt|;
block|}
block|}
return|return
name|group
return|;
block|}
block|}
specifier|private
specifier|final
class|class
name|CachedGroupPrincipal
extends|extends
name|BaseGroupPrincipal
block|{
specifier|private
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
name|group
decl_stmt|;
name|CachedGroupPrincipal
parameter_list|(
annotation|@
name|Nonnull
name|String
name|principalName
parameter_list|)
block|{
name|super
argument_list|(
name|principalName
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|String
name|getOakPath
parameter_list|()
block|{
name|String
name|groupPath
init|=
name|getPath
argument_list|()
decl_stmt|;
return|return
operator|(
name|groupPath
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|namePathMapper
operator|.
name|getOakPath
argument_list|(
name|getPath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPath
parameter_list|()
block|{
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
name|gr
init|=
name|getGroup
argument_list|()
decl_stmt|;
return|return
operator|(
name|gr
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|gr
operator|.
name|getPath
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to retrieve path from group principal"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
name|getGroup
parameter_list|()
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|Authorizable
name|authorizable
init|=
name|getUserManager
argument_list|()
operator|.
name|getAuthorizable
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|authorizable
operator|!=
literal|null
operator|&&
name|authorizable
operator|.
name|isGroup
argument_list|()
condition|)
block|{
name|group
operator|=
operator|(
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
operator|)
name|authorizable
expr_stmt|;
block|}
block|}
return|return
name|group
return|;
block|}
block|}
block|}
end_class

end_unit

