begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|NotExecutableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|api
operator|.
name|security
operator|.
name|AbstractAccessControlTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_comment
comment|/**  * Testing {@code JackrabbitAccessControlList} functionality exposed by the API.  */
end_comment

begin_class
specifier|public
class|class
name|JackrabbitAccessControlListTest
extends|extends
name|AbstractAccessControlTest
block|{
specifier|private
name|JackrabbitAccessControlList
name|acl
decl_stmt|;
specifier|private
name|Principal
name|testPrincipal
decl_stmt|;
specifier|private
name|Privilege
index|[]
name|testPrivileges
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Node
name|n
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|AccessControlPolicyIterator
name|it
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
name|acl
operator|==
literal|null
condition|)
block|{
name|AccessControlPolicy
name|p
init|=
name|it
operator|.
name|nextAccessControlPolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|instanceof
name|JackrabbitAccessControlList
condition|)
block|{
name|acl
operator|=
operator|(
name|JackrabbitAccessControlList
operator|)
name|p
expr_stmt|;
block|}
block|}
if|if
condition|(
name|acl
operator|==
literal|null
condition|)
block|{
name|superuser
operator|.
name|logout
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|NotExecutableException
argument_list|(
literal|"No JackrabbitAccessControlList to test."
argument_list|)
throw|;
block|}
name|testPrincipal
operator|=
name|getValidPrincipal
argument_list|()
expr_stmt|;
name|testPrivileges
operator|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_ALL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// make sure transient ac-changes are reverted.
name|superuser
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Principal
name|getValidPrincipal
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
if|if
condition|(
operator|!
operator|(
name|superuser
operator|instanceof
name|JackrabbitSession
operator|)
condition|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|()
throw|;
block|}
name|PrincipalManager
name|pMgr
init|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getPrincipalManager
argument_list|()
decl_stmt|;
return|return
name|pMgr
operator|.
name|getEveryone
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRestrictionNames
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|assertNotNull
argument_list|(
name|acl
operator|.
name|getRestrictionNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRestrictionType
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
index|[]
name|names
init|=
name|acl
operator|.
name|getRestrictionNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|int
name|type
init|=
name|acl
operator|.
name|getRestrictionType
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|type
operator|>
name|PropertyType
operator|.
name|UNDEFINED
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testApplicablePolicyIsEmpty
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|acl
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsEmpty
parameter_list|()
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
name|acl
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|acl
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSize
parameter_list|()
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|acl
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntry
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|List
argument_list|<
name|AccessControlEntry
argument_list|>
name|entriesBefore
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|true
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Value
operator|>
name|emptyMap
argument_list|()
argument_list|)
condition|)
block|{
name|AccessControlEntry
index|[]
name|entries
init|=
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
decl_stmt|;
name|AccessControlEntry
name|ace
init|=
literal|null
decl_stmt|;
for|for
control|(
name|AccessControlEntry
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|testPrincipal
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getPrincipal
argument_list|()
argument_list|)
condition|)
block|{
name|ace
operator|=
name|entry
expr_stmt|;
block|}
block|}
name|assertNotNull
argument_list|(
literal|"addEntry was successful -> expected entry for tesPrincipal."
argument_list|,
name|ace
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"addEntry was successful -> at least 1 entry."
argument_list|,
name|entries
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AccessControlEntry
index|[]
name|entries
init|=
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Grant ALL not successful -> entries must not have changed."
argument_list|,
name|entriesBefore
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|entries
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveEntry
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|Principal
name|princ
init|=
name|getValidPrincipal
argument_list|()
decl_stmt|;
name|Privilege
index|[]
name|grPriv
init|=
name|privilegesFromName
argument_list|(
literal|"rep:write"
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|princ
argument_list|,
name|grPriv
argument_list|,
literal|true
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Value
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|AccessControlEntry
index|[]
name|entries
init|=
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|entries
operator|.
name|length
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Grant was both successful -> at least 1 entry."
argument_list|,
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|AccessControlEntry
name|entry
range|:
name|entries
control|)
block|{
name|acl
operator|.
name|removeAccessControlEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|length
operator|=
name|length
operator|-
literal|1
expr_stmt|;
name|assertEquals
argument_list|(
name|length
argument_list|,
name|acl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|length
argument_list|,
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|acl
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see<a href="https://issues.apache.org/jira/browse/OAK-1026">OAK-1026</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testEntryWithAggregatePrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
name|write
init|=
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|Privilege
operator|.
name|JCR_WRITE
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|write
operator|.
name|getAggregatePrivileges
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|AccessControlEntry
index|[]
name|entries
init|=
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|Privilege
index|[]
block|{
name|write
block|}
argument_list|,
name|entries
index|[
literal|0
index|]
operator|.
name|getPrivileges
argument_list|()
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|AccessControlPolicy
name|policy
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|acl
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|entries
operator|=
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|Privilege
index|[]
block|{
name|write
block|}
argument_list|,
name|entries
index|[
literal|0
index|]
operator|.
name|getPrivileges
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see<a href="https://issues.apache.org/jira/browse/OAK-1348">OAK-1348</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testAddEntryWithCustomPrincipalImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|custom
init|=
operator|new
name|Principal
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|testPrincipal
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|custom
argument_list|,
name|testPrivileges
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

