begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ImportUUIDBehavior
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|AuthorizableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Impersonation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|identifier
operator|.
name|IdentifierManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ImportBehavior
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|NodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|PropInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedNodeImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedPropertyImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ReferenceChangeTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|TextValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRINGS
import|;
end_import

begin_comment
comment|/**  * {@code UserImporter} implements both {@code ode>ProtectedPropertyImporter}  * and {@code ProtectedNodeImporter} and provides import facilities for protected  * user and group content defined and used by this user management implementation.<p>  *<p>  * The importer is intended to be used by applications that import user content  * extracted from another repository instance and immediately persist the  * imported content using {@link javax.jcr.Session#save()}. Omitting the  * save call will lead to transient, semi-validated user content and eventually  * to inconsistencies.  *<p>  * Note the following restrictions:  *<ul>  *<li>The importer will only be initialized if the user manager exposed by  * the session is an instance of {@code UserManagerImpl}.  *</li>  *<li>The importer will only be initialized if the editing session starting  * this import is the same as the UserManager's Session instance.  *</li>  *<li>The jcr:uuid property of user and groups is defined to represent the  * hashed authorizable id as calculated by the UserManager. This importer  * is therefore not able to handle imports with  * {@link ImportUUIDBehavior#IMPORT_UUID_CREATE_NEW}.</li>  *<li>Importing user/group nodes outside of the hierarchy defined by the two  * configuration options  * {@link org.apache.jackrabbit.oak.spi.security.user.UserConstants#PARAM_GROUP_PATH}  * and {@link org.apache.jackrabbit.oak.spi.security.user.UserConstants#PARAM_USER_PATH}  * will fail upon {@code Root#commit()}. The same may  * be true in case of {@link ImportUUIDBehavior#IMPORT_UUID_COLLISION_REPLACE_EXISTING}  * inserting the user/group node at some other place in the node hierarchy.</li>  *<li>The same commit hook will make sure that authorizables are never nested  * and are created below a hierarchy of nt:AuthorizableFolder nodes. This isn't  * enforced by means of node type constraints but only by the API. This importer  * itself currently doesn't perform such a validation check.</li>  *<li>Any attempt to import conflicting data will cause the import to fail  * either immediately or upon calling {@link javax.jcr.Session#save()} with the  * following exceptions:  *<ul>  *<li>{@code rep:members} : Group membership</li>  *<li>{@code rep:impersonators} : Impersonators of a User.</li>  *</ul>  * The import behavior of these two properties is defined by the {@link #PARAM_IMPORT_BEHAVIOR}  * configuration parameter, which can be set to  *<ul>  *<li>{@link ImportBehavior#NAME_IGNORE ignore}: A warning is logged.</li>  *<li>{@link ImportBehavior#NAME_BESTEFFORT best effort}: A warning is logged  * and the importer tries to fix the problem.</li>  *<li>{@link ImportBehavior#NAME_ABORT abort}: The import is immediately  * aborted with a ConstraintViolationException. (<strong>default</strong>)</li>  *</ul>  *</li>  *</ul>  */
end_comment

begin_class
class|class
name|UserImporter
implements|implements
name|ProtectedPropertyImporter
implements|,
name|ProtectedNodeImporter
implements|,
name|UserConstants
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UserImporter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|importBehavior
decl_stmt|;
specifier|private
name|JackrabbitSession
name|session
decl_stmt|;
specifier|private
name|Root
name|root
decl_stmt|;
specifier|private
name|NamePathMapper
name|namePathMapper
decl_stmt|;
specifier|private
name|ReferenceChangeTracker
name|referenceTracker
decl_stmt|;
specifier|private
name|UserManagerImpl
name|userManager
decl_stmt|;
specifier|private
name|IdentifierManager
name|identifierManager
decl_stmt|;
specifier|private
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
comment|/**      * Container used to collect group members stored in protected nodes.      */
specifier|private
name|Membership
name|currentMembership
decl_stmt|;
comment|/**      * map holding the processed memberships. this is needed as both, the property and the node importer, can provide      * memberships during processing. if both would be handled only via the reference tracker {@link Membership#process()}      * would remove the members from the property importer.      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Membership
argument_list|>
name|memberships
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Membership
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Temporary store for the pw an imported new user to be able to call      * the creation actions irrespective of the order of protected properties      */
specifier|private
name|String
name|currentPw
decl_stmt|;
comment|/**      * Remember all new principals for impersonation handling.      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Principal
argument_list|>
name|principals
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Principal
argument_list|>
argument_list|()
decl_stmt|;
empty_stmt|;
name|UserImporter
parameter_list|(
name|ConfigurationParameters
name|config
parameter_list|)
block|{
name|String
name|importBehaviorStr
init|=
name|config
operator|.
name|getConfigValue
argument_list|(
name|PARAM_IMPORT_BEHAVIOR
argument_list|,
name|ImportBehavior
operator|.
name|NAME_IGNORE
argument_list|)
decl_stmt|;
name|importBehavior
operator|=
name|ImportBehavior
operator|.
name|valueFromString
argument_list|(
name|importBehaviorStr
argument_list|)
expr_stmt|;
block|}
comment|//----------------------------------------------< ProtectedItemImporter>---
annotation|@
name|Override
specifier|public
name|boolean
name|init
parameter_list|(
name|Session
name|session
parameter_list|,
name|Root
name|root
parameter_list|,
name|NamePathMapper
name|namePathMapper
parameter_list|,
name|boolean
name|isWorkspaceImport
parameter_list|,
name|int
name|uuidBehavior
parameter_list|,
name|ReferenceChangeTracker
name|referenceTracker
parameter_list|,
name|SecurityProvider
name|securityProvider
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|session
operator|instanceof
name|JackrabbitSession
operator|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Importing protected user content requires a JackrabbitSession"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|this
operator|.
name|session
operator|=
operator|(
name|JackrabbitSession
operator|)
name|session
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|namePathMapper
operator|=
name|namePathMapper
expr_stmt|;
name|this
operator|.
name|referenceTracker
operator|=
name|referenceTracker
expr_stmt|;
if|if
condition|(
name|initialized
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Already initialized"
argument_list|)
throw|;
block|}
if|if
condition|(
name|uuidBehavior
operator|==
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"ImportUUIDBehavior.IMPORT_UUID_CREATE_NEW isn't supported when importing users or groups."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|initUserManager
argument_list|(
name|isWorkspaceImport
argument_list|,
name|securityProvider
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|userManager
operator|=
operator|new
name|UserManagerImpl
argument_list|(
name|root
argument_list|,
name|namePathMapper
argument_list|,
name|securityProvider
argument_list|)
expr_stmt|;
name|initialized
operator|=
literal|true
expr_stmt|;
return|return
name|initialized
return|;
block|}
specifier|private
name|boolean
name|initUserManager
parameter_list|(
name|boolean
name|isWorkspaceImport
parameter_list|,
name|SecurityProvider
name|securityProvider
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|isWorkspaceImport
operator|&&
name|session
operator|.
name|getUserManager
argument_list|()
operator|.
name|isAutoSave
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Session import cannot handle user content: UserManager is in autosave mode."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// failed to access user manager or to set the autosave behavior
comment|// -> return false (not initialized) as importer can't operate.
name|log
operator|.
name|error
argument_list|(
literal|"Failed to initialize UserImporter: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|userManager
operator|=
operator|new
name|UserManagerImpl
argument_list|(
name|root
argument_list|,
name|namePathMapper
argument_list|,
name|securityProvider
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// -----------------------------------------< ProtectedPropertyImporter>---
annotation|@
name|Override
specifier|public
name|boolean
name|handlePropInfo
parameter_list|(
name|Tree
name|parent
parameter_list|,
name|PropInfo
name|propInfo
parameter_list|,
name|PropertyDefinition
name|def
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
name|String
name|propName
init|=
name|propInfo
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|isPwdNode
argument_list|(
name|parent
argument_list|)
condition|)
block|{
comment|// overwrite any properties generated underneath the rep:pwd node
comment|// by "UserManagerImpl#setPassword" by the properties defined by
comment|// the XML to be imported. see OAK-1943 for the corresponding discussion.
return|return
name|importPwdNodeProperty
argument_list|(
name|parent
argument_list|,
name|propInfo
argument_list|,
name|def
argument_list|)
return|;
block|}
else|else
block|{
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot handle protected PropInfo "
operator|+
name|propInfo
operator|+
literal|". Node "
operator|+
name|parent
operator|+
literal|" doesn't represent a valid Authorizable."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|REP_AUTHORIZABLE_ID
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|(
name|def
argument_list|,
name|NT_REP_AUTHORIZABLE
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|id
init|=
name|propInfo
operator|.
name|getTextValue
argument_list|()
operator|.
name|getString
argument_list|()
decl_stmt|;
name|Authorizable
name|existing
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|existing
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|parent
operator|.
name|setProperty
argument_list|(
name|REP_AUTHORIZABLE_ID
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AuthorizableExistsException
argument_list|(
name|id
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|REP_PRINCIPAL_NAME
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|(
name|def
argument_list|,
name|NT_REP_AUTHORIZABLE
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|principalName
init|=
name|propInfo
operator|.
name|getTextValue
argument_list|()
operator|.
name|getString
argument_list|()
decl_stmt|;
name|Principal
name|principal
init|=
operator|new
name|PrincipalImpl
argument_list|(
name|principalName
argument_list|)
decl_stmt|;
name|userManager
operator|.
name|checkValidPrincipal
argument_list|(
name|principal
argument_list|,
name|a
operator|.
name|isGroup
argument_list|()
argument_list|)
expr_stmt|;
name|userManager
operator|.
name|setPrincipal
argument_list|(
name|parent
argument_list|,
name|principal
argument_list|)
expr_stmt|;
comment|/*              Remember principal of new user/group for further processing              of impersonators              */
if|if
condition|(
name|principals
operator|==
literal|null
condition|)
block|{
name|principals
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Principal
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|principals
operator|.
name|put
argument_list|(
name|principalName
argument_list|,
name|a
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|REP_PASSWORD
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
if|if
condition|(
name|a
operator|.
name|isGroup
argument_list|()
operator|||
operator|!
name|isValid
argument_list|(
name|def
argument_list|,
name|NT_REP_USER
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unexpected authorizable or definition for property rep:password"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
operator|(
name|User
operator|)
name|a
operator|)
operator|.
name|isSystemUser
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"System users may not have a password set."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|String
name|pw
init|=
name|propInfo
operator|.
name|getTextValue
argument_list|()
operator|.
name|getString
argument_list|()
decl_stmt|;
name|userManager
operator|.
name|setPassword
argument_list|(
name|parent
argument_list|,
name|a
operator|.
name|getID
argument_list|()
argument_list|,
name|pw
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|currentPw
operator|=
name|pw
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|REP_IMPERSONATORS
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
if|if
condition|(
name|a
operator|.
name|isGroup
argument_list|()
operator|||
operator|!
name|isValid
argument_list|(
name|def
argument_list|,
name|MIX_REP_IMPERSONATABLE
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unexpected authorizable or definition for property rep:impersonators"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// since impersonators may be imported later on, postpone processing
comment|// to the end.
comment|// see -> process References
name|referenceTracker
operator|.
name|processedReference
argument_list|(
operator|new
name|Impersonators
argument_list|(
name|a
operator|.
name|getID
argument_list|()
argument_list|,
name|propInfo
operator|.
name|getTextValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|REP_DISABLED
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
if|if
condition|(
name|a
operator|.
name|isGroup
argument_list|()
operator|||
operator|!
name|isValid
argument_list|(
name|def
argument_list|,
name|NT_REP_USER
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unexpected authorizable or definition for property rep:disabled"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
operator|(
operator|(
name|User
operator|)
name|a
operator|)
operator|.
name|disable
argument_list|(
name|propInfo
operator|.
name|getTextValue
argument_list|()
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|REP_MEMBERS
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|a
operator|.
name|isGroup
argument_list|()
operator|||
operator|!
name|isValid
argument_list|(
name|def
argument_list|,
name|NT_REP_MEMBER_REFERENCES
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// since group-members are references to user/groups that potentially
comment|// are to be imported later on -> postpone processing to the end.
comment|// see -> process References
name|getMembership
argument_list|(
name|a
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|addMembers
argument_list|(
name|propInfo
operator|.
name|getTextValues
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// another protected property -> return false
block|}
comment|// neither rep:pwd nor authorizable node -> not covered by this importer.
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertiesCompleted
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|protectedParent
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|protectedParent
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
comment|// not an authorizable
return|return;
block|}
comment|// make sure the authorizable ID property is always set even if the
comment|// authorizable defined by the imported XML didn't provide rep:authorizableID
if|if
condition|(
operator|!
name|protectedParent
operator|.
name|hasProperty
argument_list|(
name|REP_AUTHORIZABLE_ID
argument_list|)
condition|)
block|{
name|protectedParent
operator|.
name|setProperty
argument_list|(
name|REP_AUTHORIZABLE_ID
argument_list|,
name|a
operator|.
name|getID
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
comment|/*         Execute authorizable actions for a NEW user at this point after         having set the password and the principal name (all protected properties         have been processed now).         */
if|if
condition|(
name|protectedParent
operator|.
name|getStatus
argument_list|()
operator|==
name|Tree
operator|.
name|Status
operator|.
name|NEW
condition|)
block|{
if|if
condition|(
name|a
operator|.
name|isGroup
argument_list|()
condition|)
block|{
name|userManager
operator|.
name|onCreate
argument_list|(
operator|(
name|Group
operator|)
name|a
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|userManager
operator|.
name|onCreate
argument_list|(
operator|(
name|User
operator|)
name|a
argument_list|,
name|currentPw
argument_list|)
expr_stmt|;
block|}
block|}
name|currentPw
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|processReferences
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
comment|// add all collected memberships to the reference tracker.
for|for
control|(
name|Membership
name|m
range|:
name|memberships
operator|.
name|values
argument_list|()
control|)
block|{
name|referenceTracker
operator|.
name|processedReference
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|memberships
operator|.
name|clear
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|processed
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Object
argument_list|>
name|it
init|=
name|referenceTracker
operator|.
name|getProcessedReferences
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|reference
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|reference
operator|instanceof
name|Membership
condition|)
block|{
operator|(
operator|(
name|Membership
operator|)
name|reference
operator|)
operator|.
name|process
argument_list|()
expr_stmt|;
name|processed
operator|.
name|add
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|reference
operator|instanceof
name|Impersonators
condition|)
block|{
operator|(
operator|(
name|Impersonators
operator|)
name|reference
operator|)
operator|.
name|process
argument_list|()
expr_stmt|;
name|processed
operator|.
name|add
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
comment|// successfully processed this entry of the reference tracker
comment|// -> remove from the reference tracker.
name|referenceTracker
operator|.
name|removeReferences
argument_list|(
name|processed
argument_list|)
expr_stmt|;
block|}
comment|// ---------------------------------------------< ProtectedNodeImporter>---
annotation|@
name|Override
specifier|public
name|boolean
name|start
parameter_list|(
name|Tree
name|protectedParent
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|isMemberNode
argument_list|(
name|protectedParent
argument_list|)
condition|)
block|{
name|Tree
name|groupTree
init|=
name|protectedParent
decl_stmt|;
while|while
condition|(
name|isMemberNode
argument_list|(
name|groupTree
argument_list|)
operator|&&
operator|!
name|groupTree
operator|.
name|isRoot
argument_list|()
condition|)
block|{
name|groupTree
operator|=
name|groupTree
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|Authorizable
name|auth
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|groupTree
argument_list|)
decl_stmt|;
if|if
condition|(
name|auth
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Cannot handle protected node "
operator|+
name|protectedParent
operator|+
literal|". It nor one of its parents represent a valid Authorizable."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|currentMembership
operator|=
name|getMembership
argument_list|(
name|auth
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|isMemberReferencesListNode
argument_list|(
name|protectedParent
argument_list|)
condition|)
block|{
name|Authorizable
name|auth
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|protectedParent
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|auth
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Cannot handle protected node "
operator|+
name|protectedParent
operator|+
literal|". It nor one of its parents represent a valid Authorizable."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|currentMembership
operator|=
name|getMembership
argument_list|(
name|auth
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// else: parent node is not of type rep:Members or rep:MemberReferencesList
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startChildInfo
parameter_list|(
name|NodeInfo
name|childInfo
parameter_list|,
name|List
argument_list|<
name|PropInfo
argument_list|>
name|propInfos
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkNotNull
argument_list|(
name|currentMembership
argument_list|)
expr_stmt|;
name|String
name|ntName
init|=
name|childInfo
operator|.
name|getPrimaryTypeName
argument_list|()
decl_stmt|;
comment|//noinspection deprecation
if|if
condition|(
name|NT_REP_MEMBERS
operator|.
name|equals
argument_list|(
name|ntName
argument_list|)
condition|)
block|{
for|for
control|(
name|PropInfo
name|prop
range|:
name|propInfos
control|)
block|{
for|for
control|(
name|TextValue
name|tv
range|:
name|prop
operator|.
name|getTextValues
argument_list|()
control|)
block|{
name|currentMembership
operator|.
name|addMember
argument_list|(
name|tv
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|NT_REP_MEMBER_REFERENCES
operator|.
name|equals
argument_list|(
name|ntName
argument_list|)
condition|)
block|{
for|for
control|(
name|PropInfo
name|prop
range|:
name|propInfos
control|)
block|{
if|if
condition|(
name|REP_MEMBERS
operator|.
name|equals
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|currentMembership
operator|.
name|addMembers
argument_list|(
name|prop
operator|.
name|getTextValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//noinspection deprecation
name|log
operator|.
name|warn
argument_list|(
literal|"{} is not of type "
operator|+
name|NT_REP_MEMBERS
operator|+
literal|" or "
operator|+
name|NT_REP_MEMBER_REFERENCES
argument_list|,
name|childInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endChildInfo
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|end
parameter_list|(
name|Tree
name|protectedParent
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|currentMembership
operator|=
literal|null
expr_stmt|;
block|}
comment|//------------------------------------------------------------< private>---
annotation|@
name|Nonnull
specifier|private
name|IdentifierManager
name|getIdentifierManager
parameter_list|()
block|{
if|if
condition|(
name|identifierManager
operator|==
literal|null
condition|)
block|{
name|identifierManager
operator|=
operator|new
name|IdentifierManager
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
return|return
name|identifierManager
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|PrincipalManager
name|getPrincipalManager
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|userManager
operator|.
name|getPrincipalManager
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|Membership
name|getMembership
parameter_list|(
annotation|@
name|Nonnull
name|String
name|authId
parameter_list|)
block|{
name|Membership
name|membership
init|=
name|memberships
operator|.
name|get
argument_list|(
name|authId
argument_list|)
decl_stmt|;
if|if
condition|(
name|membership
operator|==
literal|null
condition|)
block|{
name|membership
operator|=
operator|new
name|Membership
argument_list|(
name|authId
argument_list|)
expr_stmt|;
name|memberships
operator|.
name|put
argument_list|(
name|authId
argument_list|,
name|membership
argument_list|)
expr_stmt|;
block|}
return|return
name|membership
return|;
block|}
specifier|private
name|void
name|checkInitialized
parameter_list|()
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Not initialized"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|isValid
parameter_list|(
name|PropertyDefinition
name|definition
parameter_list|,
name|String
name|oakNodeTypeName
parameter_list|,
name|boolean
name|multipleStatus
parameter_list|)
block|{
return|return
name|multipleStatus
operator|==
name|definition
operator|.
name|isMultiple
argument_list|()
operator|&&
name|definition
operator|.
name|getDeclaringNodeType
argument_list|()
operator|.
name|isNodeType
argument_list|(
name|namePathMapper
operator|.
name|getJcrName
argument_list|(
name|oakNodeTypeName
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isMemberNode
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|)
block|{
comment|//noinspection deprecation
return|return
name|tree
operator|!=
literal|null
operator|&&
name|NT_REP_MEMBERS
operator|.
name|equals
argument_list|(
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|tree
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isMemberReferencesListNode
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|)
block|{
return|return
name|tree
operator|!=
literal|null
operator|&&
name|NT_REP_MEMBER_REFERENCES_LIST
operator|.
name|equals
argument_list|(
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|tree
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isPwdNode
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|)
block|{
return|return
name|REP_PWD
operator|.
name|equals
argument_list|(
name|tree
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|NT_REP_PASSWORD
operator|.
name|equals
argument_list|(
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|tree
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|importPwdNodeProperty
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|parent
parameter_list|,
annotation|@
name|Nonnull
name|PropInfo
name|propInfo
parameter_list|,
annotation|@
name|Nonnull
name|PropertyDefinition
name|def
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|propName
init|=
name|propInfo
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// overwrite any properties generated underneath the rep:pwd node
comment|// by "UserManagerImpl#setPassword" by the properties defined by
comment|// the XML to be imported. see OAK-1943 for the corresponding discussion.
name|int
name|targetType
init|=
name|def
operator|.
name|getRequiredType
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetType
operator|==
name|PropertyType
operator|.
name|UNDEFINED
condition|)
block|{
name|targetType
operator|=
operator|(
name|REP_PASSWORD_LAST_MODIFIED
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
operator|)
condition|?
name|PropertyType
operator|.
name|LONG
else|:
name|PropertyType
operator|.
name|STRING
expr_stmt|;
block|}
name|PropertyState
name|property
decl_stmt|;
if|if
condition|(
name|def
operator|.
name|isMultiple
argument_list|()
condition|)
block|{
name|property
operator|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|propName
argument_list|,
name|propInfo
operator|.
name|getValues
argument_list|(
name|targetType
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|property
operator|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|propName
argument_list|,
name|propInfo
operator|.
name|getValue
argument_list|(
name|targetType
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|parent
operator|.
name|setProperty
argument_list|(
name|property
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * Handling the import behavior      *      * @param msg The message to log a warning in case of {@link ImportBehavior#IGNORE}      *            or {@link ImportBehavior#BESTEFFORT}      * @throws javax.jcr.nodetype.ConstraintViolationException      *          If the import      *          behavior is {@link ImportBehavior#ABORT}.      */
specifier|private
name|void
name|handleFailure
parameter_list|(
name|String
name|msg
parameter_list|)
throws|throws
name|ConstraintViolationException
block|{
switch|switch
condition|(
name|importBehavior
condition|)
block|{
case|case
name|ImportBehavior
operator|.
name|IGNORE
case|:
case|case
name|ImportBehavior
operator|.
name|BESTEFFORT
case|:
name|log
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
break|break;
case|case
name|ImportBehavior
operator|.
name|ABORT
case|:
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
name|msg
argument_list|)
throw|;
default|default:
comment|// no other behavior. nothing to do.
block|}
block|}
comment|//------------------------------------------------------< inner classes>---
comment|/**      * Inner class used to postpone import of group membership to the very end      * of the import. This allows to import membership of user/groups that      * are only being created during this import.      *      * @see ImportBehavior For additional configuration options.      */
specifier|private
specifier|final
class|class
name|Membership
block|{
specifier|private
specifier|final
name|String
name|authorizablePath
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|members
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Membership
parameter_list|(
name|String
name|authorizablePath
parameter_list|)
block|{
name|this
operator|.
name|authorizablePath
operator|=
name|authorizablePath
expr_stmt|;
block|}
name|void
name|addMember
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|members
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|void
name|addMembers
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|TextValue
argument_list|>
name|tvs
parameter_list|)
block|{
for|for
control|(
name|TextValue
name|tv
range|:
name|tvs
control|)
block|{
name|addMember
argument_list|(
name|tv
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|process
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizableByPath
argument_list|(
name|authorizablePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
operator|||
operator|!
name|a
operator|.
name|isGroup
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|authorizablePath
operator|+
literal|" does not represent a valid group."
argument_list|)
throw|;
block|}
name|Group
name|gr
init|=
operator|(
name|Group
operator|)
name|a
decl_stmt|;
comment|// 1. collect members to add and to remove.
name|Map
argument_list|<
name|String
argument_list|,
name|Authorizable
argument_list|>
name|toRemove
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Authorizable
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|declMembers
init|=
name|gr
operator|.
name|getDeclaredMembers
argument_list|()
init|;
name|declMembers
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Authorizable
name|dm
init|=
name|declMembers
operator|.
name|next
argument_list|()
decl_stmt|;
name|toRemove
operator|.
name|put
argument_list|(
name|dm
operator|.
name|getID
argument_list|()
argument_list|,
name|dm
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Authorizable
argument_list|>
name|toAdd
init|=
operator|new
name|ArrayList
argument_list|<
name|Authorizable
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nonExisting
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|contentId
range|:
name|members
control|)
block|{
name|String
name|remapped
init|=
name|referenceTracker
operator|.
name|get
argument_list|(
name|contentId
argument_list|)
decl_stmt|;
name|String
name|memberContentId
init|=
operator|(
name|remapped
operator|==
literal|null
operator|)
condition|?
name|contentId
else|:
name|remapped
decl_stmt|;
name|Authorizable
name|member
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Tree
name|n
init|=
name|getIdentifierManager
argument_list|()
operator|.
name|getTree
argument_list|(
name|memberContentId
argument_list|)
decl_stmt|;
name|member
operator|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// no such node or failed to retrieve authorizable
comment|// warning is logged below.
block|}
if|if
condition|(
name|member
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|toRemove
operator|.
name|remove
argument_list|(
name|member
operator|.
name|getID
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|toAdd
operator|.
name|add
argument_list|(
name|member
argument_list|)
expr_stmt|;
block|}
comment|// else: no need to remove from rep:members
block|}
else|else
block|{
name|handleFailure
argument_list|(
literal|"New member of "
operator|+
name|gr
operator|+
literal|": No such authorizable (NodeID = "
operator|+
name|memberContentId
operator|+
literal|')'
argument_list|)
expr_stmt|;
if|if
condition|(
name|importBehavior
operator|==
name|ImportBehavior
operator|.
name|BESTEFFORT
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"ImportBehavior.BESTEFFORT: Remember non-existing member for processing."
argument_list|)
expr_stmt|;
name|nonExisting
operator|.
name|add
argument_list|(
name|contentId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// 2. adjust members of the group
for|for
control|(
name|Authorizable
name|m
range|:
name|toRemove
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|gr
operator|.
name|removeMember
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|handleFailure
argument_list|(
literal|"Failed remove existing member ("
operator|+
name|m
operator|+
literal|") from "
operator|+
name|gr
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Authorizable
name|m
range|:
name|toAdd
control|)
block|{
if|if
condition|(
operator|!
name|gr
operator|.
name|addMember
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|handleFailure
argument_list|(
literal|"Failed add member ("
operator|+
name|m
operator|+
literal|") to "
operator|+
name|gr
argument_list|)
expr_stmt|;
block|}
block|}
comment|// handling non-existing members in case of best-effort
if|if
condition|(
operator|!
name|nonExisting
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"ImportBehavior.BESTEFFORT: Found "
operator|+
name|nonExisting
operator|.
name|size
argument_list|()
operator|+
literal|" entries of rep:members pointing to non-existing authorizables. Adding to rep:members."
argument_list|)
expr_stmt|;
name|Tree
name|groupTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|gr
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|MembershipProvider
name|membershipProvider
init|=
name|userManager
operator|.
name|getMembershipProvider
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|member
range|:
name|nonExisting
control|)
block|{
name|membershipProvider
operator|.
name|addMember
argument_list|(
name|groupTree
argument_list|,
name|member
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Inner class used to postpone import of impersonators to the very end      * of the import. This allows to import impersonation values pointing      * to user that are only being created during this import.      *      * @see ImportBehavior For additional configuration options.      */
specifier|private
specifier|final
class|class
name|Impersonators
block|{
specifier|private
specifier|final
name|String
name|userId
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|principalNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Impersonators
parameter_list|(
name|String
name|userId
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|TextValue
argument_list|>
name|values
parameter_list|)
block|{
name|this
operator|.
name|userId
operator|=
name|userId
expr_stmt|;
for|for
control|(
name|TextValue
name|v
range|:
name|values
control|)
block|{
name|principalNames
operator|.
name|add
argument_list|(
name|v
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|process
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|userId
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
operator|||
name|a
operator|.
name|isGroup
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|userId
operator|+
literal|" does not represent a valid user."
argument_list|)
throw|;
block|}
name|Impersonation
name|imp
init|=
name|checkNotNull
argument_list|(
operator|(
operator|(
name|User
operator|)
name|a
operator|)
operator|.
name|getImpersonation
argument_list|()
argument_list|)
decl_stmt|;
comment|// 1. collect principals to add and to remove.
name|Map
argument_list|<
name|String
argument_list|,
name|Principal
argument_list|>
name|toRemove
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Principal
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PrincipalIterator
name|pit
init|=
name|imp
operator|.
name|getImpersonators
argument_list|()
init|;
name|pit
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Principal
name|p
init|=
name|pit
operator|.
name|nextPrincipal
argument_list|()
decl_stmt|;
name|toRemove
operator|.
name|put
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|toAdd
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|principalName
range|:
name|principalNames
control|)
block|{
if|if
condition|(
name|toRemove
operator|.
name|remove
argument_list|(
name|principalName
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// add it to the list of new impersonators to be added.
name|toAdd
operator|.
name|add
argument_list|(
name|principalName
argument_list|)
expr_stmt|;
block|}
comment|// else: no need to revoke impersonation for the given principal.
block|}
comment|// 2. adjust set of impersonators
for|for
control|(
name|Principal
name|p
range|:
name|toRemove
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|imp
operator|.
name|revokeImpersonation
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|String
name|principalName
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
name|handleFailure
argument_list|(
literal|"Failed to revoke impersonation for "
operator|+
name|principalName
operator|+
literal|" on "
operator|+
name|a
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|nonExisting
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|principalName
range|:
name|toAdd
control|)
block|{
name|Principal
name|principal
init|=
operator|(
name|principals
operator|.
name|containsKey
argument_list|(
name|principalName
argument_list|)
operator|)
condition|?
name|principals
operator|.
name|get
argument_list|(
name|principalName
argument_list|)
else|:
operator|new
name|PrincipalImpl
argument_list|(
name|principalName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|imp
operator|.
name|grantImpersonation
argument_list|(
name|principal
argument_list|)
condition|)
block|{
name|handleFailure
argument_list|(
literal|"Failed to grant impersonation for "
operator|+
name|principalName
operator|+
literal|" on "
operator|+
name|a
argument_list|)
expr_stmt|;
if|if
condition|(
name|importBehavior
operator|==
name|ImportBehavior
operator|.
name|BESTEFFORT
operator|&&
name|getPrincipalManager
argument_list|()
operator|.
name|getPrincipal
argument_list|(
name|principalName
argument_list|)
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"ImportBehavior.BESTEFFORT: Remember non-existing impersonator for special processing."
argument_list|)
expr_stmt|;
name|nonExisting
operator|.
name|add
argument_list|(
name|principalName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|nonExisting
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Tree
name|userTree
init|=
name|checkNotNull
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|a
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// copy over all existing impersonators to the nonExisting list
name|PropertyState
name|impersonators
init|=
name|userTree
operator|.
name|getProperty
argument_list|(
name|REP_IMPERSONATORS
argument_list|)
decl_stmt|;
if|if
condition|(
name|impersonators
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|existing
range|:
name|impersonators
operator|.
name|getValue
argument_list|(
name|STRINGS
argument_list|)
control|)
block|{
name|nonExisting
operator|.
name|add
argument_list|(
name|existing
argument_list|)
expr_stmt|;
block|}
block|}
comment|// and write back the complete list including those principal
comment|// names that are unknown to principal provider.
name|userTree
operator|.
name|setProperty
argument_list|(
name|REP_IMPERSONATORS
argument_list|,
name|nonExisting
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

