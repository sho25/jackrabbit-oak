begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|CompositeIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|CorruptIndexHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUpdateCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|NodeTraversalCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|DirectoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|FSDirectoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|VisibleEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|ASYNC_PROPERTY_NAME
import|;
end_import

begin_class
specifier|public
class|class
name|OutOfBandIndexer
implements|implements
name|Closeable
implements|,
name|IndexUpdateCallback
implements|,
name|NodeTraversalCallback
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Index lane name which is used for indexing      */
specifier|private
specifier|static
specifier|final
name|String
name|REINDEX_LANE
init|=
literal|"offline-reindex-async"
decl_stmt|;
comment|/**      * Property name where previous value of 'async' is stored      */
specifier|private
specifier|static
specifier|final
name|String
name|ASYNC_PREVIOUS
init|=
literal|"async-previous"
decl_stmt|;
comment|/**      * Value stored in previous async property if the index is not async      * i.e. when a sync index is reindexed in out of band mode      */
specifier|private
specifier|static
specifier|final
name|String
name|ASYNC_PREVIOUS_NONE
init|=
literal|"none"
decl_stmt|;
comment|/**      * Directory name in output directory under which indexes are      * stored      */
specifier|public
specifier|static
specifier|final
name|String
name|LOCAL_INDEX_ROOT_DIR
init|=
literal|"indexes"
decl_stmt|;
comment|/**      * File name stored in final index directory which contains meta      * information like checkpoint details. This can be used by      * importer while importing the indexes      */
specifier|private
specifier|static
specifier|final
name|String
name|INDEXER_META
init|=
literal|"indexer-info.txt"
decl_stmt|;
comment|/**      * Checkpoint value which indicate that head state needs to be used      * This would be mostly used for testing purpose      */
specifier|private
specifier|static
specifier|final
name|String
name|HEAD_AS_CHECKPOINT
init|=
literal|"head"
decl_stmt|;
specifier|private
specifier|final
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|IndexHelper
name|indexHelper
decl_stmt|;
specifier|private
specifier|final
name|String
name|checkpoint
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|checkpointInfo
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
specifier|private
name|NodeStore
name|copyOnWriteStore
decl_stmt|;
specifier|private
name|LuceneIndexHelper
name|luceneIndexHelper
decl_stmt|;
specifier|private
name|File
name|localIndexDir
decl_stmt|;
comment|//TODO Support for providing custom index definition i.e. where definition is not
comment|//present in target repository
specifier|public
name|OutOfBandIndexer
parameter_list|(
name|IndexHelper
name|indexHelper
parameter_list|,
name|String
name|checkpoint
parameter_list|)
block|{
name|this
operator|.
name|indexHelper
operator|=
name|checkNotNull
argument_list|(
name|indexHelper
argument_list|)
expr_stmt|;
name|this
operator|.
name|checkpoint
operator|=
name|checkNotNull
argument_list|(
name|checkpoint
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reindex
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|IOException
block|{
name|Stopwatch
name|w
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|NodeState
name|checkpointedState
init|=
name|indexHelper
operator|.
name|getNodeStore
argument_list|()
operator|.
name|retrieve
argument_list|(
name|checkpoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkpointedState
operator|==
literal|null
operator|&&
name|HEAD_AS_CHECKPOINT
operator|.
name|equals
argument_list|(
name|checkpoint
argument_list|)
condition|)
block|{
name|checkpointedState
operator|=
name|indexHelper
operator|.
name|getNodeStore
argument_list|()
operator|.
name|getRoot
argument_list|()
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Using head state for indexing. Such an index cannot be imported back"
argument_list|)
expr_stmt|;
block|}
name|checkNotNull
argument_list|(
name|checkpointedState
argument_list|,
literal|"Not able to retrieve revision referred via checkpoint [%s]"
argument_list|,
name|checkpoint
argument_list|)
expr_stmt|;
name|copyOnWriteStore
operator|=
operator|new
name|MemoryNodeStore
argument_list|(
name|checkpointedState
argument_list|)
expr_stmt|;
name|checkpointInfo
operator|=
name|indexHelper
operator|.
name|getNodeStore
argument_list|()
operator|.
name|checkpointInfo
argument_list|(
name|checkpoint
argument_list|)
expr_stmt|;
comment|//TODO Check for indexPaths being empty
name|log
operator|.
name|info
argument_list|(
literal|"Proceeding to index {} upto checkpoint {} {}"
argument_list|,
name|indexHelper
operator|.
name|getIndexPaths
argument_list|()
argument_list|,
name|checkpoint
argument_list|,
name|checkpointInfo
argument_list|)
expr_stmt|;
name|switchIndexLanesAndReindexFlag
argument_list|()
expr_stmt|;
name|preformIndexUpdate
argument_list|()
expr_stmt|;
name|writeMetaInfo
argument_list|()
expr_stmt|;
name|copyIndexFilesToOutput
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Indexing completed for indexes {} in {} and index files are copied to {}"
argument_list|,
name|indexHelper
operator|.
name|getIndexPaths
argument_list|()
argument_list|,
name|w
argument_list|,
name|IndexCommand
operator|.
name|getPath
argument_list|(
name|indexHelper
operator|.
name|getOutputDir
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|File
name|getLocalIndexDir
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|localIndexDir
operator|==
literal|null
condition|)
block|{
name|localIndexDir
operator|=
operator|new
name|File
argument_list|(
name|indexHelper
operator|.
name|getWorkDir
argument_list|()
argument_list|,
name|LOCAL_INDEX_ROOT_DIR
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|localIndexDir
argument_list|)
expr_stmt|;
block|}
return|return
name|localIndexDir
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//~---------------------------------------------------< callbacks>
annotation|@
name|Override
specifier|public
name|void
name|indexUpdate
parameter_list|()
throws|throws
name|CommitFailedException
block|{      }
annotation|@
name|Override
specifier|public
name|void
name|traversedNode
parameter_list|()
throws|throws
name|CommitFailedException
block|{      }
specifier|private
name|void
name|preformIndexUpdate
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommitFailedException
block|{
name|NodeBuilder
name|builder
init|=
name|copyOnWriteStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|IndexUpdate
name|indexUpdate
init|=
operator|new
name|IndexUpdate
argument_list|(
name|createIndexEditorProvider
argument_list|()
argument_list|,
name|REINDEX_LANE
argument_list|,
name|copyOnWriteStore
operator|.
name|getRoot
argument_list|()
argument_list|,
name|builder
argument_list|,
name|this
argument_list|,
name|this
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|,
name|CorruptIndexHandler
operator|.
name|NOOP
argument_list|)
decl_stmt|;
name|NodeState
name|before
init|=
name|EmptyNodeState
operator|.
name|EMPTY_NODE
decl_stmt|;
name|NodeState
name|after
init|=
name|copyOnWriteStore
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|CommitFailedException
name|exception
init|=
name|EditorDiff
operator|.
name|process
argument_list|(
name|VisibleEditor
operator|.
name|wrap
argument_list|(
name|indexUpdate
argument_list|)
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
decl_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
block|}
specifier|private
name|IndexEditorProvider
name|createIndexEditorProvider
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexEditorProvider
name|lucene
init|=
name|createLuceneEditorProvider
argument_list|()
decl_stmt|;
name|IndexEditorProvider
name|property
init|=
operator|new
name|PropertyIndexEditorProvider
argument_list|()
operator|.
name|with
argument_list|(
name|indexHelper
operator|.
name|getMountInfoProvider
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|CompositeIndexEditorProvider
operator|.
name|compose
argument_list|(
name|asList
argument_list|(
name|lucene
argument_list|,
name|property
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|IndexEditorProvider
name|createLuceneEditorProvider
parameter_list|()
throws|throws
name|IOException
block|{
name|luceneIndexHelper
operator|=
operator|new
name|LuceneIndexHelper
argument_list|(
name|indexHelper
argument_list|)
expr_stmt|;
name|DirectoryFactory
name|dirFactory
init|=
operator|new
name|FSDirectoryFactory
argument_list|(
name|getLocalIndexDir
argument_list|()
argument_list|)
decl_stmt|;
name|luceneIndexHelper
operator|.
name|setDirectoryFactory
argument_list|(
name|dirFactory
argument_list|)
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|luceneIndexHelper
argument_list|)
expr_stmt|;
return|return
name|luceneIndexHelper
operator|.
name|createEditorProvider
argument_list|()
return|;
block|}
specifier|private
name|void
name|switchIndexLanesAndReindexFlag
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|builder
init|=
name|copyOnWriteStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|indexPath
range|:
name|indexHelper
operator|.
name|getIndexPaths
argument_list|()
control|)
block|{
comment|//TODO Do it only for lucene indexes for now
name|NodeBuilder
name|idxBuilder
init|=
name|NodeStoreUtils
operator|.
name|childBuilder
argument_list|(
name|builder
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
name|idxBuilder
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|switchLane
argument_list|(
name|idxBuilder
argument_list|)
expr_stmt|;
block|}
name|copyOnWriteStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Switched the async lane for indexes at {} to {} and marked them for reindex"
argument_list|,
name|indexHelper
operator|.
name|getIndexPaths
argument_list|()
argument_list|,
name|REINDEX_LANE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Make a copy of current async value and replace it with one required for offline reindexing      */
specifier|static
name|void
name|switchLane
parameter_list|(
name|NodeBuilder
name|idxBuilder
parameter_list|)
block|{
name|PropertyState
name|currentAsyncState
init|=
name|idxBuilder
operator|.
name|getProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|)
decl_stmt|;
name|PropertyState
name|newAsyncState
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
name|REINDEX_LANE
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|PropertyState
name|previousAsyncState
decl_stmt|;
if|if
condition|(
name|currentAsyncState
operator|==
literal|null
condition|)
block|{
name|previousAsyncState
operator|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|ASYNC_PREVIOUS
argument_list|,
name|ASYNC_PREVIOUS_NONE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Ensure that previous state is copied with correct type
if|if
condition|(
name|currentAsyncState
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|previousAsyncState
operator|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|ASYNC_PREVIOUS
argument_list|,
name|currentAsyncState
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|previousAsyncState
operator|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|ASYNC_PREVIOUS
argument_list|,
name|currentAsyncState
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
block|}
name|idxBuilder
operator|.
name|setProperty
argument_list|(
name|previousAsyncState
argument_list|)
expr_stmt|;
name|idxBuilder
operator|.
name|setProperty
argument_list|(
name|newAsyncState
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeMetaInfo
parameter_list|()
throws|throws
name|IOException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"checkpoint"
argument_list|,
name|checkpoint
argument_list|)
expr_stmt|;
try|try
init|(
name|OutputStream
name|os
init|=
name|FileUtils
operator|.
name|openOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|getLocalIndexDir
argument_list|()
argument_list|,
name|INDEXER_META
argument_list|)
argument_list|)
init|)
block|{
name|props
operator|.
name|store
argument_list|(
name|os
argument_list|,
literal|"Indexer info"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|copyIndexFilesToOutput
parameter_list|()
throws|throws
name|IOException
block|{
name|FileUtils
operator|.
name|moveDirectoryToDirectory
argument_list|(
name|getLocalIndexDir
argument_list|()
argument_list|,
name|indexHelper
operator|.
name|getOutputDir
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

