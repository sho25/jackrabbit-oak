begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * A cache key implementation, which is a combination of a path string and a  * revision.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PathRev
implements|implements
name|CacheValue
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PathRev
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|RevisionVector
name|revision
decl_stmt|;
specifier|public
name|PathRev
parameter_list|(
annotation|@
name|Nonnull
name|String
name|path
parameter_list|,
annotation|@
name|Nonnull
name|RevisionVector
name|revision
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|revision
operator|=
name|checkNotNull
argument_list|(
name|revision
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMemory
parameter_list|()
block|{
name|long
name|size
init|=
literal|24
comment|// shallow size
operator|+
operator|(
name|long
operator|)
name|StringUtils
operator|.
name|estimateMemoryUsage
argument_list|(
name|path
argument_list|)
comment|// path
operator|+
name|revision
operator|.
name|getMemory
argument_list|()
decl_stmt|;
comment|// revision
if|if
condition|(
name|size
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Estimated memory footprint larger than Integer.MAX_VALUE: {}."
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|size
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
return|return
operator|(
name|int
operator|)
name|size
return|;
block|}
comment|//----------------------------< Object>------------------------------------
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|path
operator|.
name|hashCode
argument_list|()
operator|^
name|revision
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|PathRev
condition|)
block|{
name|PathRev
name|other
init|=
operator|(
name|PathRev
operator|)
name|obj
decl_stmt|;
return|return
name|revision
operator|.
name|equals
argument_list|(
name|other
operator|.
name|revision
argument_list|)
operator|&&
name|path
operator|.
name|equals
argument_list|(
name|other
operator|.
name|path
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|int
name|dim
init|=
name|revision
operator|.
name|getDimensions
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|path
operator|.
name|length
argument_list|()
operator|+
operator|(
name|Revision
operator|.
name|REV_STRING_APPROX_SIZE
operator|+
literal|1
operator|)
operator|*
name|dim
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"@"
argument_list|)
expr_stmt|;
name|revision
operator|.
name|toStringBuilder
argument_list|(
name|sb
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|asString
parameter_list|()
block|{
return|return
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|PathRev
name|fromString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|int
name|index
init|=
name|s
operator|.
name|lastIndexOf
argument_list|(
literal|'@'
argument_list|)
decl_stmt|;
return|return
operator|new
name|PathRev
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
argument_list|,
name|RevisionVector
operator|.
name|fromString
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|PathRev
name|b
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|b
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|compare
init|=
name|path
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|compare
operator|==
literal|0
condition|)
block|{
name|compare
operator|=
name|revision
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|revision
argument_list|)
expr_stmt|;
block|}
return|return
name|compare
return|;
block|}
block|}
end_class

end_unit

