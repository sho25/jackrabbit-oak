begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|NODE_ADDED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|NODE_REMOVED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|PROPERTY_ADDED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|PROPERTY_CHANGED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|PROPERTY_REMOVED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SYSTEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|DATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|DEEP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|NODE_TYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|NO_LOCAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|USER_DATA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|USER_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|ReadOnlyNodeTypeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|DefaultEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * TODO document  */
end_comment

begin_class
specifier|public
class|class
name|EventQueueWriter
extends|extends
name|DefaultEditor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EventQueueWriter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|parent
decl_stmt|;
specifier|private
specifier|final
name|EventRecorder
name|eventRecorder
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
name|int
name|eventId
decl_stmt|;
specifier|public
name|EventQueueWriter
parameter_list|(
name|EventRecorder
name|eventRecorder
parameter_list|,
name|String
name|path
parameter_list|,
name|NodeState
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|eventRecorder
operator|=
name|eventRecorder
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|eventRecorder
operator|.
name|recordEvent
argument_list|(
name|PROPERTY_ADDED
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|after
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|getIdentifier
argument_list|()
argument_list|,
name|getAssociatedParentTypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|eventRecorder
operator|.
name|recordEvent
argument_list|(
name|PROPERTY_CHANGED
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|after
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|getIdentifier
argument_list|()
argument_list|,
name|getAssociatedParentTypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|eventRecorder
operator|.
name|recordEvent
argument_list|(
name|PROPERTY_REMOVED
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|before
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|getIdentifier
argument_list|()
argument_list|,
name|getAssociatedParentTypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|eventRecorder
operator|.
name|recordEvent
argument_list|(
name|NODE_ADDED
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
argument_list|,
name|getIdentifier
argument_list|()
argument_list|,
name|getAssociatedParentTypes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|getEventQueueWriter
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
name|getEventQueueWriter
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|eventRecorder
operator|.
name|recordEvent
argument_list|(
name|NODE_REMOVED
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
argument_list|,
name|getIdentifier
argument_list|()
argument_list|,
name|getAssociatedParentTypes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|getEventQueueWriter
argument_list|(
name|name
argument_list|,
name|before
argument_list|)
return|;
block|}
specifier|private
name|EventQueueWriter
name|getEventQueueWriter
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|String
name|path
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|this
operator|.
name|path
argument_list|,
name|name
argument_list|)
decl_stmt|;
return|return
name|PathUtils
operator|.
name|isAncestor
argument_list|(
literal|'/'
operator|+
name|JCR_SYSTEM
argument_list|,
name|path
argument_list|)
condition|?
literal|null
else|:
operator|new
name|EventQueueWriter
argument_list|(
name|eventRecorder
argument_list|,
name|path
argument_list|,
name|after
argument_list|)
return|;
block|}
specifier|private
name|String
index|[]
name|getAssociatedParentTypes
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|types
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|PropertyState
name|jcrPrimaryType
init|=
name|parent
operator|.
name|getProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|jcrPrimaryType
operator|!=
literal|null
condition|)
block|{
name|types
operator|.
name|add
argument_list|(
name|jcrPrimaryType
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PropertyState
name|jcrMixinTypes
init|=
name|parent
operator|.
name|getProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|jcrMixinTypes
operator|!=
literal|null
condition|)
block|{
name|Iterables
operator|.
name|addAll
argument_list|(
name|types
argument_list|,
name|jcrMixinTypes
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|types
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|types
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|String
name|getIdentifier
parameter_list|()
block|{
name|PropertyState
name|jcrUuid
init|=
name|parent
operator|.
name|getProperty
argument_list|(
name|JCR_UUID
argument_list|)
decl_stmt|;
return|return
name|jcrUuid
operator|==
literal|null
condition|?
literal|null
else|:
name|jcrUuid
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|ListenerSpec
block|{
specifier|private
specifier|final
name|ReadOnlyNodeTypeManager
name|ntMgr
decl_stmt|;
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
specifier|private
specifier|final
name|String
name|userId
decl_stmt|;
specifier|private
specifier|final
name|String
name|userData
decl_stmt|;
specifier|private
specifier|final
name|EventFilter
name|filter
decl_stmt|;
specifier|public
specifier|static
name|ListenerSpec
name|create
parameter_list|(
name|ReadOnlyNodeTypeManager
name|ntMgr
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|nodeState
parameter_list|)
block|{
name|String
name|userId
init|=
name|getString
argument_list|(
name|nodeState
argument_list|,
name|USER_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|userId
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid specification for observation event listener: userId missing"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|EventFilter
name|filter
init|=
name|getFilter
argument_list|(
name|nodeState
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid specification for observation event listener: filter missing"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|userData
init|=
name|getString
argument_list|(
name|nodeState
argument_list|,
name|USER_DATA
argument_list|)
decl_stmt|;
return|return
operator|new
name|ListenerSpec
argument_list|(
name|ntMgr
argument_list|,
name|name
argument_list|,
name|userId
argument_list|,
name|userData
argument_list|,
name|filter
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|EventFilter
name|getFilter
parameter_list|(
name|NodeState
name|nodeState
parameter_list|)
block|{
name|Long
name|types
init|=
name|getLong
argument_list|(
name|nodeState
argument_list|,
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|types
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|path
init|=
name|getString
argument_list|(
name|nodeState
argument_list|,
name|PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Boolean
name|deep
init|=
name|getBoolean
argument_list|(
name|nodeState
argument_list|,
name|DEEP
argument_list|)
decl_stmt|;
if|if
condition|(
name|deep
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
index|[]
name|uuids
init|=
name|getStrings
argument_list|(
name|nodeState
argument_list|,
name|UUID
argument_list|)
decl_stmt|;
name|String
index|[]
name|nodeTypes
init|=
name|getStrings
argument_list|(
name|nodeState
argument_list|,
name|NODE_TYPES
argument_list|)
decl_stmt|;
name|Boolean
name|noLocal
init|=
name|getBoolean
argument_list|(
name|nodeState
argument_list|,
name|NO_LOCAL
argument_list|)
decl_stmt|;
return|return
operator|new
name|EventFilter
argument_list|(
call|(
name|int
call|)
argument_list|(
name|long
argument_list|)
name|types
argument_list|,
name|path
argument_list|,
name|deep
argument_list|,
name|uuids
argument_list|,
name|nodeTypes
argument_list|,
name|noLocal
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|getStrings
parameter_list|(
name|NodeState
name|nodeState
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|PropertyState
name|p
init|=
name|nodeState
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Iterables
operator|.
name|toArray
argument_list|(
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Boolean
name|getBoolean
parameter_list|(
name|NodeState
name|node
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|PropertyState
name|p
init|=
name|node
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|p
operator|==
literal|null
condition|?
literal|null
else|:
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getString
parameter_list|(
name|NodeState
name|node
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|PropertyState
name|p
init|=
name|node
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|p
operator|==
literal|null
condition|?
literal|null
else|:
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Long
name|getLong
parameter_list|(
name|NodeState
name|node
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|PropertyState
name|p
init|=
name|node
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|p
operator|==
literal|null
condition|?
literal|null
else|:
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
return|;
block|}
specifier|private
name|ListenerSpec
parameter_list|(
name|ReadOnlyNodeTypeManager
name|ntMgr
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|userId
parameter_list|,
name|String
name|userData
parameter_list|,
name|EventFilter
name|filter
parameter_list|)
block|{
name|this
operator|.
name|ntMgr
operator|=
name|ntMgr
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|userId
operator|=
name|userId
expr_stmt|;
name|this
operator|.
name|userData
operator|=
name|userData
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
specifier|public
name|boolean
name|matches
parameter_list|(
name|int
name|type
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|identifier
parameter_list|,
name|String
index|[]
name|associatedParentTypes
parameter_list|)
block|{
return|return
name|filter
operator|.
name|include
argument_list|(
name|type
argument_list|,
name|path
argument_list|,
name|associatedParentTypes
argument_list|,
name|ntMgr
argument_list|)
return|;
block|}
specifier|public
name|void
name|persist
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|NodeBuilder
name|b
init|=
name|builder
operator|.
name|child
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
name|USER_ID
argument_list|,
name|userId
argument_list|)
expr_stmt|;
if|if
condition|(
name|userData
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|setProperty
argument_list|(
name|USER_DATA
argument_list|,
name|userData
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|EventRecorder
block|{
specifier|private
specifier|final
name|NodeBuilder
name|eventQueue
decl_stmt|;
specifier|private
specifier|final
name|Iterable
argument_list|<
name|ListenerSpec
argument_list|>
name|listenerSpecs
decl_stmt|;
specifier|private
specifier|final
name|long
name|date
decl_stmt|;
specifier|private
name|long
name|eventId
decl_stmt|;
specifier|public
name|EventRecorder
parameter_list|(
name|NodeBuilder
name|eventQueue
parameter_list|,
name|Iterable
argument_list|<
name|ListenerSpec
argument_list|>
name|listenerSpecs
parameter_list|)
block|{
name|this
operator|.
name|eventQueue
operator|=
name|eventQueue
expr_stmt|;
name|this
operator|.
name|listenerSpecs
operator|=
name|listenerSpecs
expr_stmt|;
name|this
operator|.
name|date
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|recordEvent
parameter_list|(
name|int
name|type
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|identifier
parameter_list|,
name|String
index|[]
name|associatedParentTypes
parameter_list|)
block|{
comment|// TODO record access restrictions
name|Set
argument_list|<
name|ListenerSpec
argument_list|>
name|receivers
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ListenerSpec
name|spec
range|:
name|listenerSpecs
control|)
block|{
if|if
condition|(
name|spec
operator|.
name|matches
argument_list|(
name|type
argument_list|,
name|path
argument_list|,
name|identifier
argument_list|,
name|associatedParentTypes
argument_list|)
condition|)
block|{
name|receivers
operator|.
name|add
argument_list|(
name|spec
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|receivers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NodeBuilder
name|event
init|=
name|persistEvent
argument_list|(
name|type
argument_list|,
name|path
argument_list|,
name|identifier
argument_list|)
decl_stmt|;
for|for
control|(
name|ListenerSpec
name|receiver
range|:
name|receivers
control|)
block|{
name|receiver
operator|.
name|persist
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|NodeBuilder
name|persistEvent
parameter_list|(
name|int
name|type
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|identifier
parameter_list|)
block|{
name|NodeBuilder
name|event
init|=
name|eventQueue
operator|.
name|child
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|eventId
operator|++
argument_list|)
argument_list|)
decl_stmt|;
name|event
operator|.
name|setProperty
argument_list|(
name|TYPE
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|event
operator|.
name|setProperty
argument_list|(
name|PATH
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|identifier
operator|!=
literal|null
condition|)
block|{
name|event
operator|.
name|setProperty
argument_list|(
name|UUID
argument_list|,
name|identifier
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|setProperty
argument_list|(
name|DATE
argument_list|,
name|date
argument_list|)
expr_stmt|;
return|return
name|event
return|;
block|}
block|}
block|}
end_class

end_unit

