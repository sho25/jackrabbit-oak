begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|AbstractLazyIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalUser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncedIdentity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * {@code DefaultSyncHandler} implements an sync handler that synchronizes users and groups from an external identity  * provider with the repository users.  *<p>  * Please refer to {@link DefaultSyncConfig} for configuration options.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
comment|// note that the metatype information is generated from DefaultSyncConfig
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|DefaultSyncHandler
implements|implements
name|SyncHandler
block|{
comment|/**      * logger instance      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultSyncHandler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Name of the {@link ExternalIdentity#getExternalId()} property of a synchronized identity.      */
specifier|public
specifier|static
specifier|final
name|String
name|REP_EXTERNAL_ID
init|=
literal|"rep:externalId"
decl_stmt|;
comment|/**      * Name of the property that stores the time when an identity was synced.      */
specifier|public
specifier|static
specifier|final
name|String
name|REP_LAST_SYNCED
init|=
literal|"rep:lastSynced"
decl_stmt|;
comment|/**      * internal configuration      */
specifier|private
name|DefaultSyncConfig
name|config
decl_stmt|;
comment|/**      * Default constructor for OSGi      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|public
name|DefaultSyncHandler
parameter_list|()
block|{     }
comment|/**      * Constructor for non-OSGi cases.      *      * @param config the configuration      */
specifier|public
name|DefaultSyncHandler
parameter_list|(
name|DefaultSyncConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
annotation|@
name|Activate
specifier|private
name|void
name|activate
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|ConfigurationParameters
name|cfg
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|config
operator|=
name|DefaultSyncConfig
operator|.
name|of
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|config
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|SyncContext
name|createContext
parameter_list|(
annotation|@
name|Nonnull
name|ExternalIdentityProvider
name|idp
parameter_list|,
annotation|@
name|Nonnull
name|UserManager
name|userManager
parameter_list|,
annotation|@
name|Nonnull
name|ValueFactory
name|valueFactory
parameter_list|)
throws|throws
name|SyncException
block|{
return|return
operator|new
name|ContextImpl
argument_list|(
name|idp
argument_list|,
name|userManager
argument_list|,
name|valueFactory
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|SyncedIdentity
name|findIdentity
parameter_list|(
annotation|@
name|Nonnull
name|UserManager
name|userManager
parameter_list|,
annotation|@
name|Nonnull
name|String
name|id
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|createSyncedIdentity
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|SyncedIdentity
argument_list|>
name|listIdentities
parameter_list|(
annotation|@
name|Nonnull
name|UserManager
name|userManager
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|iter
init|=
name|userManager
operator|.
name|findAuthorizables
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
operator|new
name|AbstractLazyIterator
argument_list|<
name|SyncedIdentity
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|SyncedIdentity
name|getNext
parameter_list|()
block|{
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
name|SyncedIdentity
name|id
init|=
name|createSyncedIdentity
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
return|return
name|id
return|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error while fetching authorizables"
argument_list|,
name|e
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
comment|/**      * Creates a synced identity from the given authorizable.      * @param auth the authorizable      * @return the id      * @throws RepositoryException if an error occurs      */
annotation|@
name|CheckForNull
specifier|private
specifier|static
name|SyncedIdentityImpl
name|createSyncedIdentity
parameter_list|(
annotation|@
name|Nullable
name|Authorizable
name|auth
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|ExternalIdentityRef
name|ref
init|=
operator|(
name|auth
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|getIdentityRef
argument_list|(
name|auth
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|Value
index|[]
name|lmValues
init|=
name|auth
operator|.
name|getProperty
argument_list|(
name|REP_LAST_SYNCED
argument_list|)
decl_stmt|;
name|long
name|lastModified
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|lmValues
operator|!=
literal|null
operator|&&
name|lmValues
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|lastModified
operator|=
name|lmValues
index|[
literal|0
index|]
operator|.
name|getLong
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|SyncedIdentityImpl
argument_list|(
name|auth
operator|.
name|getID
argument_list|()
argument_list|,
name|ref
argument_list|,
name|auth
operator|.
name|isGroup
argument_list|()
argument_list|,
name|lastModified
argument_list|)
return|;
block|}
block|}
comment|/**      * Internal implementation of the sync context      */
specifier|private
class|class
name|ContextImpl
implements|implements
name|SyncContext
block|{
specifier|private
specifier|final
name|ExternalIdentityProvider
name|idp
decl_stmt|;
specifier|private
specifier|final
name|UserManager
name|userManager
decl_stmt|;
specifier|private
specifier|final
name|ValueFactory
name|valueFactory
decl_stmt|;
specifier|private
name|boolean
name|keepMissing
decl_stmt|;
specifier|private
name|boolean
name|forceUserSync
decl_stmt|;
specifier|private
name|boolean
name|forceGroupSync
decl_stmt|;
comment|// we use the same wall clock for the entire context
specifier|private
specifier|final
name|long
name|now
decl_stmt|;
specifier|private
specifier|final
name|Value
name|nowValue
decl_stmt|;
specifier|private
name|ContextImpl
parameter_list|(
name|ExternalIdentityProvider
name|idp
parameter_list|,
name|UserManager
name|userManager
parameter_list|,
name|ValueFactory
name|valueFactory
parameter_list|)
block|{
name|this
operator|.
name|idp
operator|=
name|idp
expr_stmt|;
name|this
operator|.
name|userManager
operator|=
name|userManager
expr_stmt|;
name|this
operator|.
name|valueFactory
operator|=
name|valueFactory
expr_stmt|;
comment|// initialize 'now'
specifier|final
name|Calendar
name|nowCal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|this
operator|.
name|nowValue
operator|=
name|valueFactory
operator|.
name|createValue
argument_list|(
name|nowCal
argument_list|)
expr_stmt|;
name|this
operator|.
name|now
operator|=
name|nowCal
operator|.
name|getTimeInMillis
argument_list|()
expr_stmt|;
block|}
comment|/**          * {@inheritDoc}          */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// nothing to do
block|}
comment|/**          * {@inheritDoc}          */
annotation|@
name|Override
specifier|public
name|boolean
name|isKeepMissing
parameter_list|()
block|{
return|return
name|keepMissing
return|;
block|}
comment|/**          * {@inheritDoc}          */
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|SyncContext
name|setKeepMissing
parameter_list|(
name|boolean
name|keepMissing
parameter_list|)
block|{
name|this
operator|.
name|keepMissing
operator|=
name|keepMissing
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * {@inheritDoc}          */
annotation|@
name|Override
specifier|public
name|boolean
name|isForceUserSync
parameter_list|()
block|{
return|return
name|forceUserSync
return|;
block|}
comment|/**          * {@inheritDoc}          */
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|SyncContext
name|setForceUserSync
parameter_list|(
name|boolean
name|forceUserSync
parameter_list|)
block|{
name|this
operator|.
name|forceUserSync
operator|=
name|forceUserSync
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * {@inheritDoc}          */
annotation|@
name|Override
specifier|public
name|boolean
name|isForceGroupSync
parameter_list|()
block|{
return|return
name|forceGroupSync
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|SyncContext
name|setForceGroupSync
parameter_list|(
name|boolean
name|forceGroupSync
parameter_list|)
block|{
name|this
operator|.
name|forceGroupSync
operator|=
name|forceGroupSync
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * {@inheritDoc}          */
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|SyncResult
name|sync
parameter_list|(
annotation|@
name|Nonnull
name|ExternalIdentity
name|identity
parameter_list|)
throws|throws
name|SyncException
block|{
try|try
block|{
name|DebugTimer
name|timer
init|=
operator|new
name|DebugTimer
argument_list|()
decl_stmt|;
name|SyncResultImpl
name|ret
decl_stmt|;
name|boolean
name|created
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|identity
operator|instanceof
name|ExternalUser
condition|)
block|{
name|User
name|user
init|=
name|getAuthorizable
argument_list|(
name|identity
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|timer
operator|.
name|mark
argument_list|(
literal|"find"
argument_list|)
expr_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|user
operator|=
name|createUser
argument_list|(
operator|(
name|ExternalUser
operator|)
name|identity
argument_list|)
expr_stmt|;
name|timer
operator|.
name|mark
argument_list|(
literal|"create"
argument_list|)
expr_stmt|;
name|created
operator|=
literal|true
expr_stmt|;
block|}
name|ret
operator|=
name|syncUser
argument_list|(
operator|(
name|ExternalUser
operator|)
name|identity
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|timer
operator|.
name|mark
argument_list|(
literal|"sync"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|identity
operator|instanceof
name|ExternalGroup
condition|)
block|{
name|Group
name|group
init|=
name|getAuthorizable
argument_list|(
name|identity
argument_list|,
name|Group
operator|.
name|class
argument_list|)
decl_stmt|;
name|timer
operator|.
name|mark
argument_list|(
literal|"find"
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|group
operator|=
name|createGroup
argument_list|(
operator|(
name|ExternalGroup
operator|)
name|identity
argument_list|)
expr_stmt|;
name|timer
operator|.
name|mark
argument_list|(
literal|"create"
argument_list|)
expr_stmt|;
name|created
operator|=
literal|true
expr_stmt|;
block|}
name|ret
operator|=
name|syncGroup
argument_list|(
operator|(
name|ExternalGroup
operator|)
name|identity
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|timer
operator|.
name|mark
argument_list|(
literal|"sync"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"identity must be user or group but was: "
operator|+
name|identity
argument_list|)
throw|;
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"sync({}) -> {} {}"
argument_list|,
name|identity
operator|.
name|getExternalId
argument_list|()
operator|.
name|getString
argument_list|()
argument_list|,
name|identity
operator|.
name|getId
argument_list|()
argument_list|,
name|timer
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|created
condition|)
block|{
name|ret
operator|.
name|setStatus
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|ADD
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SyncException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**          * {@inheritDoc}          */
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|SyncResult
name|sync
parameter_list|(
annotation|@
name|Nonnull
name|String
name|id
parameter_list|)
throws|throws
name|SyncException
block|{
try|try
block|{
name|DebugTimer
name|timer
init|=
operator|new
name|DebugTimer
argument_list|()
decl_stmt|;
name|SyncResultImpl
name|ret
decl_stmt|;
comment|// find authorizable
name|Authorizable
name|auth
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|auth
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|SyncResultImpl
argument_list|(
operator|new
name|SyncedIdentityImpl
argument_list|(
name|id
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|SyncResult
operator|.
name|Status
operator|.
name|NO_SUCH_AUTHORIZABLE
argument_list|)
return|;
block|}
comment|// check if we need to deal with this authorizable
name|ExternalIdentityRef
name|ref
init|=
name|getIdentityRef
argument_list|(
name|auth
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
operator|||
operator|!
name|idp
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ref
operator|.
name|getProviderName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|SyncResultImpl
argument_list|(
operator|new
name|SyncedIdentityImpl
argument_list|(
name|id
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|SyncResult
operator|.
name|Status
operator|.
name|FOREIGN
argument_list|)
return|;
block|}
if|if
condition|(
name|auth
operator|instanceof
name|Group
condition|)
block|{
name|Group
name|group
init|=
operator|(
name|Group
operator|)
name|auth
decl_stmt|;
name|ExternalGroup
name|external
init|=
name|idp
operator|.
name|getGroup
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|timer
operator|.
name|mark
argument_list|(
literal|"retrieve"
argument_list|)
expr_stmt|;
if|if
condition|(
name|external
operator|==
literal|null
condition|)
block|{
name|SyncedIdentityImpl
name|syncId
init|=
name|createSyncedIdentity
argument_list|(
name|auth
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|.
name|getDeclaredMembers
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"won't remove local group with members: {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|ret
operator|=
operator|new
name|SyncResultImpl
argument_list|(
name|syncId
argument_list|,
name|SyncResult
operator|.
name|Status
operator|.
name|NOP
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|keepMissing
condition|)
block|{
name|auth
operator|.
name|remove
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"removing authorizable '{}' that no longer exists on IDP {}"
argument_list|,
name|id
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|timer
operator|.
name|mark
argument_list|(
literal|"remove"
argument_list|)
expr_stmt|;
name|ret
operator|=
operator|new
name|SyncResultImpl
argument_list|(
name|syncId
argument_list|,
name|SyncResult
operator|.
name|Status
operator|.
name|DELETE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
operator|new
name|SyncResultImpl
argument_list|(
name|syncId
argument_list|,
name|SyncResult
operator|.
name|Status
operator|.
name|MISSING
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"external identity missing for {}, but purge == false."
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ret
operator|=
name|syncGroup
argument_list|(
name|external
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|timer
operator|.
name|mark
argument_list|(
literal|"sync"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ExternalUser
name|external
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|timer
operator|.
name|mark
argument_list|(
literal|"retrieve"
argument_list|)
expr_stmt|;
if|if
condition|(
name|external
operator|==
literal|null
condition|)
block|{
name|SyncedIdentityImpl
name|syncId
init|=
name|createSyncedIdentity
argument_list|(
name|auth
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|keepMissing
condition|)
block|{
name|auth
operator|.
name|remove
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"removing authorizable '{}' that no longer exists on IDP {}"
argument_list|,
name|id
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|timer
operator|.
name|mark
argument_list|(
literal|"remove"
argument_list|)
expr_stmt|;
name|ret
operator|=
operator|new
name|SyncResultImpl
argument_list|(
name|syncId
argument_list|,
name|SyncResult
operator|.
name|Status
operator|.
name|DELETE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
operator|new
name|SyncResultImpl
argument_list|(
name|syncId
argument_list|,
name|SyncResult
operator|.
name|Status
operator|.
name|MISSING
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"external identity missing for {}, but purge == false."
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ret
operator|=
name|syncUser
argument_list|(
name|external
argument_list|,
operator|(
name|User
operator|)
name|auth
argument_list|)
expr_stmt|;
name|timer
operator|.
name|mark
argument_list|(
literal|"sync"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"sync({}) -> {} {}"
argument_list|,
name|id
argument_list|,
name|ref
operator|.
name|getString
argument_list|()
argument_list|,
name|timer
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SyncException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExternalIdentityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SyncException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**          * Retrieves the repository authorizable that corresponds to the given external identity          * @param external the external identity          * @param type the authorizable type          * @return the repository authorizable or {@code null} if not found.          * @throws RepositoryException if an error occurs.          * @throws SyncException if the repository contains a colliding authorizable with the same name.          */
annotation|@
name|CheckForNull
specifier|private
parameter_list|<
name|T
extends|extends
name|Authorizable
parameter_list|>
name|T
name|getAuthorizable
parameter_list|(
annotation|@
name|Nonnull
name|ExternalIdentity
name|external
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|SyncException
block|{
name|Authorizable
name|authorizable
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|external
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|authorizable
operator|==
literal|null
condition|)
block|{
name|authorizable
operator|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|external
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|authorizable
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|isInstance
argument_list|(
name|authorizable
argument_list|)
condition|)
block|{
comment|//noinspection unchecked
return|return
operator|(
name|T
operator|)
name|authorizable
return|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to process external {}: {}. Colliding authorizable exists in repository."
argument_list|,
name|type
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|external
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SyncException
argument_list|(
literal|"Unexpected authorizable: "
operator|+
name|authorizable
argument_list|)
throw|;
block|}
block|}
comment|/**          * Creates a new repository user for the given external one.          * Note that this method only creates the authorizable but does not perform any synchronization.          *          * @param externalUser the external user          * @return the repository user          * @throws RepositoryException if an error occurs          */
annotation|@
name|Nonnull
specifier|private
name|User
name|createUser
parameter_list|(
annotation|@
name|Nonnull
name|ExternalUser
name|externalUser
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Principal
name|principal
init|=
operator|new
name|PrincipalImpl
argument_list|(
name|externalUser
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|userManager
operator|.
name|createUser
argument_list|(
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|principal
argument_list|,
name|joinPaths
argument_list|(
name|config
operator|.
name|user
argument_list|()
operator|.
name|getPathPrefix
argument_list|()
argument_list|,
name|externalUser
operator|.
name|getIntermediatePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
name|REP_EXTERNAL_ID
argument_list|,
name|valueFactory
operator|.
name|createValue
argument_list|(
name|externalUser
operator|.
name|getExternalId
argument_list|()
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|user
return|;
block|}
comment|/**          * Creates a new repository group for the given external one.          * Note that this method only creates the authorizable but does not perform any synchronization.          *          * @param externalGroup the external group          * @return the repository group          * @throws RepositoryException if an error occurs          */
annotation|@
name|Nonnull
specifier|private
name|Group
name|createGroup
parameter_list|(
annotation|@
name|Nonnull
name|ExternalGroup
name|externalGroup
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Principal
name|principal
init|=
operator|new
name|PrincipalImpl
argument_list|(
name|externalGroup
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
decl_stmt|;
name|Group
name|group
init|=
name|userManager
operator|.
name|createGroup
argument_list|(
name|externalGroup
operator|.
name|getId
argument_list|()
argument_list|,
name|principal
argument_list|,
name|joinPaths
argument_list|(
name|config
operator|.
name|group
argument_list|()
operator|.
name|getPathPrefix
argument_list|()
argument_list|,
name|externalGroup
operator|.
name|getIntermediatePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|group
operator|.
name|setProperty
argument_list|(
name|REP_EXTERNAL_ID
argument_list|,
name|valueFactory
operator|.
name|createValue
argument_list|(
name|externalGroup
operator|.
name|getExternalId
argument_list|()
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|group
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|SyncResultImpl
name|syncUser
parameter_list|(
annotation|@
name|Nonnull
name|ExternalUser
name|external
parameter_list|,
annotation|@
name|Nonnull
name|User
name|user
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// first check if user is expired
if|if
condition|(
operator|!
name|forceUserSync
operator|&&
operator|!
name|isExpired
argument_list|(
name|user
argument_list|,
name|config
operator|.
name|user
argument_list|()
operator|.
name|getExpirationTime
argument_list|()
argument_list|,
literal|"Properties"
argument_list|)
condition|)
block|{
name|SyncedIdentityImpl
name|syncId
init|=
name|createSyncedIdentity
argument_list|(
name|user
argument_list|)
decl_stmt|;
return|return
operator|new
name|SyncResultImpl
argument_list|(
name|syncId
argument_list|,
name|SyncResult
operator|.
name|Status
operator|.
name|NOP
argument_list|)
return|;
block|}
comment|// synchronize the properties
name|syncProperties
argument_list|(
name|external
argument_list|,
name|user
argument_list|,
name|config
operator|.
name|user
argument_list|()
operator|.
name|getPropertyMapping
argument_list|()
argument_list|)
expr_stmt|;
comment|// synchronize auto-group membership
name|applyMembership
argument_list|(
name|user
argument_list|,
name|config
operator|.
name|user
argument_list|()
operator|.
name|getAutoMembership
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isExpired
argument_list|(
name|user
argument_list|,
name|config
operator|.
name|user
argument_list|()
operator|.
name|getMembershipExpirationTime
argument_list|()
argument_list|,
literal|"Membership"
argument_list|)
condition|)
block|{
comment|// synchronize external memberships
name|syncMembership
argument_list|(
name|external
argument_list|,
name|user
argument_list|,
name|config
operator|.
name|user
argument_list|()
operator|.
name|getMembershipNestingDepth
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// finally "touch" the sync property
name|user
operator|.
name|setProperty
argument_list|(
name|REP_LAST_SYNCED
argument_list|,
name|nowValue
argument_list|)
expr_stmt|;
name|SyncedIdentityImpl
name|syncId
init|=
name|createSyncedIdentity
argument_list|(
name|user
argument_list|)
decl_stmt|;
return|return
operator|new
name|SyncResultImpl
argument_list|(
name|syncId
argument_list|,
name|SyncResult
operator|.
name|Status
operator|.
name|UPDATE
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|SyncResultImpl
name|syncGroup
parameter_list|(
annotation|@
name|Nonnull
name|ExternalGroup
name|external
parameter_list|,
annotation|@
name|Nonnull
name|Group
name|group
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// first check if user is expired
if|if
condition|(
operator|!
name|forceGroupSync
operator|&&
operator|!
name|isExpired
argument_list|(
name|group
argument_list|,
name|config
operator|.
name|group
argument_list|()
operator|.
name|getExpirationTime
argument_list|()
argument_list|,
literal|"Properties"
argument_list|)
condition|)
block|{
name|SyncedIdentityImpl
name|syncId
init|=
name|createSyncedIdentity
argument_list|(
name|group
argument_list|)
decl_stmt|;
return|return
operator|new
name|SyncResultImpl
argument_list|(
name|syncId
argument_list|,
name|SyncResult
operator|.
name|Status
operator|.
name|NOP
argument_list|)
return|;
block|}
comment|// synchronize the properties
name|syncProperties
argument_list|(
name|external
argument_list|,
name|group
argument_list|,
name|config
operator|.
name|group
argument_list|()
operator|.
name|getPropertyMapping
argument_list|()
argument_list|)
expr_stmt|;
comment|// synchronize auto-group membership
name|applyMembership
argument_list|(
name|group
argument_list|,
name|config
operator|.
name|group
argument_list|()
operator|.
name|getAutoMembership
argument_list|()
argument_list|)
expr_stmt|;
comment|// finally "touch" the sync property
name|group
operator|.
name|setProperty
argument_list|(
name|REP_LAST_SYNCED
argument_list|,
name|nowValue
argument_list|)
expr_stmt|;
name|SyncedIdentityImpl
name|syncId
init|=
name|createSyncedIdentity
argument_list|(
name|group
argument_list|)
decl_stmt|;
return|return
operator|new
name|SyncResultImpl
argument_list|(
name|syncId
argument_list|,
name|SyncResult
operator|.
name|Status
operator|.
name|UPDATE
argument_list|)
return|;
block|}
comment|/**          * Recursively sync the memberships of an authorizable up-to the specified depth. If the given depth          * is equal or less than 0, no syncing is performed.          *          * @param external the external identity          * @param auth the authorizable          * @param depth recursion depth.          * @throws RepositoryException          */
specifier|private
name|void
name|syncMembership
parameter_list|(
name|ExternalIdentity
name|external
parameter_list|,
name|Authorizable
name|auth
parameter_list|,
name|long
name|depth
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|depth
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Syncing membership '{}' -> '{}'"
argument_list|,
name|external
operator|.
name|getExternalId
argument_list|()
operator|.
name|getString
argument_list|()
argument_list|,
name|auth
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DebugTimer
name|timer
init|=
operator|new
name|DebugTimer
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|ExternalIdentityRef
argument_list|>
name|externalGroups
decl_stmt|;
try|try
block|{
name|externalGroups
operator|=
name|external
operator|.
name|getDeclaredGroups
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExternalIdentityException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error while retrieving external declared groups for '{}'"
argument_list|,
name|external
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|timer
operator|.
name|mark
argument_list|(
literal|"fetching"
argument_list|)
expr_stmt|;
comment|// first get the set of the existing groups that are synced ones
name|Map
argument_list|<
name|String
argument_list|,
name|Group
argument_list|>
name|declaredExternalGroups
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Group
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Group
argument_list|>
name|grpIter
init|=
name|auth
operator|.
name|declaredMemberOf
argument_list|()
decl_stmt|;
while|while
condition|(
name|grpIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Group
name|grp
init|=
name|grpIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|isSameIDP
argument_list|(
name|grp
argument_list|)
condition|)
block|{
name|declaredExternalGroups
operator|.
name|put
argument_list|(
name|grp
operator|.
name|getID
argument_list|()
argument_list|,
name|grp
argument_list|)
expr_stmt|;
block|}
block|}
name|timer
operator|.
name|mark
argument_list|(
literal|"reading"
argument_list|)
expr_stmt|;
for|for
control|(
name|ExternalIdentityRef
name|ref
range|:
name|externalGroups
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"- processing membership {}"
argument_list|,
name|ref
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// get group
name|ExternalGroup
name|extGroup
decl_stmt|;
try|try
block|{
name|extGroup
operator|=
operator|(
name|ExternalGroup
operator|)
name|idp
operator|.
name|getIdentity
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
comment|// this should really not be the case, so catching the CCE is ok here.
name|log
operator|.
name|warn
argument_list|(
literal|"External identity '{}' is not a group, but should be one."
argument_list|,
name|ref
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|ExternalIdentityException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to retrieve external group '{}' from provider."
argument_list|,
name|ref
operator|.
name|getString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|extGroup
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"External group for ref '{}' could not be retrieved from provider."
argument_list|,
name|ref
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"- idp returned '{}'"
argument_list|,
name|extGroup
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Group
name|grp
decl_stmt|;
try|try
block|{
name|grp
operator|=
operator|(
name|Group
operator|)
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|extGroup
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
comment|// this should really not be the case, so catching the CCE is ok here.
name|log
operator|.
name|warn
argument_list|(
literal|"Authorizable '{}' is not a group, but should be one."
argument_list|,
name|extGroup
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"- user manager returned '{}'"
argument_list|,
name|grp
argument_list|)
expr_stmt|;
if|if
condition|(
name|grp
operator|==
literal|null
condition|)
block|{
name|grp
operator|=
name|createGroup
argument_list|(
name|extGroup
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"- created new group"
argument_list|)
expr_stmt|;
block|}
name|syncGroup
argument_list|(
name|extGroup
argument_list|,
name|grp
argument_list|)
expr_stmt|;
comment|// ensure membership
name|grp
operator|.
name|addMember
argument_list|(
name|auth
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"- added '{}' as member to '{}'"
argument_list|,
name|auth
argument_list|,
name|grp
argument_list|)
expr_stmt|;
comment|// remember the declared group
name|declaredExternalGroups
operator|.
name|remove
argument_list|(
name|grp
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// recursively apply further membership
if|if
condition|(
name|depth
operator|>
literal|1
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"- recursively sync group membership of '{}' (depth = {})."
argument_list|,
name|grp
operator|.
name|getID
argument_list|()
argument_list|,
name|depth
argument_list|)
expr_stmt|;
name|syncMembership
argument_list|(
name|extGroup
argument_list|,
name|grp
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"- group nesting level for '{}' reached"
argument_list|,
name|grp
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|timer
operator|.
name|mark
argument_list|(
literal|"adding"
argument_list|)
expr_stmt|;
comment|// remove us from the lost membership groups
for|for
control|(
name|Group
name|grp
range|:
name|declaredExternalGroups
operator|.
name|values
argument_list|()
control|)
block|{
name|grp
operator|.
name|removeMember
argument_list|(
name|auth
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"- removing member '{}' for group '{}'"
argument_list|,
name|auth
operator|.
name|getID
argument_list|()
argument_list|,
name|grp
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|timer
operator|.
name|mark
argument_list|(
literal|"removing"
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"syncMembership({}) {}"
argument_list|,
name|external
operator|.
name|getId
argument_list|()
argument_list|,
name|timer
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Ensures that the given authorizable is member of the specific groups. Note that it does not create groups          * if missing, nor remove memberships of groups not in the given set.          * @param member the authorizable          * @param groups set of groups.          */
specifier|private
name|void
name|applyMembership
parameter_list|(
name|Authorizable
name|member
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|groups
parameter_list|)
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|String
name|groupName
range|:
name|groups
control|)
block|{
name|Authorizable
name|group
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to apply auto-membership to {}. No such group: {}"
argument_list|,
name|member
operator|.
name|getID
argument_list|()
argument_list|,
name|groupName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|group
operator|instanceof
name|Group
condition|)
block|{
operator|(
operator|(
name|Group
operator|)
name|group
operator|)
operator|.
name|addMember
argument_list|(
name|member
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to apply auto-membership to {}. Authorizable '{}' is not a group."
argument_list|,
name|member
operator|.
name|getID
argument_list|()
argument_list|,
name|groupName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**          * Syncs the properties specified in the {@code mapping} from the external identity to the given authorizable.          * Note that this method does not check for value equality and just blindly copies or deletes the properties.          *          * @param ext external identity          * @param auth the authorizable          * @param mapping the property mapping          * @throws RepositoryException if an error occurs          */
specifier|private
name|void
name|syncProperties
parameter_list|(
name|ExternalIdentity
name|ext
parameter_list|,
name|Authorizable
name|auth
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapping
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|properties
init|=
name|ext
operator|.
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|mapping
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|relPath
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Object
name|obj
init|=
name|properties
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
name|int
name|nameLen
init|=
name|name
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|nameLen
operator|>
literal|1
operator|&&
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'"'
operator|&&
name|name
operator|.
name|charAt
argument_list|(
name|nameLen
operator|-
literal|1
argument_list|)
operator|==
literal|'"'
condition|)
block|{
name|auth
operator|.
name|setProperty
argument_list|(
name|relPath
argument_list|,
name|valueFactory
operator|.
name|createValue
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|nameLen
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|auth
operator|.
name|removeProperty
argument_list|(
name|relPath
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Collection
condition|)
block|{
name|auth
operator|.
name|setProperty
argument_list|(
name|relPath
argument_list|,
name|createValues
argument_list|(
operator|(
name|Collection
operator|)
name|obj
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|byte
index|[]
operator|||
name|obj
operator|instanceof
name|char
index|[]
condition|)
block|{
name|auth
operator|.
name|setProperty
argument_list|(
name|relPath
argument_list|,
name|createValue
argument_list|(
name|obj
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Object
index|[]
condition|)
block|{
name|auth
operator|.
name|setProperty
argument_list|(
name|relPath
argument_list|,
name|createValues
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|obj
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|auth
operator|.
name|setProperty
argument_list|(
name|relPath
argument_list|,
name|createValue
argument_list|(
name|obj
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**          * Checks if the given authorizable needs syncing based on the {@link #REP_LAST_SYNCED} property.          * @param auth the authorizable to check          * @param expirationTime the expiration time to compare to.          * @param type debug message type          * @return {@code true} if the authorizable needs sync          */
specifier|private
name|boolean
name|isExpired
parameter_list|(
name|Authorizable
name|auth
parameter_list|,
name|long
name|expirationTime
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Value
index|[]
name|values
init|=
name|auth
operator|.
name|getProperty
argument_list|(
name|REP_LAST_SYNCED
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|length
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"{} of {} '{}' need sync. "
operator|+
name|REP_LAST_SYNCED
operator|+
literal|" not set."
argument_list|,
name|type
argument_list|,
name|auth
operator|.
name|isGroup
argument_list|()
condition|?
literal|"group"
else|:
literal|"user"
argument_list|,
name|auth
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|now
operator|-
name|values
index|[
literal|0
index|]
operator|.
name|getLong
argument_list|()
operator|>
name|expirationTime
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"{} of {} '{}' need sync. "
operator|+
name|REP_LAST_SYNCED
operator|+
literal|" expired ({}> {})"
argument_list|,
name|type
argument_list|,
name|auth
operator|.
name|isGroup
argument_list|()
condition|?
literal|"group"
else|:
literal|"user"
argument_list|,
name|auth
operator|.
name|getID
argument_list|()
argument_list|,
name|now
operator|-
name|values
index|[
literal|0
index|]
operator|.
name|getLong
argument_list|()
argument_list|,
name|expirationTime
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"{} of {} '{}' do not need sync."
argument_list|,
name|type
argument_list|,
name|auth
operator|.
name|isGroup
argument_list|()
condition|?
literal|"group"
else|:
literal|"user"
argument_list|,
name|auth
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
comment|/**          * Creates a new JCR value of the given object, checking the internal type.          * @param v the value          * @return the JCR value or null          * @throws RepositoryException if an error occurs          */
annotation|@
name|CheckForNull
specifier|private
name|Value
name|createValue
parameter_list|(
annotation|@
name|Nullable
name|Object
name|v
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|v
operator|instanceof
name|Boolean
condition|)
block|{
return|return
name|valueFactory
operator|.
name|createValue
argument_list|(
operator|(
name|Boolean
operator|)
name|v
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|v
operator|instanceof
name|Byte
operator|||
name|v
operator|instanceof
name|Short
operator|||
name|v
operator|instanceof
name|Integer
operator|||
name|v
operator|instanceof
name|Long
condition|)
block|{
return|return
name|valueFactory
operator|.
name|createValue
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|v
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|v
operator|instanceof
name|Float
operator|||
name|v
operator|instanceof
name|Double
condition|)
block|{
return|return
name|valueFactory
operator|.
name|createValue
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|v
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|v
operator|instanceof
name|BigDecimal
condition|)
block|{
return|return
name|valueFactory
operator|.
name|createValue
argument_list|(
operator|(
name|BigDecimal
operator|)
name|v
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|v
operator|instanceof
name|Calendar
condition|)
block|{
return|return
name|valueFactory
operator|.
name|createValue
argument_list|(
operator|(
name|Calendar
operator|)
name|v
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|v
operator|instanceof
name|Date
condition|)
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
operator|(
name|Date
operator|)
name|v
argument_list|)
expr_stmt|;
return|return
name|valueFactory
operator|.
name|createValue
argument_list|(
name|cal
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|v
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|Binary
name|bin
init|=
name|valueFactory
operator|.
name|createBinary
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|v
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|valueFactory
operator|.
name|createValue
argument_list|(
name|bin
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|v
operator|instanceof
name|char
index|[]
condition|)
block|{
return|return
name|valueFactory
operator|.
name|createValue
argument_list|(
operator|new
name|String
argument_list|(
operator|(
name|char
index|[]
operator|)
name|v
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|valueFactory
operator|.
name|createValue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**          * Creates an array of JCR values based on the type.          * @param propValues the given values          * @return and array of JCR values          * @throws RepositoryException if an error occurs          */
annotation|@
name|CheckForNull
specifier|private
name|Value
index|[]
name|createValues
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|propValues
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|Value
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Value
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|propValues
control|)
block|{
name|Value
name|v
init|=
name|createValue
argument_list|(
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|values
operator|.
name|toArray
argument_list|(
operator|new
name|Value
index|[
name|values
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**          * Checks if the given authorizable was synced from the same IDP by comparing the IDP name of the          * {@value #REP_EXTERNAL_ID} property.          *          * todo: allow multiple IDPs on 1 authorizable          *          * @param auth the authorizable.          * @return {@code true} if same IDP.          */
specifier|private
name|boolean
name|isSameIDP
parameter_list|(
annotation|@
name|Nullable
name|Authorizable
name|auth
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|ExternalIdentityRef
name|ref
init|=
name|getIdentityRef
argument_list|(
name|auth
argument_list|)
decl_stmt|;
return|return
name|ref
operator|!=
literal|null
operator|&&
name|idp
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ref
operator|.
name|getProviderName
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * Retrieves the external identity ref from the authorizable      * @param auth the authorizable      * @return the ref      * @throws RepositoryException if an error occurs      */
annotation|@
name|CheckForNull
specifier|private
specifier|static
name|ExternalIdentityRef
name|getIdentityRef
parameter_list|(
annotation|@
name|Nullable
name|Authorizable
name|auth
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|auth
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Value
index|[]
name|v
init|=
name|auth
operator|.
name|getProperty
argument_list|(
name|REP_EXTERNAL_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
operator|||
name|v
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|ExternalIdentityRef
operator|.
name|fromString
argument_list|(
name|v
index|[
literal|0
index|]
operator|.
name|getString
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Robust relative path concatenation.      * @param paths relative paths      * @return the concatenated path      */
specifier|private
specifier|static
name|String
name|joinPaths
parameter_list|(
name|String
modifier|...
name|paths
parameter_list|)
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|i0
init|=
literal|0
decl_stmt|;
name|int
name|i1
init|=
name|path
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i0
operator|<
name|i1
operator|&&
name|path
operator|.
name|charAt
argument_list|(
name|i0
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|i0
operator|++
expr_stmt|;
block|}
while|while
condition|(
name|i1
operator|>
name|i0
operator|&&
name|path
operator|.
name|charAt
argument_list|(
name|i1
operator|-
literal|1
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|i1
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|i1
operator|>
name|i0
condition|)
block|{
if|if
condition|(
name|result
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
name|path
operator|.
name|substring
argument_list|(
name|i0
argument_list|,
name|i1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

