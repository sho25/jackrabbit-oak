begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|ReferenceChangeTrackerTest
block|{
specifier|private
name|ReferenceChangeTracker
name|rct
init|=
operator|new
name|ReferenceChangeTracker
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testGet
parameter_list|()
block|{
name|assertNull
argument_list|(
name|rct
operator|.
name|get
argument_list|(
literal|"old"
argument_list|)
argument_list|)
expr_stmt|;
name|rct
operator|.
name|put
argument_list|(
literal|"old"
argument_list|,
literal|"new"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"new"
argument_list|,
name|rct
operator|.
name|get
argument_list|(
literal|"old"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClear
parameter_list|()
block|{
name|rct
operator|.
name|put
argument_list|(
literal|"old"
argument_list|,
literal|"new"
argument_list|)
expr_stmt|;
name|rct
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|rct
operator|.
name|get
argument_list|(
literal|"old"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReferenceProcessing
parameter_list|()
block|{
name|rct
operator|.
name|processedReference
argument_list|(
literal|"ref"
argument_list|)
expr_stmt|;
name|rct
operator|.
name|processedReference
argument_list|(
literal|"ref2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterators
operator|.
name|elementsEqual
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"ref"
argument_list|,
literal|"ref2"
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|,
name|rct
operator|.
name|getProcessedReferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rct
operator|.
name|removeReferences
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"ref"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterators
operator|.
name|elementsEqual
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"ref2"
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|,
name|rct
operator|.
name|getProcessedReferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

