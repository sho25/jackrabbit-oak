begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|CompositeConfigurationTest
extends|extends
name|AbstractCompositeConfigurationTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"test"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|compositeConfiguration
operator|=
operator|new
name|CompositeConfiguration
argument_list|(
literal|"test"
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
block|{}
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetName
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|NAME
argument_list|,
name|compositeConfiguration
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmpty
parameter_list|()
block|{
name|assertSame
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|compositeConfiguration
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|compositeConfiguration
operator|.
name|getConfigurations
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetDefaultConfig
parameter_list|()
block|{
name|SecurityConfiguration
name|sc
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
decl_stmt|;
name|compositeConfiguration
operator|.
name|setDefaultConfig
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SecurityConfiguration
argument_list|>
name|configurations
init|=
name|compositeConfiguration
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|configurations
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|configurations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sc
argument_list|,
name|configurations
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddConfiguration
parameter_list|()
block|{
name|compositeConfiguration
operator|.
name|addConfiguration
argument_list|(
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
argument_list|)
expr_stmt|;
name|compositeConfiguration
operator|.
name|addConfiguration
argument_list|(
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SecurityConfiguration
argument_list|>
name|configurations
init|=
name|getConfigurations
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|configurations
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|configurations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SecurityConfiguration
name|def
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
decl_stmt|;
name|compositeConfiguration
operator|.
name|setDefaultConfig
argument_list|(
name|def
argument_list|)
expr_stmt|;
name|configurations
operator|=
name|getConfigurations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|configurations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|configurations
operator|.
name|contains
argument_list|(
name|def
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveConfiguration
parameter_list|()
block|{
name|SecurityConfiguration
name|def
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
decl_stmt|;
name|compositeConfiguration
operator|.
name|setDefaultConfig
argument_list|(
name|def
argument_list|)
expr_stmt|;
name|SecurityConfiguration
name|sc
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
decl_stmt|;
name|compositeConfiguration
operator|.
name|addConfiguration
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|compositeConfiguration
operator|.
name|removeConfiguration
argument_list|(
name|def
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SecurityConfiguration
argument_list|>
name|configurations
init|=
name|compositeConfiguration
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|configurations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sc
argument_list|,
name|configurations
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|compositeConfiguration
operator|.
name|removeConfiguration
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|configurations
operator|=
name|compositeConfiguration
operator|.
name|getConfigurations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|configurations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|def
argument_list|,
name|configurations
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

