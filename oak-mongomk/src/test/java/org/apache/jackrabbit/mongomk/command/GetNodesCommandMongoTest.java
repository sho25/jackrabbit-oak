begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|BaseMongoTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|MongoConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|NodeAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|builder
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|model
operator|.
name|CommitMongo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|model
operator|.
name|NodeMongo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|scenario
operator|.
name|SimpleNodeScenario
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:pmarx@adobe.com>Philipp Marx</a>  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"javadoc"
argument_list|)
specifier|public
class|class
name|GetNodesCommandMongoTest
extends|extends
name|BaseMongoTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testGetNodesAfterDeletion
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleNodeScenario
name|scenario
init|=
operator|new
name|SimpleNodeScenario
argument_list|(
name|mongoConnection
argument_list|)
decl_stmt|;
name|String
name|revisionId
init|=
name|scenario
operator|.
name|create
argument_list|()
decl_stmt|;
name|revisionId
operator|=
name|scenario
operator|.
name|delete_A
argument_list|()
expr_stmt|;
name|GetNodesCommandMongo
name|command
init|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/"
argument_list|,
name|revisionId
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Node
name|actual
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|Node
name|expected
init|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : {} }"
argument_list|,
name|revisionId
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|testGetNodeWithMissingLeafNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|expected
init|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%2$s\" : { \"int\" : 1 , \"double\" : 0.123 , \"b#%1$s\" : { \"string\" : \"foo\" , \"e#%2$s\" : { \"array\" : [ 123, null, 123.456, \"for:bar\", true ] } } , \"c#%1$s\" : { \"bool\" : true }, \"d#%2$s\" : { \"null\" : null } } } }"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
decl_stmt|;
name|MongoConnection
name|mockConnection
init|=
name|createMissingNodeScenario
argument_list|(
name|expected
argument_list|,
literal|"/a/c"
argument_list|)
decl_stmt|;
name|GetNodesCommandMongo
name|command
init|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mockConnection
argument_list|,
literal|"/"
argument_list|,
literal|"2"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Node
name|actual
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|testGetNodeWithMissingParentNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|expected
init|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%2$s\" : { \"int\" : 1 , \"double\" : 0.123 , \"b#%1$s\" : { \"string\" : \"foo\" , \"e#%2$s\" : { \"array\" : [ 123, null, 123.456, \"for:bar\", true ] } } , \"c#%1$s\" : { \"bool\" : true }, \"d#%2$s\" : { \"null\" : null } } } }"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
decl_stmt|;
name|MongoConnection
name|mockConnection
init|=
name|createMissingNodeScenario
argument_list|(
name|expected
argument_list|,
literal|"/a"
argument_list|)
decl_stmt|;
name|GetNodesCommandMongo
name|command
init|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mockConnection
argument_list|,
literal|"/"
argument_list|,
literal|"2"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Node
name|actual
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|testGetNodeWithStaleLeafNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|expected
init|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%2$s\" : { \"int\" : 1 , \"double\" : 0.123 , \"b#%1$s\" : { \"string\" : \"foo\" , \"e#%2$s\" : { \"array\" : [ 123, null, 123.456, \"for:bar\", true ] } } , \"c#%1$s\" : { \"bool\" : true }, \"d#%2$s\" : { \"null\" : null } } } }"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
decl_stmt|;
name|MongoConnection
name|mockConnection
init|=
name|createStaleNodeScenario
argument_list|(
name|expected
argument_list|,
literal|"/a/c"
argument_list|)
decl_stmt|;
name|GetNodesCommandMongo
name|command
init|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mockConnection
argument_list|,
literal|"/"
argument_list|,
literal|"2"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Node
name|actual
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|testGetNodeWithStaleParentNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|expected
init|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%2$s\" : { \"int\" : 1 , \"double\" : 0.123 , \"b#%1$s\" : { \"string\" : \"foo\" , \"e#%2$s\" : { \"array\" : [ 123, null, 123.456, \"for:bar\", true ] } } , \"c#%1$s\" : { \"bool\" : true }, \"d#%2$s\" : { \"null\" : null } } } }"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
decl_stmt|;
name|MongoConnection
name|mockConnection
init|=
name|createStaleNodeScenario
argument_list|(
name|expected
argument_list|,
literal|"/a"
argument_list|)
decl_stmt|;
name|GetNodesCommandMongo
name|command
init|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mockConnection
argument_list|,
literal|"/"
argument_list|,
literal|"2"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Node
name|actual
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleGetNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleNodeScenario
name|scenario
init|=
operator|new
name|SimpleNodeScenario
argument_list|(
name|mongoConnection
argument_list|)
decl_stmt|;
name|String
name|firstRevisionId
init|=
name|scenario
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|secondRevisionId
init|=
name|scenario
operator|.
name|update_A_and_add_D_and_E
argument_list|()
decl_stmt|;
name|GetNodesCommandMongo
name|command
init|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/"
argument_list|,
name|firstRevisionId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Node
name|actual
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|Node
name|expected
init|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a\" : {} } }"
argument_list|,
name|firstRevisionId
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/"
argument_list|,
name|secondRevisionId
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|actual
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|expected
operator|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a\" : {} } }"
argument_list|,
name|firstRevisionId
argument_list|,
name|secondRevisionId
argument_list|)
argument_list|)
expr_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/"
argument_list|,
name|firstRevisionId
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|actual
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|expected
operator|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%1$s\" : { \"int\" : 1 , \"b\" : {} , \"c\" : {} } } }"
argument_list|,
name|firstRevisionId
argument_list|)
argument_list|)
expr_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/"
argument_list|,
name|secondRevisionId
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|actual
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|expected
operator|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%2$s\" : { \"int\" : 1 , \"double\" : 0.123, \"b\" : {} , \"c\" : {} , \"d\" : {} } } }"
argument_list|,
name|firstRevisionId
argument_list|,
name|secondRevisionId
argument_list|)
argument_list|)
expr_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/"
argument_list|,
name|firstRevisionId
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|actual
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|expected
operator|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%1$s\" : { \"int\" : 1 , \"b#%1$s\" : { \"string\" : \"foo\" } , \"c#%1$s\" : { \"bool\" : true } } } }"
argument_list|,
name|firstRevisionId
argument_list|)
argument_list|)
expr_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/"
argument_list|,
name|secondRevisionId
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|actual
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|expected
operator|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%2$s\" : { \"int\" : 1 , \"double\" : 0.123 , \"b#%2$s\" : { \"string\" : \"foo\" , \"e\" : {} } , \"c#%1$s\" : { \"bool\" : true }, \"d#%2$s\" : { \"null\" : null } } } }"
argument_list|,
name|firstRevisionId
argument_list|,
name|secondRevisionId
argument_list|)
argument_list|)
expr_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/"
argument_list|,
name|firstRevisionId
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|actual
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|expected
operator|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%1$s\" : { \"int\" : 1 , \"b#%1$s\" : { \"string\" : \"foo\" } , \"c#%1$s\" : { \"bool\" : true } } } }"
argument_list|,
name|firstRevisionId
argument_list|)
argument_list|)
expr_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/"
argument_list|,
name|secondRevisionId
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|actual
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|expected
operator|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%2$s\" : { \"int\" : 1 , \"double\" : 0.123 , \"b#%2$s\" : { \"string\" : \"foo\" , \"e#%2$s\" : { \"array\" : [ 123, null, 123.456, \"for:bar\", true ] } } , \"c#%1$s\" : { \"bool\" : true }, \"d#%2$s\" : { \"null\" : null } } } }"
argument_list|,
name|firstRevisionId
argument_list|,
name|secondRevisionId
argument_list|)
argument_list|)
expr_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
specifier|private
name|MongoConnection
name|createMissingNodeScenario
parameter_list|(
name|Node
name|expected
parameter_list|,
name|String
name|missingPath
parameter_list|)
block|{
name|BasicDBList
name|results1
init|=
operator|new
name|BasicDBList
argument_list|()
decl_stmt|;
name|BasicDBList
name|results2
init|=
operator|new
name|BasicDBList
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|NodeMongo
argument_list|>
name|expectedNodeMongos
init|=
name|NodeMongo
operator|.
name|fromNodes
argument_list|(
name|expected
operator|.
name|getDescendants
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeMongo
name|nodeMongo
range|:
name|expectedNodeMongos
control|)
block|{
name|BasicDBObject
name|groupDbObject
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|groupDbObject
operator|.
name|put
argument_list|(
literal|"result"
argument_list|,
name|nodeMongo
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nodeMongo
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|missingPath
argument_list|)
condition|)
block|{
name|results1
operator|.
name|add
argument_list|(
name|groupDbObject
argument_list|)
expr_stmt|;
block|}
name|results2
operator|.
name|add
argument_list|(
name|groupDbObject
argument_list|)
expr_stmt|;
block|}
name|DBCollection
name|mockNodeCollection
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|DBCollection
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockNodeCollection
operator|.
name|group
argument_list|(
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|DBObject
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|DBObject
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|DBObject
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|results1
argument_list|)
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockNodeCollection
operator|.
name|group
argument_list|(
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|DBObject
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|DBObject
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|DBObject
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|results2
argument_list|)
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mockNodeCollection
argument_list|)
expr_stmt|;
name|CommitMongo
name|firstCommit
init|=
operator|new
name|CommitMongo
argument_list|()
decl_stmt|;
name|firstCommit
operator|.
name|setAffectedPaths
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"/"
block|,
literal|"/a"
block|,
literal|"/a/b"
block|,
literal|"/a/c"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|firstCommit
operator|.
name|setRevisionId
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|CommitMongo
name|secondCommit
init|=
operator|new
name|CommitMongo
argument_list|()
decl_stmt|;
name|secondCommit
operator|.
name|setAffectedPaths
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"/a"
block|,
literal|"/a/d"
block|,
literal|"/a/b/e"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|secondCommit
operator|.
name|setRevisionId
argument_list|(
literal|2L
argument_list|)
expr_stmt|;
name|DBCursor
name|mockDbCursor
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|DBCursor
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockDbCursor
operator|.
name|sort
argument_list|(
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|DBObject
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockDbCursor
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockDbCursor
operator|.
name|limit
argument_list|(
name|EasyMock
operator|.
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockDbCursor
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockDbCursor
operator|.
name|hasNext
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockDbCursor
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|firstCommit
argument_list|)
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockDbCursor
operator|.
name|hasNext
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockDbCursor
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|secondCommit
argument_list|)
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockDbCursor
operator|.
name|hasNext
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mockDbCursor
argument_list|)
expr_stmt|;
name|DBCollection
name|mockCommitCollection
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|DBCollection
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockCommitCollection
operator|.
name|find
argument_list|(
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|DBObject
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockDbCursor
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mockCommitCollection
argument_list|)
expr_stmt|;
name|MongoConnection
name|mockConnection
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MongoConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockConnection
operator|.
name|getNodeCollection
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockNodeCollection
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockConnection
operator|.
name|getCommitCollection
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockCommitCollection
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mockConnection
argument_list|)
expr_stmt|;
return|return
name|mockConnection
return|;
block|}
specifier|private
name|MongoConnection
name|createStaleNodeScenario
parameter_list|(
name|Node
name|expected
parameter_list|,
name|String
name|stalePath
parameter_list|)
block|{
name|BasicDBList
name|results1
init|=
operator|new
name|BasicDBList
argument_list|()
decl_stmt|;
name|BasicDBList
name|results2
init|=
operator|new
name|BasicDBList
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|NodeMongo
argument_list|>
name|expectedNodeMongos
init|=
name|NodeMongo
operator|.
name|fromNodes
argument_list|(
name|expected
operator|.
name|getDescendants
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeMongo
name|nodeMongo
range|:
name|expectedNodeMongos
control|)
block|{
name|BasicDBObject
name|groupDbObject
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|groupDbObject
operator|.
name|put
argument_list|(
literal|"result"
argument_list|,
name|nodeMongo
argument_list|)
expr_stmt|;
name|results2
operator|.
name|add
argument_list|(
name|groupDbObject
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeMongo
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|stalePath
argument_list|)
condition|)
block|{
name|NodeMongo
name|nodeMongoStale
init|=
operator|new
name|NodeMongo
argument_list|()
decl_stmt|;
name|nodeMongoStale
operator|.
name|putAll
argument_list|(
name|nodeMongo
operator|.
name|toMap
argument_list|()
argument_list|)
expr_stmt|;
name|nodeMongoStale
operator|.
name|setRevisionId
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
block|}
name|results1
operator|.
name|add
argument_list|(
name|groupDbObject
argument_list|)
expr_stmt|;
block|}
name|DBCollection
name|mockNodeCollection
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|DBCollection
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockNodeCollection
operator|.
name|group
argument_list|(
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|DBObject
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|DBObject
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|DBObject
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|results1
argument_list|)
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockNodeCollection
operator|.
name|group
argument_list|(
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|DBObject
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|DBObject
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|DBObject
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|results2
argument_list|)
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mockNodeCollection
argument_list|)
expr_stmt|;
name|CommitMongo
name|firstCommit
init|=
operator|new
name|CommitMongo
argument_list|()
decl_stmt|;
name|firstCommit
operator|.
name|setAffectedPaths
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"/"
block|,
literal|"/a"
block|,
literal|"/a/b"
block|,
literal|"/a/c"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|firstCommit
operator|.
name|setRevisionId
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|CommitMongo
name|secondCommit
init|=
operator|new
name|CommitMongo
argument_list|()
decl_stmt|;
name|secondCommit
operator|.
name|setAffectedPaths
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"/a"
block|,
literal|"/a/d"
block|,
literal|"/a/b/e"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|secondCommit
operator|.
name|setRevisionId
argument_list|(
literal|2L
argument_list|)
expr_stmt|;
name|DBCursor
name|mockDbCursor
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|DBCursor
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockDbCursor
operator|.
name|sort
argument_list|(
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|DBObject
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockDbCursor
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockDbCursor
operator|.
name|limit
argument_list|(
name|EasyMock
operator|.
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockDbCursor
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockDbCursor
operator|.
name|hasNext
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockDbCursor
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|firstCommit
argument_list|)
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockDbCursor
operator|.
name|hasNext
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockDbCursor
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|secondCommit
argument_list|)
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockDbCursor
operator|.
name|hasNext
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mockDbCursor
argument_list|)
expr_stmt|;
name|DBCollection
name|mockCommitCollection
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|DBCollection
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockCommitCollection
operator|.
name|find
argument_list|(
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|DBObject
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockDbCursor
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mockCommitCollection
argument_list|)
expr_stmt|;
name|MongoConnection
name|mockConnection
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MongoConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockConnection
operator|.
name|getNodeCollection
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockNodeCollection
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockConnection
operator|.
name|getCommitCollection
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockCommitCollection
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mockConnection
argument_list|)
expr_stmt|;
return|return
name|mockConnection
return|;
block|}
block|}
end_class

end_unit

