begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|observation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|UnsupportedRepositoryOperationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
import|;
end_import

begin_class
specifier|public
class|class
name|EventImpl
implements|implements
name|Event
block|{
specifier|private
specifier|final
name|int
name|type
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|String
name|userID
decl_stmt|;
specifier|private
specifier|final
name|String
name|identifier
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|info
decl_stmt|;
specifier|private
specifier|final
name|long
name|date
decl_stmt|;
specifier|public
name|EventImpl
parameter_list|(
name|int
name|type
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|userID
parameter_list|,
name|String
name|identifier
parameter_list|,
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|info
parameter_list|,
name|long
name|date
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|userID
operator|=
name|userID
expr_stmt|;
name|this
operator|.
name|identifier
operator|=
name|identifier
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
name|this
operator|.
name|date
operator|=
name|date
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPath
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|path
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUserID
parameter_list|()
block|{
return|return
name|userID
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIdentifier
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|identifier
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|getInfo
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|info
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUserData
parameter_list|()
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|(
literal|"User data not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDate
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|date
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|other
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|other
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|EventImpl
name|that
init|=
operator|(
name|EventImpl
operator|)
name|other
decl_stmt|;
return|return
name|date
operator|==
name|that
operator|.
name|date
operator|&&
name|type
operator|==
name|that
operator|.
name|type
operator|&&
operator|(
name|identifier
operator|==
literal|null
condition|?
name|that
operator|.
name|identifier
operator|==
literal|null
else|:
name|identifier
operator|.
name|equals
argument_list|(
name|that
operator|.
name|identifier
argument_list|)
operator|)
operator|&&
operator|(
name|info
operator|==
literal|null
condition|?
name|that
operator|.
name|info
operator|==
literal|null
else|:
name|info
operator|.
name|equals
argument_list|(
name|that
operator|.
name|info
argument_list|)
operator|)
operator|&&
operator|(
name|path
operator|==
literal|null
condition|?
name|that
operator|.
name|path
operator|==
literal|null
else|:
name|path
operator|.
name|equals
argument_list|(
name|that
operator|.
name|path
argument_list|)
operator|)
operator|&&
operator|(
name|userID
operator|==
literal|null
condition|?
name|that
operator|.
name|userID
operator|==
literal|null
else|:
name|userID
operator|.
name|equals
argument_list|(
name|that
operator|.
name|userID
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|type
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|path
operator|==
literal|null
condition|?
literal|0
else|:
name|path
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|userID
operator|==
literal|null
condition|?
literal|0
else|:
name|userID
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|identifier
operator|==
literal|null
condition|?
literal|0
else|:
name|identifier
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|info
operator|==
literal|null
condition|?
literal|0
else|:
name|info
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|date
operator|^
operator|(
name|date
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"EventImpl{"
operator|+
literal|"type="
operator|+
name|type
operator|+
literal|", path='"
operator|+
name|path
operator|+
literal|'\''
operator|+
literal|", userID='"
operator|+
name|userID
operator|+
literal|'\''
operator|+
literal|", identifier='"
operator|+
name|identifier
operator|+
literal|'\''
operator|+
literal|", info="
operator|+
name|info
operator|+
literal|", date="
operator|+
name|date
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

