begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalGroupRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalUser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|basic
operator|.
name|DefaultSyncConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|basic
operator|.
name|DefaultSyncContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|basic
operator|.
name|DefaultSyncResultImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|basic
operator|.
name|DefaultSyncedIdentity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Extension of the {@code DefaultSyncContext} that doesn't synchronize group  * membership of new external users into the user management of the repository.  * Instead it will only synchronize the principal names up to the configured depths.  * In combination with the a dedicated {@code PrincipalConfiguration} this allows  * to benefit from the repository's authorization model (which is solely  * based on principals) i.e. full compatibility with the default approach without  * the complication of synchronizing user management information into the repository,  * when user management is effectively take care of by the third party system.  *  * With the {@link org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler}  * this feature can be turned on using  * {@link org.apache.jackrabbit.oak.spi.security.authentication.external.basic.DefaultSyncConfig.User#setDynamicMembership(boolean)}  *  * Note: users and groups that have been synchronized before the dynamic membership  * feature has been enabled will continue to be synchronized in the default way  * and this context doesn't take effect.  *  * @since Oak 1.5.3  */
end_comment

begin_class
specifier|public
class|class
name|DynamicSyncContext
extends|extends
name|DefaultSyncContext
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DynamicSyncContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|DynamicSyncContext
parameter_list|(
annotation|@
name|Nonnull
name|DefaultSyncConfig
name|config
parameter_list|,
annotation|@
name|Nonnull
name|ExternalIdentityProvider
name|idp
parameter_list|,
annotation|@
name|Nonnull
name|UserManager
name|userManager
parameter_list|,
annotation|@
name|Nonnull
name|ValueFactory
name|valueFactory
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|,
name|idp
argument_list|,
name|userManager
argument_list|,
name|valueFactory
argument_list|)
expr_stmt|;
block|}
comment|//--------------------------------------------------------< SyncContext>---
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|SyncResult
name|sync
parameter_list|(
annotation|@
name|Nonnull
name|ExternalIdentity
name|identity
parameter_list|)
throws|throws
name|SyncException
block|{
if|if
condition|(
name|identity
operator|instanceof
name|ExternalUser
condition|)
block|{
return|return
name|super
operator|.
name|sync
argument_list|(
name|identity
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|identity
operator|instanceof
name|ExternalGroup
condition|)
block|{
try|try
block|{
name|Group
name|group
init|=
name|getAuthorizable
argument_list|(
name|identity
argument_list|,
name|Group
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
comment|// group has been synchronized before -> continue updating for consistency.
return|return
name|syncGroup
argument_list|(
operator|(
name|ExternalGroup
operator|)
name|identity
argument_list|,
name|group
argument_list|)
return|;
block|}
else|else
block|{
comment|// external group has never been synchronized before:
comment|// don't sync external groups into the repository internal user management
comment|// but limit synchronized information to group-principals stored
comment|// separately with each external user such that the subject gets
comment|// properly populated upon login
name|ExternalIdentityRef
name|ref
init|=
name|identity
operator|.
name|getExternalId
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"ExternalGroup {}: Not synchronized as authorizable Group into the repository."
argument_list|,
name|ref
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|SyncResult
operator|.
name|Status
name|status
init|=
operator|(
name|isSameIDP
argument_list|(
name|ref
argument_list|)
operator|)
condition|?
name|SyncResult
operator|.
name|Status
operator|.
name|NOP
else|:
name|SyncResult
operator|.
name|Status
operator|.
name|FOREIGN
decl_stmt|;
return|return
operator|new
name|DefaultSyncResultImpl
argument_list|(
operator|new
name|DefaultSyncedIdentity
argument_list|(
name|identity
operator|.
name|getId
argument_list|()
argument_list|,
name|ref
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|status
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SyncException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"identity must be user or group but was: "
operator|+
name|identity
argument_list|)
throw|;
block|}
block|}
comment|//-------------------------------------------------< DefaultSyncContext>---
annotation|@
name|Override
specifier|protected
name|void
name|syncMembership
parameter_list|(
annotation|@
name|Nonnull
name|ExternalIdentity
name|external
parameter_list|,
annotation|@
name|Nonnull
name|Authorizable
name|auth
parameter_list|,
name|long
name|depth
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|auth
operator|.
name|isGroup
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|auth
operator|.
name|hasProperty
argument_list|(
name|REP_LAST_SYNCED
argument_list|)
operator|&&
operator|!
name|auth
operator|.
name|hasProperty
argument_list|(
name|ExternalIdentityConstants
operator|.
name|REP_EXTERNAL_PRINCIPAL_NAMES
argument_list|)
condition|)
block|{
comment|// user has been synchronized before dynamic membership has been turned on
name|super
operator|.
name|syncMembership
argument_list|(
name|external
argument_list|,
name|auth
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// retrieve membership of the given external user (up to the configured
comment|// depth) and add (or replace) the rep:externalPrincipalNames property
comment|// with the accurate collection of principal names.
try|try
block|{
name|Value
index|[]
name|vs
decl_stmt|;
if|if
condition|(
name|depth
operator|<=
literal|0
condition|)
block|{
name|vs
operator|=
operator|new
name|Value
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|principalsNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|collectPrincipalNames
argument_list|(
name|principalsNames
argument_list|,
name|external
operator|.
name|getDeclaredGroups
argument_list|()
argument_list|,
name|depth
argument_list|)
expr_stmt|;
name|vs
operator|=
name|createValues
argument_list|(
name|principalsNames
argument_list|)
expr_stmt|;
block|}
name|auth
operator|.
name|setProperty
argument_list|(
name|ExternalIdentityConstants
operator|.
name|REP_EXTERNAL_PRINCIPAL_NAMES
argument_list|,
name|vs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExternalIdentityException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to synchronize membership information for external identity "
operator|+
name|external
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|applyMembership
parameter_list|(
annotation|@
name|Nonnull
name|Authorizable
name|member
parameter_list|,
annotation|@
name|Nonnull
name|Set
argument_list|<
name|String
argument_list|>
name|groups
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Dynamic membership sync enabled => omit setting auto-membership for {} "
argument_list|,
name|member
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Recursively collect the principal names of the given declared group      * references up to the given depth.      *      * @param principalNames The set used to collect the names of the group principals.      * @param declaredGroupIdRefs The declared group references for a user or a group.      * @param depth Configured membership nesting; the recursion will be stopped once depths is< 1.      * @throws ExternalIdentityException If an error occurs while resolving the the external group references.      */
specifier|private
name|void
name|collectPrincipalNames
parameter_list|(
annotation|@
name|Nonnull
name|Set
argument_list|<
name|String
argument_list|>
name|principalNames
parameter_list|,
annotation|@
name|Nonnull
name|Iterable
argument_list|<
name|ExternalIdentityRef
argument_list|>
name|declaredGroupIdRefs
parameter_list|,
name|long
name|depth
parameter_list|)
throws|throws
name|ExternalIdentityException
block|{
for|for
control|(
name|ExternalIdentityRef
name|ref
range|:
name|declaredGroupIdRefs
control|)
block|{
if|if
condition|(
name|ref
operator|instanceof
name|ExternalGroupRef
operator|&&
name|depth
operator|<
literal|2
condition|)
block|{
comment|//in this case we can avoid calling idp.getIdentity(), saving a roundtrip
name|principalNames
operator|.
name|add
argument_list|(
name|ref
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ExternalIdentity
name|extId
init|=
name|idp
operator|.
name|getIdentity
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|extId
operator|instanceof
name|ExternalGroup
condition|)
block|{
name|principalNames
operator|.
name|add
argument_list|(
name|ref
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// recursively apply further membership until the configured depth is reached
if|if
condition|(
name|depth
operator|>
literal|1
condition|)
block|{
name|collectPrincipalNames
argument_list|(
name|principalNames
argument_list|,
name|extId
operator|.
name|getDeclaredGroups
argument_list|()
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Not an external group ({}) => ignore."
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

