begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|PropertyIndexTest
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MANY
init|=
literal|100
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testPropertyLookup
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|MemoryNodeState
operator|.
name|EMPTY_NODE
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
name|builder
operator|=
name|before
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"abc"
argument_list|,
literal|"def"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
comment|// plus lots of dummy content to highlight the benefit of indexing
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MANY
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|)
expr_stmt|;
block|}
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// First check lookups without an index
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|after
argument_list|)
decl_stmt|;
name|long
name|withoutIndex
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|lookup
operator|.
name|find
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|lookup
operator|.
name|find
argument_list|(
literal|"foo"
argument_list|,
literal|"def"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|lookup
operator|.
name|find
argument_list|(
literal|"foo"
argument_list|,
literal|"ghi"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MANY
argument_list|,
name|lookup
operator|.
name|find
argument_list|(
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|withoutIndex
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|withoutIndex
expr_stmt|;
comment|// ... then see how adding an index affects the code
name|lookup
operator|=
operator|new
name|PropertyIndexLookup
argument_list|(
operator|new
name|PropertyIndexHook
argument_list|()
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|withIndex
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|lookup
operator|.
name|find
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|lookup
operator|.
name|find
argument_list|(
literal|"foo"
argument_list|,
literal|"def"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|lookup
operator|.
name|find
argument_list|(
literal|"foo"
argument_list|,
literal|"ghi"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MANY
argument_list|,
name|lookup
operator|.
name|find
argument_list|(
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|withIndex
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|withIndex
expr_stmt|;
comment|// System.out.println("Index performance ratio: " + withoutIndex/withIndex);
comment|// assertTrue(withoutIndex> withIndex);
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomConfigPropertyLookup
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|MemoryNodeState
operator|.
name|EMPTY_NODE
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|child
argument_list|(
literal|"fooIndex"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"pnames"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"extrafoo"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
name|builder
operator|=
name|before
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"extrafoo"
argument_list|,
literal|"pqr"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"abc"
argument_list|,
literal|"def"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
comment|// plus lots of dummy content to highlight the benefit of indexing
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MANY
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|)
expr_stmt|;
block|}
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// First check lookups without an index
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|after
argument_list|)
decl_stmt|;
name|long
name|withoutIndex
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|lookup
operator|.
name|find
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|lookup
operator|.
name|find
argument_list|(
literal|"foo"
argument_list|,
literal|"def"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|lookup
operator|.
name|find
argument_list|(
literal|"foo"
argument_list|,
literal|"ghi"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MANY
argument_list|,
name|lookup
operator|.
name|find
argument_list|(
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|lookup
operator|.
name|find
argument_list|(
literal|"extrafoo"
argument_list|,
literal|"pqr"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|lookup
operator|.
name|find
argument_list|(
literal|"pqr"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|withoutIndex
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|withoutIndex
expr_stmt|;
comment|// ... then see how adding an index affects the code
name|lookup
operator|=
operator|new
name|PropertyIndexLookup
argument_list|(
operator|new
name|PropertyIndexHook
argument_list|()
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|withIndex
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|lookup
operator|.
name|find
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|lookup
operator|.
name|find
argument_list|(
literal|"foo"
argument_list|,
literal|"def"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|lookup
operator|.
name|find
argument_list|(
literal|"foo"
argument_list|,
literal|"ghi"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MANY
argument_list|,
name|lookup
operator|.
name|find
argument_list|(
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|lookup
operator|.
name|find
argument_list|(
literal|"extrafoo"
argument_list|,
literal|"pqr"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|lookup
operator|.
name|find
argument_list|(
literal|"pqr"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|withIndex
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|withIndex
expr_stmt|;
comment|// System.out.println("Index performance ratio: " + withoutIndex/withIndex);
comment|// assertTrue(withoutIndex> withIndex);
block|}
block|}
end_class

end_unit

