begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|content
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ResultRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteResults
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_class
class|class
name|ContentRemoteResults
implements|implements
name|RemoteResults
block|{
specifier|private
specifier|final
name|ContentRemoteBinaries
name|binaries
decl_stmt|;
specifier|private
specifier|final
name|Result
name|results
decl_stmt|;
specifier|public
name|ContentRemoteResults
parameter_list|(
name|ContentRemoteBinaries
name|binaries
parameter_list|,
name|Result
name|results
parameter_list|)
block|{
name|this
operator|.
name|binaries
operator|=
name|binaries
expr_stmt|;
name|this
operator|.
name|results
operator|=
name|results
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTotal
parameter_list|()
block|{
return|return
name|results
operator|.
name|getSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|results
operator|.
name|getColumnNames
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getSelectors
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|results
operator|.
name|getSelectorNames
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|RemoteResult
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|getResults
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|private
name|Iterable
argument_list|<
name|RemoteResult
argument_list|>
name|getResults
parameter_list|()
block|{
name|List
argument_list|<
name|RemoteResult
argument_list|>
name|results
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|ResultRow
name|row
range|:
name|this
operator|.
name|results
operator|.
name|getRows
argument_list|()
control|)
block|{
name|results
operator|.
name|add
argument_list|(
operator|new
name|ContentRemoteResult
argument_list|(
name|binaries
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
block|}
end_class

end_unit

