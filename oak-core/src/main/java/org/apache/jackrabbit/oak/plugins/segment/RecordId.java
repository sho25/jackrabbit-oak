begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|RecordId
implements|implements
name|Comparable
argument_list|<
name|RecordId
argument_list|>
block|{
specifier|public
specifier|static
name|RecordId
index|[]
name|EMPTY_ARRAY
init|=
operator|new
name|RecordId
index|[
literal|0
index|]
decl_stmt|;
specifier|public
specifier|static
name|RecordId
name|fromString
parameter_list|(
name|SegmentTracker
name|factory
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|int
name|colon
init|=
name|id
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|colon
operator|!=
operator|-
literal|1
condition|)
block|{
name|UUID
name|uuid
init|=
name|UUID
operator|.
name|fromString
argument_list|(
name|id
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|colon
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|RecordId
argument_list|(
name|factory
operator|.
name|getSegmentId
argument_list|(
name|uuid
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|uuid
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|id
operator|.
name|substring
argument_list|(
name|colon
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad RecordId: "
operator|+
name|id
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|final
name|SegmentId
name|segmentId
decl_stmt|;
specifier|private
specifier|final
name|int
name|offset
decl_stmt|;
specifier|public
name|RecordId
parameter_list|(
name|SegmentId
name|segmentId
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|offset
operator|<
name|Segment
operator|.
name|MAX_SEGMENT_SIZE
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|offset
operator|==
name|Segment
operator|.
name|align
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|segmentId
operator|=
name|checkNotNull
argument_list|(
name|segmentId
argument_list|)
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
specifier|public
name|SegmentId
name|getSegmentId
parameter_list|()
block|{
return|return
name|segmentId
return|;
block|}
specifier|public
name|int
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
specifier|public
name|Segment
name|getSegment
parameter_list|()
block|{
return|return
name|segmentId
operator|.
name|getSegment
argument_list|()
return|;
block|}
comment|//--------------------------------------------------------< Comparable>--
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|RecordId
name|that
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|that
argument_list|)
expr_stmt|;
name|int
name|diff
init|=
name|segmentId
operator|.
name|compareTo
argument_list|(
name|that
operator|.
name|segmentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|==
literal|0
condition|)
block|{
name|diff
operator|=
name|offset
operator|-
name|that
operator|.
name|offset
expr_stmt|;
block|}
return|return
name|diff
return|;
block|}
comment|//------------------------------------------------------------< Object>--
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|segmentId
operator|+
literal|":"
operator|+
name|offset
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|segmentId
operator|.
name|hashCode
argument_list|()
operator|^
name|offset
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|object
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|RecordId
condition|)
block|{
name|RecordId
name|that
init|=
operator|(
name|RecordId
operator|)
name|object
decl_stmt|;
return|return
name|offset
operator|==
name|that
operator|.
name|offset
operator|&&
name|segmentId
operator|.
name|equals
argument_list|(
name|that
operator|.
name|segmentId
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

