begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|counter
operator|.
name|ApproximateCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_class
annotation|@
name|Component
annotation|@
name|Service
specifier|public
class|class
name|PropertyIndexInfoProvider
implements|implements
name|IndexInfoProvider
block|{
annotation|@
name|Reference
specifier|private
name|NodeStore
name|nodeStore
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
name|PropertyIndexInfoProvider
parameter_list|()
block|{
comment|//For DS
block|}
specifier|public
name|PropertyIndexInfoProvider
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|)
block|{
name|this
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|PropertyIndexEditorProvider
operator|.
name|TYPE
return|;
block|}
annotation|@
name|Override
specifier|public
name|IndexInfo
name|getInfo
parameter_list|(
name|String
name|indexPath
parameter_list|)
throws|throws
name|IOException
block|{
name|NodeState
name|idxState
init|=
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|nodeStore
operator|.
name|getRoot
argument_list|()
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|PropertyIndexEditorProvider
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|idxState
operator|.
name|getString
argument_list|(
name|IndexConstants
operator|.
name|TYPE_PROPERTY_NAME
argument_list|)
argument_list|)
argument_list|,
literal|"Index definition at [%s] is not of type 'property'"
argument_list|,
name|indexPath
argument_list|)
expr_stmt|;
name|PropertyIndexInfo
name|info
init|=
operator|new
name|PropertyIndexInfo
argument_list|(
name|indexPath
argument_list|)
decl_stmt|;
name|computeCountEstimate
argument_list|(
name|info
argument_list|,
name|idxState
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
specifier|private
name|void
name|computeCountEstimate
parameter_list|(
name|PropertyIndexInfo
name|info
parameter_list|,
name|NodeState
name|idxState
parameter_list|)
block|{
name|long
name|count
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|cne
range|:
name|idxState
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
if|if
condition|(
name|NodeStateUtils
operator|.
name|isHidden
argument_list|(
name|cne
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|NodeState
name|indexData
init|=
name|cne
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|long
name|estimate
init|=
name|ApproximateCounter
operator|.
name|getCountSync
argument_list|(
name|indexData
argument_list|)
decl_stmt|;
if|if
condition|(
name|estimate
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
name|count
operator|=
literal|0
expr_stmt|;
block|}
name|count
operator|+=
name|estimate
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indexData
operator|.
name|getChildNodeCount
argument_list|(
literal|1
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|//If we cannot get estimate then at least try to see if any index data is there or not
name|count
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
name|info
operator|.
name|estimatedCount
operator|=
name|count
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|String
name|indexPath
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
class|class
name|PropertyIndexInfo
implements|implements
name|IndexInfo
block|{
specifier|private
specifier|final
name|String
name|indexPath
decl_stmt|;
name|long
name|estimatedCount
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|PropertyIndexInfo
parameter_list|(
name|String
name|indexPath
parameter_list|)
block|{
name|this
operator|.
name|indexPath
operator|=
name|indexPath
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIndexPath
parameter_list|()
block|{
return|return
name|indexPath
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|PropertyIndexEditorProvider
operator|.
name|TYPE
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAsyncLaneName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLastUpdatedTime
parameter_list|()
block|{
return|return
operator|-
literal|2
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getIndexedUpToTime
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getEstimatedEntryCount
parameter_list|()
block|{
return|return
name|estimatedCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSizeInBytes
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasIndexDefinitionChangedWithoutReindexing
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

