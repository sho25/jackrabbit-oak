begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_class
specifier|final
class|class
name|EntryPredicate
block|{
specifier|private
name|EntryPredicate
parameter_list|()
block|{}
annotation|@
name|NotNull
specifier|static
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|create
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|)
block|{
if|if
condition|(
name|oakPath
operator|==
literal|null
condition|)
block|{
return|return
name|permissionEntry
lambda|->
name|permissionEntry
operator|.
name|matches
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|permissionEntry
lambda|->
name|permissionEntry
operator|.
name|matches
argument_list|(
name|oakPath
argument_list|)
return|;
block|}
block|}
annotation|@
name|NotNull
specifier|static
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|create
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|)
block|{
if|if
condition|(
operator|!
name|tree
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// target node does not exist (anymore) in this workspace
comment|// use best effort calculation based on the item path.
name|String
name|predicatePath
init|=
operator|(
name|property
operator|==
literal|null
operator|)
condition|?
name|tree
operator|.
name|getPath
argument_list|()
else|:
name|PathUtils
operator|.
name|concat
argument_list|(
name|tree
operator|.
name|getPath
argument_list|()
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|create
argument_list|(
name|predicatePath
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|permissionEntry
lambda|->
name|permissionEntry
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
name|property
argument_list|)
return|;
block|}
block|}
annotation|@
name|NotNull
specifier|static
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|createParent
parameter_list|(
annotation|@
name|NotNull
name|String
name|treePath
parameter_list|,
annotation|@
name|Nullable
name|Tree
name|parentTree
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Permissions
operator|.
name|respectParentPermissions
argument_list|(
name|permissions
argument_list|)
condition|)
block|{
return|return
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
return|;
block|}
if|if
condition|(
name|treePath
operator|.
name|isEmpty
argument_list|()
operator|||
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|treePath
argument_list|)
condition|)
block|{
return|return
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|parentTree
operator|!=
literal|null
operator|&&
name|parentTree
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|permissionEntry
lambda|->
name|permissionEntry
operator|.
name|appliesTo
argument_list|(
name|parentTree
operator|.
name|getPath
argument_list|()
argument_list|)
operator|&&
name|permissionEntry
operator|.
name|matches
argument_list|(
name|parentTree
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
name|String
name|parentPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|treePath
argument_list|)
decl_stmt|;
return|return
name|permissionEntry
lambda|->
name|permissionEntry
operator|.
name|appliesTo
argument_list|(
name|parentPath
argument_list|)
operator|&&
name|permissionEntry
operator|.
name|matches
argument_list|(
name|parentPath
argument_list|)
return|;
block|}
block|}
annotation|@
name|NotNull
specifier|static
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|createParent
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Permissions
operator|.
name|respectParentPermissions
argument_list|(
name|permissions
argument_list|)
condition|)
block|{
return|return
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|tree
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|createParent
argument_list|(
name|tree
operator|.
name|getPath
argument_list|()
argument_list|,
name|tree
operator|.
name|getParent
argument_list|()
argument_list|,
name|permissions
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|tree
operator|.
name|isRoot
argument_list|()
condition|)
block|{
name|Tree
name|parentTree
init|=
name|tree
operator|.
name|getParent
argument_list|()
decl_stmt|;
return|return
name|permissionEntry
lambda|->
name|permissionEntry
operator|.
name|appliesTo
argument_list|(
name|parentTree
operator|.
name|getPath
argument_list|()
argument_list|)
operator|&&
name|permissionEntry
operator|.
name|matches
argument_list|(
name|parentTree
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

