begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|DECLARING_NODE_TYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NODE_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|PROPERTY_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|TYPE_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|UNIQUE_PROPERTY_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|reference
operator|.
name|NodeReferenceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|TreeUtil
import|;
end_import

begin_comment
comment|/**  * TODO document  */
end_comment

begin_class
specifier|public
class|class
name|IndexUtils
block|{
specifier|private
name|IndexUtils
parameter_list|()
block|{     }
specifier|public
specifier|static
name|NodeBuilder
name|getOrCreateOakIndex
parameter_list|(
name|NodeBuilder
name|root
parameter_list|)
block|{
name|NodeBuilder
name|index
decl_stmt|;
if|if
condition|(
operator|!
name|root
operator|.
name|hasChildNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
condition|)
block|{
name|index
operator|=
name|root
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
expr_stmt|;
comment|// TODO: use property node type name
name|index
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|index
operator|=
name|root
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
comment|/**      * Create a new property index definition below the given {@code indexNode}.      *      * @param index                  The oak:index node builder      * @param indexDefName           The name of the new property index.      * @param reindex                {@code true} if the the reindex flag should be turned on.      * @param unique                 {@code true} if the index is expected the assert property      *                               uniqueness.      * @param propertyNames          The property names that should be indexed.      * @param declaringNodeTypeNames The declaring node type names or {@code null}.      * @return the NodeBuilder of the new index definition.      */
specifier|public
specifier|static
name|NodeBuilder
name|createIndexDefinition
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|index
parameter_list|,
annotation|@
name|Nonnull
name|String
name|indexDefName
parameter_list|,
name|boolean
name|reindex
parameter_list|,
name|boolean
name|unique
parameter_list|,
annotation|@
name|Nonnull
name|Collection
argument_list|<
name|String
argument_list|>
name|propertyNames
parameter_list|,
annotation|@
name|Nullable
name|Collection
argument_list|<
name|String
argument_list|>
name|declaringNodeTypeNames
parameter_list|)
block|{
name|NodeBuilder
name|entry
init|=
name|index
operator|.
name|child
argument_list|(
name|indexDefName
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|,
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|,
name|PropertyIndexEditorProvider
operator|.
name|TYPE
argument_list|)
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
name|reindex
argument_list|)
decl_stmt|;
if|if
condition|(
name|unique
condition|)
block|{
name|entry
operator|.
name|setProperty
argument_list|(
name|UNIQUE_PROPERTY_NAME
argument_list|,
name|unique
argument_list|)
expr_stmt|;
block|}
name|entry
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|PROPERTY_NAMES
argument_list|,
name|propertyNames
argument_list|,
name|NAMES
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|declaringNodeTypeNames
operator|!=
literal|null
operator|&&
operator|!
name|declaringNodeTypeNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|entry
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|DECLARING_NODE_TYPES
argument_list|,
name|declaringNodeTypeNames
argument_list|,
name|NAMES
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|entry
return|;
block|}
comment|/**      * Create a new property2 index definition below the given {@code indexNode}.      *      * @param indexNode      * @param indexDefName      * @param unique      * @param propertyNames      * @param declaringNodeTypeNames      */
specifier|public
specifier|static
name|Tree
name|createIndexDefinition
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|indexNode
parameter_list|,
annotation|@
name|Nonnull
name|String
name|indexDefName
parameter_list|,
name|boolean
name|unique
parameter_list|,
annotation|@
name|Nonnull
name|String
index|[]
name|propertyNames
parameter_list|,
annotation|@
name|Nonnull
name|String
modifier|...
name|declaringNodeTypeNames
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|createIndexDefinition
argument_list|(
name|indexNode
argument_list|,
name|indexDefName
argument_list|,
name|unique
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|propertyNames
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|declaringNodeTypeNames
argument_list|)
argument_list|,
name|PropertyIndexEditorProvider
operator|.
name|TYPE
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Create a new property index definition below the given {@code indexNode} of the provided      * {@code propertyIndexType}.      *      * @param indexNode      * @param indexDefName      * @param unique      * @param propertyNames      * @param declaringNodeTypeNames      * @param propertyIndexType      * @param properties any additional property to be added to the index definition.      * @throws RepositoryException      */
specifier|public
specifier|static
name|Tree
name|createIndexDefinition
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|indexNode
parameter_list|,
annotation|@
name|Nonnull
name|String
name|indexDefName
parameter_list|,
name|boolean
name|unique
parameter_list|,
annotation|@
name|Nonnull
name|Collection
argument_list|<
name|String
argument_list|>
name|propertyNames
parameter_list|,
annotation|@
name|CheckForNull
name|Collection
argument_list|<
name|String
argument_list|>
name|declaringNodeTypeNames
parameter_list|,
annotation|@
name|Nonnull
name|String
name|propertyIndexType
parameter_list|,
annotation|@
name|CheckForNull
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|entry
init|=
name|TreeUtil
operator|.
name|getOrAddChild
argument_list|(
name|indexNode
argument_list|,
name|indexDefName
argument_list|,
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setProperty
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|,
name|propertyIndexType
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|unique
condition|)
block|{
name|entry
operator|.
name|setProperty
argument_list|(
name|UNIQUE_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|declaringNodeTypeNames
operator|!=
literal|null
operator|&&
name|declaringNodeTypeNames
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|entry
operator|.
name|setProperty
argument_list|(
name|DECLARING_NODE_TYPES
argument_list|,
name|declaringNodeTypeNames
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
block|}
name|entry
operator|.
name|setProperty
argument_list|(
name|PROPERTY_NAMES
argument_list|,
name|propertyNames
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|k
range|:
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|entry
operator|.
name|setProperty
argument_list|(
name|k
argument_list|,
name|properties
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|entry
return|;
block|}
specifier|public
specifier|static
name|void
name|createReferenceIndex
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|index
parameter_list|)
block|{
name|index
operator|.
name|child
argument_list|(
name|NodeReferenceConstants
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|,
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|,
name|NodeReferenceConstants
operator|.
name|TYPE
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"info"
argument_list|,
literal|"Oak index for reference lookup."
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|isIndexNodeType
parameter_list|(
name|NodeState
name|state
parameter_list|)
block|{
name|PropertyState
name|ps
init|=
name|state
operator|.
name|getProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
return|return
name|ps
operator|!=
literal|null
operator|&&
name|ps
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
operator|.
name|equals
argument_list|(
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isIndexNodeType
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|String
name|typeIn
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isIndexNodeType
argument_list|(
name|state
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|PropertyState
name|type
init|=
name|state
operator|.
name|getProperty
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|)
decl_stmt|;
return|return
name|type
operator|!=
literal|null
operator|&&
operator|!
name|type
operator|.
name|isArray
argument_list|()
operator|&&
name|type
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
operator|.
name|equals
argument_list|(
name|typeIn
argument_list|)
return|;
block|}
comment|/**      * Create a new property index definition below the given {@code indexNode} of the provided      * {@code propertyIndexType}.      *       * @param indexNode                 the oak:index      * @param indexDefName              the node for the index definition      * @param unique                    true if uniqueness      * @param propertyNames             the list of properties to be indexed      * @param declaringNodeTypeNames      * @param propertyIndexType         the type of the PropertyIndex      * @param properties                any additional property to be added to the index definition.      * @throws RepositoryException      */
specifier|public
specifier|static
name|NodeBuilder
name|createIndexDefinition
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|indexNode
parameter_list|,
annotation|@
name|Nonnull
name|String
name|indexDefName
parameter_list|,
name|boolean
name|unique
parameter_list|,
annotation|@
name|Nonnull
name|Iterable
argument_list|<
name|String
argument_list|>
name|propertyNames
parameter_list|,
annotation|@
name|Nullable
name|String
index|[]
name|declaringNodeTypeNames
parameter_list|,
annotation|@
name|Nonnull
name|String
name|propertyIndexType
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|NodeBuilder
name|entry
init|=
name|indexNode
operator|.
name|child
argument_list|(
name|indexDefName
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|,
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|,
name|propertyIndexType
argument_list|)
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|unique
condition|)
block|{
name|entry
operator|.
name|setProperty
argument_list|(
name|UNIQUE_PROPERTY_NAME
argument_list|,
name|unique
argument_list|)
expr_stmt|;
block|}
name|entry
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|PROPERTY_NAMES
argument_list|,
name|propertyNames
argument_list|,
name|NAMES
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|declaringNodeTypeNames
operator|!=
literal|null
operator|&&
name|declaringNodeTypeNames
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|entry
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|DECLARING_NODE_TYPES
argument_list|,
name|declaringNodeTypeNames
argument_list|,
name|NAMES
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// additional properties
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|k
range|:
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|entry
operator|.
name|setProperty
argument_list|(
name|k
argument_list|,
name|properties
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|entry
return|;
block|}
block|}
end_class

end_unit

