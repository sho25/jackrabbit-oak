begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|MISSING_NODE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|UniversalFilter
operator|.
name|Selector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * Common {@code Selector} implementations  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Selectors
block|{
comment|/**      * A selector returning the node for which a call back on {@link EventGenerator.Filter} was      * called or a non existing node in the case of a property call back.      */
specifier|public
specifier|static
specifier|final
name|Selector
name|THIS
init|=
operator|new
name|ThisSelector
argument_list|()
decl_stmt|;
comment|/**      * A selector returning the parent node of the item for which a call back      * on {@link EventGenerator.Filter} was called.      */
specifier|public
specifier|static
specifier|final
name|Selector
name|PARENT
init|=
operator|new
name|ParentSelector
argument_list|()
decl_stmt|;
comment|/**      * A selector returning the node at {@code relPath} relative to      * {@link #THIS}      * @param relPath  relative path      * @return  selector for {@code relPath} from {@code THIS}      */
annotation|@
name|Nonnull
specifier|public
specifier|static
name|Selector
name|fromThis
parameter_list|(
annotation|@
name|Nonnull
name|String
name|relPath
parameter_list|)
block|{
return|return
operator|new
name|RelativePathSelector
argument_list|(
name|relPath
argument_list|,
name|THIS
argument_list|)
return|;
block|}
comment|/**      * A selector returning the node at {@code relPath} relative to      * {@link #PARENT}      * @param relPath  relative path      * @return  selector for {@code relPath} from {@code PARENT}      */
annotation|@
name|Nonnull
specifier|public
specifier|static
name|Selector
name|fromParent
parameter_list|(
annotation|@
name|Nonnull
name|String
name|relPath
parameter_list|)
block|{
return|return
operator|new
name|RelativePathSelector
argument_list|(
name|relPath
argument_list|,
name|PARENT
argument_list|)
return|;
block|}
specifier|private
name|Selectors
parameter_list|()
block|{     }
specifier|private
specifier|static
class|class
name|ThisSelector
implements|implements
name|Selector
block|{
annotation|@
name|Override
specifier|public
name|NodeState
name|select
parameter_list|(
annotation|@
name|Nonnull
name|UniversalFilter
name|filter
parameter_list|,
annotation|@
name|CheckForNull
name|PropertyState
name|before
parameter_list|,
annotation|@
name|CheckForNull
name|PropertyState
name|after
parameter_list|)
block|{
return|return
name|MISSING_NODE
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|select
parameter_list|(
annotation|@
name|Nonnull
name|UniversalFilter
name|filter
parameter_list|,
annotation|@
name|Nonnull
name|String
name|name
parameter_list|,
annotation|@
name|Nonnull
name|NodeState
name|before
parameter_list|,
annotation|@
name|Nonnull
name|NodeState
name|after
parameter_list|)
block|{
return|return
name|after
operator|.
name|exists
argument_list|()
condition|?
name|after
else|:
name|before
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ParentSelector
implements|implements
name|Selector
block|{
annotation|@
name|Override
specifier|public
name|NodeState
name|select
parameter_list|(
annotation|@
name|Nonnull
name|UniversalFilter
name|filter
parameter_list|,
annotation|@
name|CheckForNull
name|PropertyState
name|before
parameter_list|,
annotation|@
name|CheckForNull
name|PropertyState
name|after
parameter_list|)
block|{
return|return
name|after
operator|!=
literal|null
condition|?
name|filter
operator|.
name|getAfterState
argument_list|()
else|:
name|filter
operator|.
name|getBeforeState
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|select
parameter_list|(
annotation|@
name|Nonnull
name|UniversalFilter
name|filter
parameter_list|,
annotation|@
name|Nonnull
name|String
name|name
parameter_list|,
annotation|@
name|Nonnull
name|NodeState
name|before
parameter_list|,
annotation|@
name|Nonnull
name|NodeState
name|after
parameter_list|)
block|{
return|return
name|after
operator|.
name|exists
argument_list|()
condition|?
name|filter
operator|.
name|getAfterState
argument_list|()
else|:
name|filter
operator|.
name|getBeforeState
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

