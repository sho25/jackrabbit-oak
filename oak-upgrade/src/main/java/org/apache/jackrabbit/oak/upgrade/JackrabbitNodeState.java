begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|addAll
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newLinkedHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newLinkedHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_FROZENMIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_FROZENPRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_FROZENUUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|MIX_REFERENCEABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_BASE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_FROZENNODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_VERSIONHISTORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryImpl
operator|.
name|ACTIVITIES_NODE_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryImpl
operator|.
name|ROOT_NODE_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryImpl
operator|.
name|VERSION_STORAGE_NODE_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|impl
operator|.
name|TreeConstants
operator|.
name|OAK_CHILD_ORDER
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|ReferenceBinary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|id
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|persistence
operator|.
name|PersistenceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|persistence
operator|.
name|util
operator|.
name|NodePropBundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|persistence
operator|.
name|util
operator|.
name|NodePropBundle
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|persistence
operator|.
name|util
operator|.
name|NodePropBundle
operator|.
name|PropertyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|state
operator|.
name|ItemStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|value
operator|.
name|InternalValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|AbstractBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|TypePredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|AbstractNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|spi
operator|.
name|Name
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|spi
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
class|class
name|JackrabbitNodeState
extends|extends
name|AbstractNodeState
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JackrabbitNodeState
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|long
name|count
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|void
name|logNewNode
parameter_list|(
name|JackrabbitNodeState
name|state
parameter_list|)
block|{
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|%
literal|10000
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Migrating node #"
operator|+
name|count
operator|+
literal|": "
operator|+
name|state
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|JackrabbitNodeState
name|parent
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|path
decl_stmt|;
comment|/**      * Bundle loader based on the source persistence manager.      */
specifier|private
specifier|final
name|BundleLoader
name|loader
decl_stmt|;
comment|/**      * Workspace name used for versionable paths. This is null      * for the jcr:versionStorage and jcr:activities nodes.      */
specifier|private
specifier|final
name|String
name|workspaceName
decl_stmt|;
specifier|private
specifier|final
name|TypePredicate
name|isReferenceable
decl_stmt|;
specifier|private
specifier|final
name|TypePredicate
name|isOrderable
decl_stmt|;
specifier|private
specifier|final
name|TypePredicate
name|isVersionable
decl_stmt|;
specifier|private
specifier|final
name|TypePredicate
name|isVersionHistory
decl_stmt|;
specifier|private
specifier|final
name|TypePredicate
name|isFrozenNode
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|skipOnError
decl_stmt|;
comment|/**      * Source namespace mappings (URI -&lt; prefix).      */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|uriToPrefix
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|useBinaryReferences
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|NodeId
argument_list|>
name|nodes
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
name|properties
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|NodeId
argument_list|,
name|JackrabbitNodeState
argument_list|>
name|mountPoints
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|NodeId
argument_list|,
name|JackrabbitNodeState
argument_list|>
name|nodeStateCache
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ignoredPaths
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/jcr:system/jcr:nodeTypes"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|JackrabbitNodeState
name|createRootNodeState
parameter_list|(
name|RepositoryContext
name|context
parameter_list|,
name|String
name|workspaceName
parameter_list|,
name|NodeState
name|root
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|uriToPrefix
parameter_list|,
name|boolean
name|copyBinariesByReference
parameter_list|,
name|boolean
name|skipOnError
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|Map
argument_list|<
name|NodeId
argument_list|,
name|JackrabbitNodeState
argument_list|>
name|emptyMountPoints
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
specifier|final
name|PersistenceManager
name|versionPM
init|=
name|context
operator|.
name|getInternalVersionManager
argument_list|()
operator|.
name|getPersistenceManager
argument_list|()
decl_stmt|;
specifier|final
name|JackrabbitNodeState
name|versionStorage
init|=
operator|new
name|JackrabbitNodeState
argument_list|(
name|versionPM
argument_list|,
name|root
argument_list|,
name|uriToPrefix
argument_list|,
name|VERSION_STORAGE_NODE_ID
argument_list|,
literal|"/jcr:system/jcr:versionStorage"
argument_list|,
literal|null
argument_list|,
name|emptyMountPoints
argument_list|,
name|copyBinariesByReference
argument_list|,
name|skipOnError
argument_list|)
decl_stmt|;
specifier|final
name|JackrabbitNodeState
name|activities
init|=
operator|new
name|JackrabbitNodeState
argument_list|(
name|versionPM
argument_list|,
name|root
argument_list|,
name|uriToPrefix
argument_list|,
name|ACTIVITIES_NODE_ID
argument_list|,
literal|"/jcr:system/jcr:activities"
argument_list|,
literal|null
argument_list|,
name|emptyMountPoints
argument_list|,
name|copyBinariesByReference
argument_list|,
name|skipOnError
argument_list|)
decl_stmt|;
name|PersistenceManager
name|pm
init|=
name|context
operator|.
name|getWorkspaceInfo
argument_list|(
name|workspaceName
argument_list|)
operator|.
name|getPersistenceManager
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|NodeId
argument_list|,
name|JackrabbitNodeState
argument_list|>
name|mountPoints
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|VERSION_STORAGE_NODE_ID
argument_list|,
name|versionStorage
argument_list|,
name|ACTIVITIES_NODE_ID
argument_list|,
name|activities
argument_list|)
decl_stmt|;
return|return
operator|new
name|JackrabbitNodeState
argument_list|(
name|pm
argument_list|,
name|root
argument_list|,
name|uriToPrefix
argument_list|,
name|ROOT_NODE_ID
argument_list|,
literal|"/"
argument_list|,
name|workspaceName
argument_list|,
name|mountPoints
argument_list|,
name|copyBinariesByReference
argument_list|,
name|skipOnError
argument_list|)
return|;
block|}
specifier|private
name|JackrabbitNodeState
parameter_list|(
name|JackrabbitNodeState
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|NodePropBundle
name|bundle
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|path
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|loader
operator|=
name|parent
operator|.
name|loader
expr_stmt|;
name|this
operator|.
name|workspaceName
operator|=
name|parent
operator|.
name|workspaceName
expr_stmt|;
name|this
operator|.
name|isReferenceable
operator|=
name|parent
operator|.
name|isReferenceable
expr_stmt|;
name|this
operator|.
name|isOrderable
operator|=
name|parent
operator|.
name|isOrderable
expr_stmt|;
name|this
operator|.
name|isVersionable
operator|=
name|parent
operator|.
name|isVersionable
expr_stmt|;
name|this
operator|.
name|isVersionHistory
operator|=
name|parent
operator|.
name|isVersionHistory
expr_stmt|;
name|this
operator|.
name|isFrozenNode
operator|=
name|parent
operator|.
name|isFrozenNode
expr_stmt|;
name|this
operator|.
name|uriToPrefix
operator|=
name|parent
operator|.
name|uriToPrefix
expr_stmt|;
name|this
operator|.
name|useBinaryReferences
operator|=
name|parent
operator|.
name|useBinaryReferences
expr_stmt|;
name|this
operator|.
name|properties
operator|=
name|createProperties
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodes
operator|=
name|createNodes
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|this
operator|.
name|skipOnError
operator|=
name|parent
operator|.
name|skipOnError
expr_stmt|;
name|this
operator|.
name|mountPoints
operator|=
name|parent
operator|.
name|mountPoints
expr_stmt|;
name|this
operator|.
name|nodeStateCache
operator|=
name|parent
operator|.
name|nodeStateCache
expr_stmt|;
name|setChildOrder
argument_list|()
expr_stmt|;
name|fixFrozenUuid
argument_list|()
expr_stmt|;
name|logNewNode
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|JackrabbitNodeState
parameter_list|(
name|PersistenceManager
name|source
parameter_list|,
name|NodeState
name|root
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|uriToPrefix
parameter_list|,
name|NodeId
name|id
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|workspaceName
parameter_list|,
name|Map
argument_list|<
name|NodeId
argument_list|,
name|JackrabbitNodeState
argument_list|>
name|mountPoints
parameter_list|,
name|boolean
name|useBinaryReferences
parameter_list|,
name|boolean
name|skipOnError
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|loader
operator|=
operator|new
name|BundleLoader
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|this
operator|.
name|workspaceName
operator|=
name|workspaceName
expr_stmt|;
name|this
operator|.
name|isReferenceable
operator|=
operator|new
name|TypePredicate
argument_list|(
name|root
argument_list|,
name|MIX_REFERENCEABLE
argument_list|)
expr_stmt|;
name|this
operator|.
name|isOrderable
operator|=
name|TypePredicate
operator|.
name|isOrderable
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|this
operator|.
name|isVersionable
operator|=
operator|new
name|TypePredicate
argument_list|(
name|root
argument_list|,
name|MIX_VERSIONABLE
argument_list|)
expr_stmt|;
name|this
operator|.
name|isVersionHistory
operator|=
operator|new
name|TypePredicate
argument_list|(
name|root
argument_list|,
name|NT_VERSIONHISTORY
argument_list|)
expr_stmt|;
name|this
operator|.
name|isFrozenNode
operator|=
operator|new
name|TypePredicate
argument_list|(
name|root
argument_list|,
name|NT_FROZENNODE
argument_list|)
expr_stmt|;
name|this
operator|.
name|uriToPrefix
operator|=
name|uriToPrefix
expr_stmt|;
name|this
operator|.
name|mountPoints
operator|=
name|mountPoints
expr_stmt|;
specifier|final
name|int
name|cacheSize
init|=
literal|50
decl_stmt|;
comment|// cache size 50 results in> 25% cache hits during version copy
name|this
operator|.
name|nodeStateCache
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|NodeId
argument_list|,
name|JackrabbitNodeState
argument_list|>
argument_list|(
name|cacheSize
argument_list|,
literal|0.75f
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|JackrabbitNodeState
argument_list|>
name|eldest
parameter_list|)
block|{
return|return
name|size
argument_list|()
operator|>=
name|cacheSize
return|;
block|}
block|}
expr_stmt|;
name|this
operator|.
name|useBinaryReferences
operator|=
name|useBinaryReferences
expr_stmt|;
name|this
operator|.
name|skipOnError
operator|=
name|skipOnError
expr_stmt|;
try|try
block|{
name|NodePropBundle
name|bundle
init|=
name|loader
operator|.
name|loadBundle
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|this
operator|.
name|properties
operator|=
name|createProperties
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodes
operator|=
name|createNodes
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|setChildOrder
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ItemStateException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to access node "
operator|+
name|id
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|logNewNode
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getPath
argument_list|()
return|;
block|}
comment|//---------------------------------------------------------< NodeState>--
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPropertyCount
parameter_list|()
block|{
return|return
name|properties
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasProperty
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
block|{
return|return
name|properties
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyState
name|getProperty
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
block|{
return|return
name|properties
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|properties
operator|.
name|values
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|(
name|long
name|max
parameter_list|)
block|{
return|return
name|nodes
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasChildNode
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
block|{
return|return
name|nodes
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
block|{
name|NodeId
name|id
init|=
name|nodes
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|createChildNodeState
argument_list|(
name|id
argument_list|,
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ItemStateException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|skipOnError
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to access child node "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|warn
argument_list|(
literal|"Skipping broken child node entry "
operator|+
name|name
operator|+
literal|" and changing the primary type to nt:unstructured"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|checkValidName
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|EmptyNodeState
operator|.
name|MISSING_NODE
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getChildNodeNames
parameter_list|()
block|{
return|return
name|nodes
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|MemoryChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|()
block|{
name|List
argument_list|<
name|MemoryChildNodeEntry
argument_list|>
name|entries
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|NodeId
argument_list|>
name|entry
range|:
name|nodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|JackrabbitNodeState
name|child
init|=
name|createChildNodeState
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
operator|new
name|MemoryChildNodeEntry
argument_list|(
name|name
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ItemStateException
name|e
parameter_list|)
block|{
name|warn
argument_list|(
literal|"Skipping broken child node entry "
operator|+
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|entries
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeBuilder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|MemoryNodeBuilder
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|//-----------------------------------------------------------< private>--
specifier|private
name|JackrabbitNodeState
name|createChildNodeState
parameter_list|(
name|NodeId
name|id
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|ItemStateException
block|{
if|if
condition|(
name|mountPoints
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
specifier|final
name|JackrabbitNodeState
name|nodeState
init|=
name|mountPoints
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|name
operator|.
name|equals
argument_list|(
name|nodeState
operator|.
name|name
argument_list|)
argument_list|,
literal|"Expected mounted node "
operator|+
name|id
operator|+
literal|" to be called "
operator|+
name|nodeState
operator|.
name|name
operator|+
literal|" instead of "
operator|+
name|name
argument_list|)
expr_stmt|;
name|nodeState
operator|.
name|parent
operator|=
name|this
expr_stmt|;
return|return
name|nodeState
return|;
block|}
name|JackrabbitNodeState
name|state
init|=
name|nodeStateCache
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|state
operator|=
operator|new
name|JackrabbitNodeState
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|loader
operator|.
name|loadBundle
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|nodeStateCache
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
return|return
name|state
return|;
block|}
specifier|private
name|void
name|setChildOrder
parameter_list|()
block|{
if|if
condition|(
name|isOrderable
operator|.
name|apply
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|OAK_CHILD_ORDER
argument_list|,
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|OAK_CHILD_ORDER
argument_list|,
name|nodes
operator|.
name|keySet
argument_list|()
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|NodeId
argument_list|>
name|createNodes
parameter_list|(
name|NodePropBundle
name|bundle
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|NodeId
argument_list|>
name|children
init|=
name|newLinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|bundle
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|String
name|base
init|=
name|createName
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|base
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|children
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|name
operator|=
name|base
operator|+
literal|'['
operator|+
name|i
operator|+
literal|']'
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ignoredPaths
operator|.
name|contains
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
condition|)
block|{
name|children
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|children
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
name|createProperties
parameter_list|(
name|NodePropBundle
name|bundle
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
name|properties
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|String
name|primary
decl_stmt|;
if|if
condition|(
name|bundle
operator|.
name|getNodeTypeName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|primary
operator|=
name|createName
argument_list|(
name|bundle
operator|.
name|getNodeTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|warn
argument_list|(
literal|"Missing primary node type; defaulting to nt:unstructured"
argument_list|)
expr_stmt|;
name|primary
operator|=
name|NT_UNSTRUCTURED
expr_stmt|;
block|}
name|properties
operator|.
name|put
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|primary
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|mixins
init|=
name|newLinkedHashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|bundle
operator|.
name|getMixinTypeNames
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Name
name|mixin
range|:
name|bundle
operator|.
name|getMixinTypeNames
argument_list|()
control|)
block|{
name|mixins
operator|.
name|add
argument_list|(
name|createName
argument_list|(
name|mixin
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|mixins
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|JCR_MIXINTYPES
argument_list|,
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|,
name|mixins
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bundle
operator|.
name|isReferenceable
argument_list|()
operator|||
name|isReferenceable
operator|.
name|apply
argument_list|(
name|primary
argument_list|,
name|mixins
argument_list|)
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|JCR_UUID
argument_list|,
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|JCR_UUID
argument_list|,
name|bundle
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PropertyEntry
name|property
range|:
name|bundle
operator|.
name|getPropertyEntries
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|createName
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|type
init|=
name|property
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|property
operator|.
name|isMultiValued
argument_list|()
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|createProperty
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|property
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|properties
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|createProperty
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|property
operator|.
name|getValues
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|warn
argument_list|(
literal|"Skipping broken property entry "
operator|+
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|properties
return|;
block|}
specifier|private
name|void
name|fixFrozenUuid
parameter_list|()
block|{
comment|// OAK-1789: Convert the jcr:frozenUuid of a non-referenceable
comment|// frozen node from UUID to a path identifier
name|PropertyState
name|frozenUuid
init|=
name|properties
operator|.
name|get
argument_list|(
name|JCR_FROZENUUID
argument_list|)
decl_stmt|;
if|if
condition|(
name|frozenUuid
operator|!=
literal|null
operator|&&
name|frozenUuid
operator|.
name|getType
argument_list|()
operator|==
name|STRING
operator|&&
name|isFrozenNode
operator|.
name|apply
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|String
name|frozenPrimary
init|=
name|NT_BASE
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|frozenMixins
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|PropertyState
name|property
init|=
name|properties
operator|.
name|get
argument_list|(
name|JCR_FROZENPRIMARYTYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
operator|&&
name|property
operator|.
name|getType
argument_list|()
operator|==
name|NAME
condition|)
block|{
name|frozenPrimary
operator|=
name|property
operator|.
name|getValue
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
block|}
name|property
operator|=
name|properties
operator|.
name|get
argument_list|(
name|JCR_FROZENMIXINTYPES
argument_list|)
expr_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
operator|&&
name|property
operator|.
name|getType
argument_list|()
operator|==
name|NAMES
condition|)
block|{
name|addAll
argument_list|(
name|frozenMixins
argument_list|,
name|property
operator|.
name|getValue
argument_list|(
name|NAMES
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isReferenceable
operator|.
name|apply
argument_list|(
name|frozenPrimary
argument_list|,
name|frozenMixins
argument_list|)
condition|)
block|{
name|String
name|parentFrozenUuid
init|=
name|parent
operator|.
name|getString
argument_list|(
name|JCR_FROZENUUID
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentFrozenUuid
operator|!=
literal|null
condition|)
block|{
name|frozenUuid
operator|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|JCR_FROZENUUID
argument_list|,
name|parentFrozenUuid
operator|+
literal|"/"
operator|+
name|name
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|JCR_FROZENUUID
argument_list|,
name|frozenUuid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
name|createProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|type
parameter_list|,
name|InternalValue
name|value
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|PropertyType
operator|.
name|BINARY
case|:
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|createBlob
argument_list|(
name|value
argument_list|)
argument_list|,
name|Type
operator|.
name|BINARY
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|BOOLEAN
case|:
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|getBoolean
argument_list|()
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DATE
case|:
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|getString
argument_list|()
argument_list|,
name|Type
operator|.
name|DATE
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DECIMAL
case|:
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|getDecimal
argument_list|()
argument_list|,
name|Type
operator|.
name|DECIMAL
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DOUBLE
case|:
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|getDouble
argument_list|()
argument_list|,
name|Type
operator|.
name|DOUBLE
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|LONG
case|:
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|getLong
argument_list|()
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|NAME
case|:
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|createName
argument_list|(
name|value
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|PATH
case|:
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|createPath
argument_list|(
name|value
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|Type
operator|.
name|PATH
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|REFERENCE
case|:
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|Type
operator|.
name|REFERENCE
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|STRING
case|:
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|getString
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|URI
case|:
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|Type
operator|.
name|URI
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|WEAKREFERENCE
case|:
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|Type
operator|.
name|WEAKREFERENCE
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Unknown value type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
name|createProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|type
parameter_list|,
name|InternalValue
index|[]
name|values
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|PropertyType
operator|.
name|BINARY
case|:
name|List
argument_list|<
name|Blob
argument_list|>
name|binaries
init|=
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|InternalValue
name|value
range|:
name|values
control|)
block|{
name|binaries
operator|.
name|add
argument_list|(
name|createBlob
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|binaries
argument_list|,
name|Type
operator|.
name|BINARIES
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|BOOLEAN
case|:
name|List
argument_list|<
name|Boolean
argument_list|>
name|booleans
init|=
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|InternalValue
name|value
range|:
name|values
control|)
block|{
name|booleans
operator|.
name|add
argument_list|(
name|value
operator|.
name|getBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|booleans
argument_list|,
name|Type
operator|.
name|BOOLEANS
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DATE
case|:
name|List
argument_list|<
name|String
argument_list|>
name|dates
init|=
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|InternalValue
name|value
range|:
name|values
control|)
block|{
name|dates
operator|.
name|add
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|dates
argument_list|,
name|Type
operator|.
name|DATES
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DECIMAL
case|:
name|List
argument_list|<
name|BigDecimal
argument_list|>
name|decimals
init|=
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|InternalValue
name|value
range|:
name|values
control|)
block|{
name|decimals
operator|.
name|add
argument_list|(
name|value
operator|.
name|getDecimal
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|decimals
argument_list|,
name|Type
operator|.
name|DECIMALS
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DOUBLE
case|:
name|List
argument_list|<
name|Double
argument_list|>
name|doubles
init|=
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|InternalValue
name|value
range|:
name|values
control|)
block|{
name|doubles
operator|.
name|add
argument_list|(
name|value
operator|.
name|getDouble
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|doubles
argument_list|,
name|Type
operator|.
name|DOUBLES
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|LONG
case|:
name|List
argument_list|<
name|Long
argument_list|>
name|longs
init|=
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|InternalValue
name|value
range|:
name|values
control|)
block|{
name|longs
operator|.
name|add
argument_list|(
name|value
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|longs
argument_list|,
name|Type
operator|.
name|LONGS
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|NAME
case|:
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|InternalValue
name|value
range|:
name|values
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|createName
argument_list|(
name|value
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|names
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|PATH
case|:
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|InternalValue
name|value
range|:
name|values
control|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|createPath
argument_list|(
name|value
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|paths
argument_list|,
name|Type
operator|.
name|PATHS
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|REFERENCE
case|:
name|List
argument_list|<
name|String
argument_list|>
name|references
init|=
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|InternalValue
name|value
range|:
name|values
control|)
block|{
name|references
operator|.
name|add
argument_list|(
name|value
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|references
argument_list|,
name|Type
operator|.
name|REFERENCES
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|STRING
case|:
name|List
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|InternalValue
name|value
range|:
name|values
control|)
block|{
name|strings
operator|.
name|add
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|strings
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|URI
case|:
name|List
argument_list|<
name|String
argument_list|>
name|uris
init|=
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|InternalValue
name|value
range|:
name|values
control|)
block|{
name|uris
operator|.
name|add
argument_list|(
name|value
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|uris
argument_list|,
name|Type
operator|.
name|URIS
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|WEAKREFERENCE
case|:
name|List
argument_list|<
name|String
argument_list|>
name|weakreferences
init|=
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|InternalValue
name|value
range|:
name|values
control|)
block|{
name|weakreferences
operator|.
name|add
argument_list|(
name|value
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|weakreferences
argument_list|,
name|Type
operator|.
name|WEAKREFERENCES
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Unknown value type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Blob
name|createBlob
parameter_list|(
specifier|final
name|InternalValue
name|value
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|checkNotNull
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
operator|==
name|PropertyType
operator|.
name|BINARY
argument_list|)
expr_stmt|;
return|return
operator|new
name|AbstractBlob
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|length
parameter_list|()
block|{
try|try
block|{
return|return
name|value
operator|.
name|getLength
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|warn
argument_list|(
literal|"Unable to access blob length"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|InputStream
name|getNewStream
parameter_list|()
block|{
try|try
block|{
return|return
name|value
operator|.
name|getStream
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|warn
argument_list|(
literal|"Unable to access blob contents"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getReference
parameter_list|()
block|{
if|if
condition|(
operator|!
name|useBinaryReferences
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|Binary
name|binary
init|=
name|value
operator|.
name|getBinary
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|binary
operator|instanceof
name|ReferenceBinary
condition|)
block|{
return|return
operator|(
operator|(
name|ReferenceBinary
operator|)
name|binary
operator|)
operator|.
name|getReference
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
finally|finally
block|{
name|binary
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|warn
argument_list|(
literal|"Unable to get blob reference"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
return|;
block|}
specifier|private
name|String
name|createName
parameter_list|(
name|Name
name|name
parameter_list|)
block|{
name|String
name|uri
init|=
name|name
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|local
init|=
name|name
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
operator|||
name|uri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|local
return|;
block|}
else|else
block|{
name|String
name|prefix
init|=
name|uriToPrefix
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
return|return
name|prefix
operator|+
literal|":"
operator|+
name|local
return|;
block|}
else|else
block|{
name|warn
argument_list|(
literal|"No prefix mapping found for "
operator|+
name|name
argument_list|)
expr_stmt|;
return|return
literal|"{"
operator|+
name|uri
operator|+
literal|"}"
operator|+
name|local
return|;
block|}
block|}
block|}
specifier|private
name|String
name|createPath
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
operator|.
name|Element
name|element
range|:
name|path
operator|.
name|getElements
argument_list|()
control|)
block|{
if|if
condition|(
name|builder
operator|.
name|length
argument_list|()
operator|>
literal|1
operator|||
operator|(
name|builder
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
operator|!
literal|"/"
operator|.
name|equals
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|element
operator|.
name|denotesRoot
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|element
operator|.
name|denotesIdentifier
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|element
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|element
operator|.
name|denotesName
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|createName
argument_list|(
name|element
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|.
name|getIndex
argument_list|()
operator|>=
name|Path
operator|.
name|INDEX_DEFAULT
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|element
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|element
operator|.
name|denotesParent
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|element
operator|.
name|denotesCurrent
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|warn
argument_list|(
literal|"Unknown element in path: "
operator|+
name|path
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|element
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getPath
parameter_list|()
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
comment|// implies: parent != null&& name != null
name|path
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|parent
operator|.
name|getPath
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
specifier|private
name|void
name|warn
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|getPath
argument_list|()
operator|+
literal|": "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|warn
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|getPath
argument_list|()
operator|+
literal|": "
operator|+
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

