begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|ClusterNodeInfo
operator|.
name|ClusterNodeState
operator|.
name|ACTIVE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|ClusterNodeInfo
operator|.
name|DEFAULT_LEASE_DURATION_MILLIS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|ClusterNodeInfo
operator|.
name|LEASE_END_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|ClusterNodeInfo
operator|.
name|REV_RECOVERY_BY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|ClusterNodeInfo
operator|.
name|REV_RECOVERY_LOCK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|ClusterNodeInfo
operator|.
name|RecoverLockState
operator|.
name|ACQUIRED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|ClusterNodeInfo
operator|.
name|STATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|CLUSTER_NODES
import|;
end_import

begin_comment
comment|/**  * Utility class to acquire and release a recovery lock on an entry in the  * {@link Collection#CLUSTER_NODES} collection.  */
end_comment

begin_class
class|class
name|RecoveryLock
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RecoveryLock
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|DocumentStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
specifier|private
specifier|final
name|int
name|clusterId
decl_stmt|;
comment|/**      * Prepare a recovery lock on the document store for an entry with the given      * {@code clusterId}. Constructing the lock does not check whether an entry      * actually exists for the {@code clusterId} and is indeed valid.      *      * @param store the store where the cluster node entries are stored.      * @param clock the clock used to check whether an entry's lease expired.      * @param clusterId the {@code clusterId} this lock is created for.      */
name|RecoveryLock
parameter_list|(
name|DocumentStore
name|store
parameter_list|,
name|Clock
name|clock
parameter_list|,
name|int
name|clusterId
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
block|}
comment|/**      * Acquire a recovery lock for the cluster node info entry with the      * {@code clusterId} specified in the constructor of this recovery lock.      * This method may break a lock when it determines the cluster node holding      * the recovery lock is no more active or its lease expired.      *      * @param recoveredBy id of cluster doing the recovery      * @return whether the lock has been acquired      */
name|boolean
name|acquireRecoveryLock
parameter_list|(
name|int
name|recoveredBy
parameter_list|)
block|{
name|ClusterNodeInfoDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|CLUSTER_NODES
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|clusterId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
comment|// this is unexpected...
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|doc
operator|.
name|isRecoveryNeeded
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|tryAcquireRecoveryLock
argument_list|(
name|doc
argument_list|,
name|recoveredBy
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// either we already own the lock or were able to break the lock
return|return
name|doc
operator|.
name|isBeingRecoveredBy
argument_list|(
name|recoveredBy
argument_list|)
operator|||
name|tryBreakRecoveryLock
argument_list|(
name|doc
argument_list|,
name|recoveredBy
argument_list|)
return|;
block|}
comment|/**      * Releases the recovery lock on the given {@code clusterId}. If      * {@code success} is {@code true}, the state of the cluster node entry      * is reset, otherwise it is left as is. That is, for a cluster node which      * requires recovery and the recovery process failed, the state will still      * be active, when this release method is called with {@code success} set      * to {@code false}.      *      * @param success whether recovery was successful.      */
name|void
name|releaseRecoveryLock
parameter_list|(
name|boolean
name|success
parameter_list|)
block|{
try|try
block|{
name|UpdateOp
name|update
init|=
operator|new
name|UpdateOp
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|clusterId
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|update
operator|.
name|set
argument_list|(
name|REV_RECOVERY_LOCK
argument_list|,
name|ClusterNodeInfo
operator|.
name|RecoverLockState
operator|.
name|NONE
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|set
argument_list|(
name|REV_RECOVERY_BY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|update
operator|.
name|set
argument_list|(
name|STATE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|update
operator|.
name|set
argument_list|(
name|LEASE_END_KEY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// make sure lease is expired
name|update
operator|.
name|set
argument_list|(
name|LEASE_END_KEY
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|ClusterNodeInfoDocument
name|old
init|=
name|store
operator|.
name|findAndUpdate
argument_list|(
name|CLUSTER_NODES
argument_list|,
name|update
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"ClusterNodeInfo document for "
operator|+
name|clusterId
operator|+
literal|" missing."
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Released recovery lock for cluster id {} (recovery successful: {})"
argument_list|,
name|clusterId
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to release the recovery lock for clusterNodeId "
operator|+
name|clusterId
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|ex
operator|)
throw|;
block|}
block|}
comment|//-------------------------------< internal>-------------------------------
comment|/**      * Acquire a recovery lock for the given cluster node info document      *      * @param info      *            info document of the cluster that is going to be recovered      * @param recoveredBy      *            id of cluster doing the recovery ({@code 0} when unknown)      * @return whether the lock has been acquired      */
specifier|private
name|boolean
name|tryAcquireRecoveryLock
parameter_list|(
name|ClusterNodeInfoDocument
name|info
parameter_list|,
name|int
name|recoveredBy
parameter_list|)
block|{
name|int
name|clusterId
init|=
name|info
operator|.
name|getClusterId
argument_list|()
decl_stmt|;
try|try
block|{
name|UpdateOp
name|update
init|=
operator|new
name|UpdateOp
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|clusterId
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|update
operator|.
name|equals
argument_list|(
name|STATE
argument_list|,
name|ACTIVE
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|equals
argument_list|(
name|LEASE_END_KEY
argument_list|,
name|info
operator|.
name|getLeaseEndTime
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|notEquals
argument_list|(
name|REV_RECOVERY_LOCK
argument_list|,
name|ACQUIRED
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|set
argument_list|(
name|REV_RECOVERY_LOCK
argument_list|,
name|ACQUIRED
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
comment|// Renew the lease once to give the recovery some time to finish
comment|// in case recovery is done by the same clusterId. In this scenario
comment|// the lease is not updated by a background thread.
name|update
operator|.
name|set
argument_list|(
name|LEASE_END_KEY
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|DEFAULT_LEASE_DURATION_MILLIS
argument_list|)
expr_stmt|;
if|if
condition|(
name|recoveredBy
operator|!=
literal|0
condition|)
block|{
name|update
operator|.
name|set
argument_list|(
name|REV_RECOVERY_BY
argument_list|,
name|recoveredBy
argument_list|)
expr_stmt|;
block|}
name|ClusterNodeInfoDocument
name|old
init|=
name|store
operator|.
name|findAndUpdate
argument_list|(
name|CLUSTER_NODES
argument_list|,
name|update
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Acquired recovery lock for cluster id {}"
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
block|}
return|return
name|old
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to acquire the recovery lock for clusterNodeId "
operator|+
name|clusterId
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|ex
operator|)
throw|;
block|}
block|}
comment|/**      * Checks if the recovering cluster node is inactive and then tries to      * break the recovery lock.      *      * @param doc the cluster node info document of the cluster node to acquire      *            the recovery lock for.      * @param recoveredBy id of cluster doing the recovery.      * @return whether the lock has been acquired.      */
specifier|private
name|boolean
name|tryBreakRecoveryLock
parameter_list|(
name|ClusterNodeInfoDocument
name|doc
parameter_list|,
name|int
name|recoveredBy
parameter_list|)
block|{
name|Long
name|recoveryBy
init|=
name|doc
operator|.
name|getRecoveryBy
argument_list|()
decl_stmt|;
if|if
condition|(
name|recoveryBy
operator|==
literal|null
condition|)
block|{
comment|// cannot determine current lock owner
return|return
literal|false
return|;
block|}
name|ClusterNodeInfoDocument
name|recovering
init|=
name|store
operator|.
name|find
argument_list|(
name|CLUSTER_NODES
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|recoveryBy
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|recovering
operator|==
literal|null
condition|)
block|{
comment|// cannot determine current lock owner
return|return
literal|false
return|;
block|}
name|long
name|now
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|leaseEnd
init|=
name|recovering
operator|.
name|getLeaseEndTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|recovering
operator|.
name|isActive
argument_list|()
operator|&&
name|leaseEnd
operator|>
name|now
condition|)
block|{
comment|// still active, cannot break lock
return|return
literal|false
return|;
block|}
comment|// try to break the lock
try|try
block|{
name|UpdateOp
name|update
init|=
operator|new
name|UpdateOp
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|doc
operator|.
name|getClusterId
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|update
operator|.
name|equals
argument_list|(
name|STATE
argument_list|,
name|ACTIVE
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|equals
argument_list|(
name|REV_RECOVERY_LOCK
argument_list|,
name|ACQUIRED
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|equals
argument_list|(
name|REV_RECOVERY_BY
argument_list|,
name|recoveryBy
argument_list|)
expr_stmt|;
name|update
operator|.
name|set
argument_list|(
name|REV_RECOVERY_BY
argument_list|,
name|recoveredBy
argument_list|)
expr_stmt|;
comment|// Renew the lease once to give the recovery some time to finish
comment|// in case recovery is done by the same clusterId. In this scenario
comment|// the lease is not updated by a background thread.
name|update
operator|.
name|set
argument_list|(
name|LEASE_END_KEY
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|DEFAULT_LEASE_DURATION_MILLIS
argument_list|)
expr_stmt|;
name|ClusterNodeInfoDocument
name|old
init|=
name|store
operator|.
name|findAndUpdate
argument_list|(
name|CLUSTER_NODES
argument_list|,
name|update
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Acquired (broke) recovery lock for cluster id {}. "
operator|+
literal|"Previous lock owner: {}"
argument_list|,
name|doc
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|recoveryBy
argument_list|)
expr_stmt|;
block|}
return|return
name|old
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to break the recovery lock for clusterNodeId "
operator|+
name|doc
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|ex
operator|)
throw|;
block|}
block|}
block|}
end_class

end_unit

