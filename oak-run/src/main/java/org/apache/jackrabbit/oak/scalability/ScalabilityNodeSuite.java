begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|scalability
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math
operator|.
name|stat
operator|.
name|descriptive
operator|.
name|SynchronizedDescriptiveStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|JcrUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|IndexStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
operator|.
name|util
operator|.
name|OakIndexUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|JcrCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|OakRepositoryFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|RepositoryFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneInitializerHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|OrderedIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|scalability
operator|.
name|util
operator|.
name|NodeTypeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|ISO8601
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The suite test will incrementally increase the load and execute searches.  * Each test run thus adds nodes and executes different benchmarks. This way we measure time taken for  * benchmark execution.  *  * {# NODE_LEVELS} is a comma separated string property and governs the depth and the number of  * nodes in the hierarchy.  *  */
end_comment

begin_class
specifier|public
class|class
name|ScalabilityNodeSuite
extends|extends
name|ScalabilityAbstractSuite
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ScalabilityNodeSuite
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Controls the number of concurrent threads for loading blobs initially      */
specifier|protected
specifier|static
specifier|final
name|int
name|LOADERS
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"loaders"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|/**      * Controls the number of nodes at each level      */
specifier|protected
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|NODE_LEVELS
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|splitToList
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"nodeLevels"
argument_list|,
literal|"100,10,5"
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * Controls the number of concurrent thread for searching      */
specifier|protected
specifier|static
specifier|final
name|int
name|SEARCHERS
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"searchers"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|/**      * Controls the percentage of root nodes which will have sub nodes created.      * Value ranges from [0, 100]      */
specifier|protected
specifier|static
specifier|final
name|int
name|DENSITY_LEVEL
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"densityLevel"
argument_list|,
literal|100
argument_list|)
decl_stmt|;
comment|/**      * Controls if the index definitions are to be created.      */
specifier|protected
specifier|static
specifier|final
name|boolean
name|INDEX
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"index"
argument_list|)
decl_stmt|;
comment|/**      * Controls whether the indexing is async      */
specifier|protected
specifier|static
specifier|final
name|String
name|ASYNC_INDEX
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"asyncIndex"
argument_list|)
decl_stmt|;
comment|/**      * Controls if a customType is to be created      */
specifier|protected
specifier|static
specifier|final
name|boolean
name|CUSTOM_TYPE
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"customType"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CTX_SEARCH_PATHS_PROP
init|=
literal|"searchPaths"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CTX_DESC_SEARCH_PATHS_PROP
init|=
literal|"descPaths"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CTX_ROOT_NODE_NAME_PROP
init|=
literal|"rootNodeName"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CTX_ACT_NODE_TYPE_PROP
init|=
literal|"rootType"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CTX_REL_NODE_TYPE_PROP
init|=
literal|"descendantType"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_ROOT_NODE_TYPE
init|=
literal|"ParentType"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_DESC_NODE_TYPE
init|=
literal|"DescendantType"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DATE_PROP
init|=
literal|"added"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CTX_PAGINATION_KEY_PROP
init|=
name|DATE_PROP
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FILTER_PROP
init|=
literal|"filter"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SORT_PROP
init|=
literal|"viewed"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TITLE_PROP
init|=
literal|"title"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ROOT_NODE_NAME
init|=
literal|"LongevitySearchAssets"
operator|+
name|TEST_ID
decl_stmt|;
specifier|public
enum|enum
name|Index
block|{
name|PROPERTY
block|,
name|ORDERED
block|,
name|LUCENE
block|}
comment|/** Type of index to be created */
specifier|public
specifier|final
name|Index
name|INDEX_TYPE
init|=
name|Index
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"indexType"
argument_list|,
name|Index
operator|.
name|PROPERTY
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|Boolean
name|storageEnabled
decl_stmt|;
specifier|protected
name|Whiteboard
name|whiteboard
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nodeTypes
decl_stmt|;
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|29
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|searchRootPaths
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|searchDescPaths
decl_stmt|;
specifier|public
name|ScalabilityNodeSuite
parameter_list|(
name|Boolean
name|storageEnabled
parameter_list|)
block|{
name|this
operator|.
name|storageEnabled
operator|=
name|storageEnabled
expr_stmt|;
name|this
operator|.
name|nodeTypes
operator|=
name|newArrayList
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ScalabilitySuite
name|addBenchmarks
parameter_list|(
name|ScalabilityBenchmark
modifier|...
name|tests
parameter_list|)
block|{
for|for
control|(
name|ScalabilityBenchmark
name|test
range|:
name|tests
control|)
block|{
name|benchmarks
operator|.
name|put
argument_list|(
name|test
operator|.
name|toString
argument_list|()
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|beforeSuite
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|loginWriter
argument_list|()
decl_stmt|;
name|Node
name|root
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|root
operator|.
name|addNode
argument_list|(
name|ROOT_NODE_NAME
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
if|if
condition|(
name|CUSTOM_TYPE
condition|)
block|{
name|NodeTypeUtils
operator|.
name|createNodeType
argument_list|(
name|session
argument_list|,
name|CUSTOM_DESC_NODE_TYPE
argument_list|,
operator|new
name|String
index|[]
block|{
name|DATE_PROP
block|,
name|SORT_PROP
block|,
name|FILTER_PROP
block|,
name|TITLE_PROP
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
name|PropertyType
operator|.
name|DATE
block|,
name|PropertyType
operator|.
name|BOOLEAN
block|,
name|PropertyType
operator|.
name|STRING
block|,
name|PropertyType
operator|.
name|STRING
block|}
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
operator|new
name|String
index|[]
block|{
name|CUSTOM_DESC_NODE_TYPE
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NodeTypeUtils
operator|.
name|createNodeType
argument_list|(
name|session
argument_list|,
name|CUSTOM_ROOT_NODE_TYPE
argument_list|,
operator|new
name|String
index|[]
block|{
name|DATE_PROP
block|,
name|SORT_PROP
block|,
name|FILTER_PROP
block|,
name|TITLE_PROP
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
name|PropertyType
operator|.
name|DATE
block|,
name|PropertyType
operator|.
name|BOOLEAN
block|,
name|PropertyType
operator|.
name|STRING
block|,
name|PropertyType
operator|.
name|STRING
block|}
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
operator|new
name|String
index|[]
block|{
name|CUSTOM_DESC_NODE_TYPE
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|nodeTypes
operator|.
name|add
argument_list|(
name|CUSTOM_ROOT_NODE_TYPE
argument_list|)
expr_stmt|;
name|nodeTypes
operator|.
name|add
argument_list|(
name|CUSTOM_DESC_NODE_TYPE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|INDEX
condition|)
block|{
name|createIndexes
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|createIndexes
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|RepositoryException
block|{
switch|switch
condition|(
name|INDEX_TYPE
condition|)
block|{
case|case
name|ORDERED
case|:
comment|// define ordered indexes on properties
name|OakIndexUtils
operator|.
name|orderedIndexDefinition
argument_list|(
name|session
argument_list|,
literal|"customIndexParent"
argument_list|,
name|ASYNC_INDEX
argument_list|,
operator|new
name|String
index|[]
block|{
name|DATE_PROP
block|}
argument_list|,
literal|false
argument_list|,
operator|new
name|String
index|[]
block|{
name|CUSTOM_ROOT_NODE_TYPE
block|}
argument_list|,
name|OrderedIndex
operator|.
name|OrderDirection
operator|.
name|DESC
operator|.
name|getDirection
argument_list|()
argument_list|)
expr_stmt|;
name|OakIndexUtils
operator|.
name|orderedIndexDefinition
argument_list|(
name|session
argument_list|,
literal|"customIndexDescendant"
argument_list|,
name|ASYNC_INDEX
argument_list|,
operator|new
name|String
index|[]
block|{
name|DATE_PROP
block|}
argument_list|,
literal|false
argument_list|,
operator|new
name|String
index|[]
block|{
name|CUSTOM_DESC_NODE_TYPE
block|}
argument_list|,
name|OrderedIndex
operator|.
name|OrderDirection
operator|.
name|DESC
operator|.
name|getDirection
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|LUCENE
case|:
break|break;
case|case
name|PROPERTY
case|:
break|break;
block|}
block|}
comment|/**      * Executes before each test run      */
annotation|@
name|Override
specifier|public
name|void
name|beforeIteration
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Started beforeIteration()"
argument_list|)
expr_stmt|;
block|}
comment|// Contextualize the node types being used
if|if
condition|(
name|nodeTypes
operator|!=
literal|null
operator|&&
operator|!
name|nodeTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|put
argument_list|(
name|CTX_ACT_NODE_TYPE_PROP
argument_list|,
name|nodeTypes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|put
argument_list|(
name|CTX_REL_NODE_TYPE_PROP
argument_list|,
name|nodeTypes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// recreate paths created in this run
name|searchRootPaths
operator|=
name|newArrayList
argument_list|()
expr_stmt|;
name|searchDescPaths
operator|=
name|newArrayList
argument_list|()
expr_stmt|;
comment|// create the blob load for this iteration
name|createLoad
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|long
name|loadFinish
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|put
argument_list|(
name|CTX_ROOT_NODE_NAME_PROP
argument_list|,
name|ROOT_NODE_NAME
argument_list|)
expr_stmt|;
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|put
argument_list|(
name|CTX_SEARCH_PATHS_PROP
argument_list|,
name|searchRootPaths
argument_list|)
expr_stmt|;
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|put
argument_list|(
name|CTX_DESC_SEARCH_PATHS_PROP
argument_list|,
name|searchDescPaths
argument_list|)
expr_stmt|;
name|waitBeforeIterationFinish
argument_list|(
name|loadFinish
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished beforeIteration()"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|waitBeforeIterationFinish
parameter_list|(
name|long
name|loadFinish
parameter_list|)
block|{
name|IndexStatsMBean
name|indexStatsMBean
init|=
name|WhiteboardUtils
operator|.
name|getService
argument_list|(
name|whiteboard
argument_list|,
name|IndexStatsMBean
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|ISO8601
operator|.
name|parse
argument_list|(
name|indexStatsMBean
operator|.
name|getLastIndexedTime
argument_list|()
argument_list|)
operator|.
name|getTimeInMillis
argument_list|()
operator|<
name|loadFinish
condition|)
block|{
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for async indexing to finish"
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error waiting for async index to finish"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Creates the load for the search.      *      * @param context the context      * @throws RepositoryException the repository exception      */
specifier|protected
name|void
name|createLoad
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// Creates assets for this run
name|SynchronizedDescriptiveStatistics
name|writeStats
init|=
operator|new
name|SynchronizedDescriptiveStatistics
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|loadThreads
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|LOADERS
condition|;
name|idx
operator|++
control|)
block|{
comment|/* Each loader will write to a directory of the form load-idx */
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|getWriter
argument_list|(
name|context
argument_list|,
name|writeStats
argument_list|,
name|idx
argument_list|)
argument_list|,
literal|"LoadThread-"
operator|+
name|idx
argument_list|)
decl_stmt|;
name|loadThreads
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// wait for the load threads to finish
for|for
control|(
name|Thread
name|t
range|:
name|loadThreads
control|)
block|{
try|try
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception waiting for join "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Write stats"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"# min     10%%     50%%     90%%     max       N%n"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%6.0f  %6.0f  %6.0f  %6.0f  %6.0f  %6d%n"
argument_list|,
name|writeStats
operator|.
name|getMin
argument_list|()
argument_list|,
name|writeStats
operator|.
name|getPercentile
argument_list|(
literal|10.0
argument_list|)
argument_list|,
name|writeStats
operator|.
name|getPercentile
argument_list|(
literal|50.0
argument_list|)
argument_list|,
name|writeStats
operator|.
name|getPercentile
argument_list|(
literal|90.0
argument_list|)
argument_list|,
name|writeStats
operator|.
name|getMax
argument_list|()
argument_list|,
name|writeStats
operator|.
name|getN
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Writer
name|getWriter
parameter_list|(
name|ExecutionContext
name|context
parameter_list|,
name|SynchronizedDescriptiveStatistics
name|writeStats
parameter_list|,
name|int
name|idx
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
operator|new
name|Writer
argument_list|(
operator|(
name|context
operator|.
name|getIncrement
argument_list|()
operator|+
literal|"-"
operator|+
name|idx
operator|)
argument_list|,
operator|(
name|context
operator|.
name|getIncrement
argument_list|()
operator|*
name|Integer
operator|.
name|parseInt
argument_list|(
name|NODE_LEVELS
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
operator|/
name|LOADERS
argument_list|,
name|writeStats
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|executeBenchmark
parameter_list|(
specifier|final
name|ScalabilityBenchmark
name|benchmark
parameter_list|,
specifier|final
name|ExecutionContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stated execution : "
operator|+
name|benchmark
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|PROFILE
condition|)
block|{
name|context
operator|.
name|startProfiler
argument_list|()
expr_stmt|;
block|}
comment|//Execute the benchmark with the number threads configured
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
name|newArrayListWithCapacity
argument_list|(
name|SEARCHERS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|SEARCHERS
condition|;
name|idx
operator|++
control|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
literal|"Search-"
operator|+
name|idx
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|benchmark
operator|.
name|execute
argument_list|(
name|getRepository
argument_list|()
argument_list|,
name|CREDENTIALS
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in benchmark execution "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
try|try
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in search thread join "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|context
operator|.
name|stopProfiler
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Repository
index|[]
name|createRepository
parameter_list|(
name|RepositoryFixture
name|fixture
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|fixture
operator|instanceof
name|OakRepositoryFixture
condition|)
block|{
return|return
operator|(
operator|(
name|OakRepositoryFixture
operator|)
name|fixture
operator|)
operator|.
name|setUpCluster
argument_list|(
literal|1
argument_list|,
operator|new
name|JcrCreator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Jcr
name|customize
parameter_list|(
name|Oak
name|oak
parameter_list|)
block|{
name|LuceneIndexProvider
name|provider
init|=
operator|new
name|LuceneIndexProvider
argument_list|()
decl_stmt|;
name|oak
operator|.
name|with
argument_list|(
operator|(
name|QueryIndexProvider
operator|)
name|provider
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|Observer
operator|)
name|provider
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|LuceneIndexEditorProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|LuceneInitializerHelper
argument_list|(
literal|"luceneGlobal"
argument_list|,
name|storageEnabled
argument_list|)
argument_list|)
expr_stmt|;
name|whiteboard
operator|=
name|oak
operator|.
name|getWhiteboard
argument_list|()
expr_stmt|;
return|return
operator|new
name|Jcr
argument_list|(
name|oak
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|createRepository
argument_list|(
name|fixture
argument_list|)
return|;
block|}
specifier|private
specifier|synchronized
name|void
name|addRootSearchPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|searchRootPaths
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|searchRootPaths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|synchronized
name|void
name|addDescSearchPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|searchDescPaths
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|searchDescPaths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
class|class
name|Writer
implements|implements
name|Runnable
block|{
specifier|final
name|Node
name|parent
decl_stmt|;
specifier|final
name|Session
name|session
decl_stmt|;
specifier|final
name|String
name|id
decl_stmt|;
specifier|final
name|SynchronizedDescriptiveStatistics
name|stats
decl_stmt|;
name|long
name|counter
decl_stmt|;
name|Calendar
name|start
decl_stmt|;
name|Timer
name|timer
decl_stmt|;
comment|/** The maximum number of assets to be written by this thread. */
specifier|final
name|int
name|maxAssets
decl_stmt|;
name|Writer
parameter_list|(
name|String
name|id
parameter_list|,
name|int
name|maxAssets
parameter_list|,
name|SynchronizedDescriptiveStatistics
name|writeStats
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|maxAssets
operator|=
name|maxAssets
expr_stmt|;
name|this
operator|.
name|stats
operator|=
name|writeStats
expr_stmt|;
name|this
operator|.
name|session
operator|=
name|loginWriter
argument_list|()
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|getNode
argument_list|(
name|ROOT_NODE_NAME
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"writer-"
operator|+
name|id
argument_list|)
expr_stmt|;
name|start
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|start
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|start
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|timer
operator|=
operator|new
name|Timer
argument_list|(
name|writeStats
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|int
name|count
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|count
operator|<=
name|maxAssets
condition|)
block|{
name|session
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// skip creation of child nodes based on the defined DENSITY_LEVEL
name|Node
name|node
init|=
name|createParent
argument_list|(
name|parent
argument_list|,
operator|(
name|random
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<=
name|DENSITY_LEVEL
operator|)
argument_list|,
literal|"Node"
operator|+
name|count
argument_list|)
decl_stmt|;
comment|// record for searching and reading
name|addRootSearchPath
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|counter
operator|+
literal|1
operator|)
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Thread "
operator|+
name|id
operator|+
literal|" - Added nodes : "
operator|+
operator|(
name|counter
operator|)
argument_list|)
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in load creation "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Max Assets created by "
operator|+
name|id
operator|+
literal|" - "
operator|+
name|counter
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Node
name|createParent
parameter_list|(
name|Node
name|parent
parameter_list|,
name|boolean
name|createChildren
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|start
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Node
name|node
init|=
name|createNode
argument_list|(
name|parent
argument_list|,
literal|0
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|createChildren
condition|)
block|{
name|createChildren
argument_list|(
name|node
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
specifier|private
name|void
name|createChildren
parameter_list|(
name|Node
name|parent
parameter_list|,
name|int
name|levelIdx
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|levelIdx
operator|>
name|NODE_LEVELS
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
return|return;
block|}
comment|// Recursively create sub nodes
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|Integer
operator|.
name|parseInt
argument_list|(
name|NODE_LEVELS
operator|.
name|get
argument_list|(
name|levelIdx
argument_list|)
argument_list|)
condition|;
name|idx
operator|++
control|)
block|{
name|start
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Node
name|subNode
init|=
name|createNode
argument_list|(
name|parent
argument_list|,
name|levelIdx
argument_list|,
literal|"SubNode-"
operator|+
name|levelIdx
operator|+
literal|"-"
operator|+
name|idx
argument_list|)
decl_stmt|;
name|addDescSearchPath
argument_list|(
name|subNode
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|createChildren
argument_list|(
name|subNode
argument_list|,
operator|(
name|levelIdx
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Creates the node.          *          * @param parent the parent          * @param levelIdx the level idx          * @param name the name          * @return the node          * @throws Exception the exception          */
specifier|private
name|Node
name|createNode
parameter_list|(
name|Node
name|parent
parameter_list|,
name|int
name|levelIdx
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|Node
name|node
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|getType
argument_list|(
name|levelIdx
argument_list|)
argument_list|)
decl_stmt|;
comment|// Add relevant properties
name|node
operator|.
name|setProperty
argument_list|(
name|DATE_PROP
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|SORT_PROP
argument_list|,
name|toss
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|FILTER_PROP
argument_list|,
name|toss
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|TITLE_PROP
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|counter
operator|++
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Record time taken for creation
name|timer
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return
name|node
return|;
block|}
comment|/**          * Order of precedence is customNodeType, oak:Unstructured, nt:unstructured.          *          * @param levelIdx the hierarchy level of node (root or descendant)          * @return the type          * @throws RepositoryException the repository exception          */
specifier|protected
name|String
name|getType
parameter_list|(
name|int
name|levelIdx
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|typeOfNode
init|=
operator|(
name|levelIdx
operator|==
literal|0
condition|?
name|CTX_ACT_NODE_TYPE_PROP
else|:
name|CTX_REL_NODE_TYPE_PROP
operator|)
decl_stmt|;
name|String
name|type
init|=
name|NodeTypeConstants
operator|.
name|NT_UNSTRUCTURED
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|typeOfNode
argument_list|)
condition|)
block|{
name|type
operator|=
operator|(
name|String
operator|)
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|typeOfNode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parent
operator|.
name|getSession
argument_list|()
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNodeTypeManager
argument_list|()
operator|.
name|hasNodeType
argument_list|(
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
condition|)
block|{
name|type
operator|=
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
expr_stmt|;
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|put
argument_list|(
name|typeOfNode
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
specifier|private
name|boolean
name|toss
parameter_list|()
block|{
name|int
name|tossOutcome
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
return|return
name|tossOutcome
operator|==
literal|0
return|;
block|}
block|}
specifier|static
class|class
name|Timer
block|{
specifier|private
specifier|final
name|Stopwatch
name|watch
decl_stmt|;
specifier|private
specifier|final
name|SynchronizedDescriptiveStatistics
name|stats
decl_stmt|;
specifier|public
name|Timer
parameter_list|(
name|SynchronizedDescriptiveStatistics
name|stats
parameter_list|)
block|{
name|watch
operator|=
name|Stopwatch
operator|.
name|createUnstarted
argument_list|()
expr_stmt|;
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|watch
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|watch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|watch
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|watch
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|watch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|stats
operator|.
name|addValue
argument_list|(
name|watch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|watch
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

