begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|CharsetEncodingUtilsTest
block|{
specifier|private
specifier|static
name|char
index|[]
name|SURROGATE_PAIR
init|=
name|Character
operator|.
name|toChars
argument_list|(
literal|0x1f4a9
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|encodeValid
parameter_list|()
throws|throws
name|IOException
block|{
comment|// a a-umlaut euro plane-1-char
name|String
name|test
init|=
literal|"a \u00E4 \u20ac "
operator|+
operator|new
name|String
argument_list|(
name|SURROGATE_PAIR
argument_list|)
decl_stmt|;
name|byte
index|[]
name|withStringClass
init|=
name|test
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|withUtilsClass
init|=
name|CharsetEncodingUtils
operator|.
name|encodeAsUTF8
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|withStringClass
argument_list|,
name|withUtilsClass
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|test
argument_list|,
operator|new
name|String
argument_list|(
name|withUtilsClass
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|encodeInValid
parameter_list|()
block|{
comment|// a a-umlaut euro plane-1-char, second char in surrogate pair missing
name|String
name|test
init|=
literal|"a \u00E4 \u20ac "
operator|+
name|SURROGATE_PAIR
index|[
literal|0
index|]
decl_stmt|;
try|try
block|{
name|CharsetEncodingUtils
operator|.
name|encodeAsUTF8
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected encoding to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|encodeMultiThreaded
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|int
name|tc
init|=
literal|20
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|tc
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tc
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// encode and decode 100 random UUID strings
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|String
name|test
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|roundtripped
init|=
literal|null
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|bytes
init|=
name|CharsetEncodingUtils
operator|.
name|encodeAsUTF8
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|roundtripped
operator|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exignored
parameter_list|)
block|{                         }
name|assertEquals
argument_list|(
name|test
argument_list|,
name|roundtripped
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tc
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tc
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

