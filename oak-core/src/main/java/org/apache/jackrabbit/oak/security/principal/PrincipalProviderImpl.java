begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|principal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|acl
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|PathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|AdminPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|TreeBasedPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|MembershipProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_comment
comment|/**  * The {@code PrincipalProviderImpl} is a principal provider implementation  * that operates on principal information read from user information exposed by  * the configured {@link UserProvider} and {@link MembershipProvider}.  */
end_comment

begin_class
specifier|public
class|class
name|PrincipalProviderImpl
implements|implements
name|PrincipalProvider
block|{
comment|/**      * logger instance      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PrincipalProviderImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|UserProvider
name|userProvider
decl_stmt|;
specifier|private
specifier|final
name|MembershipProvider
name|membershipProvider
decl_stmt|;
specifier|private
specifier|final
name|PathMapper
name|pathMapper
decl_stmt|;
specifier|public
name|PrincipalProviderImpl
parameter_list|(
name|UserProvider
name|userProvider
parameter_list|,
name|MembershipProvider
name|membershipProvider
parameter_list|,
name|PathMapper
name|pathMapper
parameter_list|)
block|{
name|this
operator|.
name|userProvider
operator|=
name|userProvider
expr_stmt|;
name|this
operator|.
name|membershipProvider
operator|=
name|membershipProvider
expr_stmt|;
name|this
operator|.
name|pathMapper
operator|=
name|pathMapper
expr_stmt|;
block|}
comment|//--------------------------------------------------< PrincipalProvider>---
annotation|@
name|Override
specifier|public
name|Principal
name|getPrincipal
parameter_list|(
specifier|final
name|String
name|principalName
parameter_list|)
block|{
name|Tree
name|tree
init|=
name|userProvider
operator|.
name|getAuthorizableByPrincipal
argument_list|(
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|principalName
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|tree
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|isGroup
argument_list|(
name|tree
argument_list|)
operator|)
condition|?
operator|new
name|TreeBasedGroup
argument_list|(
name|tree
argument_list|)
else|:
operator|new
name|TreeBasedPrincipal
argument_list|(
name|tree
argument_list|,
name|pathMapper
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Group
argument_list|>
name|getGroupMembership
parameter_list|(
name|Principal
name|principal
parameter_list|)
block|{
name|Tree
name|authTree
init|=
name|userProvider
operator|.
name|getAuthorizableByPrincipal
argument_list|(
name|principal
argument_list|)
decl_stmt|;
if|if
condition|(
name|authTree
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|getGroupMembership
argument_list|(
name|authTree
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|getPrincipals
parameter_list|(
name|String
name|userID
parameter_list|)
block|{
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
decl_stmt|;
name|Tree
name|userTree
init|=
name|userProvider
operator|.
name|getAuthorizable
argument_list|(
name|userID
argument_list|,
name|Type
operator|.
name|USER
argument_list|)
decl_stmt|;
if|if
condition|(
name|userTree
operator|!=
literal|null
condition|)
block|{
name|principals
operator|=
operator|new
name|HashSet
argument_list|<
name|Principal
argument_list|>
argument_list|()
expr_stmt|;
name|Principal
name|userPrincipal
init|=
operator|new
name|TreeBasedPrincipal
argument_list|(
name|userTree
argument_list|,
name|pathMapper
argument_list|)
decl_stmt|;
name|principals
operator|.
name|add
argument_list|(
name|userPrincipal
argument_list|)
expr_stmt|;
name|principals
operator|.
name|addAll
argument_list|(
name|getGroupMembership
argument_list|(
name|userPrincipal
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|userProvider
operator|.
name|isAdminUser
argument_list|(
name|userTree
argument_list|)
condition|)
block|{
name|principals
operator|.
name|add
argument_list|(
name|AdminPrincipal
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|principals
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
return|return
name|principals
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|findPrincipals
parameter_list|(
name|String
name|nameHint
parameter_list|,
name|int
name|searchType
parameter_list|)
block|{
name|String
index|[]
name|propNames
init|=
operator|new
name|String
index|[]
block|{
name|UserConstants
operator|.
name|REP_PRINCIPAL_NAME
block|}
decl_stmt|;
name|String
index|[]
name|ntNames
init|=
operator|new
name|String
index|[]
block|{
name|UserConstants
operator|.
name|NT_REP_AUTHORIZABLE
block|}
decl_stmt|;
name|Iterator
argument_list|<
name|Tree
argument_list|>
name|authorizables
init|=
name|userProvider
operator|.
name|findAuthorizables
argument_list|(
name|propNames
argument_list|,
name|nameHint
argument_list|,
name|ntNames
argument_list|,
literal|false
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|Type
operator|.
name|AUTHORIZABLE
argument_list|)
decl_stmt|;
return|return
name|Iterators
operator|.
name|transform
argument_list|(
name|authorizables
argument_list|,
operator|new
name|AuthorizableToPrincipal
argument_list|()
argument_list|)
return|;
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
name|Set
argument_list|<
name|Group
argument_list|>
name|getGroupMembership
parameter_list|(
name|Tree
name|authorizableTree
parameter_list|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|groupPaths
init|=
name|membershipProvider
operator|.
name|getMembership
argument_list|(
name|authorizableTree
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Group
argument_list|>
name|groups
init|=
operator|new
name|HashSet
argument_list|<
name|Group
argument_list|>
argument_list|()
decl_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|groupPaths
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|path
init|=
name|groupPaths
operator|.
name|next
argument_list|()
decl_stmt|;
name|Tree
name|groupTree
init|=
name|userProvider
operator|.
name|getAuthorizableByPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupTree
operator|!=
literal|null
condition|)
block|{
name|groups
operator|.
name|add
argument_list|(
operator|new
name|TreeBasedGroup
argument_list|(
name|groupTree
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|groups
return|;
block|}
specifier|private
name|boolean
name|isGroup
parameter_list|(
name|Tree
name|authorizableTree
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|authorizableTree
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|authorizableTree
operator|.
name|hasProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|ntName
init|=
name|authorizableTree
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getString
argument_list|()
decl_stmt|;
return|return
name|UserConstants
operator|.
name|NT_REP_GROUP
operator|.
name|equals
argument_list|(
name|ntName
argument_list|)
return|;
block|}
comment|/**      * Function to covert an authorizable tree to a principal.      */
specifier|private
specifier|final
class|class
name|AuthorizableToPrincipal
implements|implements
name|Function
argument_list|<
name|Tree
argument_list|,
name|TreeBasedPrincipal
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|TreeBasedPrincipal
name|apply
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|)
block|{
if|if
condition|(
name|tree
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"null tree."
argument_list|)
throw|;
block|}
if|if
condition|(
name|userProvider
operator|.
name|isAuthorizableType
argument_list|(
name|tree
argument_list|,
name|Type
operator|.
name|GROUP
argument_list|)
condition|)
block|{
return|return
operator|new
name|TreeBasedGroup
argument_list|(
name|tree
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|TreeBasedPrincipal
argument_list|(
name|tree
argument_list|,
name|pathMapper
argument_list|)
return|;
block|}
block|}
block|}
comment|/**      * Tree-based principal implementation that marks the principal as group.      */
specifier|private
specifier|final
class|class
name|TreeBasedGroup
extends|extends
name|TreeBasedPrincipal
implements|implements
name|Group
block|{
specifier|public
name|TreeBasedGroup
parameter_list|(
name|Tree
name|tree
parameter_list|)
block|{
name|super
argument_list|(
name|tree
argument_list|,
name|pathMapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addMember
parameter_list|(
name|Principal
name|principal
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeMember
parameter_list|(
name|Principal
name|principal
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMember
parameter_list|(
name|Principal
name|principal
parameter_list|)
block|{
return|return
name|membershipProvider
operator|.
name|isMember
argument_list|(
name|getTree
argument_list|()
argument_list|,
name|userProvider
operator|.
name|getAuthorizableByPrincipal
argument_list|(
name|principal
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|members
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|declaredMemberPaths
init|=
name|membershipProvider
operator|.
name|getMembers
argument_list|(
name|getTree
argument_list|()
argument_list|,
name|Type
operator|.
name|AUTHORIZABLE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|members
init|=
name|Iterators
operator|.
name|transform
argument_list|(
name|declaredMemberPaths
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|Principal
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Principal
name|apply
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|)
block|{
name|Tree
name|tree
init|=
name|userProvider
operator|.
name|getAuthorizableByPath
argument_list|(
name|oakPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|tree
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isGroup
argument_list|(
name|tree
argument_list|)
condition|)
block|{
return|return
operator|new
name|TreeBasedGroup
argument_list|(
name|tree
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|TreeBasedPrincipal
argument_list|(
name|tree
argument_list|,
name|pathMapper
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|Iterators
operator|.
name|asEnumeration
argument_list|(
name|Iterators
operator|.
name|filter
argument_list|(
name|members
argument_list|,
name|Predicates
operator|.
name|notNull
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

