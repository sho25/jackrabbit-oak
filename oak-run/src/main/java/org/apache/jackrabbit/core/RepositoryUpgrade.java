begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_NODETYPENAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SYSTEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_VERSIONSTORAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_NODE_TYPES
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceRegistry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryImpl
operator|.
name|WorkspaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|config
operator|.
name|RepositoryConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|nodetype
operator|.
name|NodeTypeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStoreBranch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|spi
operator|.
name|Name
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|spi
operator|.
name|QNodeTypeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|RepositoryUpgrade
block|{
comment|/**      * Logger instance      */
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RepositoryUpgrade
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Source repository context.      */
specifier|private
specifier|final
name|RepositoryContext
name|source
decl_stmt|;
comment|/**      * Target node store.      */
specifier|private
specifier|final
name|NodeStore
name|target
decl_stmt|;
comment|/**      * Copies the contents of the repository in the given source directory      * to the given target node store.      *      * @param source source repository directory      * @param target target node store      * @throws RepositoryException if the copy operation fails      */
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|File
name|source
parameter_list|,
name|NodeStore
name|target
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|copy
argument_list|(
name|RepositoryConfig
operator|.
name|create
argument_list|(
name|source
argument_list|)
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
comment|/**      * Copies the contents of the repository with the given configuration      * to the given target node builder.      *      * @param source source repository configuration      * @param target target node store      * @throws RepositoryException if the copy operation fails      */
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|RepositoryConfig
name|source
parameter_list|,
name|NodeStore
name|target
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|RepositoryImpl
name|repository
init|=
name|RepositoryImpl
operator|.
name|create
argument_list|(
name|source
argument_list|)
decl_stmt|;
try|try
block|{
name|copy
argument_list|(
name|repository
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|repository
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Copies the contents of the given source repository to the given      * target node store.      *<p>      * The source repository<strong>must not be modified</strong> while      * the copy operation is running to avoid an inconsistent copy.      *      * @param source source repository directory      * @param target target node store      * @throws RepositoryException if the copy operation fails      * @throws IOException if the target repository can not be initialized      */
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|RepositoryImpl
name|source
parameter_list|,
name|NodeStore
name|target
parameter_list|)
throws|throws
name|RepositoryException
block|{
operator|new
name|RepositoryUpgrade
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates a tool for copying the full contents of the source repository      * to the given target repository. Any existing content in the target      * repository will be overwritten.      *      * @param source source repository      * @param target target node store      */
specifier|public
name|RepositoryUpgrade
parameter_list|(
name|RepositoryImpl
name|source
parameter_list|,
name|NodeStore
name|target
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
operator|.
name|getRepositoryContext
argument_list|()
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
block|}
comment|/**      * Copies the full content from the source to the target repository.      *<p>      * The source repository<strong>must not be modified</strong> while      * the copy operation is running to avoid an inconsistent copy.      *<p>      * This method leaves the search indexes of the target repository in      * an       * Note that both the source and the target repository must be closed      * during the copy operation as this method requires exclusive access      * to the repositories.      *      * @throws RepositoryException if the copy operation fails      */
specifier|public
name|void
name|copy
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Copying repository content from {} to Oak"
argument_list|,
name|source
operator|.
name|getRepository
argument_list|()
operator|.
name|repConfig
operator|.
name|getHomeDir
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|NodeStoreBranch
name|branch
init|=
name|target
operator|.
name|branch
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|branch
operator|.
name|getHead
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|copyNamespaces
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|copyNodeTypes
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|copyVersionStore
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|copyWorkspaces
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|branch
operator|.
name|setRoot
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|branch
operator|.
name|merge
argument_list|(
name|EmptyHook
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
comment|// TODO: default hooks?
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Failed to copy content"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|getOakName
parameter_list|(
name|Name
name|name
parameter_list|)
throws|throws
name|NamespaceException
block|{
name|String
name|uri
init|=
name|name
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|local
init|=
name|name
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
operator|||
name|uri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|local
return|;
block|}
else|else
block|{
return|return
name|source
operator|.
name|getNamespaceRegistry
argument_list|()
operator|.
name|getPrefix
argument_list|(
name|uri
argument_list|)
operator|+
literal|":"
operator|+
name|local
return|;
block|}
block|}
specifier|private
name|void
name|copyNamespaces
parameter_list|(
name|NodeBuilder
name|root
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|NamespaceRegistry
name|sourceRegistry
init|=
name|source
operator|.
name|getNamespaceRegistry
argument_list|()
decl_stmt|;
name|NodeBuilder
name|system
init|=
name|root
operator|.
name|child
argument_list|(
name|JCR_SYSTEM
argument_list|)
decl_stmt|;
name|NodeBuilder
name|namespaces
init|=
name|system
operator|.
name|child
argument_list|(
literal|"rep:namespaces"
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Copying registered namespaces"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|uri
range|:
name|sourceRegistry
operator|.
name|getURIs
argument_list|()
control|)
block|{
name|namespaces
operator|.
name|setProperty
argument_list|(
name|sourceRegistry
operator|.
name|getPrefix
argument_list|(
name|uri
argument_list|)
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|copyNodeTypes
parameter_list|(
name|NodeBuilder
name|root
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|NodeTypeRegistry
name|sourceRegistry
init|=
name|source
operator|.
name|getNodeTypeRegistry
argument_list|()
decl_stmt|;
name|NodeBuilder
name|system
init|=
name|root
operator|.
name|child
argument_list|(
name|JCR_SYSTEM
argument_list|)
decl_stmt|;
name|NodeBuilder
name|types
init|=
name|system
operator|.
name|child
argument_list|(
name|JCR_NODE_TYPES
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Copying registered node types"
argument_list|)
expr_stmt|;
for|for
control|(
name|Name
name|name
range|:
name|sourceRegistry
operator|.
name|getRegisteredNodeTypes
argument_list|()
control|)
block|{
name|QNodeTypeDefinition
name|def
init|=
name|sourceRegistry
operator|.
name|getNodeTypeDef
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|NodeBuilder
name|type
init|=
name|types
operator|.
name|child
argument_list|(
name|getOakName
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|type
operator|.
name|setProperty
argument_list|(
name|JCR_NODETYPENAME
argument_list|,
name|getOakName
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO ...
block|}
block|}
specifier|private
name|void
name|copyVersionStore
parameter_list|(
name|NodeBuilder
name|root
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Copying version histories"
argument_list|)
expr_stmt|;
name|NodeBuilder
name|system
init|=
name|root
operator|.
name|child
argument_list|(
name|JCR_SYSTEM
argument_list|)
decl_stmt|;
name|NodeBuilder
name|versionStorage
init|=
name|system
operator|.
name|child
argument_list|(
name|JCR_VERSIONSTORAGE
argument_list|)
decl_stmt|;
name|NodeBuilder
name|activities
init|=
name|system
operator|.
name|child
argument_list|(
literal|"rep:activities"
argument_list|)
decl_stmt|;
name|PersistenceCopier
name|copier
init|=
operator|new
name|PersistenceCopier
argument_list|(
name|source
operator|.
name|getInternalVersionManager
argument_list|()
operator|.
name|getPersistenceManager
argument_list|()
argument_list|,
name|source
operator|.
name|getNamespaceRegistry
argument_list|()
argument_list|,
name|target
argument_list|)
decl_stmt|;
name|copier
operator|.
name|copy
argument_list|(
name|RepositoryImpl
operator|.
name|VERSION_STORAGE_NODE_ID
argument_list|,
name|versionStorage
argument_list|)
expr_stmt|;
name|copier
operator|.
name|copy
argument_list|(
name|RepositoryImpl
operator|.
name|ACTIVITIES_NODE_ID
argument_list|,
name|activities
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|copyWorkspaces
parameter_list|(
name|NodeBuilder
name|root
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Copying default workspace"
argument_list|)
expr_stmt|;
comment|// Copy all the default workspace content
name|RepositoryImpl
name|repository
init|=
name|source
operator|.
name|getRepository
argument_list|()
decl_stmt|;
name|RepositoryConfig
name|config
init|=
name|repository
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|config
operator|.
name|getDefaultWorkspaceName
argument_list|()
decl_stmt|;
name|WorkspaceInfo
name|workspace
init|=
name|repository
operator|.
name|getWorkspaceInfo
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|PersistenceCopier
name|copier
init|=
operator|new
name|PersistenceCopier
argument_list|(
name|workspace
operator|.
name|getPersistenceManager
argument_list|()
argument_list|,
name|source
operator|.
name|getNamespaceRegistry
argument_list|()
argument_list|,
name|target
argument_list|)
decl_stmt|;
name|copier
operator|.
name|excludeNode
argument_list|(
name|RepositoryImpl
operator|.
name|SYSTEM_ROOT_NODE_ID
argument_list|)
expr_stmt|;
name|copier
operator|.
name|copy
argument_list|(
name|RepositoryImpl
operator|.
name|ROOT_NODE_ID
argument_list|,
name|root
argument_list|)
expr_stmt|;
comment|// TODO: Copy all the active open-scoped locks
block|}
block|}
end_class

end_unit

