begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|AbstractMongoConnectionTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|MongoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test for OAK-3103  */
end_comment

begin_class
specifier|public
class|class
name|CacheConsistencyIT
extends|extends
name|AbstractMongoConnectionTest
block|{
specifier|private
name|MongoDocumentStore
name|store
decl_stmt|;
annotation|@
name|Before
annotation|@
name|Override
specifier|public
name|void
name|setUpConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|mongoConnection
operator|=
name|MongoUtils
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|DB
name|db
init|=
name|mongoConnection
operator|.
name|getDB
argument_list|()
decl_stmt|;
name|MongoUtils
operator|.
name|dropCollections
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|DocumentMK
operator|.
name|Builder
name|builder
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|clock
argument_list|(
name|getTestClock
argument_list|()
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|store
operator|=
operator|new
name|MongoDocumentStore
argument_list|(
name|db
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|mk
operator|=
name|builder
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|evictWhileUpdateLoop
parameter_list|()
throws|throws
name|Throwable
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|runTest
argument_list|()
expr_stmt|;
name|tearDownConnection
argument_list|()
expr_stmt|;
name|setUpConnection
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|runTest
parameter_list|()
throws|throws
name|Throwable
block|{
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/test"
argument_list|,
literal|"/test/foo"
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|exceptions
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|Thread
name|t1
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test/foo"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|long
name|v
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|ids
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|op
operator|.
name|set
argument_list|(
literal|"p"
argument_list|,
operator|++
name|v
argument_list|)
expr_stmt|;
name|store
operator|.
name|update
argument_list|(
name|NODES
argument_list|,
name|ids
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|Object
name|p
init|=
name|doc
operator|.
name|get
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|v
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|p
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|,
literal|"update"
argument_list|)
decl_stmt|;
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
name|t2
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test/foo"
argument_list|)
decl_stmt|;
name|long
name|v
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|op
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
operator|++
name|v
argument_list|)
expr_stmt|;
name|NodeDocument
name|old
init|=
name|store
operator|.
name|findAndUpdate
argument_list|(
name|NODES
argument_list|,
name|op
argument_list|)
decl_stmt|;
name|Object
name|q
init|=
name|old
operator|.
name|get
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|v
operator|-
literal|1
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|q
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|,
literal|"findAndUpdate"
argument_list|)
decl_stmt|;
name|t2
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
name|t3
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test/foo"
argument_list|)
decl_stmt|;
name|long
name|p
init|=
literal|0
decl_stmt|;
name|long
name|q
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|Object
name|value
init|=
name|doc
operator|.
name|get
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
operator|(
name|Long
operator|)
name|value
operator|>=
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|(
name|Long
operator|)
name|value
expr_stmt|;
block|}
name|value
operator|=
name|doc
operator|.
name|get
argument_list|(
literal|"q"
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"previous: "
operator|+
name|q
operator|+
literal|", now: "
operator|+
name|value
argument_list|,
operator|(
name|Long
operator|)
name|value
operator|>=
name|q
argument_list|)
expr_stmt|;
name|q
operator|=
operator|(
name|Long
operator|)
name|value
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|,
literal|"reader"
argument_list|)
decl_stmt|;
name|t3
operator|.
name|start
argument_list|()
expr_stmt|;
name|Cache
argument_list|<
name|CacheValue
argument_list|,
name|NodeDocument
argument_list|>
name|cache
init|=
name|store
operator|.
name|getNodeDocumentCache
argument_list|()
decl_stmt|;
comment|// run for at most five seconds
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|1000
decl_stmt|;
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test/foo"
argument_list|)
decl_stmt|;
name|CacheValue
name|key
init|=
operator|new
name|StringValue
argument_list|(
name|id
argument_list|)
decl_stmt|;
while|while
condition|(
name|t1
operator|.
name|isAlive
argument_list|()
operator|&&
name|t2
operator|.
name|isAlive
argument_list|()
operator|&&
name|t3
operator|.
name|isAlive
argument_list|()
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|end
condition|)
block|{
if|if
condition|(
name|cache
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|0
argument_list|,
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// simulate eviction
name|cache
operator|.
name|invalidate
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Throwable
name|e
range|:
name|exceptions
control|)
block|{
throw|throw
name|e
throw|;
block|}
name|exceptions
operator|.
name|add
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"end"
argument_list|)
argument_list|)
expr_stmt|;
name|t1
operator|.
name|join
argument_list|()
expr_stmt|;
name|t2
operator|.
name|join
argument_list|()
expr_stmt|;
name|t3
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

