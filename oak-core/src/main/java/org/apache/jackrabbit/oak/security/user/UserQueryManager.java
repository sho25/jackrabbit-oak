begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|query
operator|.
name|XPathQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|query
operator|.
name|XPathQueryEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|AuthorizableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * UserQueryManager... TODO  */
end_comment

begin_class
class|class
name|UserQueryManager
block|{
comment|/**      * logger instance      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UserQueryManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|UserManagerImpl
name|userManager
decl_stmt|;
specifier|private
specifier|final
name|Root
name|root
decl_stmt|;
specifier|private
specifier|final
name|QueryManager
name|queryManager
decl_stmt|;
comment|// TODO: replace usage of jcr-query-manager by oak query manager and drop session from constructor.
name|UserQueryManager
parameter_list|(
name|UserManagerImpl
name|userManager
parameter_list|,
name|Session
name|session
parameter_list|,
name|Root
name|root
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|this
operator|.
name|userManager
operator|=
name|userManager
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|queryManager
operator|=
operator|(
name|session
operator|!=
literal|null
operator|)
condition|?
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|find
parameter_list|(
name|Query
name|query
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// TODO: create query builder depending query-language configured with user-mgt configuration.
if|if
condition|(
name|queryManager
operator|!=
literal|null
condition|)
block|{
name|XPathQueryBuilder
name|builder
init|=
operator|new
name|XPathQueryBuilder
argument_list|()
decl_stmt|;
name|query
operator|.
name|build
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
operator|new
name|XPathQueryEvaluator
argument_list|(
name|builder
argument_list|,
name|userManager
argument_list|,
name|queryManager
argument_list|,
name|userManager
operator|.
name|getNamePathMapper
argument_list|()
argument_list|)
operator|.
name|eval
argument_list|()
return|;
block|}
else|else
block|{
comment|// TODO: implement
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"not implemented"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Nonnull
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|findAuthorizables
parameter_list|(
name|String
name|relativePath
parameter_list|,
name|String
name|value
parameter_list|,
name|AuthorizableType
name|authorizableType
parameter_list|)
block|{
name|String
index|[]
name|oakPaths
init|=
operator|new
name|String
index|[]
block|{
name|userManager
operator|.
name|getNamePathMapper
argument_list|()
operator|.
name|getOakPath
argument_list|(
name|relativePath
argument_list|)
block|}
decl_stmt|;
return|return
name|findAuthorizables
argument_list|(
name|oakPaths
argument_list|,
name|value
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|authorizableType
argument_list|)
return|;
block|}
comment|/**      * Find the authorizable trees matching the following search parameters within      * the sub-tree defined by an authorizable tree:      *      * @param propertyRelPaths An array of property names or relative paths      * pointing to properties within the tree defined by a given authorizable node.      * @param value The property value to look for.      * @param ntNames An array of node type names to restrict the search within      * the authorizable tree to a subset of nodes that match any of the node      * type names; {@code null} indicates that no filtering by node type is      * desired. Specifying a node type name that defines an authorizable node      * )e.g. {@link org.apache.jackrabbit.oak.spi.security.user.UserConstants#NT_REP_USER rep:User} will limit the search to      * properties defined with the authorizable node itself instead of searching      * the complete sub-tree.      * @param exact A boolean flag indicating if the value must match exactly or not.s      * @param maxSize The maximal number of search results to look for.      * @param authorizableType Filter the search results to only return authorizable      * trees of a given type. Passing {@link org.apache.jackrabbit.oak.spi.security.user.AuthorizableType#AUTHORIZABLE} indicates that      * no filtering for a specific authorizable type is desired. However, properties      * might still be search in the complete sub-tree of authorizables depending      * on the other query parameters.      * @return An iterator of authorizable trees that match the specified      * search parameters and filters or an empty iterator if no result can be      * found.      */
annotation|@
name|Nonnull
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|findAuthorizables
parameter_list|(
name|String
index|[]
name|propertyRelPaths
parameter_list|,
name|String
name|value
parameter_list|,
name|String
index|[]
name|ntNames
parameter_list|,
name|boolean
name|exact
parameter_list|,
name|long
name|maxSize
parameter_list|,
name|AuthorizableType
name|authorizableType
parameter_list|)
block|{
comment|// TODO
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"not yet implemented"
argument_list|)
throw|;
comment|//return AuthorizableIterator.create(result, this);
block|}
block|}
end_class

end_unit

