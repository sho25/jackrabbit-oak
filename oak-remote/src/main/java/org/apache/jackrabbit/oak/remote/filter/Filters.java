begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|public
class|class
name|Filters
block|{
specifier|private
name|Set
argument_list|<
name|Filter
argument_list|>
name|includes
init|=
operator|new
name|HashSet
argument_list|<
name|Filter
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Filter
argument_list|>
name|excludes
init|=
operator|new
name|HashSet
argument_list|<
name|Filter
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|Filters
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|filters
parameter_list|)
block|{
if|if
condition|(
name|filters
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"filter set is null"
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|filter
range|:
name|filters
control|)
block|{
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"filter is null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|filter
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"include filter is an empty string"
argument_list|)
throw|;
block|}
if|if
condition|(
name|filter
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
operator|&&
name|filter
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"exclude filter is an empty string"
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|String
name|filter
range|:
name|filters
control|)
block|{
if|if
condition|(
name|filter
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|excludes
operator|.
name|add
argument_list|(
operator|new
name|Filter
argument_list|(
name|filter
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|includes
operator|.
name|add
argument_list|(
operator|new
name|Filter
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|includes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|includes
operator|.
name|add
argument_list|(
operator|new
name|Filter
argument_list|(
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|matches
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|Filter
name|include
range|:
name|includes
control|)
block|{
if|if
condition|(
name|include
operator|.
name|matches
argument_list|(
name|name
argument_list|)
condition|)
block|{
for|for
control|(
name|Filter
name|exclude
range|:
name|excludes
control|)
block|{
if|if
condition|(
name|exclude
operator|.
name|matches
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

