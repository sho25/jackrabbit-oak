begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|FunctionIndexProcessorTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|getProperties
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"[a, test/b, test/:name]"
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|FunctionIndexProcessor
operator|.
name|getProperties
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"function"
block|,
literal|"multiply"
block|,
literal|"@a"
block|,
literal|"add"
block|,
literal|"@test/b"
block|,
literal|"@test/:name"
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|xpath
parameter_list|()
block|{
name|checkConvert
argument_list|(
literal|"fn:upper-case(@data)"
argument_list|,
literal|"function*upper*@data"
argument_list|)
expr_stmt|;
name|checkConvert
argument_list|(
literal|"fn:lower-case(test/@data)"
argument_list|,
literal|"function*lower*@test/data"
argument_list|)
expr_stmt|;
name|checkConvert
argument_list|(
literal|"fn:lower-case(fn:name())"
argument_list|,
literal|"function*lower*@:name"
argument_list|)
expr_stmt|;
name|checkConvert
argument_list|(
literal|"fn:lower-case(fn:local-name())"
argument_list|,
literal|"function*lower*@:localname"
argument_list|)
expr_stmt|;
name|checkConvert
argument_list|(
literal|"fn:string-length(test/@data)"
argument_list|,
literal|"function*length*@test/data"
argument_list|)
expr_stmt|;
name|checkConvert
argument_list|(
literal|"fn:string-length(fn:name())"
argument_list|,
literal|"function*length*@:name"
argument_list|)
expr_stmt|;
name|checkConvert
argument_list|(
literal|"fn:lower-case(fn:upper-case(test/@data))"
argument_list|,
literal|"function*lower*upper*@test/data"
argument_list|)
expr_stmt|;
name|checkConvert
argument_list|(
literal|"fn:coalesce(jcr:content/@foo2, jcr:content/@foo)"
argument_list|,
literal|"function*coalesce*@jcr:content/foo2*@jcr:content/foo"
argument_list|)
expr_stmt|;
name|checkConvert
argument_list|(
literal|"fn:coalesce(jcr:content/@foo2,fn:lower-case(jcr:content/@foo))"
argument_list|,
literal|"function*coalesce*@jcr:content/foo2*lower*@jcr:content/foo"
argument_list|)
expr_stmt|;
name|checkConvert
argument_list|(
literal|"fn:coalesce(jcr:content/@foo2,fn:coalesce(jcr:content/@foo, fn:lower-case(fn:name())))"
argument_list|,
literal|"function*coalesce*@jcr:content/foo2*coalesce*@jcr:content/foo*lower*@:name"
argument_list|)
expr_stmt|;
name|checkConvert
argument_list|(
literal|"fn:coalesce(fn:coalesce(jcr:content/@foo2,jcr:content/@foo), fn:coalesce(@a:b, @c:d))"
argument_list|,
literal|"function*coalesce*coalesce*@jcr:content/foo2*@jcr:content/foo*coalesce*@a:b*@c:d"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sql2
parameter_list|()
block|{
name|checkConvert
argument_list|(
literal|"upper([data])"
argument_list|,
literal|"function*upper*@data"
argument_list|)
expr_stmt|;
name|checkConvert
argument_list|(
literal|"lower([test/data])"
argument_list|,
literal|"function*lower*@test/data"
argument_list|)
expr_stmt|;
name|checkConvert
argument_list|(
literal|"lower(name())"
argument_list|,
literal|"function*lower*@:name"
argument_list|)
expr_stmt|;
name|checkConvert
argument_list|(
literal|"lower(localname())"
argument_list|,
literal|"function*lower*@:localname"
argument_list|)
expr_stmt|;
name|checkConvert
argument_list|(
literal|"length([test/data])"
argument_list|,
literal|"function*length*@test/data"
argument_list|)
expr_stmt|;
name|checkConvert
argument_list|(
literal|"length(name())"
argument_list|,
literal|"function*length*@:name"
argument_list|)
expr_stmt|;
name|checkConvert
argument_list|(
literal|"lower(upper([test/data]))"
argument_list|,
literal|"function*lower*upper*@test/data"
argument_list|)
expr_stmt|;
comment|// the ']' character is escaped as ']]'
name|checkConvert
argument_list|(
literal|"[strange[0]]]"
argument_list|,
literal|"function*@strange[0]"
argument_list|)
expr_stmt|;
name|checkConvert
argument_list|(
literal|"coalesce([jcr:content/foo2],[jcr:content/foo])"
argument_list|,
literal|"function*coalesce*@jcr:content/foo2*@jcr:content/foo"
argument_list|)
expr_stmt|;
name|checkConvert
argument_list|(
literal|"coalesce([jcr:content/foo2], lower([jcr:content/foo]))"
argument_list|,
literal|"function*coalesce*@jcr:content/foo2*lower*@jcr:content/foo"
argument_list|)
expr_stmt|;
name|checkConvert
argument_list|(
literal|"coalesce([jcr:content/foo2] , coalesce([jcr:content/foo],lower(name())))"
argument_list|,
literal|"function*coalesce*@jcr:content/foo2*coalesce*@jcr:content/foo*lower*@:name"
argument_list|)
expr_stmt|;
name|checkConvert
argument_list|(
literal|"coalesce(coalesce([jcr:content/foo2],[jcr:content/foo]), coalesce([a:b], [c:d]))"
argument_list|,
literal|"function*coalesce*coalesce*@jcr:content/foo2*@jcr:content/foo*coalesce*@a:b*@c:d"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|checkConvert
parameter_list|(
name|String
name|function
parameter_list|,
name|String
name|expectedPolishNotation
parameter_list|)
block|{
name|String
name|p
init|=
name|FunctionIndexProcessor
operator|.
name|convertToPolishNotation
argument_list|(
name|function
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPolishNotation
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

