begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|elements
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|GlobbingPathHelper
block|{
comment|/**      * Converts the provided path containing glob characters<code>*</code>       * and<code>**</code> into a regular expression. The definition matches       * that of the GlobbingPathFilter with the addition that this conversion      * also supports sub-paths which do not start with a<code>/</code>.      *<p>      * The rules are:      *<ul>      *<li>leading<code>**</code> matches<code>/foo</code> and<code>bar</code></li>      *<li>leading<code>/**</code> matches<code>/foo</code> but not<code>bar</code></li>      *<li>intermittent<code>**</code> matches zero or any number of path elements</li>      *<li>trailing<code>**</code> matches anything not ending with a<code>/</code></li>      *<li>single<code>*</code> matches anything except<code>/</code></li>      *<li><code>?</code> is not a special character</li>      *<li>anything not a star is wrapped into<code>\Q...\E</code> pairs</li>      *</ul>      * @param pathWithGlobs path that can contain * and **      * @return a regular expression      * @see GlobbingPathFilter      */
specifier|public
specifier|static
name|String
name|globPathAsRegex
parameter_list|(
name|String
name|pathWithGlobs
parameter_list|)
block|{
if|if
condition|(
name|pathWithGlobs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|pathWithGlobs
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
return|return
name|pathWithGlobs
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|elements
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|elements
argument_list|(
name|pathWithGlobs
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\\Q"
argument_list|)
expr_stmt|;
if|if
condition|(
name|pathWithGlobs
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|elements
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"**"
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\\E[^/]*(/[^/]*)*\\Q"
argument_list|)
expr_stmt|;
name|elements
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|int
name|size
init|=
name|elements
operator|.
name|size
argument_list|()
decl_stmt|;
name|boolean
name|endsWithStarStar
init|=
name|size
operator|==
literal|0
condition|?
literal|false
else|:
name|elements
operator|.
name|get
argument_list|(
name|size
operator|-
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"**"
argument_list|)
decl_stmt|;
if|if
condition|(
name|endsWithStarStar
condition|)
block|{
name|elements
operator|.
name|remove
argument_list|(
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|boolean
name|addSlash
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|pathElem
init|=
name|elements
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|addSlash
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pathElem
operator|.
name|equals
argument_list|(
literal|"**"
argument_list|)
condition|)
block|{
name|addSlash
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\\E[^/]*(/[^/]*)*\\Q"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|pathElem
operator|.
name|replace
argument_list|(
literal|"*"
argument_list|,
literal|"\\E[^/]*\\Q"
argument_list|)
argument_list|)
expr_stmt|;
name|addSlash
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|endsWithStarStar
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\\E(/[^/]*)*"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pathWithGlobs
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"/\\E"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\\E"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

