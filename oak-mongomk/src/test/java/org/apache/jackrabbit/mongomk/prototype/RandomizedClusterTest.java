begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|prototype
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|MemoryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|core
operator|.
name|MicroKernelImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsonObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_comment
comment|/**  * A simple randomized single-instance test.  */
end_comment

begin_class
specifier|public
class|class
name|RandomizedClusterTest
block|{
specifier|private
specifier|static
specifier|final
name|boolean
name|MONGO_DB
init|=
literal|false
decl_stmt|;
comment|// private static final boolean MONGO_DB = true;
specifier|private
specifier|static
specifier|final
name|int
name|MK_COUNT
init|=
literal|2
decl_stmt|;
specifier|private
name|MemoryDocumentStore
name|ds
decl_stmt|;
specifier|private
name|MemoryBlobStore
name|bs
decl_stmt|;
specifier|private
name|MongoMK
index|[]
name|mkList
init|=
operator|new
name|MongoMK
index|[
name|MK_COUNT
index|]
decl_stmt|;
specifier|private
name|MicroKernelImpl
index|[]
name|mkListGold
init|=
operator|new
name|MicroKernelImpl
index|[
name|MK_COUNT
index|]
decl_stmt|;
specifier|private
name|String
index|[]
name|revList
init|=
operator|new
name|String
index|[
name|MK_COUNT
index|]
decl_stmt|;
specifier|private
name|String
index|[]
name|revListGold
init|=
operator|new
name|String
index|[
name|MK_COUNT
index|]
decl_stmt|;
specifier|private
name|int
name|opId
decl_stmt|;
specifier|private
name|int
name|mkId
decl_stmt|;
specifier|private
name|StringBuilder
name|log
decl_stmt|;
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|addRemoveSet
parameter_list|()
throws|throws
name|Exception
block|{
name|MicroKernelImpl
name|mkG
init|=
operator|new
name|MicroKernelImpl
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MK_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|mkList
index|[
name|i
index|]
operator|=
name|createMK
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|revList
index|[
name|i
index|]
operator|=
name|mkList
index|[
name|i
index|]
operator|.
name|getHeadRevision
argument_list|()
expr_stmt|;
name|mkListGold
index|[
name|i
index|]
operator|=
name|mkG
expr_stmt|;
name|revListGold
index|[
name|i
index|]
operator|=
name|mkListGold
index|[
name|i
index|]
operator|.
name|getHeadRevision
argument_list|()
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ClusterRev
argument_list|>
name|revs
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ClusterRev
argument_list|>
argument_list|()
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|int
name|operations
init|=
literal|1000
decl_stmt|,
name|nodeCount
init|=
literal|10
decl_stmt|;
name|int
name|propertyCount
init|=
literal|5
decl_stmt|,
name|valueCount
init|=
literal|10
decl_stmt|;
name|int
name|maxBackRev
init|=
literal|20
decl_stmt|;
name|log
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|maskOk
init|=
literal|0
decl_stmt|,
name|maskFail
init|=
literal|0
decl_stmt|;
name|int
name|opCount
init|=
literal|6
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operations
condition|;
name|i
operator|++
control|)
block|{
name|opId
operator|=
name|i
expr_stmt|;
name|mkId
operator|=
name|r
operator|.
name|nextInt
argument_list|(
name|mkList
operator|.
name|length
argument_list|)
expr_stmt|;
name|String
name|node
init|=
literal|"t"
operator|+
name|r
operator|.
name|nextInt
argument_list|(
name|nodeCount
argument_list|)
decl_stmt|;
name|String
name|node2
init|=
literal|"t"
operator|+
name|r
operator|.
name|nextInt
argument_list|(
name|nodeCount
argument_list|)
decl_stmt|;
name|String
name|property
init|=
literal|"p"
operator|+
name|r
operator|.
name|nextInt
argument_list|(
name|propertyCount
argument_list|)
decl_stmt|;
name|String
name|value
init|=
literal|""
operator|+
name|r
operator|.
name|nextInt
argument_list|(
name|valueCount
argument_list|)
decl_stmt|;
name|String
name|diff
decl_stmt|;
name|int
name|op
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|opCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|20
condition|)
block|{
comment|// we need to add many nodes first, so that
comment|// there are enough nodes to operate on
name|op
operator|=
literal|0
expr_stmt|;
block|}
name|boolean
name|result
decl_stmt|;
switch|switch
condition|(
name|op
condition|)
block|{
case|case
literal|0
case|:
name|diff
operator|=
literal|"+ \""
operator|+
name|node
operator|+
literal|"\": { \""
operator|+
name|property
operator|+
literal|"\": "
operator|+
name|value
operator|+
literal|"}"
expr_stmt|;
name|log
argument_list|(
name|diff
argument_list|)
expr_stmt|;
name|result
operator|=
name|commit
argument_list|(
name|diff
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|diff
operator|=
literal|"- \""
operator|+
name|node
operator|+
literal|"\""
expr_stmt|;
name|log
argument_list|(
name|diff
argument_list|)
expr_stmt|;
name|result
operator|=
name|commit
argument_list|(
name|diff
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|diff
operator|=
literal|"^ \""
operator|+
name|node
operator|+
literal|"/"
operator|+
name|property
operator|+
literal|"\": "
operator|+
name|value
expr_stmt|;
name|log
argument_list|(
name|diff
argument_list|)
expr_stmt|;
name|result
operator|=
name|commit
argument_list|(
name|diff
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|diff
operator|=
literal|"> \""
operator|+
name|node
operator|+
literal|"\": \""
operator|+
name|node2
operator|+
literal|"\""
expr_stmt|;
name|log
argument_list|(
name|diff
argument_list|)
expr_stmt|;
name|result
operator|=
name|commit
argument_list|(
name|diff
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|diff
operator|=
literal|"* \""
operator|+
name|node
operator|+
literal|"\": \""
operator|+
name|node2
operator|+
literal|"\""
expr_stmt|;
name|log
argument_list|(
name|diff
argument_list|)
expr_stmt|;
name|result
operator|=
name|commit
argument_list|(
name|diff
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|revList
index|[
name|mkId
index|]
operator|=
name|mkList
index|[
name|mkId
index|]
operator|.
name|getHeadRevision
argument_list|()
expr_stmt|;
name|revListGold
index|[
name|mkId
index|]
operator|=
name|mkListGold
index|[
name|mkId
index|]
operator|.
name|getHeadRevision
argument_list|()
expr_stmt|;
comment|// fake failure
name|result
operator|=
name|i
operator|%
literal|2
operator|==
literal|0
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|()
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|result
condition|)
block|{
name|maskOk
operator||=
literal|1
operator|<<
name|op
expr_stmt|;
block|}
else|else
block|{
name|maskFail
operator||=
literal|1
operator|<<
name|op
expr_stmt|;
block|}
name|int
name|todo
decl_stmt|;
comment|//                get(node);
comment|//                get(node2);
name|MongoMK
name|mk
init|=
name|mkList
index|[
name|mkId
index|]
decl_stmt|;
name|MicroKernelImpl
name|mkGold
init|=
name|mkListGold
index|[
name|mkId
index|]
decl_stmt|;
name|ClusterRev
name|cr
init|=
operator|new
name|ClusterRev
argument_list|()
decl_stmt|;
name|cr
operator|.
name|mkId
operator|=
name|mkId
expr_stmt|;
name|cr
operator|.
name|rev
operator|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
expr_stmt|;
name|cr
operator|.
name|revGold
operator|=
name|mkGold
operator|.
name|getHeadRevision
argument_list|()
expr_stmt|;
name|revs
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|cr
argument_list|)
expr_stmt|;
name|revs
operator|.
name|remove
argument_list|(
name|i
operator|-
name|maxBackRev
argument_list|)
expr_stmt|;
name|int
name|revId
init|=
name|i
operator|-
name|r
operator|.
name|nextInt
argument_list|(
name|maxBackRev
argument_list|)
decl_stmt|;
name|cr
operator|=
name|revs
operator|.
name|get
argument_list|(
name|revId
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|!=
literal|null
condition|)
block|{
name|int
name|todo2
decl_stmt|;
comment|//                    get(node, cr.revGold, cr.rev);
block|}
block|}
if|if
condition|(
name|Integer
operator|.
name|bitCount
argument_list|(
name|maskOk
argument_list|)
operator|!=
name|opCount
condition|)
block|{
name|fail
argument_list|(
literal|"Not all operations were at least once successful: "
operator|+
name|Integer
operator|.
name|toBinaryString
argument_list|(
name|maskOk
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Integer
operator|.
name|bitCount
argument_list|(
name|maskFail
argument_list|)
operator|!=
name|opCount
condition|)
block|{
name|fail
argument_list|(
literal|"Not all operations failed at least once: "
operator|+
name|Integer
operator|.
name|toBinaryString
argument_list|(
name|maskFail
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"log: "
operator|+
name|log
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"log: "
operator|+
name|log
argument_list|,
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MK_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|mkList
index|[
name|i
index|]
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|mkListGold
index|[
name|i
index|]
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
comment|// System.out.println(log);
comment|// System.out.println();
block|}
specifier|private
name|void
name|log
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|msg
operator|=
name|opId
operator|+
literal|": ["
operator|+
name|mkId
operator|+
literal|"] "
operator|+
name|msg
operator|+
literal|"\n"
expr_stmt|;
name|log
operator|.
name|append
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|int
name|test
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|get
parameter_list|(
name|String
name|node
parameter_list|)
block|{
name|String
name|headGold
init|=
name|mkListGold
index|[
name|mkId
index|]
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|String
name|head
init|=
name|mkList
index|[
name|mkId
index|]
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|get
argument_list|(
name|node
argument_list|,
name|headGold
argument_list|,
name|head
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|get
parameter_list|(
name|String
name|node
parameter_list|,
name|String
name|headGold
parameter_list|,
name|String
name|head
parameter_list|)
block|{
name|String
name|p
init|=
literal|"/"
operator|+
name|node
decl_stmt|;
name|MicroKernelImpl
name|mkGold
init|=
name|mkListGold
index|[
name|mkId
index|]
decl_stmt|;
name|MongoMK
name|mk
init|=
name|mkList
index|[
name|mkId
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|mkGold
operator|.
name|nodeExists
argument_list|(
name|p
argument_list|,
name|headGold
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
name|p
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
literal|"path: "
operator|+
name|p
argument_list|,
name|mk
operator|.
name|nodeExists
argument_list|(
name|p
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|resultGold
init|=
name|mkGold
operator|.
name|getNodes
argument_list|(
name|p
argument_list|,
name|headGold
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|mk
operator|.
name|getNodes
argument_list|(
name|p
argument_list|,
name|head
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|resultGold
operator|=
name|normalize
argument_list|(
name|resultGold
argument_list|)
expr_stmt|;
name|result
operator|=
name|normalize
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|resultGold
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|normalize
parameter_list|(
name|String
name|json
parameter_list|)
block|{
name|JsopTokenizer
name|t
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|JsonObject
name|o
init|=
name|JsonObject
operator|.
name|create
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|JsopBuilder
name|w
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|o
operator|.
name|toJson
argument_list|(
name|w
argument_list|)
expr_stmt|;
return|return
name|w
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|commit
parameter_list|(
name|String
name|diff
parameter_list|)
block|{
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
name|MicroKernelImpl
name|mkGold
init|=
name|mkListGold
index|[
name|mkId
index|]
decl_stmt|;
name|String
name|revGold
init|=
name|revListGold
index|[
name|mkId
index|]
decl_stmt|;
name|MongoMK
name|mk
init|=
name|mkList
index|[
name|mkId
index|]
decl_stmt|;
name|String
name|rev
init|=
name|revList
index|[
name|mkId
index|]
decl_stmt|;
try|try
block|{
name|mkGold
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
name|diff
argument_list|,
name|revGold
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// System.out.println("--> fail " + e.toString());
try|try
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
name|diff
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail: "
operator|+
name|diff
operator|+
literal|" with exception "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e2
parameter_list|)
block|{
comment|// expected
block|}
block|}
if|if
condition|(
name|ok
condition|)
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
name|diff
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|ok
return|;
block|}
specifier|private
name|MongoMK
name|createMK
parameter_list|(
name|int
name|clusterId
parameter_list|)
block|{
name|MongoMK
operator|.
name|Builder
name|builder
init|=
operator|new
name|MongoMK
operator|.
name|Builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|MONGO_DB
condition|)
block|{
name|DB
name|db
init|=
name|MongoUtils
operator|.
name|getConnection
argument_list|()
operator|.
name|getDB
argument_list|()
decl_stmt|;
name|MongoUtils
operator|.
name|dropCollections
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMongoDB
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ds
operator|==
literal|null
condition|)
block|{
name|ds
operator|=
operator|new
name|MemoryDocumentStore
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bs
operator|==
literal|null
condition|)
block|{
name|bs
operator|=
operator|new
name|MemoryBlobStore
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|setDocumentStore
argument_list|(
name|ds
argument_list|)
operator|.
name|setBlobStore
argument_list|(
name|bs
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
operator|.
name|open
argument_list|()
return|;
block|}
comment|/**      * A revision in a certain cluster node.      */
specifier|static
class|class
name|ClusterRev
block|{
name|int
name|mkId
decl_stmt|;
name|String
name|rev
decl_stmt|,
name|revGold
decl_stmt|;
block|}
block|}
end_class

end_unit

