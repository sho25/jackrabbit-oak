begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|Commit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|Id
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|StoredCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|TraversingNodeDiffHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|RevisionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|CommitGate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|SimpleLRUCache
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|MicroKernelImpl
implements|implements
name|MicroKernel
block|{
specifier|protected
name|Repository
name|rep
decl_stmt|;
specifier|private
specifier|final
name|CommitGate
name|gate
init|=
operator|new
name|CommitGate
argument_list|()
decl_stmt|;
comment|/**      * Key: revision id, Value: diff string      */
specifier|private
specifier|final
name|Map
argument_list|<
name|Id
argument_list|,
name|String
argument_list|>
name|diffCache
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
name|SimpleLRUCache
operator|.
expr|<
name|Id
argument_list|,
name|String
operator|>
name|newInstance
argument_list|(
literal|100
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
name|MicroKernelImpl
parameter_list|(
name|String
name|homeDir
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|init
argument_list|(
name|homeDir
argument_list|)
expr_stmt|;
block|}
comment|/**      * Alternate constructor, used for testing.      *       * @param rep repository, already initialized      */
specifier|public
name|MicroKernelImpl
parameter_list|(
name|Repository
name|rep
parameter_list|)
block|{
name|this
operator|.
name|rep
operator|=
name|rep
expr_stmt|;
block|}
specifier|protected
name|void
name|init
parameter_list|(
name|String
name|homeDir
parameter_list|)
throws|throws
name|MicroKernelException
block|{
try|try
block|{
name|rep
operator|=
operator|new
name|Repository
argument_list|(
name|homeDir
argument_list|)
expr_stmt|;
name|rep
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|gate
operator|.
name|commit
argument_list|(
literal|"end"
argument_list|)
expr_stmt|;
if|if
condition|(
name|rep
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rep
operator|.
name|shutDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{
comment|// fail silently
block|}
name|rep
operator|=
literal|null
expr_stmt|;
block|}
name|diffCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getHeadRevision
parameter_list|()
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this instance has already been disposed"
argument_list|)
throw|;
block|}
return|return
name|getHeadRevisionId
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Same as<code>getHeadRevisionId</code>, with typed<code>Id</code> return value instead of string.      *       * @see #getHeadRevision()      */
specifier|private
name|Id
name|getHeadRevisionId
parameter_list|()
throws|throws
name|MicroKernelException
block|{
try|try
block|{
return|return
name|rep
operator|.
name|getHeadRevision
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getRevisions
parameter_list|(
name|long
name|since
parameter_list|,
name|int
name|maxEntries
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this instance has already been disposed"
argument_list|)
throw|;
block|}
name|maxEntries
operator|=
name|maxEntries
operator|<
literal|0
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|maxEntries
expr_stmt|;
name|List
argument_list|<
name|StoredCommit
argument_list|>
name|history
init|=
operator|new
name|ArrayList
argument_list|<
name|StoredCommit
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|StoredCommit
name|commit
init|=
name|rep
operator|.
name|getHeadCommit
argument_list|()
decl_stmt|;
while|while
condition|(
name|commit
operator|!=
literal|null
operator|&&
name|history
operator|.
name|size
argument_list|()
operator|<
name|maxEntries
operator|&&
name|commit
operator|.
name|getCommitTS
argument_list|()
operator|>=
name|since
condition|)
block|{
name|history
operator|.
name|add
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|Id
name|commitId
init|=
name|commit
operator|.
name|getParentId
argument_list|()
decl_stmt|;
if|if
condition|(
name|commitId
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|commit
operator|=
name|rep
operator|.
name|getCommit
argument_list|(
name|commitId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|JsopBuilder
name|buff
init|=
operator|new
name|JsopBuilder
argument_list|()
operator|.
name|array
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|history
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|StoredCommit
name|commit
init|=
name|history
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|buff
operator|.
name|object
argument_list|()
operator|.
name|key
argument_list|(
literal|"id"
argument_list|)
operator|.
name|value
argument_list|(
name|commit
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|key
argument_list|(
literal|"ts"
argument_list|)
operator|.
name|value
argument_list|(
name|commit
operator|.
name|getCommitTS
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
return|return
name|buff
operator|.
name|endArray
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|waitForCommit
parameter_list|(
name|String
name|oldHeadRevision
parameter_list|,
name|long
name|maxWaitMillis
parameter_list|)
throws|throws
name|MicroKernelException
throws|,
name|InterruptedException
block|{
return|return
name|gate
operator|.
name|waitForCommit
argument_list|(
name|oldHeadRevision
argument_list|,
name|maxWaitMillis
argument_list|)
return|;
block|}
specifier|public
name|String
name|getJournal
parameter_list|(
name|String
name|fromRevision
parameter_list|,
name|String
name|toRevision
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this instance has already been disposed"
argument_list|)
throw|;
block|}
name|Id
name|fromRevisionId
init|=
name|Id
operator|.
name|fromString
argument_list|(
name|fromRevision
argument_list|)
decl_stmt|;
name|Id
name|toRevisionId
init|=
name|toRevision
operator|==
literal|null
condition|?
name|getHeadRevisionId
argument_list|()
else|:
name|Id
operator|.
name|fromString
argument_list|(
name|toRevision
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StoredCommit
argument_list|>
name|commits
init|=
operator|new
name|ArrayList
argument_list|<
name|StoredCommit
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|StoredCommit
name|toCommit
init|=
name|rep
operator|.
name|getCommit
argument_list|(
name|toRevisionId
argument_list|)
decl_stmt|;
name|Commit
name|fromCommit
decl_stmt|;
if|if
condition|(
name|toRevisionId
operator|.
name|equals
argument_list|(
name|fromRevisionId
argument_list|)
condition|)
block|{
name|fromCommit
operator|=
name|toCommit
expr_stmt|;
block|}
else|else
block|{
name|fromCommit
operator|=
name|rep
operator|.
name|getCommit
argument_list|(
name|fromRevisionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromCommit
operator|.
name|getCommitTS
argument_list|()
operator|>
name|toCommit
operator|.
name|getCommitTS
argument_list|()
condition|)
block|{
comment|// negative range, return empty array
return|return
literal|"[]"
return|;
block|}
block|}
comment|// collect commits, starting with toRevisionId
comment|// and traversing parent commit links until we've reached
comment|// fromRevisionId
name|StoredCommit
name|commit
init|=
name|toCommit
decl_stmt|;
while|while
condition|(
name|commit
operator|!=
literal|null
condition|)
block|{
name|commits
operator|.
name|add
argument_list|(
name|commit
argument_list|)
expr_stmt|;
if|if
condition|(
name|commit
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRevisionId
argument_list|)
condition|)
block|{
break|break;
block|}
name|Id
name|commitId
init|=
name|commit
operator|.
name|getParentId
argument_list|()
decl_stmt|;
if|if
condition|(
name|commitId
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|commit
operator|=
name|rep
operator|.
name|getCommit
argument_list|(
name|commitId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|JsopBuilder
name|commitBuff
init|=
operator|new
name|JsopBuilder
argument_list|()
operator|.
name|array
argument_list|()
decl_stmt|;
comment|// iterate over commits in chronological order,
comment|// starting with oldest commit
for|for
control|(
name|int
name|i
init|=
name|commits
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|StoredCommit
name|commit
init|=
name|commits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|commit
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|commitBuff
operator|.
name|object
argument_list|()
operator|.
name|key
argument_list|(
literal|"id"
argument_list|)
operator|.
name|value
argument_list|(
name|commit
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|key
argument_list|(
literal|"ts"
argument_list|)
operator|.
name|value
argument_list|(
name|commit
operator|.
name|getCommitTS
argument_list|()
argument_list|)
operator|.
name|key
argument_list|(
literal|"msg"
argument_list|)
operator|.
name|value
argument_list|(
name|commit
operator|.
name|getMsg
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|diff
init|=
name|diffCache
operator|.
name|get
argument_list|(
name|commit
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|==
literal|null
condition|)
block|{
name|diff
operator|=
name|diff
argument_list|(
name|commit
operator|.
name|getParentId
argument_list|()
argument_list|,
name|commit
operator|.
name|getId
argument_list|()
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|diffCache
operator|.
name|put
argument_list|(
name|commit
operator|.
name|getId
argument_list|()
argument_list|,
name|diff
argument_list|)
expr_stmt|;
block|}
name|commitBuff
operator|.
name|key
argument_list|(
literal|"changes"
argument_list|)
operator|.
name|value
argument_list|(
name|diff
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
return|return
name|commitBuff
operator|.
name|endArray
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|diff
parameter_list|(
name|String
name|fromRevision
parameter_list|,
name|String
name|toRevision
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|Id
name|toRevisionId
init|=
name|toRevision
operator|==
literal|null
condition|?
name|getHeadRevisionId
argument_list|()
else|:
name|Id
operator|.
name|fromString
argument_list|(
name|toRevision
argument_list|)
decl_stmt|;
return|return
name|diff
argument_list|(
name|Id
operator|.
name|fromString
argument_list|(
name|fromRevision
argument_list|)
argument_list|,
name|toRevisionId
argument_list|,
name|filter
argument_list|)
return|;
block|}
comment|/**      * Same as<code>diff</code>, with typed<code>Id</code> arguments instead of strings.      *       * @see #diff(String, String, String)       */
specifier|private
name|String
name|diff
parameter_list|(
name|Id
name|fromRevisionId
parameter_list|,
name|Id
name|toRevisionId
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// TODO extract and evaluate filter criteria (such as e.g. 'path') specified in 'filter' parameter
name|String
name|path
init|=
literal|"/"
decl_stmt|;
try|try
block|{
specifier|final
name|JsopBuilder
name|buff
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RevisionProvider
name|rp
init|=
name|rep
operator|.
name|getRevisionStore
argument_list|()
decl_stmt|;
comment|// maps (key: id of target node, value: path/to/target)
comment|// for tracking added/removed nodes; this allows us
comment|// to detect 'move' operations
specifier|final
name|HashMap
argument_list|<
name|Id
argument_list|,
name|String
argument_list|>
name|addedNodes
init|=
operator|new
name|HashMap
argument_list|<
name|Id
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|HashMap
argument_list|<
name|Id
argument_list|,
name|String
argument_list|>
name|removedNodes
init|=
operator|new
name|HashMap
argument_list|<
name|Id
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|NodeState
name|node1
decl_stmt|,
name|node2
decl_stmt|;
try|try
block|{
name|node1
operator|=
name|rep
operator|.
name|getNodeState
argument_list|(
name|fromRevisionId
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
name|node1
operator|=
literal|null
expr_stmt|;
block|}
try|try
block|{
name|node2
operator|=
name|rep
operator|.
name|getNodeState
argument_list|(
name|toRevisionId
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
name|node2
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|node1
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|node2
operator|!=
literal|null
condition|)
block|{
name|buff
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
name|path
argument_list|)
operator|.
name|object
argument_list|()
expr_stmt|;
name|toJson
argument_list|(
name|buff
argument_list|,
name|node2
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|buff
operator|.
name|endObject
argument_list|()
operator|.
name|newline
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"path doesn't exist in the specified revisions: "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|node2
operator|==
literal|null
condition|)
block|{
name|buff
operator|.
name|tag
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|buff
operator|.
name|value
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|buff
operator|.
name|newline
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
name|TraversingNodeDiffHandler
name|diffHandler
init|=
operator|new
name|TraversingNodeDiffHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
name|buff
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|getCurrentPath
argument_list|()
argument_list|,
name|after
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|encodedValue
argument_list|(
name|after
operator|.
name|getEncodedValue
argument_list|()
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|buff
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|getCurrentPath
argument_list|()
argument_list|,
name|after
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|encodedValue
argument_list|(
name|after
operator|.
name|getEncodedValue
argument_list|()
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
comment|// since property and node deletions can't be distinguished
comment|// using the "-<path>" notation we're representing
comment|// property deletions as "^<path>:null"
name|buff
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|getCurrentPath
argument_list|()
argument_list|,
name|before
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
literal|null
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|addedNodes
operator|.
name|put
argument_list|(
name|rp
operator|.
name|getId
argument_list|(
name|after
argument_list|)
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|getCurrentPath
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|buff
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|getCurrentPath
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|object
argument_list|()
expr_stmt|;
name|toJson
argument_list|(
name|buff
argument_list|,
name|after
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|buff
operator|.
name|endObject
argument_list|()
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
name|removedNodes
operator|.
name|put
argument_list|(
name|rp
operator|.
name|getId
argument_list|(
name|before
argument_list|)
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|getCurrentPath
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|buff
operator|.
name|tag
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|buff
operator|.
name|value
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|getCurrentPath
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|buff
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|diffHandler
operator|.
name|start
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|,
name|path
argument_list|)
expr_stmt|;
comment|// check if this commit includes 'move' operations
comment|// by building intersection of added and removed nodes
name|addedNodes
operator|.
name|keySet
argument_list|()
operator|.
name|retainAll
argument_list|(
name|removedNodes
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|addedNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// this commit includes 'move' operations
name|removedNodes
operator|.
name|keySet
argument_list|()
operator|.
name|retainAll
argument_list|(
name|addedNodes
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// addedNodes& removedNodes now only contain information about moved nodes
comment|// re-build the diff in a 2nd pass, this time representing moves correctly
name|buff
operator|.
name|resetWriter
argument_list|()
expr_stmt|;
comment|// TODO refactor code, avoid duplication
name|diffHandler
operator|=
operator|new
name|TraversingNodeDiffHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
name|buff
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|getCurrentPath
argument_list|()
argument_list|,
name|after
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|encodedValue
argument_list|(
name|after
operator|.
name|getEncodedValue
argument_list|()
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|buff
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|getCurrentPath
argument_list|()
argument_list|,
name|after
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|encodedValue
argument_list|(
name|after
operator|.
name|getEncodedValue
argument_list|()
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
comment|// since property and node deletions can't be distinguished
comment|// using the "-<path>" notation we're representing
comment|// property deletions as "^<path>:null"
name|buff
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|getCurrentPath
argument_list|()
argument_list|,
name|before
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
literal|null
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
if|if
condition|(
name|addedNodes
operator|.
name|containsKey
argument_list|(
name|rp
operator|.
name|getId
argument_list|(
name|after
argument_list|)
argument_list|)
condition|)
block|{
comment|// moved node, will be processed separately
return|return;
block|}
name|buff
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|getCurrentPath
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|object
argument_list|()
expr_stmt|;
name|toJson
argument_list|(
name|buff
argument_list|,
name|after
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|buff
operator|.
name|endObject
argument_list|()
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
if|if
condition|(
name|addedNodes
operator|.
name|containsKey
argument_list|(
name|rp
operator|.
name|getId
argument_list|(
name|before
argument_list|)
argument_list|)
condition|)
block|{
comment|// moved node, will be processed separately
return|return;
block|}
name|buff
operator|.
name|tag
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|buff
operator|.
name|value
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|getCurrentPath
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|buff
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|diffHandler
operator|.
name|start
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|,
name|path
argument_list|)
expr_stmt|;
comment|// finally process moved nodes
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Id
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|addedNodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|buff
operator|.
name|tag
argument_list|(
literal|'>'
argument_list|)
operator|.
comment|// path/to/deleted/node
name|key
argument_list|(
name|removedNodes
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
comment|// path/to/added/node
name|value
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|nodeExists
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revision
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this instance has already been disposed"
argument_list|)
throw|;
block|}
name|Id
name|revisionId
init|=
name|revision
operator|==
literal|null
condition|?
name|getHeadRevisionId
argument_list|()
else|:
name|Id
operator|.
name|fromString
argument_list|(
name|revision
argument_list|)
decl_stmt|;
return|return
name|rep
operator|.
name|nodeExists
argument_list|(
name|revisionId
argument_list|,
name|path
argument_list|)
return|;
block|}
specifier|public
name|long
name|getChildNodeCount
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revision
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this instance has already been disposed"
argument_list|)
throw|;
block|}
name|Id
name|revisionId
init|=
name|revision
operator|==
literal|null
condition|?
name|getHeadRevisionId
argument_list|()
else|:
name|Id
operator|.
name|fromString
argument_list|(
name|revision
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|rep
operator|.
name|getNodeState
argument_list|(
name|revisionId
argument_list|,
name|path
argument_list|)
operator|.
name|getChildNodeCount
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getNodes
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revision
parameter_list|)
throws|throws
name|MicroKernelException
block|{
return|return
name|getNodes
argument_list|(
name|path
argument_list|,
name|revision
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|String
name|getNodes
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revision
parameter_list|,
name|int
name|depth
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|count
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this instance has already been disposed"
argument_list|)
throw|;
block|}
name|Id
name|revisionId
init|=
name|revision
operator|==
literal|null
condition|?
name|getHeadRevisionId
argument_list|()
else|:
name|Id
operator|.
name|fromString
argument_list|(
name|revision
argument_list|)
decl_stmt|;
comment|// TODO extract and evaluate filter criteria (such as e.g. ':hash') specified in 'filter' parameter
try|try
block|{
name|JsopBuilder
name|buf
init|=
operator|new
name|JsopBuilder
argument_list|()
operator|.
name|object
argument_list|()
decl_stmt|;
name|toJson
argument_list|(
name|buf
argument_list|,
name|rep
operator|.
name|getNodeState
argument_list|(
name|revisionId
argument_list|,
name|path
argument_list|)
argument_list|,
name|depth
argument_list|,
operator|(
name|int
operator|)
name|offset
argument_list|,
name|count
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|endObject
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|commit
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|jsonDiff
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this instance has already been disposed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"absolute path expected: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|Id
name|revisionId
init|=
name|revision
operator|==
literal|null
condition|?
name|getHeadRevisionId
argument_list|()
else|:
name|Id
operator|.
name|fromString
argument_list|(
name|revision
argument_list|)
decl_stmt|;
try|try
block|{
name|JsopTokenizer
name|t
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|jsonDiff
argument_list|)
decl_stmt|;
name|CommitBuilder
name|cb
init|=
name|rep
operator|.
name|getCommitBuilder
argument_list|(
name|revisionId
argument_list|,
name|message
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|r
init|=
name|t
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|JsopTokenizer
operator|.
name|END
condition|)
block|{
break|break;
block|}
name|int
name|pos
decl_stmt|;
comment|// used for error reporting
switch|switch
condition|(
name|r
condition|)
block|{
case|case
literal|'+'
case|:
block|{
name|pos
operator|=
name|t
operator|.
name|getLastPos
argument_list|()
expr_stmt|;
name|String
name|subPath
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|'{'
argument_list|)
condition|)
block|{
name|String
name|nodePath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|subPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|nodePath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"absolute path expected: "
operator|+
name|nodePath
operator|+
literal|", pos: "
operator|+
name|pos
argument_list|)
throw|;
block|}
name|String
name|parentPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|nodePath
argument_list|)
decl_stmt|;
name|String
name|nodeName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|nodePath
argument_list|)
decl_stmt|;
comment|// build the list of added nodes recursively
name|LinkedList
argument_list|<
name|AddNodeOperation
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<
name|AddNodeOperation
argument_list|>
argument_list|()
decl_stmt|;
name|addNode
argument_list|(
name|list
argument_list|,
name|parentPath
argument_list|,
name|nodeName
argument_list|,
name|t
argument_list|)
expr_stmt|;
for|for
control|(
name|AddNodeOperation
name|op
range|:
name|list
control|)
block|{
name|cb
operator|.
name|addNode
argument_list|(
name|op
operator|.
name|path
argument_list|,
name|op
operator|.
name|name
argument_list|,
name|op
operator|.
name|props
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|value
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
name|JsopTokenizer
operator|.
name|NULL
argument_list|)
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|t
operator|.
name|readRawValue
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|String
name|targetPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|subPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"absolute path expected: "
operator|+
name|targetPath
operator|+
literal|", pos: "
operator|+
name|pos
argument_list|)
throw|;
block|}
name|String
name|parentPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|targetPath
argument_list|)
decl_stmt|;
name|String
name|propName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|targetPath
argument_list|)
decl_stmt|;
name|cb
operator|.
name|setProperty
argument_list|(
name|parentPath
argument_list|,
name|propName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|'-'
case|:
block|{
name|pos
operator|=
name|t
operator|.
name|getLastPos
argument_list|()
expr_stmt|;
name|String
name|subPath
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|String
name|targetPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|subPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"absolute path expected: "
operator|+
name|targetPath
operator|+
literal|", pos: "
operator|+
name|pos
argument_list|)
throw|;
block|}
name|cb
operator|.
name|removeNode
argument_list|(
name|targetPath
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'^'
case|:
block|{
name|pos
operator|=
name|t
operator|.
name|getLastPos
argument_list|()
expr_stmt|;
name|String
name|subPath
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|value
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
name|JsopTokenizer
operator|.
name|NULL
argument_list|)
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|t
operator|.
name|readRawValue
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|String
name|targetPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|subPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"absolute path expected: "
operator|+
name|targetPath
operator|+
literal|", pos: "
operator|+
name|pos
argument_list|)
throw|;
block|}
name|String
name|parentPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|targetPath
argument_list|)
decl_stmt|;
name|String
name|propName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|targetPath
argument_list|)
decl_stmt|;
name|cb
operator|.
name|setProperty
argument_list|(
name|parentPath
argument_list|,
name|propName
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'>'
case|:
block|{
name|pos
operator|=
name|t
operator|.
name|getLastPos
argument_list|()
expr_stmt|;
name|String
name|subPath
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|String
name|srcPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|subPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|srcPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"absolute path expected: "
operator|+
name|srcPath
operator|+
literal|", pos: "
operator|+
name|pos
argument_list|)
throw|;
block|}
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|pos
operator|=
name|t
operator|.
name|getLastPos
argument_list|()
expr_stmt|;
name|String
name|targetPath
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
name|targetPath
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"absolute path expected: "
operator|+
name|targetPath
operator|+
literal|", pos: "
operator|+
name|pos
argument_list|)
throw|;
block|}
block|}
name|cb
operator|.
name|moveNode
argument_list|(
name|srcPath
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'*'
case|:
block|{
name|pos
operator|=
name|t
operator|.
name|getLastPos
argument_list|()
expr_stmt|;
name|String
name|subPath
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|String
name|srcPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|subPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|srcPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"absolute path expected: "
operator|+
name|srcPath
operator|+
literal|", pos: "
operator|+
name|pos
argument_list|)
throw|;
block|}
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|pos
operator|=
name|t
operator|.
name|getLastPos
argument_list|()
expr_stmt|;
name|String
name|targetPath
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
name|targetPath
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"absolute path expected: "
operator|+
name|targetPath
operator|+
literal|", pos: "
operator|+
name|pos
argument_list|)
throw|;
block|}
block|}
name|cb
operator|.
name|copyNode
argument_list|(
name|srcPath
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"token type: "
operator|+
name|t
operator|.
name|getTokenType
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|Id
name|newHead
init|=
name|cb
operator|.
name|doCommit
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|newHead
operator|.
name|equals
argument_list|(
name|revisionId
argument_list|)
condition|)
block|{
comment|// non-empty commit
name|gate
operator|.
name|commit
argument_list|(
name|newHead
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|newHead
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|long
name|getLength
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this instance has already been disposed"
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|rep
operator|.
name|getRevisionStore
argument_list|()
operator|.
name|getBlobLength
argument_list|(
name|blobId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|read
parameter_list|(
name|String
name|blobId
parameter_list|,
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|buff
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this instance has already been disposed"
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|rep
operator|.
name|getRevisionStore
argument_list|()
operator|.
name|getBlob
argument_list|(
name|blobId
argument_list|,
name|pos
argument_list|,
name|buff
argument_list|,
name|off
argument_list|,
name|length
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|write
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this instance has already been disposed"
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|rep
operator|.
name|getRevisionStore
argument_list|()
operator|.
name|putBlob
argument_list|(
name|in
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|//-------------------------------------------------------< implementation>
name|void
name|toJson
parameter_list|(
name|JsopBuilder
name|builder
parameter_list|,
name|NodeState
name|node
parameter_list|,
name|int
name|depth
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|count
parameter_list|,
name|boolean
name|inclVirtualProps
parameter_list|)
block|{
for|for
control|(
name|PropertyState
name|property
range|:
name|node
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|builder
operator|.
name|key
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|encodedValue
argument_list|(
name|property
operator|.
name|getEncodedValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|childCount
init|=
name|node
operator|.
name|getChildNodeCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|inclVirtualProps
condition|)
block|{
name|builder
operator|.
name|key
argument_list|(
literal|":childNodeCount"
argument_list|)
operator|.
name|value
argument_list|(
name|childCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|childCount
operator|>
literal|0
operator|&&
name|depth
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|node
operator|.
name|getChildNodeEntries
argument_list|(
name|offset
argument_list|,
name|count
argument_list|)
control|)
block|{
name|builder
operator|.
name|key
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|object
argument_list|()
expr_stmt|;
if|if
condition|(
name|depth
operator|>
literal|0
condition|)
block|{
name|toJson
argument_list|(
name|builder
argument_list|,
name|entry
operator|.
name|getNode
argument_list|()
argument_list|,
name|depth
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
name|inclVirtualProps
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|void
name|addNode
parameter_list|(
name|LinkedList
argument_list|<
name|AddNodeOperation
argument_list|>
name|list
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|name
parameter_list|,
name|JsopTokenizer
name|t
parameter_list|)
throws|throws
name|Exception
block|{
name|AddNodeOperation
name|op
init|=
operator|new
name|AddNodeOperation
argument_list|()
decl_stmt|;
name|op
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|op
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|t
operator|.
name|matches
argument_list|(
literal|'}'
argument_list|)
condition|)
block|{
do|do
block|{
name|String
name|key
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|'{'
argument_list|)
condition|)
block|{
name|addNode
argument_list|(
name|list
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
argument_list|,
name|key
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|op
operator|.
name|props
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|t
operator|.
name|readRawValue
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
condition|)
do|;
name|t
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
block|}
comment|//--------------------------------------------------------< inner classes>
specifier|static
class|class
name|AddNodeOperation
block|{
name|String
name|path
decl_stmt|;
name|String
name|name
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
block|}
block|}
end_class

end_unit

