begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|observation
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
operator|.
name|concat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|stats
operator|.
name|RepositoryStatistics
operator|.
name|Type
operator|.
name|OBSERVATION_EVENT_COUNTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|stats
operator|.
name|RepositoryStatistics
operator|.
name|Type
operator|.
name|OBSERVATION_EVENT_DURATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|registerMBean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|registerObserver
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ForwardingIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Monitor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Monitor
operator|.
name|Guard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|jmx
operator|.
name|EventListenerMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|EventIteratorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|observation
operator|.
name|ListenerTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|CommitRateLimiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|ACFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|EventFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|FilterProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|Filters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|BackgroundObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|CompositeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A {@code ChangeProcessor} generates observation {@link javax.jcr.observation.Event}s  * based on a {@link FilterProvider filter} and delivers them to an {@link EventListener}.  *<p>  * After instantiation a {@code ChangeProcessor} must be started in order to start  * delivering observation events and stopped to stop doing so.  */
end_comment

begin_class
class|class
name|ChangeProcessor
implements|implements
name|Observer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChangeProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ContentSession
name|contentSession
decl_stmt|;
specifier|private
specifier|final
name|NamePathMapper
name|namePathMapper
decl_stmt|;
specifier|private
specifier|final
name|PermissionProvider
name|permissionProvider
decl_stmt|;
specifier|private
specifier|final
name|ListenerTracker
name|tracker
decl_stmt|;
specifier|private
specifier|final
name|EventListener
name|eventListener
decl_stmt|;
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|List
argument_list|<
name|FilterProvider
argument_list|>
argument_list|>
name|filterProvider
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|eventCount
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|eventDuration
decl_stmt|;
specifier|private
specifier|final
name|int
name|queueLength
decl_stmt|;
specifier|private
specifier|final
name|CommitRateLimiter
name|commitRateLimiter
decl_stmt|;
specifier|private
name|CompositeRegistration
name|registration
decl_stmt|;
specifier|private
name|NodeState
name|previousRoot
decl_stmt|;
specifier|public
name|ChangeProcessor
parameter_list|(
name|ContentSession
name|contentSession
parameter_list|,
name|NamePathMapper
name|namePathMapper
parameter_list|,
name|PermissionProvider
name|permissionProvider
parameter_list|,
name|ListenerTracker
name|tracker
parameter_list|,
name|List
argument_list|<
name|FilterProvider
argument_list|>
name|filters
parameter_list|,
name|StatisticManager
name|statisticManager
parameter_list|,
name|int
name|queueLength
parameter_list|,
name|CommitRateLimiter
name|commitRateLimiter
parameter_list|)
block|{
name|this
operator|.
name|contentSession
operator|=
name|contentSession
expr_stmt|;
name|this
operator|.
name|namePathMapper
operator|=
name|namePathMapper
expr_stmt|;
name|this
operator|.
name|permissionProvider
operator|=
name|permissionProvider
expr_stmt|;
name|this
operator|.
name|tracker
operator|=
name|tracker
expr_stmt|;
name|eventListener
operator|=
name|tracker
operator|.
name|getTrackedListener
argument_list|()
expr_stmt|;
name|filterProvider
operator|=
operator|new
name|AtomicReference
argument_list|<
name|List
argument_list|<
name|FilterProvider
argument_list|>
argument_list|>
argument_list|(
name|filters
argument_list|)
expr_stmt|;
name|this
operator|.
name|eventCount
operator|=
name|statisticManager
operator|.
name|getCounter
argument_list|(
name|OBSERVATION_EVENT_COUNTER
argument_list|)
expr_stmt|;
name|this
operator|.
name|eventDuration
operator|=
name|statisticManager
operator|.
name|getCounter
argument_list|(
name|OBSERVATION_EVENT_DURATION
argument_list|)
expr_stmt|;
name|this
operator|.
name|queueLength
operator|=
name|queueLength
expr_stmt|;
name|this
operator|.
name|commitRateLimiter
operator|=
name|commitRateLimiter
expr_stmt|;
block|}
comment|/**      * Set the filter for the events this change processor will generate.      * @param filters      */
specifier|public
name|void
name|setFilterProvider
parameter_list|(
name|List
argument_list|<
name|FilterProvider
argument_list|>
name|filters
parameter_list|)
block|{
name|filterProvider
operator|.
name|set
argument_list|(
name|filters
argument_list|)
expr_stmt|;
block|}
comment|/**      * Start this change processor      * @param whiteboard  the whiteboard instance to used for scheduling individual      *                    runs of this change processor.      * @throws IllegalStateException if started already      */
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|(
name|Whiteboard
name|whiteboard
parameter_list|)
block|{
name|checkState
argument_list|(
name|registration
operator|==
literal|null
argument_list|,
literal|"Change processor started already"
argument_list|)
expr_stmt|;
specifier|final
name|WhiteboardExecutor
name|executor
init|=
operator|new
name|WhiteboardExecutor
argument_list|()
decl_stmt|;
name|executor
operator|.
name|start
argument_list|(
name|whiteboard
argument_list|)
expr_stmt|;
name|registration
operator|=
operator|new
name|CompositeRegistration
argument_list|(
name|registerObserver
argument_list|(
name|whiteboard
argument_list|,
name|createObserver
argument_list|(
name|executor
argument_list|)
argument_list|)
argument_list|,
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|EventListenerMBean
operator|.
name|class
argument_list|,
name|tracker
operator|.
name|getListenerMBean
argument_list|()
argument_list|,
literal|"EventListener"
argument_list|,
name|tracker
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Registration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|unregister
parameter_list|()
block|{
name|executor
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|BackgroundObserver
name|createObserver
parameter_list|(
specifier|final
name|WhiteboardExecutor
name|executor
parameter_list|)
block|{
if|if
condition|(
name|commitRateLimiter
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|BackgroundObserver
argument_list|(
name|this
argument_list|,
name|executor
argument_list|,
name|queueLength
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|BackgroundObserver
argument_list|(
name|this
argument_list|,
name|executor
argument_list|,
name|queueLength
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|queueNearlyFull
parameter_list|()
block|{
name|commitRateLimiter
operator|.
name|blockCommits
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|queueEmpty
parameter_list|()
block|{
name|commitRateLimiter
operator|.
name|unblockCommits
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
specifier|private
specifier|final
name|Monitor
name|runningMonitor
init|=
operator|new
name|Monitor
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|RunningGuard
name|running
init|=
operator|new
name|RunningGuard
argument_list|(
name|runningMonitor
argument_list|)
decl_stmt|;
comment|/**      * Try to stop this change processor if running. This method will wait      * the specified time for a pending event listener to complete. If      * no timeout occurred no further events will be delivered after this      * method returns.      *      * @param timeOut time this method will wait for an executing event      *                listener to complete.      * @param unit    time unit for {@code timeOut}      * @return {@code true} if no time out occurred and this change processor      *         could be stopped, {@code false} otherwise.      * @throws IllegalStateException if not yet started or stopped already      */
specifier|public
specifier|synchronized
name|boolean
name|stopAndWait
parameter_list|(
name|int
name|timeOut
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|checkState
argument_list|(
name|registration
operator|!=
literal|null
argument_list|,
literal|"Change processor not started"
argument_list|)
expr_stmt|;
name|running
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|runningMonitor
operator|.
name|enter
argument_list|(
name|timeOut
argument_list|,
name|unit
argument_list|)
condition|)
block|{
name|registration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|runningMonitor
operator|.
name|leave
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Stop this change processor after all pending events have been      * delivered. In contrast to {@link #stopAndWait(int, java.util.concurrent.TimeUnit)}      * this method returns immediately without waiting for pending listeners to      * complete.      */
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
name|checkState
argument_list|(
name|registration
operator|!=
literal|null
argument_list|,
literal|"Change processor not started"
argument_list|)
expr_stmt|;
name|running
operator|.
name|stop
argument_list|()
expr_stmt|;
name|registration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|runningMonitor
operator|.
name|leave
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|contentChanged
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|root
parameter_list|,
annotation|@
name|Nullable
name|CommitInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|previousRoot
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|List
argument_list|<
name|FilterProvider
argument_list|>
name|providers
init|=
name|filterProvider
operator|.
name|get
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Iterator
argument_list|<
name|Event
argument_list|>
argument_list|>
name|eventQueues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|FilterProvider
name|provider
range|:
name|providers
control|)
block|{
comment|// FIXME don't rely on toString for session id
if|if
condition|(
name|provider
operator|.
name|includeCommit
argument_list|(
name|contentSession
operator|.
name|toString
argument_list|()
argument_list|,
name|info
argument_list|)
condition|)
block|{
name|String
name|basePath
init|=
name|provider
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|EventFilter
name|userFilter
init|=
name|provider
operator|.
name|getFilter
argument_list|(
name|previousRoot
argument_list|,
name|root
argument_list|)
decl_stmt|;
name|EventFilter
name|acFilter
init|=
operator|new
name|ACFilter
argument_list|(
name|previousRoot
argument_list|,
name|root
argument_list|,
name|permissionProvider
argument_list|,
name|basePath
argument_list|)
decl_stmt|;
name|EventQueue
name|events
init|=
operator|new
name|EventQueue
argument_list|(
name|namePathMapper
argument_list|,
name|info
argument_list|,
name|previousRoot
argument_list|,
name|root
argument_list|,
name|basePath
argument_list|,
name|Filters
operator|.
name|all
argument_list|(
name|userFilter
argument_list|,
name|acFilter
argument_list|)
argument_list|)
decl_stmt|;
name|eventQueues
operator|.
name|add
argument_list|(
name|events
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|Event
argument_list|>
name|events
init|=
name|concat
argument_list|(
name|eventQueues
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|events
operator|.
name|hasNext
argument_list|()
operator|&&
name|runningMonitor
operator|.
name|enterIf
argument_list|(
name|running
argument_list|)
condition|)
block|{
try|try
block|{
name|eventListener
operator|.
name|onEvent
argument_list|(
operator|new
name|EventIteratorAdapter
argument_list|(
name|statisticProvider
argument_list|(
name|events
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|runningMonitor
operator|.
name|leave
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error while dispatching observation events"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|previousRoot
operator|=
name|root
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Iterator
argument_list|<
name|T
argument_list|>
name|statisticProvider
parameter_list|(
specifier|final
name|Iterator
argument_list|<
name|T
argument_list|>
name|events
parameter_list|)
block|{
return|return
operator|new
name|ForwardingIterator
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|T
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|events
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|next
parameter_list|()
block|{
name|long
name|t0
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|super
operator|.
name|next
argument_list|()
return|;
block|}
finally|finally
block|{
name|eventCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|eventDuration
operator|.
name|addAndGet
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|t0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
specifier|private
specifier|static
class|class
name|RunningGuard
extends|extends
name|Guard
block|{
specifier|private
name|boolean
name|stopped
decl_stmt|;
specifier|public
name|RunningGuard
parameter_list|(
name|Monitor
name|monitor
parameter_list|)
block|{
name|super
argument_list|(
name|monitor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisfied
parameter_list|()
block|{
return|return
operator|!
name|stopped
return|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|checkState
argument_list|(
operator|!
name|stopped
argument_list|,
literal|"Change processor already stopped"
argument_list|)
expr_stmt|;
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

