begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|AccessControlPolicyIteratorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|QueryEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ResultRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryPropertyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|ReadOnlyNodeTypeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionDefinitionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProviderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|ACE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|ImmutableACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|Restriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|PropertyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|ISO9075
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * AccessControlManagerImpl... TODO  */
end_comment

begin_class
specifier|public
class|class
name|AccessControlManagerImpl
implements|implements
name|JackrabbitAccessControlManager
implements|,
name|AccessControlConstants
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AccessControlManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Root
name|root
decl_stmt|;
specifier|private
specifier|final
name|NamePathMapper
name|namePathMapper
decl_stmt|;
specifier|private
specifier|final
name|PrivilegeManager
name|privilegeManager
decl_stmt|;
specifier|private
specifier|final
name|PrincipalProvider
name|principalProvider
decl_stmt|;
specifier|private
specifier|final
name|RestrictionProvider
name|restrictionProvider
decl_stmt|;
specifier|private
specifier|final
name|ReadOnlyNodeTypeManager
name|ntMgr
decl_stmt|;
specifier|public
name|AccessControlManagerImpl
parameter_list|(
name|Root
name|root
parameter_list|,
name|NamePathMapper
name|namePathMapper
parameter_list|,
name|SecurityProvider
name|securityProvider
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|namePathMapper
operator|=
name|namePathMapper
expr_stmt|;
name|privilegeManager
operator|=
name|securityProvider
operator|.
name|getPrivilegeConfiguration
argument_list|()
operator|.
name|getPrivilegeManager
argument_list|(
name|root
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
name|principalProvider
operator|=
name|securityProvider
operator|.
name|getPrincipalConfiguration
argument_list|()
operator|.
name|getPrincipalProvider
argument_list|(
name|root
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
name|restrictionProvider
operator|=
name|securityProvider
operator|.
name|getAccessControlConfiguration
argument_list|()
operator|.
name|getRestrictionProvider
argument_list|(
name|namePathMapper
argument_list|)
expr_stmt|;
name|ntMgr
operator|=
name|ReadOnlyNodeTypeManager
operator|.
name|getInstance
argument_list|(
name|root
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
block|}
comment|//-----------------------------------------------< AccessControlManager>---
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getSupportedPrivileges
parameter_list|(
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkValidPath
argument_list|(
name|absPath
argument_list|)
expr_stmt|;
return|return
name|privilegeManager
operator|.
name|getRegisteredPrivileges
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Privilege
name|privilegeFromName
parameter_list|(
name|String
name|privilegeName
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|privilegeName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPrivileges
parameter_list|(
name|String
name|absPath
parameter_list|,
name|Privilege
index|[]
name|privileges
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// TODO
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getPrivileges
parameter_list|(
name|String
name|absPath
parameter_list|)
throws|throws
name|PathNotFoundException
throws|,
name|RepositoryException
block|{
comment|// TODO
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|AccessControlPolicy
index|[]
name|getPolicies
parameter_list|(
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|(
name|absPath
argument_list|)
decl_stmt|;
name|AccessControlPolicy
name|policy
init|=
name|readACL
argument_list|(
name|absPath
argument_list|,
name|tree
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|AccessControlPolicy
index|[]
block|{
name|policy
block|}
return|;
block|}
else|else
block|{
return|return
operator|new
name|AccessControlPolicy
index|[
literal|0
index|]
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|AccessControlPolicy
index|[]
name|getEffectivePolicies
parameter_list|(
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|(
name|absPath
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AccessControlPolicy
argument_list|>
name|effective
init|=
operator|new
name|ArrayList
argument_list|<
name|AccessControlPolicy
argument_list|>
argument_list|()
decl_stmt|;
name|AccessControlPolicy
name|policy
init|=
name|readACL
argument_list|(
name|absPath
argument_list|,
name|tree
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|!=
literal|null
condition|)
block|{
name|effective
operator|.
name|add
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|absPath
operator|!=
literal|null
condition|)
block|{
name|String
name|parentPath
init|=
name|Text
operator|.
name|getRelativeParent
argument_list|(
name|tree
operator|.
name|getPath
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|parentPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
name|AccessControlPolicy
name|plc
init|=
name|readACL
argument_list|(
name|parentPath
argument_list|,
name|t
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|plc
operator|!=
literal|null
condition|)
block|{
name|effective
operator|.
name|add
argument_list|(
name|plc
argument_list|)
expr_stmt|;
block|}
name|parentPath
operator|=
operator|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|parentPath
argument_list|)
operator|)
condition|?
literal|""
else|:
name|Text
operator|.
name|getRelativeParent
argument_list|(
name|parentPath
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|effective
operator|.
name|toArray
argument_list|(
operator|new
name|AccessControlPolicy
index|[
name|effective
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|AccessControlPolicyIterator
name|getApplicablePolicies
parameter_list|(
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|(
name|absPath
argument_list|)
decl_stmt|;
name|AccessControlPolicy
name|policy
init|=
literal|null
decl_stmt|;
name|NodeUtil
name|aclNode
init|=
name|getAclNode
argument_list|(
name|absPath
argument_list|,
name|tree
argument_list|)
decl_stmt|;
if|if
condition|(
name|aclNode
operator|==
literal|null
condition|)
block|{
comment|// create an empty acl unless the node is protected or cannot have
comment|// mixin set (e.g. due to a lock) or
comment|// has colliding rep:policy or rep:repoPolicy child node set.
name|String
name|aclName
init|=
name|getAclOakName
argument_list|(
name|absPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|tree
operator|.
name|hasChild
argument_list|(
name|aclName
argument_list|)
condition|)
block|{
comment|// policy child node without node being access controlled
name|log
operator|.
name|warn
argument_list|(
literal|"Colliding policy child without node being access controllable ({})."
argument_list|,
name|absPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|mixinName
init|=
name|getOakMixinName
argument_list|(
name|absPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|ntMgr
operator|.
name|isNodeType
argument_list|(
name|tree
argument_list|,
name|mixinName
argument_list|)
operator|||
name|ntMgr
operator|.
name|getEffectiveNodeType
argument_list|(
name|tree
argument_list|)
operator|.
name|supportsMixin
argument_list|(
name|mixinName
argument_list|)
condition|)
block|{
name|policy
operator|=
operator|new
name|NodeACL
argument_list|(
name|absPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Node {} cannot be made access controllable."
argument_list|,
name|absPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// else: acl already present -> getPolicies must be used.
if|if
condition|(
name|policy
operator|==
literal|null
condition|)
block|{
return|return
name|AccessControlPolicyIteratorAdapter
operator|.
name|EMPTY
return|;
block|}
else|else
block|{
return|return
operator|new
name|AccessControlPolicyIteratorAdapter
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|policy
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPolicy
parameter_list|(
name|String
name|absPath
parameter_list|,
name|AccessControlPolicy
name|policy
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkValidPolicy
argument_list|(
name|absPath
argument_list|,
name|policy
argument_list|)
expr_stmt|;
if|if
condition|(
name|policy
operator|instanceof
name|PrincipalACL
condition|)
block|{
comment|// TODO
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"not yet implemented"
argument_list|)
throw|;
block|}
else|else
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|(
name|absPath
argument_list|)
decl_stmt|;
name|NodeUtil
name|aclNode
init|=
name|getAclNode
argument_list|(
name|absPath
argument_list|,
name|tree
argument_list|)
decl_stmt|;
if|if
condition|(
name|aclNode
operator|!=
literal|null
condition|)
block|{
comment|// remove all existing aces
for|for
control|(
name|Tree
name|aceTree
range|:
name|aclNode
operator|.
name|getTree
argument_list|()
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|aceTree
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|aclNode
operator|=
name|createAclTree
argument_list|(
name|absPath
argument_list|,
name|tree
argument_list|)
expr_stmt|;
block|}
name|ACL
name|acl
init|=
operator|(
name|ACL
operator|)
name|policy
decl_stmt|;
for|for
control|(
name|JackrabbitAccessControlEntry
name|ace
range|:
name|acl
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|boolean
name|isAllow
init|=
name|ace
operator|.
name|isAllow
argument_list|()
decl_stmt|;
name|String
name|nodeName
init|=
name|generateAceName
argument_list|(
name|aclNode
argument_list|,
name|isAllow
argument_list|)
decl_stmt|;
name|String
name|ntName
init|=
operator|(
name|isAllow
operator|)
condition|?
name|NT_REP_GRANT_ACE
else|:
name|NT_REP_DENY_ACE
decl_stmt|;
name|NodeUtil
name|aceNode
init|=
name|aclNode
operator|.
name|addChild
argument_list|(
name|nodeName
argument_list|,
name|ntName
argument_list|)
decl_stmt|;
name|aceNode
operator|.
name|setString
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|,
name|ace
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|aceNode
operator|.
name|setNames
argument_list|(
name|REP_PRIVILEGES
argument_list|,
name|AccessControlUtils
operator|.
name|namesFromPrivileges
argument_list|(
name|ace
operator|.
name|getPrivileges
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Restriction
argument_list|>
name|restrictions
decl_stmt|;
if|if
condition|(
name|ace
operator|instanceof
name|ACE
condition|)
block|{
name|restrictions
operator|=
operator|(
operator|(
name|ACE
operator|)
name|ace
operator|)
operator|.
name|getRestrictions
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|rNames
init|=
name|ace
operator|.
name|getRestrictionNames
argument_list|()
decl_stmt|;
name|restrictions
operator|=
operator|new
name|HashSet
argument_list|<
name|Restriction
argument_list|>
argument_list|(
name|rNames
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|rName
range|:
name|rNames
control|)
block|{
name|restrictions
operator|.
name|add
argument_list|(
name|restrictionProvider
operator|.
name|createRestriction
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|,
name|rName
argument_list|,
name|ace
operator|.
name|getRestriction
argument_list|(
name|rName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|restrictionProvider
operator|.
name|writeRestrictions
argument_list|(
name|absPath
argument_list|,
name|aceNode
operator|.
name|getTree
argument_list|()
argument_list|,
name|restrictions
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removePolicy
parameter_list|(
name|String
name|absPath
parameter_list|,
name|AccessControlPolicy
name|policy
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkValidPolicy
argument_list|(
name|absPath
argument_list|,
name|policy
argument_list|)
expr_stmt|;
if|if
condition|(
name|policy
operator|instanceof
name|PrincipalACL
condition|)
block|{
comment|// TODO
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"not yet implemented"
argument_list|)
throw|;
block|}
else|else
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|(
name|absPath
argument_list|)
decl_stmt|;
name|NodeUtil
name|aclNode
init|=
name|getAclNode
argument_list|(
name|absPath
argument_list|,
name|tree
argument_list|)
decl_stmt|;
if|if
condition|(
name|aclNode
operator|!=
literal|null
condition|)
block|{
name|aclNode
operator|.
name|getTree
argument_list|()
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"No policy to remove at "
operator|+
name|absPath
argument_list|)
throw|;
block|}
block|}
block|}
comment|//-------------------------------------< JackrabbitAccessControlManager>---
annotation|@
name|Override
specifier|public
name|JackrabbitAccessControlPolicy
index|[]
name|getApplicablePolicies
parameter_list|(
name|Principal
name|principal
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Result
name|aceResult
init|=
name|searchAces
argument_list|(
name|Collections
operator|.
expr|<
name|Principal
operator|>
name|singleton
argument_list|(
name|principal
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|aceResult
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|JackrabbitAccessControlPolicy
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
return|return
operator|new
name|JackrabbitAccessControlPolicy
index|[]
block|{
name|createPrincipalACL
argument_list|(
name|principal
argument_list|,
literal|null
argument_list|)
block|}
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|JackrabbitAccessControlPolicy
index|[]
name|getPolicies
parameter_list|(
name|Principal
name|principal
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Result
name|aceResult
init|=
name|searchAces
argument_list|(
name|Collections
operator|.
expr|<
name|Principal
operator|>
name|singleton
argument_list|(
name|principal
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|aceResult
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|JackrabbitAccessControlPolicy
index|[]
block|{
name|createPrincipalACL
argument_list|(
name|principal
argument_list|,
name|aceResult
argument_list|)
block|}
return|;
block|}
else|else
block|{
return|return
operator|new
name|JackrabbitAccessControlPolicy
index|[
literal|0
index|]
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|AccessControlPolicy
index|[]
name|getEffectivePolicies
parameter_list|(
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Result
name|aceResult
init|=
name|searchAces
argument_list|(
name|principals
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AccessControlPolicy
argument_list|>
name|effective
init|=
operator|new
name|ArrayList
argument_list|<
name|AccessControlPolicy
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ResultRow
name|row
range|:
name|aceResult
operator|.
name|getRows
argument_list|()
control|)
block|{
name|Tree
name|aclTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|row
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Tree
name|accessControlledTree
init|=
name|aclTree
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|String
name|path
init|=
operator|(
name|REP_REPO_POLICY
operator|.
name|equals
argument_list|(
name|aclTree
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|?
literal|null
else|:
name|accessControlledTree
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|AccessControlPolicy
name|policy
init|=
name|readACL
argument_list|(
name|path
argument_list|,
name|accessControlledTree
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|!=
literal|null
condition|)
block|{
name|effective
operator|.
name|add
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|effective
operator|.
name|toArray
argument_list|(
operator|new
name|AccessControlPolicy
index|[
name|effective
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPrivileges
parameter_list|(
name|String
name|absPath
parameter_list|,
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
parameter_list|,
name|Privilege
index|[]
name|privileges
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// TODO
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getPrivileges
parameter_list|(
name|String
name|absPath
parameter_list|,
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// TODO
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented"
argument_list|)
throw|;
block|}
comment|//------------------------------------------------------------< private>---
annotation|@
name|Nonnull
specifier|private
name|Tree
name|getTree
parameter_list|(
name|String
name|jcrPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|tree
decl_stmt|;
if|if
condition|(
name|jcrPath
operator|==
literal|null
condition|)
block|{
name|tree
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|oakPath
init|=
name|namePathMapper
operator|.
name|getOakPathKeepIndex
argument_list|(
name|jcrPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|oakPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Failed to resolve JCR path "
operator|+
name|jcrPath
argument_list|)
throw|;
block|}
name|tree
operator|=
name|root
operator|.
name|getTree
argument_list|(
name|oakPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tree
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
literal|"No tree at "
operator|+
name|jcrPath
argument_list|)
throw|;
block|}
name|checkPermission
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|checkIsAccessControlContent
argument_list|(
name|tree
argument_list|)
expr_stmt|;
return|return
name|tree
return|;
block|}
specifier|private
name|void
name|checkPermission
parameter_list|(
name|Tree
name|tree
parameter_list|)
throws|throws
name|AccessDeniedException
block|{
comment|// TODO
block|}
specifier|private
name|void
name|checkValidPath
parameter_list|(
name|String
name|jcrPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|getTree
argument_list|(
name|jcrPath
argument_list|)
expr_stmt|;
block|}
comment|/**      * Check if the specified tree is itself defines access control related      * content.      *      * @param tree the target tree      * @throws AccessControlException If the tree represents a ACL or ACE item.      */
specifier|private
specifier|static
name|void
name|checkIsAccessControlContent
parameter_list|(
name|Tree
name|tree
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|String
name|ntName
init|=
operator|new
name|NodeUtil
argument_list|(
name|tree
argument_list|)
operator|.
name|getPrimaryNodeTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|AC_NODE_TYPE_NAMES
operator|.
name|contains
argument_list|(
name|ntName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Tree "
operator|+
name|tree
operator|.
name|getPath
argument_list|()
operator|+
literal|" defines access control content."
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|checkValidPolicy
parameter_list|(
name|String
name|jcrPath
parameter_list|,
name|AccessControlPolicy
name|policy
parameter_list|)
throws|throws
name|AccessControlException
block|{
if|if
condition|(
name|policy
operator|instanceof
name|ACL
condition|)
block|{
name|String
name|path
init|=
operator|(
operator|(
name|ACL
operator|)
name|policy
operator|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|path
operator|==
literal|null
operator|&&
name|jcrPath
operator|!=
literal|null
operator|)
operator|||
operator|(
name|path
operator|!=
literal|null
operator|&&
operator|!
name|path
operator|.
name|equals
argument_list|(
name|jcrPath
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Invalid access control policy "
operator|+
name|policy
operator|+
literal|": path mismatch "
operator|+
name|jcrPath
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Invalid access control policy "
operator|+
name|policy
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|isAccessControlled
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|String
name|nodeTypeName
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|tree
operator|!=
literal|null
operator|&&
name|ntMgr
operator|.
name|isNodeType
argument_list|(
name|tree
argument_list|,
name|nodeTypeName
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isACE
parameter_list|(
name|Tree
name|tree
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|ntMgr
operator|.
name|isNodeType
argument_list|(
name|tree
argument_list|,
name|namePathMapper
operator|.
name|getJcrName
argument_list|(
name|NT_REP_ACE
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|CheckForNull
specifier|private
name|AccessControlList
name|readACL
parameter_list|(
name|String
name|jcrPath
parameter_list|,
name|Tree
name|accessControlledTree
parameter_list|,
name|boolean
name|isReadOnly
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|AccessControlList
name|acl
init|=
literal|null
decl_stmt|;
name|String
name|aclName
init|=
name|getAclOakName
argument_list|(
name|jcrPath
argument_list|)
decl_stmt|;
name|String
name|mixinName
init|=
name|getOakMixinName
argument_list|(
name|jcrPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAccessControlled
argument_list|(
name|accessControlledTree
argument_list|,
name|mixinName
argument_list|)
operator|&&
name|accessControlledTree
operator|.
name|hasChild
argument_list|(
name|aclName
argument_list|)
condition|)
block|{
name|Tree
name|aclTree
init|=
name|accessControlledTree
operator|.
name|getChild
argument_list|(
name|aclName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|JackrabbitAccessControlEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|JackrabbitAccessControlEntry
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|aclTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|isACE
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|readACE
argument_list|(
name|jcrPath
argument_list|,
name|child
argument_list|,
name|restrictionProvider
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isReadOnly
condition|)
block|{
name|acl
operator|=
operator|new
name|ImmutableACL
argument_list|(
name|jcrPath
argument_list|,
name|entries
argument_list|,
name|restrictionProvider
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|acl
operator|=
operator|new
name|NodeACL
argument_list|(
name|jcrPath
argument_list|,
name|entries
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|acl
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|JackrabbitAccessControlEntry
name|readACE
parameter_list|(
name|String
name|jcrPath
parameter_list|,
name|Tree
name|aceTree
parameter_list|,
name|RestrictionProvider
name|restrictionProvider
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|NodeUtil
name|aceNode
init|=
operator|new
name|NodeUtil
argument_list|(
name|aceTree
argument_list|)
decl_stmt|;
name|Principal
name|principal
init|=
name|principalProvider
operator|.
name|getPrincipal
argument_list|(
name|aceNode
operator|.
name|getString
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|isAllow
init|=
name|aceNode
operator|.
name|hasPrimaryNodeTypeName
argument_list|(
name|NT_REP_GRANT_ACE
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Restriction
argument_list|>
name|restrictions
init|=
name|restrictionProvider
operator|.
name|readRestrictions
argument_list|(
name|jcrPath
argument_list|,
name|aceTree
argument_list|)
decl_stmt|;
return|return
operator|new
name|ACE
argument_list|(
name|principal
argument_list|,
name|getPrivileges
argument_list|(
name|aceNode
argument_list|)
argument_list|,
name|isAllow
argument_list|,
name|restrictions
argument_list|)
return|;
block|}
specifier|private
name|JackrabbitAccessControlList
name|createPrincipalACL
parameter_list|(
name|Principal
name|principal
parameter_list|,
name|Result
name|aceResult
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// TODO: specific path indicating the principal-based nature of the
comment|// TODO: ACL... this could also be the path of the compiled permissions
comment|// TODO: for this principal.
name|String
name|principalBasedPath
init|=
literal|null
decl_stmt|;
comment|// TODO: specific principal based restriction provider specifying a
comment|// TODO: mandatory 'path' restriction to enforce the location where
comment|// TODO: the ACEs need to be stored in the content tree.
name|RestrictionProvider
name|pbRestrictions
init|=
operator|new
name|PrincipalRestrictionProvider
argument_list|(
name|namePathMapper
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|JackrabbitAccessControlEntry
argument_list|>
name|entries
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|aceResult
operator|!=
literal|null
condition|)
block|{
name|entries
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|ResultRow
name|row
range|:
name|aceResult
operator|.
name|getRows
argument_list|()
control|)
block|{
name|Tree
name|aceTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|row
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isACE
argument_list|(
name|aceTree
argument_list|)
condition|)
block|{
name|String
name|aclPath
init|=
name|Text
operator|.
name|getRelativeParent
argument_list|(
name|aceTree
operator|.
name|getPath
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|jcrPath
decl_stmt|;
if|if
condition|(
name|aclPath
operator|.
name|endsWith
argument_list|(
name|REP_REPO_POLICY
argument_list|)
condition|)
block|{
name|jcrPath
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|jcrPath
operator|=
name|Text
operator|.
name|getRelativeParent
argument_list|(
name|aclPath
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|entries
operator|.
name|add
argument_list|(
name|readACE
argument_list|(
name|jcrPath
argument_list|,
name|aceTree
argument_list|,
name|pbRestrictions
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|PrincipalACL
argument_list|(
name|principalBasedPath
argument_list|,
name|entries
argument_list|,
name|pbRestrictions
argument_list|)
return|;
block|}
comment|/**      *      * @param jcrPath the JCR path as specified with the ac mgr call.      * @param tree the access controlled node.      * @return the new acl tree.      * @throws RepositoryException if an error occurs      */
annotation|@
name|Nonnull
specifier|private
name|NodeUtil
name|createAclTree
parameter_list|(
name|String
name|jcrPath
parameter_list|,
name|Tree
name|tree
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|NodeUtil
name|node
init|=
operator|new
name|NodeUtil
argument_list|(
name|tree
argument_list|)
decl_stmt|;
name|String
name|mixinName
init|=
name|getOakMixinName
argument_list|(
name|jcrPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isAccessControlled
argument_list|(
name|tree
argument_list|,
name|mixinName
argument_list|)
condition|)
block|{
name|PropertyState
name|mixins
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|mixins
operator|==
literal|null
condition|)
block|{
name|tree
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|mixinName
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PropertyBuilder
name|pb
init|=
name|MemoryPropertyBuilder
operator|.
name|copy
argument_list|(
name|Type
operator|.
name|NAME
argument_list|,
name|mixins
argument_list|)
decl_stmt|;
name|pb
operator|.
name|addValue
argument_list|(
name|mixinName
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
name|pb
operator|.
name|getPropertyState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|node
operator|.
name|addChild
argument_list|(
name|getAclOakName
argument_list|(
name|jcrPath
argument_list|)
argument_list|,
name|namePathMapper
operator|.
name|getJcrName
argument_list|(
name|NT_REP_ACL
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|Result
name|searchAces
parameter_list|(
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// TODO: review if compiled permissions could be used instead of running a query.
comment|// TODO: replace XPATH
comment|// TODO: specify sort order
name|StringBuilder
name|stmt
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"/jcr:root"
argument_list|)
decl_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|"//element(*,"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
name|NT_REP_ACE
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|")["
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Principal
name|principal
range|:
name|principals
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|stmt
operator|.
name|append
argument_list|(
literal|" or "
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|.
name|append
argument_list|(
literal|'@'
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
name|ISO9075
operator|.
name|encode
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|"='"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"'"
argument_list|,
literal|"''"
argument_list|)
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|stmt
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
try|try
block|{
name|QueryEngine
name|queryEngine
init|=
name|root
operator|.
name|getQueryEngine
argument_list|()
decl_stmt|;
return|return
name|queryEngine
operator|.
name|executeQuery
argument_list|(
name|stmt
operator|.
name|toString
argument_list|()
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|0
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|PropertyValue
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error while collecting effective policies."
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Nonnull
specifier|private
name|Set
argument_list|<
name|Privilege
argument_list|>
name|getPrivileges
parameter_list|(
name|NodeUtil
name|aceNode
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
index|[]
name|privNames
init|=
name|aceNode
operator|.
name|getNames
argument_list|(
name|REP_PRIVILEGES
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Privilege
argument_list|>
name|privileges
init|=
operator|new
name|HashSet
argument_list|<
name|Privilege
argument_list|>
argument_list|(
name|privNames
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|privNames
control|)
block|{
name|privileges
operator|.
name|add
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|privileges
return|;
block|}
annotation|@
name|CheckForNull
specifier|private
specifier|static
name|NodeUtil
name|getAclNode
parameter_list|(
name|String
name|jcrPath
parameter_list|,
name|Tree
name|accessControlledTree
parameter_list|)
block|{
name|Tree
name|policyTree
init|=
name|accessControlledTree
operator|.
name|getChild
argument_list|(
name|getAclOakName
argument_list|(
name|jcrPath
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|policyTree
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|new
name|NodeUtil
argument_list|(
name|policyTree
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|private
specifier|static
name|String
name|getOakMixinName
parameter_list|(
name|String
name|jcrPath
parameter_list|)
block|{
return|return
operator|(
name|jcrPath
operator|==
literal|null
operator|)
condition|?
name|MIX_REP_REPO_ACCESS_CONTROLLABLE
else|:
name|MIX_REP_ACCESS_CONTROLLABLE
return|;
block|}
annotation|@
name|Nonnull
specifier|private
specifier|static
name|String
name|getAclOakName
parameter_list|(
name|String
name|jcrPath
parameter_list|)
block|{
return|return
operator|(
name|jcrPath
operator|==
literal|null
operator|)
condition|?
name|REP_REPO_POLICY
else|:
name|REP_POLICY
return|;
block|}
comment|/**      * Create a unique valid name for the Permission nodes to be save.      *      * @param aclNode a name for the child is resolved      * @param isAllow If the ACE is allowing or denying.      * @return the name of the ACE node.      */
annotation|@
name|Nonnull
specifier|public
specifier|static
name|String
name|generateAceName
parameter_list|(
name|NodeUtil
name|aclNode
parameter_list|,
name|boolean
name|isAllow
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|String
name|hint
init|=
operator|(
name|isAllow
operator|)
condition|?
literal|"allow"
else|:
literal|"deny"
decl_stmt|;
name|String
name|aceName
init|=
name|hint
decl_stmt|;
while|while
condition|(
name|aclNode
operator|.
name|hasChild
argument_list|(
name|aceName
argument_list|)
condition|)
block|{
name|aceName
operator|=
name|hint
operator|+
name|i
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|aceName
return|;
block|}
comment|//--------------------------------------------------------------------------
comment|// TODO review again
specifier|private
class|class
name|NodeACL
extends|extends
name|ACL
block|{
name|NodeACL
parameter_list|(
name|String
name|jcrPath
parameter_list|)
block|{
name|super
argument_list|(
name|jcrPath
argument_list|)
expr_stmt|;
block|}
name|NodeACL
parameter_list|(
name|String
name|jcrPath
parameter_list|,
name|List
argument_list|<
name|JackrabbitAccessControlEntry
argument_list|>
name|entries
parameter_list|)
block|{
name|super
argument_list|(
name|jcrPath
argument_list|,
name|entries
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|RestrictionProvider
name|getRestrictionProvider
parameter_list|()
block|{
return|return
name|restrictionProvider
return|;
block|}
block|}
specifier|private
class|class
name|PrincipalACL
extends|extends
name|ACL
block|{
specifier|private
specifier|final
name|RestrictionProvider
name|restrictionProvider
decl_stmt|;
specifier|private
name|PrincipalACL
parameter_list|(
name|String
name|jcrPath
parameter_list|,
name|List
argument_list|<
name|JackrabbitAccessControlEntry
argument_list|>
name|entries
parameter_list|,
name|RestrictionProvider
name|restrictionProvider
parameter_list|)
block|{
name|super
argument_list|(
name|jcrPath
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|this
operator|.
name|restrictionProvider
operator|=
name|restrictionProvider
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|RestrictionProvider
name|getRestrictionProvider
parameter_list|()
block|{
return|return
name|restrictionProvider
return|;
block|}
block|}
specifier|private
class|class
name|PrincipalRestrictionProvider
extends|extends
name|RestrictionProviderImpl
block|{
specifier|private
name|PrincipalRestrictionProvider
parameter_list|(
name|NamePathMapper
name|namePathMapper
parameter_list|)
block|{
name|super
argument_list|(
name|namePathMapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|RestrictionDefinition
argument_list|>
name|getSupportedRestrictions
parameter_list|(
name|String
name|jcrPath
parameter_list|)
block|{
name|Set
argument_list|<
name|RestrictionDefinition
argument_list|>
name|definitions
init|=
operator|new
name|HashSet
argument_list|<
name|RestrictionDefinition
argument_list|>
argument_list|(
name|super
operator|.
name|getSupportedRestrictions
argument_list|(
name|jcrPath
argument_list|)
argument_list|)
decl_stmt|;
name|definitions
operator|.
name|add
argument_list|(
operator|new
name|RestrictionDefinitionImpl
argument_list|(
name|REP_NODE_PATH
argument_list|,
name|PropertyType
operator|.
name|PATH
argument_list|,
literal|true
argument_list|,
name|namePathMapper
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|definitions
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Restriction
argument_list|>
name|readRestrictions
parameter_list|(
name|String
name|jcrPath
parameter_list|,
name|Tree
name|aceTree
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|Set
argument_list|<
name|Restriction
argument_list|>
name|restrictions
init|=
name|super
operator|.
name|readRestrictions
argument_list|(
name|jcrPath
argument_list|,
name|aceTree
argument_list|)
decl_stmt|;
name|String
name|value
init|=
operator|(
name|jcrPath
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|jcrPath
decl_stmt|;
name|PropertyState
name|nodePathProp
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|REP_NODE_PATH
argument_list|,
name|value
argument_list|,
name|Type
operator|.
name|PATH
argument_list|)
decl_stmt|;
name|restrictions
operator|.
name|add
argument_list|(
operator|new
name|RestrictionImpl
argument_list|(
name|nodePathProp
argument_list|,
literal|true
argument_list|,
name|namePathMapper
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|restrictions
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeRestrictions
parameter_list|(
name|String
name|jcrPath
parameter_list|,
name|Tree
name|aceTree
parameter_list|,
name|Set
argument_list|<
name|Restriction
argument_list|>
name|restrictions
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|Iterator
argument_list|<
name|Restriction
argument_list|>
name|it
init|=
name|restrictions
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Restriction
name|r
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|REP_NODE_PATH
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|super
operator|.
name|writeRestrictions
argument_list|(
name|jcrPath
argument_list|,
name|aceTree
argument_list|,
name|restrictions
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

