begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|json
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_comment
comment|/** *<code>NormalizingJsopHandler</code>... */
end_comment

begin_class
specifier|public
class|class
name|NormalizingJsopHandler
extends|extends
name|DefaultJsopHandler
block|{
specifier|private
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Deque
argument_list|<
name|String
argument_list|>
name|commaStack
init|=
operator|new
name|ArrayDeque
argument_list|<
name|String
argument_list|>
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|""
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Deque
argument_list|<
name|String
argument_list|>
name|pathStack
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|public
name|NormalizingJsopHandler
parameter_list|()
block|{
name|this
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NormalizingJsopHandler
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|pathStack
operator|=
operator|new
name|ArrayDeque
argument_list|<
name|String
argument_list|>
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getDiff
parameter_list|()
block|{
name|scopeFor
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeAdded
parameter_list|(
name|String
name|parentPath
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
name|relPath
init|=
name|scopeFor
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|parentPath
argument_list|,
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathStack
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|maybeAppendComma
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|relPath
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pathStack
operator|.
name|addLast
argument_list|(
name|relPath
argument_list|)
expr_stmt|;
name|commaStack
operator|.
name|addLast
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|JsopBuilder
operator|.
name|encode
argument_list|(
name|relPath
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|":{"
argument_list|)
expr_stmt|;
name|resetComma
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeCopied
parameter_list|(
name|String
name|rootPath
parameter_list|,
name|String
name|oldPath
parameter_list|,
name|String
name|newPath
parameter_list|)
block|{
name|scopeFor
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|JsopBuilder
operator|.
name|encode
argument_list|(
name|relativize
argument_list|(
name|path
argument_list|,
name|oldPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|JsopBuilder
operator|.
name|encode
argument_list|(
name|relativize
argument_list|(
name|path
argument_list|,
name|newPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeMoved
parameter_list|(
name|String
name|rootPath
parameter_list|,
name|String
name|oldPath
parameter_list|,
name|String
name|newPath
parameter_list|)
block|{
name|scopeFor
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|JsopBuilder
operator|.
name|encode
argument_list|(
name|relativize
argument_list|(
name|path
argument_list|,
name|oldPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|JsopBuilder
operator|.
name|encode
argument_list|(
name|relativize
argument_list|(
name|path
argument_list|,
name|newPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeRemoved
parameter_list|(
name|String
name|parentPath
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|scopeFor
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|JsopBuilder
operator|.
name|encode
argument_list|(
name|relativize
argument_list|(
name|path
argument_list|,
name|concatPath
argument_list|(
name|parentPath
argument_list|,
name|name
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertySet
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|,
name|String
name|rawValue
parameter_list|)
block|{
name|String
name|relPath
init|=
name|scopeFor
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathStack
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"^"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|maybeAppendComma
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|JsopBuilder
operator|.
name|encode
argument_list|(
name|concatPath
argument_list|(
name|relPath
argument_list|,
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|rawValue
argument_list|)
expr_stmt|;
block|}
comment|/**      * Opens a new scope for the given path relative to the current path.      * @param path the path of the new scope.      * @return the remaining relative path needed for the given scope path.      */
specifier|private
name|String
name|scopeFor
parameter_list|(
name|String
name|path
parameter_list|)
block|{
comment|// close brackets until path stack is the root, the same as path or
comment|// an ancestor of path
while|while
condition|(
name|pathStack
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
operator|!
name|path
operator|.
name|equals
argument_list|(
name|getCurrentPath
argument_list|()
argument_list|)
operator|&&
operator|!
name|PathUtils
operator|.
name|isAncestor
argument_list|(
name|getCurrentPath
argument_list|()
argument_list|,
name|path
argument_list|)
condition|)
block|{
name|pathStack
operator|.
name|removeLast
argument_list|()
expr_stmt|;
name|commaStack
operator|.
name|removeLast
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
comment|// remaining path for scope
return|return
name|relativize
argument_list|(
name|getCurrentPath
argument_list|()
argument_list|,
name|path
argument_list|)
return|;
block|}
specifier|private
name|String
name|getCurrentPath
parameter_list|()
block|{
name|String
name|path
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|element
range|:
name|pathStack
control|)
block|{
name|path
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
specifier|private
name|String
name|concatPath
parameter_list|(
name|String
name|parent
parameter_list|,
name|String
name|child
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|child
return|;
block|}
else|else
block|{
return|return
name|PathUtils
operator|.
name|concat
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|resetComma
parameter_list|()
block|{
name|commaStack
operator|.
name|removeLast
argument_list|()
expr_stmt|;
name|commaStack
operator|.
name|addLast
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|maybeAppendComma
parameter_list|()
block|{
name|builder
operator|.
name|append
argument_list|(
name|commaStack
operator|.
name|removeLast
argument_list|()
argument_list|)
expr_stmt|;
name|commaStack
operator|.
name|addLast
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|relativize
parameter_list|(
name|String
name|parentPath
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
name|parentPath
operator|.
name|isEmpty
argument_list|()
condition|?
name|path
else|:
name|PathUtils
operator|.
name|relativize
argument_list|(
name|parentPath
argument_list|,
name|path
argument_list|)
return|;
block|}
block|}
end_class

end_unit

