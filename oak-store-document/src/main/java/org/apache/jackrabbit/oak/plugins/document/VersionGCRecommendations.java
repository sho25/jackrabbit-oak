begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|VersionGarbageCollector
operator|.
name|VersionGCStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|TimeInterval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|gc
operator|.
name|GCMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * Gives a recommendation about parameters for the next revision garbage collection run.  */
end_comment

begin_class
specifier|public
class|class
name|VersionGCRecommendations
block|{
specifier|private
specifier|final
name|VersionGCSupport
name|vgc
decl_stmt|;
specifier|private
specifier|final
name|GCMonitor
name|gcmon
decl_stmt|;
specifier|final
name|boolean
name|ignoreDueToCheckPoint
decl_stmt|;
specifier|final
name|TimeInterval
name|scope
decl_stmt|;
specifier|final
name|long
name|maxCollect
decl_stmt|;
specifier|final
name|long
name|deleteCandidateCount
decl_stmt|;
specifier|final
name|long
name|lastOldestTimestamp
decl_stmt|;
specifier|private
specifier|final
name|long
name|precisionMs
decl_stmt|;
specifier|final
name|long
name|suggestedIntervalMs
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|scopeIsComplete
decl_stmt|;
comment|/**      * With the given maximum age of revisions to keep (earliest time in the past to collect),      * the desired precision in which times shall be sliced and the given limit on the number      * of collected documents in one run, calculate<ol>      *<li>if gc shall run at all (ignoreDueToCheckPoint)</li>      *<li>in which time interval documents shall be collected (scope)</li>      *<li>if collection should fail if it reaches maxCollect documents, maxCollect will specify      *     the limit or be 0 if no limit shall be enforced.</li>      *</ol>      * After a run, recommendations evaluate the result of the gc to update its persisted recommendations      * for future runs.      *<p>      * In the settings collection, recommendations keeps "revisionsOlderThan" from the last successful run.      * It also updates the time interval recommended for the next run.      *      * @param maxRevisionAgeMs the minimum age for revisions to be collected      * @param checkpoints checkpoints from {@link DocumentNodeStore}      * @param clock clock from {@link DocumentNodeStore}      * @param vgc VersionGC support class      * @param options options for running the gc      * @param gcMonitor monitor class for messages      */
specifier|public
name|VersionGCRecommendations
parameter_list|(
name|long
name|maxRevisionAgeMs
parameter_list|,
name|Checkpoints
name|checkpoints
parameter_list|,
name|Clock
name|clock
parameter_list|,
name|VersionGCSupport
name|vgc
parameter_list|,
name|VersionGCOptions
name|options
parameter_list|,
name|GCMonitor
name|gcMonitor
parameter_list|)
block|{
name|this
operator|.
name|vgc
operator|=
name|vgc
expr_stmt|;
name|this
operator|.
name|gcmon
operator|=
name|gcMonitor
expr_stmt|;
name|TimeInterval
name|keep
init|=
operator|new
name|TimeInterval
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|-
name|maxRevisionAgeMs
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|boolean
name|ignoreDueToCheckPoint
init|=
literal|false
decl_stmt|;
name|long
name|deletedOnceCount
init|=
literal|0
decl_stmt|;
name|long
name|suggestedIntervalMs
decl_stmt|;
name|long
name|oldestPossible
decl_stmt|;
name|long
name|collectLimit
init|=
name|options
operator|.
name|collectLimit
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|settings
init|=
name|getLongSettings
argument_list|()
decl_stmt|;
name|lastOldestTimestamp
operator|=
name|settings
operator|.
name|get
argument_list|(
name|VersionGarbageCollector
operator|.
name|SETTINGS_COLLECTION_OLDEST_TIMESTAMP_PROP
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastOldestTimestamp
operator|==
literal|0
condition|)
block|{
name|VersionGarbageCollector
operator|.
name|log
operator|.
name|debug
argument_list|(
literal|"No lastOldestTimestamp found, querying for the oldest deletedOnce candidate"
argument_list|)
expr_stmt|;
name|oldestPossible
operator|=
name|vgc
operator|.
name|getOldestDeletedOnceTimestamp
argument_list|(
name|clock
argument_list|,
name|options
operator|.
name|precisionMs
argument_list|)
operator|-
literal|1
expr_stmt|;
name|VersionGarbageCollector
operator|.
name|log
operator|.
name|debug
argument_list|(
literal|"lastOldestTimestamp found: {}"
argument_list|,
name|Utils
operator|.
name|timestampToString
argument_list|(
name|oldestPossible
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|oldestPossible
operator|=
name|lastOldestTimestamp
operator|-
literal|1
expr_stmt|;
block|}
name|TimeInterval
name|scope
init|=
operator|new
name|TimeInterval
argument_list|(
name|oldestPossible
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|scope
operator|=
name|scope
operator|.
name|notLaterThan
argument_list|(
name|keep
operator|.
name|fromMs
argument_list|)
expr_stmt|;
name|suggestedIntervalMs
operator|=
name|settings
operator|.
name|get
argument_list|(
name|VersionGarbageCollector
operator|.
name|SETTINGS_COLLECTION_REC_INTERVAL_PROP
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestedIntervalMs
operator|>
literal|0
condition|)
block|{
name|suggestedIntervalMs
operator|=
name|Math
operator|.
name|max
argument_list|(
name|suggestedIntervalMs
argument_list|,
name|options
operator|.
name|precisionMs
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestedIntervalMs
operator|<
name|scope
operator|.
name|getDurationMs
argument_list|()
condition|)
block|{
name|scope
operator|=
name|scope
operator|.
name|startAndDuration
argument_list|(
name|suggestedIntervalMs
argument_list|)
expr_stmt|;
name|VersionGarbageCollector
operator|.
name|log
operator|.
name|debug
argument_list|(
literal|"previous runs recommend a {} sec duration, scope now {}"
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|suggestedIntervalMs
argument_list|)
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|scope
operator|.
name|getDurationMs
argument_list|()
operator|<=
name|options
operator|.
name|precisionMs
condition|)
block|{
comment|// the scope is smaller than the minimum precision
comment|// -> no need to refine the scope
name|VersionGarbageCollector
operator|.
name|log
operator|.
name|debug
argument_list|(
literal|"scope<= precision ({} ms)"
argument_list|,
name|options
operator|.
name|precisionMs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/* Need to guess. Count the overall number of _deletedOnce documents. If those              * are more than we want to collect in a single run, reduce the time scope so              * that we likely see a fitting fraction of those documents.              */
try|try
block|{
name|long
name|preferredLimit
init|=
name|Math
operator|.
name|min
argument_list|(
name|collectLimit
argument_list|,
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|options
operator|.
name|overflowToDiskThreshold
operator|*
literal|0.95
argument_list|)
argument_list|)
decl_stmt|;
name|deletedOnceCount
operator|=
name|vgc
operator|.
name|getDeletedOnceCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|deletedOnceCount
operator|>
name|preferredLimit
condition|)
block|{
name|double
name|chunks
init|=
operator|(
operator|(
name|double
operator|)
name|deletedOnceCount
operator|)
operator|/
name|preferredLimit
decl_stmt|;
name|suggestedIntervalMs
operator|=
operator|(
name|long
operator|)
name|Math
operator|.
name|floor
argument_list|(
operator|(
name|scope
operator|.
name|getDurationMs
argument_list|()
operator|+
name|maxRevisionAgeMs
operator|)
operator|/
name|chunks
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestedIntervalMs
operator|<
name|scope
operator|.
name|getDurationMs
argument_list|()
condition|)
block|{
name|scope
operator|=
name|scope
operator|.
name|startAndDuration
argument_list|(
name|suggestedIntervalMs
argument_list|)
expr_stmt|;
name|VersionGarbageCollector
operator|.
name|log
operator|.
name|debug
argument_list|(
literal|"deletedOnce candidates: {} found, {} preferred, scope now {}"
argument_list|,
name|deletedOnceCount
argument_list|,
name|preferredLimit
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|ex
parameter_list|)
block|{
name|VersionGarbageCollector
operator|.
name|log
operator|.
name|debug
argument_list|(
literal|"check on upper bounds of delete candidates not supported, skipped"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Check for any registered checkpoint which prevent the GC from running
name|Revision
name|checkpoint
init|=
name|checkpoints
operator|.
name|getOldestRevisionToKeep
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkpoint
operator|!=
literal|null
operator|&&
name|scope
operator|.
name|endsAfter
argument_list|(
name|checkpoint
operator|.
name|getTimestamp
argument_list|()
argument_list|)
condition|)
block|{
name|TimeInterval
name|minimalScope
init|=
name|scope
operator|.
name|startAndDuration
argument_list|(
name|options
operator|.
name|precisionMs
argument_list|)
decl_stmt|;
if|if
condition|(
name|minimalScope
operator|.
name|endsAfter
argument_list|(
name|checkpoint
operator|.
name|getTimestamp
argument_list|()
argument_list|)
condition|)
block|{
name|VersionGarbageCollector
operator|.
name|log
operator|.
name|warn
argument_list|(
literal|"Ignoring RGC run because a valid checkpoint [{}] exists inside minimal scope {}."
argument_list|,
name|checkpoint
operator|.
name|toReadableString
argument_list|()
argument_list|,
name|minimalScope
argument_list|)
expr_stmt|;
name|ignoreDueToCheckPoint
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|scope
operator|=
name|scope
operator|.
name|notLaterThan
argument_list|(
name|checkpoint
operator|.
name|getTimestamp
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|VersionGarbageCollector
operator|.
name|log
operator|.
name|debug
argument_list|(
literal|"checkpoint at [{}] found, scope now {}"
argument_list|,
name|Utils
operator|.
name|timestampToString
argument_list|(
name|checkpoint
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|scope
operator|.
name|getDurationMs
argument_list|()
operator|<=
name|options
operator|.
name|precisionMs
condition|)
block|{
comment|// If we have narrowed the collect time interval down as much as we can, no
comment|// longer enforce a limit. We need to get through this.
name|collectLimit
operator|=
literal|0
expr_stmt|;
name|VersionGarbageCollector
operator|.
name|log
operator|.
name|debug
argument_list|(
literal|"time interval<= precision ({} ms), disabling collection limits"
argument_list|,
name|options
operator|.
name|precisionMs
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|precisionMs
operator|=
name|options
operator|.
name|precisionMs
expr_stmt|;
name|this
operator|.
name|ignoreDueToCheckPoint
operator|=
name|ignoreDueToCheckPoint
expr_stmt|;
name|this
operator|.
name|scope
operator|=
name|scope
expr_stmt|;
name|this
operator|.
name|scopeIsComplete
operator|=
name|scope
operator|.
name|toMs
operator|>=
name|keep
operator|.
name|fromMs
expr_stmt|;
name|this
operator|.
name|maxCollect
operator|=
name|collectLimit
expr_stmt|;
name|this
operator|.
name|suggestedIntervalMs
operator|=
name|suggestedIntervalMs
expr_stmt|;
name|this
operator|.
name|deleteCandidateCount
operator|=
name|deletedOnceCount
expr_stmt|;
block|}
comment|/**      * Evaluate the results of the last run. Update recommendations for future runs.      * Will set {@link VersionGCStats#needRepeat} if collection needs to run another      * iteration for collecting documents up to "now".      *      * @param stats the statistics from the last run      */
specifier|public
name|void
name|evaluate
parameter_list|(
name|VersionGCStats
name|stats
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|.
name|limitExceeded
condition|)
block|{
comment|// if the limit was exceeded, slash the recommended interval in half.
name|long
name|nextDuration
init|=
name|Math
operator|.
name|max
argument_list|(
name|precisionMs
argument_list|,
name|scope
operator|.
name|getDurationMs
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
name|gcmon
operator|.
name|info
argument_list|(
literal|"Limit {} documents exceeded, reducing next collection interval to {} seconds"
argument_list|,
name|this
operator|.
name|maxCollect
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|nextDuration
argument_list|)
argument_list|)
expr_stmt|;
name|setLongSetting
argument_list|(
name|VersionGarbageCollector
operator|.
name|SETTINGS_COLLECTION_REC_INTERVAL_PROP
argument_list|,
name|nextDuration
argument_list|)
expr_stmt|;
name|stats
operator|.
name|needRepeat
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|stats
operator|.
name|canceled
operator|&&
operator|!
name|stats
operator|.
name|ignoredGCDueToCheckPoint
condition|)
block|{
comment|// success, we would not expect to encounter revisions older than this in the future
name|setLongSetting
argument_list|(
name|VersionGarbageCollector
operator|.
name|SETTINGS_COLLECTION_OLDEST_TIMESTAMP_PROP
argument_list|,
name|scope
operator|.
name|toMs
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxCollect
operator|<=
literal|0
condition|)
block|{
name|VersionGarbageCollector
operator|.
name|log
operator|.
name|debug
argument_list|(
literal|"successful run without effective limit, keeping recommendations"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|scope
operator|.
name|getDurationMs
argument_list|()
operator|==
name|suggestedIntervalMs
condition|)
block|{
name|int
name|count
init|=
name|stats
operator|.
name|deletedDocGCCount
operator|-
name|stats
operator|.
name|deletedLeafDocGCCount
decl_stmt|;
name|double
name|used
init|=
name|count
operator|/
operator|(
name|double
operator|)
name|maxCollect
decl_stmt|;
if|if
condition|(
name|used
operator|<
literal|0.66
condition|)
block|{
name|long
name|nextDuration
init|=
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|suggestedIntervalMs
operator|*
literal|1.5
argument_list|)
decl_stmt|;
name|VersionGarbageCollector
operator|.
name|log
operator|.
name|debug
argument_list|(
literal|"successful run using {}% of limit, raising recommended interval to {} seconds"
argument_list|,
name|Math
operator|.
name|round
argument_list|(
name|used
operator|*
literal|1000
argument_list|)
operator|/
literal|10.0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|nextDuration
argument_list|)
argument_list|)
expr_stmt|;
name|setLongSetting
argument_list|(
name|VersionGarbageCollector
operator|.
name|SETTINGS_COLLECTION_REC_INTERVAL_PROP
argument_list|,
name|nextDuration
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|VersionGarbageCollector
operator|.
name|log
operator|.
name|debug
argument_list|(
literal|"successful run not following recommendations, keeping them"
argument_list|)
expr_stmt|;
block|}
name|stats
operator|.
name|needRepeat
operator|=
operator|!
name|scopeIsComplete
expr_stmt|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getLongSettings
parameter_list|()
block|{
name|Document
name|versionGCDoc
init|=
name|vgc
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|SETTINGS
argument_list|,
name|VersionGarbageCollector
operator|.
name|SETTINGS_COLLECTION_ID
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|settings
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
comment|// default values
name|settings
operator|.
name|put
argument_list|(
name|VersionGarbageCollector
operator|.
name|SETTINGS_COLLECTION_OLDEST_TIMESTAMP_PROP
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|VersionGarbageCollector
operator|.
name|SETTINGS_COLLECTION_REC_INTERVAL_PROP
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
if|if
condition|(
name|versionGCDoc
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|k
range|:
name|versionGCDoc
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|versionGCDoc
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|settings
operator|.
name|put
argument_list|(
name|k
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|settings
return|;
block|}
specifier|private
name|void
name|setLongSetting
parameter_list|(
name|String
name|propName
parameter_list|,
name|long
name|val
parameter_list|)
block|{
name|UpdateOp
name|updateOp
init|=
operator|new
name|UpdateOp
argument_list|(
name|VersionGarbageCollector
operator|.
name|SETTINGS_COLLECTION_ID
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|updateOp
operator|.
name|set
argument_list|(
name|propName
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|vgc
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|SETTINGS
argument_list|,
name|updateOp
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

