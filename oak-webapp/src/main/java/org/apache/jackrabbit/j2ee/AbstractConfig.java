begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|j2ee
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|BeanMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_comment
comment|/**  * Abstract configuration class that is based on a bean map.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractConfig
block|{
comment|/**      * default logger      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractConfig
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|boolean
name|valid
decl_stmt|;
specifier|private
name|BeanMap
name|map
init|=
operator|new
name|BeanMap
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|/**      * Initializes the configuration with values from the given properties      * @param props the configuration properties      */
specifier|public
name|void
name|init
parameter_list|(
name|Properties
name|props
parameter_list|)
throws|throws
name|ServletException
block|{
name|Iterator
name|iter
init|=
name|props
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|mapName
init|=
name|toMapName
argument_list|(
name|name
argument_list|,
literal|'.'
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|mapName
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|mapName
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletExceptionWithCause
argument_list|(
literal|"Invalid configuration property: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|init
parameter_list|(
name|ServletConfig
name|ctx
parameter_list|)
throws|throws
name|ServletException
block|{
name|Enumeration
name|names
init|=
name|ctx
operator|.
name|getInitParameterNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|names
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|mapName
init|=
name|toMapName
argument_list|(
name|name
argument_list|,
literal|'-'
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|mapName
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|mapName
argument_list|,
name|ctx
operator|.
name|getInitParameter
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletExceptionWithCause
argument_list|(
literal|"Invalid servlet configuration option: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|String
name|toMapName
parameter_list|(
name|String
name|name
parameter_list|,
name|char
name|delim
parameter_list|)
block|{
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
index|[]
name|elems
init|=
name|Text
operator|.
name|explode
argument_list|(
name|name
argument_list|,
name|delim
argument_list|)
decl_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|elems
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|elems
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ret
operator|.
name|append
argument_list|(
name|elems
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|elems
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
block|{
name|valid
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
return|return
name|valid
return|;
block|}
specifier|public
name|void
name|logInfos
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Configuration of {}"
argument_list|,
name|Text
operator|.
name|getName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"----------------------------------------------"
argument_list|)
expr_stmt|;
name|Iterator
name|iter
init|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"  {}: {}"
argument_list|,
name|name
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"----------------------------------------------"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

