begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StandardSystemProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoVersionGCSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|VersionGarbageCollector
block|{
specifier|private
specifier|final
name|DocumentNodeStore
name|nodeStore
decl_stmt|;
specifier|private
specifier|final
name|VersionGCSupport
name|versionStore
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Split document types which can be safely Garbage Collected      * OAK-1793: SplitDocType.DEFAULT_NO_CHILD and SplitDocType.PROP_COMMIT_ONLY      * have been removed, but should be added again when OAK-1794 is fixed.      */
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|NodeDocument
operator|.
name|SplitDocType
argument_list|>
name|GC_TYPES
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
name|VersionGarbageCollector
parameter_list|(
name|DocumentNodeStore
name|nodeStore
parameter_list|)
block|{
name|this
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
if|if
condition|(
name|nodeStore
operator|.
name|getDocumentStore
argument_list|()
operator|instanceof
name|MongoDocumentStore
condition|)
block|{
name|this
operator|.
name|versionStore
operator|=
operator|new
name|MongoVersionGCSupport
argument_list|(
operator|(
name|MongoDocumentStore
operator|)
name|nodeStore
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|versionStore
operator|=
operator|new
name|VersionGCSupport
argument_list|(
name|nodeStore
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|VersionGCStats
name|gc
parameter_list|(
name|long
name|maxRevisionAge
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|long
name|maxRevisionAgeInMillis
init|=
name|unit
operator|.
name|toMillis
argument_list|(
name|maxRevisionAge
argument_list|)
decl_stmt|;
name|Stopwatch
name|sw
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|VersionGCStats
name|stats
init|=
operator|new
name|VersionGCStats
argument_list|()
decl_stmt|;
specifier|final
name|long
name|oldestRevTimeStamp
init|=
name|nodeStore
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|maxRevisionAgeInMillis
decl_stmt|;
specifier|final
name|Revision
name|headRevision
init|=
name|nodeStore
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Starting revision garbage collection. Revisions older than [{}] would be "
operator|+
literal|"removed"
argument_list|,
name|Utils
operator|.
name|timestampToString
argument_list|(
name|oldestRevTimeStamp
argument_list|)
argument_list|)
expr_stmt|;
comment|//Check for any registered checkpoint which prevent the GC from running
name|Revision
name|checkpoint
init|=
name|nodeStore
operator|.
name|getCheckpoints
argument_list|()
operator|.
name|getOldestRevisionToKeep
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkpoint
operator|!=
literal|null
operator|&&
name|checkpoint
operator|.
name|getTimestamp
argument_list|()
operator|<
name|oldestRevTimeStamp
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Ignoring version gc as valid checkpoint [{}] found while "
operator|+
literal|"need to collect versions older than [{}]"
argument_list|,
name|checkpoint
operator|.
name|toReadableString
argument_list|()
argument_list|,
name|Utils
operator|.
name|timestampToString
argument_list|(
name|oldestRevTimeStamp
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|.
name|ignoredGCDueToCheckPoint
operator|=
literal|true
expr_stmt|;
return|return
name|stats
return|;
block|}
name|collectDeletedDocuments
argument_list|(
name|stats
argument_list|,
name|headRevision
argument_list|,
name|oldestRevTimeStamp
argument_list|)
expr_stmt|;
name|collectSplitDocuments
argument_list|(
name|stats
argument_list|,
name|oldestRevTimeStamp
argument_list|)
expr_stmt|;
name|sw
operator|.
name|stop
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Version garbage collected in {}. {}"
argument_list|,
name|sw
argument_list|,
name|stats
argument_list|)
expr_stmt|;
return|return
name|stats
return|;
block|}
specifier|private
name|void
name|collectSplitDocuments
parameter_list|(
name|VersionGCStats
name|stats
parameter_list|,
name|long
name|oldestRevTimeStamp
parameter_list|)
block|{
name|int
name|count
init|=
name|versionStore
operator|.
name|deleteSplitDocuments
argument_list|(
name|GC_TYPES
argument_list|,
name|oldestRevTimeStamp
argument_list|)
decl_stmt|;
name|stats
operator|.
name|splitDocGCCount
operator|+=
name|count
expr_stmt|;
block|}
specifier|private
name|void
name|collectDeletedDocuments
parameter_list|(
name|VersionGCStats
name|stats
parameter_list|,
name|Revision
name|headRevision
parameter_list|,
name|long
name|oldestRevTimeStamp
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|docIdsToDelete
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|itr
init|=
name|versionStore
operator|.
name|getPossiblyDeletedDocs
argument_list|(
name|oldestRevTimeStamp
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|NodeDocument
name|doc
range|:
name|itr
control|)
block|{
comment|//Check if node is actually deleted at current revision
comment|//As node is not modified since oldestRevTimeStamp then
comment|//this node has not be revived again in past maxRevisionAge
comment|//So deleting it is safe
if|if
condition|(
name|doc
operator|.
name|getNodeAtRevision
argument_list|(
name|nodeStore
argument_list|,
name|headRevision
argument_list|,
literal|null
argument_list|)
operator|==
literal|null
condition|)
block|{
name|docIdsToDelete
operator|.
name|add
argument_list|(
name|doc
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|//Collect id of all previous docs also
for|for
control|(
name|NodeDocument
name|prevDoc
range|:
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|doc
operator|.
name|getAllPreviousDocs
argument_list|()
argument_list|)
control|)
block|{
name|docIdsToDelete
operator|.
name|add
argument_list|(
name|prevDoc
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|Utils
operator|.
name|closeIfCloseable
argument_list|(
name|itr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Deleted document with following ids were deleted as part of GC \n"
argument_list|)
decl_stmt|;
name|Joiner
operator|.
name|on
argument_list|(
name|StandardSystemProperty
operator|.
name|LINE_SEPARATOR
operator|.
name|value
argument_list|()
argument_list|)
operator|.
name|appendTo
argument_list|(
name|sb
argument_list|,
name|docIdsToDelete
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|nodeStore
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|docIdsToDelete
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|invalidateDocChildrenCache
argument_list|()
expr_stmt|;
name|stats
operator|.
name|deletedDocGCCount
operator|+=
name|docIdsToDelete
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|VersionGCStats
block|{
name|boolean
name|ignoredGCDueToCheckPoint
decl_stmt|;
name|int
name|deletedDocGCCount
decl_stmt|;
name|int
name|splitDocGCCount
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"VersionGCStats{"
operator|+
literal|"ignoredGCDueToCheckPoint="
operator|+
name|ignoredGCDueToCheckPoint
operator|+
literal|", deletedDocGCCount="
operator|+
name|deletedDocGCCount
operator|+
literal|", splitDocGCCount="
operator|+
name|splitDocGCCount
operator|+
literal|'}'
return|;
block|}
block|}
block|}
end_class

end_unit

