begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|cug
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|ROOT_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|cug
operator|.
name|impl
operator|.
name|NestedCugHookTest
operator|.
name|assertNestedCugs
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/*  * Test class created for<a href="https://issues.apache.org/jira/browse/OAK-8855">OAK-8855</a>.  * Permission evaluation of child nodes broken after :nestedCugs property  * is removed from parent node.  */
end_comment

begin_class
specifier|public
class|class
name|RestoreParentNestedCugTest
extends|extends
name|AbstractCugTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_GROUP2_ID
init|=
literal|"testGroup2"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_GROUP3_ID
init|=
literal|"testGroup3"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_USER1_ID
init|=
literal|"testUser1"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|setupNestedCugsAndAcls
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Authorizable
name|testGroup2
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|TEST_GROUP2_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|testGroup2
operator|!=
literal|null
condition|)
block|{
name|testGroup2
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|Authorizable
name|testGroup3
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|TEST_GROUP3_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|testGroup3
operator|!=
literal|null
condition|)
block|{
name|testGroup3
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|Authorizable
name|testUser1
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|TEST_USER1_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|testUser1
operator|!=
literal|null
condition|)
block|{
name|testUser1
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setupNestedCugsAndAcls
parameter_list|()
throws|throws
name|Exception
block|{
name|UserManager
name|uMgr
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|Principal
name|testGroupPrincipal1
init|=
name|getTestGroupPrincipal
argument_list|()
decl_stmt|;
name|Principal
name|testGroupPrincipal2
init|=
name|getTestGroupPrincipal
argument_list|(
name|TEST_GROUP2_ID
argument_list|)
decl_stmt|;
name|Principal
name|testGroupPrincipal3
init|=
name|getTestGroupPrincipal
argument_list|(
name|TEST_GROUP3_ID
argument_list|)
decl_stmt|;
name|User
name|testUser1
init|=
name|uMgr
operator|.
name|createUser
argument_list|(
name|TEST_USER1_ID
argument_list|,
name|TEST_USER1_ID
argument_list|)
decl_stmt|;
operator|(
operator|(
name|Group
operator|)
name|uMgr
operator|.
name|getAuthorizable
argument_list|(
name|testGroupPrincipal1
argument_list|)
operator|)
operator|.
name|addMember
argument_list|(
name|testUser1
argument_list|)
expr_stmt|;
name|User
name|testUser2
init|=
name|uMgr
operator|.
name|createUser
argument_list|(
name|TEST_USER2_ID
argument_list|,
name|TEST_USER2_ID
argument_list|)
decl_stmt|;
operator|(
operator|(
name|Group
operator|)
name|uMgr
operator|.
name|getAuthorizable
argument_list|(
name|testGroupPrincipal2
argument_list|)
operator|)
operator|.
name|addMember
argument_list|(
name|testUser2
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Group
operator|)
name|uMgr
operator|.
name|getAuthorizable
argument_list|(
name|testGroupPrincipal3
argument_list|)
operator|)
operator|.
name|addMember
argument_list|(
name|testUser1
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Group
operator|)
name|uMgr
operator|.
name|getAuthorizable
argument_list|(
name|testGroupPrincipal3
argument_list|)
operator|)
operator|.
name|addMember
argument_list|(
name|testUser2
argument_list|)
expr_stmt|;
name|Tree
name|n
init|=
name|root
operator|.
name|getTree
argument_list|(
name|SUPPORTED_PATH
argument_list|)
decl_stmt|;
name|createTrees
argument_list|(
name|n
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|,
literal|"a"
argument_list|,
literal|"b1"
argument_list|)
expr_stmt|;
name|createTrees
argument_list|(
name|n
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|,
literal|"a"
argument_list|,
literal|"b2"
argument_list|)
expr_stmt|;
comment|// - /content/a     : allow user1& user2, deny everyone
comment|// - /content/a/b1  : allow user1, deny everyone
comment|// - /content/a/b2  : allow user2, deny everyone
name|createCug
argument_list|(
literal|"/content/a"
argument_list|,
name|testGroupPrincipal3
argument_list|)
expr_stmt|;
name|createCug
argument_list|(
literal|"/content/a/b1"
argument_list|,
name|testGroupPrincipal1
argument_list|)
expr_stmt|;
name|createCug
argument_list|(
literal|"/content/a/b2"
argument_list|,
name|testGroupPrincipal2
argument_list|)
expr_stmt|;
comment|// - testUser1  : allow : jcr:read
comment|// - testUser2  : allow : jcr:read
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|AccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
literal|"/content"
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testUser1
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testUser2
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
literal|"/content"
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
comment|/*      * Remove :nestedCugs from a/rep:cugPolicy.      * Note that The existing principals on b1 and b2 are not changed,      * they are overwritten with the same principals they had earlier.      * So the effective permissions on b1 and b2 are same as before.      * This is done to make NestedCugHook consider b1 and b2 as "modified",      * so that :nestedCugs for a/rep:cugPolicywill can be reconstructed      * from b1 and b2 when root.commit() is called.      */
specifier|private
name|void
name|removeParentCug
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|cugPolicyNode
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/a/rep:cugPolicy"
argument_list|)
decl_stmt|;
name|cugPolicyNode
operator|.
name|removeProperty
argument_list|(
name|HIDDEN_NESTED_CUGS
argument_list|)
expr_stmt|;
comment|// remove :nestedCug from rep:cugPolicy
name|PropertyState
name|ps1
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|CugConstants
operator|.
name|REP_PRINCIPAL_NAMES
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|TEST_GROUP_ID
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
decl_stmt|;
name|PropertyState
name|ps2
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|CugConstants
operator|.
name|REP_PRINCIPAL_NAMES
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|TEST_GROUP2_ID
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
decl_stmt|;
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/a/b1/rep:cugPolicy"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ps1
argument_list|)
expr_stmt|;
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/a/b2/rep:cugPolicy"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ps2
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// should restore :nestedCugs in "/content/a/rep:cugPolicy"
block|}
specifier|private
name|Principal
name|getTestGroupPrincipal
parameter_list|(
name|String
name|testGroupId
parameter_list|)
throws|throws
name|Exception
block|{
name|UserManager
name|uMgr
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|Group
name|g
init|=
name|uMgr
operator|.
name|getAuthorizable
argument_list|(
name|testGroupId
argument_list|,
name|Group
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|==
literal|null
condition|)
block|{
name|g
operator|=
name|uMgr
operator|.
name|createGroup
argument_list|(
name|testGroupId
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
return|return
name|g
operator|.
name|getPrincipal
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParentNestedCugRestored
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|getRootProvider
argument_list|()
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|,
literal|"/content/a"
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|getRootProvider
argument_list|()
argument_list|,
literal|"/content/a"
argument_list|,
literal|true
argument_list|,
literal|"/content/a/b1"
argument_list|,
literal|"/content/a/b2"
argument_list|)
expr_stmt|;
name|removeParentCug
argument_list|()
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|getRootProvider
argument_list|()
argument_list|,
literal|"/content/a"
argument_list|,
literal|true
argument_list|,
literal|"/content/a/b1"
argument_list|,
literal|"/content/a/b2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|removeParentCug
argument_list|()
expr_stmt|;
comment|//check if authorization is working fine
name|ContentSession
name|cs
init|=
name|createTestSession2
argument_list|()
decl_stmt|;
comment|//login as testuser2
name|Root
name|r
init|=
name|cs
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
try|try
block|{
name|Tree
name|a
init|=
name|r
operator|.
name|getTree
argument_list|(
literal|"/content/a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|b1
init|=
name|a
operator|.
name|getChild
argument_list|(
literal|"b1"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|b1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|//testuser2 not authorized to read this
name|Tree
name|b2
init|=
name|a
operator|.
name|getChild
argument_list|(
literal|"b2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|b2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

