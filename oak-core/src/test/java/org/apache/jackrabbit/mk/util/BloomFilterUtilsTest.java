begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test the bloom filter utility class.  */
end_comment

begin_class
specifier|public
class|class
name|BloomFilterUtilsTest
block|{
comment|/**      * Program to calculate the best shift and multiply constants.      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|inSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|inSet
operator|.
name|size
argument_list|()
operator|<
literal|100
condition|)
block|{
name|inSet
operator|.
name|add
argument_list|(
name|randomString
argument_list|(
name|random
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Object
index|[]
name|in
init|=
name|inSet
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|notSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|notSet
operator|.
name|size
argument_list|()
operator|<
literal|10000
condition|)
block|{
name|String
name|k
init|=
name|randomString
argument_list|(
name|random
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|inSet
operator|.
name|contains
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|notSet
operator|.
name|add
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
block|}
name|Object
index|[]
name|not
init|=
name|notSet
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|int
name|best
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|int
name|mul
init|=
literal|1
init|;
name|mul
operator|<
literal|100000
condition|;
name|mul
operator|+=
literal|2
control|)
block|{
if|if
condition|(
operator|!
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|mul
argument_list|)
operator|.
name|isProbablePrime
argument_list|(
literal|10
argument_list|)
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|int
name|shift
init|=
literal|0
init|;
name|shift
operator|<
literal|32
condition|;
name|shift
operator|++
control|)
block|{
name|byte
index|[]
name|bloom
init|=
name|BloomFilterUtils
operator|.
name|createFilter
argument_list|(
literal|100
argument_list|,
literal|64
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|k
range|:
name|in
control|)
block|{
name|int
name|h1
init|=
name|hash
argument_list|(
name|k
operator|.
name|hashCode
argument_list|()
argument_list|,
name|mul
argument_list|,
name|shift
argument_list|)
decl_stmt|,
name|h2
init|=
name|hash
argument_list|(
name|h1
argument_list|,
name|mul
argument_list|,
name|shift
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|bloom
argument_list|,
name|h1
argument_list|,
name|h2
argument_list|)
expr_stmt|;
block|}
name|int
name|falsePositives
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|k
range|:
name|not
control|)
block|{
name|int
name|h1
init|=
name|hash
argument_list|(
name|k
operator|.
name|hashCode
argument_list|()
argument_list|,
name|mul
argument_list|,
name|shift
argument_list|)
decl_stmt|,
name|h2
init|=
name|hash
argument_list|(
name|h1
argument_list|,
name|mul
argument_list|,
name|shift
argument_list|)
decl_stmt|;
if|if
condition|(
name|probablyContains
argument_list|(
name|bloom
argument_list|,
name|h1
argument_list|,
name|h2
argument_list|)
condition|)
block|{
name|falsePositives
operator|++
expr_stmt|;
comment|// short false positives are bad
if|if
condition|(
name|k
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|<
literal|4
condition|)
block|{
name|falsePositives
operator|+=
literal|5
expr_stmt|;
block|}
if|if
condition|(
name|falsePositives
operator|>
name|best
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|falsePositives
operator|<
name|best
condition|)
block|{
name|best
operator|=
name|falsePositives
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"mul: "
operator|+
name|mul
operator|+
literal|" shift: "
operator|+
name|shift
operator|+
literal|" falsePositives: "
operator|+
name|best
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|randomString
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
if|if
condition|(
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
name|randomName
argument_list|(
name|r
argument_list|)
return|;
block|}
name|int
name|length
init|=
literal|1
operator|+
name|Math
operator|.
name|abs
argument_list|(
operator|(
name|int
operator|)
name|r
operator|.
name|nextGaussian
argument_list|()
operator|*
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|length
operator|+=
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|char
index|[]
name|chars
init|=
operator|new
name|char
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|chars
index|[
name|i
index|]
operator|=
name|randomChar
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|chars
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|char
name|randomChar
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
switch|switch
condition|(
name|r
operator|.
name|nextInt
argument_list|(
literal|101
argument_list|)
operator|/
literal|100
condition|)
block|{
case|case
literal|0
case|:
case|case
literal|1
case|:
comment|// 20% ascii
return|return
call|(
name|char
call|)
argument_list|(
literal|32
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|127
operator|-
literal|32
argument_list|)
argument_list|)
return|;
case|case
literal|2
case|:
case|case
literal|3
case|:
case|case
literal|4
case|:
case|case
literal|5
case|:
comment|// 40% a-z
return|return
call|(
name|char
call|)
argument_list|(
literal|'a'
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|'z'
operator|-
literal|'a'
argument_list|)
argument_list|)
return|;
case|case
literal|6
case|:
comment|// 10% A-Z
return|return
call|(
name|char
call|)
argument_list|(
literal|'A'
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|'Z'
operator|-
literal|'A'
argument_list|)
argument_list|)
return|;
case|case
literal|7
case|:
case|case
literal|8
case|:
comment|// 20% 0-9
return|return
call|(
name|char
call|)
argument_list|(
literal|'0'
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|'9'
operator|-
literal|'0'
argument_list|)
argument_list|)
return|;
case|case
literal|9
case|:
comment|// 10% aeiou
return|return
literal|"aeiou"
operator|.
name|charAt
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|"aeiou"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|// 1% unicode
return|return
operator|(
name|char
operator|)
name|r
operator|.
name|nextInt
argument_list|(
literal|65535
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|randomName
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
name|int
name|i
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
comment|// like TPC-C lastName, but lowercase
name|String
index|[]
name|n
init|=
block|{
literal|"bar"
block|,
literal|"ought"
block|,
literal|"able"
block|,
literal|"pri"
block|,
literal|"pres"
block|,
literal|"ese"
block|,
literal|"anti"
block|,
literal|"cally"
block|,
literal|"ation"
block|,
literal|"eing"
block|}
decl_stmt|;
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|n
index|[
name|i
operator|/
literal|100
index|]
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|n
index|[
operator|(
name|i
operator|/
literal|10
operator|)
operator|%
literal|10
index|]
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|n
index|[
name|i
operator|%
literal|10
index|]
argument_list|)
expr_stmt|;
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|int
name|hash
parameter_list|(
name|int
name|oldHash
parameter_list|,
name|int
name|mul
parameter_list|,
name|int
name|shift
parameter_list|)
block|{
return|return
name|oldHash
operator|^
operator|(
operator|(
name|oldHash
operator|*
name|mul
operator|)
operator|>>
name|shift
operator|)
return|;
block|}
specifier|private
specifier|static
name|void
name|add
parameter_list|(
name|byte
index|[]
name|bloom
parameter_list|,
name|int
name|h1
parameter_list|,
name|int
name|h2
parameter_list|)
block|{
name|int
name|len
init|=
name|bloom
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|bloom
index|[
operator|(
name|h1
operator|>>>
literal|3
operator|)
operator|%
name|len
index|]
operator||=
literal|1
operator|<<
operator|(
name|h1
operator|&
literal|7
operator|)
expr_stmt|;
name|bloom
index|[
operator|(
name|h2
operator|>>>
literal|3
operator|)
operator|%
name|len
index|]
operator||=
literal|1
operator|<<
operator|(
name|h2
operator|&
literal|7
operator|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|probablyContains
parameter_list|(
name|byte
index|[]
name|bloom
parameter_list|,
name|int
name|h1
parameter_list|,
name|int
name|h2
parameter_list|)
block|{
name|int
name|len
init|=
name|bloom
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|int
name|x
init|=
name|bloom
index|[
operator|(
name|h1
operator|>>>
literal|3
operator|)
operator|%
name|len
index|]
operator|&
operator|(
literal|1
operator|<<
operator|(
name|h1
operator|&
literal|7
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|0
condition|)
block|{
name|x
operator|=
name|bloom
index|[
operator|(
name|h2
operator|>>>
literal|3
operator|)
operator|%
name|len
index|]
operator|&
operator|(
literal|1
operator|<<
operator|(
name|h2
operator|&
literal|7
operator|)
operator|)
expr_stmt|;
block|}
return|return
name|x
operator|!=
literal|0
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|size
parameter_list|()
block|{
name|byte
index|[]
name|bloom
init|=
name|BloomFilterUtils
operator|.
name|createFilter
argument_list|(
literal|100
argument_list|,
literal|64
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|64
argument_list|,
name|bloom
operator|.
name|length
argument_list|)
expr_stmt|;
name|bloom
operator|=
name|BloomFilterUtils
operator|.
name|createFilter
argument_list|(
literal|10
argument_list|,
literal|64
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|bloom
operator|.
name|length
argument_list|)
expr_stmt|;
name|bloom
operator|=
name|BloomFilterUtils
operator|.
name|createFilter
argument_list|(
literal|0
argument_list|,
literal|64
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bloom
operator|.
name|length
argument_list|)
expr_stmt|;
name|bloom
operator|=
name|BloomFilterUtils
operator|.
name|createFilter
argument_list|(
literal|1
argument_list|,
literal|64
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bloom
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|probability
parameter_list|()
block|{
name|byte
index|[]
name|bloom
init|=
name|BloomFilterUtils
operator|.
name|createFilter
argument_list|(
literal|20
argument_list|,
literal|64
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|BloomFilterUtils
operator|.
name|add
argument_list|(
name|bloom
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|BloomFilterUtils
operator|.
name|probablyContains
argument_list|(
name|bloom
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|falsePositives
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|20
init|;
name|i
operator|<
literal|100000
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|BloomFilterUtils
operator|.
name|probablyContains
argument_list|(
name|bloom
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|falsePositives
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|1101
argument_list|,
name|falsePositives
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|negativeHashCode
parameter_list|()
block|{
name|BloomFilterUtils
operator|.
name|add
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
operator|new
name|Object
argument_list|()
block|{
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

