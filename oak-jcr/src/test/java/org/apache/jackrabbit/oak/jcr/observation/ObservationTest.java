begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|observation
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
operator|.
name|equal
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|synchronizedList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|synchronizedSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|NODE_ADDED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|NODE_MOVED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|NODE_REMOVED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|PERSIST
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|PROPERTY_ADDED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|PROPERTY_CHANGED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|PROPERTY_REMOVED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|ObservationManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ForwardingListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SettableFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|observation
operator|.
name|JackrabbitEventFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|observation
operator|.
name|JackrabbitObservationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|NodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|AbstractRepositoryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|observation
operator|.
name|filter
operator|.
name|FilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|FilterBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|FilterProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|Selectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
comment|// Don't run "Parallelized" as this causes tests to timeout in "weak" environments
specifier|public
class|class
name|ObservationTest
extends|extends
name|AbstractRepositoryTest
block|{
specifier|public
specifier|static
specifier|final
name|int
name|ALL_EVENTS
init|=
name|NODE_ADDED
operator||
name|NODE_REMOVED
operator||
name|NODE_MOVED
operator||
name|PROPERTY_ADDED
operator||
name|PROPERTY_REMOVED
operator||
name|PROPERTY_CHANGED
operator||
name|PERSIST
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_NODE
init|=
literal|"test_node"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REFERENCEABLE_NODE
init|=
literal|"\"referenceable\""
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_PATH
init|=
literal|'/'
operator|+
name|TEST_NODE
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_TYPE
init|=
literal|"mix:test"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|TIME_OUT
init|=
literal|60
decl_stmt|;
specifier|private
name|Session
name|observingSession
decl_stmt|;
specifier|private
name|ObservationManager
name|observationManager
decl_stmt|;
specifier|private
name|String
name|test_uuid
decl_stmt|;
specifier|public
name|ObservationTest
parameter_list|(
name|NodeStoreFixture
name|fixture
parameter_list|)
block|{
name|super
argument_list|(
name|fixture
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|NodeTypeManager
name|ntMgr
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|NodeTypeTemplate
name|mixTest
init|=
name|ntMgr
operator|.
name|createNodeTypeTemplate
argument_list|()
decl_stmt|;
name|mixTest
operator|.
name|setName
argument_list|(
name|TEST_TYPE
argument_list|)
expr_stmt|;
name|mixTest
operator|.
name|setMixin
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ntMgr
operator|.
name|registerNodeType
argument_list|(
name|mixTest
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
name|TEST_NODE
argument_list|)
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"test_property1"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"test_property2"
argument_list|,
literal|"forty_two"
argument_list|)
expr_stmt|;
name|n
operator|.
name|addMixin
argument_list|(
name|TEST_TYPE
argument_list|)
expr_stmt|;
name|Node
name|refNode
init|=
name|n
operator|.
name|addNode
argument_list|(
name|REFERENCEABLE_NODE
argument_list|)
decl_stmt|;
name|refNode
operator|.
name|addMixin
argument_list|(
name|JcrConstants
operator|.
name|MIX_REFERENCEABLE
argument_list|)
expr_stmt|;
name|test_uuid
operator|=
name|refNode
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_UUID
argument_list|)
operator|.
name|getString
argument_list|()
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|observingSession
operator|=
name|createAdminSession
argument_list|()
expr_stmt|;
name|observationManager
operator|=
name|observingSession
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getObservationManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|observingSession
operator|!=
literal|null
condition|)
block|{
name|observingSession
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|observation
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|ALL_EVENTS
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|Node
name|n
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|n
operator|.
name|setProperty
argument_list|(
literal|"p0"
argument_list|,
literal|"v0"
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|n1
init|=
name|listener
operator|.
name|expectAdd
argument_list|(
name|n
operator|.
name|addNode
argument_list|(
literal|"n1"
argument_list|)
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|n1
operator|.
name|setProperty
argument_list|(
literal|"p1"
argument_list|,
literal|"v1"
argument_list|)
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|n1
operator|.
name|setProperty
argument_list|(
literal|"p2"
argument_list|,
literal|"v2"
argument_list|)
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|n
operator|.
name|addNode
argument_list|(
literal|"n2"
argument_list|)
argument_list|)
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|n
operator|.
name|setProperty
argument_list|(
literal|"property"
argument_list|,
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|n3
init|=
name|listener
operator|.
name|expectAdd
argument_list|(
name|n
operator|.
name|addNode
argument_list|(
literal|"n3"
argument_list|)
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|n3
operator|.
name|setProperty
argument_list|(
literal|"p3"
argument_list|,
literal|"v3"
argument_list|)
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectChange
argument_list|(
name|n1
operator|.
name|setProperty
argument_list|(
literal|"p1"
argument_list|,
literal|"v1.1"
argument_list|)
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectRemove
argument_list|(
name|n1
operator|.
name|getProperty
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|listener
operator|.
name|expectRemove
argument_list|(
name|n
operator|.
name|getNode
argument_list|(
literal|"n2"
argument_list|)
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|n
operator|.
name|addNode
argument_list|(
literal|"{4}"
argument_list|)
argument_list|)
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|missing
operator|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|unexpected
operator|=
name|listener
operator|.
name|getUnexpected
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|observationManager
operator|.
name|removeEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|infoMap
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|Node
name|n
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Node
name|n3
init|=
name|n
operator|.
name|addNode
argument_list|(
literal|"n3"
argument_list|)
decl_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
literal|"p1"
argument_list|,
literal|"q1"
argument_list|)
expr_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
literal|"p2"
argument_list|,
literal|"q2"
argument_list|)
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|ALL_EVENTS
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|n
operator|.
name|addNode
argument_list|(
literal|"n1"
argument_list|,
literal|"oak:Unstructured"
argument_list|)
expr_stmt|;
name|n
operator|.
name|addNode
argument_list|(
literal|"n2"
argument_list|)
expr_stmt|;
name|n
operator|.
name|getNode
argument_list|(
literal|"n2"
argument_list|)
operator|.
name|addMixin
argument_list|(
name|TEST_TYPE
argument_list|)
expr_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
literal|"p1"
argument_list|,
literal|"changed"
argument_list|)
expr_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
literal|"p2"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
operator|new
name|Expectation
argument_list|(
literal|"infoMap for n1"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onEvent
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|NODE_ADDED
operator|&&
name|event
operator|.
name|getPath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"n1"
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|info
init|=
name|event
operator|.
name|getInfo
argument_list|()
decl_stmt|;
return|return
name|info
operator|!=
literal|null
operator|&&
literal|"oak:Unstructured"
operator|.
name|equals
argument_list|(
name|info
operator|.
name|get
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
operator|new
name|Expectation
argument_list|(
literal|"infoMap for n1/jcr:primaryType"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onEvent
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|PROPERTY_ADDED
operator|&&
name|event
operator|.
name|getPath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"n1/jcr:primaryType"
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|info
init|=
name|event
operator|.
name|getInfo
argument_list|()
decl_stmt|;
return|return
name|info
operator|!=
literal|null
operator|&&
literal|"oak:Unstructured"
operator|.
name|equals
argument_list|(
name|info
operator|.
name|get
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
operator|new
name|Expectation
argument_list|(
literal|"infoMap for n2"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onEvent
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|NODE_ADDED
operator|&&
name|event
operator|.
name|getPath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"n2"
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|info
init|=
name|event
operator|.
name|getInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Object
name|mixinTypes
init|=
name|info
operator|.
name|get
argument_list|(
name|JCR_MIXINTYPES
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|mixinTypes
operator|instanceof
name|String
index|[]
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Object
name|primaryType
init|=
name|info
operator|.
name|get
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
name|String
index|[]
name|mixins
init|=
operator|(
name|String
index|[]
operator|)
name|mixinTypes
decl_stmt|;
return|return
name|NT_UNSTRUCTURED
operator|.
name|equals
argument_list|(
name|primaryType
argument_list|)
operator|&&
name|mixins
operator|.
name|length
operator|==
literal|1
operator|&&
name|TEST_TYPE
operator|.
name|equals
argument_list|(
name|mixins
index|[
literal|0
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
operator|new
name|Expectation
argument_list|(
literal|"n2/jcr:primaryType"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onEvent
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|event
operator|.
name|getType
argument_list|()
operator|==
name|PROPERTY_ADDED
operator|&&
name|event
operator|.
name|getPath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"n2/jcr:primaryType"
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
operator|new
name|Expectation
argument_list|(
literal|"n2/jcr:mixinTypes"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onEvent
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|event
operator|.
name|getType
argument_list|()
operator|==
name|PROPERTY_ADDED
operator|&&
name|event
operator|.
name|getPath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"n2/jcr:mixinTypes"
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
operator|new
name|Expectation
argument_list|(
literal|"infoMap for n3/p1"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onEvent
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|PROPERTY_CHANGED
operator|&&
name|event
operator|.
name|getPath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"n3/p1"
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|info
init|=
name|event
operator|.
name|getInfo
argument_list|()
decl_stmt|;
return|return
name|info
operator|!=
literal|null
operator|&&
name|NT_UNSTRUCTURED
operator|.
name|equals
argument_list|(
name|info
operator|.
name|get
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
operator|new
name|Expectation
argument_list|(
literal|"infoMap for n3/p2"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onEvent
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|PROPERTY_REMOVED
operator|&&
name|event
operator|.
name|getPath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"n3/p2"
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|info
init|=
name|event
operator|.
name|getInfo
argument_list|()
decl_stmt|;
return|return
name|info
operator|!=
literal|null
operator|&&
name|NT_UNSTRUCTURED
operator|.
name|equals
argument_list|(
name|info
operator|.
name|get
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|observationManager
operator|.
name|removeEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|observation2
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|ALL_EVENTS
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|Node
name|n
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|n
operator|.
name|addNode
argument_list|(
literal|"n1"
argument_list|)
argument_list|)
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|n
operator|.
name|addNode
argument_list|(
literal|"n2"
argument_list|)
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectRemove
argument_list|(
name|n
operator|.
name|getNode
argument_list|(
literal|"n1"
argument_list|)
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|missing
operator|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|unexpected
operator|=
name|listener
operator|.
name|getUnexpected
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|observationManager
operator|.
name|removeEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|typeFilter
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|ALL_EVENTS
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|TEST_TYPE
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|Node
name|n
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Property
name|p
init|=
name|n
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"v"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Node
name|n1
init|=
name|n
operator|.
name|addNode
argument_list|(
literal|"n1"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|n1
operator|.
name|getPath
argument_list|()
argument_list|,
name|NODE_ADDED
argument_list|)
expr_stmt|;
name|n1
operator|.
name|addNode
argument_list|(
literal|"n2"
argument_list|)
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectChange
argument_list|(
name|p
argument_list|)
operator|.
name|setValue
argument_list|(
literal|"v2"
argument_list|)
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|missing
operator|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|unexpected
operator|=
name|listener
operator|.
name|getUnexpected
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectRemove
argument_list|(
name|p
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|missing
operator|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|unexpected
operator|=
name|listener
operator|.
name|getUnexpected
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|observationManager
operator|.
name|removeEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|uuidFilter
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|ALL_EVENTS
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
operator|new
name|String
index|[]
block|{
name|test_uuid
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|Node
name|nonRefNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Node
name|refNode
init|=
name|nonRefNode
operator|.
name|getNode
argument_list|(
name|REFERENCEABLE_NODE
argument_list|)
decl_stmt|;
name|nonRefNode
operator|.
name|addNode
argument_list|(
literal|"n"
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|refNode
operator|.
name|addNode
argument_list|(
literal|"r"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|,
name|NODE_ADDED
argument_list|)
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|observationManager
operator|.
name|removeEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|identifier
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|NODE_ADDED
argument_list|,
name|TEST_PATH
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|Node
name|n
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expect
argument_list|(
operator|new
name|Expectation
argument_list|(
literal|"Has correct id"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onEvent
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|TEST_PATH
operator|+
literal|"/newNode"
operator|)
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getIdentifier
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|n
operator|.
name|addNode
argument_list|(
literal|"newNode"
argument_list|)
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|observationManager
operator|.
name|removeEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|observationOnRootNode
parameter_list|()
throws|throws
name|Exception
block|{
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|PROPERTY_ADDED
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
comment|// add property to root node
name|Node
name|root
init|=
name|getNode
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|root
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|observationManager
operator|.
name|removeEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|pathFilter
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|path
init|=
literal|"/events/only/here"
decl_stmt|;
for|for
control|(
name|boolean
name|deep
range|:
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
control|)
block|{
name|Node
name|root
init|=
name|getNode
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
literal|"events"
argument_list|)
condition|)
block|{
name|root
operator|.
name|getNode
argument_list|(
literal|"events"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|NODE_ADDED
argument_list|,
name|path
argument_list|,
name|deep
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|.
name|addNode
argument_list|(
literal|"events"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"only"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"here"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"below"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"this"
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
literal|"/events/only/here/below"
argument_list|,
name|NODE_ADDED
argument_list|)
expr_stmt|;
if|if
condition|(
name|deep
condition|)
block|{
name|listener
operator|.
name|expect
argument_list|(
literal|"/events/only/here/below/this"
argument_list|,
name|NODE_ADDED
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|observationManager
operator|.
name|removeEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|pathFilterWithTrailingSlash
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|path
init|=
literal|"/events/only/here"
decl_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|listener
operator|.
name|expect
argument_list|(
operator|new
name|Expectation
argument_list|(
name|path
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onEvent
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|PathUtils
operator|.
name|isAncestor
argument_list|(
name|path
argument_list|,
name|event
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|NODE_ADDED
argument_list|,
name|path
operator|+
literal|'/'
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|Node
name|root
init|=
name|getNode
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|root
operator|.
name|addNode
argument_list|(
literal|"events"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"only"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"here"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"at"
argument_list|)
expr_stmt|;
name|root
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|observationManager
operator|.
name|removeEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|observationDispose
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
specifier|final
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|Expectation
name|hasEvents
init|=
name|listener
operator|.
name|expect
argument_list|(
operator|new
name|Expectation
argument_list|(
literal|"has events after registering"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Expectation
name|noEvents
init|=
name|listener
operator|.
name|expect
argument_list|(
operator|new
name|Expectation
argument_list|(
literal|"has no more events after unregistering"
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|ALL_EVENTS
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|Session
name|s
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
comment|// Generate events
name|ScheduledExecutorService
name|service
init|=
name|newSingleThreadScheduledExecutor
argument_list|()
decl_stmt|;
name|service
operator|.
name|scheduleWithFixedDelay
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|private
name|int
name|c
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|s
operator|.
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"c"
operator|+
name|c
operator|++
argument_list|)
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
comment|// Make sure we see the events
name|assertNotNull
argument_list|(
name|hasEvents
operator|.
name|get
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove event listener
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|observationManager
operator|.
name|removeEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|noEvents
operator|.
name|enable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|get
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// Make sure we see no more events
name|assertFalse
argument_list|(
name|noEvents
operator|.
name|wait
argument_list|(
literal|4
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|service
operator|.
name|awaitTermination
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|observationDisposeFromListener
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
specifier|final
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|Expectation
name|unregistered
init|=
name|listener
operator|.
name|expect
argument_list|(
operator|new
name|Expectation
argument_list|(
literal|"Unregistering listener from event handler should not block"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onEvent
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|Exception
block|{
name|observationManager
operator|.
name|removeEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|ALL_EVENTS
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Ensure the listener is there
name|assertTrue
argument_list|(
name|observationManager
operator|.
name|getRegisteredEventListeners
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Generate events
name|Node
name|n
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|n
operator|.
name|addNode
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|n
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// Make sure we see the events and the listener is gone
name|assertNotNull
argument_list|(
name|unregistered
operator|.
name|get
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|observationManager
operator|.
name|getRegisteredEventListeners
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMove
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|Node
name|testNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|testNode
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Node
name|nodeA
init|=
name|testNode
operator|.
name|addNode
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Node
name|nodeAA
init|=
name|nodeA
operator|.
name|addNode
argument_list|(
literal|"aa"
argument_list|)
decl_stmt|;
name|Node
name|nodeT
init|=
name|testNode
operator|.
name|addNode
argument_list|(
literal|"t"
argument_list|)
decl_stmt|;
name|Node
name|nodeS
init|=
name|testNode
operator|.
name|addNode
argument_list|(
literal|"s"
argument_list|)
decl_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|NODE_MOVED
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|src1
init|=
name|nodeA
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|dst1
init|=
name|nodeT
operator|.
name|getPath
argument_list|()
operator|+
literal|"/b"
decl_stmt|;
name|session
operator|.
name|move
argument_list|(
name|src1
argument_list|,
name|dst1
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectMove
argument_list|(
name|src1
argument_list|,
name|dst1
argument_list|)
expr_stmt|;
name|String
name|src2
init|=
name|nodeT
operator|.
name|getPath
argument_list|()
operator|+
literal|"/b/aa"
decl_stmt|;
name|String
name|dst2
init|=
name|nodeS
operator|.
name|getPath
argument_list|()
operator|+
literal|"/bb"
decl_stmt|;
name|session
operator|.
name|move
argument_list|(
name|src2
argument_list|,
name|dst2
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectMove
argument_list|(
name|src1
operator|+
literal|"/aa"
argument_list|,
name|dst2
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRename
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|Node
name|testNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|testNode
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Node
name|nodeA
init|=
name|testNode
operator|.
name|addNode
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|String
name|parentPath
init|=
name|testNode
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|assumeTrue
argument_list|(
name|nodeA
operator|instanceof
name|JackrabbitNode
argument_list|)
expr_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|NODE_MOVED
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
operator|(
operator|(
name|JackrabbitNode
operator|)
name|nodeA
operator|)
operator|.
name|rename
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectMove
argument_list|(
name|parentPath
operator|+
literal|"/a"
argument_list|,
name|parentPath
operator|+
literal|"/b"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReorder
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|Node
name|testNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Node
name|nodeA
init|=
name|testNode
operator|.
name|addNode
argument_list|(
literal|"a"
argument_list|,
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
name|Node
name|nodeB
init|=
name|testNode
operator|.
name|addNode
argument_list|(
literal|"b"
argument_list|,
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|NODE_MOVED
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
operator|new
name|Expectation
argument_list|(
literal|"orderBefore"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onEvent
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|!=
name|NODE_MOVED
operator|||
name|event
operator|.
name|getInfo
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|info
init|=
name|event
operator|.
name|getInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|TEST_PATH
argument_list|,
literal|"a"
argument_list|)
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|"a"
operator|.
name|equals
argument_list|(
name|info
operator|.
name|get
argument_list|(
literal|"srcChildRelPath"
argument_list|)
argument_list|)
operator|&&
literal|"b"
operator|.
name|equals
argument_list|(
name|info
operator|.
name|get
argument_list|(
literal|"destChildRelPath"
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|TEST_PATH
argument_list|,
literal|"b"
argument_list|)
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|"b"
operator|.
name|equals
argument_list|(
name|info
operator|.
name|get
argument_list|(
literal|"srcChildRelPath"
argument_list|)
argument_list|)
operator|&&
literal|"a"
operator|.
name|equals
argument_list|(
name|info
operator|.
name|get
argument_list|(
literal|"destChildRelPath"
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|orderBefore
argument_list|(
name|nodeA
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addSubtree
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|ALL_EVENTS
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Node
name|a
init|=
name|listener
operator|.
name|expectAdd
argument_list|(
name|n
operator|.
name|addNode
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|Node
name|b
init|=
name|listener
operator|.
name|expectAdd
argument_list|(
name|a
operator|.
name|addNode
argument_list|(
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|b
operator|.
name|addNode
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeSubtree
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|Node
name|n
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|n
operator|.
name|addNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"b"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|ALL_EVENTS
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectRemove
argument_list|(
name|n
operator|.
name|getNode
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|moveSubtree
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|Node
name|n
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|n
operator|.
name|addNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"b"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|ALL_EVENTS
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|move
argument_list|(
name|TEST_PATH
operator|+
literal|"/a"
argument_list|,
name|TEST_PATH
operator|+
literal|"/t"
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|TEST_PATH
operator|+
literal|"/t"
argument_list|,
name|NODE_MOVED
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|TEST_PATH
operator|+
literal|"/a"
argument_list|,
name|NODE_REMOVED
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|TEST_PATH
operator|+
literal|"/a/jcr:primaryType"
argument_list|,
name|PROPERTY_REMOVED
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|TEST_PATH
operator|+
literal|"/t"
argument_list|,
name|NODE_ADDED
argument_list|)
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|filterDisjunctPaths
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|RepositoryException
block|{
name|assumeTrue
argument_list|(
name|observationManager
operator|instanceof
name|JackrabbitObservationManager
argument_list|)
expr_stmt|;
name|ObservationManagerImpl
name|oManager
init|=
operator|(
name|ObservationManagerImpl
operator|)
name|observationManager
decl_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|FilterBuilder
name|builder
init|=
operator|new
name|FilterBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|condition
argument_list|(
name|builder
operator|.
name|any
argument_list|(
name|builder
operator|.
name|path
argument_list|(
name|TEST_PATH
operator|+
literal|"/a/b"
argument_list|)
argument_list|,
name|builder
operator|.
name|path
argument_list|(
name|TEST_PATH
operator|+
literal|"/x/y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|oManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|testNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Node
name|b
init|=
name|testNode
operator|.
name|addNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|b
operator|.
name|addNode
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|Node
name|y
init|=
name|testNode
operator|.
name|addNode
argument_list|(
literal|"x"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"y"
argument_list|)
decl_stmt|;
name|y
operator|.
name|addNode
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|b
operator|.
name|getPath
argument_list|()
argument_list|,
name|NODE_ADDED
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|y
operator|.
name|getPath
argument_list|()
argument_list|,
name|NODE_ADDED
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|disjunctPaths
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|RepositoryException
block|{
name|assumeTrue
argument_list|(
name|observationManager
operator|instanceof
name|JackrabbitObservationManager
argument_list|)
expr_stmt|;
name|JackrabbitObservationManager
name|oManager
init|=
operator|(
name|JackrabbitObservationManager
operator|)
name|observationManager
decl_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|JackrabbitEventFilter
name|filter
init|=
operator|new
name|JackrabbitEventFilter
argument_list|()
operator|.
name|setAdditionalPaths
argument_list|(
name|TEST_PATH
operator|+
literal|"/a"
argument_list|,
name|TEST_PATH
operator|+
literal|"/x"
argument_list|)
operator|.
name|setEventTypes
argument_list|(
name|NODE_ADDED
argument_list|)
decl_stmt|;
name|oManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|Node
name|testNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Node
name|b
init|=
name|testNode
operator|.
name|addNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|b
operator|.
name|addNode
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|Node
name|y
init|=
name|testNode
operator|.
name|addNode
argument_list|(
literal|"x"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"y"
argument_list|)
decl_stmt|;
name|y
operator|.
name|addNode
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|b
operator|.
name|getPath
argument_list|()
argument_list|,
name|NODE_ADDED
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|y
operator|.
name|getPath
argument_list|()
argument_list|,
name|NODE_ADDED
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noDuplicates
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|RepositoryException
block|{
name|assumeTrue
argument_list|(
name|observationManager
operator|instanceof
name|JackrabbitObservationManager
argument_list|)
expr_stmt|;
name|JackrabbitObservationManager
name|oManager
init|=
operator|(
name|JackrabbitObservationManager
operator|)
name|observationManager
decl_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|JackrabbitEventFilter
name|filter
init|=
operator|new
name|JackrabbitEventFilter
argument_list|()
operator|.
name|setAdditionalPaths
argument_list|(
name|TEST_PATH
operator|+
literal|"/a"
argument_list|,
name|TEST_PATH
operator|+
literal|"/a"
argument_list|)
operator|.
name|setEventTypes
argument_list|(
name|NODE_ADDED
argument_list|)
decl_stmt|;
name|oManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|Node
name|testNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Node
name|b
init|=
name|testNode
operator|.
name|addNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|b
operator|.
name|addNode
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|Node
name|y
init|=
name|testNode
operator|.
name|addNode
argument_list|(
literal|"x"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"y"
argument_list|)
decl_stmt|;
name|y
operator|.
name|addNode
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|b
operator|.
name|getPath
argument_list|()
argument_list|,
name|NODE_ADDED
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|pathExclude
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|RepositoryException
block|{
name|assumeTrue
argument_list|(
name|observationManager
operator|instanceof
name|JackrabbitObservationManager
argument_list|)
expr_stmt|;
name|JackrabbitObservationManager
name|oManager
init|=
operator|(
name|JackrabbitObservationManager
operator|)
name|observationManager
decl_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|JackrabbitEventFilter
name|filter
init|=
operator|new
name|JackrabbitEventFilter
argument_list|()
operator|.
name|setAbsPath
argument_list|(
name|TEST_PATH
argument_list|)
operator|.
name|setIsDeep
argument_list|(
literal|true
argument_list|)
operator|.
name|setExcludedPaths
argument_list|(
name|TEST_PATH
operator|+
literal|"/c"
argument_list|,
name|TEST_PATH
operator|+
literal|"/d"
argument_list|,
literal|"/x/y"
argument_list|)
operator|.
name|setEventTypes
argument_list|(
name|ALL_EVENTS
argument_list|)
decl_stmt|;
name|oManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|listener
operator|.
name|expectAdd
argument_list|(
name|listener
operator|.
name|expectAdd
argument_list|(
name|n
operator|.
name|addNode
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"a1"
argument_list|)
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"q"
argument_list|)
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|listener
operator|.
name|expectAdd
argument_list|(
name|n
operator|.
name|addNode
argument_list|(
literal|"b"
argument_list|)
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"q"
argument_list|)
argument_list|)
expr_stmt|;
name|n
operator|.
name|addNode
argument_list|(
literal|"c"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"c1"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"q"
argument_list|)
expr_stmt|;
name|n
operator|.
name|addNode
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"q"
argument_list|)
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|parentPathExclude
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|RepositoryException
block|{
name|assumeTrue
argument_list|(
name|observationManager
operator|instanceof
name|JackrabbitObservationManager
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"n"
argument_list|)
decl_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|JackrabbitObservationManager
name|oManager
init|=
operator|(
name|JackrabbitObservationManager
operator|)
name|observationManager
decl_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|JackrabbitEventFilter
name|filter
init|=
operator|new
name|JackrabbitEventFilter
argument_list|()
operator|.
name|setAbsPath
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|setIsDeep
argument_list|(
literal|true
argument_list|)
operator|.
name|setExcludedPaths
argument_list|(
name|n
operator|.
name|getParent
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|setEventTypes
argument_list|(
name|ALL_EVENTS
argument_list|)
decl_stmt|;
name|oManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|n
operator|.
name|addNode
argument_list|(
literal|"n1"
argument_list|)
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|filterPropertyOfParent
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|assumeTrue
argument_list|(
name|observationManager
operator|instanceof
name|ObservationManagerImpl
argument_list|)
expr_stmt|;
name|ObservationManagerImpl
name|oManager
init|=
operator|(
name|ObservationManagerImpl
operator|)
name|observationManager
decl_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|FilterBuilder
name|builder
init|=
operator|new
name|FilterBuilder
argument_list|()
decl_stmt|;
comment|// Events for all items whose parent has a property named "foo" with value "bar"
name|builder
operator|.
name|condition
argument_list|(
name|builder
operator|.
name|property
argument_list|(
name|Selectors
operator|.
name|PARENT
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|Predicate
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|PropertyState
name|property
parameter_list|)
block|{
return|return
literal|"bar"
operator|.
name|equals
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|oManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|testNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Node
name|a
init|=
name|testNode
operator|.
name|addNode
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Node
name|x
init|=
name|testNode
operator|.
name|addNode
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNode
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|x
operator|.
name|addNode
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|a
operator|.
name|getPath
argument_list|()
operator|+
literal|"/jcr:primaryType"
argument_list|,
name|PROPERTY_ADDED
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|a
operator|.
name|getPath
argument_list|()
operator|+
literal|"/foo"
argument_list|,
name|PROPERTY_ADDED
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|a
operator|.
name|getPath
argument_list|()
operator|+
literal|"/b"
argument_list|,
name|NODE_ADDED
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|filterPropertyOfChild
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|assumeTrue
argument_list|(
name|observationManager
operator|instanceof
name|ObservationManagerImpl
argument_list|)
expr_stmt|;
name|ObservationManagerImpl
name|oManager
init|=
operator|(
name|ObservationManagerImpl
operator|)
name|observationManager
decl_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|FilterBuilder
name|builder
init|=
operator|new
name|FilterBuilder
argument_list|()
decl_stmt|;
comment|// Events for all items that have a property "b/c/foo" with value "bar"
name|builder
operator|.
name|condition
argument_list|(
name|builder
operator|.
name|property
argument_list|(
name|Selectors
operator|.
name|fromThis
argument_list|(
literal|"b/c"
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|Predicate
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|PropertyState
name|property
parameter_list|)
block|{
return|return
literal|"bar"
operator|.
name|equals
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|oManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|testNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Node
name|a
init|=
name|testNode
operator|.
name|addNode
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|a
operator|.
name|addNode
argument_list|(
literal|"b"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNode
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|Node
name|x
init|=
name|testNode
operator|.
name|addNode
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|x
operator|.
name|addNode
argument_list|(
literal|"b"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|x
operator|.
name|addNode
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|a
operator|.
name|getPath
argument_list|()
argument_list|,
name|NODE_ADDED
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addSubtreeFilter
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|assumeTrue
argument_list|(
name|observationManager
operator|instanceof
name|ObservationManagerImpl
argument_list|)
expr_stmt|;
name|ObservationManagerImpl
name|oManager
init|=
operator|(
name|ObservationManagerImpl
operator|)
name|observationManager
decl_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|FilterBuilder
name|builder
init|=
operator|new
name|FilterBuilder
argument_list|()
decl_stmt|;
comment|// Only generate events for the root of added sub trees
name|builder
operator|.
name|condition
argument_list|(
name|builder
operator|.
name|addSubtree
argument_list|()
argument_list|)
expr_stmt|;
name|oManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|testNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Node
name|a
init|=
name|listener
operator|.
name|expectAdd
argument_list|(
name|testNode
operator|.
name|addNode
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|.
name|addNode
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeSubtreeFilter
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|assumeTrue
argument_list|(
name|observationManager
operator|instanceof
name|ObservationManagerImpl
argument_list|)
expr_stmt|;
name|Node
name|testNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|testNode
operator|.
name|addNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|ObservationManagerImpl
name|oManager
init|=
operator|(
name|ObservationManagerImpl
operator|)
name|observationManager
decl_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|FilterBuilder
name|builder
init|=
operator|new
name|FilterBuilder
argument_list|()
decl_stmt|;
comment|// Only generate events for the root of deleted sub trees
name|builder
operator|.
name|condition
argument_list|(
name|builder
operator|.
name|deleteSubtree
argument_list|()
argument_list|)
expr_stmt|;
name|oManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectRemove
argument_list|(
name|testNode
operator|.
name|getNode
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|propertyValue
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|ALL_EVENTS
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|Node
name|n
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"added"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectValue
argument_list|(
literal|null
argument_list|,
name|n
operator|.
name|getProperty
argument_list|(
literal|"added"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Value
name|before
init|=
name|n
operator|.
name|getProperty
argument_list|(
literal|"test_property1"
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|n
operator|.
name|getProperty
argument_list|(
literal|"test_property1"
argument_list|)
operator|.
name|setValue
argument_list|(
literal|43
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectValue
argument_list|(
name|before
argument_list|,
name|n
operator|.
name|getProperty
argument_list|(
literal|"test_property1"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|=
name|n
operator|.
name|getProperty
argument_list|(
literal|"test_property2"
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|n
operator|.
name|getProperty
argument_list|(
literal|"test_property2"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|listener
operator|.
name|expectValue
argument_list|(
name|before
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|observationManager
operator|.
name|removeEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|propertyValues
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|Node
name|n
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"toChange"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"one"
block|,
literal|"two"
block|}
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"toDelete"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"three"
block|,
literal|"four"
block|}
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|ALL_EVENTS
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|n
operator|.
name|setProperty
argument_list|(
literal|"added"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"five"
block|,
literal|"six"
block|}
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectValues
argument_list|(
literal|null
argument_list|,
name|n
operator|.
name|getProperty
argument_list|(
literal|"added"
argument_list|)
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|Value
index|[]
name|before
init|=
name|n
operator|.
name|getProperty
argument_list|(
literal|"toChange"
argument_list|)
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|n
operator|.
name|getProperty
argument_list|(
literal|"toChange"
argument_list|)
operator|.
name|setValue
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|}
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectValues
argument_list|(
name|before
argument_list|,
name|n
operator|.
name|getProperty
argument_list|(
literal|"toChange"
argument_list|)
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|=
name|n
operator|.
name|getProperty
argument_list|(
literal|"toDelete"
argument_list|)
operator|.
name|getValues
argument_list|()
expr_stmt|;
name|n
operator|.
name|getProperty
argument_list|(
literal|"toDelete"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|listener
operator|.
name|expectValues
argument_list|(
name|before
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|observationManager
operator|.
name|removeEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
name|Node
name|getNode
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|getAdminSession
argument_list|()
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
return|;
block|}
comment|//------------------------------------------------------------< ExpectationListener>---
specifier|private
specifier|static
class|class
name|Expectation
extends|extends
name|ForwardingListenableFuture
argument_list|<
name|Event
argument_list|>
block|{
specifier|private
specifier|final
name|SettableFuture
argument_list|<
name|Event
argument_list|>
name|future
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|enabled
init|=
literal|true
decl_stmt|;
name|Expectation
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|enabled
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|enabled
operator|=
name|enabled
expr_stmt|;
block|}
name|Expectation
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ListenableFuture
argument_list|<
name|Event
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|future
return|;
block|}
specifier|public
name|void
name|enable
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|this
operator|.
name|enabled
operator|=
name|enabled
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|enabled
return|;
block|}
specifier|public
name|void
name|complete
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|future
operator|.
name|set
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isComplete
parameter_list|()
block|{
return|return
name|future
operator|.
name|isDone
argument_list|()
return|;
block|}
specifier|public
name|void
name|fail
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|future
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|wait
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
try|try
block|{
name|future
operator|.
name|get
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|onEvent
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ExpectationListener
implements|implements
name|EventListener
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|Expectation
argument_list|>
name|expected
init|=
name|synchronizedSet
argument_list|(
name|Sets
operator|.
expr|<
name|Expectation
operator|>
name|newCopyOnWriteArraySet
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|synchronizedList
argument_list|(
name|Lists
operator|.
expr|<
name|Event
operator|>
name|newCopyOnWriteArrayList
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|Exception
name|failed
decl_stmt|;
specifier|public
name|Expectation
name|expect
parameter_list|(
name|Expectation
name|expectation
parameter_list|)
block|{
if|if
condition|(
name|failed
operator|!=
literal|null
condition|)
block|{
name|expectation
operator|.
name|fail
argument_list|(
name|failed
argument_list|)
expr_stmt|;
block|}
name|expected
operator|.
name|add
argument_list|(
name|expectation
argument_list|)
expr_stmt|;
return|return
name|expectation
return|;
block|}
specifier|public
name|Future
argument_list|<
name|Event
argument_list|>
name|expect
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|int
name|type
parameter_list|)
block|{
return|return
name|expect
argument_list|(
operator|new
name|Expectation
argument_list|(
literal|"path = "
operator|+
name|path
operator|+
literal|", type = "
operator|+
name|type
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onEvent
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|type
operator|==
name|event
operator|.
name|getType
argument_list|()
operator|&&
name|equal
argument_list|(
name|path
argument_list|,
name|event
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|Future
argument_list|<
name|Event
argument_list|>
name|expect
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|String
name|identifier
parameter_list|,
specifier|final
name|int
name|type
parameter_list|)
block|{
return|return
name|expect
argument_list|(
operator|new
name|Expectation
argument_list|(
literal|"path = "
operator|+
name|path
operator|+
literal|", identifier = "
operator|+
name|identifier
operator|+
literal|", type = "
operator|+
name|type
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onEvent
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|type
operator|==
name|event
operator|.
name|getType
argument_list|()
operator|&&
name|equal
argument_list|(
name|path
argument_list|,
name|event
operator|.
name|getPath
argument_list|()
argument_list|)
operator|&&
name|equal
argument_list|(
name|identifier
argument_list|,
name|event
operator|.
name|getIdentifier
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|Node
name|expectAdd
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|expect
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|,
name|NODE_ADDED
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
operator|+
literal|"/jcr:primaryType"
argument_list|,
name|PROPERTY_ADDED
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
specifier|public
name|Node
name|expectRemove
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|expect
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|,
name|NODE_REMOVED
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
operator|+
literal|"/jcr:primaryType"
argument_list|,
name|PROPERTY_REMOVED
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
specifier|public
name|Property
name|expectAdd
parameter_list|(
name|Property
name|property
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|expect
argument_list|(
name|property
operator|.
name|getPath
argument_list|()
argument_list|,
name|PROPERTY_ADDED
argument_list|)
expr_stmt|;
return|return
name|property
return|;
block|}
specifier|public
name|Property
name|expectRemove
parameter_list|(
name|Property
name|property
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|expect
argument_list|(
name|property
operator|.
name|getPath
argument_list|()
argument_list|,
name|PROPERTY_REMOVED
argument_list|)
expr_stmt|;
return|return
name|property
return|;
block|}
specifier|public
name|Property
name|expectChange
parameter_list|(
name|Property
name|property
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|expect
argument_list|(
name|property
operator|.
name|getPath
argument_list|()
argument_list|,
name|PROPERTY_CHANGED
argument_list|)
expr_stmt|;
return|return
name|property
return|;
block|}
specifier|public
name|void
name|expectMove
parameter_list|(
specifier|final
name|String
name|src
parameter_list|,
specifier|final
name|String
name|dst
parameter_list|)
block|{
name|expect
argument_list|(
operator|new
name|Expectation
argument_list|(
literal|'>'
operator|+
name|src
operator|+
literal|':'
operator|+
name|dst
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onEvent
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|event
operator|.
name|getType
argument_list|()
operator|==
name|NODE_MOVED
operator|&&
name|equal
argument_list|(
name|dst
argument_list|,
name|event
operator|.
name|getPath
argument_list|()
argument_list|)
operator|&&
name|equal
argument_list|(
name|src
argument_list|,
name|event
operator|.
name|getInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"srcAbsPath"
argument_list|)
argument_list|)
operator|&&
name|equal
argument_list|(
name|dst
argument_list|,
name|event
operator|.
name|getInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"destAbsPath"
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|expectValue
parameter_list|(
specifier|final
name|Value
name|before
parameter_list|,
specifier|final
name|Value
name|after
parameter_list|)
block|{
name|expect
argument_list|(
operator|new
name|Expectation
argument_list|(
literal|"Before value "
operator|+
name|before
operator|+
literal|" after value "
operator|+
name|after
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onEvent
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|equal
argument_list|(
name|before
argument_list|,
name|event
operator|.
name|getInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"beforeValue"
argument_list|)
argument_list|)
operator|&&
name|equal
argument_list|(
name|after
argument_list|,
name|event
operator|.
name|getInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"afterValue"
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|expectValues
parameter_list|(
specifier|final
name|Value
index|[]
name|before
parameter_list|,
specifier|final
name|Value
index|[]
name|after
parameter_list|)
block|{
name|expect
argument_list|(
operator|new
name|Expectation
argument_list|(
literal|"Before valuse "
operator|+
name|before
operator|+
literal|" after values "
operator|+
name|after
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onEvent
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|before
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|event
operator|.
name|getInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"beforeValue"
argument_list|)
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|after
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|event
operator|.
name|getInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"afterValue"
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Future
argument_list|<
name|Event
argument_list|>
name|expectBeforeValue
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|int
name|type
parameter_list|,
specifier|final
name|String
name|beforeValue
parameter_list|)
block|{
return|return
name|expect
argument_list|(
operator|new
name|Expectation
argument_list|(
literal|"path = "
operator|+
name|path
operator|+
literal|", type = "
operator|+
name|type
operator|+
literal|", beforeValue = "
operator|+
name|beforeValue
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onEvent
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|type
operator|==
name|event
operator|.
name|getType
argument_list|()
operator|&&
name|equal
argument_list|(
name|path
argument_list|,
name|event
operator|.
name|getPath
argument_list|()
argument_list|)
operator|&&
name|event
operator|.
name|getInfo
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"beforeValue"
argument_list|)
operator|&&
name|beforeValue
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Value
operator|)
name|event
operator|.
name|getInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"beforeValue"
argument_list|)
operator|)
operator|.
name|getString
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Expectation
argument_list|>
name|getMissing
parameter_list|(
name|int
name|time
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
try|try
block|{
name|Futures
operator|.
name|allAsList
argument_list|(
name|expected
argument_list|)
operator|.
name|get
argument_list|(
name|time
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
for|for
control|(
name|Expectation
name|exp
range|:
name|expected
control|)
block|{
if|if
condition|(
operator|!
name|exp
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|missing
operator|.
name|add
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|missing
return|;
block|}
specifier|public
name|List
argument_list|<
name|Event
argument_list|>
name|getUnexpected
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|unexpected
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onEvent
parameter_list|(
name|EventIterator
name|events
parameter_list|)
block|{
try|try
block|{
while|while
condition|(
name|events
operator|.
name|hasNext
argument_list|()
operator|&&
name|failed
operator|==
literal|null
condition|)
block|{
name|Event
name|event
init|=
name|events
operator|.
name|nextEvent
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Expectation
name|exp
range|:
name|expected
control|)
block|{
if|if
condition|(
name|exp
operator|.
name|isEnabled
argument_list|()
operator|&&
operator|!
name|exp
operator|.
name|isComplete
argument_list|()
operator|&&
name|exp
operator|.
name|onEvent
argument_list|(
name|event
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|exp
operator|.
name|complete
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|unexpected
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
for|for
control|(
name|Expectation
name|exp
range|:
name|expected
control|)
block|{
name|exp
operator|.
name|fail
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|failed
operator|=
name|e
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|key
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|type
parameter_list|)
block|{
return|return
name|path
operator|+
literal|':'
operator|+
name|type
return|;
block|}
block|}
comment|//------------------------------------------------------------< OakEventFilter tests>---
annotation|@
name|Test
specifier|public
name|void
name|applyNodeTypeOnSelf
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
name|observationManager
operator|instanceof
name|ObservationManagerImpl
argument_list|)
expr_stmt|;
name|Node
name|testNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|testNode
operator|.
name|addNode
argument_list|(
literal|"a"
argument_list|,
literal|"nt:unstructured"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"b"
argument_list|,
literal|"oak:Unstructured"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"c"
argument_list|,
literal|"nt:unstructured"
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|ObservationManagerImpl
name|oManager
init|=
operator|(
name|ObservationManagerImpl
operator|)
name|observationManager
decl_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|JackrabbitEventFilter
name|filter
init|=
operator|new
name|JackrabbitEventFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|setEventTypes
argument_list|(
name|ALL_EVENTS
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setAbsPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setIsDeep
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setNodeTypes
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"oak:Unstructured"
block|}
argument_list|)
expr_stmt|;
name|filter
operator|=
name|FilterFactory
operator|.
name|wrap
argument_list|(
name|filter
argument_list|)
operator|.
name|withApplyNodeTypeOnSelf
argument_list|()
expr_stmt|;
name|oManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|getNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"b"
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"c"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// wait 1 sec to give failures a chance (we're not expecting anything, but perhaps
comment|// something would come, after 1sec more likely than after 0sec)
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|b
init|=
name|testNode
operator|.
name|getNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
comment|// OAK-5061 : the event NODE_REMOVED on /a/b is actually expected and was missing in the test:
name|listener
operator|.
name|expect
argument_list|(
name|b
operator|.
name|getPath
argument_list|()
argument_list|,
name|NODE_REMOVED
argument_list|)
expr_stmt|;
name|b
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|missing
operator|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|unexpected
operator|=
name|listener
operator|.
name|getUnexpected
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|includeAncestorsRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|JackrabbitEventFilter
name|filter
init|=
operator|new
name|JackrabbitEventFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|setEventTypes
argument_list|(
name|ALL_EVENTS
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setAbsPath
argument_list|(
name|TEST_PATH
operator|+
literal|"/a/b/c/d"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setIsDeep
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|filter
operator|=
name|FilterFactory
operator|.
name|wrap
argument_list|(
name|filter
argument_list|)
operator|.
name|withIncludeAncestorsRemove
argument_list|()
expr_stmt|;
name|FilterProvider
name|filterProvider
init|=
name|doIncludeAncestorsRemove
argument_list|(
name|filter
argument_list|)
decl_stmt|;
comment|// with 'includeAncestorsRemove' flag the listener is registered at '/'
name|assertMatches
argument_list|(
name|filterProvider
operator|.
name|getSubTrees
argument_list|()
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|JackrabbitEventFilter
argument_list|()
expr_stmt|;
name|filter
operator|.
name|setEventTypes
argument_list|(
name|ALL_EVENTS
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setIsDeep
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|filter
operator|=
name|FilterFactory
operator|.
name|wrap
argument_list|(
name|filter
argument_list|)
operator|.
name|withIncludeAncestorsRemove
argument_list|()
operator|.
name|withIncludeGlobPaths
argument_list|(
name|TEST_PATH
operator|+
literal|"/a/b/c/**"
argument_list|)
expr_stmt|;
name|filterProvider
operator|=
name|doIncludeAncestorsRemove
argument_list|(
name|filter
argument_list|)
expr_stmt|;
comment|// with 'includeAncestorsRemove' flag the listener is registered at '/'
name|assertMatches
argument_list|(
name|filterProvider
operator|.
name|getSubTrees
argument_list|()
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FilterProvider
name|doIncludeAncestorsRemove
parameter_list|(
name|JackrabbitEventFilter
name|filter
parameter_list|)
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
name|observationManager
operator|instanceof
name|ObservationManagerImpl
argument_list|)
expr_stmt|;
name|Node
name|testNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|testNode
operator|.
name|addNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"b"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"c"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"e"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|ObservationManagerImpl
name|oManager
init|=
operator|(
name|ObservationManagerImpl
operator|)
name|observationManager
decl_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|oManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|Node
name|d
init|=
name|testNode
operator|.
name|getNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"b"
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"c"
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
name|Property
name|e
init|=
name|d
operator|.
name|getProperty
argument_list|(
literal|"e"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expectRemove
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|//        listener.expectRemove(d.getProperty("jcr:primaryType"));
comment|//        d.remove();
name|listener
operator|.
name|expectRemove
argument_list|(
name|d
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|oManager
operator|.
name|addEventListener
argument_list|(
operator|new
name|EventListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onEvent
parameter_list|(
name|EventIterator
name|events
parameter_list|)
block|{
while|while
condition|(
name|events
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"GOT: "
operator|+
name|events
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|NODE_REMOVED
argument_list|,
name|TEST_PATH
operator|+
literal|"/a"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"REGISTERED"
argument_list|)
expr_stmt|;
name|testNode
operator|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
name|Node
name|b
init|=
name|testNode
operator|.
name|getNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|b
operator|.
name|getPath
argument_list|()
argument_list|,
name|NODE_REMOVED
argument_list|)
expr_stmt|;
name|b
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// but not the jcr:primaryType
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|missing
operator|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|unexpected
operator|=
name|listener
operator|.
name|getUnexpected
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|a
init|=
name|testNode
operator|.
name|getNode
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|a
operator|.
name|getPath
argument_list|()
argument_list|,
name|NODE_REMOVED
argument_list|)
expr_stmt|;
name|a
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// but not the jcr:primaryType
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|missing
operator|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|unexpected
operator|=
name|listener
operator|.
name|getUnexpected
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeProcessor
name|cp
init|=
name|oManager
operator|.
name|getChangeProcessor
argument_list|(
name|listener
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cp
argument_list|)
expr_stmt|;
name|FilterProvider
name|filterProvider
init|=
name|cp
operator|.
name|getFilterProvider
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|filterProvider
argument_list|)
expr_stmt|;
return|return
name|filterProvider
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|includeRemovedSubtree
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|assumeTrue
argument_list|(
name|observationManager
operator|instanceof
name|ObservationManagerImpl
argument_list|)
expr_stmt|;
name|Node
name|testNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|testNode
operator|.
name|addNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|ObservationManagerImpl
name|oManager
init|=
operator|(
name|ObservationManagerImpl
operator|)
name|observationManager
decl_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|JackrabbitEventFilter
name|filter
init|=
operator|new
name|JackrabbitEventFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|setEventTypes
argument_list|(
name|ALL_EVENTS
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setAbsPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setIsDeep
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|filter
operator|=
name|FilterFactory
operator|.
name|wrap
argument_list|(
name|filter
argument_list|)
operator|.
name|withIncludeSubtreeOnRemove
argument_list|()
expr_stmt|;
name|oManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectRemove
argument_list|(
name|testNode
operator|.
name|getNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectRemove
argument_list|(
name|testNode
operator|.
name|getNode
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|includeRemovedSubtree_BeforeValue
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|assumeTrue
argument_list|(
name|observationManager
operator|instanceof
name|ObservationManagerImpl
argument_list|)
expr_stmt|;
name|Node
name|testNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Node
name|a
init|=
name|testNode
operator|.
name|addNode
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"propA"
argument_list|,
literal|"24"
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNode
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propB"
argument_list|,
literal|"42"
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|ObservationManagerImpl
name|oManager
init|=
operator|(
name|ObservationManagerImpl
operator|)
name|observationManager
decl_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|JackrabbitEventFilter
name|filter
init|=
operator|new
name|JackrabbitEventFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|setEventTypes
argument_list|(
name|ALL_EVENTS
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setAbsPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setIsDeep
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|filter
operator|=
name|FilterFactory
operator|.
name|wrap
argument_list|(
name|filter
argument_list|)
operator|.
name|withIncludeSubtreeOnRemove
argument_list|()
expr_stmt|;
name|oManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|Node
name|c
init|=
name|testNode
operator|.
name|getNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expectRemove
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectBeforeValue
argument_list|(
name|c
operator|.
name|getProperty
argument_list|(
literal|"propB"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|,
name|PROPERTY_REMOVED
argument_list|,
literal|"42"
argument_list|)
expr_stmt|;
name|a
operator|=
name|testNode
operator|.
name|getNode
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectBeforeValue
argument_list|(
name|a
operator|.
name|getProperty
argument_list|(
literal|"propA"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|,
name|PROPERTY_REMOVED
argument_list|,
literal|"24"
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectRemove
argument_list|(
name|a
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|includeGlobPaths
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|testNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|testNode
operator|.
name|addNode
argument_list|(
literal|"a1"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"b"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|addNode
argument_list|(
literal|"a2"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"b"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|ObservationManagerImpl
name|oManager
init|=
operator|(
name|ObservationManagerImpl
operator|)
name|observationManager
decl_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|JackrabbitEventFilter
name|filter
init|=
operator|new
name|JackrabbitEventFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|setEventTypes
argument_list|(
name|ALL_EVENTS
argument_list|)
expr_stmt|;
name|filter
operator|=
name|FilterFactory
operator|.
name|wrap
argument_list|(
name|filter
argument_list|)
operator|.
name|withIncludeGlobPaths
argument_list|(
name|TEST_PATH
operator|+
literal|"/a2/**"
argument_list|)
expr_stmt|;
name|oManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|ChangeProcessor
name|cp
init|=
name|oManager
operator|.
name|getChangeProcessor
argument_list|(
name|listener
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cp
argument_list|)
expr_stmt|;
name|FilterProvider
name|filterProvider
init|=
name|cp
operator|.
name|getFilterProvider
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|filterProvider
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|filterProvider
operator|.
name|getSubTrees
argument_list|()
argument_list|,
name|TEST_PATH
operator|+
literal|"/a2"
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|getNode
argument_list|(
literal|"a1"
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"b"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|listener
operator|.
name|expectRemove
argument_list|(
name|testNode
operator|.
name|getNode
argument_list|(
literal|"a2"
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"b"
argument_list|)
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|a3
init|=
name|testNode
operator|.
name|addNode
argument_list|(
literal|"a3"
argument_list|)
decl_stmt|;
name|Node
name|foo
init|=
name|a3
operator|.
name|addNode
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|filter
operator|=
operator|new
name|JackrabbitEventFilter
argument_list|()
expr_stmt|;
name|filter
operator|.
name|setEventTypes
argument_list|(
name|ALL_EVENTS
argument_list|)
expr_stmt|;
comment|//        filter.setAbsPath(TEST_PATH + "/a3/bar/foo/x");
name|filter
operator|=
name|FilterFactory
operator|.
name|wrap
argument_list|(
name|filter
argument_list|)
operator|.
name|withIncludeGlobPaths
argument_list|(
name|TEST_PATH
operator|+
literal|"/a3/**/x"
argument_list|)
expr_stmt|;
name|oManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|cp
operator|=
name|oManager
operator|.
name|getChangeProcessor
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cp
argument_list|)
expr_stmt|;
name|filterProvider
operator|=
name|cp
operator|.
name|getFilterProvider
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|filterProvider
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|filterProvider
operator|.
name|getSubTrees
argument_list|()
argument_list|,
name|TEST_PATH
operator|+
literal|"/a3"
argument_list|)
expr_stmt|;
name|Node
name|x
init|=
name|foo
operator|.
name|addNode
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|x
operator|.
name|getPath
argument_list|()
operator|+
literal|"/jcr:primaryType"
argument_list|,
name|PROPERTY_ADDED
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|missing
operator|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|unexpected
operator|=
name|listener
operator|.
name|getUnexpected
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|JackrabbitEventFilter
argument_list|()
expr_stmt|;
name|filter
operator|.
name|setEventTypes
argument_list|(
name|ALL_EVENTS
argument_list|)
expr_stmt|;
name|filter
operator|=
name|FilterFactory
operator|.
name|wrap
argument_list|(
name|filter
argument_list|)
operator|.
name|withIncludeGlobPaths
argument_list|(
name|TEST_PATH
operator|+
literal|"/a3/**/y/*"
argument_list|)
expr_stmt|;
name|oManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|cp
operator|=
name|oManager
operator|.
name|getChangeProcessor
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cp
argument_list|)
expr_stmt|;
name|filterProvider
operator|=
name|cp
operator|.
name|getFilterProvider
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|filterProvider
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|filterProvider
operator|.
name|getSubTrees
argument_list|()
argument_list|,
name|TEST_PATH
operator|+
literal|"/a3"
argument_list|)
expr_stmt|;
name|Node
name|y
init|=
name|foo
operator|.
name|addNode
argument_list|(
literal|"y"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|y
operator|.
name|getPath
argument_list|()
operator|+
literal|"/jcr:primaryType"
argument_list|,
name|PROPERTY_ADDED
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|missing
operator|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|unexpected
operator|=
name|listener
operator|.
name|getUnexpected
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConsecutiveGlobPaths
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|testNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Node
name|a1
init|=
name|testNode
operator|.
name|addNode
argument_list|(
literal|"a1"
argument_list|)
decl_stmt|;
name|a1
operator|.
name|addNode
argument_list|(
literal|"b1"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"c1"
argument_list|)
expr_stmt|;
name|a1
operator|.
name|addNode
argument_list|(
literal|"b2"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"c2"
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|addNode
argument_list|(
literal|"a2"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"b"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|ObservationManagerImpl
name|oManager
init|=
operator|(
name|ObservationManagerImpl
operator|)
name|observationManager
decl_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|JackrabbitEventFilter
name|filter
init|=
operator|new
name|JackrabbitEventFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|setEventTypes
argument_list|(
name|ALL_EVENTS
argument_list|)
expr_stmt|;
name|filter
operator|=
name|FilterFactory
operator|.
name|wrap
argument_list|(
name|filter
argument_list|)
operator|.
name|withIncludeGlobPaths
argument_list|(
name|TEST_PATH
operator|+
literal|"/a2/**"
argument_list|)
operator|.
name|withIncludeGlobPaths
argument_list|(
name|TEST_PATH
operator|+
literal|"/a1/**"
argument_list|)
expr_stmt|;
name|oManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|ChangeProcessor
name|cp
init|=
name|oManager
operator|.
name|getChangeProcessor
argument_list|(
name|listener
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cp
argument_list|)
expr_stmt|;
name|FilterProvider
name|filterProvider
init|=
name|cp
operator|.
name|getFilterProvider
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|filterProvider
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|filterProvider
operator|.
name|getSubTrees
argument_list|()
argument_list|,
name|TEST_PATH
operator|+
literal|"/a1"
argument_list|,
name|TEST_PATH
operator|+
literal|"/a2"
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectRemove
argument_list|(
name|testNode
operator|.
name|getNode
argument_list|(
literal|"a1"
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"b2"
argument_list|)
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|listener
operator|.
name|expectRemove
argument_list|(
name|testNode
operator|.
name|getNode
argument_list|(
literal|"a2"
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"b"
argument_list|)
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAggregate1
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
name|observationManager
operator|instanceof
name|ObservationManagerImpl
argument_list|)
expr_stmt|;
name|ObservationManagerImpl
name|oManager
init|=
operator|(
name|ObservationManagerImpl
operator|)
name|observationManager
decl_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|JackrabbitEventFilter
name|filter
init|=
operator|new
name|JackrabbitEventFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|setAbsPath
argument_list|(
literal|"/parent"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setIsDeep
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setEventTypes
argument_list|(
name|ALL_EVENTS
argument_list|)
expr_stmt|;
name|filter
operator|=
name|FilterFactory
operator|.
name|wrap
argument_list|(
name|filter
argument_list|)
operator|.
name|withNodeTypeAggregate
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"oak:Unstructured"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|"jcr:content"
block|,
literal|"jcr:content/**"
block|}
argument_list|)
expr_stmt|;
name|oManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|Node
name|parent
init|=
name|getAdminSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"parent"
argument_list|,
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
name|Node
name|child
init|=
name|parent
operator|.
name|addNode
argument_list|(
literal|"child"
argument_list|,
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
name|Node
name|file
init|=
name|child
operator|.
name|addNode
argument_list|(
literal|"file"
argument_list|,
literal|"oak:Unstructured"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|Node
name|jcrContent
init|=
name|file
operator|.
name|addNode
argument_list|(
literal|"jcr:content"
argument_list|,
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|jcrContent
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"/parent/child/file"
argument_list|,
name|NODE_ADDED
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|jcrContent
operator|.
name|getPath
argument_list|()
operator|+
literal|"/jcr:primaryType"
argument_list|,
literal|"/parent/child/file"
argument_list|,
name|PROPERTY_ADDED
argument_list|)
expr_stmt|;
name|Property
name|jcrDataProperty
init|=
name|jcrContent
operator|.
name|setProperty
argument_list|(
literal|"jcr:data"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|jcrDataProperty
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"/parent/child/file"
argument_list|,
name|PROPERTY_ADDED
argument_list|)
expr_stmt|;
name|parent
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|=
name|getAdminSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
operator|.
name|getNode
argument_list|(
literal|"parent"
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"child"
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|jcrContent
operator|=
name|file
operator|.
name|getNode
argument_list|(
literal|"jcr:content"
argument_list|)
expr_stmt|;
name|Property
name|newProperty
init|=
name|jcrContent
operator|.
name|setProperty
argument_list|(
literal|"newProperty"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|newProperty
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"/parent/child/file"
argument_list|,
name|PROPERTY_ADDED
argument_list|)
expr_stmt|;
name|Property
name|lastModifiedBy
init|=
name|jcrContent
operator|.
name|setProperty
argument_list|(
literal|"jcr:lastModifiedBy"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|lastModifiedBy
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"/parent/child/file"
argument_list|,
name|PROPERTY_ADDED
argument_list|)
expr_stmt|;
name|jcrContent
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|missing
operator|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|unexpected
operator|=
name|listener
operator|.
name|getUnexpected
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAggregate2
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
name|observationManager
operator|instanceof
name|ObservationManagerImpl
argument_list|)
expr_stmt|;
name|ObservationManagerImpl
name|oManager
init|=
operator|(
name|ObservationManagerImpl
operator|)
name|observationManager
decl_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|JackrabbitEventFilter
name|filter
init|=
operator|new
name|JackrabbitEventFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|setAbsPath
argument_list|(
literal|"/parent"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setIsDeep
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setEventTypes
argument_list|(
name|ALL_EVENTS
argument_list|)
expr_stmt|;
name|filter
operator|=
name|FilterFactory
operator|.
name|wrap
argument_list|(
name|filter
argument_list|)
operator|.
name|withNodeTypeAggregate
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"oak:Unstructured"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|"**"
block|}
argument_list|)
expr_stmt|;
comment|// "file", "file/jcr:content",
comment|// "file/jcr:content/**");
name|oManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|Node
name|parent
init|=
name|getAdminSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"parent"
argument_list|,
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
name|Node
name|child
init|=
name|parent
operator|.
name|addNode
argument_list|(
literal|"child"
argument_list|,
literal|"oak:Unstructured"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|Node
name|file
init|=
name|child
operator|.
name|addNode
argument_list|(
literal|"file"
argument_list|,
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|Node
name|jcrContent
init|=
name|file
operator|.
name|addNode
argument_list|(
literal|"jcr:content"
argument_list|,
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|jcrContent
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"/parent/child"
argument_list|,
name|NODE_ADDED
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|jcrContent
operator|.
name|getPath
argument_list|()
operator|+
literal|"/jcr:primaryType"
argument_list|,
literal|"/parent/child"
argument_list|,
name|PROPERTY_ADDED
argument_list|)
expr_stmt|;
name|Property
name|jcrDataProperty
init|=
name|jcrContent
operator|.
name|setProperty
argument_list|(
literal|"jcr:data"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|jcrDataProperty
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"/parent/child"
argument_list|,
name|PROPERTY_ADDED
argument_list|)
expr_stmt|;
name|parent
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|=
name|getAdminSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
operator|.
name|getNode
argument_list|(
literal|"parent"
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"child"
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|jcrContent
operator|=
name|file
operator|.
name|getNode
argument_list|(
literal|"jcr:content"
argument_list|)
expr_stmt|;
name|Property
name|newProperty
init|=
name|jcrContent
operator|.
name|setProperty
argument_list|(
literal|"newProperty"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|newProperty
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"/parent/child"
argument_list|,
name|PROPERTY_ADDED
argument_list|)
expr_stmt|;
name|Property
name|lastModifiedBy
init|=
name|jcrContent
operator|.
name|setProperty
argument_list|(
literal|"jcr:lastModifiedBy"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|lastModifiedBy
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"/parent/child"
argument_list|,
name|PROPERTY_ADDED
argument_list|)
expr_stmt|;
name|jcrContent
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|missing
operator|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|unexpected
operator|=
name|listener
operator|.
name|getUnexpected
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAggregate3
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
name|observationManager
operator|instanceof
name|ObservationManagerImpl
argument_list|)
expr_stmt|;
name|ObservationManagerImpl
name|oManager
init|=
operator|(
name|ObservationManagerImpl
operator|)
name|observationManager
decl_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|JackrabbitEventFilter
name|filter
init|=
operator|new
name|JackrabbitEventFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|setAbsPath
argument_list|(
literal|"/parent"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setIsDeep
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setEventTypes
argument_list|(
name|ALL_EVENTS
argument_list|)
expr_stmt|;
name|filter
operator|=
name|FilterFactory
operator|.
name|wrap
argument_list|(
name|filter
argument_list|)
operator|.
name|withNodeTypeAggregate
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"oak:Unstructured"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"**"
block|}
argument_list|)
expr_stmt|;
name|oManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|Node
name|parent
init|=
name|getAdminSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"parent"
argument_list|,
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
name|Node
name|child
init|=
name|parent
operator|.
name|addNode
argument_list|(
literal|"child"
argument_list|,
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
comment|//        listener.expectAdd(child);
name|Node
name|file
init|=
name|child
operator|.
name|addNode
argument_list|(
literal|"file"
argument_list|,
literal|"oak:Unstructured"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"/parent/child/file"
argument_list|,
name|NODE_ADDED
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
operator|+
literal|"/jcr:primaryType"
argument_list|,
literal|"/parent/child/file"
argument_list|,
name|PROPERTY_ADDED
argument_list|)
expr_stmt|;
name|Node
name|jcrContent
init|=
name|file
operator|.
name|addNode
argument_list|(
literal|"jcr:content"
argument_list|,
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|jcrContent
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"/parent/child/file"
argument_list|,
name|NODE_ADDED
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|jcrContent
operator|.
name|getPath
argument_list|()
operator|+
literal|"/jcr:primaryType"
argument_list|,
literal|"/parent/child/file"
argument_list|,
name|PROPERTY_ADDED
argument_list|)
expr_stmt|;
name|Property
name|jcrDataProperty
init|=
name|jcrContent
operator|.
name|setProperty
argument_list|(
literal|"jcr:data"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|jcrDataProperty
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"/parent/child/file"
argument_list|,
name|PROPERTY_ADDED
argument_list|)
expr_stmt|;
name|parent
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAggregate4
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
name|observationManager
operator|instanceof
name|ObservationManagerImpl
argument_list|)
expr_stmt|;
name|ObservationManagerImpl
name|oManager
init|=
operator|(
name|ObservationManagerImpl
operator|)
name|observationManager
decl_stmt|;
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|JackrabbitEventFilter
name|filter
init|=
operator|new
name|JackrabbitEventFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|setEventTypes
argument_list|(
name|ALL_EVENTS
argument_list|)
expr_stmt|;
name|filter
operator|=
name|FilterFactory
operator|.
name|wrap
argument_list|(
name|filter
argument_list|)
operator|.
name|withNodeTypeAggregate
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"oak:Unstructured"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"**/foo/**"
block|}
argument_list|)
operator|.
name|withIncludeGlobPaths
argument_list|(
literal|"/parent/**/bar/**"
argument_list|)
expr_stmt|;
name|oManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|ChangeProcessor
name|cp
init|=
name|oManager
operator|.
name|getChangeProcessor
argument_list|(
name|listener
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cp
argument_list|)
expr_stmt|;
name|FilterProvider
name|filterProvider
init|=
name|cp
operator|.
name|getFilterProvider
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|filterProvider
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|filterProvider
operator|.
name|getSubTrees
argument_list|()
argument_list|,
literal|"/parent"
argument_list|)
expr_stmt|;
name|Node
name|parent
init|=
name|getAdminSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"parent"
argument_list|,
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
name|Node
name|a
init|=
name|parent
operator|.
name|addNode
argument_list|(
literal|"a"
argument_list|,
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
name|Node
name|b
init|=
name|a
operator|.
name|addNode
argument_list|(
literal|"b"
argument_list|,
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
name|Node
name|bar
init|=
name|b
operator|.
name|addNode
argument_list|(
literal|"bar"
argument_list|,
literal|"oak:Unstructured"
argument_list|)
decl_stmt|;
name|Node
name|c
init|=
name|bar
operator|.
name|addNode
argument_list|(
literal|"c"
argument_list|,
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
name|Node
name|foo
init|=
name|c
operator|.
name|addNode
argument_list|(
literal|"foo"
argument_list|,
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expect
argument_list|(
name|foo
operator|.
name|getPath
argument_list|()
operator|+
literal|"/jcr:primaryType"
argument_list|,
name|bar
operator|.
name|getPath
argument_list|()
argument_list|,
name|PROPERTY_ADDED
argument_list|)
expr_stmt|;
name|Node
name|jcrContent
init|=
name|foo
operator|.
name|addNode
argument_list|(
literal|"jcr:content"
argument_list|,
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|jcrContent
argument_list|)
expr_stmt|;
name|parent
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Expectation
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
name|TIME_OUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertMatches
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|actuals
parameter_list|,
name|String
modifier|...
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|expected
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|actuals
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

