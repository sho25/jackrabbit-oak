begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Segment
operator|.
name|MAX_SEGMENT_SIZE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|WriterOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordNumbers
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|GCGeneration
import|;
end_import

begin_class
class|class
name|SegmentDump
block|{
specifier|private
specifier|static
name|int
name|getAddress
parameter_list|(
name|int
name|length
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
name|length
operator|-
operator|(
name|MAX_SEGMENT_SIZE
operator|-
name|offset
operator|)
return|;
block|}
specifier|static
name|String
name|dumpSegment
parameter_list|(
name|SegmentId
name|id
parameter_list|,
name|int
name|length
parameter_list|,
name|String
name|segmentInfo
parameter_list|,
name|GCGeneration
name|generation
parameter_list|,
name|SegmentReferences
name|segmentReferences
parameter_list|,
name|RecordNumbers
name|recordNumbers
parameter_list|,
name|Consumer
argument_list|<
name|OutputStream
argument_list|>
name|dumper
parameter_list|)
block|{
name|StringWriter
name|string
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
try|try
init|(
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|string
argument_list|)
init|)
block|{
name|writer
operator|.
name|format
argument_list|(
literal|"Segment %s (%d bytes)%n"
argument_list|,
name|id
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|segmentInfo
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|format
argument_list|(
literal|"Info: %s, Generation: %s%n"
argument_list|,
name|segmentInfo
argument_list|,
name|generation
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
name|id
operator|.
name|isDataSegmentId
argument_list|()
condition|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"--------------------------------------------------------------------------"
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
for|for
control|(
name|SegmentId
name|segmentId
range|:
name|segmentReferences
control|)
block|{
name|writer
operator|.
name|format
argument_list|(
literal|"reference %02x: %s%n"
argument_list|,
name|i
operator|++
argument_list|,
name|segmentId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
name|entry
range|:
name|recordNumbers
control|)
block|{
name|int
name|offset
init|=
name|entry
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|writer
operator|.
name|format
argument_list|(
literal|"%10s record %08x: %08x @ %08x%n"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|,
name|entry
operator|.
name|getRecordNumber
argument_list|()
argument_list|,
name|offset
argument_list|,
name|getAddress
argument_list|(
name|length
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|println
argument_list|(
literal|"--------------------------------------------------------------------------"
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|accept
argument_list|(
operator|new
name|WriterOutputStream
argument_list|(
name|writer
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"--------------------------------------------------------------------------"
argument_list|)
expr_stmt|;
block|}
return|return
name|string
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

