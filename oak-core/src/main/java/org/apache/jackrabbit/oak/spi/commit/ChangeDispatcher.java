begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * A {@code ChangeDispatcher} instance records changes to a  * {@link org.apache.jackrabbit.oak.spi.state.NodeStore}  * and dispatches them to interested parties.  *<p>  * Actual changes are reported by calling {@link #beforeCommit(NodeState)},  * {@link #localCommit(NodeState, CommitInfo)} and {@link #afterCommit(NodeState)} in that order:  *<pre>       NodeState root = store.getRoot();       branch.rebase();       changeDispatcher.beforeCommit(root);       try {           NodeState head = branch.getHead();           branch.merge();           changeDispatcher.localCommit(head);       } finally {           changeDispatcher.afterCommit(store.getRoot());       }  *</pre>  *<p>  * The {@link #addObserver(Observer)} method registers an {@link Observer} for receiving  * notifications about all changes reported to this instance.  */
end_comment

begin_class
specifier|public
class|class
name|ChangeDispatcher
implements|implements
name|Observable
block|{
specifier|private
specifier|final
name|CompositeObserver
name|observers
init|=
operator|new
name|CompositeObserver
argument_list|()
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
name|NodeState
name|root
decl_stmt|;
comment|/**      * Create a new instance for recording changes to a {@code NodeStore}      * @param root  current root node state of the node store      */
specifier|public
name|ChangeDispatcher
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|root
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|checkNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
comment|/**      * Register a new {@link Observer} for receiving notifications about changes reported to      * this change dispatcher. Changes are reported asynchronously. Clients need to      * call {@link java.io.Closeable#close()} close} on the returned {@code Closeable} instance      * to stop receiving notifications.      *      * @return  a {@link Closeable} instance      */
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Closeable
name|addObserver
parameter_list|(
name|Observer
name|observer
parameter_list|)
block|{
comment|// FIXME don't hard code queue size
specifier|final
name|BackgroundObserver
name|backgroundObserver
init|=
operator|new
name|BackgroundObserver
argument_list|(
name|observer
argument_list|,
literal|8192
argument_list|)
decl_stmt|;
name|backgroundObserver
operator|.
name|contentChanged
argument_list|(
name|root
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|observers
operator|.
name|addObserver
argument_list|(
name|backgroundObserver
argument_list|)
expr_stmt|;
return|return
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|backgroundObserver
operator|.
name|stop
argument_list|()
expr_stmt|;
name|observers
operator|.
name|removeObserver
argument_list|(
name|backgroundObserver
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|private
specifier|final
name|AtomicLong
name|changeCount
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|inLocalCommit
parameter_list|()
block|{
return|return
name|changeCount
operator|.
name|get
argument_list|()
operator|%
literal|2
operator|==
literal|1
return|;
block|}
comment|/**      * Call with the latest persisted root node state right before persisting further changes.      * Calling this method marks this instance to be inside a local commit.      *<p>      * The differences from the root node state passed to the last call to      * {@link #afterCommit(NodeState)} to {@code root} are reported as cluster external      * changes to any listener.      *      * @param root  latest persisted root node state.      * @throws IllegalStateException  if inside a local commit      */
specifier|public
specifier|synchronized
name|void
name|beforeCommit
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|root
parameter_list|)
block|{
name|checkState
argument_list|(
operator|!
name|inLocalCommit
argument_list|()
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|changeCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|observers
operator|.
name|contentChanged
argument_list|(
name|root
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
block|}
comment|/**      * Call right after changes have been successfully persisted passing      * the new root node state resulting from the persist operation.      *<p>      * The differences from the root node state passed to the last call to      * {@link #beforeCommit(NodeState)} to {@code root} are reported as      * cluster local changes to any listener in case non-{@code null}      * commit information is provided. If no local commit information is      * given, then no local changes are reported and the committed changes      * will only show up as an aggregate with any concurrent external changes      * reported during the {@link #afterCommit(NodeState)} call.      *      * @param root root node state just persisted      * @param info commit information      * @throws IllegalStateException  if not inside a local commit      */
specifier|public
specifier|synchronized
name|void
name|localCommit
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|root
parameter_list|,
annotation|@
name|Nonnull
name|CommitInfo
name|info
parameter_list|)
block|{
name|checkState
argument_list|(
name|inLocalCommit
argument_list|()
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|observers
operator|.
name|contentChanged
argument_list|(
name|root
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
block|}
comment|/**      * Call to mark the end of a persist operation passing the latest persisted root node state.      * Calling this method marks this instance to not be inside a local commit.      *<p>      * The difference from the root node state passed to the las call to      * {@link #localCommit(NodeState, CommitInfo)} to {@code root} are reported as cluster external      * changes to any listener.       * @param root  latest persisted root node state.      * @throws IllegalStateException  if not inside a local commit      */
specifier|public
specifier|synchronized
name|void
name|afterCommit
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|root
parameter_list|)
block|{
name|checkState
argument_list|(
name|inLocalCommit
argument_list|()
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|observers
operator|.
name|contentChanged
argument_list|(
name|root
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|changeCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

