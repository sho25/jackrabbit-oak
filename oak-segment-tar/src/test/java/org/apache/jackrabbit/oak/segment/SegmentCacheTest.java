begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentCache
operator|.
name|DEFAULT_SEGMENT_CACHE_MB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentCache
operator|.
name|newSegmentCache
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentStore
operator|.
name|EMPTY_STORE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|AbstractCacheStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|SegmentCacheTest
block|{
specifier|private
specifier|final
name|SegmentCache
name|cache
init|=
name|newSegmentCache
argument_list|(
name|DEFAULT_SEGMENT_CACHE_MB
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SegmentId
name|id1
init|=
operator|new
name|SegmentId
argument_list|(
name|EMPTY_STORE
argument_list|,
literal|0x0000000000000001L
argument_list|,
literal|0xa000000000000001L
argument_list|,
name|cache
operator|::
name|recordHit
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Segment
name|segment1
init|=
name|mock
argument_list|(
name|Segment
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SegmentId
name|id2
init|=
operator|new
name|SegmentId
argument_list|(
name|EMPTY_STORE
argument_list|,
literal|0x0000000000000002L
argument_list|,
literal|0xa000000000000002L
argument_list|,
name|cache
operator|::
name|recordHit
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Segment
name|segment2
init|=
name|mock
argument_list|(
name|Segment
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SegmentId
name|id3
init|=
operator|new
name|SegmentId
argument_list|(
name|EMPTY_STORE
argument_list|,
literal|0x0000000000000003L
argument_list|,
literal|0xa000000000000003L
argument_list|,
name|cache
operator|::
name|recordHit
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Segment
name|segment3
init|=
name|mock
argument_list|(
name|Segment
operator|.
name|class
argument_list|)
decl_stmt|;
block|{
name|when
argument_list|(
name|segment1
operator|.
name|getSegmentId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|segment1
operator|.
name|estimateMemoryUsage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|segment2
operator|.
name|getSegmentId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|segment2
operator|.
name|estimateMemoryUsage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|segment3
operator|.
name|getSegmentId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id3
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|segment3
operator|.
name|estimateMemoryUsage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DEFAULT_SEGMENT_CACHE_MB
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SegmentNotFoundException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|snfeFromUncachedSegment
parameter_list|()
block|{
name|id1
operator|.
name|getSegment
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|putTest
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|cache
operator|.
name|putSegment
argument_list|(
name|segment1
argument_list|)
expr_stmt|;
comment|// Segment should be memoised with its id
name|assertEquals
argument_list|(
name|segment1
argument_list|,
name|id1
operator|.
name|getSegment
argument_list|()
argument_list|)
expr_stmt|;
comment|// Segment should be cached with the segmentId and thus not trigger a call
comment|// to the (empty) node store.
name|assertEquals
argument_list|(
name|segment1
argument_list|,
name|cache
operator|.
name|getSegment
argument_list|(
name|id1
argument_list|,
parameter_list|()
lambda|->
name|failToLoad
argument_list|(
name|id1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|invalidateTests
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|cache
operator|.
name|putSegment
argument_list|(
name|segment1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|segment1
argument_list|,
name|id1
operator|.
name|getSegment
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|segment1
argument_list|,
name|cache
operator|.
name|getSegment
argument_list|(
name|id1
argument_list|,
parameter_list|()
lambda|->
name|failToLoad
argument_list|(
name|id1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Clearing the cache should cause an eviction call back for id
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Check eviction cleared memoisation
name|expect
argument_list|(
name|SegmentNotFoundException
operator|.
name|class
argument_list|,
name|id1
operator|::
name|getSegment
argument_list|)
expr_stmt|;
comment|// Check that segment1 was evicted and needs reloading through the node store
name|AtomicBoolean
name|cached
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|segment1
argument_list|,
name|cache
operator|.
name|getSegment
argument_list|(
name|id1
argument_list|,
parameter_list|()
lambda|->
block|{
name|cached
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|segment1
return|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cached
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert that segment1 was loaded again
name|assertEquals
argument_list|(
name|segment1
argument_list|,
name|id1
operator|.
name|getSegment
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|segment1
argument_list|,
name|cache
operator|.
name|getSegment
argument_list|(
name|id1
argument_list|,
parameter_list|()
lambda|->
name|failToLoad
argument_list|(
name|id1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|evictionDuringPut
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|cache
operator|.
name|putSegment
argument_list|(
name|segment3
argument_list|)
expr_stmt|;
comment|// Check eviction cleared memoisation
name|expect
argument_list|(
name|SegmentNotFoundException
operator|.
name|class
argument_list|,
name|id3
operator|::
name|getSegment
argument_list|)
expr_stmt|;
comment|// Check that segment3 was evicted inside put because of its size and needs
comment|// reloading through the node store
name|AtomicBoolean
name|cached
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|segment3
argument_list|,
name|cache
operator|.
name|getSegment
argument_list|(
name|id3
argument_list|,
parameter_list|()
lambda|->
block|{
name|cached
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|segment3
return|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cached
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|evictionDuringLoad
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|cache
operator|.
name|getSegment
argument_list|(
name|id3
argument_list|,
parameter_list|()
lambda|->
name|segment3
argument_list|)
expr_stmt|;
comment|// Check eviction cleared memoisation
name|expect
argument_list|(
name|SegmentNotFoundException
operator|.
name|class
argument_list|,
name|id3
operator|::
name|getSegment
argument_list|)
expr_stmt|;
comment|// Check that segment3 was evicted inside put because of its size and needs
comment|// reloading through the node store
name|AtomicBoolean
name|cached
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|segment3
argument_list|,
name|cache
operator|.
name|getSegment
argument_list|(
name|id3
argument_list|,
parameter_list|()
lambda|->
block|{
name|cached
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|segment3
return|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cached
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nonEmptyCacheStatsTest
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractCacheStats
name|stats
init|=
name|cache
operator|.
name|getCacheStats
argument_list|()
decl_stmt|;
comment|// empty cache
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getElementCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|estimateCurrentWeight
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// load
name|cache
operator|.
name|getSegment
argument_list|(
name|id1
argument_list|,
parameter_list|()
lambda|->
name|segment1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getElementCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|33
argument_list|,
name|stats
operator|.
name|estimateCurrentWeight
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// cache hit
name|assertEquals
argument_list|(
name|segment1
argument_list|,
name|id1
operator|.
name|getSegment
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getElementCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|33
argument_list|,
name|stats
operator|.
name|estimateCurrentWeight
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getElementCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|estimateCurrentWeight
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|resetStats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getElementCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|estimateCurrentWeight
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Eviction during put
name|cache
operator|.
name|getSegment
argument_list|(
name|id3
argument_list|,
parameter_list|()
lambda|->
name|segment3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getElementCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|estimateCurrentWeight
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|emptyCacheStatsTest
parameter_list|()
throws|throws
name|Exception
block|{
name|SegmentCache
name|cache
init|=
name|newSegmentCache
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AbstractCacheStats
name|stats
init|=
name|cache
operator|.
name|getCacheStats
argument_list|()
decl_stmt|;
comment|// empty cache
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getElementCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|estimateCurrentWeight
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// load
name|cache
operator|.
name|getSegment
argument_list|(
name|id1
argument_list|,
parameter_list|()
lambda|->
name|segment1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getElementCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|estimateCurrentWeight
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// No cache hit
try|try
block|{
name|id1
operator|.
name|getSegment
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|id1
operator|+
literal|" should not be in the cache"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SegmentNotFoundException
name|expected
parameter_list|)
block|{}
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getElementCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|estimateCurrentWeight
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|resetStats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getElementCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|estimateCurrentWeight
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|expect
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|exceptionType
parameter_list|,
name|Callable
argument_list|<
name|?
argument_list|>
name|thunk
parameter_list|)
block|{
try|try
block|{
name|thunk
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|exceptionType
operator|.
name|isAssignableFrom
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unexpected exception: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|". "
operator|+
literal|"Expected: "
operator|+
name|exceptionType
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
return|return;
block|}
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Expected exception "
operator|+
name|exceptionType
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" not thrown"
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|Segment
name|failToLoad
parameter_list|(
name|SegmentId
name|id
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Cache should not need to load "
operator|+
name|id
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

