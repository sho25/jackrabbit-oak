begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|content
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteBinaryFilters
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_class
class|class
name|ContentRemoteInputStream
extends|extends
name|InputStream
block|{
specifier|private
specifier|final
name|InputStream
name|stream
decl_stmt|;
specifier|private
specifier|final
name|long
name|start
decl_stmt|;
specifier|private
specifier|final
name|long
name|count
decl_stmt|;
specifier|private
name|long
name|index
init|=
literal|0
decl_stmt|;
specifier|public
name|ContentRemoteInputStream
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|RemoteBinaryFilters
name|filters
parameter_list|)
block|{
name|this
operator|.
name|stream
operator|=
name|stream
expr_stmt|;
name|long
name|startFilter
init|=
name|filters
operator|.
name|getStart
argument_list|()
decl_stmt|;
if|if
condition|(
name|startFilter
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|start
operator|=
name|startFilter
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|start
operator|=
literal|0
expr_stmt|;
block|}
name|this
operator|.
name|count
operator|=
name|filters
operator|.
name|getCount
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
name|index
operator|<
name|start
operator|-
literal|1
condition|)
block|{
name|long
name|skipped
init|=
name|stream
operator|.
name|skip
argument_list|(
name|start
operator|-
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|skipped
operator|<=
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|index
operator|=
name|index
operator|+
name|skipped
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|>=
literal|0
operator|&&
name|index
operator|>=
name|start
operator|+
name|count
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|result
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|index
operator|=
name|index
operator|+
literal|1
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

