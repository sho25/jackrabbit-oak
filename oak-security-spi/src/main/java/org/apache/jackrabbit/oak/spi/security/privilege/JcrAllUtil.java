begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|JcrAllUtil
block|{
specifier|private
name|JcrAllUtil
parameter_list|()
block|{}
specifier|public
specifier|static
specifier|final
name|long
name|DYNAMIC_JCR_ALL_VALUE
init|=
operator|-
literal|1
decl_stmt|;
comment|/**      * Get or create an instance of privilege bits for the given property state. In contrast to      * {@link PrivilegeBits#getInstance(PropertyState)} this implementation will respect the special marker used to      * reflect the dynamic nature of the {@link PrivilegeConstants#JCR_ALL} privilege.      *      * @param propertyState A property storing privilege bits as {@link Type#LONGS} representation or the      *                      dynamic {@link #DYNAMIC_JCR_ALL_VALUE marker} for {@code jcr:all}.      * @param provider An instanceof {@link PrivilegeBitsProvider} to compute the bits for the {@link PrivilegeConstants#JCR_ALL}, when      *                 the given property contains the dynamic {@link #DYNAMIC_JCR_ALL_VALUE marker} for {@code jcr:all}.      * @return an instance of {@code PrivilegeBits}      * @see #asPropertyState(String, PrivilegeBits, PrivilegeBitsProvider)      */
specifier|public
specifier|static
name|PrivilegeBits
name|getPrivilegeBits
parameter_list|(
annotation|@
name|Nullable
name|PropertyState
name|propertyState
parameter_list|,
annotation|@
name|NotNull
name|PrivilegeBitsProvider
name|provider
parameter_list|)
block|{
return|return
operator|(
name|denotesDynamicJcrAll
argument_list|(
name|propertyState
argument_list|)
operator|)
condition|?
name|getAllBits
argument_list|(
name|provider
argument_list|)
else|:
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|propertyState
argument_list|)
return|;
block|}
comment|/**      * Returns a new multi-valued {@link PropertyState} of type {@link Type#LONGS} with the given {@code name} and the      * long representation of the given {@code bits} as values. If the bits present include {@code jcr:all} the value      * will be {@link #DYNAMIC_JCR_ALL_VALUE} instead to mark the dynamic nature of the {@code jcr:all} privilege.      * For any other bits this method is equivalent to {@link PrivilegeBits#asPropertyState(String)}.      *      * @param name The name of the property to be created.      * @param bits The privilege bits from which the values will be retrieved.      * @param provider The {@link PrivilegeBitsProvider} needed to check if the given bits include {@code jcr:all}.      * @return The property state equivalent to {@link PrivilegeBits#asPropertyState(String)} or a state with the      * {@link #DYNAMIC_JCR_ALL_VALUE dynamic value marker} in case the given bits represent {@code jcr:all}.      */
specifier|public
specifier|static
name|PropertyState
name|asPropertyState
parameter_list|(
annotation|@
name|NotNull
name|String
name|name
parameter_list|,
annotation|@
name|NotNull
name|PrivilegeBits
name|bits
parameter_list|,
annotation|@
name|NotNull
name|PrivilegeBitsProvider
name|provider
parameter_list|)
block|{
if|if
condition|(
operator|!
name|bits
operator|.
name|isBuiltin
argument_list|()
operator|&&
name|bits
operator|.
name|includes
argument_list|(
name|getAllBits
argument_list|(
name|provider
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|DYNAMIC_JCR_ALL_VALUE
argument_list|)
argument_list|,
name|Type
operator|.
name|LONGS
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|bits
operator|.
name|asPropertyState
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|denotesDynamicJcrAll
parameter_list|(
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|)
block|{
return|return
name|property
operator|!=
literal|null
operator|&&
name|Type
operator|.
name|LONGS
operator|==
name|property
operator|.
name|getType
argument_list|()
operator|&&
name|property
operator|.
name|count
argument_list|()
operator|==
literal|1
operator|&&
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|0
argument_list|)
operator|==
name|DYNAMIC_JCR_ALL_VALUE
return|;
block|}
specifier|private
specifier|static
name|PrivilegeBits
name|getAllBits
parameter_list|(
annotation|@
name|NotNull
name|PrivilegeBitsProvider
name|provider
parameter_list|)
block|{
return|return
name|provider
operator|.
name|getBits
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

