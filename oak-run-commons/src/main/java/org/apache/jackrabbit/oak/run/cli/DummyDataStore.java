begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|AbstractDataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|AbstractDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|OakFileDataStore
import|;
end_import

begin_comment
comment|/**  * DataStore implementation which creates empty files matching given identifier.  *  * This can be use to try migration of repositories where DataStore size is large  * and cannot be accessed as transferring them would take quite a bit of time. As migration  * does not involve accessing the actual binary content and only binary identifiers are  * transferred it should enable us to get past the migration phase  */
end_comment

begin_class
specifier|public
class|class
name|DummyDataStore
extends|extends
name|OakFileDataStore
block|{
specifier|public
name|DummyDataStore
parameter_list|()
block|{
comment|//Set min size to match the one in ClusterDataStore
name|setMinRecordLength
argument_list|(
literal|4096
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DataRecord
name|getRecordIfStored
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|DataRecord
name|dr
init|=
name|super
operator|.
name|getRecordIfStored
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|dr
operator|==
literal|null
condition|)
block|{
name|dr
operator|=
operator|new
name|DummyDataRecord
argument_list|(
name|this
argument_list|,
name|identifier
argument_list|)
expr_stmt|;
block|}
return|return
name|dr
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|DummyDataRecord
extends|extends
name|AbstractDataRecord
block|{
specifier|private
name|DummyDataRecord
parameter_list|(
name|AbstractDataStore
name|store
parameter_list|,
name|DataIdentifier
name|identifier
parameter_list|)
block|{
name|super
argument_list|(
name|store
argument_list|,
name|identifier
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getLength
parameter_list|()
throws|throws
name|DataStoreException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|InputStream
name|getStream
parameter_list|()
throws|throws
name|DataStoreException
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|public
name|long
name|getLastModified
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

