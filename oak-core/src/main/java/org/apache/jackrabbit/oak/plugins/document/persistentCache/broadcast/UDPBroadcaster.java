begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
operator|.
name|broadcast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|DatagramPacket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MulticastSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|CipherInputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|CipherOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|KeyGenerator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|IvParameterSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A broadcast mechanism that uses UDP. It is mainly used for testing.  */
end_comment

begin_class
specifier|public
class|class
name|UDPBroadcaster
implements|implements
name|Broadcaster
implements|,
name|Runnable
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UDPBroadcaster
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|key
decl_stmt|;
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|Listener
argument_list|>
name|listeners
init|=
operator|new
name|ArrayList
argument_list|<
name|Listener
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|MulticastSocket
name|socket
decl_stmt|;
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
specifier|private
specifier|final
name|InetAddress
name|group
decl_stmt|;
specifier|private
specifier|final
name|InetAddress
name|sendTo
decl_stmt|;
specifier|private
specifier|final
name|Thread
name|thread
decl_stmt|;
specifier|private
specifier|final
name|int
name|messageLength
init|=
literal|32
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|final
name|Cipher
name|encryptCipher
decl_stmt|;
specifier|private
specifier|final
name|Cipher
name|decryptCipher
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|stop
decl_stmt|;
specifier|public
name|UDPBroadcaster
parameter_list|(
name|String
name|config
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"init "
operator|+
name|config
argument_list|)
expr_stmt|;
name|MessageDigest
name|messageDigest
decl_stmt|;
try|try
block|{
name|String
index|[]
name|parts
init|=
name|config
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
name|String
name|group
init|=
literal|"FF78:230::1234"
decl_stmt|;
name|int
name|port
init|=
literal|9876
decl_stmt|;
name|String
name|key
init|=
literal|""
decl_stmt|;
name|boolean
name|aes
init|=
literal|false
decl_stmt|;
name|String
name|sendTo
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|parts
control|)
block|{
if|if
condition|(
name|p
operator|.
name|startsWith
argument_list|(
literal|"port "
argument_list|)
condition|)
block|{
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|p
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|startsWith
argument_list|(
literal|"group "
argument_list|)
condition|)
block|{
name|group
operator|=
name|p
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|startsWith
argument_list|(
literal|"key "
argument_list|)
condition|)
block|{
name|key
operator|=
name|p
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
literal|"aes"
argument_list|)
condition|)
block|{
name|aes
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|startsWith
argument_list|(
literal|"sendTo "
argument_list|)
condition|)
block|{
name|sendTo
operator|=
name|p
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
index|[
literal|1
index|]
expr_stmt|;
block|}
block|}
name|messageDigest
operator|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA-256"
argument_list|)
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|messageDigest
operator|.
name|digest
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|aes
condition|)
block|{
name|KeyGenerator
name|kgen
init|=
name|KeyGenerator
operator|.
name|getInstance
argument_list|(
literal|"AES"
argument_list|)
decl_stmt|;
name|kgen
operator|.
name|init
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|SecretKey
name|aesKey
init|=
name|kgen
operator|.
name|generateKey
argument_list|()
decl_stmt|;
name|encryptCipher
operator|=
name|Cipher
operator|.
name|getInstance
argument_list|(
literal|"AES/CBC/PKCS5Padding"
argument_list|)
expr_stmt|;
name|encryptCipher
operator|.
name|init
argument_list|(
name|Cipher
operator|.
name|ENCRYPT_MODE
argument_list|,
name|aesKey
argument_list|)
expr_stmt|;
name|decryptCipher
operator|=
name|Cipher
operator|.
name|getInstance
argument_list|(
literal|"AES/CBC/PKCS5Padding"
argument_list|)
expr_stmt|;
name|IvParameterSpec
name|ivParameterSpec
init|=
operator|new
name|IvParameterSpec
argument_list|(
name|aesKey
operator|.
name|getEncoded
argument_list|()
argument_list|)
decl_stmt|;
name|decryptCipher
operator|.
name|init
argument_list|(
name|Cipher
operator|.
name|DECRYPT_MODE
argument_list|,
name|aesKey
argument_list|,
name|ivParameterSpec
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|encryptCipher
operator|=
literal|null
expr_stmt|;
name|decryptCipher
operator|=
literal|null
expr_stmt|;
block|}
name|socket
operator|=
operator|new
name|MulticastSocket
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|this
operator|.
name|group
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|this
operator|.
name|sendTo
operator|=
name|sendTo
operator|==
literal|null
condition|?
name|this
operator|.
name|group
else|:
name|InetAddress
operator|.
name|getByName
argument_list|(
name|sendTo
argument_list|)
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|thread
operator|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|,
literal|"Oak UDPBroadcaster listener"
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|byte
index|[]
name|receiveData
init|=
operator|new
name|byte
index|[
name|messageLength
index|]
decl_stmt|;
try|try
block|{
name|socket
operator|.
name|joinGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|stop
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"join group failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|stop
operator|=
literal|true
expr_stmt|;
return|return;
block|}
while|while
condition|(
operator|!
name|stop
condition|)
block|{
try|try
block|{
name|DatagramPacket
name|receivePacket
init|=
operator|new
name|DatagramPacket
argument_list|(
name|receiveData
argument_list|,
name|receiveData
operator|.
name|length
argument_list|)
decl_stmt|;
name|socket
operator|.
name|receive
argument_list|(
name|receivePacket
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|receivePacket
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|<
name|key
operator|.
name|length
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"too short"
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|checkKey
argument_list|(
name|receiveData
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"key mismatch"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|ByteBuffer
name|buff
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|receiveData
argument_list|)
decl_stmt|;
name|buff
operator|.
name|limit
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|key
operator|.
name|length
decl_stmt|;
for|for
control|(
name|Listener
name|l
range|:
name|listeners
control|)
block|{
name|buff
operator|.
name|position
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|l
operator|.
name|receive
argument_list|(
name|buff
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|stop
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"receive failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// ignore
block|}
block|}
try|try
block|{
name|socket
operator|.
name|leaveGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|stop
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"leave group failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|checkKey
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|key
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|key
index|[
name|i
index|]
operator|!=
name|data
index|[
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|send
parameter_list|(
name|ByteBuffer
name|buff
parameter_list|)
block|{
name|int
name|len
init|=
name|key
operator|.
name|length
operator|+
name|buff
operator|.
name|limit
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|>=
name|messageLength
condition|)
block|{
comment|// message too long: ignore
return|return;
block|}
try|try
block|{
name|byte
index|[]
name|sendData
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|sendData
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|length
argument_list|)
expr_stmt|;
name|buff
operator|.
name|get
argument_list|(
name|sendData
argument_list|,
name|key
operator|.
name|length
argument_list|,
name|buff
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|DatagramPacket
name|sendPacket
init|=
operator|new
name|DatagramPacket
argument_list|(
name|sendData
argument_list|,
name|sendData
operator|.
name|length
argument_list|,
name|sendTo
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|socket
operator|.
name|send
argument_list|(
name|sendPacket
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|stop
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"send failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// ignore
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addListener
parameter_list|(
name|Listener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeListener
parameter_list|(
name|Listener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|encrypt
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
if|if
condition|(
name|encryptCipher
operator|==
literal|null
condition|)
block|{
return|return
name|data
return|;
block|}
try|try
block|{
name|ByteArrayOutputStream
name|outputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|CipherOutputStream
name|cipherOutputStream
init|=
operator|new
name|CipherOutputStream
argument_list|(
name|outputStream
argument_list|,
name|encryptCipher
argument_list|)
decl_stmt|;
name|cipherOutputStream
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cipherOutputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|cipherOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|byte
index|[]
name|encryptedBytes
init|=
name|outputStream
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
return|return
name|encryptedBytes
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"encrypt failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|byte
index|[]
name|decrypt
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
if|if
condition|(
name|decryptCipher
operator|==
literal|null
condition|)
block|{
return|return
name|data
return|;
block|}
try|try
block|{
name|ByteArrayOutputStream
name|outputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|inStream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|CipherInputStream
name|cipherInputStream
init|=
operator|new
name|CipherInputStream
argument_list|(
name|inStream
argument_list|,
name|decryptCipher
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|bytesRead
decl_stmt|;
while|while
condition|(
operator|(
name|bytesRead
operator|=
name|cipherInputStream
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
block|}
return|return
name|outputStream
operator|.
name|toByteArray
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"decrypt failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
operator|!
name|stop
condition|)
block|{
name|this
operator|.
name|stop
operator|=
literal|true
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
operator|!
name|stop
return|;
block|}
block|}
end_class

end_unit

