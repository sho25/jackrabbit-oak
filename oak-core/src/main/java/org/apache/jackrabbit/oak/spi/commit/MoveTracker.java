begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Utility to keep track of the move operations that are performed between two  * calls to {@link org.apache.jackrabbit.oak.api.Root#commit}.  */
end_comment

begin_class
specifier|public
class|class
name|MoveTracker
block|{
specifier|private
name|List
argument_list|<
name|MoveEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|MoveEntry
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|parentSourcePaths
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|parentDestPaths
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Create a new {@code MoveTracker}      */
specifier|public
name|MoveTracker
parameter_list|()
block|{     }
specifier|public
name|void
name|addMove
parameter_list|(
annotation|@
name|Nonnull
name|String
name|sourcePath
parameter_list|,
annotation|@
name|Nonnull
name|String
name|destPath
parameter_list|)
block|{
comment|// calculate original source path
name|String
name|originalSource
init|=
name|sourcePath
decl_stmt|;
for|for
control|(
name|MoveEntry
name|me
range|:
name|Lists
operator|.
name|reverse
argument_list|(
name|entries
argument_list|)
control|)
block|{
if|if
condition|(
name|Text
operator|.
name|isDescendantOrEqual
argument_list|(
name|me
operator|.
name|destPath
argument_list|,
name|sourcePath
argument_list|)
condition|)
block|{
name|String
name|relPath
init|=
name|PathUtils
operator|.
name|relativize
argument_list|(
name|me
operator|.
name|destPath
argument_list|,
name|sourcePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|relPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|originalSource
operator|=
name|me
operator|.
name|sourcePath
operator|+
literal|'/'
operator|+
name|relPath
expr_stmt|;
block|}
else|else
block|{
name|originalSource
operator|=
name|me
operator|.
name|sourcePath
expr_stmt|;
block|}
break|break;
block|}
block|}
name|entries
operator|.
name|add
argument_list|(
operator|new
name|MoveEntry
argument_list|(
name|originalSource
argument_list|,
name|destPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|entries
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|CheckForNull
specifier|public
name|String
name|getSourcePath
parameter_list|(
name|String
name|destPath
parameter_list|)
block|{
for|for
control|(
name|MoveEntry
name|me
range|:
name|Lists
operator|.
name|reverse
argument_list|(
name|entries
argument_list|)
control|)
block|{
if|if
condition|(
name|me
operator|.
name|destPath
operator|.
name|equals
argument_list|(
name|destPath
argument_list|)
condition|)
block|{
return|return
name|me
operator|.
name|sourcePath
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|CheckForNull
specifier|public
name|String
name|getDestPath
parameter_list|(
name|String
name|sourcePath
parameter_list|)
block|{
for|for
control|(
name|MoveEntry
name|me
range|:
name|Lists
operator|.
name|reverse
argument_list|(
name|entries
argument_list|)
control|)
block|{
if|if
condition|(
name|me
operator|.
name|sourcePath
operator|.
name|equals
argument_list|(
name|sourcePath
argument_list|)
condition|)
block|{
return|return
name|me
operator|.
name|destPath
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|containsMove
parameter_list|(
annotation|@
name|CheckForNull
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|p
range|:
name|Iterables
operator|.
name|concat
argument_list|(
name|parentSourcePaths
argument_list|,
name|parentDestPaths
argument_list|)
control|)
block|{
if|if
condition|(
name|Text
operator|.
name|isDescendantOrEqual
argument_list|(
name|path
argument_list|,
name|p
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|entries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|parentSourcePaths
operator|.
name|clear
argument_list|()
expr_stmt|;
name|parentDestPaths
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|final
class|class
name|MoveEntry
block|{
specifier|private
specifier|final
name|String
name|sourcePath
decl_stmt|;
specifier|private
name|String
name|destPath
decl_stmt|;
specifier|private
name|MoveEntry
parameter_list|(
annotation|@
name|Nonnull
name|String
name|sourcePath
parameter_list|,
annotation|@
name|Nonnull
name|String
name|destPath
parameter_list|)
block|{
name|this
operator|.
name|sourcePath
operator|=
name|sourcePath
expr_stmt|;
name|this
operator|.
name|destPath
operator|=
name|destPath
expr_stmt|;
name|parentSourcePaths
operator|.
name|add
argument_list|(
name|Text
operator|.
name|getRelativeParent
argument_list|(
name|sourcePath
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|parentDestPaths
operator|.
name|add
argument_list|(
name|Text
operator|.
name|getRelativeParent
argument_list|(
name|destPath
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

