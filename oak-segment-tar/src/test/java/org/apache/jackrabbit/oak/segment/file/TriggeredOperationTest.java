begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TriggeredOperationTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|trigger
parameter_list|()
block|{
specifier|final
name|CountDownLatch
name|triggered
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Define a triggered operation.
specifier|final
name|TriggeredOperation
name|operation
init|=
operator|new
name|TriggeredOperation
argument_list|(
literal|"test"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|triggered
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Trigger an execution of the operation.
name|operation
operator|.
name|trigger
argument_list|()
expr_stmt|;
comment|// Wait until the operation is actually executed.
try|try
block|{
name|triggered
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"operation not triggered"
argument_list|)
expr_stmt|;
block|}
comment|// Stop the background operation. This shouldn't time out.
try|try
block|{
name|assertTrue
argument_list|(
name|operation
operator|.
name|stop
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"unable to stop the operation"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|stopTimeOut
parameter_list|()
block|{
specifier|final
name|CountDownLatch
name|triggered
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|terminate
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Define a triggered operation.
name|TriggeredOperation
name|operation
init|=
operator|new
name|TriggeredOperation
argument_list|(
literal|"test"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|triggered
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|terminate
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Trigger an execution of the operation.
name|operation
operator|.
name|trigger
argument_list|()
expr_stmt|;
comment|// Wait for the execution of the operation.
try|try
block|{
name|triggered
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"operation not triggered"
argument_list|)
expr_stmt|;
block|}
comment|// At this point, the operation started its execution and is waiting for
comment|// this thread to send a signal. If we try to stop the operation, we
comment|// will receive a timeout.
try|try
block|{
name|assertFalse
argument_list|(
name|operation
operator|.
name|stop
argument_list|(
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"unable to stop the operation"
argument_list|)
expr_stmt|;
block|}
comment|// Signal the operation to terminate so the background thread can be
comment|// killed.
name|terminate
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|overlappingTrigger
parameter_list|()
block|{
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|triggered
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|terminate
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Define a triggered operation.
name|TriggeredOperation
name|operation
init|=
operator|new
name|TriggeredOperation
argument_list|(
literal|"test"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|triggered
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
try|try
block|{
name|terminate
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Trigger the first execution of the operation.
name|operation
operator|.
name|trigger
argument_list|()
expr_stmt|;
comment|// Wait for the operation to start.
try|try
block|{
name|triggered
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"operation not triggered"
argument_list|)
expr_stmt|;
block|}
comment|// At this point the operation is running, waiting for this thread to
comment|// send a termination signal. Triggering the operation will not execute
comment|// a new instance of the operation.
name|operation
operator|.
name|trigger
argument_list|()
expr_stmt|;
comment|// Send a signal to the operation to terminate its execution.
name|terminate
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// Stop the operation. This shouldn't time out.
try|try
block|{
name|assertTrue
argument_list|(
name|operation
operator|.
name|stop
argument_list|(
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"unable to stop the operation"
argument_list|)
expr_stmt|;
block|}
comment|// Check that the operation was only executed once.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

