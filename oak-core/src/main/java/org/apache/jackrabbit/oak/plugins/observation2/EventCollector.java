begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SYSTEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|LISTENERS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|LISTENER_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|REP_OBSERVATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|USER_DATA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|USER_ID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|EventIteratorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * TODO document  * FIXME this implementation needs read/write access to /jcr:system/rep:observation  */
end_comment

begin_class
class|class
name|EventCollector
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EventCollector
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ObservationManagerImpl2
name|observationManager
decl_stmt|;
specifier|private
specifier|final
name|EventQueueReader
name|eventQueueReader
decl_stmt|;
specifier|private
specifier|final
name|EventListener
name|listener
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|running
decl_stmt|;
specifier|private
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|future
decl_stmt|;
specifier|private
name|String
name|id
decl_stmt|;
specifier|public
name|EventCollector
parameter_list|(
name|ObservationManagerImpl2
name|observationManager
parameter_list|,
name|EventListener
name|listener
parameter_list|,
name|EventFilter
name|filter
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|this
operator|.
name|observationManager
operator|=
name|observationManager
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|eventQueueReader
operator|=
operator|new
name|EventQueueReader
argument_list|(
name|observationManager
operator|.
name|getContentSession
argument_list|()
operator|.
name|getLatestRoot
argument_list|()
argument_list|,
name|observationManager
operator|.
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
name|setFilterSpec
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateFilter
parameter_list|(
name|EventFilter
name|filter
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|updateFilterSpec
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setUserData
parameter_list|(
name|String
name|userData
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Root
name|root
init|=
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|listenerSpec
init|=
name|getOrCreateListenerSpec
argument_list|(
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|userData
operator|==
literal|null
condition|)
block|{
name|listenerSpec
operator|.
name|removeProperty
argument_list|(
name|USER_DATA
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listenerSpec
operator|.
name|setProperty
argument_list|(
name|USER_DATA
argument_list|,
name|userData
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
comment|/**      * Stop this change processor if running. After returning from this methods no further      * events will be delivered.      * @throws IllegalStateException if not yet started or stopped already      */
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|future
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Change processor not started"
argument_list|)
throw|;
block|}
try|try
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
while|while
condition|(
name|running
condition|)
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|future
operator|=
literal|null
expr_stmt|;
name|clearFilterSpec
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Start the change processor on the passed {@code executor}.      * @param executor      * @throws IllegalStateException if started already      */
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|(
name|ScheduledExecutorService
name|executor
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|future
operator|==
literal|null
argument_list|,
literal|"Change processor started already"
argument_list|)
expr_stmt|;
name|future
operator|=
name|executor
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|this
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|running
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|Iterator
argument_list|<
name|Event
argument_list|>
name|bundle
init|=
name|eventQueueReader
operator|.
name|getEventBundle
argument_list|(
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|// FIXME filter by session specific access restrictions
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
name|observationManager
operator|.
name|setHasEvents
argument_list|()
expr_stmt|;
name|listener
operator|.
name|onEvent
argument_list|(
operator|new
name|EventIteratorAdapter
argument_list|(
name|bundle
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to generate or send events"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|running
operator|=
literal|false
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
name|String
name|getId
parameter_list|()
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|id
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
specifier|private
specifier|static
name|Tree
name|getOrCreate
parameter_list|(
name|Tree
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Tree
name|child
init|=
name|parent
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
name|child
operator|=
name|parent
operator|.
name|addChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|child
return|;
block|}
specifier|private
name|Tree
name|getOrCreateListenerSpec
parameter_list|(
name|Root
name|root
parameter_list|)
block|{
return|return
name|getOrCreate
argument_list|(
name|getOrCreate
argument_list|(
name|getOrCreate
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|'/'
operator|+
name|JCR_SYSTEM
argument_list|)
argument_list|,
name|REP_OBSERVATION
argument_list|)
argument_list|,
name|LISTENERS
argument_list|)
argument_list|,
name|getId
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Root
name|getLatestRoot
parameter_list|()
block|{
return|return
name|observationManager
operator|.
name|getContentSession
argument_list|()
operator|.
name|getLatestRoot
argument_list|()
return|;
block|}
specifier|private
name|void
name|setFilterSpec
parameter_list|(
name|EventFilter
name|filter
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Root
name|root
init|=
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|listenerSpec
init|=
name|getOrCreateListenerSpec
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|String
name|userId
init|=
name|observationManager
operator|.
name|getContentSession
argument_list|()
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
decl_stmt|;
name|listenerSpec
operator|.
name|setProperty
argument_list|(
name|USER_ID
argument_list|,
name|userId
argument_list|)
expr_stmt|;
name|filter
operator|.
name|persist
argument_list|(
name|listenerSpec
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|updateFilterSpec
parameter_list|(
name|EventFilter
name|filter
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Root
name|root
init|=
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|listenerSpec
init|=
name|getOrCreateListenerSpec
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|filter
operator|.
name|persist
argument_list|(
name|listenerSpec
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|clearFilterSpec
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|Root
name|root
init|=
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|listenerSpec
init|=
name|root
operator|.
name|getTree
argument_list|(
name|LISTENER_PATH
operator|+
literal|'/'
operator|+
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|listenerSpec
operator|!=
literal|null
condition|)
block|{
name|listenerSpec
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

