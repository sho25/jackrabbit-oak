begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Some string utility methods.  */
end_comment

begin_class
specifier|public
class|class
name|StringUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StringUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|HEX
init|=
literal|"0123456789abcdef"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
comment|/**      * Convert a byte array to a hex encoded string.      *      * @param value the byte array      * @return the hex encoded string      */
specifier|public
specifier|static
name|String
name|convertBytesToHex
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
block|{
name|int
name|len
init|=
name|value
operator|.
name|length
decl_stmt|;
name|char
index|[]
name|buff
init|=
operator|new
name|char
index|[
name|len
operator|+
name|len
index|]
decl_stmt|;
name|char
index|[]
name|hex
init|=
name|HEX
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|int
name|c
init|=
name|value
index|[
name|i
index|]
operator|&
literal|0xff
decl_stmt|;
name|buff
index|[
name|i
operator|+
name|i
index|]
operator|=
name|hex
index|[
name|c
operator|>>
literal|4
index|]
expr_stmt|;
name|buff
index|[
name|i
operator|+
name|i
operator|+
literal|1
index|]
operator|=
name|hex
index|[
name|c
operator|&
literal|0xf
index|]
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|buff
argument_list|)
return|;
block|}
comment|/**      * Convert a hex encoded string to a byte array.      *      * @param s the hex encoded string      * @return the byte array      */
specifier|public
specifier|static
name|byte
index|[]
name|convertHexToBytes
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|%
literal|2
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|s
argument_list|)
throw|;
block|}
name|len
operator|/=
literal|2
expr_stmt|;
name|byte
index|[]
name|buff
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|buff
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|getHexDigit
argument_list|(
name|s
argument_list|,
name|i
operator|+
name|i
argument_list|)
operator|<<
literal|4
operator|)
operator||
name|getHexDigit
argument_list|(
name|s
argument_list|,
name|i
operator|+
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|buff
return|;
block|}
comment|/**      * Convert the digit at the given position to a hex number.      *      * @param s the hex encoded string      * @param i the index      * @return the number      */
specifier|private
specifier|static
name|int
name|getHexDigit
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|>=
literal|'0'
operator|&&
name|c
operator|<=
literal|'9'
condition|)
block|{
return|return
name|c
operator|-
literal|'0'
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>=
literal|'a'
operator|&&
name|c
operator|<=
literal|'f'
condition|)
block|{
return|return
name|c
operator|-
literal|'a'
operator|+
literal|0xa
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>=
literal|'A'
operator|&&
name|c
operator|<=
literal|'F'
condition|)
block|{
return|return
name|c
operator|-
literal|'A'
operator|+
literal|0xa
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|s
argument_list|)
throw|;
block|}
block|}
comment|/**      * Estimates the memory usage of the given string.      *      * @param s the string to estimate.      * @return the estimated memory usage.      */
specifier|public
specifier|static
name|int
name|estimateMemoryUsage
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|long
name|size
init|=
name|s
operator|==
literal|null
condition|?
literal|0
else|:
literal|48
operator|+
operator|(
name|long
operator|)
name|s
operator|.
name|length
argument_list|()
operator|*
literal|2
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Estimated memory footprint larger than Integer.MAX_VALUE: {}."
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|size
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
return|return
operator|(
name|int
operator|)
name|size
return|;
block|}
block|}
end_class

end_unit

