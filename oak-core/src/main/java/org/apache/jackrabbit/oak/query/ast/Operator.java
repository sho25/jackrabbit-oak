begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|fulltext
operator|.
name|LikePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyValues
import|;
end_import

begin_comment
comment|/**  * The enumeration of all operators.  */
end_comment

begin_enum
specifier|public
enum|enum
name|Operator
block|{
name|EQUAL
argument_list|(
literal|"="
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|PropertyValue
name|p1
parameter_list|,
name|PropertyValue
name|p2
parameter_list|)
block|{
return|return
name|PropertyValues
operator|.
name|match
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
return|;
block|}
block|}
block|,
name|NOT_EQUAL
argument_list|(
literal|"<>"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|PropertyValue
name|p1
parameter_list|,
name|PropertyValue
name|p2
parameter_list|)
block|{
return|return
name|PropertyValues
operator|.
name|notMatch
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
return|;
block|}
block|}
block|,
name|GREATER_THAN
argument_list|(
literal|">"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|PropertyValue
name|p1
parameter_list|,
name|PropertyValue
name|p2
parameter_list|)
block|{
return|return
name|p1
operator|.
name|compareTo
argument_list|(
name|p2
argument_list|)
operator|>
literal|0
return|;
block|}
block|}
block|,
name|GREATER_OR_EQUAL
argument_list|(
literal|">="
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|PropertyValue
name|p1
parameter_list|,
name|PropertyValue
name|p2
parameter_list|)
block|{
return|return
name|p1
operator|.
name|compareTo
argument_list|(
name|p2
argument_list|)
operator|>=
literal|0
return|;
block|}
block|}
block|,
name|LESS_THAN
argument_list|(
literal|"<"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|PropertyValue
name|p1
parameter_list|,
name|PropertyValue
name|p2
parameter_list|)
block|{
return|return
name|p1
operator|.
name|compareTo
argument_list|(
name|p2
argument_list|)
operator|<
literal|0
return|;
block|}
block|}
block|,
name|LESS_OR_EQUAL
argument_list|(
literal|"<="
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|PropertyValue
name|p1
parameter_list|,
name|PropertyValue
name|p2
parameter_list|)
block|{
return|return
name|p1
operator|.
name|compareTo
argument_list|(
name|p2
argument_list|)
operator|<=
literal|0
return|;
block|}
block|}
block|,
name|LIKE
argument_list|(
literal|"like"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|PropertyValue
name|p1
parameter_list|,
name|PropertyValue
name|p2
parameter_list|)
block|{
name|LikePattern
name|like
init|=
operator|new
name|LikePattern
argument_list|(
name|p2
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|p1
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
control|)
block|{
if|if
condition|(
name|like
operator|.
name|matches
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
block|;
comment|/**      * The name of this operator.      */
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
name|Operator
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * "operand2 always evaluates to a scalar value"      *      * for multi-valued properties: if any of the value matches, then return true      */
specifier|public
specifier|abstract
name|boolean
name|evaluate
parameter_list|(
name|PropertyValue
name|p1
parameter_list|,
name|PropertyValue
name|p2
parameter_list|)
function_decl|;
comment|/**      * Returns the name of this query operator.      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
end_enum

end_unit

