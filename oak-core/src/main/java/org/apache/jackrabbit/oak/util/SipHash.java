begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * An implementation of the SipHash-2-2 function, to prevent hash flooding.  */
end_comment

begin_class
specifier|public
class|class
name|SipHash
block|{
specifier|private
specifier|final
name|long
name|v0
decl_stmt|,
name|v1
decl_stmt|,
name|v2
decl_stmt|,
name|v3
decl_stmt|;
specifier|public
name|SipHash
parameter_list|(
name|long
name|seed
parameter_list|)
block|{
name|long
name|k0
init|=
name|seed
decl_stmt|;
name|long
name|k1
init|=
name|Long
operator|.
name|rotateLeft
argument_list|(
name|seed
argument_list|,
literal|32
argument_list|)
decl_stmt|;
name|v0
operator|=
name|k0
operator|^
literal|0x736f6d6570736575L
expr_stmt|;
name|v1
operator|=
name|k1
operator|^
literal|0x646f72616e646f6dL
expr_stmt|;
name|v2
operator|=
name|k0
operator|^
literal|0x6c7967656e657261L
expr_stmt|;
name|v3
operator|=
name|k1
operator|^
literal|0x7465646279746573L
expr_stmt|;
block|}
specifier|public
name|SipHash
parameter_list|(
name|SipHash
name|parent
parameter_list|,
name|long
name|m
parameter_list|)
block|{
name|long
name|v0
init|=
name|parent
operator|.
name|v0
decl_stmt|;
name|long
name|v1
init|=
name|parent
operator|.
name|v1
decl_stmt|;
name|long
name|v2
init|=
name|parent
operator|.
name|v2
decl_stmt|;
name|long
name|v3
init|=
name|parent
operator|.
name|v3
decl_stmt|;
name|int
name|repeat
init|=
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|repeat
condition|;
name|i
operator|++
control|)
block|{
name|v0
operator|+=
name|v1
expr_stmt|;
name|v2
operator|+=
name|v3
expr_stmt|;
name|v1
operator|=
name|Long
operator|.
name|rotateLeft
argument_list|(
name|v1
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|v3
operator|=
name|Long
operator|.
name|rotateLeft
argument_list|(
name|v3
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|v1
operator|^=
name|v0
expr_stmt|;
name|v3
operator|^=
name|v2
expr_stmt|;
name|v0
operator|=
name|Long
operator|.
name|rotateLeft
argument_list|(
name|v0
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|v2
operator|+=
name|v1
expr_stmt|;
name|v0
operator|+=
name|v3
expr_stmt|;
name|v1
operator|=
name|Long
operator|.
name|rotateLeft
argument_list|(
name|v1
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|v3
operator|=
name|Long
operator|.
name|rotateLeft
argument_list|(
name|v3
argument_list|,
literal|21
argument_list|)
expr_stmt|;
name|v1
operator|^=
name|v2
expr_stmt|;
name|v3
operator|^=
name|v0
expr_stmt|;
name|v2
operator|=
name|Long
operator|.
name|rotateLeft
argument_list|(
name|v2
argument_list|,
literal|32
argument_list|)
expr_stmt|;
block|}
name|v0
operator|^=
name|m
expr_stmt|;
name|this
operator|.
name|v0
operator|=
name|v0
expr_stmt|;
name|this
operator|.
name|v1
operator|=
name|v1
expr_stmt|;
name|this
operator|.
name|v2
operator|=
name|v2
expr_stmt|;
name|this
operator|.
name|v3
operator|=
name|v3
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|long
name|x
init|=
name|v0
operator|^
name|v1
operator|^
name|v2
operator|^
name|v3
decl_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
name|x
operator|^
operator|(
name|x
operator|>>>
literal|16
operator|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

