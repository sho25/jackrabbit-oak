begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|factories
operator|.
name|TreeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * {@code EventTypeFilter} filters based on the access rights of the observing session.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ACFilter
implements|implements
name|EventFilter
block|{
specifier|private
specifier|final
name|NodeState
name|before
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|after
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|ACFilter
name|parentFilter
decl_stmt|;
specifier|private
specifier|final
name|PermissionProvider
name|permissionProvider
decl_stmt|;
specifier|private
name|TreePermission
name|treePermission
decl_stmt|;
specifier|private
name|ACFilter
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|before
parameter_list|,
annotation|@
name|Nonnull
name|NodeState
name|after
parameter_list|,
annotation|@
name|Nonnull
name|String
name|name
parameter_list|,
annotation|@
name|Nonnull
name|PermissionProvider
name|permissionProvider
parameter_list|,
annotation|@
name|Nonnull
name|ACFilter
name|parentFilter
parameter_list|)
block|{
name|this
operator|.
name|before
operator|=
name|checkNotNull
argument_list|(
name|before
argument_list|)
expr_stmt|;
name|this
operator|.
name|after
operator|=
name|checkNotNull
argument_list|(
name|after
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|permissionProvider
operator|=
name|checkNotNull
argument_list|(
name|permissionProvider
argument_list|)
expr_stmt|;
name|this
operator|.
name|parentFilter
operator|=
name|checkNotNull
argument_list|(
name|parentFilter
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new {@code Filter} instance that includes an event when the      * observing session has sufficient permissions to read the associated item.      *      * @param before  before state      * @param after  after state      * @param permissionProvider  permission provider for access control evaluation      */
specifier|public
name|ACFilter
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|before
parameter_list|,
annotation|@
name|Nonnull
name|NodeState
name|after
parameter_list|,
annotation|@
name|Nonnull
name|PermissionProvider
name|permissionProvider
parameter_list|)
block|{
name|this
operator|.
name|before
operator|=
name|checkNotNull
argument_list|(
name|before
argument_list|)
expr_stmt|;
name|this
operator|.
name|after
operator|=
name|checkNotNull
argument_list|(
name|after
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|permissionProvider
operator|=
name|checkNotNull
argument_list|(
name|permissionProvider
argument_list|)
expr_stmt|;
name|this
operator|.
name|parentFilter
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|includeAdd
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
return|return
name|getTreePermission
argument_list|()
operator|.
name|canRead
argument_list|(
name|after
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|includeChange
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
return|return
name|getTreePermission
argument_list|()
operator|.
name|canRead
argument_list|(
name|after
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|includeDelete
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
return|return
name|getTreePermission
argument_list|()
operator|.
name|canRead
argument_list|(
name|before
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|includeAdd
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
return|return
name|getTreePermission
argument_list|()
operator|.
name|getChildPermission
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
operator|.
name|canRead
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|includeDelete
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
return|return
name|getTreePermission
argument_list|()
operator|.
name|getChildPermission
argument_list|(
name|name
argument_list|,
name|before
argument_list|)
operator|.
name|canRead
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|includeMove
parameter_list|(
name|String
name|sourcePath
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|moved
parameter_list|)
block|{
comment|// TODO: check access to the source path, it might not be accessible
return|return
name|getTreePermission
argument_list|()
operator|.
name|getChildPermission
argument_list|(
name|name
argument_list|,
name|moved
argument_list|)
operator|.
name|canRead
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|includeReorder
parameter_list|(
name|String
name|destName
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|reordered
parameter_list|)
block|{
comment|// TODO: check access to the dest name, it might not be accessible
return|return
name|getTreePermission
argument_list|()
operator|.
name|getChildPermission
argument_list|(
name|name
argument_list|,
name|reordered
argument_list|)
operator|.
name|canRead
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|EventFilter
name|create
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
return|return
operator|new
name|ACFilter
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|name
argument_list|,
name|permissionProvider
argument_list|,
name|this
argument_list|)
return|;
block|}
comment|//-----------------------------< internal>---------------------------------
specifier|private
name|TreePermission
name|getTreePermission
parameter_list|()
block|{
name|TreePermission
name|tp
init|=
name|treePermission
decl_stmt|;
if|if
condition|(
name|tp
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|parentFilter
operator|==
literal|null
condition|)
block|{
name|tp
operator|=
name|permissionProvider
operator|.
name|getTreePermission
argument_list|(
name|TreeFactory
operator|.
name|createReadOnlyTree
argument_list|(
operator|(
name|after
operator|.
name|exists
argument_list|()
condition|?
name|after
else|:
name|before
operator|)
argument_list|)
argument_list|,
name|TreePermission
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tp
operator|=
name|parentFilter
operator|.
name|getTreePermission
argument_list|()
operator|.
name|getChildPermission
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
name|treePermission
operator|=
name|tp
expr_stmt|;
block|}
return|return
name|tp
return|;
block|}
block|}
end_class

end_unit

