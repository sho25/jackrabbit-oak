begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * This class can can convert a XPATH query to a SQL2 query.  */
end_comment

begin_class
specifier|public
class|class
name|XPathToSQL2Converter
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|XPathToSQL2Converter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Character types, used during the tokenizer phase
specifier|private
specifier|static
specifier|final
name|int
name|CHAR_END
init|=
operator|-
literal|1
decl_stmt|,
name|CHAR_VALUE
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CHAR_NAME
init|=
literal|4
decl_stmt|,
name|CHAR_SPECIAL_1
init|=
literal|5
decl_stmt|,
name|CHAR_SPECIAL_2
init|=
literal|6
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CHAR_STRING
init|=
literal|7
decl_stmt|,
name|CHAR_DECIMAL
init|=
literal|8
decl_stmt|;
comment|// Token types
specifier|private
specifier|static
specifier|final
name|int
name|KEYWORD
init|=
literal|1
decl_stmt|,
name|IDENTIFIER
init|=
literal|2
decl_stmt|,
name|END
init|=
literal|4
decl_stmt|,
name|VALUE_STRING
init|=
literal|5
decl_stmt|,
name|VALUE_NUMBER
init|=
literal|6
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MINUS
init|=
literal|12
decl_stmt|,
name|PLUS
init|=
literal|13
decl_stmt|,
name|OPEN
init|=
literal|14
decl_stmt|,
name|CLOSE
init|=
literal|15
decl_stmt|;
comment|// The query as an array of characters and character types
specifier|private
name|String
name|statement
decl_stmt|;
specifier|private
name|char
index|[]
name|statementChars
decl_stmt|;
specifier|private
name|int
index|[]
name|characterTypes
decl_stmt|;
comment|// The current state of the parser
specifier|private
name|int
name|parseIndex
decl_stmt|;
specifier|private
name|int
name|currentTokenType
decl_stmt|;
specifier|private
name|String
name|currentToken
decl_stmt|;
specifier|private
name|boolean
name|currentTokenQuoted
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|String
argument_list|>
name|expected
decl_stmt|;
specifier|private
name|Selector
name|currentSelector
init|=
operator|new
name|Selector
argument_list|()
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|Selector
argument_list|>
name|selectors
init|=
operator|new
name|ArrayList
argument_list|<
name|Selector
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Convert the query to SQL2.      *      * @param query the query string      * @return the SQL2 query      * @throws ParseException if parsing fails      */
specifier|public
name|String
name|convert
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|ParseException
block|{
name|query
operator|=
name|query
operator|.
name|trim
argument_list|()
expr_stmt|;
name|boolean
name|explain
init|=
name|query
operator|.
name|startsWith
argument_list|(
literal|"explain "
argument_list|)
decl_stmt|;
if|if
condition|(
name|explain
condition|)
block|{
name|query
operator|=
name|query
operator|.
name|substring
argument_list|(
literal|"explain"
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|boolean
name|measure
init|=
name|query
operator|.
name|startsWith
argument_list|(
literal|"measure"
argument_list|)
decl_stmt|;
if|if
condition|(
name|measure
condition|)
block|{
name|query
operator|=
name|query
operator|.
name|substring
argument_list|(
literal|"measure"
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|query
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// special case, will always result in an empty result
name|query
operator|=
literal|"//jcr:root"
expr_stmt|;
block|}
name|initialize
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentTokenType
operator|==
name|END
condition|)
block|{
throw|throw
name|getSyntaxError
argument_list|(
literal|"the query may not be empty"
argument_list|)
throw|;
block|}
name|currentSelector
operator|.
name|name
operator|=
literal|"a"
expr_stmt|;
name|ArrayList
argument_list|<
name|Expression
argument_list|>
name|columnList
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|pathPattern
init|=
literal|""
decl_stmt|;
name|boolean
name|startOfQuery
init|=
literal|true
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// if true, path or nodeType conditions are not allowed
name|boolean
name|shortcut
init|=
literal|false
decl_stmt|;
name|boolean
name|slash
init|=
name|readIf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|slash
condition|)
block|{
if|if
condition|(
name|startOfQuery
condition|)
block|{
comment|// the query doesn't start with "/"
name|currentSelector
operator|.
name|path
operator|=
literal|"/"
expr_stmt|;
name|pathPattern
operator|=
literal|"/"
expr_stmt|;
name|currentSelector
operator|.
name|isChild
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|readIf
argument_list|(
literal|"jcr:root"
argument_list|)
condition|)
block|{
comment|// "/jcr:root" may only appear at the beginning
if|if
condition|(
operator|!
name|pathPattern
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|getSyntaxError
argument_list|(
literal|"jcr:root needs to be at the beginning"
argument_list|)
throw|;
block|}
if|if
condition|(
name|readIf
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// "/jcr:root/"
name|currentSelector
operator|.
name|path
operator|=
literal|"/"
expr_stmt|;
name|pathPattern
operator|=
literal|"/"
expr_stmt|;
if|if
condition|(
name|readIf
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// "/jcr:root//"
name|pathPattern
operator|=
literal|"//"
expr_stmt|;
name|currentSelector
operator|.
name|isDescendant
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|currentSelector
operator|.
name|isChild
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// for example "/jcr:root[condition]"
name|pathPattern
operator|=
literal|"/%"
expr_stmt|;
name|currentSelector
operator|.
name|path
operator|=
literal|"/"
expr_stmt|;
name|shortcut
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|readIf
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// "//" was read
name|pathPattern
operator|+=
literal|"%"
expr_stmt|;
name|currentSelector
operator|.
name|isDescendant
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// the token "/" was read
name|pathPattern
operator|+=
literal|"/"
expr_stmt|;
if|if
condition|(
name|startOfQuery
condition|)
block|{
name|currentSelector
operator|.
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
else|else
block|{
name|currentSelector
operator|.
name|isChild
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|shortcut
condition|)
block|{
comment|// "*" and so on are not allowed now
block|}
elseif|else
if|if
condition|(
name|readIf
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
comment|// "...*"
name|pathPattern
operator|+=
literal|"%"
expr_stmt|;
if|if
condition|(
operator|!
name|currentSelector
operator|.
name|isDescendant
condition|)
block|{
if|if
condition|(
name|selectors
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|currentSelector
operator|.
name|path
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|// the query /* is special
name|currentSelector
operator|.
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|readIf
argument_list|(
literal|"text"
argument_list|)
condition|)
block|{
comment|// "...text()"
name|currentSelector
operator|.
name|isChild
operator|=
literal|false
expr_stmt|;
name|pathPattern
operator|+=
literal|"jcr:xmltext"
expr_stmt|;
name|read
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|read
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentSelector
operator|.
name|isDescendant
condition|)
block|{
name|currentSelector
operator|.
name|nodeName
operator|=
literal|"jcr:xmltext"
expr_stmt|;
block|}
else|else
block|{
name|currentSelector
operator|.
name|path
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|currentSelector
operator|.
name|path
argument_list|,
literal|"jcr:xmltext"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|readIf
argument_list|(
literal|"element"
argument_list|)
condition|)
block|{
comment|// "...element(..."
name|read
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
if|if
condition|(
name|readIf
argument_list|(
literal|")"
argument_list|)
condition|)
block|{
comment|// any
name|pathPattern
operator|+=
literal|"%"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|readIf
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
comment|// any
name|pathPattern
operator|+=
literal|"%"
expr_stmt|;
block|}
else|else
block|{
name|currentSelector
operator|.
name|isChild
operator|=
literal|false
expr_stmt|;
name|String
name|name
init|=
name|readIdentifier
argument_list|()
decl_stmt|;
name|pathPattern
operator|+=
name|name
expr_stmt|;
name|currentSelector
operator|.
name|path
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|currentSelector
operator|.
name|path
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|readIf
argument_list|(
literal|","
argument_list|)
condition|)
block|{
name|currentSelector
operator|.
name|nodeType
operator|=
name|readIdentifier
argument_list|()
expr_stmt|;
block|}
name|read
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|readIf
argument_list|(
literal|"@"
argument_list|)
condition|)
block|{
name|Property
name|p
init|=
name|readProperty
argument_list|()
decl_stmt|;
name|columnList
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|readIf
argument_list|(
literal|"rep:excerpt"
argument_list|)
condition|)
block|{
name|read
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|readIf
argument_list|(
literal|")"
argument_list|)
condition|)
block|{
comment|// only rep:excerpt(.) and rep:excerpt() are currently supported
name|read
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|read
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|Property
name|p
init|=
operator|new
name|Property
argument_list|(
name|currentSelector
argument_list|,
literal|"rep:excerpt"
argument_list|)
decl_stmt|;
name|columnList
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|readIf
argument_list|(
literal|"("
argument_list|)
condition|)
block|{
comment|// special case: ".../(@prop)" is actually not a child node,
comment|// but the same node (selector) as before
if|if
condition|(
name|selectors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|currentSelector
operator|=
name|selectors
operator|.
name|remove
argument_list|(
name|selectors
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// prevent (join) conditions are added again
name|currentSelector
operator|.
name|isChild
operator|=
literal|false
expr_stmt|;
name|currentSelector
operator|.
name|isDescendant
operator|=
literal|false
expr_stmt|;
name|currentSelector
operator|.
name|path
operator|=
literal|""
expr_stmt|;
name|currentSelector
operator|.
name|nodeName
operator|=
literal|null
expr_stmt|;
block|}
do|do
block|{
name|read
argument_list|(
literal|"@"
argument_list|)
expr_stmt|;
name|Property
name|p
init|=
name|readProperty
argument_list|()
decl_stmt|;
name|columnList
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|readIf
argument_list|(
literal|"|"
argument_list|)
condition|)
do|;
name|read
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentTokenType
operator|==
name|IDENTIFIER
condition|)
block|{
comment|// path restriction
name|String
name|name
init|=
name|readIdentifier
argument_list|()
decl_stmt|;
name|pathPattern
operator|+=
name|name
expr_stmt|;
if|if
condition|(
operator|!
name|currentSelector
operator|.
name|isChild
condition|)
block|{
name|currentSelector
operator|.
name|nodeName
operator|=
name|name
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|selectors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// no explicit path restriction - so it's a node name restriction
name|currentSelector
operator|.
name|isChild
operator|=
literal|true
expr_stmt|;
name|currentSelector
operator|.
name|nodeName
operator|=
name|name
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|currentSelector
operator|.
name|isChild
condition|)
block|{
name|currentSelector
operator|.
name|isChild
operator|=
literal|false
expr_stmt|;
name|String
name|oldPath
init|=
name|currentSelector
operator|.
name|path
decl_stmt|;
comment|// further extending the path
name|currentSelector
operator|.
name|path
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|oldPath
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|readIf
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
comment|// just "." this is simply ignored, so that
comment|// "a/./b" is the same as "a/b"
if|if
condition|(
name|readIf
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
comment|// ".." means "the parent of the node"
comment|// handle like a regular path restriction
name|String
name|name
init|=
literal|".."
decl_stmt|;
name|pathPattern
operator|+=
name|name
expr_stmt|;
if|if
condition|(
operator|!
name|currentSelector
operator|.
name|isChild
condition|)
block|{
name|currentSelector
operator|.
name|nodeName
operator|=
name|name
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|currentSelector
operator|.
name|isChild
condition|)
block|{
name|currentSelector
operator|.
name|isChild
operator|=
literal|false
expr_stmt|;
name|currentSelector
operator|.
name|isParent
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|selectors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|currentSelector
operator|=
name|selectors
operator|.
name|remove
argument_list|(
name|selectors
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|currentSelector
operator|.
name|condition
operator|=
literal|null
expr_stmt|;
name|currentSelector
operator|.
name|joinCondition
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
throw|throw
name|getSyntaxError
argument_list|()
throw|;
block|}
if|if
condition|(
name|readIf
argument_list|(
literal|"["
argument_list|)
condition|)
block|{
name|Expression
name|c
init|=
name|parseConstraint
argument_list|()
decl_stmt|;
name|currentSelector
operator|.
name|condition
operator|=
name|add
argument_list|(
name|currentSelector
operator|.
name|condition
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|read
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|startOfQuery
operator|=
literal|false
expr_stmt|;
name|nextSelector
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|selectors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|nextSelector
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// the current selector wasn't used so far
comment|// go back to the last one
name|currentSelector
operator|=
name|selectors
operator|.
name|get
argument_list|(
name|selectors
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectors
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|currentSelector
operator|.
name|onlySelector
operator|=
literal|true
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|Order
argument_list|>
name|orderList
init|=
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|readIf
argument_list|(
literal|"order"
argument_list|)
condition|)
block|{
name|read
argument_list|(
literal|"by"
argument_list|)
expr_stmt|;
do|do
block|{
name|Order
name|order
init|=
operator|new
name|Order
argument_list|()
decl_stmt|;
name|order
operator|.
name|expr
operator|=
name|parseExpression
argument_list|()
expr_stmt|;
if|if
condition|(
name|readIf
argument_list|(
literal|"descending"
argument_list|)
condition|)
block|{
name|order
operator|.
name|descending
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|readIf
argument_list|(
literal|"ascending"
argument_list|)
expr_stmt|;
block|}
name|orderList
operator|.
name|add
argument_list|(
name|order
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|readIf
argument_list|(
literal|","
argument_list|)
condition|)
do|;
block|}
if|if
condition|(
operator|!
name|currentToken
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|getSyntaxError
argument_list|(
literal|"<end>"
argument_list|)
throw|;
block|}
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// explain | measure ...
if|if
condition|(
name|explain
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"explain "
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|measure
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"measure "
argument_list|)
expr_stmt|;
block|}
comment|// select ...
name|buff
operator|.
name|append
argument_list|(
literal|"select "
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
operator|new
name|Property
argument_list|(
name|currentSelector
argument_list|,
name|Query
operator|.
name|JCR_PATH
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectors
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|" as "
argument_list|)
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|Query
operator|.
name|JCR_PATH
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
operator|new
name|Property
argument_list|(
name|currentSelector
argument_list|,
name|Query
operator|.
name|JCR_SCORE
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectors
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|" as "
argument_list|)
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|Query
operator|.
name|JCR_SCORE
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|columnList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
operator|new
name|Property
argument_list|(
name|currentSelector
argument_list|,
literal|"*"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|Expression
name|e
init|=
name|columnList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|columnName
init|=
name|e
operator|.
name|toString
argument_list|()
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|columnName
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectors
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|" as ["
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|getColumnAliasName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// from ...
name|buff
operator|.
name|append
argument_list|(
literal|" from "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|selectors
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Selector
name|s
init|=
name|selectors
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|" inner join "
argument_list|)
expr_stmt|;
block|}
name|String
name|nodeType
init|=
name|s
operator|.
name|nodeType
decl_stmt|;
if|if
condition|(
name|nodeType
operator|==
literal|null
condition|)
block|{
name|nodeType
operator|=
literal|"nt:base"
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|'['
operator|+
name|nodeType
operator|+
literal|']'
argument_list|)
operator|.
name|append
argument_list|(
literal|" as "
argument_list|)
operator|.
name|append
argument_list|(
name|s
operator|.
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|joinCondition
operator|!=
literal|null
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|" on "
argument_list|)
operator|.
name|append
argument_list|(
name|s
operator|.
name|joinCondition
argument_list|)
expr_stmt|;
block|}
block|}
comment|// where ...
name|StringBuilder
name|condition
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|selectors
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Selector
name|s
init|=
name|selectors
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|condition
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|condition
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|condition
operator|.
name|append
argument_list|(
literal|" and "
argument_list|)
expr_stmt|;
block|}
name|condition
operator|.
name|append
argument_list|(
name|s
operator|.
name|condition
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|condition
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|" where "
argument_list|)
operator|.
name|append
argument_list|(
name|condition
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// order by ...
if|if
condition|(
operator|!
name|orderList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|" order by "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|orderList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|orderList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// leave original xpath string as a comment
name|buff
operator|.
name|append
argument_list|(
literal|" /* xpath: "
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|" */"
argument_list|)
expr_stmt|;
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|nextSelector
parameter_list|(
name|boolean
name|force
parameter_list|)
throws|throws
name|ParseException
block|{
name|boolean
name|isFirstSelector
init|=
name|selectors
operator|.
name|size
argument_list|()
operator|==
literal|0
decl_stmt|;
name|String
name|path
init|=
name|currentSelector
operator|.
name|path
decl_stmt|;
name|Expression
name|condition
init|=
name|currentSelector
operator|.
name|condition
decl_stmt|;
name|Expression
name|joinCondition
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|currentSelector
operator|.
name|nodeName
operator|!=
literal|null
condition|)
block|{
name|Function
name|f
init|=
operator|new
name|Function
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|f
operator|.
name|params
operator|.
name|add
argument_list|(
operator|new
name|SelectorExpr
argument_list|(
name|currentSelector
argument_list|)
argument_list|)
expr_stmt|;
name|Condition
name|c
init|=
operator|new
name|Condition
argument_list|(
name|f
argument_list|,
literal|"="
argument_list|,
name|Literal
operator|.
name|newString
argument_list|(
name|currentSelector
operator|.
name|nodeName
argument_list|)
argument_list|,
name|Expression
operator|.
name|PRECEDENCE_CONDITION
argument_list|)
decl_stmt|;
name|condition
operator|=
name|add
argument_list|(
name|condition
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentSelector
operator|.
name|isDescendant
condition|)
block|{
if|if
condition|(
name|isFirstSelector
condition|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|path
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
literal|"/"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
name|Function
name|c
init|=
operator|new
name|Function
argument_list|(
literal|"isdescendantnode"
argument_list|)
decl_stmt|;
name|c
operator|.
name|params
operator|.
name|add
argument_list|(
operator|new
name|SelectorExpr
argument_list|(
name|currentSelector
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|params
operator|.
name|add
argument_list|(
name|Literal
operator|.
name|newString
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|condition
operator|=
name|add
argument_list|(
name|condition
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Function
name|c
init|=
operator|new
name|Function
argument_list|(
literal|"isdescendantnode"
argument_list|)
decl_stmt|;
name|c
operator|.
name|params
operator|.
name|add
argument_list|(
operator|new
name|SelectorExpr
argument_list|(
name|currentSelector
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|params
operator|.
name|add
argument_list|(
operator|new
name|SelectorExpr
argument_list|(
name|selectors
operator|.
name|get
argument_list|(
name|selectors
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|joinCondition
operator|=
name|c
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|currentSelector
operator|.
name|isParent
condition|)
block|{
if|if
condition|(
name|isFirstSelector
condition|)
block|{
throw|throw
name|getSyntaxError
argument_list|()
throw|;
block|}
else|else
block|{
name|Function
name|c
init|=
operator|new
name|Function
argument_list|(
literal|"ischildnode"
argument_list|)
decl_stmt|;
name|c
operator|.
name|params
operator|.
name|add
argument_list|(
operator|new
name|SelectorExpr
argument_list|(
name|selectors
operator|.
name|get
argument_list|(
name|selectors
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|params
operator|.
name|add
argument_list|(
operator|new
name|SelectorExpr
argument_list|(
name|currentSelector
argument_list|)
argument_list|)
expr_stmt|;
name|joinCondition
operator|=
name|c
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|currentSelector
operator|.
name|isChild
condition|)
block|{
if|if
condition|(
name|isFirstSelector
condition|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|path
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
literal|"/"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
name|Function
name|c
init|=
operator|new
name|Function
argument_list|(
literal|"ischildnode"
argument_list|)
decl_stmt|;
name|c
operator|.
name|params
operator|.
name|add
argument_list|(
operator|new
name|SelectorExpr
argument_list|(
name|currentSelector
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|params
operator|.
name|add
argument_list|(
name|Literal
operator|.
name|newString
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|condition
operator|=
name|add
argument_list|(
name|condition
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Function
name|c
init|=
operator|new
name|Function
argument_list|(
literal|"ischildnode"
argument_list|)
decl_stmt|;
name|c
operator|.
name|params
operator|.
name|add
argument_list|(
operator|new
name|SelectorExpr
argument_list|(
name|currentSelector
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|params
operator|.
name|add
argument_list|(
operator|new
name|SelectorExpr
argument_list|(
name|selectors
operator|.
name|get
argument_list|(
name|selectors
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|joinCondition
operator|=
name|c
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|force
operator|&&
name|condition
operator|==
literal|null
operator|&&
name|joinCondition
operator|==
literal|null
condition|)
block|{
comment|// a child node of a given path, such as "/test"
comment|// use the same selector for now, and extend the path
block|}
elseif|else
if|if
condition|(
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|Function
name|c
init|=
operator|new
name|Function
argument_list|(
literal|"issamenode"
argument_list|)
decl_stmt|;
name|c
operator|.
name|params
operator|.
name|add
argument_list|(
operator|new
name|SelectorExpr
argument_list|(
name|currentSelector
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|params
operator|.
name|add
argument_list|(
name|Literal
operator|.
name|newString
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|condition
operator|=
name|add
argument_list|(
name|condition
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|force
operator|||
name|condition
operator|!=
literal|null
operator|||
name|joinCondition
operator|!=
literal|null
condition|)
block|{
name|String
name|nextSelectorName
init|=
literal|""
operator|+
call|(
name|char
call|)
argument_list|(
name|currentSelector
operator|.
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextSelectorName
operator|.
name|compareTo
argument_list|(
literal|"x"
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
name|getSyntaxError
argument_list|(
literal|"too many joins"
argument_list|)
throw|;
block|}
name|Selector
name|nextSelector
init|=
operator|new
name|Selector
argument_list|()
decl_stmt|;
name|nextSelector
operator|.
name|name
operator|=
name|nextSelectorName
expr_stmt|;
name|currentSelector
operator|.
name|condition
operator|=
name|condition
expr_stmt|;
name|currentSelector
operator|.
name|joinCondition
operator|=
name|add
argument_list|(
name|currentSelector
operator|.
name|joinCondition
argument_list|,
name|joinCondition
argument_list|)
expr_stmt|;
name|selectors
operator|.
name|add
argument_list|(
name|currentSelector
argument_list|)
expr_stmt|;
name|currentSelector
operator|=
name|nextSelector
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Expression
name|add
parameter_list|(
name|Expression
name|old
parameter_list|,
name|Expression
name|add
parameter_list|)
block|{
if|if
condition|(
name|old
operator|==
literal|null
condition|)
block|{
return|return
name|add
return|;
block|}
elseif|else
if|if
condition|(
name|add
operator|==
literal|null
condition|)
block|{
return|return
name|old
return|;
block|}
return|return
operator|new
name|Condition
argument_list|(
name|old
argument_list|,
literal|"and"
argument_list|,
name|add
argument_list|,
name|Expression
operator|.
name|PRECEDENCE_AND
argument_list|)
return|;
block|}
specifier|private
name|Expression
name|parseConstraint
parameter_list|()
throws|throws
name|ParseException
block|{
name|Expression
name|a
init|=
name|parseAnd
argument_list|()
decl_stmt|;
while|while
condition|(
name|readIf
argument_list|(
literal|"or"
argument_list|)
condition|)
block|{
name|a
operator|=
operator|new
name|Condition
argument_list|(
name|a
argument_list|,
literal|"or"
argument_list|,
name|parseAnd
argument_list|()
argument_list|,
name|Expression
operator|.
name|PRECEDENCE_OR
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
specifier|private
name|Expression
name|parseAnd
parameter_list|()
throws|throws
name|ParseException
block|{
name|Expression
name|a
init|=
name|parseCondition
argument_list|()
decl_stmt|;
while|while
condition|(
name|readIf
argument_list|(
literal|"and"
argument_list|)
condition|)
block|{
name|a
operator|=
operator|new
name|Condition
argument_list|(
name|a
argument_list|,
literal|"and"
argument_list|,
name|parseCondition
argument_list|()
argument_list|,
name|Expression
operator|.
name|PRECEDENCE_AND
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
specifier|private
name|Expression
name|parseCondition
parameter_list|()
throws|throws
name|ParseException
block|{
name|Expression
name|a
decl_stmt|;
if|if
condition|(
name|readIf
argument_list|(
literal|"fn:not"
argument_list|)
operator|||
name|readIf
argument_list|(
literal|"not"
argument_list|)
condition|)
block|{
name|read
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|a
operator|=
name|parseConstraint
argument_list|()
expr_stmt|;
if|if
condition|(
name|a
operator|instanceof
name|Condition
operator|&&
operator|(
operator|(
name|Condition
operator|)
name|a
operator|)
operator|.
name|operator
operator|.
name|equals
argument_list|(
literal|"is not null"
argument_list|)
condition|)
block|{
comment|// not(@property) -> @property is null
name|Condition
name|c
init|=
operator|(
name|Condition
operator|)
name|a
decl_stmt|;
name|c
operator|=
operator|new
name|Condition
argument_list|(
name|c
operator|.
name|left
argument_list|,
literal|"is null"
argument_list|,
literal|null
argument_list|,
name|Expression
operator|.
name|PRECEDENCE_CONDITION
argument_list|)
expr_stmt|;
name|a
operator|=
name|c
expr_stmt|;
block|}
else|else
block|{
name|Function
name|f
init|=
operator|new
name|Function
argument_list|(
literal|"not"
argument_list|)
decl_stmt|;
name|f
operator|.
name|params
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|a
operator|=
name|f
expr_stmt|;
block|}
name|read
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|readIf
argument_list|(
literal|"("
argument_list|)
condition|)
block|{
name|a
operator|=
name|parseConstraint
argument_list|()
expr_stmt|;
name|read
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Expression
name|e
init|=
name|parseExpression
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|isCondition
argument_list|()
condition|)
block|{
return|return
name|e
return|;
block|}
name|a
operator|=
name|parseCondition
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
specifier|private
name|Condition
name|parseCondition
parameter_list|(
name|Expression
name|left
parameter_list|)
throws|throws
name|ParseException
block|{
name|Condition
name|c
decl_stmt|;
if|if
condition|(
name|readIf
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|c
operator|=
operator|new
name|Condition
argument_list|(
name|left
argument_list|,
literal|"="
argument_list|,
name|parseExpression
argument_list|()
argument_list|,
name|Expression
operator|.
name|PRECEDENCE_CONDITION
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|readIf
argument_list|(
literal|"<>"
argument_list|)
condition|)
block|{
name|c
operator|=
operator|new
name|Condition
argument_list|(
name|left
argument_list|,
literal|"<>"
argument_list|,
name|parseExpression
argument_list|()
argument_list|,
name|Expression
operator|.
name|PRECEDENCE_CONDITION
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|readIf
argument_list|(
literal|"!="
argument_list|)
condition|)
block|{
name|c
operator|=
operator|new
name|Condition
argument_list|(
name|left
argument_list|,
literal|"<>"
argument_list|,
name|parseExpression
argument_list|()
argument_list|,
name|Expression
operator|.
name|PRECEDENCE_CONDITION
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|readIf
argument_list|(
literal|"<"
argument_list|)
condition|)
block|{
name|c
operator|=
operator|new
name|Condition
argument_list|(
name|left
argument_list|,
literal|"<"
argument_list|,
name|parseExpression
argument_list|()
argument_list|,
name|Expression
operator|.
name|PRECEDENCE_CONDITION
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|readIf
argument_list|(
literal|">"
argument_list|)
condition|)
block|{
name|c
operator|=
operator|new
name|Condition
argument_list|(
name|left
argument_list|,
literal|">"
argument_list|,
name|parseExpression
argument_list|()
argument_list|,
name|Expression
operator|.
name|PRECEDENCE_CONDITION
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|readIf
argument_list|(
literal|"<="
argument_list|)
condition|)
block|{
name|c
operator|=
operator|new
name|Condition
argument_list|(
name|left
argument_list|,
literal|"<="
argument_list|,
name|parseExpression
argument_list|()
argument_list|,
name|Expression
operator|.
name|PRECEDENCE_CONDITION
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|readIf
argument_list|(
literal|">="
argument_list|)
condition|)
block|{
name|c
operator|=
operator|new
name|Condition
argument_list|(
name|left
argument_list|,
literal|">="
argument_list|,
name|parseExpression
argument_list|()
argument_list|,
name|Expression
operator|.
name|PRECEDENCE_CONDITION
argument_list|)
expr_stmt|;
comment|// TODO support "x eq y"? it seems this only matches for single value properties?
comment|// } else if (readIf("eq")) {
comment|//    c = new Condition(left, "==", parseExpression(), Expression.PRECEDENCE_CONDITION);
block|}
else|else
block|{
name|c
operator|=
operator|new
name|Condition
argument_list|(
name|left
argument_list|,
literal|"is not null"
argument_list|,
literal|null
argument_list|,
name|Expression
operator|.
name|PRECEDENCE_CONDITION
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
specifier|private
name|Expression
name|parseExpression
parameter_list|()
throws|throws
name|ParseException
block|{
if|if
condition|(
name|readIf
argument_list|(
literal|"@"
argument_list|)
condition|)
block|{
return|return
name|readProperty
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|readIf
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
return|return
name|Literal
operator|.
name|newBoolean
argument_list|(
literal|true
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|readIf
argument_list|(
literal|"false"
argument_list|)
condition|)
block|{
return|return
name|Literal
operator|.
name|newBoolean
argument_list|(
literal|false
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|currentTokenType
operator|==
name|VALUE_NUMBER
condition|)
block|{
name|Literal
name|l
init|=
name|Literal
operator|.
name|newNumber
argument_list|(
name|currentToken
argument_list|)
decl_stmt|;
name|read
argument_list|()
expr_stmt|;
return|return
name|l
return|;
block|}
elseif|else
if|if
condition|(
name|currentTokenType
operator|==
name|VALUE_STRING
condition|)
block|{
name|Literal
name|l
init|=
name|Literal
operator|.
name|newString
argument_list|(
name|currentToken
argument_list|)
decl_stmt|;
name|read
argument_list|()
expr_stmt|;
return|return
name|l
return|;
block|}
elseif|else
if|if
condition|(
name|readIf
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
if|if
condition|(
name|currentTokenType
operator|!=
name|VALUE_NUMBER
condition|)
block|{
throw|throw
name|getSyntaxError
argument_list|()
throw|;
block|}
name|Literal
name|l
init|=
name|Literal
operator|.
name|newNumber
argument_list|(
literal|'-'
operator|+
name|currentToken
argument_list|)
decl_stmt|;
name|read
argument_list|()
expr_stmt|;
return|return
name|l
return|;
block|}
elseif|else
if|if
condition|(
name|readIf
argument_list|(
literal|"+"
argument_list|)
condition|)
block|{
if|if
condition|(
name|currentTokenType
operator|!=
name|VALUE_NUMBER
condition|)
block|{
throw|throw
name|getSyntaxError
argument_list|()
throw|;
block|}
return|return
name|parseExpression
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|parsePropertyOrFunction
argument_list|()
return|;
block|}
block|}
specifier|private
name|Expression
name|parsePropertyOrFunction
parameter_list|()
throws|throws
name|ParseException
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|isPath
init|=
literal|false
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|currentTokenType
operator|==
name|IDENTIFIER
condition|)
block|{
name|String
name|name
init|=
name|readIdentifier
argument_list|()
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|readIf
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
comment|// any node
name|buff
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
name|isPath
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|readIf
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
if|if
condition|(
name|readIf
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|isPath
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|readIf
argument_list|(
literal|"@"
argument_list|)
condition|)
block|{
if|if
condition|(
name|readIf
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
comment|// xpath supports @*, even thought jackrabbit may not
name|buff
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buff
operator|.
name|append
argument_list|(
name|readIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Property
argument_list|(
name|currentSelector
argument_list|,
name|buff
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
break|break;
block|}
if|if
condition|(
name|readIf
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|isPath
operator|=
literal|true
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|isPath
operator|&&
name|readIf
argument_list|(
literal|"("
argument_list|)
condition|)
block|{
return|return
name|parseFunction
argument_list|(
name|buff
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|buff
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// path without all attributes, as in:
comment|// jcr:contains(jcr:content, 'x')
if|if
condition|(
name|buff
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|buff
operator|=
operator|new
name|StringBuilder
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Property
argument_list|(
name|currentSelector
argument_list|,
name|buff
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
throw|throw
name|getSyntaxError
argument_list|()
throw|;
block|}
specifier|private
name|Expression
name|parseFunction
parameter_list|(
name|String
name|functionName
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
literal|"jcr:like"
operator|.
name|equals
argument_list|(
name|functionName
argument_list|)
condition|)
block|{
name|Condition
name|c
init|=
operator|new
name|Condition
argument_list|(
name|parseExpression
argument_list|()
argument_list|,
literal|"like"
argument_list|,
literal|null
argument_list|,
name|Expression
operator|.
name|PRECEDENCE_CONDITION
argument_list|)
decl_stmt|;
name|read
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|c
operator|.
name|right
operator|=
name|parseExpression
argument_list|()
expr_stmt|;
name|read
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
elseif|else
if|if
condition|(
literal|"jcr:contains"
operator|.
name|equals
argument_list|(
name|functionName
argument_list|)
condition|)
block|{
name|Function
name|f
init|=
operator|new
name|Function
argument_list|(
literal|"contains"
argument_list|)
decl_stmt|;
name|f
operator|.
name|params
operator|.
name|add
argument_list|(
name|parseExpression
argument_list|()
argument_list|)
expr_stmt|;
name|read
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|f
operator|.
name|params
operator|.
name|add
argument_list|(
name|parseExpression
argument_list|()
argument_list|)
expr_stmt|;
name|read
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
elseif|else
if|if
condition|(
literal|"jcr:score"
operator|.
name|equals
argument_list|(
name|functionName
argument_list|)
condition|)
block|{
name|Function
name|f
init|=
operator|new
name|Function
argument_list|(
literal|"score"
argument_list|)
decl_stmt|;
name|f
operator|.
name|params
operator|.
name|add
argument_list|(
operator|new
name|SelectorExpr
argument_list|(
name|currentSelector
argument_list|)
argument_list|)
expr_stmt|;
name|read
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
elseif|else
if|if
condition|(
literal|"xs:dateTime"
operator|.
name|equals
argument_list|(
name|functionName
argument_list|)
condition|)
block|{
name|Expression
name|expr
init|=
name|parseExpression
argument_list|()
decl_stmt|;
name|Cast
name|c
init|=
operator|new
name|Cast
argument_list|(
name|expr
argument_list|,
literal|"date"
argument_list|)
decl_stmt|;
name|read
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
elseif|else
if|if
condition|(
literal|"fn:lower-case"
operator|.
name|equals
argument_list|(
name|functionName
argument_list|)
condition|)
block|{
name|Function
name|f
init|=
operator|new
name|Function
argument_list|(
literal|"lower"
argument_list|)
decl_stmt|;
name|f
operator|.
name|params
operator|.
name|add
argument_list|(
name|parseExpression
argument_list|()
argument_list|)
expr_stmt|;
name|read
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
elseif|else
if|if
condition|(
literal|"fn:upper-case"
operator|.
name|equals
argument_list|(
name|functionName
argument_list|)
condition|)
block|{
name|Function
name|f
init|=
operator|new
name|Function
argument_list|(
literal|"upper"
argument_list|)
decl_stmt|;
name|f
operator|.
name|params
operator|.
name|add
argument_list|(
name|parseExpression
argument_list|()
argument_list|)
expr_stmt|;
name|read
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
elseif|else
if|if
condition|(
literal|"fn:name"
operator|.
name|equals
argument_list|(
name|functionName
argument_list|)
condition|)
block|{
name|Function
name|f
init|=
operator|new
name|Function
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|readIf
argument_list|(
literal|")"
argument_list|)
condition|)
block|{
comment|// only name(.) and name() are currently supported
name|read
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|read
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|f
operator|.
name|params
operator|.
name|add
argument_list|(
operator|new
name|SelectorExpr
argument_list|(
name|currentSelector
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
elseif|else
if|if
condition|(
literal|"jcr:deref"
operator|.
name|equals
argument_list|(
name|functionName
argument_list|)
condition|)
block|{
comment|// TODO maybe support jcr:deref
throw|throw
name|getSyntaxError
argument_list|(
literal|"jcr:deref is not supported"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
literal|"rep:similar"
operator|.
name|equals
argument_list|(
name|functionName
argument_list|)
condition|)
block|{
comment|// TODO maybe support rep:similar
throw|throw
name|getSyntaxError
argument_list|(
literal|"rep:similar is not supported"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
literal|"rep:spellcheck"
operator|.
name|equals
argument_list|(
name|functionName
argument_list|)
condition|)
block|{
comment|// TODO maybe support rep:spellcheck as in
comment|// /jcr:root[rep:spellcheck('${query}')]/(rep:spellcheck())
throw|throw
name|getSyntaxError
argument_list|(
literal|"rep:spellcheck is not supported"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|getSyntaxError
argument_list|(
literal|"jcr:like | jcr:contains | jcr:score | xs:dateTime | "
operator|+
literal|"fn:lower-case | fn:upper-case | fn:name"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|readIf
parameter_list|(
name|String
name|token
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|isToken
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|read
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isToken
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|boolean
name|result
init|=
name|token
operator|.
name|equals
argument_list|(
name|currentToken
argument_list|)
operator|&&
operator|!
name|currentTokenQuoted
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
return|return
literal|true
return|;
block|}
name|addExpected
argument_list|(
name|token
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|read
parameter_list|(
name|String
name|expected
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
operator|!
name|expected
operator|.
name|equals
argument_list|(
name|currentToken
argument_list|)
operator|||
name|currentTokenQuoted
condition|)
block|{
throw|throw
name|getSyntaxError
argument_list|(
name|expected
argument_list|)
throw|;
block|}
name|read
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Property
name|readProperty
parameter_list|()
throws|throws
name|ParseException
block|{
if|if
condition|(
name|readIf
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
return|return
operator|new
name|Property
argument_list|(
name|currentSelector
argument_list|,
literal|"*"
argument_list|)
return|;
block|}
return|return
operator|new
name|Property
argument_list|(
name|currentSelector
argument_list|,
name|readIdentifier
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|String
name|readIdentifier
parameter_list|()
throws|throws
name|ParseException
block|{
if|if
condition|(
name|currentTokenType
operator|!=
name|IDENTIFIER
condition|)
block|{
throw|throw
name|getSyntaxError
argument_list|(
literal|"identifier"
argument_list|)
throw|;
block|}
name|String
name|s
init|=
name|currentToken
decl_stmt|;
name|read
argument_list|()
expr_stmt|;
return|return
name|s
return|;
block|}
specifier|private
name|void
name|addExpected
parameter_list|(
name|String
name|token
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|!=
literal|null
condition|)
block|{
name|expected
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initialize
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
name|query
operator|=
literal|""
expr_stmt|;
block|}
name|statement
operator|=
name|query
expr_stmt|;
name|int
name|len
init|=
name|query
operator|.
name|length
argument_list|()
operator|+
literal|1
decl_stmt|;
name|char
index|[]
name|command
init|=
operator|new
name|char
index|[
name|len
index|]
decl_stmt|;
name|int
index|[]
name|types
init|=
operator|new
name|int
index|[
name|len
index|]
decl_stmt|;
name|len
operator|--
expr_stmt|;
name|query
operator|.
name|getChars
argument_list|(
literal|0
argument_list|,
name|len
argument_list|,
name|command
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|command
index|[
name|len
index|]
operator|=
literal|' '
expr_stmt|;
name|int
name|startLoop
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|command
index|[
name|i
index|]
decl_stmt|;
name|int
name|type
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'@'
case|:
case|case
literal|'|'
case|:
case|case
literal|'/'
case|:
case|case
literal|'-'
case|:
case|case
literal|'('
case|:
case|case
literal|')'
case|:
case|case
literal|'{'
case|:
case|case
literal|'}'
case|:
case|case
literal|'*'
case|:
case|case
literal|','
case|:
case|case
literal|';'
case|:
case|case
literal|'+'
case|:
case|case
literal|'%'
case|:
case|case
literal|'?'
case|:
case|case
literal|'$'
case|:
case|case
literal|'['
case|:
case|case
literal|']'
case|:
name|type
operator|=
name|CHAR_SPECIAL_1
expr_stmt|;
break|break;
case|case
literal|'!'
case|:
case|case
literal|'<'
case|:
case|case
literal|'>'
case|:
case|case
literal|'='
case|:
name|type
operator|=
name|CHAR_SPECIAL_2
expr_stmt|;
break|break;
case|case
literal|'.'
case|:
name|type
operator|=
name|CHAR_DECIMAL
expr_stmt|;
break|break;
case|case
literal|'\''
case|:
name|type
operator|=
name|CHAR_STRING
expr_stmt|;
name|types
index|[
name|i
index|]
operator|=
name|CHAR_STRING
expr_stmt|;
name|startLoop
operator|=
name|i
expr_stmt|;
while|while
condition|(
name|command
index|[
operator|++
name|i
index|]
operator|!=
literal|'\''
condition|)
block|{
name|checkRunOver
argument_list|(
name|i
argument_list|,
name|len
argument_list|,
name|startLoop
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'\"'
case|:
name|type
operator|=
name|CHAR_STRING
expr_stmt|;
name|types
index|[
name|i
index|]
operator|=
name|CHAR_STRING
expr_stmt|;
name|startLoop
operator|=
name|i
expr_stmt|;
while|while
condition|(
name|command
index|[
operator|++
name|i
index|]
operator|!=
literal|'\"'
condition|)
block|{
name|checkRunOver
argument_list|(
name|i
argument_list|,
name|len
argument_list|,
name|startLoop
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|':'
case|:
case|case
literal|'_'
case|:
name|type
operator|=
name|CHAR_NAME
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|c
operator|>=
literal|'a'
operator|&&
name|c
operator|<=
literal|'z'
condition|)
block|{
name|type
operator|=
name|CHAR_NAME
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>=
literal|'A'
operator|&&
name|c
operator|<=
literal|'Z'
condition|)
block|{
name|type
operator|=
name|CHAR_NAME
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>=
literal|'0'
operator|&&
name|c
operator|<=
literal|'9'
condition|)
block|{
name|type
operator|=
name|CHAR_VALUE
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|Character
operator|.
name|isJavaIdentifierPart
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|type
operator|=
name|CHAR_NAME
expr_stmt|;
block|}
block|}
block|}
name|types
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|type
expr_stmt|;
block|}
name|statementChars
operator|=
name|command
expr_stmt|;
name|types
index|[
name|len
index|]
operator|=
name|CHAR_END
expr_stmt|;
name|characterTypes
operator|=
name|types
expr_stmt|;
name|parseIndex
operator|=
literal|0
expr_stmt|;
block|}
specifier|private
name|void
name|checkRunOver
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|startLoop
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|i
operator|>=
name|len
condition|)
block|{
name|parseIndex
operator|=
name|startLoop
expr_stmt|;
throw|throw
name|getSyntaxError
argument_list|()
throw|;
block|}
block|}
specifier|private
name|void
name|read
parameter_list|()
throws|throws
name|ParseException
block|{
name|currentTokenQuoted
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|expected
operator|!=
literal|null
condition|)
block|{
name|expected
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|int
index|[]
name|types
init|=
name|characterTypes
decl_stmt|;
name|int
name|i
init|=
name|parseIndex
decl_stmt|;
name|int
name|type
init|=
name|types
index|[
name|i
index|]
decl_stmt|;
while|while
condition|(
name|type
operator|==
literal|0
condition|)
block|{
name|type
operator|=
name|types
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
name|int
name|start
init|=
name|i
decl_stmt|;
name|char
index|[]
name|chars
init|=
name|statementChars
decl_stmt|;
name|char
name|c
init|=
name|chars
index|[
name|i
operator|++
index|]
decl_stmt|;
name|currentToken
operator|=
literal|""
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|CHAR_NAME
case|:
while|while
condition|(
literal|true
condition|)
block|{
name|type
operator|=
name|types
index|[
name|i
index|]
expr_stmt|;
comment|// the '-' can be part of a name,
comment|// for example in "fn:lower-case"
comment|// the '.' can be part of a name,
comment|// for example in "@offloading.status"
if|if
condition|(
name|type
operator|!=
name|CHAR_NAME
operator|&&
name|type
operator|!=
name|CHAR_VALUE
operator|&&
name|chars
index|[
name|i
index|]
operator|!=
literal|'-'
operator|&&
name|chars
index|[
name|i
index|]
operator|!=
literal|'.'
condition|)
block|{
break|break;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|currentToken
operator|=
name|statement
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentToken
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|getSyntaxError
argument_list|()
throw|;
block|}
name|currentTokenType
operator|=
name|IDENTIFIER
expr_stmt|;
name|parseIndex
operator|=
name|i
expr_stmt|;
return|return;
case|case
name|CHAR_SPECIAL_2
case|:
if|if
condition|(
name|types
index|[
name|i
index|]
operator|==
name|CHAR_SPECIAL_2
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
name|currentToken
operator|=
name|statement
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|currentTokenType
operator|=
name|KEYWORD
expr_stmt|;
name|parseIndex
operator|=
name|i
expr_stmt|;
break|break;
case|case
name|CHAR_SPECIAL_1
case|:
name|currentToken
operator|=
name|statement
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|i
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'+'
case|:
name|currentTokenType
operator|=
name|PLUS
expr_stmt|;
break|break;
case|case
literal|'-'
case|:
name|currentTokenType
operator|=
name|MINUS
expr_stmt|;
break|break;
case|case
literal|'('
case|:
name|currentTokenType
operator|=
name|OPEN
expr_stmt|;
break|break;
case|case
literal|')'
case|:
name|currentTokenType
operator|=
name|CLOSE
expr_stmt|;
break|break;
default|default:
name|currentTokenType
operator|=
name|KEYWORD
expr_stmt|;
block|}
name|parseIndex
operator|=
name|i
expr_stmt|;
return|return;
case|case
name|CHAR_VALUE
case|:
name|long
name|number
init|=
name|c
operator|-
literal|'0'
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|c
operator|=
name|chars
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|c
argument_list|<
literal|'0'
operator|||
name|c
argument_list|>
literal|'9'
condition|)
block|{
if|if
condition|(
name|c
operator|==
literal|'.'
condition|)
block|{
name|readDecimal
argument_list|(
name|start
argument_list|,
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|c
operator|==
literal|'E'
operator|||
name|c
operator|==
literal|'e'
condition|)
block|{
name|readDecimal
argument_list|(
name|start
argument_list|,
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
name|currentTokenType
operator|=
name|VALUE_NUMBER
expr_stmt|;
name|currentToken
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|number
argument_list|)
expr_stmt|;
name|parseIndex
operator|=
name|i
expr_stmt|;
break|break;
block|}
name|number
operator|=
name|number
operator|*
literal|10
operator|+
operator|(
name|c
operator|-
literal|'0'
operator|)
expr_stmt|;
if|if
condition|(
name|number
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|readDecimal
argument_list|(
name|start
argument_list|,
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
name|i
operator|++
expr_stmt|;
block|}
return|return;
case|case
name|CHAR_DECIMAL
case|:
if|if
condition|(
name|types
index|[
name|i
index|]
operator|!=
name|CHAR_VALUE
condition|)
block|{
name|currentTokenType
operator|=
name|KEYWORD
expr_stmt|;
name|currentToken
operator|=
literal|"."
expr_stmt|;
name|parseIndex
operator|=
name|i
expr_stmt|;
return|return;
block|}
name|readDecimal
argument_list|(
name|i
operator|-
literal|1
argument_list|,
name|i
argument_list|)
expr_stmt|;
return|return;
case|case
name|CHAR_STRING
case|:
if|if
condition|(
name|chars
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'\''
condition|)
block|{
name|readString
argument_list|(
name|i
argument_list|,
literal|'\''
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|readString
argument_list|(
name|i
argument_list|,
literal|'\"'
argument_list|)
expr_stmt|;
block|}
return|return;
case|case
name|CHAR_END
case|:
name|currentToken
operator|=
literal|""
expr_stmt|;
name|currentTokenType
operator|=
name|END
expr_stmt|;
name|parseIndex
operator|=
name|i
expr_stmt|;
return|return;
default|default:
throw|throw
name|getSyntaxError
argument_list|()
throw|;
block|}
block|}
specifier|private
name|void
name|readString
parameter_list|(
name|int
name|i
parameter_list|,
name|char
name|end
parameter_list|)
throws|throws
name|ParseException
block|{
name|char
index|[]
name|chars
init|=
name|statementChars
decl_stmt|;
name|String
name|result
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
for|for
control|(
name|int
name|begin
init|=
name|i
init|;
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|chars
index|[
name|i
index|]
operator|==
name|end
condition|)
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|statement
operator|.
name|substring
argument_list|(
name|begin
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|+=
name|statement
operator|.
name|substring
argument_list|(
name|begin
operator|-
literal|1
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
name|chars
index|[
operator|++
name|i
index|]
operator|!=
name|end
condition|)
block|{
break|break;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|currentToken
operator|=
name|result
expr_stmt|;
name|parseIndex
operator|=
name|i
expr_stmt|;
name|currentTokenType
operator|=
name|VALUE_STRING
expr_stmt|;
block|}
specifier|private
name|void
name|readDecimal
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|ParseException
block|{
name|char
index|[]
name|chars
init|=
name|statementChars
decl_stmt|;
name|int
index|[]
name|types
init|=
name|characterTypes
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|t
init|=
name|types
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|t
operator|!=
name|CHAR_DECIMAL
operator|&&
name|t
operator|!=
name|CHAR_VALUE
condition|)
block|{
break|break;
block|}
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|chars
index|[
name|i
index|]
operator|==
literal|'E'
operator|||
name|chars
index|[
name|i
index|]
operator|==
literal|'e'
condition|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|chars
index|[
name|i
index|]
operator|==
literal|'+'
operator|||
name|chars
index|[
name|i
index|]
operator|==
literal|'-'
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|types
index|[
name|i
index|]
operator|!=
name|CHAR_VALUE
condition|)
block|{
throw|throw
name|getSyntaxError
argument_list|()
throw|;
block|}
while|while
condition|(
name|types
index|[
operator|++
name|i
index|]
operator|==
name|CHAR_VALUE
condition|)
block|{
comment|// go until the first non-number
block|}
block|}
name|parseIndex
operator|=
name|i
expr_stmt|;
name|String
name|sub
init|=
name|statement
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|i
argument_list|)
decl_stmt|;
try|try
block|{
operator|new
name|BigDecimal
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Data conversion error converting "
operator|+
name|sub
operator|+
literal|" to BigDecimal: "
operator|+
name|e
argument_list|,
name|i
argument_list|)
throw|;
block|}
name|currentToken
operator|=
name|sub
expr_stmt|;
name|currentTokenType
operator|=
name|VALUE_NUMBER
expr_stmt|;
block|}
specifier|private
name|ParseException
name|getSyntaxError
parameter_list|()
block|{
if|if
condition|(
name|expected
operator|==
literal|null
operator|||
name|expected
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|getSyntaxError
argument_list|(
literal|null
argument_list|)
return|;
block|}
else|else
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|exp
range|:
name|expected
control|)
block|{
if|if
condition|(
name|buff
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
return|return
name|getSyntaxError
argument_list|(
name|buff
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
name|ParseException
name|getSyntaxError
parameter_list|(
name|String
name|expected
parameter_list|)
block|{
name|int
name|index
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|parseIndex
argument_list|,
name|statement
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|query
init|=
name|statement
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
operator|+
literal|"(*)"
operator|+
name|statement
operator|.
name|substring
argument_list|(
name|index
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|expected
operator|!=
literal|null
condition|)
block|{
name|query
operator|+=
literal|"; expected: "
operator|+
name|expected
expr_stmt|;
block|}
return|return
operator|new
name|ParseException
argument_list|(
literal|"Query:\n"
operator|+
name|query
argument_list|,
name|index
argument_list|)
return|;
block|}
comment|/**      * A selector.      */
specifier|static
class|class
name|Selector
block|{
comment|/**          * The selector name.          */
name|String
name|name
decl_stmt|;
comment|/**          * Whether this is the only selector in the query.          */
name|boolean
name|onlySelector
decl_stmt|;
comment|/**          * The node type, if set, or null.          */
name|String
name|nodeType
decl_stmt|;
comment|/**          * Whether this is a child node of the previous selector or a given path.          * Examples:          *<ul><li>/jcr:root/*          *</li><li>/jcr:root/test/*          *</li><li>/jcr:root/element()          *</li><li>/jcr:root/element(*)          *</li></ul>          */
name|boolean
name|isChild
decl_stmt|;
comment|/**          * Whether this is a parent node of the previous selector or given path.          * Examples:          *<ul><li>testroot//child/..[@foo1]          *</li><li>/jcr:root/test/descendant/..[@test]          *</li></ul>          */
name|boolean
name|isParent
decl_stmt|;
comment|/**          * Whether this is a descendant of the previous selector or a given path.          * Examples:          *<ul><li>/jcr:root//descendant          *</li><li>/jcr:root/test//descendant          *</li><li>/jcr:root[@x]          *</li><li>/jcr:root (just by itself)          *</li></ul>          */
name|boolean
name|isDescendant
decl_stmt|;
comment|/**          * The path (only used for the first selector).          */
name|String
name|path
init|=
literal|""
decl_stmt|;
comment|/**          * The node name, if set.          */
name|String
name|nodeName
decl_stmt|;
comment|/**          * The condition for this selector.          */
name|Expression
name|condition
decl_stmt|;
comment|/**          * The join condition from the previous selector.          */
name|Expression
name|joinCondition
decl_stmt|;
block|}
comment|/**      * An expression.      */
specifier|abstract
specifier|static
class|class
name|Expression
block|{
specifier|static
specifier|final
name|int
name|PRECEDENCE_OR
init|=
literal|1
decl_stmt|,
name|PRECEDENCE_AND
init|=
literal|2
decl_stmt|,
name|PRECEDENCE_CONDITION
init|=
literal|3
decl_stmt|,
name|PRECEDENCE_OPERAND
init|=
literal|4
decl_stmt|;
comment|/**          * Whether this is a condition.          *           * @return true if it is           */
name|boolean
name|isCondition
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**          * Get the operator / operation precedence. The JCR specification uses:          * 1=OR, 2=AND, 3=condition, 4=operand            *           * @return the precedence (as an example, multiplication needs to return          *         a higher number than addition)          */
name|int
name|getPrecedence
parameter_list|()
block|{
return|return
name|PRECEDENCE_OPERAND
return|;
block|}
comment|/**          * Get the column alias name of an expression. For a property, this is the          * property name (no matter how many selectors the query contains); for          * other expressions it matches the toString() method.          *           * @return the simple column name          */
name|String
name|getColumnAliasName
parameter_list|()
block|{
return|return
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * A selector parameter.      */
specifier|static
class|class
name|SelectorExpr
extends|extends
name|Expression
block|{
specifier|private
specifier|final
name|Selector
name|selector
decl_stmt|;
name|SelectorExpr
parameter_list|(
name|Selector
name|selector
parameter_list|)
block|{
name|this
operator|.
name|selector
operator|=
name|selector
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|selector
operator|.
name|name
return|;
block|}
block|}
comment|/**      * A literal expression.      */
specifier|static
class|class
name|Literal
extends|extends
name|Expression
block|{
specifier|final
name|String
name|value
decl_stmt|;
name|Literal
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
specifier|static
name|Expression
name|newBoolean
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
return|return
operator|new
name|Literal
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|Literal
name|newNumber
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|Literal
argument_list|(
name|s
argument_list|)
return|;
block|}
specifier|static
name|Literal
name|newString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|Literal
argument_list|(
name|SQL2Parser
operator|.
name|escapeStringLiteral
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
comment|/**      * A property expression.      */
specifier|static
class|class
name|Property
extends|extends
name|Expression
block|{
specifier|final
name|Selector
name|selector
decl_stmt|;
specifier|final
name|String
name|name
decl_stmt|;
name|Property
parameter_list|(
name|Selector
name|selector
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|selector
operator|=
name|selector
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|selector
operator|.
name|onlySelector
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
name|selector
operator|.
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buff
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getColumnAliasName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
comment|/**      * A condition.      */
specifier|static
class|class
name|Condition
extends|extends
name|Expression
block|{
specifier|final
name|Expression
name|left
decl_stmt|;
specifier|final
name|String
name|operator
decl_stmt|;
name|Expression
name|right
decl_stmt|;
specifier|final
name|int
name|precedence
decl_stmt|;
comment|/**          * Create a new condition.          *           * @param left the left hand side operator, or null          * @param operator the operator          * @param right the right hand side operator, or null          * @param precedence the operator precedence (Expression.PRECEDENCE_...)          */
name|Condition
parameter_list|(
name|Expression
name|left
parameter_list|,
name|String
name|operator
parameter_list|,
name|Expression
name|right
parameter_list|,
name|int
name|precedence
parameter_list|)
block|{
name|this
operator|.
name|left
operator|=
name|left
expr_stmt|;
name|this
operator|.
name|operator
operator|=
name|operator
expr_stmt|;
name|this
operator|.
name|right
operator|=
name|right
expr_stmt|;
name|this
operator|.
name|precedence
operator|=
name|precedence
expr_stmt|;
block|}
annotation|@
name|Override
name|int
name|getPrecedence
parameter_list|()
block|{
return|return
name|precedence
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|left
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|left
operator|.
name|getPrecedence
argument_list|()
operator|<
name|precedence
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
operator|.
name|append
argument_list|(
name|left
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buff
operator|.
name|append
argument_list|(
name|left
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|operator
argument_list|)
expr_stmt|;
if|if
condition|(
name|right
operator|!=
literal|null
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
if|if
condition|(
name|right
operator|.
name|getPrecedence
argument_list|()
operator|<
name|precedence
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
operator|.
name|append
argument_list|(
name|right
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buff
operator|.
name|append
argument_list|(
name|right
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
name|boolean
name|isCondition
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**      * A function call.      */
specifier|static
class|class
name|Function
extends|extends
name|Expression
block|{
specifier|final
name|String
name|name
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|Expression
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
name|Function
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
name|boolean
name|isCondition
parameter_list|()
block|{
return|return
name|name
operator|.
name|equals
argument_list|(
literal|"contains"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"not"
argument_list|)
return|;
block|}
block|}
comment|/**      * A cast operation.      */
specifier|static
class|class
name|Cast
extends|extends
name|Expression
block|{
specifier|final
name|Expression
name|expr
decl_stmt|;
specifier|final
name|String
name|type
decl_stmt|;
name|Cast
parameter_list|(
name|Expression
name|expr
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|expr
operator|=
name|expr
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"cast("
argument_list|)
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|expr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|" as "
argument_list|)
operator|.
name|append
argument_list|(
name|type
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
name|boolean
name|isCondition
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * An order by expression.      */
specifier|static
class|class
name|Order
block|{
name|boolean
name|descending
decl_stmt|;
name|Expression
name|expr
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|expr
operator|+
operator|(
name|descending
condition|?
literal|" desc"
else|:
literal|""
operator|)
return|;
block|}
block|}
block|}
end_class

end_unit

