begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
operator|.
name|TYPENAME_STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|DECLARING_NODE_TYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexStatistics
operator|.
name|SYNTHETICALLY_FALLIABLE_FIELD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|EVALUATE_PATH_RESTRICTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|INDEX_DATA_CHILD_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|INDEX_RULES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|ORDERED_PROP_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|PROP_FUNCTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|VERSION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|TestUtil
operator|.
name|NT_TEST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|TestUtil
operator|.
name|child
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|TestUtil
operator|.
name|registerTestNodeType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|FunctionIndexProcessor
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneIndexHelper
operator|.
name|newLuceneIndexDefinition
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneIndexHelper
operator|.
name|newLucenePropertyIndexDefinition
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
operator|.
name|createProperty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContent
operator|.
name|INITIAL_CONTENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexPlanner
operator|.
name|PropertyIndexResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|reader
operator|.
name|DefaultIndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|reader
operator|.
name|LuceneIndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|reader
operator|.
name|LuceneIndexReaderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|IndexDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|NodeStateNodeTypeInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|QueryEngineSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|NodeTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|NodeTypeInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|SelectorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextAnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextContains
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
operator|.
name|FilterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
operator|.
name|OrderEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_class
specifier|public
class|class
name|IndexPlannerTest
block|{
specifier|private
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
specifier|private
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
annotation|@
name|After
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|IndexPlanner
operator|.
name|setUseActualEntryCount
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|planForSortField
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|ORDERED_PROP_NAMES
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|OrderEntry
argument_list|(
literal|"foo"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
name|OrderEntry
operator|.
name|Order
operator|.
name|ASCENDING
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pr
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
operator|.
name|isUniquePathsRequired
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noPlanForSortOnlyByScore
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|createFilter
argument_list|(
literal|"nt:file"
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|OrderEntry
argument_list|(
literal|"jcr:score"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
name|OrderEntry
operator|.
name|Order
operator|.
name|ASCENDING
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fullTextQueryNonFulltextIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|setFullTextConstraint
argument_list|(
name|FullTextParser
operator|.
name|parse
argument_list|(
literal|"."
argument_list|,
literal|"mountain"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noApplicableRule
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|IndexConstants
operator|.
name|DECLARING_NODE_TYPES
argument_list|,
name|of
argument_list|(
literal|"nt:folder"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:folder"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeTypeInheritance
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Index if for nt:hierarchyNode and query is for nt:folder
comment|//as nt:folder extends nt:hierarchyNode we should get a plan
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|IndexConstants
operator|.
name|DECLARING_NODE_TYPES
argument_list|,
name|of
argument_list|(
literal|"nt:hierarchyNode"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:folder"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noMatchingProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"bar"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|matchingProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|pr
argument_list|(
name|plan
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pr
argument_list|(
name|plan
argument_list|)
operator|.
name|evaluateNonFullTextConstraints
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|purePropertyIndexAndPathRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|EVALUATE_PATH_RESTRICTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictPath
argument_list|(
literal|"/content"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|ALL_CHILDREN
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fulltextIndexAndPathRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|EVALUATE_PATH_RESTRICTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|defn
operator|=
name|IndexDefinition
operator|.
name|updateDefinition
argument_list|(
name|defn
operator|.
name|getNodeState
argument_list|()
operator|.
name|builder
argument_list|()
argument_list|)
expr_stmt|;
name|NodeBuilder
name|foob
init|=
name|getNode
argument_list|(
name|defn
argument_list|,
literal|"indexRules/nt:base/properties/foo"
argument_list|)
decl_stmt|;
name|foob
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE_SCOPE_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictPath
argument_list|(
literal|"/content"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|ALL_CHILDREN
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
comment|//For case when a full text property is present then path restriction can be
comment|//evaluated
name|assertNotNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fulltextIndexAndNodeTypeRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|EVALUATE_PATH_RESTRICTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|DECLARING_NODE_TYPES
argument_list|,
name|of
argument_list|(
literal|"nt:file"
argument_list|)
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
name|defn
operator|=
name|IndexDefinition
operator|.
name|updateDefinition
argument_list|(
name|defn
operator|.
name|getNodeState
argument_list|()
operator|.
name|builder
argument_list|()
argument_list|)
expr_stmt|;
name|NodeBuilder
name|foob
init|=
name|getNode
argument_list|(
name|defn
argument_list|,
literal|"indexRules/nt:file/properties/foo"
argument_list|)
decl_stmt|;
name|foob
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE_SCOPE_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:file"
argument_list|)
decl_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
comment|//For case when a full text property is present then path restriction can be
comment|//evaluated
name|assertNotNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|pureNodeTypeWithEvaluatePathRestrictionEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|NodeBuilder
name|defn
init|=
name|newLuceneIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"lucene"
argument_list|,
name|of
argument_list|(
name|TYPENAME_STRING
argument_list|)
argument_list|)
decl_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|EVALUATE_PATH_RESTRICTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|useV2
argument_list|(
name|defn
argument_list|)
expr_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:file"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictPath
argument_list|(
literal|"/"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|ALL_CHILDREN
argument_list|)
expr_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
comment|// /jcr:root//element(*, nt:file)
comment|//For queries like above Fulltext index should not return a plan
name|assertNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|purePropertyIndexAndNodeTypeRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|EVALUATE_PATH_RESTRICTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|DECLARING_NODE_TYPES
argument_list|,
name|of
argument_list|(
literal|"nt:file"
argument_list|)
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:file"
argument_list|)
decl_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|purePropertyIndexAndNodeTypeRestriction2
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|EVALUATE_PATH_RESTRICTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|defn
operator|=
name|IndexDefinition
operator|.
name|updateDefinition
argument_list|(
name|defn
operator|.
name|getNodeState
argument_list|()
operator|.
name|builder
argument_list|()
argument_list|)
expr_stmt|;
name|NodeBuilder
name|foob
init|=
name|getNode
argument_list|(
name|defn
argument_list|,
literal|"indexRules/nt:base/properties/foo"
argument_list|)
decl_stmt|;
name|foob
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE_SCOPE_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:file"
argument_list|)
decl_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
comment|//No plan should be result for a index with just a rule for nt:base
name|assertNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|purePropertyIndexAndNodeTypeRestriction3
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|EVALUATE_PATH_RESTRICTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|DECLARING_NODE_TYPES
argument_list|,
name|of
argument_list|(
literal|"nt:file"
argument_list|)
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
name|defn
operator|=
name|IndexDefinition
operator|.
name|updateDefinition
argument_list|(
name|defn
operator|.
name|getNodeState
argument_list|()
operator|.
name|builder
argument_list|()
argument_list|)
expr_stmt|;
name|NodeBuilder
name|foob
init|=
name|getNode
argument_list|(
name|defn
argument_list|,
literal|"indexRules/nt:file/properties/foo"
argument_list|)
decl_stmt|;
name|foob
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE_SCOPE_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:file"
argument_list|)
decl_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|pr
argument_list|(
name|plan
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pr
argument_list|(
name|plan
argument_list|)
operator|.
name|evaluateNodeTypeRestriction
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|worksWithIndexFormatV2Onwards
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|NodeBuilder
name|nb
init|=
name|newLuceneIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"lucene"
argument_list|,
name|of
argument_list|(
name|TYPENAME_STRING
argument_list|)
argument_list|)
decl_stmt|;
comment|//Dummy data node to ensure that IndexDefinition does not consider it
comment|//as a fresh indexing case
name|nb
operator|.
name|child
argument_list|(
name|INDEX_DATA_CHILD_NAME
argument_list|)
expr_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|setFullTextConstraint
argument_list|(
name|FullTextParser
operator|.
name|parse
argument_list|(
literal|"."
argument_list|,
literal|"mountain"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|propertyIndexCost
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|long
name|numofDocs
init|=
name|IndexDefinition
operator|.
name|DEFAULT_ENTRY_COUNT
operator|+
literal|1000
decl_stmt|;
name|IndexPlanner
operator|.
name|setUseActualEntryCount
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|IndexDefinition
name|idxDefn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|idxDefn
argument_list|,
name|numofDocs
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
comment|//For propertyIndex if entry count (default to IndexDefinition.DEFAULT_ENTRY_COUNT) is
comment|//less than numOfDoc then that would be preferred
name|assertEquals
argument_list|(
name|idxDefn
operator|.
name|getEntryCount
argument_list|()
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|plan
operator|.
name|getCostPerExecution
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|plan
operator|.
name|getCostPerEntry
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|propertyIndexCost2
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|COST_PER_ENTRY
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|COST_PER_EXECUTION
argument_list|,
literal|3.0
argument_list|)
expr_stmt|;
name|long
name|numofDocs
init|=
name|IndexDefinition
operator|.
name|DEFAULT_ENTRY_COUNT
operator|-
literal|100
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|,
name|numofDocs
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|documentsPerValue
argument_list|(
name|numofDocs
argument_list|)
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.0
argument_list|,
name|plan
operator|.
name|getCostPerExecution
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|plan
operator|.
name|getCostPerEntry
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|propertyIndexCostActualOverriddenByEntryCount
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|long
name|entryCount
init|=
name|IndexDefinition
operator|.
name|DEFAULT_ENTRY_COUNT
operator|-
literal|100
decl_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|ENTRY_COUNT_PROPERTY_NAME
argument_list|,
name|entryCount
argument_list|)
expr_stmt|;
name|long
name|numofDocs
init|=
name|IndexDefinition
operator|.
name|DEFAULT_ENTRY_COUNT
operator|+
literal|100
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|,
name|numofDocs
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|entryCount
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|propertyIndexCostActualByDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|long
name|numofDocs
init|=
name|IndexDefinition
operator|.
name|DEFAULT_ENTRY_COUNT
operator|+
literal|100
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|,
name|numofDocs
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|documentsPerValue
argument_list|(
name|numofDocs
argument_list|)
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fulltextIndexCost
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|NodeBuilder
name|defn
init|=
name|newLuceneIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"lucene"
argument_list|,
name|of
argument_list|(
name|TYPENAME_STRING
argument_list|)
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|useV2
argument_list|(
name|defn
argument_list|)
expr_stmt|;
name|long
name|numofDocs
init|=
name|IndexDefinition
operator|.
name|DEFAULT_ENTRY_COUNT
operator|+
literal|1000
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|,
name|numofDocs
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|setFullTextConstraint
argument_list|(
name|FullTextParser
operator|.
name|parse
argument_list|(
literal|"."
argument_list|,
literal|"mountain"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numofDocs
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nullPropertyCheck
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
literal|"For null checks no plan should be returned"
argument_list|,
name|plan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nullPropertyCheck2
parameter_list|()
throws|throws
name|Exception
block|{
name|root
operator|=
name|registerTestNodeType
argument_list|(
name|builder
argument_list|)
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|NodeBuilder
name|rules
init|=
name|defn
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"oak:TestNode/properties/prop2"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NULL_CHECK_ENABLED
argument_list|,
literal|true
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_PROPERTY_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IndexDefinition
name|idxDefn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"test"
argument_list|)
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|idxDefn
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
name|NT_TEST
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"For null checks plan should be returned with nullCheckEnabled"
argument_list|,
name|plan
argument_list|)
expr_stmt|;
name|IndexPlanner
operator|.
name|PlanResult
name|pr
init|=
operator|(
name|IndexPlanner
operator|.
name|PlanResult
operator|)
name|plan
operator|.
name|getAttribute
argument_list|(
name|LucenePropertyIndex
operator|.
name|ATTR_PLAN_RESULT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|pr
operator|.
name|getPropDefn
argument_list|(
name|filter
operator|.
name|getPropertyRestriction
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noPathRestHasQueryPath
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|IndexConstants
operator|.
name|QUERY_PATHS
argument_list|,
name|of
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictPath
argument_list|(
literal|"/test2"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|ALL_CHILDREN
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|hasPathRestHasMatchingQueryPaths
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|IndexConstants
operator|.
name|QUERY_PATHS
argument_list|,
name|of
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictPath
argument_list|(
literal|"/test/a"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|ALL_CHILDREN
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|hasPathRestHasNoExplicitQueryPaths
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictPath
argument_list|(
literal|"/test2"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|ALL_CHILDREN
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noPlanForFulltextQueryAndOnlyAnalyzedProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|EVALUATE_PATH_RESTRICTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|defn
operator|=
name|IndexDefinition
operator|.
name|updateDefinition
argument_list|(
name|defn
operator|.
name|getNodeState
argument_list|()
operator|.
name|builder
argument_list|()
argument_list|)
expr_stmt|;
name|NodeBuilder
name|foob
init|=
name|getNode
argument_list|(
name|defn
argument_list|,
literal|"indexRules/nt:base/properties/foo"
argument_list|)
decl_stmt|;
name|foob
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|setFullTextConstraint
argument_list|(
name|FullTextParser
operator|.
name|parse
argument_list|(
literal|"."
argument_list|,
literal|"mountain"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noPlanForNodeTypeQueryAndOnlyAnalyzedProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|EVALUATE_PATH_RESTRICTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|DECLARING_NODE_TYPES
argument_list|,
name|of
argument_list|(
literal|"nt:file"
argument_list|)
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
name|defn
operator|=
name|IndexDefinition
operator|.
name|updateDefinition
argument_list|(
name|defn
operator|.
name|getNodeState
argument_list|()
operator|.
name|builder
argument_list|()
argument_list|)
expr_stmt|;
name|NodeBuilder
name|foob
init|=
name|getNode
argument_list|(
name|defn
argument_list|,
literal|"indexRules/nt:file/properties/foo"
argument_list|)
decl_stmt|;
name|foob
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:file"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictPath
argument_list|(
literal|"/foo"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|ALL_CHILDREN
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexedButZeroWeightProps
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDefinitionBuilder
name|defnb
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|weight
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|build
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|defn
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"bar"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
comment|//Even though foo is indexed it would not be considered for a query involving just foo
name|assertNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan1
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plan1
argument_list|)
expr_stmt|;
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"bar"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan2
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plan2
argument_list|)
expr_stmt|;
comment|// Since, the index has no entries for "bar", estimated entry count for plan2 would be 0
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plan2
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|plan2
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|,
name|lessThan
argument_list|(
name|plan1
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pr
argument_list|(
name|plan2
argument_list|)
operator|.
name|hasProperty
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pr
argument_list|(
name|plan2
argument_list|)
operator|.
name|hasProperty
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//------ Suggestion/spellcheck plan tests
annotation|@
name|Test
specifier|public
name|void
name|nonSuggestIndex
parameter_list|()
throws|throws
name|Exception
block|{
comment|//An index which doesn't define any property to support suggestions shouldn't turn up in plan.
name|String
name|indexNodeType
init|=
literal|"nt:base"
decl_stmt|;
name|String
name|queryNodeType
init|=
literal|"nt:base"
decl_stmt|;
name|boolean
name|enableSuggestionIndex
init|=
literal|false
decl_stmt|;
name|boolean
name|enableSpellcheckIndex
init|=
literal|false
decl_stmt|;
name|boolean
name|queryForSugggestion
init|=
literal|true
decl_stmt|;
name|IndexNode
name|node
init|=
name|createSuggestionOrSpellcheckIndex
argument_list|(
name|indexNodeType
argument_list|,
name|enableSuggestionIndex
argument_list|,
name|enableSpellcheckIndex
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|getSuggestOrSpellcheckIndexPlan
argument_list|(
name|node
argument_list|,
name|queryNodeType
argument_list|,
name|queryForSugggestion
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nonSpellcheckIndex
parameter_list|()
throws|throws
name|Exception
block|{
comment|//An index which doesn't define any property to support spell check shouldn't turn up in plan.
name|String
name|indexNodeType
init|=
literal|"nt:base"
decl_stmt|;
name|String
name|queryNodeType
init|=
literal|"nt:base"
decl_stmt|;
name|boolean
name|enableSuggestionIndex
init|=
literal|false
decl_stmt|;
name|boolean
name|enableSpellcheckIndex
init|=
literal|false
decl_stmt|;
name|boolean
name|queryForSugggestion
init|=
literal|false
decl_stmt|;
name|IndexNode
name|node
init|=
name|createSuggestionOrSpellcheckIndex
argument_list|(
name|indexNodeType
argument_list|,
name|enableSuggestionIndex
argument_list|,
name|enableSpellcheckIndex
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|getSuggestOrSpellcheckIndexPlan
argument_list|(
name|node
argument_list|,
name|queryNodeType
argument_list|,
name|queryForSugggestion
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|simpleSuggestIndexPlan
parameter_list|()
throws|throws
name|Exception
block|{
comment|//An index defining a property for suggestions should turn up in plan.
name|String
name|indexNodeType
init|=
literal|"nt:base"
decl_stmt|;
name|String
name|queryNodeType
init|=
literal|"nt:base"
decl_stmt|;
name|boolean
name|enableSuggestionIndex
init|=
literal|true
decl_stmt|;
name|boolean
name|enableSpellcheckIndex
init|=
literal|false
decl_stmt|;
name|boolean
name|queryForSugggestion
init|=
literal|true
decl_stmt|;
name|IndexNode
name|node
init|=
name|createSuggestionOrSpellcheckIndex
argument_list|(
name|indexNodeType
argument_list|,
name|enableSuggestionIndex
argument_list|,
name|enableSpellcheckIndex
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|getSuggestOrSpellcheckIndexPlan
argument_list|(
name|node
argument_list|,
name|queryNodeType
argument_list|,
name|queryForSugggestion
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pr
argument_list|(
name|plan
argument_list|)
operator|.
name|isUniquePathsRequired
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|simpleSpellcheckIndexPlan
parameter_list|()
throws|throws
name|Exception
block|{
comment|//An index defining a property for spellcheck should turn up in plan.
name|String
name|indexNodeType
init|=
literal|"nt:base"
decl_stmt|;
name|String
name|queryNodeType
init|=
literal|"nt:base"
decl_stmt|;
name|boolean
name|enableSuggestionIndex
init|=
literal|false
decl_stmt|;
name|boolean
name|enableSpellcheckIndex
init|=
literal|true
decl_stmt|;
name|boolean
name|queryForSugggestion
init|=
literal|false
decl_stmt|;
name|IndexNode
name|node
init|=
name|createSuggestionOrSpellcheckIndex
argument_list|(
name|indexNodeType
argument_list|,
name|enableSuggestionIndex
argument_list|,
name|enableSpellcheckIndex
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|getSuggestOrSpellcheckIndexPlan
argument_list|(
name|node
argument_list|,
name|queryNodeType
argument_list|,
name|queryForSugggestion
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pr
argument_list|(
name|plan
argument_list|)
operator|.
name|isUniquePathsRequired
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|suggestionIndexingRuleHierarchy
parameter_list|()
throws|throws
name|Exception
block|{
comment|//An index defining a property for suggestion on a base type shouldn't turn up in plan.
name|String
name|indexNodeType
init|=
literal|"nt:base"
decl_stmt|;
name|String
name|queryNodeType
init|=
literal|"nt:unstructured"
decl_stmt|;
name|boolean
name|enableSuggestionIndex
init|=
literal|true
decl_stmt|;
name|boolean
name|enableSpellcheckIndex
init|=
literal|false
decl_stmt|;
name|boolean
name|queryForSugggestion
init|=
literal|true
decl_stmt|;
name|IndexNode
name|node
init|=
name|createSuggestionOrSpellcheckIndex
argument_list|(
name|indexNodeType
argument_list|,
name|enableSuggestionIndex
argument_list|,
name|enableSpellcheckIndex
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|getSuggestOrSpellcheckIndexPlan
argument_list|(
name|node
argument_list|,
name|queryNodeType
argument_list|,
name|queryForSugggestion
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|spellcheckIndexingRuleHierarchy
parameter_list|()
throws|throws
name|Exception
block|{
comment|//An index defining a property for spellcheck on a base type shouldn't turn up in plan.
name|String
name|indexNodeType
init|=
literal|"nt:base"
decl_stmt|;
name|String
name|queryNodeType
init|=
literal|"nt:unstructured"
decl_stmt|;
name|boolean
name|enableSuggestionIndex
init|=
literal|false
decl_stmt|;
name|boolean
name|enableSpellcheckIndex
init|=
literal|true
decl_stmt|;
name|boolean
name|queryForSugggestion
init|=
literal|false
decl_stmt|;
name|IndexNode
name|node
init|=
name|createSuggestionOrSpellcheckIndex
argument_list|(
name|indexNodeType
argument_list|,
name|enableSuggestionIndex
argument_list|,
name|enableSpellcheckIndex
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|getSuggestOrSpellcheckIndexPlan
argument_list|(
name|node
argument_list|,
name|queryNodeType
argument_list|,
name|queryForSugggestion
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fullTextQuery_RelativePath1
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|defn
operator|=
name|IndexDefinition
operator|.
name|updateDefinition
argument_list|(
name|defn
operator|.
name|getNodeState
argument_list|()
operator|.
name|builder
argument_list|()
argument_list|)
expr_stmt|;
name|NodeBuilder
name|foob
init|=
name|getNode
argument_list|(
name|defn
argument_list|,
literal|"indexRules/nt:base/properties/foo"
argument_list|)
decl_stmt|;
name|foob
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
name|createPlannerForFulltext
argument_list|(
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|FullTextParser
operator|.
name|parse
argument_list|(
literal|"bar"
argument_list|,
literal|"mountain"
argument_list|)
argument_list|)
decl_stmt|;
comment|//No plan for unindex property
name|assertNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fullTextQuery_IndexAllProps
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"allProps"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
comment|//Index all props and then perform fulltext
name|defn
operator|=
name|IndexDefinition
operator|.
name|updateDefinition
argument_list|(
name|defn
operator|.
name|getNodeState
argument_list|()
operator|.
name|builder
argument_list|()
argument_list|)
expr_stmt|;
name|NodeBuilder
name|foob
init|=
name|getNode
argument_list|(
name|defn
argument_list|,
literal|"indexRules/nt:base/properties/allProps"
argument_list|)
decl_stmt|;
name|foob
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
name|LuceneIndexConstants
operator|.
name|REGEX_ALL_PROPS
argument_list|)
expr_stmt|;
name|foob
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|foob
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_IS_REGEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FullTextExpression
name|exp
init|=
name|FullTextParser
operator|.
name|parse
argument_list|(
literal|"bar"
argument_list|,
literal|"mountain OR valley"
argument_list|)
decl_stmt|;
name|exp
operator|=
operator|new
name|FullTextContains
argument_list|(
literal|"bar"
argument_list|,
literal|"mountain OR valley"
argument_list|,
name|exp
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
name|createPlannerForFulltext
argument_list|(
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|exp
argument_list|)
decl_stmt|;
comment|//No plan for unindex property
name|assertNotNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fullTextQuery_IndexAllProps_NodePathQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"allProps"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
comment|//Index all props and then perform fulltext
name|defn
operator|=
name|IndexDefinition
operator|.
name|updateDefinition
argument_list|(
name|defn
operator|.
name|getNodeState
argument_list|()
operator|.
name|builder
argument_list|()
argument_list|)
expr_stmt|;
name|NodeBuilder
name|foob
init|=
name|getNode
argument_list|(
name|defn
argument_list|,
literal|"indexRules/nt:base/properties/allProps"
argument_list|)
decl_stmt|;
name|foob
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
name|LuceneIndexConstants
operator|.
name|REGEX_ALL_PROPS
argument_list|)
expr_stmt|;
name|foob
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|foob
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE_SCOPE_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|foob
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_IS_REGEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//where contains('jcr:content/*', 'mountain OR valley') can be evaluated by index
comment|//on nt:base by evaluating on '.' and then checking if node name is 'jcr:content'
name|IndexPlanner
name|planner
init|=
name|createPlannerForFulltext
argument_list|(
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|FullTextParser
operator|.
name|parse
argument_list|(
literal|"jcr:content/*"
argument_list|,
literal|"mountain OR valley"
argument_list|)
argument_list|)
decl_stmt|;
comment|//No plan for unindex property
name|assertNotNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fullTextQuery_IndexAllProps_AggregatedNodePathQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"allProps"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
comment|//Index all props and then perform fulltext
name|defn
operator|=
name|IndexDefinition
operator|.
name|updateDefinition
argument_list|(
name|defn
operator|.
name|getNodeState
argument_list|()
operator|.
name|builder
argument_list|()
argument_list|)
expr_stmt|;
name|NodeBuilder
name|agg
init|=
name|defn
operator|.
name|child
argument_list|(
name|LuceneIndexConstants
operator|.
name|AGGREGATES
argument_list|)
operator|.
name|child
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|child
argument_list|(
literal|"include0"
argument_list|)
decl_stmt|;
name|agg
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|AGG_PATH
argument_list|,
literal|"jcr:content"
argument_list|)
expr_stmt|;
name|agg
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|AGG_RELATIVE_NODE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//where contains('jcr:content/*', 'mountain OR valley') can be evaluated by index
comment|//on nt:base by evaluating on '.' and then checking if node name is 'jcr:content'
name|IndexPlanner
name|planner
init|=
name|createPlannerForFulltext
argument_list|(
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|FullTextParser
operator|.
name|parse
argument_list|(
literal|"jcr:content/*"
argument_list|,
literal|"mountain OR valley"
argument_list|)
argument_list|)
decl_stmt|;
comment|//No plan for unindex property
name|assertNotNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fullTextQuery_IndexAllProps_NodePathQuery_NoPlan
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
comment|//Index all props and then perform fulltext
name|defn
operator|=
name|IndexDefinition
operator|.
name|updateDefinition
argument_list|(
name|defn
operator|.
name|getNodeState
argument_list|()
operator|.
name|builder
argument_list|()
argument_list|)
expr_stmt|;
name|NodeBuilder
name|foob
init|=
name|getNode
argument_list|(
name|defn
argument_list|,
literal|"indexRules/nt:base/properties/foo"
argument_list|)
decl_stmt|;
name|foob
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|foob
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//where contains('jcr:content/*', 'mountain OR valley') can be evaluated by index
comment|//on nt:base by evaluating on '.' and then checking if node name is 'jcr:content'
name|IndexPlanner
name|planner
init|=
name|createPlannerForFulltext
argument_list|(
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|FullTextParser
operator|.
name|parse
argument_list|(
literal|"jcr:content/*"
argument_list|,
literal|"mountain OR valley"
argument_list|)
argument_list|)
decl_stmt|;
comment|//No plan for unindex property
name|assertNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fullTextQuery_NonAnalyzedProp_NoPlan
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
comment|//Index all props and then perform fulltext
name|defn
operator|=
name|IndexDefinition
operator|.
name|updateDefinition
argument_list|(
name|defn
operator|.
name|getNodeState
argument_list|()
operator|.
name|builder
argument_list|()
argument_list|)
expr_stmt|;
name|NodeBuilder
name|foob
init|=
name|getNode
argument_list|(
name|defn
argument_list|,
literal|"indexRules/nt:base/properties/foo"
argument_list|)
decl_stmt|;
name|foob
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|NodeBuilder
name|barb
init|=
name|getNode
argument_list|(
name|defn
argument_list|,
literal|"indexRules/nt:base/properties/bar"
argument_list|)
decl_stmt|;
name|barb
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|barb
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//where contains('jcr:content/*', 'mountain OR valley') can be evaluated by index
comment|//on nt:base by evaluating on '.' and then checking if node name is 'jcr:content'
name|IndexPlanner
name|planner
init|=
name|createPlannerForFulltext
argument_list|(
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|FullTextParser
operator|.
name|parse
argument_list|(
literal|"foo"
argument_list|,
literal|"mountain OR valley"
argument_list|)
argument_list|)
decl_stmt|;
comment|//No plan for unindex property
name|assertNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fullTextQuery_RelativePropertyPaths
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
comment|//Index all props and then perform fulltext
name|defn
operator|=
name|IndexDefinition
operator|.
name|updateDefinition
argument_list|(
name|defn
operator|.
name|getNodeState
argument_list|()
operator|.
name|builder
argument_list|()
argument_list|)
expr_stmt|;
name|NodeBuilder
name|foob
init|=
name|getNode
argument_list|(
name|defn
argument_list|,
literal|"indexRules/nt:base/properties/foo"
argument_list|)
decl_stmt|;
name|foob
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|foob
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NodeBuilder
name|barb
init|=
name|getNode
argument_list|(
name|defn
argument_list|,
literal|"indexRules/nt:base/properties/bar"
argument_list|)
decl_stmt|;
name|barb
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|barb
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//where contains('jcr:content/bar', 'mountain OR valley') and contains('jcr:content/foo', 'mountain OR valley')
comment|//above query can be evaluated by index which indexes foo and bar with restriction that both belong to same node
comment|//by displacing the query path to evaluate on contains('bar', ...) and filter out those parents which do not
comment|//have jcr:content as parent
name|FullTextExpression
name|fooExp
init|=
name|FullTextParser
operator|.
name|parse
argument_list|(
literal|"jcr:content/bar"
argument_list|,
literal|"mountain OR valley"
argument_list|)
decl_stmt|;
name|FullTextExpression
name|barExp
init|=
name|FullTextParser
operator|.
name|parse
argument_list|(
literal|"jcr:content/foo"
argument_list|,
literal|"mountain OR valley"
argument_list|)
decl_stmt|;
name|FullTextExpression
name|exp
init|=
operator|new
name|FullTextAnd
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|fooExp
argument_list|,
name|barExp
argument_list|)
argument_list|)
decl_stmt|;
name|IndexPlanner
name|planner
init|=
name|createPlannerForFulltext
argument_list|(
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|exp
argument_list|)
decl_stmt|;
comment|//No plan for unindex property
name|assertNotNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fullTextQuery_DisjointPropertyPaths
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
comment|//Index all props and then perform fulltext
name|defn
operator|=
name|IndexDefinition
operator|.
name|updateDefinition
argument_list|(
name|defn
operator|.
name|getNodeState
argument_list|()
operator|.
name|builder
argument_list|()
argument_list|)
expr_stmt|;
name|NodeBuilder
name|foob
init|=
name|getNode
argument_list|(
name|defn
argument_list|,
literal|"indexRules/nt:base/properties/foo"
argument_list|)
decl_stmt|;
name|foob
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|foob
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NodeBuilder
name|barb
init|=
name|getNode
argument_list|(
name|defn
argument_list|,
literal|"indexRules/nt:base/properties/bar"
argument_list|)
decl_stmt|;
name|barb
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|barb
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FullTextExpression
name|fooExp
init|=
name|FullTextParser
operator|.
name|parse
argument_list|(
literal|"metadata/bar"
argument_list|,
literal|"mountain OR valley"
argument_list|)
decl_stmt|;
name|FullTextExpression
name|barExp
init|=
name|FullTextParser
operator|.
name|parse
argument_list|(
literal|"jcr:content/foo"
argument_list|,
literal|"mountain OR valley"
argument_list|)
decl_stmt|;
name|FullTextExpression
name|exp
init|=
operator|new
name|FullTextAnd
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|fooExp
argument_list|,
name|barExp
argument_list|)
argument_list|)
decl_stmt|;
name|IndexPlanner
name|planner
init|=
name|createPlannerForFulltext
argument_list|(
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|exp
argument_list|)
decl_stmt|;
comment|//No plan for unindex property
name|assertNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|valuePattern_Equals
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDefinitionBuilder
name|defnb
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|valueExcludedPrefixes
argument_list|(
literal|"/jobs"
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|build
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|defn
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"/jobs/a"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|valuePattern_StartsWith
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDefinitionBuilder
name|defnb
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|valueExcludedPrefixes
argument_list|(
literal|"/jobs"
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|build
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|defn
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|GREATER_OR_EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|LESS_OR_EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"/bar0"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|GREATER_OR_EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"/jobs"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|LESS_OR_EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"/jobs0"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|relativeProperty_Basics
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDefinitionBuilder
name|defnb
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"jcr:content/bar"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|build
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|defn
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"jcr:content/foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"bar"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|IndexPlanner
operator|.
name|PlanResult
name|pr
init|=
name|pr
argument_list|(
name|plan
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pr
operator|.
name|isPathTransformed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b"
argument_list|,
name|pr
operator|.
name|transformPath
argument_list|(
literal|"/a/b/jcr:content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|pr
operator|.
name|transformPath
argument_list|(
literal|"/a/b/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pr
operator|.
name|hasProperty
argument_list|(
literal|"jcr:content/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pr
operator|.
name|hasProperty
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
operator|.
name|PropertyRestriction
name|r
init|=
operator|new
name|Filter
operator|.
name|PropertyRestriction
argument_list|()
decl_stmt|;
name|r
operator|.
name|propertyName
operator|=
literal|"jcr:content/foo"
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|pr
operator|.
name|getPropertyName
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|relativeProperty_Non_NtBase
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDefinitionBuilder
name|defnb
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"nt:unstructured"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|build
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|defn
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"jcr:content/foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
comment|//Should not return a plan for index rule other than nt:base
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|relativeProperty_FullText
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDefinitionBuilder
name|defnb
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|defnb
operator|.
name|aggregateRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|include
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|build
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|defn
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"jcr:content/foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|FullTextExpression
name|ft
init|=
name|FullTextParser
operator|.
name|parse
argument_list|(
literal|"jcr:content/*"
argument_list|,
literal|"mountain OR valley"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|setFullTextConstraint
argument_list|(
name|ft
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|IndexPlanner
operator|.
name|PlanResult
name|pr
init|=
name|pr
argument_list|(
name|plan
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|pr
operator|.
name|hasProperty
argument_list|(
literal|"jcr:content/foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|relativeProperty_MultipleMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDefinitionBuilder
name|defnb
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"baz"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|build
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|defn
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"jcr:content/foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"jcr:content/bar"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"metadata/baz"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|IndexPlanner
operator|.
name|PlanResult
name|pr
init|=
name|pr
argument_list|(
name|plan
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pr
operator|.
name|hasProperty
argument_list|(
literal|"jcr:content/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pr
operator|.
name|hasProperty
argument_list|(
literal|"jcr:content/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pr
operator|.
name|hasProperty
argument_list|(
literal|"metadata/baz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|evaluatePathRestrictionExposesSupportCorrectly
parameter_list|()
throws|throws
name|Exception
block|{
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Evaluates path restriction
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|EVALUATE_PATH_RESTRICTION
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|plan
operator|.
name|getSupportsPathRestriction
argument_list|()
argument_list|)
expr_stmt|;
comment|// Doesn't evaluate path restriction
name|defn
operator|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|EVALUATE_PATH_RESTRICTION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|node
operator|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo1"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo1"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
name|planner
operator|.
name|getPlan
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|plan
operator|.
name|getSupportsPathRestriction
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//~------------------------------< sync indexes>
annotation|@
name|Test
specifier|public
name|void
name|syncIndex_uniqueIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDefinitionBuilder
name|defnb
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|unique
argument_list|()
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|build
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|defn
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|PropertyIndexResult
name|hr
init|=
name|pr
argument_list|(
name|plan
argument_list|)
operator|.
name|getPropertyIndexResult
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|hr
operator|.
name|propertyName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|hr
operator|.
name|pr
operator|.
name|propertyName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|syncIndex_uniqueAndRelative
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDefinitionBuilder
name|defnb
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|unique
argument_list|()
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|build
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|defn
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"jcr:content/foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|PropertyIndexResult
name|hr
init|=
name|pr
argument_list|(
name|plan
argument_list|)
operator|.
name|getPropertyIndexResult
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|hr
operator|.
name|propertyName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jcr:content/foo"
argument_list|,
name|hr
operator|.
name|pr
operator|.
name|propertyName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|syncIndex_nonUnique
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDefinitionBuilder
name|defnb
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|sync
argument_list|()
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|build
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|defn
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|documentsPerValue
argument_list|(
literal|100
argument_list|)
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|PropertyIndexResult
name|hr
init|=
name|pr
argument_list|(
name|plan
argument_list|)
operator|.
name|getPropertyIndexResult
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|hr
operator|.
name|propertyName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|hr
operator|.
name|pr
operator|.
name|propertyName
argument_list|)
expr_stmt|;
block|}
comment|/**      * If both non unique and unique indexes are found then unique should be picked      */
annotation|@
name|Test
specifier|public
name|void
name|syncIndex_nonUniqueAndUniqueBoth
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDefinitionBuilder
name|defnb
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|unique
argument_list|()
expr_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|sync
argument_list|()
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|build
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|defn
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"bar"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|PropertyIndexResult
name|hr
init|=
name|pr
argument_list|(
name|plan
argument_list|)
operator|.
name|getPropertyIndexResult
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|hr
operator|.
name|propertyName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|hr
operator|.
name|pr
operator|.
name|propertyName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|syncIndex_NotUsedWithSort
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDefinitionBuilder
name|defnb
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|sync
argument_list|()
expr_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|ordered
argument_list|()
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|build
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|defn
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|OrderEntry
argument_list|(
literal|"bar"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
name|OrderEntry
operator|.
name|Order
operator|.
name|ASCENDING
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|documentsPerValue
argument_list|(
literal|100
argument_list|)
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|PropertyIndexResult
name|hr
init|=
name|pr
argument_list|(
name|plan
argument_list|)
operator|.
name|getPropertyIndexResult
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|hr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|syncIndex_NotUsedWithFulltext
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDefinitionBuilder
name|defnb
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|sync
argument_list|()
expr_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|analyzed
argument_list|()
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|build
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|defn
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setFullTextConstraint
argument_list|(
name|FullTextParser
operator|.
name|parse
argument_list|(
literal|"bar"
argument_list|,
literal|"mountain"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|OrderEntry
argument_list|(
literal|"bar"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
name|OrderEntry
operator|.
name|Order
operator|.
name|ASCENDING
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|documentsPerValue
argument_list|(
literal|100
argument_list|)
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|PropertyIndexResult
name|hr
init|=
name|pr
argument_list|(
name|plan
argument_list|)
operator|.
name|getPropertyIndexResult
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|hr
argument_list|)
expr_stmt|;
block|}
comment|//~----------------------------------------< nodetype>
name|String
name|testNodeTypeDefn
init|=
literal|"[oak:TestMixA]\n"
operator|+
literal|"  mixin\n"
operator|+
literal|"\n"
operator|+
literal|"[oak:TestSuperType]\n"
operator|+
literal|"- * (UNDEFINED) multiple\n"
operator|+
literal|"\n"
operator|+
literal|"[oak:TestTypeA]> oak:TestSuperType\n"
operator|+
literal|"- * (UNDEFINED) multiple\n"
operator|+
literal|"\n"
operator|+
literal|"[oak:TestTypeB]> oak:TestSuperType, oak:TestMixA\n"
operator|+
literal|"- * (UNDEFINED) multiple"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|nodetype_primaryType
parameter_list|()
throws|throws
name|Exception
block|{
name|TestUtil
operator|.
name|registerNodeType
argument_list|(
name|builder
argument_list|,
name|testNodeTypeDefn
argument_list|)
expr_stmt|;
name|root
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|IndexDefinitionBuilder
name|defnb
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|defnb
operator|.
name|nodeTypeIndex
argument_list|()
expr_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"oak:TestSuperType"
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|build
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|defn
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"oak:TestSuperType"
argument_list|)
decl_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|IndexPlanner
operator|.
name|PlanResult
name|r
init|=
name|pr
argument_list|(
name|plan
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|evaluateNodeTypeRestriction
argument_list|()
argument_list|)
expr_stmt|;
comment|//As oak:TestSuperType is parent of oak:TestTypeA the child nodetypes should
comment|//also be indexed
name|filter
operator|=
name|createFilter
argument_list|(
literal|"oak:TestTypeA"
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
name|planner
operator|.
name|getPlan
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|r
operator|=
name|pr
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|evaluateNodeTypeRestriction
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodetype_mixin
parameter_list|()
throws|throws
name|Exception
block|{
name|TestUtil
operator|.
name|registerNodeType
argument_list|(
name|builder
argument_list|,
name|testNodeTypeDefn
argument_list|)
expr_stmt|;
name|root
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|IndexDefinitionBuilder
name|defnb
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|defnb
operator|.
name|nodeTypeIndex
argument_list|()
expr_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"oak:TestMixA"
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|build
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|defn
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"oak:TestMixA"
argument_list|)
decl_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|IndexPlanner
operator|.
name|PlanResult
name|r
init|=
name|pr
argument_list|(
name|plan
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|evaluateNodeTypeRestriction
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|syncNodeTypeIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|TestUtil
operator|.
name|registerNodeType
argument_list|(
name|builder
argument_list|,
name|testNodeTypeDefn
argument_list|)
expr_stmt|;
name|root
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|IndexDefinitionBuilder
name|defnb
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|defnb
operator|.
name|nodeTypeIndex
argument_list|()
expr_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"oak:TestSuperType"
argument_list|)
operator|.
name|sync
argument_list|()
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|build
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|defn
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"oak:TestSuperType"
argument_list|)
decl_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|IndexPlanner
operator|.
name|PlanResult
name|r
init|=
name|pr
argument_list|(
name|plan
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|evaluateNodeTypeRestriction
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|evaluateSyncNodeTypeRestriction
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|IndexPlanner
name|createPlannerForFulltext
parameter_list|(
name|NodeState
name|defn
parameter_list|,
name|FullTextExpression
name|exp
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
argument_list|,
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|setFullTextConstraint
argument_list|(
name|exp
argument_list|)
expr_stmt|;
return|return
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|IndexNode
name|createSuggestionOrSpellcheckIndex
parameter_list|(
name|String
name|nodeType
parameter_list|,
name|boolean
name|enableSuggestion
parameter_list|,
name|boolean
name|enableSpellcheck
parameter_list|)
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|DECLARING_NODE_TYPES
argument_list|,
name|nodeType
argument_list|)
expr_stmt|;
name|defn
operator|=
name|IndexDefinition
operator|.
name|updateDefinition
argument_list|(
name|defn
operator|.
name|getNodeState
argument_list|()
operator|.
name|builder
argument_list|()
argument_list|)
expr_stmt|;
name|NodeBuilder
name|foob
init|=
name|getNode
argument_list|(
name|defn
argument_list|,
literal|"indexRules/"
operator|+
name|nodeType
operator|+
literal|"/properties/foo"
argument_list|)
decl_stmt|;
name|foob
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|enableSuggestion
condition|)
block|{
name|foob
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_USE_IN_SUGGEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enableSpellcheck
condition|)
block|{
name|foob
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_USE_IN_SPELLCHECK
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|IndexDefinition
name|indexDefinition
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
return|return
name|createIndexNode
argument_list|(
name|indexDefinition
argument_list|)
return|;
block|}
specifier|private
name|QueryIndex
operator|.
name|IndexPlan
name|getSuggestOrSpellcheckIndexPlan
parameter_list|(
name|IndexNode
name|indexNode
parameter_list|,
name|String
name|nodeType
parameter_list|,
name|boolean
name|forSugggestion
parameter_list|)
throws|throws
name|Exception
block|{
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
name|nodeType
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
name|indexNode
operator|.
name|getDefinition
argument_list|()
operator|.
name|getFunctionName
argument_list|()
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
operator|(
name|forSugggestion
condition|?
literal|"suggest"
else|:
literal|"spellcheck"
operator|)
operator|+
literal|"?term=foo"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|indexNode
argument_list|,
literal|"/foo"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
expr|<
name|OrderEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|planner
operator|.
name|getPlan
argument_list|()
return|;
block|}
comment|//------ END - Suggestion/spellcheck plan tests
comment|//------ Cost via doc count per field plan tests
annotation|@
name|Test
specifier|public
name|void
name|noRestrictionWithSingleSortableField
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|ORDERED_PROP_NAMES
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|IndexDefinition
name|definition
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/test"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|definition
argument_list|)
decl_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/test"
argument_list|,
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|OrderEntry
argument_list|(
literal|"foo"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
name|OrderEntry
operator|.
name|Order
operator|.
name|ASCENDING
argument_list|)
argument_list|,
operator|new
name|OrderEntry
argument_list|(
literal|"bar"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
name|OrderEntry
operator|.
name|Order
operator|.
name|ASCENDING
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|planner
operator|.
name|getPlan
argument_list|()
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|definition
operator|.
name|getCostPerEntry
argument_list|()
operator|/
literal|2
argument_list|,
name|planner
operator|.
name|getPlan
argument_list|()
operator|.
name|getCostPerEntry
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noRestrictionWithTwoSortableFields
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|ORDERED_PROP_NAMES
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|IndexDefinition
name|definition
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/test"
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|definition
argument_list|)
decl_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/test"
argument_list|,
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|OrderEntry
argument_list|(
literal|"foo"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
name|OrderEntry
operator|.
name|Order
operator|.
name|ASCENDING
argument_list|)
argument_list|,
operator|new
name|OrderEntry
argument_list|(
literal|"bar"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
name|OrderEntry
operator|.
name|Order
operator|.
name|ASCENDING
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|planner
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|planner
operator|.
name|getPlan
argument_list|()
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|definition
operator|.
name|getCostPerEntry
argument_list|()
operator|/
literal|3
argument_list|,
name|planner
operator|.
name|getPlan
argument_list|()
operator|.
name|getCostPerEntry
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|useNumDocsOnFieldForCost
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defn
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"foo1"
argument_list|,
literal|"foo2"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|long
name|numOfDocs
init|=
name|IndexDefinition
operator|.
name|DEFAULT_ENTRY_COUNT
operator|+
literal|1000
decl_stmt|;
name|IndexDefinition
name|idxDefn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|"/test"
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"foo1"
argument_list|,
literal|"bar1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|Directory
name|sampleDirectory
init|=
name|createSampleDirectory
argument_list|(
name|numOfDocs
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|idxDefn
argument_list|,
name|sampleDirectory
argument_list|)
decl_stmt|;
comment|// Query on "foo"
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/test"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|documentsPerValue
argument_list|(
name|numOfDocs
argument_list|)
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|plan
operator|.
name|getCostPerExecution
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|plan
operator|.
name|getCostPerEntry
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Query on "foo" is not null
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|NOT_EQUAL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/test"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
name|planner
operator|.
name|getPlan
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numOfDocs
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Query on "foo" like x
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|LIKE
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar%"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/test"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
name|planner
operator|.
name|getPlan
argument_list|()
expr_stmt|;
comment|// weight of 3
name|assertEquals
argument_list|(
name|numOfDocs
operator|/
literal|3
operator|+
literal|1
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Query on "foo"> x
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|GREATER_OR_EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/test"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
name|planner
operator|.
name|getPlan
argument_list|()
expr_stmt|;
comment|// weight of 3
name|assertEquals
argument_list|(
name|numOfDocs
operator|/
literal|3
operator|+
literal|1
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Query on "foo1"
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo1"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar1"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/test"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
name|planner
operator|.
name|getPlan
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|plan
operator|.
name|getCostPerExecution
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|plan
operator|.
name|getCostPerEntry
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Query on "foo" and "foo1" should use minimum
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo1"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar1"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/test"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
name|planner
operator|.
name|getPlan
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Query on "foo" and "foo1" and "foo2" should give 0 as foo3 isn't there in any document
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo1"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar1"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo2"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar2"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
literal|"/test"
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
name|planner
operator|.
name|getPlan
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|weightedPropDefs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|indexPath
init|=
literal|"/test"
decl_stmt|;
name|IndexDefinitionBuilder
name|idxBuilder
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|child
argument_list|(
name|builder
argument_list|,
name|indexPath
argument_list|)
argument_list|)
decl_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|weight
argument_list|(
literal|500
argument_list|)
operator|.
name|enclosingRule
argument_list|()
operator|.
name|property
argument_list|(
literal|"foo1"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|weight
argument_list|(
literal|20
argument_list|)
operator|.
name|enclosingRule
argument_list|()
operator|.
name|property
argument_list|(
literal|"foo2"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|weight
argument_list|(
literal|0
argument_list|)
operator|.
name|enclosingRule
argument_list|()
operator|.
name|property
argument_list|(
literal|"foo3"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|NodeState
name|defn
init|=
name|idxBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Document
argument_list|>
name|docs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Document
name|doc
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|60
condition|;
name|i
operator|++
control|)
block|{
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"foo1"
argument_list|,
literal|"bar1"
operator|+
name|i
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"foo2"
argument_list|,
literal|"bar2"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Directory
name|sampleDirectory
init|=
name|createSampleDirectory
argument_list|(
literal|1000
argument_list|,
name|docs
argument_list|)
decl_stmt|;
name|IndexDefinition
name|idxDefn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|idxDefn
argument_list|,
name|sampleDirectory
argument_list|)
decl_stmt|;
comment|// Query on "foo"
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
name|indexPath
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
comment|//scale down 1000 by 500 = 2
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Query on "foo1"
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo1"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
name|indexPath
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
name|planner
operator|.
name|getPlan
argument_list|()
expr_stmt|;
comment|//scale down 60 by 20 = 2
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Query on "foo" and "foo1"
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo1"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
name|indexPath
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
name|planner
operator|.
name|getPlan
argument_list|()
expr_stmt|;
comment|//min(2, 3)
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Query on "foo1" and "foo2"
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo1"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo2"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
name|indexPath
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
name|planner
operator|.
name|getPlan
argument_list|()
expr_stmt|;
comment|//don't scale down 1 by 0 (foo1 would estimate 3)
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Query on "foo1" and "foo3"
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo1"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo3"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
name|indexPath
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
name|planner
operator|.
name|getPlan
argument_list|()
expr_stmt|;
comment|//min(0, 3)
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|weightedRegexPropDefs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|indexPath
init|=
literal|"/test"
decl_stmt|;
name|IndexDefinitionBuilder
name|idxBuilder
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|child
argument_list|(
name|builder
argument_list|,
name|indexPath
argument_list|)
argument_list|)
decl_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|enclosingRule
argument_list|()
operator|.
name|property
argument_list|(
literal|"bar"
argument_list|,
literal|"bar.*"
argument_list|,
literal|true
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|weight
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|NodeState
name|defn
init|=
name|idxBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Document
argument_list|>
name|docs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Document
name|doc
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|60
condition|;
name|i
operator|++
control|)
block|{
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"bar1"
argument_list|,
literal|"foo1"
operator|+
name|i
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|40
condition|;
name|i
operator|++
control|)
block|{
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"bar2"
argument_list|,
literal|"foo2"
operator|+
name|i
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|Directory
name|sampleDirectory
init|=
name|createSampleDirectory
argument_list|(
literal|1000
argument_list|,
name|docs
argument_list|)
decl_stmt|;
name|IndexDefinition
name|idxDefn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|idxDefn
argument_list|,
name|sampleDirectory
argument_list|)
decl_stmt|;
comment|// Query on and "bar1"
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"bar1"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"foo1"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
name|indexPath
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
comment|//scale down 60 by 20 = 3
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Query on and "bar1" and "bar2"
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"bar1"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"foo1"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"bar2"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"foo2"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
name|indexPath
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
name|planner
operator|.
name|getPlan
argument_list|()
expr_stmt|;
comment|//min(3, 2)
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|overflowingWeight
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|indexPath
init|=
literal|"/test"
decl_stmt|;
name|IndexDefinitionBuilder
name|idxBuilder
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|child
argument_list|(
name|builder
argument_list|,
name|indexPath
argument_list|)
argument_list|)
decl_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|weight
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|/
literal|2
argument_list|)
operator|.
name|enclosingRule
argument_list|()
operator|.
name|property
argument_list|(
literal|"foo1"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|NodeState
name|defn
init|=
name|idxBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Document
argument_list|>
name|docs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Document
name|doc
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|60
condition|;
name|i
operator|++
control|)
block|{
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"foo1"
argument_list|,
literal|"bar1"
operator|+
name|i
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|Directory
name|sampleDirectory
init|=
name|createSampleDirectory
argument_list|(
literal|1000
argument_list|,
name|docs
argument_list|)
decl_stmt|;
name|IndexDefinition
name|idxDefn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|idxDefn
argument_list|,
name|sampleDirectory
argument_list|)
decl_stmt|;
comment|// Query on and "foo"
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"foo1"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
name|indexPath
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
comment|//scale down 1000 by INT_MAX/2 and ceil ~= 1.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Query on and "foo" and "foo1"
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo1"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar1"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
name|indexPath
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
name|planner
operator|.
name|getPlan
argument_list|()
expr_stmt|;
comment|//min(1, 60)
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|functionPropDef
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|indexPath
init|=
literal|"/test"
decl_stmt|;
name|IndexDefinitionBuilder
name|idxBuilder
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|child
argument_list|(
name|builder
argument_list|,
name|indexPath
argument_list|)
argument_list|)
decl_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|Tree
name|fooPD
init|=
name|idxBuilder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|getChild
argument_list|(
literal|"indexRules"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|fooPD
operator|.
name|setProperty
argument_list|(
name|PROP_FUNCTION
argument_list|,
literal|"lower([foo])"
argument_list|)
expr_stmt|;
name|NodeState
name|defn
init|=
name|idxBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
name|convertToPolishNotation
argument_list|(
literal|"lower([foo])"
argument_list|)
argument_list|,
literal|"bar1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|Directory
name|sampleDirectory
init|=
name|createSampleDirectory
argument_list|(
literal|2
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|IndexDefinition
name|idxDefn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|idxDefn
argument_list|,
name|sampleDirectory
argument_list|)
decl_stmt|;
comment|// Query on and "foo"
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
name|convertToPolishNotation
argument_list|(
literal|"lower([foo])"
argument_list|)
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"foo1"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
name|indexPath
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fullTextWithPropRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|indexPath
init|=
literal|"/test"
decl_stmt|;
name|IndexDefinitionBuilder
name|idxBuilder
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|child
argument_list|(
name|builder
argument_list|,
name|indexPath
argument_list|)
argument_list|)
decl_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|nodeScopeIndex
argument_list|()
operator|.
name|enclosingRule
argument_list|()
operator|.
name|property
argument_list|(
literal|"foo1"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|enclosingRule
argument_list|()
operator|.
name|property
argument_list|(
literal|"foo2"
argument_list|)
operator|.
name|analyzed
argument_list|()
expr_stmt|;
name|NodeState
name|defn
init|=
name|idxBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|long
name|numOfDocs
init|=
name|IndexDefinition
operator|.
name|DEFAULT_ENTRY_COUNT
operator|+
literal|1000
decl_stmt|;
name|IndexDefinition
name|idxDefn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"foo1"
argument_list|,
literal|"bar1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|Directory
name|sampleDirectory
init|=
name|createSampleDirectory
argument_list|(
name|numOfDocs
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|idxDefn
argument_list|,
name|sampleDirectory
argument_list|)
decl_stmt|;
comment|// contains(., 'mountain') AND contains('foo2', 'hill')
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|setFullTextConstraint
argument_list|(
name|FullTextParser
operator|.
name|parse
argument_list|(
literal|"."
argument_list|,
literal|"mountain"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setFullTextConstraint
argument_list|(
name|FullTextParser
operator|.
name|parse
argument_list|(
literal|"foo2"
argument_list|,
literal|"hill"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
name|indexPath
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|numOfDocs
operator|+
literal|1
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|plan
operator|.
name|getCostPerExecution
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|plan
operator|.
name|getCostPerEntry
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// contains(., 'mountain') AND [foo1]='bar' AND contains('foo2', 'hill')
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setFullTextConstraint
argument_list|(
name|FullTextParser
operator|.
name|parse
argument_list|(
literal|"."
argument_list|,
literal|"mountain"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo1"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setFullTextConstraint
argument_list|(
name|FullTextParser
operator|.
name|parse
argument_list|(
literal|"foo2"
argument_list|,
literal|"hill"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
name|indexPath
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
name|planner
operator|.
name|getPlan
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|plan
operator|.
name|getCostPerExecution
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|plan
operator|.
name|getCostPerEntry
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|unableToIterateFields
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|IndexStatistics
operator|.
name|failReadingFields
operator|=
literal|true
expr_stmt|;
name|String
name|indexPath
init|=
literal|"/test"
decl_stmt|;
name|IndexDefinitionBuilder
name|idxBuilder
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|child
argument_list|(
name|builder
argument_list|,
name|indexPath
argument_list|)
argument_list|)
decl_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|NodeState
name|defn
init|=
name|idxBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|long
name|numOfDocs
init|=
literal|100
decl_stmt|;
name|IndexDefinition
name|idxDefn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|idxDefn
argument_list|,
name|numOfDocs
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
name|indexPath
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|numOfDocs
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"bar"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
name|indexPath
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
name|planner
operator|.
name|getPlan
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numOfDocs
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"bar"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
name|indexPath
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
name|planner
operator|.
name|getPlan
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numOfDocs
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IndexStatistics
operator|.
name|failReadingFields
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|unableToReadCountForJcrTitle
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|IndexStatistics
operator|.
name|failReadingSyntheticallyFalliableField
operator|=
literal|true
expr_stmt|;
name|String
name|indexPath
init|=
literal|"/test"
decl_stmt|;
name|IndexDefinitionBuilder
name|idxBuilder
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|child
argument_list|(
name|builder
argument_list|,
name|indexPath
argument_list|)
argument_list|)
decl_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo1"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
name|SYNTHETICALLY_FALLIABLE_FIELD
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|NodeState
name|defn
init|=
name|idxBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|long
name|numOfDocs
init|=
literal|100
decl_stmt|;
name|IndexDefinition
name|idxDefn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"foo1"
argument_list|,
literal|"bar1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
name|SYNTHETICALLY_FALLIABLE_FIELD
argument_list|,
literal|"failingField"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|Directory
name|sampleDirectory
init|=
name|createSampleDirectory
argument_list|(
name|numOfDocs
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|idxDefn
argument_list|,
name|sampleDirectory
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
name|indexPath
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|documentsPerValue
argument_list|(
name|numOfDocs
argument_list|)
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
name|SYNTHETICALLY_FALLIABLE_FIELD
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
name|indexPath
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
name|planner
operator|.
name|getPlan
argument_list|()
expr_stmt|;
comment|// falliable field's count couldn't be read - so, fallback to numDocs
name|assertEquals
argument_list|(
name|numOfDocs
operator|+
literal|1
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo1"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
name|SYNTHETICALLY_FALLIABLE_FIELD
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
name|indexPath
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
name|planner
operator|.
name|getPlan
argument_list|()
expr_stmt|;
comment|// min() still comes into play even when one field's count couldn't be read
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"bar"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
name|SYNTHETICALLY_FALLIABLE_FIELD
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
name|indexPath
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
name|planner
operator|.
name|getPlan
argument_list|()
expr_stmt|;
comment|// min() still comes into play even when one field's count couldn't be read
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IndexStatistics
operator|.
name|failReadingSyntheticallyFalliableField
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|costForPathTransformation
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexStatistics
operator|.
name|failReadingSyntheticallyFalliableField
operator|=
literal|true
expr_stmt|;
name|String
name|indexPath
init|=
literal|"/test"
decl_stmt|;
name|IndexDefinitionBuilder
name|idxBuilder
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|child
argument_list|(
name|builder
argument_list|,
name|indexPath
argument_list|)
argument_list|)
decl_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo1"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo2"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|Tree
name|fooPD
init|=
name|idxBuilder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|getChild
argument_list|(
literal|"indexRules"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"foo2"
argument_list|)
decl_stmt|;
name|fooPD
operator|.
name|setProperty
argument_list|(
name|PROP_FUNCTION
argument_list|,
literal|"lower([foo])"
argument_list|)
expr_stmt|;
name|NodeState
name|defn
init|=
name|idxBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|long
name|numOfDocs
init|=
literal|100
decl_stmt|;
name|IndexDefinition
name|idxDefn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defn
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
name|IndexNode
name|node
init|=
name|createIndexNode
argument_list|(
name|idxDefn
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"a/foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexPlanner
name|planner
init|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
name|indexPath
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|planner
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|documentsPerValue
argument_list|(
name|numOfDocs
argument_list|)
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"a/foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo1"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
name|indexPath
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
name|planner
operator|.
name|getPlan
argument_list|()
expr_stmt|;
comment|// there is no doc with foo1
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"a/foo1"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
name|indexPath
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
name|planner
operator|.
name|getPlan
argument_list|()
expr_stmt|;
comment|//Because path transormation comes into play only when direct prop defs don't match
name|assertEquals
argument_list|(
name|documentsPerValue
argument_list|(
name|numOfDocs
argument_list|)
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"a/foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
name|convertToPolishNotation
argument_list|(
literal|"lower([foo])"
argument_list|)
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"foo1"
argument_list|)
argument_list|)
expr_stmt|;
name|planner
operator|=
operator|new
name|IndexPlanner
argument_list|(
name|node
argument_list|,
name|indexPath
argument_list|,
name|filter
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
name|planner
operator|.
name|getPlan
argument_list|()
expr_stmt|;
comment|// there is no doc with lower([foo])
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plan
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//------ END - Cost via doc count per field plan tests
specifier|private
name|IndexNode
name|createIndexNode
parameter_list|(
name|IndexDefinition
name|defn
parameter_list|,
name|long
name|numOfDocs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|IndexNodeManager
argument_list|(
literal|"foo"
argument_list|,
name|defn
argument_list|,
operator|new
name|TestReaderFactory
argument_list|(
name|createSampleDirectory
argument_list|(
name|numOfDocs
argument_list|)
argument_list|)
operator|.
name|createReaders
argument_list|(
name|defn
argument_list|,
name|EMPTY_NODE
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|acquire
argument_list|()
return|;
block|}
specifier|private
name|IndexNode
name|createIndexNode
parameter_list|(
name|IndexDefinition
name|defn
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|IndexNodeManager
argument_list|(
literal|"foo"
argument_list|,
name|defn
argument_list|,
operator|new
name|TestReaderFactory
argument_list|(
name|createSampleDirectory
argument_list|()
argument_list|)
operator|.
name|createReaders
argument_list|(
name|defn
argument_list|,
name|EMPTY_NODE
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|acquire
argument_list|()
return|;
block|}
specifier|private
name|IndexNode
name|createIndexNode
parameter_list|(
name|IndexDefinition
name|defn
parameter_list|,
name|Directory
name|sampleDirectory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|IndexNodeManager
argument_list|(
literal|"foo"
argument_list|,
name|defn
argument_list|,
operator|new
name|TestReaderFactory
argument_list|(
name|sampleDirectory
argument_list|)
operator|.
name|createReaders
argument_list|(
name|defn
argument_list|,
name|EMPTY_NODE
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|acquire
argument_list|()
return|;
block|}
specifier|private
name|FilterImpl
name|createFilter
parameter_list|(
name|String
name|nodeTypeName
parameter_list|)
block|{
name|NodeTypeInfoProvider
name|nodeTypes
init|=
operator|new
name|NodeStateNodeTypeInfoProvider
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|NodeTypeInfo
name|type
init|=
name|nodeTypes
operator|.
name|getNodeTypeInfo
argument_list|(
name|nodeTypeName
argument_list|)
decl_stmt|;
name|SelectorImpl
name|selector
init|=
operator|new
name|SelectorImpl
argument_list|(
name|type
argument_list|,
name|nodeTypeName
argument_list|)
decl_stmt|;
return|return
operator|new
name|FilterImpl
argument_list|(
name|selector
argument_list|,
literal|"SELECT * FROM ["
operator|+
name|nodeTypeName
operator|+
literal|"]"
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Directory
name|createSampleDirectory
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|createSampleDirectory
argument_list|(
literal|1
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Directory
name|createSampleDirectory
parameter_list|(
name|long
name|numOfDocs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createSampleDirectory
argument_list|(
name|numOfDocs
argument_list|,
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Directory
name|createSampleDirectory
parameter_list|(
name|long
name|numOfDocs
parameter_list|,
annotation|@
name|Nonnull
name|Document
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createSampleDirectory
argument_list|(
name|numOfDocs
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Directory
name|createSampleDirectory
parameter_list|(
name|long
name|numOfDocs
parameter_list|,
name|Iterable
argument_list|<
name|Document
argument_list|>
name|docs
parameter_list|)
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|config
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|VERSION
argument_list|,
name|LuceneIndexConstants
operator|.
name|ANALYZER
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|config
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
operator|+
name|i
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Document
name|doc
range|:
name|docs
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|dir
return|;
block|}
specifier|private
specifier|static
name|IndexPlanner
operator|.
name|PlanResult
name|pr
parameter_list|(
name|QueryIndex
operator|.
name|IndexPlan
name|plan
parameter_list|)
block|{
return|return
operator|(
name|IndexPlanner
operator|.
name|PlanResult
operator|)
name|plan
operator|.
name|getAttribute
argument_list|(
name|LucenePropertyIndex
operator|.
name|ATTR_PLAN_RESULT
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|private
specifier|static
name|NodeBuilder
name|getNode
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|node
parameter_list|,
annotation|@
name|Nonnull
name|String
name|path
parameter_list|)
block|{
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|checkNotNull
argument_list|(
name|path
argument_list|)
argument_list|)
control|)
block|{
name|node
operator|=
name|node
operator|.
name|getChildNode
argument_list|(
name|checkNotNull
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
specifier|private
specifier|static
class|class
name|TestReaderFactory
implements|implements
name|LuceneIndexReaderFactory
block|{
specifier|final
name|Directory
name|directory
decl_stmt|;
specifier|private
name|TestReaderFactory
parameter_list|(
name|Directory
name|directory
parameter_list|)
block|{
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|LuceneIndexReader
argument_list|>
name|createReaders
parameter_list|(
name|IndexDefinition
name|definition
parameter_list|,
name|NodeState
name|definitionState
parameter_list|,
name|String
name|indexPath
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|LuceneIndexReader
argument_list|>
name|readers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|readers
operator|.
name|add
argument_list|(
operator|new
name|DefaultIndexReader
argument_list|(
name|directory
argument_list|,
literal|null
argument_list|,
name|definition
operator|.
name|getAnalyzer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|readers
return|;
block|}
block|}
comment|/**      * The estimated number of documents per unique value.      *      * @param numofDocs the total number of documents      * @return the estimated number of documents      */
specifier|public
specifier|static
name|long
name|documentsPerValue
parameter_list|(
name|long
name|numofDocs
parameter_list|)
block|{
comment|// OAK-7379: divide the number of documents by the number of unique entries
return|return
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|numofDocs
operator|/
name|IndexPlanner
operator|.
name|DEFAULT_PROPERTY_WEIGHT
argument_list|)
return|;
block|}
block|}
end_class

end_unit

