begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|nodetype
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_comment
comment|/**  * Adapter class for turning an in-content property definition  * node ("nt:propertyDefinition") to a {@link PropertyDefinition} instance.  */
end_comment

begin_class
class|class
name|PropertyDefinitionImpl
extends|extends
name|ItemDefinitionImpl
implements|implements
name|PropertyDefinition
block|{
specifier|public
name|PropertyDefinitionImpl
parameter_list|(
name|NodeType
name|type
parameter_list|,
name|Node
name|node
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------< PropertyDefinition>--
comment|/**      * CND:      *<pre>      * - jcr:requiredType (STRING) protected mandatory      *< 'STRING', 'URI', 'BINARY', 'LONG', 'DOUBLE',      *     'DECIMAL', 'BOOLEAN', 'DATE', 'NAME', 'PATH',      *     'REFERENCE', 'WEAKREFERENCE', 'UNDEFINED'      *</pre>      */
annotation|@
name|Override
specifier|public
name|int
name|getRequiredType
parameter_list|()
block|{
try|try
block|{
return|return
name|PropertyType
operator|.
name|valueFromName
argument_list|(
name|getString
argument_list|(
name|Property
operator|.
name|JCR_REQUIRED_TYPE
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
name|illegalState
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** CND:<pre>- jcr:valueConstraints (STRING) protected multiple</pre> */
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getValueConstraints
parameter_list|()
block|{
return|return
name|getStrings
argument_list|(
name|Property
operator|.
name|JCR_VALUE_CONSTRAINTS
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** CND:<pre>- jcr:defaultValues (UNDEFINED) protected multiple</pre> */
annotation|@
name|Override
specifier|public
name|Value
index|[]
name|getDefaultValues
parameter_list|()
block|{
return|return
name|getValues
argument_list|(
name|Property
operator|.
name|JCR_DEFAULT_VALUES
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** CND:<pre>- jcr:multiple (BOOLEAN) protected mandatory</pre> */
annotation|@
name|Override
specifier|public
name|boolean
name|isMultiple
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
name|Property
operator|.
name|JCR_MULTIPLE
argument_list|)
return|;
block|}
comment|/** CND:<pre>- jcr:availableQueryOperators (NAME) protected mandatory multiple</pre> */
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getAvailableQueryOperators
parameter_list|()
block|{
return|return
name|getStrings
argument_list|(
literal|"jcr:availableQueryOperators"
argument_list|,
literal|null
argument_list|)
return|;
comment|// TODO: constant
block|}
comment|/** CND:<pre>- jcr:isFullTextSearchable (BOOLEAN) protected mandatory</pre> */
annotation|@
name|Override
specifier|public
name|boolean
name|isFullTextSearchable
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
literal|"jcr:isFullTextSearchable"
argument_list|)
return|;
comment|// TODO: constant
block|}
comment|/** CND:<pre>- jcr:isQueryOrderable (BOOLEAN) protected mandatory</pre> */
annotation|@
name|Override
specifier|public
name|boolean
name|isQueryOrderable
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
literal|"jcr:isQueryOrderable"
argument_list|)
return|;
comment|// TODO: constant
block|}
comment|//------------------------------------------------------------< Object>--
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|dv
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|dvs
init|=
name|getStrings
argument_list|(
name|Property
operator|.
name|JCR_DEFAULT_VALUES
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|dvs
operator|!=
literal|null
condition|)
block|{
name|dv
operator|=
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|dvs
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"- "
argument_list|)
decl_stmt|;
name|appendItemCND
argument_list|(
name|sb
argument_list|,
name|PropertyType
operator|.
name|nameFromValue
argument_list|(
name|getRequiredType
argument_list|()
argument_list|)
argument_list|,
name|dv
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" ..."
argument_list|)
expr_stmt|;
comment|// TODO: rest of the info
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

