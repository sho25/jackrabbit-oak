begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|diffindex
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * DiffCollector that looks for UUID properties  *   */
end_comment

begin_class
specifier|public
class|class
name|UUIDDiffCollector
extends|extends
name|BaseDiffCollector
block|{
specifier|private
name|String
name|uuid
decl_stmt|;
specifier|public
name|UUIDDiffCollector
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|super
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
name|uuid
operator|=
literal|null
expr_stmt|;
name|Filter
operator|.
name|PropertyRestriction
name|restriction
init|=
name|filter
operator|.
name|getPropertyRestriction
argument_list|(
literal|"jcr:uuid"
argument_list|)
decl_stmt|;
if|if
condition|(
name|restriction
operator|==
literal|null
operator|||
name|restriction
operator|.
name|isLike
operator|||
operator|!
name|restriction
operator|.
name|firstIncluding
operator|||
operator|!
name|restriction
operator|.
name|lastIncluding
operator|||
operator|!
name|restriction
operator|.
name|first
operator|.
name|equals
argument_list|(
name|restriction
operator|.
name|last
argument_list|)
condition|)
block|{
name|init
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|uuid
operator|=
name|restriction
operator|.
name|first
operator|.
name|toString
argument_list|()
expr_stmt|;
name|super
operator|.
name|collect
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|extractUuidFromFilter
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
name|Filter
operator|.
name|PropertyRestriction
name|restriction
init|=
name|filter
operator|.
name|getPropertyRestriction
argument_list|(
literal|"jcr:uuid"
argument_list|)
decl_stmt|;
return|return
name|restriction
operator|.
name|first
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getResults
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
if|if
condition|(
name|init
operator|&&
operator|!
name|extractUuidFromFilter
argument_list|(
name|filter
argument_list|)
operator|.
name|equals
argument_list|(
name|uuid
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"UUID does not match "
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|getResults
argument_list|(
name|filter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|match
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
if|if
condition|(
name|uuid
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|PropertyState
name|propertyState
init|=
name|state
operator|.
name|getProperty
argument_list|(
literal|"jcr:uuid"
argument_list|)
decl_stmt|;
return|return
name|propertyState
operator|!=
literal|null
operator|&&
name|uuid
operator|.
name|equals
argument_list|(
name|propertyState
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUnique
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

