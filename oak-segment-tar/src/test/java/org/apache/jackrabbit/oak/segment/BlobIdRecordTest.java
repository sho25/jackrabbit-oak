begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentWriterBuilder
operator|.
name|segmentWriterBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|ArrayBasedBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Segment
operator|.
name|RecordConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|MemoryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_class
specifier|public
class|class
name|BlobIdRecordTest
block|{
specifier|private
specifier|static
specifier|abstract
class|class
name|IdMappingBlobStore
implements|implements
name|BlobStore
block|{
specifier|private
specifier|final
name|MemoryBlobStore
name|bs
init|=
operator|new
name|MemoryBlobStore
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ids
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|writeBlob
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|in
init|=
name|bs
operator|.
name|writeBlob
argument_list|(
name|inputStream
argument_list|)
decl_stmt|;
name|String
name|out
init|=
name|generateId
argument_list|()
decl_stmt|;
name|ids
operator|.
name|put
argument_list|(
name|out
argument_list|,
name|in
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|writeBlob
parameter_list|(
name|InputStream
name|inputStream
parameter_list|,
name|BlobOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|writeBlob
argument_list|(
name|inputStream
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|readBlob
parameter_list|(
name|String
name|s
parameter_list|,
name|long
name|l
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|i1
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|bs
operator|.
name|readBlob
argument_list|(
name|mapId
argument_list|(
name|s
argument_list|)
argument_list|,
name|l
argument_list|,
name|bytes
argument_list|,
name|i
argument_list|,
name|i1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getBlobLength
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|bs
operator|.
name|getBlobLength
argument_list|(
name|mapId
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|bs
operator|.
name|getInputStream
argument_list|(
name|mapId
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getBlobId
parameter_list|(
annotation|@
name|Nonnull
name|String
name|s
parameter_list|)
block|{
return|return
name|bs
operator|.
name|getBlobId
argument_list|(
name|s
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getReference
parameter_list|(
annotation|@
name|Nonnull
name|String
name|s
parameter_list|)
block|{
return|return
name|bs
operator|.
name|getBlobId
argument_list|(
name|mapId
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|String
name|mapId
parameter_list|(
name|String
name|in
parameter_list|)
block|{
name|String
name|out
init|=
name|ids
operator|.
name|get
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"in"
argument_list|)
throw|;
block|}
return|return
name|out
return|;
block|}
specifier|protected
specifier|abstract
name|String
name|generateId
parameter_list|()
function_decl|;
block|}
specifier|private
specifier|static
class|class
name|ShortIdMappingBlobStore
extends|extends
name|IdMappingBlobStore
block|{
specifier|private
specifier|static
name|int
name|next
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|String
name|generateId
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|next
operator|++
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|LongIdMappingBlobStore
extends|extends
name|IdMappingBlobStore
block|{
specifier|private
specifier|static
name|int
name|next
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|String
name|generateId
parameter_list|()
block|{
return|return
name|Strings
operator|.
name|repeat
argument_list|(
literal|"0"
argument_list|,
name|Segment
operator|.
name|BLOB_ID_SMALL_LIMIT
argument_list|)
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|next
operator|++
argument_list|)
return|;
block|}
block|}
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|shortReferencesShouldHaveBlobIdType
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|FileStore
name|ss
init|=
name|newFileStore
argument_list|(
operator|new
name|ShortIdMappingBlobStore
argument_list|()
argument_list|)
init|)
block|{
name|SegmentWriter
name|sw
init|=
name|segmentWriterBuilder
argument_list|(
literal|"test"
argument_list|)
operator|.
name|build
argument_list|(
name|ss
argument_list|)
decl_stmt|;
name|byte
index|[]
name|content
init|=
operator|new
name|byte
index|[
name|Segment
operator|.
name|MEDIUM_LIMIT
operator|+
literal|1
index|]
decl_stmt|;
name|SegmentBlob
name|sb
init|=
name|sw
operator|.
name|writeBlob
argument_list|(
operator|new
name|ArrayBasedBlob
argument_list|(
name|content
argument_list|)
argument_list|)
decl_stmt|;
name|assertRecordTypeEquals
argument_list|(
name|sb
argument_list|,
name|RecordType
operator|.
name|BLOB_ID
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|longReferencesShouldHaveBlobIdType
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|FileStore
name|ss
init|=
name|newFileStore
argument_list|(
operator|new
name|LongIdMappingBlobStore
argument_list|()
argument_list|)
init|)
block|{
name|SegmentWriter
name|sw
init|=
name|segmentWriterBuilder
argument_list|(
literal|"test"
argument_list|)
operator|.
name|build
argument_list|(
name|ss
argument_list|)
decl_stmt|;
name|byte
index|[]
name|content
init|=
operator|new
name|byte
index|[
name|Segment
operator|.
name|MEDIUM_LIMIT
operator|+
literal|1
index|]
decl_stmt|;
name|SegmentBlob
name|sb
init|=
name|sw
operator|.
name|writeBlob
argument_list|(
operator|new
name|ArrayBasedBlob
argument_list|(
name|content
argument_list|)
argument_list|)
decl_stmt|;
name|assertRecordTypeEquals
argument_list|(
name|sb
argument_list|,
name|RecordType
operator|.
name|BLOB_ID
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|FileStore
name|newFileStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|fileStoreBuilder
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|(
literal|"ss"
argument_list|)
argument_list|)
operator|.
name|withBlobStore
argument_list|(
name|blobStore
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|void
name|assertRecordTypeEquals
parameter_list|(
specifier|final
name|Record
name|record
parameter_list|,
specifier|final
name|RecordType
name|expected
parameter_list|)
block|{
name|record
operator|.
name|getSegment
argument_list|()
operator|.
name|forEachRecord
argument_list|(
operator|new
name|RecordConsumer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|consume
parameter_list|(
name|int
name|number
parameter_list|,
name|RecordType
name|type
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|number
operator|==
name|record
operator|.
name|getRecordNumber
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

