begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|delegate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ItemExistsException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|session
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|identifier
operator|.
name|IdentifierManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|GenericPropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MultiGenericPropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|api
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
import|;
end_import

begin_comment
comment|/**  * Delegate class for workspace operations.  */
end_comment

begin_class
specifier|public
class|class
name|WorkspaceDelegate
block|{
specifier|private
specifier|final
name|SessionContext
name|context
decl_stmt|;
specifier|public
name|WorkspaceDelegate
parameter_list|(
name|SessionContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|checkNotNull
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**      * Copy a node      * @param srcPath  oak path to the source node to copy      * @param destPath  oak path to the destination      * @throws RepositoryException      */
specifier|public
name|void
name|copy
parameter_list|(
name|String
name|srcPath
parameter_list|,
name|String
name|destPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|SessionDelegate
name|sessionDelegate
init|=
name|context
operator|.
name|getSessionDelegate
argument_list|()
decl_stmt|;
name|AccessManager
name|accessManager
init|=
name|context
operator|.
name|getAccessManager
argument_list|()
decl_stmt|;
name|Root
name|root
init|=
name|sessionDelegate
operator|.
name|getContentSession
argument_list|()
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
comment|// check destination
name|Tree
name|dest
init|=
name|root
operator|.
name|getTree
argument_list|(
name|destPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|dest
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ItemExistsException
argument_list|(
name|destPath
argument_list|)
throw|;
block|}
comment|// check parent of destination
name|Tree
name|destParent
init|=
name|dest
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|destParent
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
name|destParent
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
comment|// check source exists
name|Tree
name|src
init|=
name|root
operator|.
name|getTree
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|src
operator|.
name|isRoot
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Cannot copy the root node"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|src
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
name|srcPath
argument_list|)
throw|;
block|}
name|accessManager
operator|.
name|checkPermissions
argument_list|(
name|destPath
argument_list|,
name|Permissions
operator|.
name|getString
argument_list|(
name|Permissions
operator|.
name|NODE_TYPE_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Tree
name|typeRoot
init|=
name|root
operator|.
name|getTree
argument_list|(
name|NODE_TYPES_PATH
argument_list|)
decl_stmt|;
operator|new
name|WorkspaceCopy
argument_list|(
name|src
argument_list|,
name|destParent
argument_list|,
name|Text
operator|.
name|getName
argument_list|(
name|destPath
argument_list|)
argument_list|,
name|typeRoot
argument_list|,
name|sessionDelegate
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
argument_list|)
operator|.
name|perform
argument_list|()
expr_stmt|;
name|context
operator|.
name|getSessionDelegate
argument_list|()
operator|.
name|commit
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|sessionDelegate
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|asRepositoryException
argument_list|()
throw|;
block|}
block|}
comment|//---------------------------< internal>-----------------------------------
specifier|private
specifier|static
specifier|final
class|class
name|WorkspaceCopy
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|translated
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Tree
name|src
decl_stmt|;
specifier|private
specifier|final
name|Tree
name|destParent
decl_stmt|;
specifier|private
specifier|final
name|String
name|destName
decl_stmt|;
specifier|private
specifier|final
name|Tree
name|typeRoot
decl_stmt|;
specifier|private
specifier|final
name|String
name|userId
decl_stmt|;
specifier|public
name|WorkspaceCopy
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|src
parameter_list|,
annotation|@
name|Nonnull
name|Tree
name|destParent
parameter_list|,
annotation|@
name|Nonnull
name|String
name|destName
parameter_list|,
annotation|@
name|Nonnull
name|Tree
name|typeRoot
parameter_list|,
annotation|@
name|Nonnull
name|String
name|userId
parameter_list|)
block|{
name|this
operator|.
name|src
operator|=
name|src
expr_stmt|;
name|this
operator|.
name|destParent
operator|=
name|destParent
expr_stmt|;
name|this
operator|.
name|destName
operator|=
name|destName
expr_stmt|;
name|this
operator|.
name|typeRoot
operator|=
name|typeRoot
expr_stmt|;
name|this
operator|.
name|userId
operator|=
name|userId
expr_stmt|;
block|}
specifier|public
name|void
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|copy
argument_list|(
name|src
argument_list|,
name|destParent
argument_list|,
name|destName
argument_list|)
expr_stmt|;
name|updateReferences
argument_list|(
name|src
argument_list|,
name|destParent
operator|.
name|getChild
argument_list|(
name|destName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|copy
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|source
parameter_list|,
annotation|@
name|Nonnull
name|Tree
name|destParent
parameter_list|,
annotation|@
name|Nonnull
name|String
name|destName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|primaryType
init|=
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|primaryType
operator|==
literal|null
condition|)
block|{
name|primaryType
operator|=
name|TreeUtil
operator|.
name|getDefaultChildType
argument_list|(
name|typeRoot
argument_list|,
name|destParent
argument_list|,
name|destName
argument_list|)
expr_stmt|;
if|if
condition|(
name|primaryType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
literal|"Cannot determine default node type."
argument_list|)
throw|;
block|}
block|}
name|Tree
name|dest
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|destParent
argument_list|,
name|destName
argument_list|,
name|primaryType
argument_list|,
name|typeRoot
argument_list|,
name|userId
argument_list|)
decl_stmt|;
for|for
control|(
name|PropertyState
name|property
range|:
name|source
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|String
name|propName
init|=
name|property
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|JCR_UUID
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|String
name|sourceId
init|=
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|String
name|newId
init|=
name|IdentifierManager
operator|.
name|generateUUID
argument_list|()
decl_stmt|;
name|dest
operator|.
name|setProperty
argument_list|(
name|JCR_UUID
argument_list|,
name|newId
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|translated
operator|.
name|containsKey
argument_list|(
name|sourceId
argument_list|)
condition|)
block|{
name|translated
operator|.
name|put
argument_list|(
name|sourceId
argument_list|,
name|newId
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|JCR_PRIMARYTYPE
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|dest
operator|.
name|setProperty
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Tree
name|child
range|:
name|source
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|copy
argument_list|(
name|child
argument_list|,
name|dest
argument_list|,
name|child
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Recursively updates references on the destination tree as defined by          * {@code Workspace.copy()}.          *          * @param src  the source tree of the copy operation.          * @param dest the unprocessed copy of the tree.          */
specifier|private
name|void
name|updateReferences
parameter_list|(
name|Tree
name|src
parameter_list|,
name|Tree
name|dest
parameter_list|)
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|PropertyState
name|prop
range|:
name|src
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|Type
argument_list|<
name|?
argument_list|>
name|type
init|=
name|prop
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|REFERENCE
operator|||
name|type
operator|==
name|Type
operator|.
name|REFERENCES
operator|||
name|type
operator|==
name|Type
operator|.
name|WEAKREFERENCE
operator|||
name|type
operator|==
name|Type
operator|.
name|WEAKREFERENCES
condition|)
block|{
name|updateProperty
argument_list|(
name|prop
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Tree
name|child
range|:
name|src
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|updateReferences
argument_list|(
name|child
argument_list|,
name|dest
operator|.
name|getChild
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateProperty
parameter_list|(
name|PropertyState
name|prop
parameter_list|,
name|Tree
name|dest
parameter_list|)
block|{
name|boolean
name|multi
init|=
name|prop
operator|.
name|isArray
argument_list|()
decl_stmt|;
name|boolean
name|weak
init|=
name|prop
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|WEAKREFERENCE
operator|||
name|prop
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|WEAKREFERENCES
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prop
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
decl_stmt|;
if|if
condition|(
name|weak
condition|)
block|{
name|id
operator|=
name|prop
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|WEAKREFERENCE
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|id
operator|=
name|prop
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCE
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|translateId
argument_list|(
name|id
argument_list|,
name|ids
argument_list|)
expr_stmt|;
block|}
name|PropertyState
name|p
decl_stmt|;
if|if
condition|(
name|multi
condition|)
block|{
if|if
condition|(
name|weak
condition|)
block|{
name|p
operator|=
name|MultiGenericPropertyState
operator|.
name|weakreferenceProperty
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|,
name|ids
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
name|MultiGenericPropertyState
operator|.
name|referenceProperty
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|,
name|ids
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|weak
condition|)
block|{
name|p
operator|=
name|GenericPropertyState
operator|.
name|weakreferenceProperty
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|,
name|ids
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
name|GenericPropertyState
operator|.
name|referenceProperty
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|,
name|ids
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|dest
operator|.
name|setProperty
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|translateId
parameter_list|(
name|String
name|id
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|)
block|{
name|String
name|newId
init|=
name|translated
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|newId
operator|!=
literal|null
condition|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|newId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

