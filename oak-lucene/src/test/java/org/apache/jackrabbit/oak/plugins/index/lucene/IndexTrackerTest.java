begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUpdateProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|TrackingCorruptIndexHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|BadIndexTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|ArrayBasedBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|ModifiedNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneIndexHelper
operator|.
name|newLucenePropertyIndexDefinition
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContentHelper
operator|.
name|INITIAL_CONTENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedAssignment"
argument_list|)
specifier|public
class|class
name|IndexTrackerTest
block|{
specifier|private
name|TrackingCorruptIndexHandler
name|corruptIndexHandler
init|=
operator|new
name|TrackingCorruptIndexHandler
argument_list|()
decl_stmt|;
specifier|private
name|EditorHook
name|hook
decl_stmt|;
specifier|private
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
specifier|private
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|private
name|IndexTracker
name|tracker
init|=
operator|new
name|IndexTracker
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|IndexUpdateProvider
name|updateProvider
init|=
operator|new
name|IndexUpdateProvider
argument_list|(
operator|new
name|LuceneIndexEditorProvider
argument_list|()
argument_list|,
literal|"async"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|updateProvider
operator|.
name|setCorruptIndexHandler
argument_list|(
name|corruptIndexHandler
argument_list|)
expr_stmt|;
name|hook
operator|=
operator|new
name|EditorHook
argument_list|(
name|updateProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|update
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|newLucenePropertyIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"lucene"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tracker
operator|.
name|getIndexNodePaths
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|LuceneIndexNode
name|indexNode
init|=
name|tracker
operator|.
name|acquireIndexNode
argument_list|(
literal|"/oak:index/lucene"
argument_list|)
decl_stmt|;
name|indexNode
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tracker
operator|.
name|getIndexNodePaths
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tracker
operator|.
name|getIndexNodePaths
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
comment|//Post refresh size should be 0 as all are closed
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tracker
operator|.
name|getIndexNodePaths
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|badIndexAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
comment|//1. Create and populate index
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|LuceneIndexNode
name|indexNode
init|=
name|tracker
operator|.
name|acquireIndexNode
argument_list|(
literal|"/oak:index/foo"
argument_list|)
decl_stmt|;
name|indexNode
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|tracker
operator|.
name|getBadIndexTracker
argument_list|()
operator|.
name|getIndexPaths
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|//2. Corrupt the index
name|builder
operator|=
name|indexed
operator|.
name|builder
argument_list|()
expr_stmt|;
name|indexed
operator|=
name|corruptIndex
argument_list|(
literal|"/oak:index/foo"
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|indexNode
operator|=
name|tracker
operator|.
name|acquireIndexNode
argument_list|(
literal|"/oak:index/foo"
argument_list|)
expr_stmt|;
comment|//Even if the persisted index is corrupted the index should be accessible
comment|//as update would have failed so old copy would be used
name|assertNotNull
argument_list|(
name|indexNode
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tracker
operator|.
name|getBadIndexTracker
argument_list|()
operator|.
name|getBadPersistedIndexPaths
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|//3. Recreate the tracker as we cannot push corrupt index in existing tracker
comment|//As diffAndUpdate would fail and existing LuceneIndexNode would not be changed
name|tracker
operator|=
operator|new
name|IndexTracker
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|VirtualTicker
name|ticker
init|=
operator|new
name|VirtualTicker
argument_list|()
decl_stmt|;
name|tracker
operator|.
name|getBadIndexTracker
argument_list|()
operator|.
name|setTicker
argument_list|(
name|ticker
argument_list|)
expr_stmt|;
name|indexNode
operator|=
name|tracker
operator|.
name|acquireIndexNode
argument_list|(
literal|"/oak:index/foo"
argument_list|)
expr_stmt|;
comment|//Index must be corrupted hence it must be null
name|assertNull
argument_list|(
name|indexNode
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tracker
operator|.
name|getBadIndexTracker
argument_list|()
operator|.
name|getIndexPaths
argument_list|()
operator|.
name|contains
argument_list|(
literal|"/oak:index/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|BadIndexTracker
operator|.
name|BadIndexInfo
name|badIdxInfo
init|=
name|tracker
operator|.
name|getBadIndexTracker
argument_list|()
operator|.
name|getInfo
argument_list|(
literal|"/oak:index/foo"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|badIdxInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|badIdxInfo
operator|.
name|getAccessCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//Try to access again
name|indexNode
operator|=
name|tracker
operator|.
name|acquireIndexNode
argument_list|(
literal|"/oak:index/foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|badIdxInfo
operator|.
name|getAccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|badIdxInfo
operator|.
name|getFailedAccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|indexNode
operator|=
name|tracker
operator|.
name|acquireIndexNode
argument_list|(
literal|"/oak:index/foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|badIdxInfo
operator|.
name|getAccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|badIdxInfo
operator|.
name|getFailedAccessCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//5. Move clock forward
name|ticker
operator|.
name|addTime
argument_list|(
name|tracker
operator|.
name|getBadIndexTracker
argument_list|()
operator|.
name|getRecheckIntervalMillis
argument_list|()
operator|+
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
comment|//Now index access must be attempted again
name|indexNode
operator|=
name|tracker
operator|.
name|acquireIndexNode
argument_list|(
literal|"/oak:index/foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|badIdxInfo
operator|.
name|getAccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|badIdxInfo
operator|.
name|getFailedAccessCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//6. Now lets reindex to fix the corruption
name|builder
operator|=
name|indexed
operator|.
name|builder
argument_list|()
expr_stmt|;
name|before
operator|=
name|indexed
expr_stmt|;
name|after
operator|=
name|reindex
argument_list|(
literal|"/oak:index/foo"
argument_list|)
expr_stmt|;
name|indexed
operator|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
comment|//7. Now indexNode should be accessible
name|indexNode
operator|=
name|tracker
operator|.
name|acquireIndexNode
argument_list|(
literal|"/oak:index/foo"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|indexNode
argument_list|)
expr_stmt|;
comment|//And this index would not be considered bad
name|badIdxInfo
operator|=
name|tracker
operator|.
name|getBadIndexTracker
argument_list|()
operator|.
name|getInfo
argument_list|(
literal|"/oak:index/foo"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|badIdxInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notifyFailedIndexing
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
comment|//1. Create and populate index
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|builder
operator|=
name|indexed
operator|.
name|builder
argument_list|()
expr_stmt|;
name|indexed
operator|=
name|corruptIndex
argument_list|(
literal|"/oak:index/foo"
argument_list|)
expr_stmt|;
name|builder
operator|=
name|indexed
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar2"
argument_list|)
expr_stmt|;
name|after
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
try|try
block|{
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Indexing should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|ignore
parameter_list|)
block|{          }
name|assertTrue
argument_list|(
name|corruptIndexHandler
operator|.
name|getFailingIndexData
argument_list|(
literal|"async"
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"/oak:index/foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|avoidRedundantDiff
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexTracker
name|tracker2
init|=
operator|new
name|IndexTracker
argument_list|()
decl_stmt|;
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|newLucenePropertyIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"lucene"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|tracker2
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|LuceneIndexNode
name|indexNode
init|=
name|tracker
operator|.
name|acquireIndexNode
argument_list|(
literal|"/oak:index/lucene"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|indexNode
operator|.
name|getSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|indexNode
operator|.
name|release
argument_list|()
expr_stmt|;
name|before
operator|=
name|indexed
expr_stmt|;
name|builder
operator|=
name|before
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|after
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|AsyncIndexInfoService
name|service
init|=
name|mock
argument_list|(
name|AsyncIndexInfoService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|service
operator|.
name|hasIndexerUpdatedForAnyLane
argument_list|(
name|any
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|setAsyncIndexInfoService
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|indexed
operator|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|tracker2
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
comment|//As we falsely said no change has happened index state would remain same
name|indexNode
operator|=
name|tracker
operator|.
name|acquireIndexNode
argument_list|(
literal|"/oak:index/lucene"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|indexNode
operator|.
name|getSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|indexNode
operator|.
name|release
argument_list|()
expr_stmt|;
comment|//While tracker2 does not use async service it sees the index change
name|indexNode
operator|=
name|tracker2
operator|.
name|acquireIndexNode
argument_list|(
literal|"/oak:index/lucene"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|indexNode
operator|.
name|getSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|indexNode
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|avoidNonStatusChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|newLucenePropertyIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"lucene"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|indexed
operator|=
name|ModifiedNodeState
operator|.
name|squeeze
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|LuceneIndexNode
name|indexNode
init|=
name|tracker
operator|.
name|acquireIndexNode
argument_list|(
literal|"/oak:index/lucene"
argument_list|)
decl_stmt|;
name|int
name|indexNodeId
init|=
name|indexNode
operator|.
name|getIndexNodeId
argument_list|()
decl_stmt|;
name|indexNode
operator|.
name|release
argument_list|()
expr_stmt|;
name|before
operator|=
name|indexed
expr_stmt|;
name|builder
operator|=
name|before
operator|.
name|builder
argument_list|()
expr_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|builder
argument_list|,
literal|"/oak:index/lucene/:property-index"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|after
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|indexed
operator|=
name|ModifiedNodeState
operator|.
name|squeeze
argument_list|(
name|after
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|indexNode
operator|=
name|tracker
operator|.
name|acquireIndexNode
argument_list|(
literal|"/oak:index/lucene"
argument_list|)
expr_stmt|;
name|int
name|indexNodeId2
init|=
name|indexNode
operator|.
name|getIndexNodeId
argument_list|()
decl_stmt|;
name|indexNode
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|indexNodeId
argument_list|,
name|indexNodeId2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|NodeState
name|corruptIndex
parameter_list|(
name|String
name|indexPath
parameter_list|)
block|{
name|NodeBuilder
name|dir
init|=
name|TestUtil
operator|.
name|child
argument_list|(
name|builder
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|indexPath
argument_list|,
literal|":data"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|dir
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
literal|"segments.gen"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|dir
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"jcr:data"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|ArrayBasedBlob
argument_list|(
literal|"foo"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|BINARIES
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|TestUtil
operator|.
name|child
argument_list|(
name|builder
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|indexPath
argument_list|,
name|IndexDefinition
operator|.
name|STATUS_NODE
argument_list|)
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|getNodeState
argument_list|()
return|;
block|}
specifier|private
name|NodeState
name|reindex
parameter_list|(
name|String
name|indexPath
parameter_list|)
block|{
name|NodeBuilder
name|dir
init|=
name|TestUtil
operator|.
name|child
argument_list|(
name|builder
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
name|dir
operator|.
name|setProperty
argument_list|(
literal|"reindex"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|getNodeState
argument_list|()
return|;
block|}
specifier|private
name|void
name|createIndex
parameter_list|(
name|String
name|propName
parameter_list|)
block|{
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|newLucenePropertyIndexDefinition
argument_list|(
name|index
argument_list|,
name|propName
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|propName
argument_list|)
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

