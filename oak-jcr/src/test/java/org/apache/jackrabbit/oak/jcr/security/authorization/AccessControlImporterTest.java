begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ImportUUIDBehavior
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_class
specifier|public
class|class
name|AccessControlImporterTest
extends|extends
name|AbstractJCRTest
block|{
specifier|public
specifier|static
specifier|final
name|String
name|XML_POLICY_TREE
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
operator|+
literal|"<sv:node sv:name=\"test\" xmlns:mix=\"http://www.jcp.org/jcr/mix/1.0\" xmlns:nt=\"http://www.jcp.org/jcr/nt/1.0\" xmlns:fn_old=\"http://www.w3.org/2004/10/xpath-functions\" xmlns:fn=\"http://www.w3.org/2005/xpath-functions\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:sv=\"http://www.jcp.org/jcr/sv/1.0\" xmlns:rep=\"internal\" xmlns:jcr=\"http://www.jcp.org/jcr/1.0\">"
operator|+
literal|"<sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\">"
operator|+
literal|"<sv:value>nt:unstructured</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:property sv:name=\"jcr:mixinTypes\" sv:type=\"Name\">"
operator|+
literal|"<sv:value>rep:AccessControllable</sv:value>"
operator|+
literal|"<sv:value>mix:versionable</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:property sv:name=\"jcr:uuid\" sv:type=\"String\">"
operator|+
literal|"<sv:value>0a0ca2e9-ab98-4433-a12b-d57283765207</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:property sv:name=\"jcr:baseVersion\" sv:type=\"Reference\">"
operator|+
literal|"<sv:value>35d0d137-a3a4-4af3-8cdd-ce565ea6bdc9</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:property sv:name=\"jcr:isCheckedOut\" sv:type=\"Boolean\">"
operator|+
literal|"<sv:value>true</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:property sv:name=\"jcr:predecessors\" sv:type=\"Reference\">"
operator|+
literal|"<sv:value>35d0d137-a3a4-4af3-8cdd-ce565ea6bdc9</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:property sv:name=\"jcr:versionHistory\" sv:type=\"Reference\">"
operator|+
literal|"<sv:value>428c9ef2-78e5-4f1c-95d3-16b4ce72d815</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:node sv:name=\"rep:policy\">"
operator|+
literal|"<sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\">"
operator|+
literal|"<sv:value>rep:ACL</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:node sv:name=\"allow\">"
operator|+
literal|"<sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\">"
operator|+
literal|"<sv:value>rep:GrantACE</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:property sv:name=\"rep:principalName\" sv:type=\"String\">"
operator|+
literal|"<sv:value>everyone</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:property sv:name=\"rep:privileges\" sv:type=\"Name\">"
operator|+
literal|"<sv:value>jcr:write</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"</sv:node>"
operator|+
literal|"</sv:node>"
operator|+
literal|"</sv:node>"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XML_POLICY_TREE_2
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
operator|+
literal|"<sv:node sv:name=\"rep:policy\" "
operator|+
literal|"xmlns:mix=\"http://www.jcp.org/jcr/mix/1.0\" xmlns:nt=\"http://www.jcp.org/jcr/nt/1.0\" xmlns:fn_old=\"http://www.w3.org/2004/10/xpath-functions\" xmlns:fn=\"http://www.w3.org/2005/xpath-functions\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:sv=\"http://www.jcp.org/jcr/sv/1.0\" xmlns:rep=\"internal\" xmlns:jcr=\"http://www.jcp.org/jcr/1.0\">"
operator|+
literal|"<sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\">"
operator|+
literal|"<sv:value>rep:ACL</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:node sv:name=\"allow\">"
operator|+
literal|"<sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\">"
operator|+
literal|"<sv:value>rep:GrantACE</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:property sv:name=\"rep:principalName\" sv:type=\"String\">"
operator|+
literal|"<sv:value>everyone</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:property sv:name=\"rep:privileges\" sv:type=\"Name\">"
operator|+
literal|"<sv:value>jcr:write</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"</sv:node>"
operator|+
literal|"</sv:node>"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XML_POLICY_TREE_3
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
operator|+
literal|"<sv:node sv:name=\"rep:policy\" "
operator|+
literal|"xmlns:mix=\"http://www.jcp.org/jcr/mix/1.0\" xmlns:nt=\"http://www.jcp.org/jcr/nt/1.0\" xmlns:fn_old=\"http://www.w3.org/2004/10/xpath-functions\" xmlns:fn=\"http://www.w3.org/2005/xpath-functions\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:sv=\"http://www.jcp.org/jcr/sv/1.0\" xmlns:rep=\"internal\" xmlns:jcr=\"http://www.jcp.org/jcr/1.0\">"
operator|+
literal|"<sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\">"
operator|+
literal|"<sv:value>rep:ACL</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:node sv:name=\"allow\">"
operator|+
literal|"<sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\">"
operator|+
literal|"<sv:value>rep:GrantACE</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:property sv:name=\"rep:principalName\" sv:type=\"String\">"
operator|+
literal|"<sv:value>everyone</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:property sv:name=\"rep:privileges\" sv:type=\"Name\">"
operator|+
literal|"<sv:value>jcr:write</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"</sv:node>"
operator|+
literal|"<sv:node sv:name=\"allow0\">"
operator|+
literal|"<sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\">"
operator|+
literal|"<sv:value>rep:GrantACE</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:property sv:name=\"rep:principalName\" sv:type=\"String\">"
operator|+
literal|"<sv:value>admin</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:property sv:name=\"rep:privileges\" sv:type=\"Name\">"
operator|+
literal|"<sv:value>jcr:write</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"</sv:node>"
operator|+
literal|"</sv:node>"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XML_POLICY_TREE_4
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
operator|+
literal|"<sv:node sv:name=\"rep:policy\" "
operator|+
literal|"xmlns:mix=\"http://www.jcp.org/jcr/mix/1.0\" xmlns:nt=\"http://www.jcp.org/jcr/nt/1.0\" xmlns:fn_old=\"http://www.w3.org/2004/10/xpath-functions\" xmlns:fn=\"http://www.w3.org/2005/xpath-functions\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:sv=\"http://www.jcp.org/jcr/sv/1.0\" xmlns:rep=\"internal\" xmlns:jcr=\"http://www.jcp.org/jcr/1.0\">"
operator|+
literal|"<sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\">"
operator|+
literal|"<sv:value>rep:ACL</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:node sv:name=\"allow\">"
operator|+
literal|"<sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\">"
operator|+
literal|"<sv:value>rep:GrantACE</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:property sv:name=\"rep:principalName\" sv:type=\"String\">"
operator|+
literal|"<sv:value>unknownprincipal</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:property sv:name=\"rep:privileges\" sv:type=\"Name\">"
operator|+
literal|"<sv:value>jcr:write</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"</sv:node>"
operator|+
literal|"<sv:node sv:name=\"allow0\">"
operator|+
literal|"<sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\">"
operator|+
literal|"<sv:value>rep:GrantACE</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:property sv:name=\"rep:principalName\" sv:type=\"String\">"
operator|+
literal|"<sv:value>admin</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:property sv:name=\"rep:privileges\" sv:type=\"Name\">"
operator|+
literal|"<sv:value>jcr:write</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"</sv:node>"
operator|+
literal|"</sv:node>"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XML_POLICY_TREE_5
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
operator|+
literal|"<sv:node sv:name=\"rep:policy\" "
operator|+
literal|"xmlns:mix=\"http://www.jcp.org/jcr/mix/1.0\" xmlns:nt=\"http://www.jcp.org/jcr/nt/1.0\" xmlns:fn_old=\"http://www.w3.org/2004/10/xpath-functions\" xmlns:fn=\"http://www.w3.org/2005/xpath-functions\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:sv=\"http://www.jcp.org/jcr/sv/1.0\" xmlns:rep=\"internal\" xmlns:jcr=\"http://www.jcp.org/jcr/1.0\">"
operator|+
literal|"<sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\">"
operator|+
literal|"<sv:value>rep:ACL</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:node sv:name=\"allow0\">"
operator|+
literal|"<sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\">"
operator|+
literal|"<sv:value>rep:GrantACE</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:property sv:name=\"rep:principalName\" sv:type=\"String\">"
operator|+
literal|"<sv:value>admin</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:property sv:name=\"rep:privileges\" sv:type=\"Name\">"
operator|+
literal|"<sv:value>jcr:write</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"</sv:node>"
operator|+
literal|"</sv:node>"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XML_REPO_POLICY_TREE
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
operator|+
literal|"<sv:node sv:name=\"rep:repoPolicy\" "
operator|+
literal|"xmlns:mix=\"http://www.jcp.org/jcr/mix/1.0\" xmlns:nt=\"http://www.jcp.org/jcr/nt/1.0\" xmlns:fn_old=\"http://www.w3.org/2004/10/xpath-functions\" xmlns:fn=\"http://www.w3.org/2005/xpath-functions\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:sv=\"http://www.jcp.org/jcr/sv/1.0\" xmlns:rep=\"internal\" xmlns:jcr=\"http://www.jcp.org/jcr/1.0\">"
operator|+
literal|"<sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\">"
operator|+
literal|"<sv:value>rep:ACL</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:node sv:name=\"allow\">"
operator|+
literal|"<sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\">"
operator|+
literal|"<sv:value>rep:GrantACE</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:property sv:name=\"rep:principalName\" sv:type=\"String\">"
operator|+
literal|"<sv:value>admin</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"<sv:property sv:name=\"rep:privileges\" sv:type=\"Name\">"
operator|+
literal|"<sv:value>jcr:workspaceManagement</sv:value>"
operator|+
literal|"</sv:property>"
operator|+
literal|"</sv:node>"
operator|+
literal|"</sv:node>"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XML_POLICY_ONLY
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><sv:node sv:name=\"test\" xmlns:mix=\"http://www.jcp.org/jcr/mix/1.0\" xmlns:nt=\"http://www.jcp.org/jcr/nt/1.0\" xmlns:fn_old=\"http://www.w3.org/2004/10/xpath-functions\" xmlns:fn=\"http://www.w3.org/2005/xpath-functions\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:sv=\"http://www.jcp.org/jcr/sv/1.0\" xmlns:rep=\"internal\" xmlns:jcr=\"http://www.jcp.org/jcr/1.0\"><sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\"><sv:value>nt:unstructured</sv:value></sv:property><sv:property sv:name=\"jcr:mixinTypes\" sv:type=\"Name\"><sv:value>rep:AccessControllable</sv:value><sv:value>mix:versionable</sv:value></sv:property><sv:property sv:name=\"jcr:uuid\" sv:type=\"String\"><sv:value>0a0ca2e9-ab98-4433-a12b-d57283765207</sv:value></sv:property><sv:property sv:name=\"jcr:baseVersion\" sv:type=\"Reference\"><sv:value>35d0d137-a3a4-4af3-8cdd-ce565ea6bdc9</sv:value></sv:property><sv:property sv:name=\"jcr:isCheckedOut\" sv:type=\"Boolean\"><sv:value>true</sv:value></sv:property><sv:property sv:name=\"jcr:predecessors\" sv:type=\"Reference\"><sv:value>35d0d137-a3a4-4af3-8cdd-ce565ea6bdc9</sv:value></sv:property><sv:property sv:name=\"jcr:versionHistory\" sv:type=\"Reference\"><sv:value>428c9ef2-78e5-4f1c-95d3-16b4ce72d815</sv:value></sv:property><sv:node sv:name=\"rep:policy\"><sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\"><sv:value>rep:ACL</sv:value></sv:property></sv:node></sv:node>"
decl_stmt|;
specifier|protected
name|void
name|doImport
parameter_list|(
name|String
name|parentPath
parameter_list|,
name|String
name|xml
parameter_list|)
throws|throws
name|IOException
throws|,
name|RepositoryException
block|{
name|InputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|xml
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSessionImport
argument_list|()
condition|)
block|{
name|superuser
operator|.
name|importXML
argument_list|(
name|parentPath
argument_list|,
name|in
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_THROW
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|importXML
argument_list|(
name|parentPath
argument_list|,
name|in
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_THROW
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|isSessionImport
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Imports a resource-based ACL containing a single entry.      *      * @throws Exception      */
specifier|public
name|void
name|testImportACL
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Node
name|target
init|=
name|testRootNode
decl_stmt|;
name|doImport
argument_list|(
name|target
operator|.
name|getPath
argument_list|()
argument_list|,
name|XML_POLICY_TREE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|target
operator|.
name|hasNode
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|target
operator|.
name|getNode
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|superuser
operator|.
name|getAccessControlManager
argument_list|()
decl_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policies
index|[
literal|0
index|]
operator|instanceof
name|JackrabbitAccessControlList
argument_list|)
expr_stmt|;
name|AccessControlEntry
index|[]
name|entries
init|=
operator|(
operator|(
name|JackrabbitAccessControlList
operator|)
name|policies
index|[
literal|0
index|]
operator|)
operator|.
name|getAccessControlEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|length
argument_list|)
expr_stmt|;
name|AccessControlEntry
name|entry
init|=
name|entries
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"everyone"
argument_list|,
name|entry
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entry
operator|.
name|getPrivileges
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|Privilege
operator|.
name|JCR_WRITE
argument_list|)
argument_list|,
name|entry
operator|.
name|getPrivileges
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|instanceof
name|JackrabbitAccessControlEntry
condition|)
block|{
name|assertTrue
argument_list|(
operator|(
operator|(
name|JackrabbitAccessControlEntry
operator|)
name|entry
operator|)
operator|.
name|isAllow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|superuser
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testImportACLOnly
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Node
name|target
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|)
decl_stmt|;
name|target
operator|.
name|addMixin
argument_list|(
literal|"rep:AccessControllable"
argument_list|)
expr_stmt|;
name|doImport
argument_list|(
name|target
operator|.
name|getPath
argument_list|()
argument_list|,
name|XML_POLICY_TREE_3
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|target
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|superuser
operator|.
name|getAccessControlManager
argument_list|()
decl_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policies
index|[
literal|0
index|]
operator|instanceof
name|JackrabbitAccessControlList
argument_list|)
expr_stmt|;
name|AccessControlEntry
index|[]
name|entries
init|=
operator|(
operator|(
name|JackrabbitAccessControlList
operator|)
name|policies
index|[
literal|0
index|]
operator|)
operator|.
name|getAccessControlEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|length
argument_list|)
expr_stmt|;
name|AccessControlEntry
name|entry
init|=
name|entries
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"everyone"
argument_list|,
name|entry
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entry
operator|.
name|getPrivileges
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|Privilege
operator|.
name|JCR_WRITE
argument_list|)
argument_list|,
name|entry
operator|.
name|getPrivileges
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|entry
operator|=
name|entries
index|[
literal|1
index|]
expr_stmt|;
name|assertEquals
argument_list|(
literal|"admin"
argument_list|,
name|entry
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entry
operator|.
name|getPrivileges
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|Privilege
operator|.
name|JCR_WRITE
argument_list|)
argument_list|,
name|entry
operator|.
name|getPrivileges
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|instanceof
name|JackrabbitAccessControlEntry
condition|)
block|{
name|assertTrue
argument_list|(
operator|(
operator|(
name|JackrabbitAccessControlEntry
operator|)
name|entry
operator|)
operator|.
name|isAllow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|superuser
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testImportACLRemoveACE
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Node
name|target
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|)
decl_stmt|;
name|target
operator|.
name|addMixin
argument_list|(
literal|"rep:AccessControllable"
argument_list|)
expr_stmt|;
name|doImport
argument_list|(
name|target
operator|.
name|getPath
argument_list|()
argument_list|,
name|XML_POLICY_TREE_3
argument_list|)
expr_stmt|;
name|doImport
argument_list|(
name|target
operator|.
name|getPath
argument_list|()
argument_list|,
name|XML_POLICY_TREE_5
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|target
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|superuser
operator|.
name|getAccessControlManager
argument_list|()
decl_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policies
index|[
literal|0
index|]
operator|instanceof
name|JackrabbitAccessControlList
argument_list|)
expr_stmt|;
name|AccessControlEntry
index|[]
name|entries
init|=
operator|(
operator|(
name|JackrabbitAccessControlList
operator|)
name|policies
index|[
literal|0
index|]
operator|)
operator|.
name|getAccessControlEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|length
argument_list|)
expr_stmt|;
name|AccessControlEntry
name|entry
init|=
name|entries
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"admin"
argument_list|,
name|entry
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entry
operator|.
name|getPrivileges
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|Privilege
operator|.
name|JCR_WRITE
argument_list|)
argument_list|,
name|entry
operator|.
name|getPrivileges
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|instanceof
name|JackrabbitAccessControlEntry
condition|)
block|{
name|assertTrue
argument_list|(
operator|(
operator|(
name|JackrabbitAccessControlEntry
operator|)
name|entry
operator|)
operator|.
name|isAllow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|superuser
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testImportACLUnknown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Node
name|target
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|)
decl_stmt|;
name|target
operator|.
name|addMixin
argument_list|(
literal|"rep:AccessControllable"
argument_list|)
expr_stmt|;
name|doImport
argument_list|(
name|target
operator|.
name|getPath
argument_list|()
argument_list|,
name|XML_POLICY_TREE_4
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|target
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|superuser
operator|.
name|getAccessControlManager
argument_list|()
decl_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policies
index|[
literal|0
index|]
operator|instanceof
name|JackrabbitAccessControlList
argument_list|)
expr_stmt|;
name|AccessControlEntry
index|[]
name|entries
init|=
operator|(
operator|(
name|JackrabbitAccessControlList
operator|)
name|policies
index|[
literal|0
index|]
operator|)
operator|.
name|getAccessControlEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|length
argument_list|)
expr_stmt|;
name|AccessControlEntry
name|entry
init|=
name|entries
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"unknownprincipal"
argument_list|,
name|entry
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entry
operator|.
name|getPrivileges
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|Privilege
operator|.
name|JCR_WRITE
argument_list|)
argument_list|,
name|entry
operator|.
name|getPrivileges
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|entry
operator|=
name|entries
index|[
literal|1
index|]
expr_stmt|;
name|assertEquals
argument_list|(
literal|"admin"
argument_list|,
name|entry
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entry
operator|.
name|getPrivileges
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|Privilege
operator|.
name|JCR_WRITE
argument_list|)
argument_list|,
name|entry
operator|.
name|getPrivileges
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|instanceof
name|JackrabbitAccessControlEntry
condition|)
block|{
name|assertTrue
argument_list|(
operator|(
operator|(
name|JackrabbitAccessControlEntry
operator|)
name|entry
operator|)
operator|.
name|isAllow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|superuser
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Imports a resource-based ACL containing a single entry for a policy that      * already exists: expected outcome its that the existing ACE is replaced.      */
specifier|public
name|void
name|testImportPolicyExists
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|everyone
init|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getPrincipalManager
argument_list|()
operator|.
name|getEveryone
argument_list|()
decl_stmt|;
name|Node
name|target
init|=
name|testRootNode
decl_stmt|;
name|target
operator|=
name|target
operator|.
name|addNode
argument_list|(
literal|"test"
argument_list|,
literal|"test:sameNameSibsFalseChildNodeDefinition"
argument_list|)
expr_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|superuser
operator|.
name|getAccessControlManager
argument_list|()
decl_stmt|;
for|for
control|(
name|AccessControlPolicyIterator
name|it
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|target
operator|.
name|getPath
argument_list|()
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AccessControlPolicy
name|policy
init|=
name|it
operator|.
name|nextAccessControlPolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|policy
operator|instanceof
name|AccessControlList
condition|)
block|{
name|Privilege
index|[]
name|privs
init|=
operator|new
name|Privilege
index|[]
block|{
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|Privilege
operator|.
name|JCR_LOCK_MANAGEMENT
argument_list|)
block|}
decl_stmt|;
operator|(
operator|(
name|AccessControlList
operator|)
name|policy
operator|)
operator|.
name|addAccessControlEntry
argument_list|(
name|everyone
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|target
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|doImport
argument_list|(
name|target
operator|.
name|getPath
argument_list|()
argument_list|,
name|XML_POLICY_TREE_2
argument_list|)
expr_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|target
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policies
index|[
literal|0
index|]
operator|instanceof
name|JackrabbitAccessControlList
argument_list|)
expr_stmt|;
name|AccessControlEntry
index|[]
name|entries
init|=
operator|(
operator|(
name|JackrabbitAccessControlList
operator|)
name|policies
index|[
literal|0
index|]
operator|)
operator|.
name|getAccessControlEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|length
argument_list|)
expr_stmt|;
name|AccessControlEntry
name|entry
init|=
name|entries
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|everyone
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Privilege
argument_list|>
name|privs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|entry
operator|.
name|getPrivileges
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|privs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|Privilege
operator|.
name|JCR_WRITE
argument_list|)
argument_list|,
name|entry
operator|.
name|getPrivileges
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|instanceof
name|JackrabbitAccessControlEntry
condition|)
block|{
name|assertTrue
argument_list|(
operator|(
operator|(
name|JackrabbitAccessControlEntry
operator|)
name|entry
operator|)
operator|.
name|isAllow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|superuser
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Imports an empty resource-based ACL for a policy that already exists.      *      * @throws Exception      */
specifier|public
name|void
name|testImportEmptyExistingPolicy
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|isSessionImport
argument_list|()
condition|)
block|{
return|return;
comment|// FIXME
block|}
name|Node
name|target
init|=
name|testRootNode
decl_stmt|;
name|target
operator|=
name|target
operator|.
name|addNode
argument_list|(
literal|"test"
argument_list|,
literal|"test:sameNameSibsFalseChildNodeDefinition"
argument_list|)
expr_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|superuser
operator|.
name|getAccessControlManager
argument_list|()
decl_stmt|;
for|for
control|(
name|AccessControlPolicyIterator
name|it
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|target
operator|.
name|getPath
argument_list|()
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AccessControlPolicy
name|policy
init|=
name|it
operator|.
name|nextAccessControlPolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|policy
operator|instanceof
name|AccessControlList
condition|)
block|{
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|target
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|doImport
argument_list|(
name|target
operator|.
name|getPath
argument_list|()
argument_list|,
name|XML_POLICY_ONLY
argument_list|)
expr_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|target
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policies
index|[
literal|0
index|]
operator|instanceof
name|JackrabbitAccessControlList
argument_list|)
expr_stmt|;
name|AccessControlEntry
index|[]
name|entries
init|=
operator|(
operator|(
name|JackrabbitAccessControlList
operator|)
name|policies
index|[
literal|0
index|]
operator|)
operator|.
name|getAccessControlEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entries
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|superuser
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Repo level acl must be imported underneath the root node.      *      * @throws Exception      */
specifier|public
name|void
name|testImportRepoACLAtRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|target
init|=
name|superuser
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|superuser
operator|.
name|getAccessControlManager
argument_list|()
decl_stmt|;
try|try
block|{
comment|// need to add mixin. in contrast to only using JCR API to retrieve
comment|// and set the policies the protected item import only is called if
comment|// the node to be imported is defined to be protected. however, if
comment|// the root node doesn't have the mixin assigned the defining node
comment|// type of the imported policy nodes will be rep:root (unstructured)
comment|// and the items will not be detected as being protected.
name|target
operator|.
name|addMixin
argument_list|(
literal|"rep:RepoAccessControllable"
argument_list|)
expr_stmt|;
name|doImport
argument_list|(
name|target
operator|.
name|getPath
argument_list|()
argument_list|,
name|XML_REPO_POLICY_TREE
argument_list|)
expr_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policies
index|[
literal|0
index|]
operator|instanceof
name|JackrabbitAccessControlList
argument_list|)
expr_stmt|;
name|AccessControlEntry
index|[]
name|entries
init|=
operator|(
operator|(
name|JackrabbitAccessControlList
operator|)
name|policies
index|[
literal|0
index|]
operator|)
operator|.
name|getAccessControlEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
index|[
literal|0
index|]
operator|.
name|getPrivileges
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
literal|"jcr:workspaceManagement"
argument_list|)
argument_list|,
name|entries
index|[
literal|0
index|]
operator|.
name|getPrivileges
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|target
operator|.
name|hasNode
argument_list|(
literal|"rep:repoPolicy"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|target
operator|.
name|hasNode
argument_list|(
literal|"rep:repoPolicy/allow"
argument_list|)
argument_list|)
expr_stmt|;
comment|// clean up again
name|acMgr
operator|.
name|removePolicy
argument_list|(
literal|null
argument_list|,
name|policies
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|target
operator|.
name|hasNode
argument_list|(
literal|"rep:repoPolicy"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|target
operator|.
name|hasNode
argument_list|(
literal|"rep:repoPolicy/allow"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|superuser
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Make sure repo-level acl is not imported below any other node than the      * root node.      *      * @throws Exception      */
specifier|public
name|void
name|testImportRepoACLAtTestNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|target
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|target
operator|.
name|addMixin
argument_list|(
literal|"rep:RepoAccessControllable"
argument_list|)
expr_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|superuser
operator|.
name|getAccessControlManager
argument_list|()
decl_stmt|;
try|try
block|{
name|doImport
argument_list|(
name|target
operator|.
name|getPath
argument_list|()
argument_list|,
name|XML_REPO_POLICY_TREE
argument_list|)
expr_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|target
operator|.
name|hasNode
argument_list|(
literal|"rep:repoPolicy"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|target
operator|.
name|hasNode
argument_list|(
literal|"rep:repoPolicy/allow0"
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|target
operator|.
name|getNode
argument_list|(
literal|"rep:repoPolicy"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"rep:RepoAccessControllable"
argument_list|,
name|n
operator|.
name|getDefinition
argument_list|()
operator|.
name|getDeclaringNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|superuser
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

