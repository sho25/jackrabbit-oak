begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|cug
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|RootFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|cug
operator|.
name|CugPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|ROOT_PATH
import|;
end_import

begin_class
specifier|public
class|class
name|NestedCugHookTest
extends|extends
name|AbstractCugTest
block|{
specifier|protected
specifier|static
name|void
name|assertNestedCugs
parameter_list|(
annotation|@
name|Nonnull
name|Root
name|root
parameter_list|,
annotation|@
name|Nonnull
name|String
name|cugHoldingPath
parameter_list|,
name|boolean
name|hasCugPolicy
parameter_list|,
annotation|@
name|Nonnull
name|String
modifier|...
name|expectedNestedPaths
parameter_list|)
block|{
name|Root
name|immutableRoot
init|=
name|RootFactory
operator|.
name|createReadOnlyRoot
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|Tree
name|tree
init|=
name|immutableRoot
operator|.
name|getTree
argument_list|(
name|cugHoldingPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasCugPolicy
condition|)
block|{
name|assertFalse
argument_list|(
name|tree
operator|.
name|hasProperty
argument_list|(
name|HIDDEN_NESTED_CUGS
argument_list|)
argument_list|)
expr_stmt|;
name|tree
operator|=
name|tree
operator|.
name|getChild
argument_list|(
name|REP_CUG_POLICY
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|tree
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tree
operator|.
name|isRoot
argument_list|()
condition|)
block|{
if|if
condition|(
name|expectedNestedPaths
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|assertFalse
argument_list|(
name|tree
operator|.
name|hasProperty
argument_list|(
name|HIDDEN_TOP_CUG_CNT
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|tree
operator|.
name|hasProperty
argument_list|(
name|HIDDEN_TOP_CUG_CNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|expectedNestedPaths
operator|.
name|length
argument_list|)
argument_list|,
name|tree
operator|.
name|getProperty
argument_list|(
name|HIDDEN_TOP_CUG_CNT
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|tree
operator|.
name|hasProperty
argument_list|(
name|HIDDEN_TOP_CUG_CNT
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectedNestedPaths
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|assertFalse
argument_list|(
name|tree
operator|.
name|hasProperty
argument_list|(
name|HIDDEN_NESTED_CUGS
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|tree
operator|.
name|hasProperty
argument_list|(
name|HIDDEN_NESTED_CUGS
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyState
name|nestedCugs
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|HIDDEN_NESTED_CUGS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|nestedCugs
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nestedPaths
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|nestedCugs
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|PATHS
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|expectedNestedPaths
argument_list|)
argument_list|,
name|nestedPaths
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|removeCug
parameter_list|(
annotation|@
name|Nonnull
name|String
name|path
parameter_list|,
name|boolean
name|doCommit
parameter_list|)
throws|throws
name|Exception
block|{
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
for|for
control|(
name|AccessControlPolicy
name|policy
range|:
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|path
argument_list|)
control|)
block|{
if|if
condition|(
name|policy
operator|instanceof
name|CugPolicy
condition|)
block|{
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|path
argument_list|,
name|policy
argument_list|)
expr_stmt|;
if|if
condition|(
name|doCommit
condition|)
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"NestedCugHook"
argument_list|,
operator|new
name|NestedCugHook
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddCug
parameter_list|()
throws|throws
name|Exception
block|{
name|createCug
argument_list|(
literal|"/content"
argument_list|,
name|getTestGroupPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
literal|"/"
argument_list|,
literal|false
argument_list|,
literal|"/content"
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
literal|"/content"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddNestedCug
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create cugs
comment|// - /content/a     : allow testGroup, deny everyone
comment|// - /content/aa/bb : allow testGroup, deny everyone
comment|// - /content/a/b/c : allow everyone,  deny testGroup (isolated)
comment|// - /content2      : allow everyone,  deny testGroup (isolated)
name|setupCugsAndAcls
argument_list|()
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|,
literal|"/content/a"
argument_list|,
literal|"/content/aa/bb"
argument_list|,
literal|"/content2"
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
literal|"/content/a"
argument_list|,
literal|true
argument_list|,
literal|"/content/a/b/c"
argument_list|)
expr_stmt|;
comment|// add CUG at /content after having created CUGs in the subtree
name|createCug
argument_list|(
literal|"/content"
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|,
literal|"/content"
argument_list|,
literal|"/content2"
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
literal|"/content"
argument_list|,
literal|true
argument_list|,
literal|"/content/a"
argument_list|,
literal|"/content/aa/bb"
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
literal|"/content/a"
argument_list|,
literal|true
argument_list|,
literal|"/content/a/b/c"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddNodeWithCug
parameter_list|()
throws|throws
name|Exception
block|{
name|createCug
argument_list|(
name|SUPPORTED_PATH2
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|newTree
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|SUPPORTED_PATH2
argument_list|)
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
operator|.
name|getTree
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|newTree
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|createCug
argument_list|(
name|path
argument_list|,
name|getTestGroupPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|,
name|SUPPORTED_PATH2
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|SUPPORTED_PATH2
argument_list|,
literal|true
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddNodeWithCugManually
parameter_list|()
throws|throws
name|Exception
block|{
name|createCug
argument_list|(
name|root
argument_list|,
name|SUPPORTED_PATH3
argument_list|,
name|EveryonePrincipal
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|newTree
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|SUPPORTED_PATH3
argument_list|)
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
operator|.
name|getTree
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|newTree
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|createCug
argument_list|(
name|root
argument_list|,
name|path
argument_list|,
name|getTestGroupPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|,
name|SUPPORTED_PATH3
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|SUPPORTED_PATH3
argument_list|,
literal|true
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddAtUnsupportedPath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|unsupportedPath
init|=
name|UNSUPPORTED_PATH
operator|+
literal|"/child"
decl_stmt|;
name|createCug
argument_list|(
name|root
argument_list|,
name|unsupportedPath
argument_list|,
name|EveryonePrincipal
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|,
name|unsupportedPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddAtRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|createCug
argument_list|(
name|root
argument_list|,
name|ROOT_PATH
argument_list|,
name|EveryonePrincipal
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|ROOT_PATH
argument_list|)
operator|.
name|hasChild
argument_list|(
name|REP_CUG_POLICY
argument_list|)
argument_list|)
expr_stmt|;
name|createCug
argument_list|(
literal|"/content"
argument_list|,
name|getTestGroupPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|createCug
argument_list|(
literal|"/content2"
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|ROOT_PATH
argument_list|,
literal|true
argument_list|,
literal|"/content"
argument_list|,
literal|"/content2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveCug
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create cugs at /content
name|createCug
argument_list|(
literal|"/content"
argument_list|,
name|getTestGroupPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// remove CUG at /content
name|assertTrue
argument_list|(
name|removeCug
argument_list|(
literal|"/content"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveNestedCug
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create cugs
comment|// - /content/a     : allow testGroup, deny everyone
comment|// - /content/aa/bb : allow testGroup, deny everyone
comment|// - /content/a/b/c : allow everyone,  deny testGroup (isolated)
comment|// - /content2      : allow everyone,  deny testGroup (isolated)
name|setupCugsAndAcls
argument_list|()
expr_stmt|;
comment|// remove CUG at /content/a/b/c
name|assertTrue
argument_list|(
name|removeCug
argument_list|(
literal|"/content/a/b/c"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|,
literal|"/content/a"
argument_list|,
literal|"/content/aa/bb"
argument_list|,
literal|"/content2"
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
literal|"/content/a"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveIntermediateCug
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create cugs
comment|// - /content/a     : allow testGroup, deny everyone
comment|// - /content/aa/bb : allow testGroup, deny everyone
comment|// - /content/a/b/c : allow everyone,  deny testGroup (isolated)
comment|// - /content2      : allow everyone,  deny testGroup (isolated)
name|setupCugsAndAcls
argument_list|()
expr_stmt|;
comment|// remove CUG at /content/a
name|assertTrue
argument_list|(
name|removeCug
argument_list|(
literal|"/content/a"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|,
literal|"/content/aa/bb"
argument_list|,
literal|"/content2"
argument_list|,
literal|"/content/a/b/c"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/a"
argument_list|)
operator|.
name|hasChild
argument_list|(
name|REP_CUG_POLICY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveMultipleCug
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create cugs
comment|// - /content/a     : allow testGroup, deny everyone
comment|// - /content/aa/bb : allow testGroup, deny everyone
comment|// - /content/a/b/c : allow everyone,  deny testGroup (isolated)
comment|// - /content2      : allow everyone,  deny testGroup (isolated)
name|setupCugsAndAcls
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|removeCug
argument_list|(
literal|"/content/a"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|removeCug
argument_list|(
literal|"/content/aa/bb"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|,
literal|"/content2"
argument_list|,
literal|"/content/a/b/c"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveMultipleCug2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create cugs
comment|// - /content/a     : allow testGroup, deny everyone
comment|// - /content/aa/bb : allow testGroup, deny everyone
comment|// - /content/a/b/c : allow everyone,  deny testGroup (isolated)
comment|// - /content2      : allow everyone,  deny testGroup (isolated)
name|setupCugsAndAcls
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|removeCug
argument_list|(
literal|"/content/a"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|removeCug
argument_list|(
literal|"/content/a/b/c"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|,
literal|"/content/aa/bb"
argument_list|,
literal|"/content2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveContentNode
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create cugs
comment|// - /content/a     : allow testGroup, deny everyone
comment|// - /content/aa/bb : allow testGroup, deny everyone
comment|// - /content/a/b/c : allow everyone,  deny testGroup (isolated)
comment|// - /content2      : allow everyone,  deny testGroup (isolated)
name|setupCugsAndAcls
argument_list|()
expr_stmt|;
name|root
operator|.
name|getTree
argument_list|(
literal|"/content"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|,
literal|"/content2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveContentANode
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create cugs
comment|// - /content/a     : allow testGroup, deny everyone
comment|// - /content/aa/bb : allow testGroup, deny everyone
comment|// - /content/a/b/c : allow everyone,  deny testGroup (isolated)
comment|// - /content2      : allow everyone,  deny testGroup (isolated)
name|setupCugsAndAcls
argument_list|()
expr_stmt|;
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/a"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|,
literal|"/content2"
argument_list|,
literal|"/content/aa/bb"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveRootCug
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add cug at /
name|createCug
argument_list|(
name|root
argument_list|,
name|ROOT_PATH
argument_list|,
name|EveryonePrincipal
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|createCug
argument_list|(
literal|"/content"
argument_list|,
name|getTestGroupPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|createCug
argument_list|(
literal|"/content2"
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|ROOT_PATH
argument_list|,
name|REP_CUG_POLICY
argument_list|)
argument_list|)
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|,
literal|"/content"
argument_list|,
literal|"/content2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|removeCug
argument_list|(
literal|"/content"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|,
literal|"/content2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|removeCug
argument_list|(
literal|"/content2"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveAndReadd
parameter_list|()
throws|throws
name|Exception
block|{
name|createCug
argument_list|(
name|root
argument_list|,
name|SUPPORTED_PATH3
argument_list|,
name|EveryonePrincipal
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|newTree
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|SUPPORTED_PATH3
argument_list|)
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
operator|.
name|getTree
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|newTree
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|createCug
argument_list|(
name|path
argument_list|,
name|getTestGroupPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|,
name|SUPPORTED_PATH3
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|SUPPORTED_PATH3
argument_list|,
literal|true
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|removeCug
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|createCug
argument_list|(
name|path
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|SUPPORTED_PATH3
argument_list|,
literal|true
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveToUnsupportedPath
parameter_list|()
throws|throws
name|Exception
block|{
name|createCug
argument_list|(
name|root
argument_list|,
name|SUPPORTED_PATH3
argument_list|,
name|EveryonePrincipal
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|newTree
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|SUPPORTED_PATH3
argument_list|)
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
operator|.
name|getTree
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|newTree
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|createCug
argument_list|(
name|path
argument_list|,
name|getTestGroupPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|destPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|UNSUPPORTED_PATH
argument_list|,
literal|"moved"
argument_list|)
decl_stmt|;
name|root
operator|.
name|move
argument_list|(
name|path
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|SUPPORTED_PATH3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|,
name|SUPPORTED_PATH3
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveToSupportedPath
parameter_list|()
throws|throws
name|Exception
block|{
name|createCug
argument_list|(
name|root
argument_list|,
name|SUPPORTED_PATH3
argument_list|,
name|EveryonePrincipal
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|newTree
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|SUPPORTED_PATH3
argument_list|)
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
operator|.
name|getTree
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|newTree
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|createCug
argument_list|(
name|path
argument_list|,
name|getTestGroupPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|destPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|SUPPORTED_PATH
argument_list|,
literal|"moved"
argument_list|)
decl_stmt|;
name|root
operator|.
name|move
argument_list|(
name|path
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|SUPPORTED_PATH3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|,
name|SUPPORTED_PATH3
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveToNested
parameter_list|()
throws|throws
name|Exception
block|{
name|createCug
argument_list|(
name|root
argument_list|,
name|SUPPORTED_PATH2
argument_list|,
name|EveryonePrincipal
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|createCug
argument_list|(
name|root
argument_list|,
name|SUPPORTED_PATH3
argument_list|,
name|EveryonePrincipal
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|newTree
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|SUPPORTED_PATH3
argument_list|)
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
operator|.
name|getTree
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|newTree
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|createCug
argument_list|(
name|path
argument_list|,
name|getTestGroupPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|destPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|SUPPORTED_PATH2
argument_list|,
literal|"moved"
argument_list|)
decl_stmt|;
name|root
operator|.
name|move
argument_list|(
name|path
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|,
name|SUPPORTED_PATH3
argument_list|,
name|SUPPORTED_PATH2
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|SUPPORTED_PATH3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|SUPPORTED_PATH2
argument_list|,
literal|true
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

