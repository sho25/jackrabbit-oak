begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|HashCode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hasher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hashing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Abstract base class for {@link Blob} implementations.  * This base class provides default implementations for  * {@code hashCode} and {@code equals}.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractBlob
implements|implements
name|Blob
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractBlob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Optional
argument_list|<
name|HashCode
argument_list|>
name|hashCode
init|=
name|Optional
operator|.
name|absent
argument_list|()
decl_stmt|;
comment|/**      * This hash code implementation returns the hash code of the underlying stream      * @return      */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|calculateSha256
argument_list|()
operator|.
name|asInt
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|sha256
parameter_list|()
block|{
return|return
name|calculateSha256
argument_list|()
operator|.
name|asBytes
argument_list|()
return|;
block|}
specifier|private
name|HashCode
name|calculateSha256
parameter_list|()
block|{
comment|// Blobs are immutable so we can safely cache the hash
if|if
condition|(
operator|!
name|hashCode
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|InputStream
name|is
init|=
name|getNewStream
argument_list|()
decl_stmt|;
try|try
block|{
try|try
block|{
name|Hasher
name|hasher
init|=
name|Hashing
operator|.
name|sha256
argument_list|()
operator|.
name|newHasher
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|0x1000
index|]
decl_stmt|;
name|int
name|r
decl_stmt|;
while|while
condition|(
operator|(
name|r
operator|=
name|is
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|hasher
operator|.
name|putBytes
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|hashCode
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|hasher
operator|.
name|hash
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error while hashing stream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|close
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|hashCode
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * To {@code Blob} instances are considered equal iff they have the same SHA-256 hash code      * are equal.      * @param other      * @return      */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|Blob
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Blob
name|that
init|=
operator|(
name|Blob
operator|)
name|other
decl_stmt|;
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|sha256
argument_list|()
argument_list|,
name|that
operator|.
name|sha256
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|close
parameter_list|(
name|InputStream
name|s
parameter_list|)
block|{
try|try
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error while closing stream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

