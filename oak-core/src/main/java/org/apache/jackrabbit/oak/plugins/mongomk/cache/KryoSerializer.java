begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|Kryo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|io
operator|.
name|Input
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|io
operator|.
name|Output
import|;
end_import

begin_class
specifier|public
class|class
name|KryoSerializer
implements|implements
name|Closeable
block|{
comment|/* buffer size */
specifier|private
specifier|static
specifier|final
name|int
name|BUFFER_SIZE
init|=
literal|1024
decl_stmt|;
specifier|private
specifier|final
name|KryoPool
name|pool
decl_stmt|;
specifier|public
name|KryoSerializer
parameter_list|(
name|KryoPool
name|pool
parameter_list|)
block|{
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|byte
index|[]
name|serialize
parameter_list|(
name|T
name|obj
parameter_list|)
throws|throws
name|IOException
block|{
name|KryoHolder
name|kh
init|=
literal|null
decl_stmt|;
try|try
block|{
name|kh
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
name|kh
operator|.
name|reset
argument_list|()
expr_stmt|;
name|kh
operator|.
name|kryo
operator|.
name|writeObject
argument_list|(
name|kh
operator|.
name|output
argument_list|,
name|obj
argument_list|)
expr_stmt|;
return|return
name|kh
operator|.
name|output
operator|.
name|toBytes
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|kh
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|done
argument_list|(
name|kh
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|deserialize
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
name|KryoHolder
name|kh
init|=
literal|null
decl_stmt|;
try|try
block|{
name|kh
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
name|Input
name|input
init|=
operator|new
name|Input
argument_list|(
name|source
argument_list|)
decl_stmt|;
return|return
name|kh
operator|.
name|kryo
operator|.
name|readObject
argument_list|(
name|input
argument_list|,
name|clazz
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|kh
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|done
argument_list|(
name|kh
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Closes the pool releasing any associated Kryo instance with it      */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|pool
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|KryoHolder
block|{
specifier|final
name|Kryo
name|kryo
decl_stmt|;
specifier|final
name|Output
name|output
init|=
operator|new
name|Output
argument_list|(
name|BUFFER_SIZE
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|KryoHolder
parameter_list|(
name|Kryo
name|kryo
parameter_list|)
block|{
name|this
operator|.
name|kryo
operator|=
name|kryo
expr_stmt|;
block|}
specifier|private
name|void
name|reset
parameter_list|()
block|{
name|output
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|KryoPool
block|{
specifier|private
specifier|final
name|Queue
argument_list|<
name|KryoHolder
argument_list|>
name|objects
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<
name|KryoHolder
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|KryoHolder
name|get
parameter_list|()
block|{
name|KryoHolder
name|kh
decl_stmt|;
if|if
condition|(
operator|(
name|kh
operator|=
name|objects
operator|.
name|poll
argument_list|()
operator|)
operator|==
literal|null
condition|)
block|{
name|kh
operator|=
operator|new
name|KryoHolder
argument_list|(
name|createInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|kh
return|;
block|}
specifier|public
name|void
name|done
parameter_list|(
name|KryoHolder
name|kh
parameter_list|)
block|{
name|objects
operator|.
name|offer
argument_list|(
name|kh
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|objects
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**          * Sub classes can customize the Kryo instance by overriding this method          *          * @return created Kryo instance          */
specifier|protected
name|Kryo
name|createInstance
parameter_list|()
block|{
name|Kryo
name|kryo
init|=
operator|new
name|Kryo
argument_list|()
decl_stmt|;
name|kryo
operator|.
name|setReferences
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|kryo
return|;
block|}
block|}
block|}
end_class

end_unit

