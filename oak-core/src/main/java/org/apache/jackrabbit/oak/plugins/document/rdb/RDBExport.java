begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_class
specifier|public
class|class
name|RDBExport
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ClassNotFoundException
throws|,
name|SQLException
block|{
name|String
name|url
init|=
literal|null
decl_stmt|,
name|user
init|=
literal|null
decl_stmt|,
name|pw
init|=
literal|null
decl_stmt|,
name|table
init|=
literal|null
decl_stmt|,
name|query
init|=
literal|null
decl_stmt|;
name|RDBDocumentSerializer
name|ser
init|=
operator|new
name|RDBDocumentSerializer
argument_list|(
operator|new
name|MemoryDocumentStore
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|url
operator|=
name|args
index|[
literal|0
index|]
expr_stmt|;
name|user
operator|=
name|args
index|[
literal|1
index|]
expr_stmt|;
name|pw
operator|=
name|args
index|[
literal|2
index|]
expr_stmt|;
name|table
operator|=
name|args
index|[
literal|3
index|]
expr_stmt|;
name|query
operator|=
name|args
operator|.
name|length
operator|>=
literal|5
condition|?
name|args
index|[
literal|4
index|]
else|:
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: ... "
operator|+
name|RDBCreator
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" JDBC-URL username password table [query]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|String
name|driver
init|=
name|RDBJDBCTools
operator|.
name|driverForDBType
argument_list|(
name|RDBJDBCTools
operator|.
name|jdbctype
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
name|driver
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Attempt to load class "
operator|+
name|driver
operator|+
literal|" failed."
argument_list|)
expr_stmt|;
block|}
name|Connection
name|c
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|,
name|user
argument_list|,
name|pw
argument_list|)
decl_stmt|;
name|c
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Statement
name|stmt
init|=
name|c
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|String
name|sql
init|=
literal|"select ID, MODIFIED, MODCOUNT, CMODCOUNT, HASBINARY, DELETEDONCE, DATA, BDATA  from "
operator|+
name|table
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|sql
operator|+=
literal|" where "
operator|+
name|query
expr_stmt|;
block|}
name|sql
operator|+=
literal|" order by id"
expr_stmt|;
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|id
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|long
name|modified
init|=
name|rs
operator|.
name|getLong
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|long
name|modcount
init|=
name|rs
operator|.
name|getLong
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|long
name|cmodcount
init|=
name|rs
operator|.
name|getLong
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|long
name|hasBinary
init|=
name|rs
operator|.
name|getLong
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|long
name|deletedOnce
init|=
name|rs
operator|.
name|getLong
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|String
name|data
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bdata
init|=
name|rs
operator|.
name|getBytes
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|RDBRow
name|row
init|=
operator|new
name|RDBRow
argument_list|(
name|id
argument_list|,
name|hasBinary
operator|==
literal|1
argument_list|,
name|deletedOnce
operator|==
literal|1
argument_list|,
name|modified
argument_list|,
name|modcount
argument_list|,
name|cmodcount
argument_list|,
name|data
argument_list|,
name|bdata
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|ser
operator|.
name|fromRow
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|row
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ser
operator|.
name|asString
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

