begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|tests
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|MicroKernelOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|scenarios
operator|.
name|MicroKernelMultipleCommits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|testing
operator|.
name|MicroKernelTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Measure the time needed for writing the same node structure in one or  * multiple commit steps.  *<p>  * Tree structure:  *<p>  * Number of nodes per<b>level</b> =100^(<b>level</b>).  *<p>  * Each node has 100 children.  *   *   *   *   */
end_comment

begin_class
specifier|public
class|class
name|MkAddNodesMultipleCommitsTest
extends|extends
name|MicroKernelTestBase
block|{
specifier|static
name|String
name|diff
decl_stmt|;
specifier|static
name|int
name|nodesNumber
init|=
literal|1000
decl_stmt|;
specifier|static
name|String
name|nodeNamePrefix
init|=
literal|"N"
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|prepareDiff
parameter_list|()
block|{
name|diff
operator|=
name|MicroKernelOperation
operator|.
name|buildPyramidDiff
argument_list|(
literal|"/"
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
name|nodesNumber
argument_list|,
name|nodeNamePrefix
argument_list|,
operator|new
name|StringBuilder
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteNodesAllNodes1Commit
parameter_list|()
block|{
name|MicroKernelMultipleCommits
operator|.
name|writeNodesAllNodes1Commit
argument_list|(
name|mk
argument_list|,
name|diff
argument_list|,
name|chronometer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteNodes1NodePerCommit
parameter_list|()
block|{
name|MicroKernelMultipleCommits
operator|.
name|writeNodes1NodePerCommit
argument_list|(
name|mk
argument_list|,
name|diff
argument_list|,
name|chronometer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteNodes50NodesPerCommit
parameter_list|()
block|{
name|MicroKernelMultipleCommits
operator|.
name|writeNodes50NodesPerCommit
argument_list|(
name|mk
argument_list|,
name|diff
argument_list|,
name|chronometer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteNodes1000NodesPerCommit
parameter_list|()
block|{
name|MicroKernelMultipleCommits
operator|.
name|writeNodes1000NodesPerCommit
argument_list|(
name|mk
argument_list|,
name|diff
argument_list|,
name|chronometer
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

