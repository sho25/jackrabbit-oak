begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|s3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|AmazonS3Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|DeleteObjectsRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ObjectListing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|S3ObjectSummary
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|transfer
operator|.
name|TransferManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|aws
operator|.
name|s3
operator|.
name|SharedS3DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|DataStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Extension to {@link DataStoreUtils} to enable S3 extensions for cleaning and initialization.  */
end_comment

begin_class
specifier|public
class|class
name|S3DataStoreUtils
extends|extends
name|DataStoreUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|S3DataStoreUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CONFIG_PATH
init|=
literal|"./src/test/resources/aws.properties"
decl_stmt|;
specifier|protected
specifier|static
name|Class
name|JR2_S3
init|=
name|SharedS3DataStore
operator|.
name|class
decl_stmt|;
specifier|protected
specifier|static
name|Class
name|S3
init|=
name|S3DataStore
operator|.
name|class
decl_stmt|;
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getFixtures
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|S3
operator|.
name|getName
argument_list|()
argument_list|,
name|JR2_S3
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isS3DataStore
parameter_list|()
block|{
name|String
name|dsName
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|DS_CLASS_NAME
argument_list|)
decl_stmt|;
name|boolean
name|s3Class
init|=
operator|(
name|dsName
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|dsName
operator|.
name|equals
argument_list|(
name|S3
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|dsName
operator|.
name|equals
argument_list|(
name|JR2_S3
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|isS3Configured
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|s3Class
return|;
block|}
comment|/**      * Check for presence of mandatory properties.      *      * @return true if mandatory props configured.      */
specifier|public
specifier|static
name|boolean
name|isS3Configured
parameter_list|()
block|{
name|Properties
name|props
init|=
name|getS3Config
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|props
operator|.
name|containsKey
argument_list|(
name|S3Constants
operator|.
name|ACCESS_KEY
argument_list|)
operator|||
operator|!
name|props
operator|.
name|containsKey
argument_list|(
name|S3Constants
operator|.
name|SECRET_KEY
argument_list|)
operator|||
operator|!
operator|(
name|props
operator|.
name|containsKey
argument_list|(
name|S3Constants
operator|.
name|S3_REGION
argument_list|)
operator|||
name|props
operator|.
name|containsKey
argument_list|(
name|S3Constants
operator|.
name|S3_END_POINT
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Read any config property configured.      * Also, read any props available as system properties.      * System properties take precedence.      *      * @return Properties instance      */
specifier|public
specifier|static
name|Properties
name|getS3Config
parameter_list|()
block|{
name|String
name|config
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"config"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|config
argument_list|)
condition|)
block|{
name|config
operator|=
name|DEFAULT_CONFIG_PATH
expr_stmt|;
block|}
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
if|if
condition|(
operator|new
name|File
argument_list|(
name|config
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|props
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|props
operator|.
name|putAll
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|Map
name|filtered
init|=
name|Maps
operator|.
name|filterEntries
argument_list|(
name|Maps
operator|.
name|fromProperties
argument_list|(
name|props
argument_list|)
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|Object
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|Object
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
name|input
parameter_list|)
block|{
return|return
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
operator|(
name|String
operator|)
name|input
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
block|)
empty_stmt|;
name|props
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|props
operator|.
name|putAll
argument_list|(
name|filtered
argument_list|)
expr_stmt|;
block|}
return|return
name|props
return|;
block|}
end_class

begin_function
specifier|public
specifier|static
name|DataStore
name|getS3DataStore
parameter_list|(
name|String
name|className
parameter_list|,
name|Properties
name|props
parameter_list|,
name|String
name|homeDir
parameter_list|)
throws|throws
name|Exception
block|{
name|DataStore
name|ds
init|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|DataStore
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|PropertiesUtil
operator|.
name|populate
argument_list|(
name|ds
argument_list|,
name|Maps
operator|.
name|fromProperties
argument_list|(
name|props
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Set the props object
if|if
condition|(
name|S3
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
operator|(
operator|(
name|S3DataStore
operator|)
name|ds
operator|)
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|JR2_S3
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
operator|(
operator|(
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|aws
operator|.
name|s3
operator|.
name|SharedS3DataStore
operator|)
name|ds
operator|)
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
name|ds
operator|.
name|init
argument_list|(
name|homeDir
argument_list|)
expr_stmt|;
return|return
name|ds
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|DataStore
name|getS3DataStore
parameter_list|(
name|String
name|className
parameter_list|,
name|String
name|homeDir
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getS3DataStore
argument_list|(
name|className
argument_list|,
name|getS3Config
argument_list|()
argument_list|,
name|homeDir
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|deleteBucket
parameter_list|(
name|String
name|bucket
parameter_list|,
name|Date
name|date
parameter_list|)
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"cleaning bucket ["
operator|+
name|bucket
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|Properties
name|props
init|=
name|getS3Config
argument_list|()
decl_stmt|;
name|AmazonS3Client
name|s3service
init|=
name|Utils
operator|.
name|openService
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|TransferManager
name|tmx
init|=
operator|new
name|TransferManager
argument_list|(
name|s3service
argument_list|)
decl_stmt|;
if|if
condition|(
name|s3service
operator|.
name|doesBucketExist
argument_list|(
name|bucket
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|tmx
operator|.
name|abortMultipartUploads
argument_list|(
name|bucket
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|ObjectListing
name|prevObjectListing
init|=
name|s3service
operator|.
name|listObjects
argument_list|(
name|bucket
argument_list|)
decl_stmt|;
while|while
condition|(
name|prevObjectListing
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|>
name|deleteList
init|=
operator|new
name|ArrayList
argument_list|<
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|S3ObjectSummary
name|s3ObjSumm
range|:
name|prevObjectListing
operator|.
name|getObjectSummaries
argument_list|()
control|)
block|{
name|deleteList
operator|.
name|add
argument_list|(
operator|new
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|(
name|s3ObjSumm
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|DeleteObjectsRequest
name|delObjsReq
init|=
operator|new
name|DeleteObjectsRequest
argument_list|(
name|bucket
argument_list|)
decl_stmt|;
name|delObjsReq
operator|.
name|setKeys
argument_list|(
name|deleteList
argument_list|)
expr_stmt|;
name|s3service
operator|.
name|deleteObjects
argument_list|(
name|delObjsReq
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|prevObjectListing
operator|.
name|isTruncated
argument_list|()
condition|)
break|break;
name|prevObjectListing
operator|=
name|s3service
operator|.
name|listNextBatchOfObjects
argument_list|(
name|prevObjectListing
argument_list|)
expr_stmt|;
block|}
block|}
name|s3service
operator|.
name|deleteBucket
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"bucket [ "
operator|+
name|bucket
operator|+
literal|"] cleaned"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"bucket ["
operator|+
name|bucket
operator|+
literal|"] doesn't exists"
argument_list|)
expr_stmt|;
block|}
name|tmx
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|s3service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
end_function

unit|}
end_unit

