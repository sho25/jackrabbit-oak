begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProvider
import|;
end_import

begin_comment
comment|/**  * An implementation of the {@code JackrabbitAccessControlList} interface that only  * allows for reading. The write methods throw an {@code AccessControlException}.  */
end_comment

begin_class
specifier|public
class|class
name|ImmutableACL
extends|extends
name|ACL
block|{
specifier|private
name|int
name|hashCode
decl_stmt|;
comment|/**      * Construct a new {@code UnmodifiableAccessControlList}      *      * @param jcrPath      * @param entries      * @param restrictionProvider      * @param namePathMapper      */
specifier|public
name|ImmutableACL
parameter_list|(
name|String
name|jcrPath
parameter_list|,
name|List
argument_list|<
name|ACE
argument_list|>
name|entries
parameter_list|,
name|RestrictionProvider
name|restrictionProvider
parameter_list|,
name|NamePathMapper
name|namePathMapper
parameter_list|)
block|{
name|super
argument_list|(
name|jcrPath
argument_list|,
name|getImmutableEntries
argument_list|(
name|entries
argument_list|)
argument_list|,
name|restrictionProvider
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|ACE
argument_list|>
name|getImmutableEntries
parameter_list|(
name|List
argument_list|<
name|ACE
argument_list|>
name|entries
parameter_list|)
block|{
return|return
operator|(
name|entries
operator|==
literal|null
operator|)
condition|?
name|Collections
operator|.
expr|<
name|ACE
operator|>
name|emptyList
argument_list|()
else|:
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|entries
argument_list|)
return|;
block|}
comment|//--------------------------------------------------< AccessControlList>---
comment|/**      * @see AccessControlList#addAccessControlEntry(java.security.Principal, javax.jcr.security.Privilege[])      */
specifier|public
name|boolean
name|addAccessControlEntry
parameter_list|(
name|Principal
name|principal
parameter_list|,
name|Privilege
index|[]
name|privileges
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|RepositoryException
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Immutable ACL. Use AccessControlManager#getApplicablePolicies in order to obtain an modifiable ACL."
argument_list|)
throw|;
block|}
comment|/**      * @see AccessControlList#removeAccessControlEntry(AccessControlEntry)      */
specifier|public
name|void
name|removeAccessControlEntry
parameter_list|(
name|AccessControlEntry
name|ace
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|RepositoryException
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Immutable ACL. Use AccessControlManager#getApplicablePolicies in order to obtain an modifiable ACL."
argument_list|)
throw|;
block|}
comment|/**      * @see org.apache.jackrabbit.api.security.JackrabbitAccessControlList#addEntry(Principal, Privilege[], boolean)      */
specifier|public
name|boolean
name|addEntry
parameter_list|(
name|Principal
name|principal
parameter_list|,
name|Privilege
index|[]
name|privileges
parameter_list|,
name|boolean
name|isAllow
parameter_list|)
throws|throws
name|AccessControlException
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Immutable ACL. Use AccessControlManager#getPolicy or #getApplicablePolicies in order to obtain an modifiable ACL."
argument_list|)
throw|;
block|}
comment|/**      * @see org.apache.jackrabbit.api.security.JackrabbitAccessControlList#addEntry(Principal, Privilege[], boolean, Map)      */
specifier|public
name|boolean
name|addEntry
parameter_list|(
name|Principal
name|principal
parameter_list|,
name|Privilege
index|[]
name|privileges
parameter_list|,
name|boolean
name|isAllow
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
parameter_list|)
throws|throws
name|AccessControlException
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Immutable ACL. Use AccessControlManager#getPolicy or #getApplicablePolicies in order to obtain an modifiable ACL."
argument_list|)
throw|;
block|}
comment|/**      * @see org.apache.jackrabbit.api.security.JackrabbitAccessControlList#orderBefore(AccessControlEntry, AccessControlEntry)      */
specifier|public
name|void
name|orderBefore
parameter_list|(
name|AccessControlEntry
name|srcEntry
parameter_list|,
name|AccessControlEntry
name|destEntry
parameter_list|)
throws|throws
name|AccessControlException
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Immutable ACL. Use AccessControlManager#getPolicy or #getApplicablePolicy in order to obtain a modifiable ACL."
argument_list|)
throw|;
block|}
comment|//-------------------------------------------------------------< Object>---
comment|/**      * @see Object#hashCode()      */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|hashCode
operator|==
literal|0
condition|)
block|{
name|int
name|result
init|=
literal|17
decl_stmt|;
name|result
operator|=
literal|37
operator|*
name|result
operator|+
operator|(
name|getPath
argument_list|()
operator|!=
literal|null
condition|?
name|getPath
argument_list|()
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
for|for
control|(
name|ACE
name|entry
range|:
name|getACEs
argument_list|()
control|)
block|{
name|result
operator|=
literal|37
operator|*
name|result
operator|+
name|entry
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
name|hashCode
operator|=
name|result
expr_stmt|;
block|}
return|return
name|hashCode
return|;
block|}
comment|/**      * @see Object#equals(Object)      * FIXME: this implementation violates the general contract of equals: it is not symmetric.      * While ACL.equals(ImmutableACL) might be true, ImmutableACL.equals(ACL) is always false.      */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|ImmutableACL
condition|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

