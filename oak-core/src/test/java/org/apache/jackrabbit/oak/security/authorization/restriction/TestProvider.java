begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|AbstractRestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|Restriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionDefinitionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * RestrictionProvider for tests.  */
end_comment

begin_class
specifier|final
class|class
name|TestProvider
extends|extends
name|AbstractRestrictionProvider
block|{
specifier|private
specifier|final
name|boolean
name|nonValidatingRead
decl_stmt|;
name|TestProvider
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|RestrictionDefinition
argument_list|>
name|supportedRestrictions
parameter_list|)
block|{
name|this
argument_list|(
name|supportedRestrictions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|TestProvider
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|RestrictionDefinition
argument_list|>
name|supportedRestrictions
parameter_list|,
name|boolean
name|nonValidatingRead
parameter_list|)
block|{
name|super
argument_list|(
name|supportedRestrictions
argument_list|)
expr_stmt|;
name|this
operator|.
name|nonValidatingRead
operator|=
name|nonValidatingRead
expr_stmt|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Restriction
argument_list|>
name|readRestrictions
parameter_list|(
name|String
name|oakPath
parameter_list|,
annotation|@
name|NotNull
name|Tree
name|aceTree
parameter_list|)
block|{
if|if
condition|(
name|nonValidatingRead
condition|)
block|{
name|Set
argument_list|<
name|Restriction
argument_list|>
name|restrictions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyState
name|propertyState
range|:
name|getRestrictionsTree
argument_list|(
name|aceTree
argument_list|)
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|propertyState
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|restrictions
operator|.
name|add
argument_list|(
operator|new
name|RestrictionImpl
argument_list|(
name|propertyState
argument_list|,
operator|new
name|RestrictionDefinitionImpl
argument_list|(
name|name
argument_list|,
name|propertyState
operator|.
name|getType
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|restrictions
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|readRestrictions
argument_list|(
name|oakPath
argument_list|,
name|aceTree
argument_list|)
return|;
block|}
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|RestrictionPattern
name|getPattern
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|)
block|{
name|boolean
name|hasRestriction
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RestrictionDefinition
name|rd
range|:
name|getSupportedRestrictions
argument_list|(
name|oakPath
argument_list|)
control|)
block|{
if|if
condition|(
name|tree
operator|.
name|hasProperty
argument_list|(
name|rd
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|hasRestriction
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
operator|(
name|hasRestriction
operator|)
condition|?
operator|new
name|MatchingPattern
argument_list|()
else|:
name|RestrictionPattern
operator|.
name|EMPTY
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|RestrictionPattern
name|getPattern
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|NotNull
name|Set
argument_list|<
name|Restriction
argument_list|>
name|restrictions
parameter_list|)
block|{
for|for
control|(
name|Restriction
name|r
range|:
name|restrictions
control|)
block|{
if|if
condition|(
name|getSupportedRestrictions
argument_list|(
name|oakPath
argument_list|)
operator|.
name|contains
argument_list|(
name|r
operator|.
name|getDefinition
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|MatchingPattern
argument_list|()
return|;
block|}
block|}
return|return
name|RestrictionPattern
operator|.
name|EMPTY
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|MatchingPattern
implements|implements
name|RestrictionPattern
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
annotation|@
name|NotNull
name|String
name|path
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

