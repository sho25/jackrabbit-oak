begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_comment
comment|/**  * A gate where listeners can wait for a new commit.  */
end_comment

begin_class
specifier|public
class|class
name|CommitGate
block|{
specifier|private
specifier|volatile
name|String
name|currentHead
decl_stmt|;
specifier|private
specifier|volatile
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
name|latchRef
init|=
operator|new
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Wait for a new commit to occur. In very few cases, this method may return      * with the old head before the requested timeout.      *      * @param lastHead the last head      * @param millis   the maximum number of milliseconds to wait (0 means don't wait)      * @return the new head (or old head, if no new commit occurred)      * @throws InterruptedException if the thread was interrupted      */
specifier|public
name|String
name|waitForCommit
parameter_list|(
name|String
name|lastHead
parameter_list|,
name|long
name|millis
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|millis
operator|==
literal|0
operator|||
operator|(
name|currentHead
operator|!=
literal|null
operator|&&
operator|!
name|currentHead
operator|.
name|equals
argument_list|(
name|lastHead
argument_list|)
operator|)
condition|)
block|{
return|return
name|currentHead
return|;
block|}
name|CountDownLatch
name|latch
init|=
name|latchRef
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|latch
operator|==
literal|null
condition|)
block|{
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CountDownLatch
name|old
init|=
name|latchRef
operator|.
name|getAndSet
argument_list|(
name|latch
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
comment|// may cause a spurious release, but that's ok
name|old
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
name|latch
operator|.
name|await
argument_list|(
name|millis
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
return|return
name|currentHead
return|;
block|}
comment|/**      * Commit a new head. Waiting threads are awoken.      *      * @param newHead the new head      */
specifier|public
name|void
name|commit
parameter_list|(
name|String
name|newHead
parameter_list|)
block|{
name|currentHead
operator|=
name|newHead
expr_stmt|;
name|CountDownLatch
name|latch
init|=
name|latchRef
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|latch
operator|!=
literal|null
condition|)
block|{
comment|// may cause a spurious release, but that's ok
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|latch
operator|=
name|latchRef
operator|.
name|getAndSet
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|latch
operator|!=
literal|null
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

