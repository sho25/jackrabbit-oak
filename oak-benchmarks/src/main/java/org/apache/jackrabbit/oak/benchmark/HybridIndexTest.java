begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|IndexStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|JcrCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|OakRepositoryFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|RepositoryFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexInfoServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexPathService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexPathServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexCopier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|hybrid
operator|.
name|DocumentQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|hybrid
operator|.
name|LocalIndexObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|hybrid
operator|.
name|NRTIndexFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
operator|.
name|PropertyIndexCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|reader
operator|.
name|DefaultIndexReaderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|reader
operator|.
name|LuceneIndexReaderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|IndexDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|IndexDefinitionBuilder
operator|.
name|PropertyRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|BackgroundObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|lifecycle
operator|.
name|RepositoryInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|DECLARING_NODE_TYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NODE_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|scheduleWithFixedDelay
import|;
end_import

begin_class
specifier|public
class|class
name|HybridIndexTest
extends|extends
name|AbstractTest
argument_list|<
name|HybridIndexTest
operator|.
name|TestContext
argument_list|>
block|{
enum|enum
name|Status
block|{
name|NONE
block|,
name|STARTING
block|,
name|STARTED
block|,
name|STOPPING
block|,
name|STOPPED
block|,
name|ABORTED
block|;
specifier|private
name|int
name|count
decl_stmt|;
specifier|public
name|void
name|inc
parameter_list|()
block|{
name|count
operator|++
expr_stmt|;
block|}
specifier|public
name|int
name|count
parameter_list|()
block|{
return|return
name|count
return|;
block|}
specifier|public
name|Status
name|next
parameter_list|()
block|{
name|Status
index|[]
name|ss
init|=
name|values
argument_list|()
decl_stmt|;
if|if
condition|(
name|ordinal
argument_list|()
operator|==
name|ss
operator|.
name|length
operator|-
literal|1
condition|)
block|{
return|return
name|ss
index|[
literal|0
index|]
return|;
block|}
return|return
name|ss
index|[
name|ordinal
argument_list|()
operator|+
literal|1
index|]
return|;
block|}
block|}
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|42
argument_list|)
decl_stmt|;
comment|//fixed seed
specifier|private
name|String
name|indexedPropName
init|=
literal|"foo"
decl_stmt|;
specifier|private
name|int
name|nodesPerIteration
init|=
name|Status
operator|.
name|values
argument_list|()
operator|.
name|length
decl_stmt|;
specifier|private
name|int
name|numOfIndexes
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"numOfIndexes"
argument_list|,
literal|10
argument_list|)
decl_stmt|;
specifier|private
name|int
name|refreshDeltaMillis
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"refreshDeltaMillis"
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
specifier|private
name|int
name|asyncInterval
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"asyncInterval"
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|private
name|int
name|cleanerIntervalInSecs
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"cleanerIntervalInSecs"
argument_list|,
literal|10
argument_list|)
decl_stmt|;
specifier|private
name|int
name|queueSize
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"queueSize"
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|hybridIndexEnabled
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"hybridIndexEnabled"
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|dumpStats
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"dumpStats"
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|useOakCodec
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"useOakCodec"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|syncIndexing
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"syncIndexing"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|String
name|indexingMode
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"indexingMode"
argument_list|,
literal|"nrt"
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|searcherEnabled
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"searcherEnabled"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|File
name|indexCopierDir
decl_stmt|;
specifier|private
name|IndexCopier
name|copier
decl_stmt|;
specifier|private
name|NRTIndexFactory
name|nrtIndexFactory
decl_stmt|;
specifier|private
name|LuceneIndexProvider
name|luceneIndexProvider
decl_stmt|;
specifier|private
name|LuceneIndexEditorProvider
name|luceneEditorProvider
decl_stmt|;
specifier|private
name|DocumentQueue
name|queue
decl_stmt|;
specifier|private
name|LocalIndexObserver
name|localIndexObserver
decl_stmt|;
specifier|private
name|RepositoryInitializer
name|indexInitializer
init|=
operator|new
name|PropertyIndexInitializer
argument_list|()
decl_stmt|;
specifier|private
name|TestContext
name|defaultContext
decl_stmt|;
specifier|private
specifier|final
name|File
name|workDir
decl_stmt|;
specifier|private
name|Whiteboard
name|whiteboard
decl_stmt|;
specifier|private
name|Searcher
name|searcher
decl_stmt|;
specifier|private
name|Mutator
name|mutator
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|indexedNodeCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TestContext
argument_list|>
name|contexts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|StatisticsProvider
name|statsProvider
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|executorService
init|=
name|MoreExecutors
operator|.
name|getExitingExecutorService
argument_list|(
operator|(
name|ThreadPoolExecutor
operator|)
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Registration
argument_list|>
name|regs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|BackgroundObserver
name|backgroundObserver
decl_stmt|;
specifier|public
name|HybridIndexTest
parameter_list|(
name|File
name|workDir
parameter_list|,
name|StatisticsProvider
name|statsProvider
parameter_list|)
block|{
name|this
operator|.
name|workDir
operator|=
name|workDir
expr_stmt|;
name|this
operator|.
name|statsProvider
operator|=
name|statsProvider
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Repository
index|[]
name|createRepository
parameter_list|(
name|RepositoryFixture
name|fixture
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|fixture
operator|instanceof
name|OakRepositoryFixture
condition|)
block|{
return|return
operator|(
operator|(
name|OakRepositoryFixture
operator|)
name|fixture
operator|)
operator|.
name|setUpCluster
argument_list|(
literal|1
argument_list|,
operator|new
name|JcrCreator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Jcr
name|customize
parameter_list|(
name|Oak
name|oak
parameter_list|)
block|{
name|Jcr
name|jcr
init|=
operator|new
name|Jcr
argument_list|(
name|oak
argument_list|)
decl_stmt|;
name|whiteboard
operator|=
name|oak
operator|.
name|getWhiteboard
argument_list|()
expr_stmt|;
name|prepareLuceneIndexer
argument_list|(
name|workDir
argument_list|,
name|getNodeStore
argument_list|(
name|oak
argument_list|)
argument_list|)
expr_stmt|;
name|backgroundObserver
operator|=
operator|new
name|BackgroundObserver
argument_list|(
name|luceneIndexProvider
argument_list|,
name|executorService
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|jcr
operator|.
name|with
argument_list|(
operator|(
name|QueryIndexProvider
operator|)
name|luceneIndexProvider
argument_list|)
operator|.
name|with
argument_list|(
name|backgroundObserver
argument_list|)
operator|.
name|with
argument_list|(
name|luceneEditorProvider
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|NodeTypeIndexFixerInitializer
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hybridIndexEnabled
condition|)
block|{
name|jcr
operator|.
name|with
argument_list|(
name|localIndexObserver
argument_list|)
expr_stmt|;
name|indexInitializer
operator|=
operator|new
name|LuceneIndexInitializer
argument_list|()
expr_stmt|;
block|}
name|jcr
operator|.
name|with
argument_list|(
name|indexInitializer
argument_list|)
expr_stmt|;
comment|//Configure the default global fulltext index as it impacts
comment|//both pure property index based setup and nrt based
comment|//So more closer to real world
name|jcr
operator|.
name|with
argument_list|(
operator|new
name|LuceneFullTextInitializer
argument_list|()
argument_list|)
expr_stmt|;
comment|//Async indexing is enabled for both property and lucene
comment|//as for property it relies on counter index
name|oak
operator|.
name|withAsyncIndexing
argument_list|(
literal|"async"
argument_list|,
name|asyncInterval
argument_list|)
expr_stmt|;
return|return
name|jcr
return|;
block|}
block|}
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|createRepository
argument_list|(
name|fixture
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeSuite
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|hybridIndexEnabled
condition|)
block|{
name|runAsyncIndex
argument_list|()
expr_stmt|;
block|}
name|defaultContext
operator|=
operator|new
name|TestContext
argument_list|()
expr_stmt|;
name|contexts
operator|.
name|add
argument_list|(
name|defaultContext
argument_list|)
expr_stmt|;
name|searcher
operator|=
operator|new
name|Searcher
argument_list|()
expr_stmt|;
name|mutator
operator|=
operator|new
name|Mutator
argument_list|()
expr_stmt|;
if|if
condition|(
name|searcherEnabled
condition|)
block|{
name|addBackgroundJob
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
block|}
name|addBackgroundJob
argument_list|(
name|mutator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|TestContext
name|prepareThreadExecutionContext
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|TestContext
name|ctx
init|=
operator|new
name|TestContext
argument_list|()
decl_stmt|;
name|contexts
operator|.
name|add
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
name|ctx
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|runTest
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
name|defaultContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|runTest
parameter_list|(
name|TestContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
comment|//Create tree in breadth first fashion with each node having 50 child
name|Node
name|parent
init|=
name|ctx
operator|.
name|session
operator|.
name|getNode
argument_list|(
name|ctx
operator|.
name|paths
operator|.
name|remove
argument_list|()
argument_list|)
decl_stmt|;
name|Status
name|status
init|=
name|Status
operator|.
name|NONE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodesPerIteration
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|parent
operator|.
name|addNode
argument_list|(
name|nextNodeName
argument_list|()
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
name|indexedPropName
argument_list|,
name|status
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|ctx
operator|.
name|paths
operator|.
name|add
argument_list|(
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|indexedNodeCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|status
operator|.
name|inc
argument_list|()
expr_stmt|;
name|status
operator|=
name|status
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|disposeThreadExecutionContext
parameter_list|(
name|TestContext
name|context
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|context
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|afterSuite
parameter_list|()
throws|throws
name|Exception
block|{
comment|//TODO This to avoid issue with Indexing still running post afterSuite call
comment|//TO handle this properly we would need a callback after repository shutdown
comment|//and before NodeStore teardown
name|getAsyncIndexUpdate
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|backgroundObserver
operator|!=
literal|null
condition|)
block|{
name|backgroundObserver
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|int
name|sleepCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|backgroundObserver
operator|.
name|getMBean
argument_list|()
operator|.
name|getQueueSize
argument_list|()
operator|>
literal|0
operator|&&
operator|++
name|sleepCount
operator|<
literal|100
condition|)
block|{
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Registration
name|r
range|:
name|regs
control|)
block|{
name|r
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
comment|//Close hybrid stuff after async is closed
if|if
condition|(
name|hybridIndexEnabled
condition|)
block|{
name|queue
operator|.
name|close
argument_list|()
expr_stmt|;
name|nrtIndexFactory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|indexCopierDir
operator|!=
literal|null
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|indexCopierDir
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"numOfIndexes: %d, refreshDeltaMillis: %d, asyncInterval: %d, queueSize: %d , "
operator|+
literal|"hybridIndexEnabled: %s, indexingMode: %s, useOakCodec: %s, cleanerIntervalInSecs: %d, "
operator|+
literal|"syncIndexing: %s %n"
argument_list|,
name|numOfIndexes
argument_list|,
name|refreshDeltaMillis
argument_list|,
name|asyncInterval
argument_list|,
name|queueSize
argument_list|,
name|hybridIndexEnabled
argument_list|,
name|indexingMode
argument_list|,
name|useOakCodec
argument_list|,
name|cleanerIntervalInSecs
argument_list|,
name|syncIndexing
argument_list|)
expr_stmt|;
if|if
condition|(
name|dumpStats
condition|)
block|{
name|dumpStats
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|String
index|[]
name|statsNames
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"Searcher"
block|,
literal|"Mutator"
block|,
literal|"Indexed"
block|}
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
index|[]
name|statsFormats
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"%8d"
block|,
literal|"%8d"
block|,
literal|"%8d"
block|}
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Object
index|[]
name|statsValues
parameter_list|()
block|{
return|return
operator|new
name|Object
index|[]
block|{
name|searcher
operator|.
name|resultSize
block|,
name|mutator
operator|.
name|mutationCount
block|,
name|indexedNodeCount
operator|.
name|get
argument_list|()
block|}
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|comment
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|commentElements
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|hybridIndexEnabled
condition|)
block|{
name|commentElements
operator|.
name|add
argument_list|(
name|indexingMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|useOakCodec
condition|)
block|{
name|commentElements
operator|.
name|add
argument_list|(
literal|"oakCodec"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|syncIndexing
condition|)
block|{
name|commentElements
operator|.
name|add
argument_list|(
literal|"sync"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|commentElements
operator|.
name|add
argument_list|(
literal|"property"
argument_list|)
expr_stmt|;
block|}
name|commentElements
operator|.
name|add
argument_list|(
literal|"numIdxs:"
operator|+
name|numOfIndexes
argument_list|)
expr_stmt|;
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|commentElements
argument_list|)
return|;
block|}
specifier|protected
class|class
name|TestContext
block|{
specifier|final
name|Session
name|session
init|=
name|loginWriter
argument_list|()
decl_stmt|;
specifier|final
name|Queue
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|LinkedBlockingDeque
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Node
name|dump
decl_stmt|;
specifier|public
name|TestContext
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|dump
operator|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
name|nextNodeName
argument_list|()
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
operator|.
name|addNode
argument_list|(
name|nextNodeName
argument_list|()
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
operator|.
name|addNode
argument_list|(
name|nextNodeName
argument_list|()
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
operator|.
name|addNode
argument_list|(
name|nextNodeName
argument_list|()
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
operator|.
name|addNode
argument_list|(
name|nextNodeName
argument_list|()
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
operator|.
name|addNode
argument_list|(
name|nextNodeName
argument_list|()
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|dump
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|dump
operator|.
name|remove
argument_list|()
expr_stmt|;
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|randomStatus
parameter_list|()
block|{
name|Status
name|status
init|=
name|Status
operator|.
name|values
argument_list|()
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|Status
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|status
operator|.
name|inc
argument_list|()
expr_stmt|;
return|return
name|status
operator|.
name|name
argument_list|()
return|;
block|}
specifier|private
name|void
name|prepareLuceneIndexer
parameter_list|(
name|File
name|workDir
parameter_list|,
name|NodeStore
name|nodeStore
parameter_list|)
block|{
try|try
block|{
name|indexCopierDir
operator|=
name|createTemporaryFolderIn
argument_list|(
name|workDir
argument_list|)
expr_stmt|;
name|copier
operator|=
operator|new
name|IndexCopier
argument_list|(
name|executorService
argument_list|,
name|indexCopierDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|IndexPathService
name|indexPathService
init|=
operator|new
name|IndexPathServiceImpl
argument_list|(
name|nodeStore
argument_list|)
decl_stmt|;
name|AsyncIndexInfoService
name|asyncIndexInfoService
init|=
operator|new
name|AsyncIndexInfoServiceImpl
argument_list|(
name|nodeStore
argument_list|)
decl_stmt|;
name|nrtIndexFactory
operator|=
operator|new
name|NRTIndexFactory
argument_list|(
name|copier
argument_list|,
name|Clock
operator|.
name|SIMPLE
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|refreshDeltaMillis
argument_list|)
argument_list|,
name|StatisticsProvider
operator|.
name|NOOP
argument_list|)
expr_stmt|;
name|MountInfoProvider
name|mip
init|=
name|Mounts
operator|.
name|defaultMountInfoProvider
argument_list|()
decl_stmt|;
name|LuceneIndexReaderFactory
name|indexReaderFactory
init|=
operator|new
name|DefaultIndexReaderFactory
argument_list|(
name|mip
argument_list|,
name|copier
argument_list|)
decl_stmt|;
name|IndexTracker
name|tracker
init|=
operator|new
name|IndexTracker
argument_list|(
name|indexReaderFactory
argument_list|,
name|nrtIndexFactory
argument_list|)
decl_stmt|;
name|luceneIndexProvider
operator|=
operator|new
name|LuceneIndexProvider
argument_list|(
name|tracker
argument_list|)
expr_stmt|;
name|luceneEditorProvider
operator|=
operator|new
name|LuceneIndexEditorProvider
argument_list|(
name|copier
argument_list|,
name|tracker
argument_list|,
literal|null
argument_list|,
comment|//extractedTextCache
literal|null
argument_list|,
comment|//augmentorFactory
name|mip
argument_list|)
expr_stmt|;
name|queue
operator|=
operator|new
name|DocumentQueue
argument_list|(
name|queueSize
argument_list|,
name|tracker
argument_list|,
name|executorService
argument_list|,
name|statsProvider
argument_list|)
expr_stmt|;
name|localIndexObserver
operator|=
operator|new
name|LocalIndexObserver
argument_list|(
name|queue
argument_list|,
name|statsProvider
argument_list|)
expr_stmt|;
name|luceneEditorProvider
operator|.
name|setIndexingQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
if|if
condition|(
name|syncIndexing
condition|)
block|{
name|PropertyIndexCleaner
name|cleaner
init|=
operator|new
name|PropertyIndexCleaner
argument_list|(
name|nodeStore
argument_list|,
name|indexPathService
argument_list|,
name|asyncIndexInfoService
argument_list|,
name|statsProvider
argument_list|)
decl_stmt|;
name|regs
operator|.
name|add
argument_list|(
name|scheduleWithFixedDelay
argument_list|(
name|whiteboard
argument_list|,
name|cleaner
argument_list|,
name|cleanerIntervalInSecs
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|setDefaultUncaughtExceptionHandler
argument_list|(
parameter_list|(
name|t
parameter_list|,
name|e
parameter_list|)
lambda|->
name|log
operator|.
name|warn
argument_list|(
literal|"Uncaught exception"
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runAsyncIndex
parameter_list|()
block|{
name|checkNotNull
argument_list|(
name|getAsyncIndexUpdate
argument_list|()
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
specifier|private
name|AsyncIndexUpdate
name|getAsyncIndexUpdate
parameter_list|()
block|{
return|return
operator|(
name|AsyncIndexUpdate
operator|)
name|WhiteboardUtils
operator|.
name|getService
argument_list|(
name|whiteboard
argument_list|,
name|Runnable
operator|.
name|class
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Runnable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|Runnable
name|input
parameter_list|)
block|{
return|return
name|input
operator|instanceof
name|AsyncIndexUpdate
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|void
name|dumpStats
parameter_list|()
block|{
name|IndexStatsMBean
name|indexStats
init|=
name|WhiteboardUtils
operator|.
name|getService
argument_list|(
name|whiteboard
argument_list|,
name|IndexStatsMBean
operator|.
name|class
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|indexStats
operator|.
name|getConsolidatedExecutionStats
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|queueSize
init|=
name|Arrays
operator|.
name|toString
argument_list|(
name|statsProvider
operator|.
name|getStats
argument_list|()
operator|.
name|getTimeSeries
argument_list|(
literal|"HYBRID_QUEUE_SIZE"
argument_list|,
literal|false
argument_list|)
operator|.
name|getValuePerSecond
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Queue size - "
operator|+
name|queueSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ResultOfMethodCallIgnored"
argument_list|)
specifier|private
specifier|static
name|File
name|createTemporaryFolderIn
parameter_list|(
name|File
name|parentFolder
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|createdFolder
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"oak-"
argument_list|,
literal|""
argument_list|,
name|parentFolder
argument_list|)
decl_stmt|;
name|createdFolder
operator|.
name|delete
argument_list|()
expr_stmt|;
name|createdFolder
operator|.
name|mkdir
argument_list|()
expr_stmt|;
return|return
name|createdFolder
return|;
block|}
specifier|private
specifier|static
name|NodeStore
name|getNodeStore
parameter_list|(
name|Oak
name|oak
parameter_list|)
block|{
try|try
block|{
name|Field
name|f
init|=
name|Oak
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"store"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|NodeStore
operator|)
name|f
operator|.
name|get
argument_list|(
name|oak
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
class|class
name|PropertyIndexInitializer
implements|implements
name|RepositoryInitializer
block|{
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
annotation|@
name|NotNull
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|NodeBuilder
name|oakIndex
init|=
name|IndexUtils
operator|.
name|getOrCreateOakIndex
argument_list|(
name|builder
argument_list|)
decl_stmt|;
name|addPropIndexDefn
argument_list|(
name|oakIndex
argument_list|,
name|indexedPropName
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfIndexes
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|addPropIndexDefn
argument_list|(
name|oakIndex
argument_list|,
name|indexedPropName
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addPropIndexDefn
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|String
name|propName
parameter_list|)
block|{
try|try
block|{
name|NodeBuilder
name|idx
init|=
name|IndexUtils
operator|.
name|createIndexDefinition
argument_list|(
name|parent
argument_list|,
name|propName
argument_list|,
literal|false
argument_list|,
name|singleton
argument_list|(
name|propName
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"property"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
name|indexedPropName
argument_list|)
condition|)
block|{
name|idx
operator|.
name|setProperty
argument_list|(
literal|"tags"
argument_list|,
name|singletonList
argument_list|(
literal|"fooIndex"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
class|class
name|LuceneIndexInitializer
implements|implements
name|RepositoryInitializer
block|{
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
annotation|@
name|NotNull
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|NodeBuilder
name|oakIndex
init|=
name|IndexUtils
operator|.
name|getOrCreateOakIndex
argument_list|(
name|builder
argument_list|)
decl_stmt|;
name|IndexDefinitionBuilder
name|defnBuilder
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|defnBuilder
operator|.
name|evaluatePathRestrictions
argument_list|()
expr_stmt|;
name|defnBuilder
operator|.
name|async
argument_list|(
literal|"async"
argument_list|,
name|indexingMode
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|PropertyRule
name|pr
init|=
name|defnBuilder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
name|indexedPropName
argument_list|)
operator|.
name|propertyIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|syncIndexing
condition|)
block|{
name|pr
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|useOakCodec
condition|)
block|{
name|defnBuilder
operator|.
name|codec
argument_list|(
literal|"oakCodec"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfIndexes
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|defnBuilder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
name|indexedPropName
operator|+
name|i
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
block|}
name|oakIndex
operator|.
name|setChildNode
argument_list|(
name|indexedPropName
argument_list|,
name|defnBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|oakIndex
operator|.
name|child
argument_list|(
name|indexedPropName
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"tags"
argument_list|,
name|singletonList
argument_list|(
literal|"fooIndex"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|LuceneFullTextInitializer
implements|implements
name|RepositoryInitializer
block|{
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
annotation|@
name|NotNull
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|NodeBuilder
name|oakIndex
init|=
name|IndexUtils
operator|.
name|getOrCreateOakIndex
argument_list|(
name|builder
argument_list|)
decl_stmt|;
name|IndexDefinitionBuilder
name|defnBuilder
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|defnBuilder
operator|.
name|async
argument_list|(
literal|"async"
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|defnBuilder
operator|.
name|codec
argument_list|(
literal|"Lucene46"
argument_list|)
expr_stmt|;
name|defnBuilder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
name|LuceneIndexConstants
operator|.
name|REGEX_ALL_PROPS
argument_list|,
literal|true
argument_list|)
operator|.
name|nodeScopeIndex
argument_list|()
expr_stmt|;
name|oakIndex
operator|.
name|setChildNode
argument_list|(
literal|"globalIndex"
argument_list|,
name|defnBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|NodeTypeIndexFixerInitializer
implements|implements
name|RepositoryInitializer
block|{
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
annotation|@
name|NotNull
name|NodeBuilder
name|builder
parameter_list|)
block|{
comment|//Due to OAK-1150 currently all nodes get indexed
comment|//With explicit list on those nodes would be indexed
name|NodeBuilder
name|nodetype
init|=
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"nodetype"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodetype
operator|.
name|exists
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nodetypes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodetype
operator|.
name|hasProperty
argument_list|(
name|DECLARING_NODE_TYPES
argument_list|)
condition|)
block|{
name|nodetypes
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|nodetype
operator|.
name|getProperty
argument_list|(
name|DECLARING_NODE_TYPES
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodetypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nodetypes
operator|.
name|add
argument_list|(
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|)
expr_stmt|;
name|nodetypes
operator|.
name|add
argument_list|(
literal|"rep:Authorizable"
argument_list|)
expr_stmt|;
name|nodetype
operator|.
name|setProperty
argument_list|(
name|DECLARING_NODE_TYPES
argument_list|,
name|nodetypes
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|nodetype
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Disable counter index to disable traversal
name|NodeBuilder
name|counter
init|=
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"counter"
argument_list|)
decl_stmt|;
if|if
condition|(
name|counter
operator|.
name|exists
argument_list|()
condition|)
block|{
name|counter
operator|.
name|setProperty
argument_list|(
literal|"type"
argument_list|,
literal|"disabled"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|Searcher
implements|implements
name|Runnable
block|{
specifier|final
name|Session
name|session
init|=
name|loginWriter
argument_list|()
decl_stmt|;
name|int
name|resultSize
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|run0
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|run0
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|session
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"select * from [nt:base] where ["
operator|+
name|indexedPropName
operator|+
literal|"] = $status "
operator|+
literal|"option(index tag fooIndex)"
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|"status"
argument_list|,
name|session
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|randomStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
comment|//With property index at time traversing index wins (somehow reporting lower cost)
comment|//and that leads to warning. So limit the iterator size
name|resultSize
operator|+=
name|Iterators
operator|.
name|size
argument_list|(
name|Iterators
operator|.
name|limit
argument_list|(
name|result
operator|.
name|getNodes
argument_list|()
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|Mutator
implements|implements
name|Runnable
block|{
specifier|final
name|Session
name|session
init|=
name|loginWriter
argument_list|()
decl_stmt|;
name|int
name|mutationCount
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|run0
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|run0
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|TestContext
name|ctx
init|=
name|contexts
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|contexts
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|ctx
operator|.
name|paths
operator|.
name|peek
argument_list|()
decl_stmt|;
name|session
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|Node
name|node
init|=
name|session
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|hasProperty
argument_list|(
name|indexedPropName
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|node
operator|.
name|getProperty
argument_list|(
name|indexedPropName
argument_list|)
operator|.
name|getString
argument_list|()
decl_stmt|;
name|String
name|newValue
init|=
name|Status
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
operator|.
name|next
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|indexedPropName
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|mutationCount
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

