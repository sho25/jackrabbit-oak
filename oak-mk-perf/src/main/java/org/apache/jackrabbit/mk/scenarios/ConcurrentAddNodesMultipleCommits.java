begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|scenarios
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|tasks
operator|.
name|GenericWriteTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|Chronometer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|MicroKernelOperation
import|;
end_import

begin_class
specifier|public
class|class
name|ConcurrentAddNodesMultipleCommits
block|{
specifier|public
specifier|static
name|void
name|concurentWritingFlatStructure
parameter_list|(
name|ArrayList
argument_list|<
name|MicroKernel
argument_list|>
name|mks
parameter_list|,
name|int
name|mkNumber
parameter_list|,
name|long
name|nodesNumber
parameter_list|,
name|int
name|numberOfNodesPerCommit
parameter_list|,
name|Chronometer
name|chronometer
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|children
init|=
literal|0
decl_stmt|;
name|ArrayList
argument_list|<
name|GenericWriteTask
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<
name|GenericWriteTask
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|diff
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mkNumber
condition|;
name|i
operator|++
control|)
block|{
name|diff
operator|=
name|MicroKernelOperation
operator|.
name|buildPyramidDiff
argument_list|(
literal|"/"
argument_list|,
literal|0
argument_list|,
name|children
argument_list|,
name|nodesNumber
argument_list|,
literal|"N"
operator|+
name|i
operator|+
literal|"N"
argument_list|,
operator|new
name|StringBuilder
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|tasks
operator|.
name|add
argument_list|(
operator|new
name|GenericWriteTask
argument_list|(
name|mks
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|diff
argument_list|,
name|numberOfNodesPerCommit
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"The diff size is "
operator|+
name|diff
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|ExecutorService
name|threadExecutor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|mkNumber
argument_list|)
decl_stmt|;
name|chronometer
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|GenericWriteTask
name|genericWriteTask
range|:
name|tasks
control|)
block|{
name|threadExecutor
operator|.
name|execute
argument_list|(
name|genericWriteTask
argument_list|)
expr_stmt|;
block|}
name|threadExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|threadExecutor
operator|.
name|awaitTermination
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
name|chronometer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total time is "
operator|+
name|chronometer
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|concurentWritingPyramid1
parameter_list|(
name|ArrayList
argument_list|<
name|MicroKernel
argument_list|>
name|mks
parameter_list|,
name|int
name|mkNumber
parameter_list|,
name|long
name|nodesNumber
parameter_list|,
name|int
name|numberOfNodesPerCommit
parameter_list|,
name|Chronometer
name|chronometer
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|children
init|=
literal|10
decl_stmt|;
name|ArrayList
argument_list|<
name|GenericWriteTask
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<
name|GenericWriteTask
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|diff
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mkNumber
condition|;
name|i
operator|++
control|)
block|{
name|diff
operator|=
name|MicroKernelOperation
operator|.
name|buildPyramidDiff
argument_list|(
literal|"/"
argument_list|,
literal|0
argument_list|,
name|children
argument_list|,
name|nodesNumber
argument_list|,
literal|"N"
operator|+
name|i
operator|+
literal|"N"
argument_list|,
operator|new
name|StringBuilder
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|tasks
operator|.
name|add
argument_list|(
operator|new
name|GenericWriteTask
argument_list|(
name|mks
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|diff
argument_list|,
name|numberOfNodesPerCommit
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"The diff size is "
operator|+
name|diff
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|ExecutorService
name|threadExecutor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|mkNumber
argument_list|)
decl_stmt|;
name|chronometer
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|GenericWriteTask
name|genericWriteTask
range|:
name|tasks
control|)
block|{
name|threadExecutor
operator|.
name|execute
argument_list|(
name|genericWriteTask
argument_list|)
expr_stmt|;
block|}
name|threadExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|threadExecutor
operator|.
name|awaitTermination
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
name|chronometer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total time is "
operator|+
name|chronometer
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|concurentWritingPyramid2
parameter_list|(
name|ArrayList
argument_list|<
name|MicroKernel
argument_list|>
name|mks
parameter_list|,
name|int
name|mkNumber
parameter_list|,
name|long
name|nodesNumber
parameter_list|,
name|int
name|numberOfNodesPerCommit
parameter_list|,
name|Chronometer
name|chronometer
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|children
init|=
literal|100
decl_stmt|;
name|ArrayList
argument_list|<
name|GenericWriteTask
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<
name|GenericWriteTask
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|diff
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mkNumber
condition|;
name|i
operator|++
control|)
block|{
name|diff
operator|=
name|MicroKernelOperation
operator|.
name|buildPyramidDiff
argument_list|(
literal|"/"
argument_list|,
literal|0
argument_list|,
name|children
argument_list|,
name|nodesNumber
argument_list|,
literal|"N"
operator|+
name|i
operator|+
literal|"N"
argument_list|,
operator|new
name|StringBuilder
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|tasks
operator|.
name|add
argument_list|(
operator|new
name|GenericWriteTask
argument_list|(
name|mks
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|diff
argument_list|,
name|numberOfNodesPerCommit
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ExecutorService
name|threadExecutor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|mkNumber
argument_list|)
decl_stmt|;
name|chronometer
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|GenericWriteTask
name|genericWriteTask
range|:
name|tasks
control|)
block|{
name|threadExecutor
operator|.
name|execute
argument_list|(
name|genericWriteTask
argument_list|)
expr_stmt|;
block|}
name|threadExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|threadExecutor
operator|.
name|awaitTermination
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
name|chronometer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total time for is "
operator|+
name|chronometer
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

