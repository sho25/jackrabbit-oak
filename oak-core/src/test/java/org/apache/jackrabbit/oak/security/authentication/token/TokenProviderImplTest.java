begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|GuestCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|ImpersonationCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|credentials
operator|.
name|CredentialsSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|credentials
operator|.
name|SimpleCredentialsSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenProviderImpl
operator|.
name|PARAM_TOKEN_CLEANUP_THRESHOLD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|TokenProviderImplTest
extends|extends
name|AbstractTokenTest
block|{
specifier|private
name|String
name|userId
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|userId
operator|=
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoCreateToken
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|tokenProvider
operator|.
name|doCreateToken
argument_list|(
operator|new
name|GuestCredentials
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tokenProvider
operator|.
name|doCreateToken
argument_list|(
operator|new
name|TokenCredentials
argument_list|(
literal|"token"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tokenProvider
operator|.
name|doCreateToken
argument_list|(
name|getAdminCredentials
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleCredentials
name|sc
init|=
operator|new
name|SimpleCredentials
argument_list|(
literal|"uid"
argument_list|,
literal|"pw"
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tokenProvider
operator|.
name|doCreateToken
argument_list|(
name|sc
argument_list|)
argument_list|)
expr_stmt|;
name|sc
operator|.
name|setAttribute
argument_list|(
literal|"any_attribute"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tokenProvider
operator|.
name|doCreateToken
argument_list|(
name|sc
argument_list|)
argument_list|)
expr_stmt|;
name|sc
operator|.
name|setAttribute
argument_list|(
literal|"rep:token_key"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tokenProvider
operator|.
name|doCreateToken
argument_list|(
name|sc
argument_list|)
argument_list|)
expr_stmt|;
name|sc
operator|.
name|setAttribute
argument_list|(
literal|".token"
argument_list|,
literal|"existing"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tokenProvider
operator|.
name|doCreateToken
argument_list|(
name|sc
argument_list|)
argument_list|)
expr_stmt|;
name|sc
operator|.
name|setAttribute
argument_list|(
literal|".token"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenProvider
operator|.
name|doCreateToken
argument_list|(
name|sc
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTokenFromInvalidCredentials
parameter_list|()
block|{
name|List
argument_list|<
name|Credentials
argument_list|>
name|invalid
init|=
operator|new
name|ArrayList
argument_list|<
name|Credentials
argument_list|>
argument_list|()
decl_stmt|;
name|invalid
operator|.
name|add
argument_list|(
operator|new
name|GuestCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
operator|new
name|TokenCredentials
argument_list|(
literal|"sometoken"
argument_list|)
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
operator|new
name|ImpersonationCredentials
argument_list|(
operator|new
name|GuestCredentials
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"unknownUserId"
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Credentials
name|creds
range|:
name|invalid
control|)
block|{
name|assertNull
argument_list|(
name|tokenProvider
operator|.
name|createToken
argument_list|(
name|creds
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTokenFromCredentials
parameter_list|()
block|{
name|SimpleCredentials
name|sc
init|=
operator|new
name|SimpleCredentials
argument_list|(
name|userId
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Credentials
argument_list|>
name|valid
init|=
operator|new
name|ArrayList
argument_list|<
name|Credentials
argument_list|>
argument_list|()
decl_stmt|;
name|valid
operator|.
name|add
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|valid
operator|.
name|add
argument_list|(
operator|new
name|ImpersonationCredentials
argument_list|(
name|sc
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Credentials
name|creds
range|:
name|valid
control|)
block|{
name|TokenInfo
name|info
init|=
name|tokenProvider
operator|.
name|createToken
argument_list|(
name|creds
argument_list|)
decl_stmt|;
name|assertTokenInfo
argument_list|(
name|info
argument_list|,
name|userId
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTokenFromCredentialsSetsAttribute
parameter_list|()
block|{
name|SimpleCredentials
name|sc
init|=
operator|new
name|SimpleCredentials
argument_list|(
name|userId
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|tokenProvider
operator|.
name|createToken
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
name|TOKEN_ATTRIBUTE
block|}
argument_list|,
name|sc
operator|.
name|getAttributeNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTokenCredentialsSupportDoesntSetAttribute
parameter_list|()
block|{
name|SimpleCredentials
name|sc
init|=
operator|new
name|SimpleCredentials
argument_list|(
name|userId
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|CredentialsSupport
name|credentialsSupport
init|=
name|mock
argument_list|(
name|CredentialsSupport
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|credentialsSupport
operator|.
name|getCredentialClasses
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|SimpleCredentialsSupport
operator|.
name|getInstance
argument_list|()
operator|.
name|getCredentialClasses
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|credentialsSupport
operator|.
name|getUserId
argument_list|(
name|sc
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|SimpleCredentialsSupport
operator|.
name|getInstance
argument_list|()
operator|.
name|getUserId
argument_list|(
name|sc
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|credentialsSupport
operator|.
name|setAttributes
argument_list|(
name|any
argument_list|(
name|Credentials
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|TokenProvider
name|tp
init|=
name|createTokenProvider
argument_list|(
name|root
argument_list|,
name|getTokenConfig
argument_list|()
argument_list|,
name|getUserConfiguration
argument_list|()
argument_list|,
name|credentialsSupport
argument_list|)
decl_stmt|;
name|tp
operator|.
name|createToken
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|sc
operator|.
name|getAttributeNames
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTokenInvalidAlgorithm
parameter_list|()
block|{
name|SimpleCredentials
name|sc
init|=
operator|new
name|SimpleCredentials
argument_list|(
name|userId
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|ConfigurationParameters
name|options
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|UserConstants
operator|.
name|PARAM_PASSWORD_HASH_ALGORITHM
argument_list|,
literal|"invalid"
argument_list|)
decl_stmt|;
name|TokenProvider
name|tp
init|=
name|createTokenProvider
argument_list|(
name|root
argument_list|,
name|options
argument_list|,
name|getUserConfiguration
argument_list|()
argument_list|,
name|SimpleCredentialsSupport
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|tp
operator|.
name|createToken
argument_list|(
name|sc
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTokenFromInvalidUserId
parameter_list|()
block|{
name|TokenInfo
name|info
init|=
name|tokenProvider
operator|.
name|createToken
argument_list|(
literal|"unknownUserId"
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTokenFromGroupId
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|gr
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createGroup
argument_list|(
literal|"groupId"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|tokenProvider
operator|.
name|createToken
argument_list|(
literal|"groupId"
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTokenFromUserId
parameter_list|()
block|{
name|TokenInfo
name|info
init|=
name|tokenProvider
operator|.
name|createToken
argument_list|(
name|userId
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertTokenInfo
argument_list|(
name|info
argument_list|,
name|userId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTokenNode
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|reserved
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|reserved
operator|.
name|put
argument_list|(
name|TOKEN_ATTRIBUTE
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|reserved
operator|.
name|put
argument_list|(
name|TOKEN_ATTRIBUTE_KEY
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|reserved
operator|.
name|put
argument_list|(
name|TOKEN_ATTRIBUTE_EXPIRY
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|privateAttributes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|privateAttributes
operator|.
name|put
argument_list|(
literal|".token_exp"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|privateAttributes
operator|.
name|put
argument_list|(
literal|".tokenTest"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|privateAttributes
operator|.
name|put
argument_list|(
literal|".token_something"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|publicAttributes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|publicAttributes
operator|.
name|put
argument_list|(
literal|"any"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|publicAttributes
operator|.
name|put
argument_list|(
literal|"another"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|putAll
argument_list|(
name|reserved
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|putAll
argument_list|(
name|publicAttributes
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|putAll
argument_list|(
name|privateAttributes
argument_list|)
expr_stmt|;
name|TokenInfo
name|info
init|=
name|tokenProvider
operator|.
name|createToken
argument_list|(
name|userId
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|Tree
name|tokenTree
init|=
name|getTokenTree
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|PropertyState
name|prop
init|=
name|tokenTree
operator|.
name|getProperty
argument_list|(
name|TOKEN_ATTRIBUTE_KEY
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|prop
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|prop
operator|=
name|tokenTree
operator|.
name|getProperty
argument_list|(
name|TOKEN_ATTRIBUTE_EXPIRY
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|DATE
argument_list|,
name|prop
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|reserved
operator|.
name|keySet
argument_list|()
control|)
block|{
name|PropertyState
name|p
init|=
name|tokenTree
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|assertNotEquals
argument_list|(
name|reserved
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|key
range|:
name|privateAttributes
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|privateAttributes
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|tokenTree
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|key
range|:
name|publicAttributes
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|publicAttributes
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|tokenTree
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTokenInfoFromInvalidToken
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|invalid
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"/invalid"
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|token
range|:
name|invalid
control|)
block|{
name|TokenInfo
name|info
init|=
name|tokenProvider
operator|.
name|getTokenInfo
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|assertNull
argument_list|(
name|tokenProvider
operator|.
name|getTokenInfo
argument_list|(
literal|"invalidToken"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTokenInfoFromDisabledUser
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenInfo
name|info
init|=
name|createTokenInfo
argument_list|(
name|tokenProvider
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|getTestUser
argument_list|()
operator|.
name|disable
argument_list|(
literal|"disabled"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokenProvider
operator|.
name|getTokenInfo
argument_list|(
name|info
operator|.
name|getToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTokenInfoFromGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|gr
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createGroup
argument_list|(
literal|"gr"
argument_list|)
decl_stmt|;
name|Tree
name|groupNode
init|=
name|root
operator|.
name|getTree
argument_list|(
name|gr
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Tree
name|parent
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|groupNode
argument_list|,
name|TokenConstants
operator|.
name|TOKENS_NODE_NAME
argument_list|,
name|TokenConstants
operator|.
name|TOKENS_NT_NAME
argument_list|)
decl_stmt|;
name|Tree
name|tokenNode
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|parent
argument_list|,
literal|"tokenName"
argument_list|,
name|TokenConstants
operator|.
name|TOKEN_NT_NAME
argument_list|)
decl_stmt|;
name|String
name|tokenUUID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|tokenNode
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_UUID
argument_list|,
name|tokenUUID
argument_list|)
expr_stmt|;
name|String
name|token
init|=
name|tokenUUID
operator|+
literal|"_generatedKey"
decl_stmt|;
name|tokenNode
operator|.
name|setProperty
argument_list|(
name|TokenConstants
operator|.
name|TOKEN_ATTRIBUTE_KEY
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokenProvider
operator|.
name|getTokenInfo
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTokenInfoFromRegularNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|node
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"testNode"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|Tree
name|parent
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|node
argument_list|,
name|TokenConstants
operator|.
name|TOKENS_NODE_NAME
argument_list|,
name|TokenConstants
operator|.
name|TOKENS_NT_NAME
argument_list|)
decl_stmt|;
name|Tree
name|tokenNode
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|parent
argument_list|,
literal|"tokenName"
argument_list|,
name|TokenConstants
operator|.
name|TOKEN_NT_NAME
argument_list|)
decl_stmt|;
name|String
name|tokenUUID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|tokenNode
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_UUID
argument_list|,
name|tokenUUID
argument_list|)
expr_stmt|;
name|String
name|token
init|=
name|tokenUUID
operator|+
literal|"_generatedKey"
decl_stmt|;
name|tokenNode
operator|.
name|setProperty
argument_list|(
name|TokenConstants
operator|.
name|TOKEN_ATTRIBUTE_KEY
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokenProvider
operator|.
name|getTokenInfo
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTokenInfoFromInvalidLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenInfo
name|info
init|=
name|createTokenInfo
argument_list|(
name|tokenProvider
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tokenProvider
operator|.
name|getTokenInfo
argument_list|(
name|info
operator|.
name|getToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|node
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"testNode"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
try|try
block|{
name|replaceTokenTree
argument_list|(
name|info
argument_list|,
name|node
argument_list|,
name|TOKEN_NT_NAME
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokenProvider
operator|.
name|getTokenInfo
argument_list|(
name|info
operator|.
name|getToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|node
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|(
name|CommitMarker
operator|.
name|asCommitAttributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTokenInfoFromInvalidLocation2
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenInfo
name|info
init|=
name|createTokenInfo
argument_list|(
name|tokenProvider
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tokenProvider
operator|.
name|getTokenInfo
argument_list|(
name|info
operator|.
name|getToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|userTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|userId
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Tree
name|node
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|userTree
argument_list|,
literal|"testNode"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
try|try
block|{
name|replaceTokenTree
argument_list|(
name|info
argument_list|,
name|node
argument_list|,
name|TOKEN_NT_NAME
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokenProvider
operator|.
name|getTokenInfo
argument_list|(
name|info
operator|.
name|getToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTokenInfoFromInvalidLocation3
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenInfo
name|info
init|=
name|createTokenInfo
argument_list|(
name|tokenProvider
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tokenProvider
operator|.
name|getTokenInfo
argument_list|(
name|info
operator|.
name|getToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|userTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|userId
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|replaceTokenTree
argument_list|(
name|info
argument_list|,
name|userTree
operator|.
name|getChild
argument_list|(
name|TOKENS_NODE_NAME
argument_list|)
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokenProvider
operator|.
name|getTokenInfo
argument_list|(
name|info
operator|.
name|getToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTokenInfoFromInvalidLocation4
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenInfo
name|info
init|=
name|createTokenInfo
argument_list|(
name|tokenProvider
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|Tree
name|tokenTree
init|=
name|getTokenTree
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tokenProvider
operator|.
name|getTokenInfo
argument_list|(
name|info
operator|.
name|getToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|TokenInfo
name|info2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Tree
name|adminTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|adminSession
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Tree
name|node
init|=
name|TreeUtil
operator|.
name|getOrAddChild
argument_list|(
name|adminTree
argument_list|,
name|TOKENS_NODE_NAME
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|move
argument_list|(
name|tokenTree
operator|.
name|getPath
argument_list|()
argument_list|,
name|node
operator|.
name|getPath
argument_list|()
operator|+
literal|'/'
operator|+
name|tokenTree
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info2
operator|=
name|tokenProvider
operator|.
name|getTokenInfo
argument_list|(
name|info
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|info2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|info2
operator|.
name|matches
argument_list|(
operator|new
name|TokenCredentials
argument_list|(
name|info
operator|.
name|getToken
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTokenInfo
parameter_list|()
block|{
name|String
name|token
init|=
name|createTokenInfo
argument_list|(
name|tokenProvider
argument_list|,
name|userId
argument_list|)
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|TokenInfo
name|info
init|=
name|tokenProvider
operator|.
name|getTokenInfo
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|assertTokenInfo
argument_list|(
name|info
argument_list|,
name|userId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTokenWithExpirationParam
parameter_list|()
block|{
name|SimpleCredentials
name|sc
init|=
operator|new
name|SimpleCredentials
argument_list|(
name|userId
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|sc
operator|.
name|setAttribute
argument_list|(
name|TokenProvider
operator|.
name|PARAM_TOKEN_EXPIRATION
argument_list|,
literal|100000
argument_list|)
expr_stmt|;
name|TokenInfo
name|info
init|=
name|tokenProvider
operator|.
name|createToken
argument_list|(
name|sc
argument_list|)
decl_stmt|;
name|assertTokenInfo
argument_list|(
name|info
argument_list|,
name|userId
argument_list|)
expr_stmt|;
name|Tree
name|tokenTree
init|=
name|getTokenTree
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tokenTree
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenTree
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenTree
operator|.
name|hasProperty
argument_list|(
name|TokenProvider
operator|.
name|PARAM_TOKEN_EXPIRATION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100000
argument_list|,
name|tokenTree
operator|.
name|getProperty
argument_list|(
name|TokenProvider
operator|.
name|PARAM_TOKEN_EXPIRATION
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTokenWithInvalidExpirationParam
parameter_list|()
block|{
name|SimpleCredentials
name|sc
init|=
operator|new
name|SimpleCredentials
argument_list|(
name|userId
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|sc
operator|.
name|setAttribute
argument_list|(
name|TokenProvider
operator|.
name|PARAM_TOKEN_EXPIRATION
argument_list|,
literal|"invalid"
argument_list|)
expr_stmt|;
try|try
block|{
name|tokenProvider
operator|.
name|createToken
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailingCleanupExpired
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|u
init|=
name|getTestUser
argument_list|()
decl_stmt|;
comment|// grant user principal access to read/create tokens but not removing them
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|u
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|u
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_MODIFY_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|u
operator|.
name|getID
argument_list|()
argument_list|,
name|u
operator|.
name|getID
argument_list|()
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|Root
name|testRoot
init|=
name|cs
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|ConfigurationParameters
name|options
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|PARAM_TOKEN_CLEANUP_THRESHOLD
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TokenProvider
name|tp
init|=
name|createTokenProvider
argument_list|(
name|testRoot
argument_list|,
name|options
argument_list|,
name|getUserConfiguration
argument_list|()
argument_list|,
name|SimpleCredentialsSupport
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|SimpleCredentials
name|sc
init|=
operator|new
name|SimpleCredentials
argument_list|(
name|userId
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|sc
operator|.
name|setAttribute
argument_list|(
name|TokenProvider
operator|.
name|PARAM_TOKEN_EXPIRATION
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TokenInfo
name|info
init|=
name|tp
operator|.
name|createToken
argument_list|(
name|sc
argument_list|)
decl_stmt|;
name|waitUntilExpired
argument_list|(
name|info
argument_list|)
expr_stmt|;
comment|// create new infos until the cleanup is triggered or until max cnt has been reached.
comment|// in either case the expired info must still exist
name|TokenInfo
name|ti
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
do|do
block|{
name|ti
operator|=
name|tp
operator|.
name|createToken
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|ti
operator|.
name|getToken
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|>=
literal|'2'
operator|&&
name|cnt
operator|<
literal|50
condition|)
do|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|getTokenTree
argument_list|(
name|info
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCleanupThresholdNotReached
parameter_list|()
block|{
name|ConfigurationParameters
name|options
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|PARAM_TOKEN_CLEANUP_THRESHOLD
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|TokenProvider
name|tp
init|=
name|createTokenProvider
argument_list|(
name|root
argument_list|,
name|options
argument_list|,
name|getUserConfiguration
argument_list|()
argument_list|,
name|SimpleCredentialsSupport
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|SimpleCredentials
name|sc
init|=
operator|new
name|SimpleCredentials
argument_list|(
name|userId
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|sc
operator|.
name|setAttribute
argument_list|(
name|TokenProvider
operator|.
name|PARAM_TOKEN_EXPIRATION
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TokenInfo
name|info
init|=
name|tp
operator|.
name|createToken
argument_list|(
name|sc
argument_list|)
decl_stmt|;
name|waitUntilExpired
argument_list|(
name|info
argument_list|)
expr_stmt|;
comment|// create new infos until the cleanup is triggered or until max cnt has been reached.
comment|// -> since PARAM_TOKEN_CLEANUP_THRESHOLD is set to 100, the expired token is still not removed
name|TokenInfo
name|ti
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
do|do
block|{
name|ti
operator|=
name|tp
operator|.
name|createToken
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|ti
operator|.
name|getToken
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|>=
literal|'2'
operator|&&
name|cnt
operator|<
literal|50
condition|)
do|;
name|assertTrue
argument_list|(
name|getTokenTree
argument_list|(
name|info
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      *@see<a href="https://issues.apache.org/jira/browse/OAK-1697">OAK-1697</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testValidTokenCredentialsWithConflict
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|pool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContentSession
argument_list|>
name|sessions
init|=
operator|new
name|ArrayList
argument_list|<
name|ContentSession
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|TokenConfiguration
name|tc
init|=
name|getSecurityProvider
argument_list|()
operator|.
name|getConfiguration
argument_list|(
name|TokenConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|SimpleCredentials
name|sc
init|=
operator|(
name|SimpleCredentials
operator|)
name|getAdminCredentials
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TokenProvider
argument_list|>
name|tokenProviders
init|=
operator|new
name|ArrayList
argument_list|<
name|TokenProvider
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|ContentSession
name|session
init|=
name|login
argument_list|(
name|getAdminCredentials
argument_list|()
argument_list|)
decl_stmt|;
name|Root
name|r
init|=
name|session
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|tokenProviders
operator|.
name|add
argument_list|(
name|tc
operator|.
name|getTokenProvider
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|sessions
operator|.
name|add
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|DataFuture
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|DataFuture
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TokenProvider
name|tokenProvider
range|:
name|tokenProviders
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|createDataFuture
argument_list|(
name|pool
argument_list|,
name|tokenProvider
argument_list|,
name|sc
operator|.
name|getUserID
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DataFuture
name|df
range|:
name|list
control|)
block|{
name|assertNotNull
argument_list|(
name|df
operator|.
name|future
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
for|for
control|(
name|ContentSession
name|session
range|:
name|sessions
control|)
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @see<a href="https://issues.apache.org/jira/browse/OAK-1985">OAK-1985</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testTokenValidationIsCaseInsensitive
parameter_list|()
block|{
name|Root
name|root
init|=
name|adminSession
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|TokenConfiguration
name|tokenConfig
init|=
name|getSecurityProvider
argument_list|()
operator|.
name|getConfiguration
argument_list|(
name|TokenConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|TokenProvider
name|tp
init|=
name|tokenConfig
operator|.
name|getTokenProvider
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|String
name|userId
init|=
operator|(
operator|(
name|SimpleCredentials
operator|)
name|getAdminCredentials
argument_list|()
operator|)
operator|.
name|getUserID
argument_list|()
decl_stmt|;
name|TokenInfo
name|info
init|=
name|tp
operator|.
name|createToken
argument_list|(
name|userId
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|info
operator|.
name|matches
argument_list|(
operator|new
name|TokenCredentials
argument_list|(
name|info
operator|.
name|getToken
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userId
argument_list|,
name|info
operator|.
name|getUserId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|=
name|tp
operator|.
name|getTokenInfo
argument_list|(
name|info
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|info
operator|.
name|matches
argument_list|(
operator|new
name|TokenCredentials
argument_list|(
name|info
operator|.
name|getToken
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userId
argument_list|,
name|info
operator|.
name|getUserId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//--------------------------------------------------------------------------
specifier|private
specifier|static
name|void
name|assertTokenInfo
parameter_list|(
name|TokenInfo
name|info
parameter_list|,
name|String
name|userId
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|info
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userId
argument_list|,
name|info
operator|.
name|getUserId
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|info
operator|.
name|isExpired
argument_list|(
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|DataFuture
block|{
specifier|public
name|Future
argument_list|<
name|TokenInfo
argument_list|>
name|future
decl_stmt|;
name|DataFuture
parameter_list|(
name|Future
argument_list|<
name|TokenInfo
argument_list|>
name|future
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|future
operator|=
name|future
expr_stmt|;
block|}
block|}
annotation|@
name|NotNull
specifier|private
name|DataFuture
name|createDataFuture
parameter_list|(
name|ExecutorService
name|pool
parameter_list|,
specifier|final
name|TokenProvider
name|tp
parameter_list|,
specifier|final
name|String
name|userId
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|attributes
parameter_list|)
block|{
name|Future
argument_list|<
name|TokenInfo
argument_list|>
name|future
init|=
name|pool
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
name|tp
operator|.
name|createToken
argument_list|(
name|userId
argument_list|,
name|attributes
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|DataFuture
argument_list|(
name|future
argument_list|)
return|;
block|}
block|}
end_class

end_unit

