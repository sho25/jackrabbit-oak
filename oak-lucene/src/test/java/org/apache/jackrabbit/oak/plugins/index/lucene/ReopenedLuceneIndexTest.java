begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|QueryEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ResultRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|concurrent
operator|.
name|ExecutorCloser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|junit
operator|.
name|TemporarySystemProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|IndexDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|QueryEngineSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|RuntimeNodeTraversalException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|StringContains
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContentHelper
operator|.
name|INITIAL_CONTENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|ReopenedLuceneIndexTest
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporarySystemProperty
name|systemProperty
init|=
operator|new
name|TemporarySystemProperty
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
specifier|private
name|Closer
name|closer
decl_stmt|;
specifier|private
name|Root
name|root
decl_stmt|;
specifier|private
name|QueryEngine
name|qe
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_NODES
init|=
literal|1000
decl_stmt|;
comment|// Use sufficiently large number to cross batched results from index
specifier|private
specifier|static
specifier|final
name|int
name|READ_BEFORE_REOPEN
init|=
literal|400
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|READ_LIMIT
init|=
name|NUM_NODES
operator|+
name|READ_BEFORE_REOPEN
operator|/
literal|2
decl_stmt|;
specifier|private
name|void
name|createRepository
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
throws|,
name|LoginException
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"oak.traversing.warning"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
operator|new
name|ExecutorCloser
argument_list|(
name|executorService
argument_list|)
argument_list|)
expr_stmt|;
name|IndexCopier
name|copier
init|=
operator|new
name|IndexCopier
argument_list|(
name|executorService
argument_list|,
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|LuceneIndexEditorProvider
name|editorProvider
init|=
operator|new
name|LuceneIndexEditorProvider
argument_list|(
name|copier
argument_list|)
decl_stmt|;
name|LuceneIndexProvider
name|queryIndexProvider
init|=
operator|new
name|LuceneIndexProvider
argument_list|(
name|copier
argument_list|)
decl_stmt|;
name|QueryEngineSettings
name|qeSettings
init|=
operator|new
name|QueryEngineSettings
argument_list|()
decl_stmt|;
name|qeSettings
operator|.
name|setLimitReads
argument_list|(
name|READ_LIMIT
argument_list|)
expr_stmt|;
name|qeSettings
operator|.
name|setFailTraversal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|NodeStore
name|nodeStore
init|=
operator|new
name|MemoryNodeStore
argument_list|(
name|INITIAL_CONTENT
argument_list|)
decl_stmt|;
name|Oak
name|oak
init|=
operator|new
name|Oak
argument_list|(
name|nodeStore
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|QueryIndexProvider
operator|)
name|queryIndexProvider
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|Observer
operator|)
name|queryIndexProvider
argument_list|)
operator|.
name|with
argument_list|(
name|editorProvider
argument_list|)
operator|.
name|with
argument_list|(
name|qeSettings
argument_list|)
decl_stmt|;
name|root
operator|=
name|oak
operator|.
name|createContentRepository
argument_list|()
operator|.
name|login
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|getLatestRoot
argument_list|()
expr_stmt|;
name|qe
operator|=
name|root
operator|.
name|getQueryEngine
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|closer
operator|=
name|Closer
operator|.
name|create
argument_list|()
expr_stmt|;
name|createRepository
argument_list|()
expr_stmt|;
name|createIndex
argument_list|()
expr_stmt|;
name|createData
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|IOException
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexDefinition
operator|.
name|setDisableStoredIndexDefinition
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|resultSizeWithinLimitCompatV1
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|resultSize
init|=
name|iterateResultWhileReopening
argument_list|(
literal|"v1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of result rows"
argument_list|,
name|NUM_NODES
argument_list|,
name|resultSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|resultSizeWithinLimitCompatV2
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|resultSize
init|=
name|iterateResultWhileReopening
argument_list|(
literal|"v2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of result rows"
argument_list|,
name|NUM_NODES
argument_list|,
name|resultSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|resultSizeAboveLimitCompatV1
parameter_list|()
throws|throws
name|Exception
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|RuntimeNodeTraversalException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
name|StringContains
operator|.
name|containsString
argument_list|(
literal|"The query read or traversed more than "
operator|+
name|READ_LIMIT
operator|+
literal|" nodes. To avoid affecting other tasks, processing was stopped."
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add more data such that the query genuinely supasses query limit
name|createData
argument_list|(
name|NUM_NODES
argument_list|,
name|READ_LIMIT
operator|+
literal|100
argument_list|)
expr_stmt|;
name|iterateResultWhileReopening
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|resultSizeAboveLimitCompatV2
parameter_list|()
throws|throws
name|Exception
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|RuntimeNodeTraversalException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
name|StringContains
operator|.
name|containsString
argument_list|(
literal|"The query read or traversed more than "
operator|+
name|READ_LIMIT
operator|+
literal|" nodes. To avoid affecting other tasks, processing was stopped."
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add more data such that the query genuinely supasses query limit
name|createData
argument_list|(
name|NUM_NODES
argument_list|,
name|READ_LIMIT
operator|+
literal|100
argument_list|)
expr_stmt|;
name|iterateResultWhileReopening
argument_list|(
literal|"v2"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createIndex
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|IndexDefinitionBuilder
name|idxBuilderV1
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|idxBuilderV1
operator|.
name|noAsync
argument_list|()
operator|.
name|evaluatePathRestrictions
argument_list|()
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"cons"
argument_list|)
operator|.
name|nodeScopeIndex
argument_list|()
comment|// to make a change in index but we won't query for this
operator|.
name|enclosingRule
argument_list|()
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|IndexDefinitionBuilder
name|idxBuilderV2
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|idxBuilderV2
operator|.
name|noAsync
argument_list|()
operator|.
name|evaluatePathRestrictions
argument_list|()
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"cons"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
comment|// to make a change in index but we won't query for this
operator|.
name|enclosingRule
argument_list|()
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|Tree
name|oi
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/oak:index"
argument_list|)
decl_stmt|;
name|idxBuilderV1
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|COMPAT_MODE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// to force aggregate index
name|idxBuilderV1
operator|.
name|build
argument_list|(
name|oi
operator|.
name|addChild
argument_list|(
literal|"index-v1"
argument_list|)
argument_list|)
expr_stmt|;
name|idxBuilderV2
operator|.
name|build
argument_list|(
name|oi
operator|.
name|addChild
argument_list|(
literal|"index-v2"
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createData
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|createData
argument_list|(
literal|0
argument_list|,
name|NUM_NODES
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createData
parameter_list|(
name|int
name|initialIndex
parameter_list|,
name|int
name|lastIndex
comment|/* exclusive */
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Tree
name|par
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|initialIndex
init|;
name|i
operator|<
name|lastIndex
condition|;
name|i
operator|++
control|)
block|{
name|par
operator|.
name|addChild
argument_list|(
literal|"c"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"cons"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|private
name|int
name|iterateResultWhileReopening
parameter_list|(
name|String
name|indexTag
parameter_list|)
throws|throws
name|ParseException
throws|,
name|CommitFailedException
block|{
name|String
name|queryV1
init|=
literal|"SELECT * FROM [nt:base] WHERE CONTAINS(*, 'val')"
decl_stmt|;
name|String
name|queryV2
init|=
literal|"SELECT * FROM [nt:base] WHERE [cons] = 'val'"
decl_stmt|;
name|String
name|query
init|=
literal|"v1"
operator|.
name|equals
argument_list|(
name|indexTag
argument_list|)
condition|?
name|queryV1
else|:
name|queryV2
decl_stmt|;
name|int
name|resultSize
init|=
literal|0
decl_stmt|;
name|Result
name|result
init|=
name|qe
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|,
name|QueryEngine
operator|.
name|NO_BINDINGS
argument_list|,
name|QueryEngine
operator|.
name|NO_MAPPINGS
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|rows
init|=
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// get few rows to open the cursor
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|READ_BEFORE_REOPEN
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"Insufficient result rows. Current iteration count: "
operator|+
name|i
argument_list|,
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|rows
operator|.
name|next
argument_list|()
expr_stmt|;
name|resultSize
operator|++
expr_stmt|;
block|}
comment|// make a change while we still haven't expected the query cursor
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"parent"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"c-new"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// iterate over rest of the results
while|while
condition|(
name|rows
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|rows
operator|.
name|next
argument_list|()
expr_stmt|;
name|resultSize
operator|++
expr_stmt|;
block|}
return|return
name|resultSize
return|;
block|}
block|}
end_class

end_unit

