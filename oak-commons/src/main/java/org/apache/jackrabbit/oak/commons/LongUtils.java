begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|LongUtils
block|{
specifier|private
name|LongUtils
parameter_list|()
block|{}
comment|/**      * Sums {@code a} and {@code b} and verifies that it doesn't overflow in      * signed long arithmetic, in which case {@link Long#MAX_VALUE} will be      * returned instead of the result.      *      * Note: this method is a variant of {@link com.google.common.math.LongMath#checkedAdd(long, long)}      * that returns {@link Long#MAX_VALUE} instead of throwing {@code ArithmeticException}.      *      * @see com.google.common.math.LongMath#checkedAdd(long, long)      */
specifier|public
specifier|static
name|long
name|safeAdd
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|)
block|{
name|long
name|result
init|=
name|a
operator|+
name|b
decl_stmt|;
if|if
condition|(
operator|(
name|a
operator|^
name|b
operator|)
operator|<
literal|0
operator||
operator|(
name|a
operator|^
name|result
operator|)
operator|>=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
else|else
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
block|}
comment|/**      * Calculate an expiration time based on {@code new Date().getTime()} and      * the specified {@code expiration} in number of milliseconds.      *      * @param expiration The expiration in milliseconds.      * @return The expiration time.      */
specifier|public
specifier|static
name|long
name|calculateExpirationTime
parameter_list|(
name|long
name|expiration
parameter_list|)
block|{
return|return
name|LongUtils
operator|.
name|safeAdd
argument_list|(
name|expiration
argument_list|,
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

