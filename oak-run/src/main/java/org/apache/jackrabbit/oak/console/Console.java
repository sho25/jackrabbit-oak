begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|console
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PipedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PipedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|MongoConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoClientURI
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoURI
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionParser
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSpec
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_comment
comment|/**  * A command line console.  */
end_comment

begin_class
specifier|public
class|class
name|Console
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|OptionParser
name|parser
init|=
operator|new
name|OptionParser
argument_list|()
decl_stmt|;
name|OptionSpec
argument_list|<
name|Integer
argument_list|>
name|clusterId
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"clusterId"
argument_list|,
literal|"MongoMK clusterId"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|eval
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"eval"
argument_list|,
literal|"Evaluate script"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|OptionSpec
name|help
init|=
name|parser
operator|.
name|acceptsAll
argument_list|(
name|asList
argument_list|(
literal|"h"
argument_list|,
literal|"?"
argument_list|,
literal|"help"
argument_list|)
argument_list|,
literal|"show help"
argument_list|)
operator|.
name|forHelp
argument_list|()
decl_stmt|;
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|nonOption
init|=
name|parser
operator|.
name|nonOptions
argument_list|(
literal|"console {<path-to-repository> |<mongodb-uri>}"
argument_list|)
decl_stmt|;
name|OptionSet
name|options
init|=
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nonOptions
init|=
name|nonOption
operator|.
name|values
argument_list|(
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|help
argument_list|)
condition|)
block|{
name|parser
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nonOptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|parser
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|NodeStore
name|store
decl_stmt|;
if|if
condition|(
name|nonOptions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|startsWith
argument_list|(
name|MongoURI
operator|.
name|MONGODB_PREFIX
argument_list|)
condition|)
block|{
name|MongoClientURI
name|uri
init|=
operator|new
name|MongoClientURI
argument_list|(
name|nonOptions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|getDatabase
argument_list|()
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Database missing in MongoDB URI: "
operator|+
name|uri
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|MongoConnection
name|mongo
init|=
operator|new
name|MongoConnection
argument_list|(
name|uri
operator|.
name|getURI
argument_list|()
argument_list|)
decl_stmt|;
name|store
operator|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setMongoDB
argument_list|(
name|mongo
operator|.
name|getDB
argument_list|()
argument_list|)
operator|.
name|setClusterId
argument_list|(
name|clusterId
operator|.
name|value
argument_list|(
name|options
argument_list|)
argument_list|)
operator|.
name|getNodeStore
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|store
operator|=
operator|new
name|SegmentNodeStore
argument_list|(
operator|new
name|FileStore
argument_list|(
operator|new
name|File
argument_list|(
name|nonOptions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|256
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Console
name|console
init|=
operator|new
name|Console
argument_list|(
name|store
argument_list|,
name|System
operator|.
name|in
argument_list|,
name|System
operator|.
name|out
argument_list|)
decl_stmt|;
name|String
name|script
init|=
name|eval
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|script
operator|!=
literal|null
condition|)
block|{
name|Command
name|evalCommand
init|=
operator|new
name|Command
operator|.
name|Eval
argument_list|()
decl_stmt|;
name|evalCommand
operator|.
name|setArgs
argument_list|(
name|script
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|console
operator|.
name|run
argument_list|(
name|evalCommand
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
name|console
operator|.
name|run
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|InputStream
name|in
decl_stmt|;
specifier|private
specifier|final
name|OutputStream
name|out
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConsoleSession
name|session
decl_stmt|;
specifier|public
name|Console
parameter_list|(
name|NodeStore
name|store
parameter_list|,
name|InputStream
name|in
parameter_list|,
name|OutputStream
name|out
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
operator|new
name|FilterInputStream
argument_list|(
name|in
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// do not close
block|}
block|}
expr_stmt|;
name|this
operator|.
name|out
operator|=
operator|new
name|FilterOutputStream
argument_list|(
name|out
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// flush but do not close
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|this
operator|.
name|session
operator|=
name|ConsoleSession
operator|.
name|create
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|code
init|=
literal|1
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|prompt
argument_list|()
expr_stmt|;
name|String
name|line
init|=
name|readLine
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|boolean
name|exit
init|=
literal|false
decl_stmt|;
name|PipedInputStream
name|input
decl_stmt|;
name|OutputStream
name|output
init|=
name|out
decl_stmt|;
name|List
argument_list|<
name|Command
argument_list|>
name|commands
init|=
name|Command
operator|.
name|create
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|commands
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Command
argument_list|>
name|it
init|=
name|commands
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Command
name|c
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"exit"
argument_list|)
condition|)
block|{
name|exit
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|input
operator|=
operator|new
name|PipedInputStream
argument_list|()
expr_stmt|;
name|c
operator|.
name|init
argument_list|(
name|session
argument_list|,
name|input
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|output
operator|=
operator|new
name|PipedOutputStream
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// first command -> pass an empty stream for now
comment|// FIXME: find a way to read from stdin without blocking
name|c
operator|.
name|init
argument_list|(
name|session
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|>
name|tasks
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Command
name|c
range|:
name|commands
control|)
block|{
name|tasks
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Future
argument_list|<
name|Object
argument_list|>
name|result
range|:
name|executor
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
control|)
block|{
try|try
block|{
name|result
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|exit
condition|)
block|{
name|code
operator|=
literal|0
expr_stmt|;
break|break;
block|}
block|}
return|return
name|code
return|;
block|}
specifier|public
name|int
name|run
parameter_list|(
name|Command
name|c
parameter_list|)
block|{
name|c
operator|.
name|init
argument_list|(
name|session
argument_list|,
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
try|try
block|{
name|c
operator|.
name|call
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
specifier|private
name|void
name|prompt
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"> "
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|readLine
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|reader
operator|.
name|readLine
argument_list|()
return|;
block|}
block|}
end_class

end_unit

