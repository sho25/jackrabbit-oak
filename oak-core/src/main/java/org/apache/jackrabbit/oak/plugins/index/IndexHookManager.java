begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * Keeps existing IndexHooks updated.  *   *<p>  * The existing index list is obtained via the IndexHookProvider.  *</p>  *   * @see IndexHook  * @see IndexHookProvider  *   */
end_comment

begin_class
specifier|public
class|class
name|IndexHookManager
implements|implements
name|CommitHook
block|{
specifier|private
specifier|final
name|IndexHookProvider
name|provider
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|IndexHookManager
name|of
parameter_list|(
name|IndexHookProvider
name|provider
parameter_list|)
block|{
return|return
operator|new
name|IndexHookManager
argument_list|(
name|provider
argument_list|)
return|;
block|}
specifier|protected
name|IndexHookManager
parameter_list|(
name|IndexHookProvider
name|provider
parameter_list|)
block|{
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|processCommit
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|builder
init|=
name|after
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|//<type,<path, indexhook>>
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|IndexHook
argument_list|>
argument_list|>
argument_list|>
name|updates
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|IndexHook
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
operator|new
name|IndexHookManagerDiff
argument_list|(
name|provider
argument_list|,
name|builder
argument_list|,
name|updates
argument_list|)
argument_list|)
expr_stmt|;
name|apply
argument_list|(
name|updates
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|getNodeState
argument_list|()
return|;
block|}
specifier|private
name|void
name|apply
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|IndexHook
argument_list|>
argument_list|>
argument_list|>
name|updates
parameter_list|)
throws|throws
name|CommitFailedException
block|{
try|try
block|{
for|for
control|(
name|String
name|type
range|:
name|updates
operator|.
name|keySet
argument_list|()
control|)
block|{
for|for
control|(
name|List
argument_list|<
name|IndexHook
argument_list|>
name|hooks
range|:
name|updates
operator|.
name|get
argument_list|(
name|type
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|IndexHook
name|hook
range|:
name|hooks
control|)
block|{
name|hook
operator|.
name|apply
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
for|for
control|(
name|String
name|type
range|:
name|updates
operator|.
name|keySet
argument_list|()
control|)
block|{
for|for
control|(
name|List
argument_list|<
name|IndexHook
argument_list|>
name|hooks
range|:
name|updates
operator|.
name|get
argument_list|(
name|type
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|IndexHook
name|hook
range|:
name|hooks
control|)
block|{
try|try
block|{
name|hook
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"Failed to close the index hook"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

