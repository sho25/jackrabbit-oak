begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|PathUtils
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|Path
block|{
specifier|private
specifier|final
name|String
name|workspace
decl_stmt|;
specifier|private
specifier|final
name|String
name|jcrPath
decl_stmt|;
specifier|private
name|Path
parameter_list|(
name|String
name|workspace
parameter_list|,
name|String
name|jcrPath
parameter_list|)
block|{
name|this
operator|.
name|workspace
operator|=
name|workspace
expr_stmt|;
name|this
operator|.
name|jcrPath
operator|=
name|jcrPath
expr_stmt|;
block|}
specifier|public
specifier|static
name|Path
name|create
parameter_list|(
name|String
name|workspace
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|workspace
argument_list|,
literal|"/"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Path
name|create
parameter_list|(
name|String
name|workspace
parameter_list|,
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not an absolute path: "
operator|+
name|path
argument_list|)
throw|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|workspace
argument_list|,
name|path
argument_list|)
return|;
block|}
specifier|public
name|String
name|getWorkspace
parameter_list|()
block|{
return|return
name|workspace
return|;
block|}
specifier|public
name|String
name|toJcrPath
parameter_list|()
block|{
return|return
name|jcrPath
return|;
block|}
specifier|public
name|String
name|toMkPath
parameter_list|()
block|{
return|return
name|buildMkPath
argument_list|(
name|workspace
argument_list|,
name|jcrPath
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isRoot
parameter_list|()
block|{
return|return
literal|"/"
operator|.
name|equals
argument_list|(
name|jcrPath
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isAncestorOf
parameter_list|(
name|Path
name|absPath
parameter_list|)
block|{
return|return
name|workspace
operator|.
name|equals
argument_list|(
name|absPath
operator|.
name|workspace
argument_list|)
operator|&&
name|PathUtils
operator|.
name|isAncestor
argument_list|(
name|jcrPath
argument_list|,
name|absPath
operator|.
name|jcrPath
argument_list|)
return|;
block|}
specifier|public
name|Path
name|move
parameter_list|(
name|Path
name|from
parameter_list|,
name|Path
name|to
parameter_list|)
block|{
if|if
condition|(
name|from
operator|.
name|isAncestorOf
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
name|create
argument_list|(
name|getWorkspace
argument_list|()
argument_list|,
name|to
operator|.
name|jcrPath
operator|+
name|jcrPath
operator|.
name|substring
argument_list|(
name|from
operator|.
name|jcrPath
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|this
return|;
block|}
block|}
specifier|public
name|Path
name|concat
parameter_list|(
name|String
name|relPath
parameter_list|)
block|{
if|if
condition|(
name|relPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|relPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not a relative path: "
operator|+
name|relPath
argument_list|)
throw|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|workspace
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|jcrPath
argument_list|,
name|relPath
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Path
name|getAncestor
parameter_list|(
name|int
name|depth
parameter_list|)
block|{
if|if
condition|(
name|depth
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|workspace
argument_list|,
literal|"/"
argument_list|)
return|;
block|}
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|depth
operator|&&
name|pos
operator|>=
literal|0
condition|;
name|k
operator|++
control|)
block|{
name|pos
operator|=
name|PathUtils
operator|.
name|getNextSlash
argument_list|(
name|jcrPath
argument_list|,
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|pos
operator|>
literal|0
condition|?
operator|new
name|Path
argument_list|(
name|workspace
argument_list|,
name|jcrPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
argument_list|)
else|:
literal|null
return|;
block|}
specifier|public
name|Path
name|getParent
parameter_list|()
block|{
return|return
name|isRoot
argument_list|()
condition|?
literal|null
else|:
operator|new
name|Path
argument_list|(
name|workspace
argument_list|,
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|jcrPath
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|isRoot
argument_list|()
condition|?
literal|""
else|:
name|PathUtils
operator|.
name|getName
argument_list|(
name|jcrPath
argument_list|)
return|;
block|}
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getNames
parameter_list|()
block|{
return|return
name|PathUtils
operator|.
name|elements
argument_list|(
name|jcrPath
argument_list|)
return|;
block|}
specifier|public
name|int
name|getDepth
parameter_list|()
block|{
return|return
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|jcrPath
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|workspace
operator|+
literal|':'
operator|+
name|jcrPath
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|Path
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Path
name|otherPath
init|=
operator|(
name|Path
operator|)
name|other
decl_stmt|;
return|return
operator|(
name|jcrPath
operator|==
literal|null
condition|?
name|otherPath
operator|.
name|jcrPath
operator|==
literal|null
else|:
name|jcrPath
operator|.
name|equals
argument_list|(
name|otherPath
operator|.
name|jcrPath
argument_list|)
operator|)
operator|&&
operator|(
name|workspace
operator|==
literal|null
condition|?
name|otherPath
operator|.
name|workspace
operator|==
literal|null
else|:
name|workspace
operator|.
name|equals
argument_list|(
name|otherPath
operator|.
name|workspace
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|31
operator|*
operator|(
name|workspace
operator|==
literal|null
condition|?
literal|0
else|:
name|workspace
operator|.
name|hashCode
argument_list|()
operator|)
operator|+
operator|(
name|jcrPath
operator|==
literal|null
condition|?
literal|0
else|:
name|jcrPath
operator|.
name|hashCode
argument_list|()
operator|)
return|;
block|}
comment|//------------------------------------------< private>---
specifier|private
specifier|static
name|String
name|buildMkPath
parameter_list|(
name|String
name|workspace
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
literal|'/'
operator|+
operator|(
literal|"/"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|?
name|workspace
else|:
name|workspace
operator|+
name|path
operator|)
return|;
block|}
block|}
end_class

end_unit

