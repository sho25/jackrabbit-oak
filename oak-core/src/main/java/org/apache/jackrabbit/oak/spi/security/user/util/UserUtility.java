begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|util
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|AuthorizableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * UserUtils... TODO  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|UserUtility
implements|implements
name|UserConstants
block|{
specifier|private
name|UserUtility
parameter_list|()
block|{     }
annotation|@
name|Nonnull
specifier|public
specifier|static
name|String
name|getAdminId
parameter_list|(
annotation|@
name|Nonnull
name|ConfigurationParameters
name|parameters
parameter_list|)
block|{
return|return
name|parameters
operator|.
name|getConfigValue
argument_list|(
name|PARAM_ADMIN_ID
argument_list|,
name|DEFAULT_ADMIN_ID
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
specifier|static
name|String
name|getAnonymousId
parameter_list|(
annotation|@
name|Nonnull
name|ConfigurationParameters
name|parameters
parameter_list|)
block|{
return|return
name|parameters
operator|.
name|getConfigValue
argument_list|(
name|PARAM_ANONYMOUS_ID
argument_list|,
name|DEFAULT_ANONYMOUS_ID
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isType
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|authorizableTree
parameter_list|,
annotation|@
name|Nonnull
name|AuthorizableType
name|type
parameter_list|)
block|{
comment|// FIXME: check for node type according to the specified type constraint
if|if
condition|(
name|authorizableTree
operator|!=
literal|null
condition|)
block|{
name|String
name|ntName
init|=
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|authorizableTree
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GROUP
case|:
return|return
name|NT_REP_GROUP
operator|.
name|equals
argument_list|(
name|ntName
argument_list|)
return|;
case|case
name|USER
case|:
return|return
name|NT_REP_USER
operator|.
name|equals
argument_list|(
name|ntName
argument_list|)
return|;
default|default:
return|return
name|NT_REP_USER
operator|.
name|equals
argument_list|(
name|ntName
argument_list|)
operator|||
name|NT_REP_GROUP
operator|.
name|equals
argument_list|(
name|ntName
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|CheckForNull
specifier|public
specifier|static
name|AuthorizableType
name|getType
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|authorizableNode
parameter_list|)
block|{
name|String
name|ntName
init|=
operator|(
name|authorizableNode
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|authorizableNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|ntName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|UserConstants
operator|.
name|NT_REP_GROUP
operator|.
name|equals
argument_list|(
name|ntName
argument_list|)
condition|)
block|{
return|return
name|AuthorizableType
operator|.
name|GROUP
return|;
block|}
elseif|else
if|if
condition|(
name|UserConstants
operator|.
name|NT_REP_USER
operator|.
name|equals
argument_list|(
name|ntName
argument_list|)
condition|)
block|{
return|return
name|AuthorizableType
operator|.
name|USER
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|CheckForNull
specifier|public
specifier|static
name|String
name|getAuthorizableRootPath
parameter_list|(
name|ConfigurationParameters
name|parameters
parameter_list|,
name|AuthorizableType
name|type
parameter_list|)
block|{
name|String
name|path
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|USER
case|:
name|path
operator|=
name|parameters
operator|.
name|getConfigValue
argument_list|(
name|UserConstants
operator|.
name|PARAM_USER_PATH
argument_list|,
name|UserConstants
operator|.
name|DEFAULT_USER_PATH
argument_list|)
expr_stmt|;
break|break;
case|case
name|GROUP
case|:
name|path
operator|=
name|parameters
operator|.
name|getConfigValue
argument_list|(
name|UserConstants
operator|.
name|PARAM_GROUP_PATH
argument_list|,
name|UserConstants
operator|.
name|DEFAULT_GROUP_PATH
argument_list|)
expr_stmt|;
break|break;
default|default:
name|path
operator|=
name|parameters
operator|.
name|getConfigValue
argument_list|(
name|UserConstants
operator|.
name|PARAM_USER_PATH
argument_list|,
name|UserConstants
operator|.
name|DEFAULT_USER_PATH
argument_list|)
expr_stmt|;
name|String
name|groupRoot
init|=
name|parameters
operator|.
name|getConfigValue
argument_list|(
name|UserConstants
operator|.
name|PARAM_GROUP_PATH
argument_list|,
name|UserConstants
operator|.
name|DEFAULT_GROUP_PATH
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|Text
operator|.
name|isDescendant
argument_list|(
name|path
argument_list|,
name|groupRoot
argument_list|)
condition|)
block|{
name|path
operator|=
name|Text
operator|.
name|getRelativeParent
argument_list|(
name|path
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|path
return|;
block|}
block|}
end_class

end_unit

