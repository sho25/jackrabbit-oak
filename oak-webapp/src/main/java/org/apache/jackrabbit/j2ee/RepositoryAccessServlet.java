begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|j2ee
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|rmi
operator|.
name|client
operator|.
name|ClientRepositoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|NotBoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|InitialContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_comment
comment|/**  * This Class implements a servlet that is used as unified mechanism to retrieve  * a jcr repository either through JNDI or RMI.  */
end_comment

begin_class
specifier|public
class|class
name|RepositoryAccessServlet
extends|extends
name|HttpServlet
block|{
comment|/**      * default logger      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RepositoryAccessServlet
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * initial param name for the bootstrap config location      */
specifier|public
specifier|final
specifier|static
name|String
name|INIT_PARAM_BOOTSTRAP_CONFIG
init|=
literal|"bootstrap-config"
decl_stmt|;
comment|/**      * Context parameter name for 'this' instance.      */
specifier|private
specifier|final
specifier|static
name|String
name|CTX_PARAM_THIS
init|=
literal|"repository.access.servlet"
decl_stmt|;
comment|/**      * Ugly hack to override the bootstrap file location in the test cases      */
specifier|static
name|String
name|bootstrapOverride
init|=
literal|null
decl_stmt|;
comment|/**      * the bootstrap config      */
specifier|private
name|BootstrapConfig
name|config
decl_stmt|;
comment|/**      * the initialized initial context      */
specifier|private
name|InitialContext
name|jndiContext
decl_stmt|;
comment|/**      * if this is set we try to get a Repository from the ServletContext      */
specifier|private
name|String
name|repositoryContextAttributeName
decl_stmt|;
comment|/**      * the repository      */
specifier|private
name|Repository
name|repository
decl_stmt|;
comment|/**      * Initializes the servlet.<br>      * Please note that only one repository startup servlet may exist per      * webapp. it registers itself as context attribute and acts as singleton.      *      * @throws ServletException if a same servlet is already registered or of      * another initialization error occurs.      */
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|ServletException
block|{
comment|// check if servlet is defined twice
if|if
condition|(
name|getServletContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|CTX_PARAM_THIS
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Only one repository access servlet allowed per web-app."
argument_list|)
throw|;
block|}
name|getServletContext
argument_list|()
operator|.
name|setAttribute
argument_list|(
name|CTX_PARAM_THIS
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|repositoryContextAttributeName
operator|=
name|getServletConfig
argument_list|()
operator|.
name|getInitParameter
argument_list|(
literal|"repository.context.attribute.name"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"RepositoryAccessServlet initialized."
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the instance of this servlet      * @param ctx the servlet context      * @return this servlet      */
specifier|public
specifier|static
name|RepositoryAccessServlet
name|getInstance
parameter_list|(
name|ServletContext
name|ctx
parameter_list|)
block|{
specifier|final
name|RepositoryAccessServlet
name|instance
init|=
operator|(
name|RepositoryAccessServlet
operator|)
name|ctx
operator|.
name|getAttribute
argument_list|(
name|CTX_PARAM_THIS
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No RepositoryAccessServlet instance in ServletContext, RepositoryAccessServlet servlet not initialized?"
argument_list|)
throw|;
block|}
return|return
name|instance
return|;
block|}
comment|/**      * Returns the bootstrap config      * @return the bootstrap config      * @throws ServletException if the config is not valid      */
specifier|private
name|BootstrapConfig
name|getConfig
parameter_list|()
throws|throws
name|ServletException
block|{
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
comment|// check if there is a loadable bootstrap config
name|Properties
name|bootstrapProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|String
name|bstrp
init|=
name|bootstrapOverride
decl_stmt|;
if|if
condition|(
name|bstrp
operator|==
literal|null
condition|)
block|{
name|bstrp
operator|=
name|getServletConfig
argument_list|()
operator|.
name|getInitParameter
argument_list|(
name|INIT_PARAM_BOOTSTRAP_CONFIG
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bstrp
operator|!=
literal|null
condition|)
block|{
comment|// check if it's a web-resource
name|InputStream
name|in
init|=
name|getServletContext
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|bstrp
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
comment|// check if it's a file
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|bstrp
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|canRead
argument_list|()
condition|)
block|{
try|try
block|{
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletExceptionWithCause
argument_list|(
literal|"Bootstrap configuration not found: "
operator|+
name|bstrp
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|bootstrapProps
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletExceptionWithCause
argument_list|(
literal|"Bootstrap configuration failure: "
operator|+
name|bstrp
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
comment|// read bootstrap config
name|BootstrapConfig
name|tmpConfig
init|=
operator|new
name|BootstrapConfig
argument_list|()
decl_stmt|;
name|tmpConfig
operator|.
name|init
argument_list|(
name|getServletConfig
argument_list|()
argument_list|)
expr_stmt|;
name|tmpConfig
operator|.
name|init
argument_list|(
name|bootstrapProps
argument_list|)
expr_stmt|;
name|tmpConfig
operator|.
name|validate
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|tmpConfig
operator|.
name|isValid
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Repository access configuration is not valid."
argument_list|)
throw|;
block|}
name|tmpConfig
operator|.
name|logInfos
argument_list|()
expr_stmt|;
name|config
operator|=
name|tmpConfig
expr_stmt|;
block|}
return|return
name|config
return|;
block|}
comment|/**      * Returns the initial jndi context or<code>null</code> if the jndi access      * is not configured or erroous.      * @return the initial context or<code>null</code>      */
specifier|private
name|InitialContext
name|getInitialContext
parameter_list|()
block|{
if|if
condition|(
name|jndiContext
operator|==
literal|null
operator|&&
name|config
operator|.
name|getJndiConfig
argument_list|()
operator|.
name|enabled
argument_list|()
condition|)
block|{
comment|// retrieve JNDI Context environment
try|try
block|{
name|jndiContext
operator|=
operator|new
name|InitialContext
argument_list|(
name|config
operator|.
name|getJndiConfig
argument_list|()
operator|.
name|getJndiEnv
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Create initial context: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|jndiContext
return|;
block|}
comment|/**      * Checks if the repository is available via JNDI and returns it.      * @return the repository or<code>null</code>      * @throws ServletException if this servlet is not properly configured.      */
specifier|private
name|Repository
name|getRepositoryByJNDI
parameter_list|()
throws|throws
name|ServletException
block|{
name|BootstrapConfig
name|config
init|=
name|getConfig
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|config
operator|.
name|getJndiConfig
argument_list|()
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|config
operator|.
name|getJndiConfig
argument_list|()
operator|.
name|enabled
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// acquire via JNDI
name|String
name|repositoryName
init|=
name|config
operator|.
name|getRepositoryName
argument_list|()
decl_stmt|;
name|InitialContext
name|ctx
init|=
name|getInitialContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|Repository
name|r
init|=
operator|(
name|Repository
operator|)
name|ctx
operator|.
name|lookup
argument_list|(
name|repositoryName
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Acquired repository via JNDI."
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error while retrieving repository using JNDI (name={})"
argument_list|,
name|repositoryName
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Checks if the repository is available via RMI and returns it.      * @return the repository or<code>null</code>      * @throws ServletException if this servlet is not properly configured.      */
specifier|private
name|Repository
name|getRepositoryByRMI
parameter_list|()
throws|throws
name|ServletException
block|{
name|BootstrapConfig
name|config
init|=
name|getConfig
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|config
operator|.
name|getRmiConfig
argument_list|()
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|config
operator|.
name|getRmiConfig
argument_list|()
operator|.
name|enabled
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// acquire via RMI
name|String
name|rmiURI
init|=
name|config
operator|.
name|getRmiConfig
argument_list|()
operator|.
name|getRmiUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|rmiURI
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"  trying to retrieve repository using rmi. uri={}"
argument_list|,
name|rmiURI
argument_list|)
expr_stmt|;
name|ClientFactoryDelegater
name|cfd
decl_stmt|;
try|try
block|{
name|Class
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|getServerFactoryDelegaterClass
argument_list|()
argument_list|)
decl_stmt|;
name|cfd
operator|=
operator|(
name|ClientFactoryDelegater
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to locate RMI ClientRepositoryFactory. Is jcr-rmi.jar missing?"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
name|Repository
name|r
init|=
name|cfd
operator|.
name|getRepository
argument_list|(
name|rmiURI
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Acquired repository via RMI."
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error while retrieving repository using RMI: {}"
argument_list|,
name|rmiURI
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**      *  If our config said so, try to retrieve a Repository from the ServletContext      */
specifier|protected
name|Repository
name|getRepositoryByContextAttribute
parameter_list|()
block|{
name|Repository
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|repositoryContextAttributeName
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
operator|(
name|Repository
operator|)
name|getServletContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|repositoryContextAttributeName
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Got Repository from ServletContext attribute '{}'"
argument_list|,
name|repositoryContextAttributeName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"ServletContext attribute '{}' does not provide a Repository"
argument_list|,
name|repositoryContextAttributeName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * Return the fully qualified name of the class providing the client      * repository. The class whose name is returned must implement the      * {@link ClientFactoryDelegater} interface.      *      * @return the qfn of the factory class.      */
specifier|protected
name|String
name|getServerFactoryDelegaterClass
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"$RMIClientFactoryDelegater"
return|;
block|}
comment|/**      * Returns the JCR repository      *      * @return a JCR repository      * @throws IllegalStateException if the repository is not available in the context.      */
specifier|public
name|Repository
name|getRepository
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
comment|// try to get via context attribute
name|repository
operator|=
name|getRepositoryByContextAttribute
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
comment|// try to retrieve via jndi
name|repository
operator|=
name|getRepositoryByJNDI
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
comment|// try to get via rmi
name|repository
operator|=
name|getRepositoryByRMI
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"N/A"
argument_list|)
throw|;
block|}
return|return
name|repository
return|;
block|}
catch|catch
parameter_list|(
name|ServletException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The repository is not available. Please check"
operator|+
literal|" RepositoryAccessServlet configuration in web.xml."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the JCR repository      *      * @param ctx the servlet context      * @return a JCR repository      * @throws IllegalStateException if the repository is not available in the context.      */
specifier|public
specifier|static
name|Repository
name|getRepository
parameter_list|(
name|ServletContext
name|ctx
parameter_list|)
block|{
return|return
name|getInstance
argument_list|(
name|ctx
argument_list|)
operator|.
name|getRepository
argument_list|()
return|;
block|}
comment|/**      * Returns the config that was used to bootstrap this servlet.      * @return the bootstrap config or<code>null</code>.      */
specifier|public
name|BootstrapConfig
name|getBootstrapConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
comment|/**      * optional class for RMI, will only be used, if RMI client is present      */
specifier|protected
specifier|static
specifier|abstract
class|class
name|ClientFactoryDelegater
block|{
specifier|public
specifier|abstract
name|Repository
name|getRepository
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|RemoteException
throws|,
name|MalformedURLException
throws|,
name|NotBoundException
function_decl|;
block|}
comment|/**      * optional class for RMI, will only be used, if RMI server is present      */
specifier|protected
specifier|static
class|class
name|RMIClientFactoryDelegater
extends|extends
name|ClientFactoryDelegater
block|{
comment|// only used to enforce linking upon Class.forName()
specifier|static
name|String
name|FactoryClassName
init|=
name|ClientRepositoryFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
name|Repository
name|getRepository
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|NotBoundException
throws|,
name|RemoteException
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.rmi.server.useCodebaseOnly"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ClientRepositoryFactory
argument_list|()
operator|.
name|getRepository
argument_list|(
name|uri
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

