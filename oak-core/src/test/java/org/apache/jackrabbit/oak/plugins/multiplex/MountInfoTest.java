begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|multiplex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|MountInfoTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|mountNameInPath
parameter_list|()
throws|throws
name|Exception
block|{
name|MountInfo
name|md
init|=
operator|new
name|MountInfo
argument_list|(
operator|new
name|Mount
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|md
operator|.
name|isMounted
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|md
operator|.
name|isMounted
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|md
operator|.
name|isMounted
argument_list|(
literal|"/b/c/d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"dynamic mount path not recognized"
argument_list|,
name|md
operator|.
name|isMounted
argument_list|(
literal|"/x/y/oak:foo/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|md
operator|.
name|isMounted
argument_list|(
literal|"/x/y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|md
operator|.
name|isMounted
argument_list|(
literal|"/x/y/foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isWrapped
parameter_list|()
block|{
name|MountInfo
name|mi
init|=
operator|new
name|MountInfo
argument_list|(
operator|new
name|Mount
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"/c"
argument_list|,
literal|"/f"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|mi
operator|.
name|isWrapped
argument_list|(
literal|"/a"
argument_list|,
literal|"/g"
argument_list|)
argument_list|)
expr_stmt|;
comment|// wraps both
name|assertTrue
argument_list|(
name|mi
operator|.
name|isWrapped
argument_list|(
literal|"/b"
argument_list|,
literal|"/d"
argument_list|)
argument_list|)
expr_stmt|;
comment|// wraps one
name|assertFalse
argument_list|(
name|mi
operator|.
name|isWrapped
argument_list|(
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// wraps none ('outside c-f')
name|assertFalse
argument_list|(
name|mi
operator|.
name|isWrapped
argument_list|(
literal|"/d"
argument_list|,
literal|"/e"
argument_list|)
argument_list|)
expr_stmt|;
comment|// wraps none ('inside c-f')
block|}
block|}
end_class

end_unit

