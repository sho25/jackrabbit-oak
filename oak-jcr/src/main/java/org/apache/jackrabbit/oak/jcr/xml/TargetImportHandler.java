begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|NamespaceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|LocalNameMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapperImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_comment
comment|/**  * {@code TargetImportHandler} serves as the base class for the concrete  * classes {@code {@link DocViewImportHandler}} and  * {@code {@link SysViewImportHandler}}.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|TargetImportHandler
extends|extends
name|DefaultHandler
block|{
specifier|protected
specifier|final
name|Importer
name|importer
decl_stmt|;
specifier|protected
specifier|final
name|ValueFactory
name|valueFactory
decl_stmt|;
specifier|protected
specifier|final
name|NamespaceHelper
name|helper
decl_stmt|;
specifier|private
specifier|final
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|documentContext
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|documentPrefixMap
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
specifier|protected
name|TargetImportHandler
parameter_list|(
name|Importer
name|importer
parameter_list|,
name|ValueFactory
name|valueFactory
parameter_list|,
name|NamespaceHelper
name|helper
parameter_list|)
block|{
name|this
operator|.
name|importer
operator|=
name|importer
expr_stmt|;
name|this
operator|.
name|valueFactory
operator|=
name|valueFactory
expr_stmt|;
name|this
operator|.
name|helper
operator|=
name|helper
expr_stmt|;
block|}
comment|//--------------------------------------------------------< ImportHandler>
annotation|@
name|Override
specifier|public
name|void
name|startPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|SAXException
block|{
name|documentContext
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|documentPrefixMap
operator|=
name|createCurrentPrefixMap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|SAXException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|uris
init|=
name|documentContext
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|uris
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|uris
operator|.
name|remove
argument_list|(
name|uris
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|documentPrefixMap
operator|=
name|createCurrentPrefixMap
argument_list|()
expr_stmt|;
block|}
comment|/**      * Initializes the underlying {@link Importer} instance. This method      * is called by the XML parser when the XML document starts.      *      * @throws SAXException if the importer can not be initialized      * @see DefaultHandler#startDocument()      */
annotation|@
name|Override
specifier|public
name|void
name|startDocument
parameter_list|()
throws|throws
name|SAXException
block|{
try|try
block|{
name|importer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|re
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|re
argument_list|)
throw|;
block|}
block|}
comment|/**      * Closes the underlying {@link Importer} instance. This method      * is called by the XML parser when the XML document ends.      *      * @throws SAXException if the importer can not be closed      * @see DefaultHandler#endDocument()      */
annotation|@
name|Override
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{
try|try
block|{
name|importer
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|re
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|re
argument_list|)
throw|;
block|}
block|}
comment|//--------------------------------------------------------
specifier|public
name|NamePathMapper
name|currentNamePathMapper
parameter_list|()
block|{
return|return
operator|new
name|NamePathMapperImpl
argument_list|(
operator|new
name|LocalNameMapper
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getNamespaceMap
parameter_list|()
block|{
try|try
block|{
return|return
name|helper
operator|.
name|getNamespaces
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSessionLocalMappings
parameter_list|()
block|{
return|return
name|documentPrefixMap
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|createCurrentPrefixMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|entries
init|=
name|documentContext
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|value
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
operator|.
name|get
argument_list|(
name|value
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|protected
class|class
name|NameInfo
block|{
specifier|private
specifier|final
name|String
name|localName
decl_stmt|;
specifier|private
specifier|final
name|String
name|docPrefix
decl_stmt|;
specifier|private
name|String
name|namespaceUri
decl_stmt|;
specifier|private
name|String
name|repoPrefix
decl_stmt|;
name|NameInfo
parameter_list|(
name|String
name|docQualifiedName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|int
name|idx
init|=
name|docQualifiedName
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
block|{
name|docPrefix
operator|=
literal|null
expr_stmt|;
name|localName
operator|=
name|docQualifiedName
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|splits
init|=
name|docQualifiedName
operator|.
name|split
argument_list|(
literal|":"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|docPrefix
operator|=
name|splits
index|[
literal|0
index|]
expr_stmt|;
name|localName
operator|=
name|splits
index|[
literal|1
index|]
expr_stmt|;
block|}
name|init
argument_list|()
expr_stmt|;
block|}
name|NameInfo
parameter_list|(
name|String
name|docPrefix
parameter_list|,
name|String
name|localName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|this
operator|.
name|localName
operator|=
name|localName
expr_stmt|;
name|this
operator|.
name|docPrefix
operator|=
name|docPrefix
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|()
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|docPrefix
operator|==
literal|null
condition|)
block|{
name|namespaceUri
operator|=
literal|""
expr_stmt|;
name|repoPrefix
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|uris
init|=
name|documentContext
operator|.
name|get
argument_list|(
name|docPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|uris
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|namespaceUri
operator|=
name|helper
operator|.
name|getURI
argument_list|(
name|docPrefix
argument_list|)
expr_stmt|;
name|repoPrefix
operator|=
name|docPrefix
expr_stmt|;
block|}
else|else
block|{
name|namespaceUri
operator|=
name|uris
operator|.
name|get
argument_list|(
name|uris
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|repoPrefix
operator|=
name|helper
operator|.
name|getPrefix
argument_list|(
name|namespaceUri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|getLocalName
parameter_list|()
block|{
return|return
name|localName
return|;
block|}
name|String
name|getNamespaceUri
parameter_list|()
block|{
return|return
name|namespaceUri
return|;
block|}
name|String
name|getDocPrefix
parameter_list|()
block|{
return|return
name|docPrefix
return|;
block|}
name|String
name|getRepoPrefix
parameter_list|()
block|{
return|return
name|repoPrefix
return|;
block|}
name|String
name|getDocQualifiedName
parameter_list|()
block|{
if|if
condition|(
name|docPrefix
operator|==
literal|null
operator|||
name|docPrefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|localName
return|;
block|}
else|else
block|{
return|return
name|docPrefix
operator|+
literal|':'
operator|+
name|localName
return|;
block|}
block|}
name|String
name|getRepoQualifiedName
parameter_list|()
block|{
if|if
condition|(
name|repoPrefix
operator|==
literal|null
operator|||
name|repoPrefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|localName
return|;
block|}
else|else
block|{
return|return
name|repoPrefix
operator|+
literal|':'
operator|+
name|localName
return|;
block|}
block|}
name|String
name|getExpandedName
parameter_list|()
block|{
return|return
literal|'{'
operator|+
name|namespaceUri
operator|+
literal|'}'
operator|+
name|localName
return|;
block|}
block|}
block|}
end_class

end_unit

