begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|InitialContentMigratorTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|migrateContent
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommitFailedException
block|{
comment|// 1. populate the seed store with
comment|// .
comment|// \- first
comment|// \- second
comment|// \- third
comment|//
comment|// 2. the mount only includes the '/first' path, so only the
comment|// 'second' and 'third' nodes should be available
name|MemoryNodeStore
name|seed
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|root
init|=
name|seed
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|root
operator|.
name|child
argument_list|(
literal|"first"
argument_list|)
expr_stmt|;
name|root
operator|.
name|child
argument_list|(
literal|"second"
argument_list|)
expr_stmt|;
name|root
operator|.
name|child
argument_list|(
literal|"third"
argument_list|)
expr_stmt|;
name|seed
operator|.
name|merge
argument_list|(
name|root
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|MemoryNodeStore
name|target
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|MountInfoProvider
name|mip
init|=
name|Mounts
operator|.
name|newBuilder
argument_list|()
operator|.
name|mount
argument_list|(
literal|"seed"
argument_list|,
literal|"/first"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// perform migration
name|InitialContentMigrator
name|icm
init|=
operator|new
name|InitialContentMigrator
argument_list|(
name|target
argument_list|,
name|seed
argument_list|,
name|mip
operator|.
name|getMountByName
argument_list|(
literal|"seed"
argument_list|)
argument_list|)
decl_stmt|;
name|icm
operator|.
name|migrate
argument_list|()
expr_stmt|;
name|NodeState
name|targetRoot
init|=
name|target
operator|.
name|getRoot
argument_list|()
decl_stmt|;
comment|// verify that the 'second' and 'third' nodes are visible in the migrated store
name|assertFalse
argument_list|(
literal|"Node /first should not have been migrated"
argument_list|,
name|targetRoot
operator|.
name|hasChildNode
argument_list|(
literal|"first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node /second should have been migrated"
argument_list|,
name|targetRoot
operator|.
name|hasChildNode
argument_list|(
literal|"second"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node /third should have been migrated"
argument_list|,
name|targetRoot
operator|.
name|hasChildNode
argument_list|(
literal|"third"
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify that the async and fulltext-async checkpoints are available
name|NodeState
name|mountAsync
init|=
name|target
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|":async"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|target
operator|.
name|retrieve
argument_list|(
name|mountAsync
operator|.
name|getString
argument_list|(
literal|"async"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|target
operator|.
name|retrieve
argument_list|(
name|mountAsync
operator|.
name|getString
argument_list|(
literal|"fulltext-async"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify the info objects for the checkpoints
name|assertEquals
argument_list|(
literal|"async"
argument_list|,
name|target
operator|.
name|checkpointInfo
argument_list|(
name|mountAsync
operator|.
name|getString
argument_list|(
literal|"async"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fulltext-async"
argument_list|,
name|target
operator|.
name|checkpointInfo
argument_list|(
name|mountAsync
operator|.
name|getString
argument_list|(
literal|"fulltext-async"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|clusterInitialization
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|InterruptedException
block|{
name|MemoryNodeStore
name|seed
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|root
init|=
name|seed
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|root
operator|.
name|child
argument_list|(
literal|"first"
argument_list|)
expr_stmt|;
name|root
operator|.
name|child
argument_list|(
literal|"second"
argument_list|)
expr_stmt|;
name|root
operator|.
name|child
argument_list|(
literal|"third"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|b
init|=
name|root
operator|.
name|child
argument_list|(
literal|"third"
argument_list|)
operator|.
name|child
argument_list|(
literal|"a-"
operator|+
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|50
condition|;
name|j
operator|++
control|)
block|{
name|b
operator|.
name|child
argument_list|(
operator|(
literal|"b-"
operator|)
operator|+
name|j
argument_list|)
expr_stmt|;
block|}
block|}
name|seed
operator|.
name|merge
argument_list|(
name|root
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|MountInfoProvider
name|mip
init|=
name|Mounts
operator|.
name|newBuilder
argument_list|()
operator|.
name|mount
argument_list|(
literal|"seed"
argument_list|,
literal|"/first"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DocumentStore
name|sharedStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DocumentNodeStore
argument_list|>
name|stores
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|stores
operator|.
name|add
argument_list|(
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|sharedStore
argument_list|)
operator|.
name|setClusterId
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Throwable
argument_list|>
name|exceptions
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|migrated
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
name|stores
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|dns
lambda|->
call|(
name|Runnable
call|)
argument_list|()
operator|->
name|runMigration
argument_list|(
name|dns
argument_list|,
name|seed
argument_list|,
name|mip
operator|.
name|getMountByName
argument_list|(
literal|"seed"
argument_list|)
argument_list|,
name|exceptions
argument_list|,
name|migrated
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|Thread
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|threads
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|Thread
operator|::
name|start
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Exception list should be empty: "
operator|+
name|exceptions
argument_list|,
name|exceptions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DocumentNodeStore
name|dns
range|:
name|stores
control|)
block|{
name|NodeState
name|targetRoot
init|=
name|dns
operator|.
name|getRoot
argument_list|()
decl_stmt|;
comment|// verify that the 'second' and 'third' nodes are visible in the migrated store
name|assertFalse
argument_list|(
literal|"Node /first should not have been migrated"
argument_list|,
name|targetRoot
operator|.
name|hasChildNode
argument_list|(
literal|"first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node /second should have been migrated"
argument_list|,
name|targetRoot
operator|.
name|hasChildNode
argument_list|(
literal|"second"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node /third should have been migrated"
argument_list|,
name|targetRoot
operator|.
name|hasChildNode
argument_list|(
literal|"third"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"Node /third/"
operator|+
name|i
operator|+
literal|"/"
operator|+
name|j
operator|+
literal|" should have been migrated"
argument_list|,
name|targetRoot
operator|.
name|getChildNode
argument_list|(
literal|"third"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"a-"
operator|+
name|i
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"b-"
operator|+
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|dns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|runMigration
parameter_list|(
name|NodeStore
name|target
parameter_list|,
name|NodeStore
name|seed
parameter_list|,
name|Mount
name|seedMount
parameter_list|,
name|List
argument_list|<
name|Throwable
argument_list|>
name|exceptions
parameter_list|,
name|AtomicBoolean
name|migrated
parameter_list|)
block|{
try|try
block|{
name|InitialContentMigrator
name|icm
init|=
operator|new
name|InitialContentMigrator
argument_list|(
name|target
argument_list|,
name|seed
argument_list|,
name|seedMount
argument_list|)
block|{
specifier|protected
name|void
name|doMigrate
parameter_list|()
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|migrated
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"doMigrate() has been called more than once."
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|doMigrate
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|icm
operator|.
name|migrate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

