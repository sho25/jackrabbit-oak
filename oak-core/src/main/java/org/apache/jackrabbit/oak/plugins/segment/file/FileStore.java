begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
operator|.
name|MapMode
operator|.
name|READ_WRITE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Journal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|RecordId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Template
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|memory
operator|.
name|MemoryJournal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_class
specifier|public
class|class
name|FileStore
implements|implements
name|SegmentStore
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Journal
argument_list|>
name|journals
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ByteBuffer
name|tar
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|UUID
argument_list|,
name|Segment
argument_list|>
name|segments
init|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
specifier|public
name|FileStore
parameter_list|(
name|String
name|filename
parameter_list|,
name|NodeState
name|root
parameter_list|)
block|{
try|try
block|{
name|RandomAccessFile
name|file
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|filename
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
try|try
block|{
name|tar
operator|=
name|file
operator|.
name|getChannel
argument_list|()
operator|.
name|map
argument_list|(
name|READ_WRITE
argument_list|,
literal|0
argument_list|,
literal|1024
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|journals
operator|.
name|put
argument_list|(
literal|"root"
argument_list|,
operator|new
name|MemoryJournal
argument_list|(
name|this
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FileStore
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
name|this
argument_list|(
literal|"data.tar"
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FileStore
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|this
argument_list|(
name|filename
argument_list|,
name|EMPTY_NODE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FileStore
parameter_list|()
block|{
name|this
argument_list|(
name|EMPTY_NODE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Journal
name|getJournal
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|Journal
name|journal
init|=
name|journals
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|journal
operator|==
literal|null
condition|)
block|{
name|journal
operator|=
operator|new
name|MemoryJournal
argument_list|(
name|this
argument_list|,
literal|"root"
argument_list|)
expr_stmt|;
name|journals
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|journal
argument_list|)
expr_stmt|;
block|}
return|return
name|journal
return|;
block|}
annotation|@
name|Override
specifier|public
name|Segment
name|readSegment
parameter_list|(
name|UUID
name|id
parameter_list|)
block|{
name|Segment
name|segment
init|=
name|segments
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|segment
operator|!=
literal|null
condition|)
block|{
return|return
name|segment
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Segment not found: "
operator|+
name|id
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|createSegment
parameter_list|(
name|UUID
name|segmentId
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|Collection
argument_list|<
name|UUID
argument_list|>
name|referencedSegmentIds
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|strings
parameter_list|,
name|Map
argument_list|<
name|Template
argument_list|,
name|RecordId
argument_list|>
name|templates
parameter_list|)
block|{
name|tar
operator|.
name|put
argument_list|(
name|segmentId
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|tar
operator|.
name|putInt
argument_list|(
name|referencedSegmentIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|UUID
name|referencedSegmentId
range|:
name|referencedSegmentIds
control|)
block|{
name|tar
operator|.
name|putLong
argument_list|(
name|referencedSegmentId
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
name|tar
operator|.
name|putLong
argument_list|(
name|referencedSegmentId
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tar
operator|.
name|putInt
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|int
name|position
init|=
name|tar
operator|.
name|position
argument_list|()
decl_stmt|;
name|tar
operator|.
name|put
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|ByteBuffer
name|buffer
init|=
name|tar
operator|.
name|asReadOnlyBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|position
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|limit
argument_list|(
name|position
operator|+
name|length
argument_list|)
expr_stmt|;
name|buffer
operator|=
name|buffer
operator|.
name|slice
argument_list|()
expr_stmt|;
name|Segment
name|segment
init|=
operator|new
name|Segment
argument_list|(
name|this
argument_list|,
name|segmentId
argument_list|,
name|buffer
argument_list|,
name|referencedSegmentIds
argument_list|,
name|strings
argument_list|,
name|templates
argument_list|)
decl_stmt|;
if|if
condition|(
name|segments
operator|.
name|putIfAbsent
argument_list|(
name|segmentId
argument_list|,
name|segment
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Segment override: "
operator|+
name|segmentId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteSegment
parameter_list|(
name|UUID
name|segmentId
parameter_list|)
block|{
if|if
condition|(
name|segments
operator|.
name|remove
argument_list|(
name|segmentId
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Missing segment: "
operator|+
name|segmentId
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

