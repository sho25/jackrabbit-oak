begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|min
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|CommitsTrackerTest
block|{
specifier|private
specifier|static
class|class
name|CommitTask
block|{
specifier|private
specifier|final
name|CommitsTracker
name|commitsTracker
decl_stmt|;
specifier|private
specifier|final
name|Thread
name|thread
decl_stmt|;
name|CommitTask
parameter_list|(
name|CommitsTracker
name|commitsTracker
parameter_list|)
block|{
name|this
operator|.
name|commitsTracker
operator|=
name|commitsTracker
expr_stmt|;
name|this
operator|.
name|thread
operator|=
operator|new
name|Thread
argument_list|()
expr_stmt|;
block|}
name|CommitTask
parameter_list|(
name|CommitsTracker
name|commitsTracker
parameter_list|,
name|String
name|threadName
parameter_list|)
block|{
name|this
operator|.
name|commitsTracker
operator|=
name|commitsTracker
expr_stmt|;
name|this
operator|.
name|thread
operator|=
operator|new
name|Thread
argument_list|(
name|threadName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|queued
parameter_list|()
block|{
name|commitsTracker
operator|.
name|trackQueuedCommitOf
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dequeue
parameter_list|()
block|{
name|commitsTracker
operator|.
name|trackDequedCommitOf
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|executed
parameter_list|()
block|{
name|commitsTracker
operator|.
name|trackExecutedCommitOf
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getThreadName
parameter_list|()
block|{
return|return
name|thread
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommitsCountOthers
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|CommitsTracker
name|commitsTracker
init|=
operator|new
name|CommitsTracker
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CommitTask
argument_list|>
name|queued
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|20
condition|;
name|k
operator|++
control|)
block|{
name|CommitTask
name|commitTask
init|=
operator|new
name|CommitTask
argument_list|(
name|commitsTracker
argument_list|)
decl_stmt|;
name|queued
operator|.
name|add
argument_list|(
name|commitTask
argument_list|)
expr_stmt|;
name|commitTask
operator|.
name|queued
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|queued
operator|.
name|size
argument_list|()
argument_list|,
name|commitsTracker
operator|.
name|getQueuedWritersMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|commitsTracker
operator|.
name|getCommitsCountOthers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|commitsTracker
operator|.
name|getCommitsCountPerGroupLastMinute
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|CommitTask
argument_list|>
name|executed
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|13
condition|;
name|k
operator|++
control|)
block|{
name|CommitTask
name|commitTask
init|=
name|queued
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|executed
operator|.
name|add
argument_list|(
name|commitTask
argument_list|)
expr_stmt|;
name|commitTask
operator|.
name|dequeue
argument_list|()
expr_stmt|;
name|commitTask
operator|.
name|executed
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|queued
operator|.
name|size
argument_list|()
argument_list|,
name|commitsTracker
operator|.
name|getQueuedWritersMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|min
argument_list|(
literal|10
argument_list|,
name|executed
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|commitsTracker
operator|.
name|getCommitsCountOthers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|commitsTracker
operator|.
name|getCommitsCountPerGroupLastMinute
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommitsCountPerGroup
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|String
index|[]
name|groups
init|=
operator|new
name|String
index|[]
block|{
literal|"Thread-1.*"
block|,
literal|"Thread-2.*"
block|,
literal|"Thread-3.*"
block|}
decl_stmt|;
name|CommitsTracker
name|commitsTracker
init|=
operator|new
name|CommitsTracker
argument_list|(
name|groups
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|40
condition|;
name|k
operator|++
control|)
block|{
name|CommitTask
name|commitTask
init|=
operator|new
name|CommitTask
argument_list|(
name|commitsTracker
argument_list|,
literal|"Thread-"
operator|+
operator|(
literal|10
operator|+
name|k
operator|)
argument_list|)
decl_stmt|;
name|commitTask
operator|.
name|queued
argument_list|()
expr_stmt|;
name|commitTask
operator|.
name|dequeue
argument_list|()
expr_stmt|;
name|commitTask
operator|.
name|executed
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|commitsCountPerGroup
init|=
name|commitsTracker
operator|.
name|getCommitsCountPerGroupLastMinute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|commitsCountPerGroup
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|group
range|:
name|groups
control|)
block|{
name|Long
name|groupCount
init|=
name|commitsCountPerGroup
operator|.
name|get
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|groupCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
operator|(
name|long
operator|)
name|groupCount
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|commitsTracker
operator|.
name|getCommitsCountOthers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

