begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|junit
operator|.
name|LogCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_comment
comment|/**  * Tests the query validator.  */
end_comment

begin_class
specifier|public
class|class
name|QueryValidatorTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|empty
parameter_list|()
throws|throws
name|ParseException
block|{
name|QueryValidator
name|v
init|=
operator|new
name|QueryValidator
argument_list|()
decl_stmt|;
comment|// expected to be very fast
name|v
operator|.
name|checkStatement
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|v
operator|.
name|setPattern
argument_list|(
literal|"x"
argument_list|,
literal|"x.*"
argument_list|,
literal|"all"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|v
operator|.
name|setPattern
argument_list|(
literal|"x"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|v
operator|.
name|checkStatement
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|warning
parameter_list|()
throws|throws
name|ParseException
block|{
name|QueryValidator
name|v
init|=
operator|new
name|QueryValidator
argument_list|()
decl_stmt|;
name|v
operator|.
name|setPattern
argument_list|(
literal|"x"
argument_list|,
literal|"x.*"
argument_list|,
literal|"all"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[\n"
operator|+
literal|"{\n"
operator|+
literal|"\"key\":\"x\"\n"
operator|+
literal|",\"pattern\":\"x.*\"\n"
operator|+
literal|",\"comment\":\"all\"\n"
operator|+
literal|",\"failQuery\":false\n"
operator|+
literal|",\"executedLast\":\"\"\n"
operator|+
literal|",\"executedCount\":0\n"
operator|+
literal|"}]"
argument_list|,
name|v
operator|.
name|getJson
argument_list|()
argument_list|)
expr_stmt|;
name|LogCustomizer
name|customLogs
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|QueryValidator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|enable
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|customLogs
operator|.
name|starting
argument_list|()
expr_stmt|;
name|v
operator|.
name|checkStatement
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|v
operator|.
name|checkStatement
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
name|v
operator|.
name|checkStatement
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logs
init|=
name|customLogs
operator|.
name|getLogs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[Query is questionable, but executed: statement=x1 pattern=x.*]"
argument_list|,
name|logs
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|customLogs
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|error
parameter_list|()
throws|throws
name|ParseException
block|{
name|QueryValidator
name|v
init|=
operator|new
name|QueryValidator
argument_list|()
decl_stmt|;
name|v
operator|.
name|setPattern
argument_list|(
literal|"x"
argument_list|,
literal|"x.*"
argument_list|,
literal|"all"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|v
operator|.
name|checkStatement
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|v
operator|.
name|checkStatement
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|v
operator|.
name|getJson
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"[\n"
operator|+
literal|"{\n"
operator|+
literal|"\"key\":\"x\"\n"
operator|+
literal|",\"pattern\":\"x.*\"\n"
operator|+
literal|",\"comment\":\"all\"\n"
operator|+
literal|",\"failQuery\":true\n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|v
operator|.
name|getJson
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"\"executedCount\":1"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|v
operator|.
name|checkStatement
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
try|try
block|{
name|v
operator|.
name|checkStatement
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|assertTrue
argument_list|(
name|v
operator|.
name|getJson
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"\"executedCount\":2"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|initFromNodeStore
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|QueryValidator
name|v
init|=
operator|new
name|QueryValidator
argument_list|()
decl_stmt|;
name|MemoryNodeStore
name|ns
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|v
operator|.
name|init
argument_list|(
name|ns
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[]"
argument_list|,
name|v
operator|.
name|getJson
argument_list|()
argument_list|)
expr_stmt|;
name|NodeBuilder
name|rootBuilder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|b
decl_stmt|;
name|b
operator|=
name|rootBuilder
operator|.
name|child
argument_list|(
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|child
argument_list|(
name|QueryValidator
operator|.
name|QUERY_VALIDATOR
argument_list|)
operator|.
name|child
argument_list|(
literal|"ignored"
argument_list|)
expr_stmt|;
name|b
operator|=
name|rootBuilder
operator|.
name|child
argument_list|(
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|child
argument_list|(
name|QueryValidator
operator|.
name|QUERY_VALIDATOR
argument_list|)
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"pattern"
argument_list|,
literal|"testPattern"
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"comment"
argument_list|,
literal|"testComment"
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"failQuery"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|ns
operator|.
name|merge
argument_list|(
name|rootBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|v
operator|.
name|init
argument_list|(
name|ns
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[\n"
operator|+
literal|"{\n"
operator|+
literal|"\"key\":\"test\"\n"
operator|+
literal|",\"pattern\":\"testPattern\"\n"
operator|+
literal|",\"comment\":\"testComment\"\n"
operator|+
literal|",\"failQuery\":true\n"
operator|+
literal|",\"executedLast\":\"\"\n"
operator|+
literal|",\"executedCount\":0\n"
operator|+
literal|"}]"
argument_list|,
name|v
operator|.
name|getJson
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|=
name|rootBuilder
operator|.
name|child
argument_list|(
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|child
argument_list|(
name|QueryValidator
operator|.
name|QUERY_VALIDATOR
argument_list|)
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"pattern"
argument_list|,
name|asList
argument_list|(
literal|"select"
argument_list|,
literal|"order by @x"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"comment"
argument_list|,
literal|"testComment"
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"failQuery"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|ns
operator|.
name|merge
argument_list|(
name|rootBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|v
operator|.
name|init
argument_list|(
name|ns
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[\n"
operator|+
literal|"{\n"
operator|+
literal|"\"key\":\"test\"\n"
operator|+
literal|",\"pattern\":\"\\\\Qselect\\\\E.*\\\\Qorder by @x\\\\E\"\n"
operator|+
literal|",\"comment\":\"testComment\"\n"
operator|+
literal|",\"failQuery\":true\n"
operator|+
literal|",\"executedLast\":\"\"\n"
operator|+
literal|",\"executedCount\":0\n"
operator|+
literal|"}]"
argument_list|,
name|v
operator|.
name|getJson
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

