begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|performance
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * An input stream that returns a given number of dummy data. The returned  * data is designed to be non-compressible to prevent possible compression  * mechanisms from affecting performance measurements.  */
end_comment

begin_class
class|class
name|TestInputStream
extends|extends
name|InputStream
block|{
specifier|private
specifier|final
name|int
name|n
decl_stmt|;
specifier|private
name|int
name|i
decl_stmt|;
comment|/**      * Source of the random stream of bytes. No fixed seed is used to      * prevent a solution like the Jackrabbit data store from using just      * a single storage location for multiple streams.      */
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|public
name|TestInputStream
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|n
operator|=
name|length
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
block|{
if|if
condition|(
name|i
operator|<
name|n
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|b
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|i
operator|<
name|n
condition|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|n
operator|-
name|i
argument_list|)
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|i
operator|+=
name|data
operator|.
name|length
expr_stmt|;
return|return
name|data
operator|.
name|length
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
end_class

end_unit

