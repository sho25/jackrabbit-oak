begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|simple
package|;
end_package

begin_comment
comment|/**  * A clock that normally returns the current system time since 1970, and is  * guaranteed to return ascending values. It returns ascending values even if  * the system time is changed, and never the same value twice. Worst case, it  * returns incrementing values. Unique nanosecond values are returned for system  * times between the years 1970 and 2554.  */
end_comment

begin_class
class|class
name|AscendingClock
block|{
comment|/**      * The offset between System.nanoTime() (which returns elapsed time) and the      * absolute current system time in nanoseconds since 1970 UTC.      */
specifier|private
name|long
name|nanoOffset
decl_stmt|;
comment|/**      * The last millisecond value returned.      */
specifier|private
name|long
name|lastMillis
decl_stmt|;
comment|/**      * The last nanosecond value returned.      */
specifier|private
name|long
name|lastNanos
decl_stmt|;
comment|/**      * Create a new clock.      *      * @param lastMillis the time (the next returned value will be at least one      *            bigger)      */
specifier|public
name|AscendingClock
parameter_list|(
name|long
name|lastMillis
parameter_list|)
block|{
name|this
operator|.
name|lastMillis
operator|=
name|lastMillis
expr_stmt|;
name|this
operator|.
name|lastNanos
operator|=
name|lastMillis
operator|*
literal|1000000
expr_stmt|;
name|resetNanoOffset
argument_list|()
expr_stmt|;
block|}
comment|/**      * Get the current time, ensuring that the value is always larger than the      * last returned time, even if the system time was changed. Worst case, this      * method will return the last returned value plus one.      *      * @return the time in nanoseconds since 1970-01-01 (UTC)      */
specifier|public
specifier|synchronized
name|long
name|nanoTime
parameter_list|()
block|{
name|long
name|nanos
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|nanoOffset
operator|+
name|nanos
decl_stmt|;
if|if
condition|(
name|nanos
operator|>
name|lastNanos
operator|+
literal|1000000000
condition|)
block|{
comment|// re-sync every second, in case
comment|// the system time was changed
name|resetNanoOffset
argument_list|()
expr_stmt|;
name|now
operator|=
name|nanoOffset
operator|+
name|nanos
expr_stmt|;
block|}
if|if
condition|(
name|now
operator|>
name|lastNanos
condition|)
block|{
name|lastNanos
operator|=
name|now
expr_stmt|;
block|}
else|else
block|{
name|now
operator|=
operator|++
name|lastNanos
expr_stmt|;
block|}
return|return
name|now
return|;
block|}
specifier|private
name|void
name|resetNanoOffset
parameter_list|()
block|{
name|nanoOffset
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|*
literal|1000000
operator|-
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
block|}
comment|/**      * Get the current time, ensuring that the value is always larger than the      * last returned time, even if the system time was changed. Worst case, this      * method will return the last returned value plus one.      *      * @return the time in milliseconds since 1970-01-01 (UTC)      */
specifier|public
specifier|synchronized
name|long
name|time
parameter_list|()
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|>
name|lastMillis
condition|)
block|{
name|lastMillis
operator|=
name|now
expr_stmt|;
block|}
else|else
block|{
name|now
operator|=
operator|++
name|lastMillis
expr_stmt|;
block|}
return|return
name|now
return|;
block|}
block|}
end_class

end_unit

