begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|split
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|DataStoreBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|OakFileDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|AzurePersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|AzuriteDockerRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|InvalidFileStoreVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|TarPersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentNodeStorePersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|SplitPersistenceBlobTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
name|AzuriteDockerRule
name|azurite
init|=
operator|new
name|AzuriteDockerRule
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|SegmentNodeStore
name|base
decl_stmt|;
specifier|private
name|SegmentNodeStore
name|split
decl_stmt|;
specifier|private
name|FileStore
name|baseFileStore
decl_stmt|;
specifier|private
name|FileStore
name|splitFileStore
decl_stmt|;
specifier|private
name|String
name|baseBlobId
decl_stmt|;
specifier|private
name|SegmentNodeStorePersistence
name|splitPersistence
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidFileStoreVersionException
throws|,
name|CommitFailedException
throws|,
name|URISyntaxException
throws|,
name|InvalidKeyException
throws|,
name|StorageException
block|{
name|SegmentNodeStorePersistence
name|sharedPersistence
init|=
operator|new
name|AzurePersistence
argument_list|(
name|azurite
operator|.
name|getContainer
argument_list|(
literal|"oak-test"
argument_list|)
operator|.
name|getDirectoryReference
argument_list|(
literal|"oak"
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|dataStoreDir
init|=
operator|new
name|File
argument_list|(
name|folder
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|"blobstore"
argument_list|)
decl_stmt|;
name|BlobStore
name|blobStore
init|=
name|newBlobStore
argument_list|(
name|dataStoreDir
argument_list|)
decl_stmt|;
name|baseFileStore
operator|=
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
argument_list|)
operator|.
name|withCustomPersistence
argument_list|(
name|sharedPersistence
argument_list|)
operator|.
name|withBlobStore
argument_list|(
name|blobStore
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|base
operator|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|baseFileStore
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|base
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"version"
argument_list|,
literal|"v1"
argument_list|)
expr_stmt|;
name|base
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|baseBlobId
operator|=
name|createLoad
argument_list|(
name|base
argument_list|,
name|baseFileStore
argument_list|)
operator|.
name|getContentIdentity
argument_list|()
expr_stmt|;
name|baseFileStore
operator|.
name|flush
argument_list|()
expr_stmt|;
name|baseFileStore
operator|.
name|close
argument_list|()
expr_stmt|;
name|baseFileStore
operator|=
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
argument_list|)
operator|.
name|withCustomPersistence
argument_list|(
name|sharedPersistence
argument_list|)
operator|.
name|withBlobStore
argument_list|(
name|blobStore
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|base
operator|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|baseFileStore
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|createLoad
argument_list|(
name|base
argument_list|,
name|baseFileStore
argument_list|)
operator|.
name|getContentIdentity
argument_list|()
expr_stmt|;
name|baseFileStore
operator|.
name|flush
argument_list|()
expr_stmt|;
name|SegmentNodeStorePersistence
name|localPersistence
init|=
operator|new
name|TarPersistence
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
argument_list|)
decl_stmt|;
name|splitPersistence
operator|=
operator|new
name|SplitPersistence
argument_list|(
name|sharedPersistence
argument_list|,
name|localPersistence
argument_list|)
expr_stmt|;
name|splitFileStore
operator|=
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
argument_list|)
operator|.
name|withCustomPersistence
argument_list|(
name|splitPersistence
argument_list|)
operator|.
name|withBlobStore
argument_list|(
name|blobStore
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|split
operator|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|splitFileStore
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|baseFileStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|collectReferences
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommitFailedException
block|{
name|String
name|blobId
init|=
name|createLoad
argument_list|(
name|split
argument_list|,
name|splitFileStore
argument_list|)
operator|.
name|getContentIdentity
argument_list|()
decl_stmt|;
name|assertReferences
argument_list|(
literal|2
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|baseBlobId
argument_list|,
name|blobId
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Blob
name|createBlob
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|nodeStore
operator|.
name|createBlob
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|BlobStore
name|newBlobStore
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
name|OakFileDataStore
name|delegate
init|=
operator|new
name|OakFileDataStore
argument_list|()
decl_stmt|;
name|delegate
operator|.
name|setPath
argument_list|(
name|directory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|init
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
operator|new
name|DataStoreBlobStore
argument_list|(
name|delegate
argument_list|)
return|;
block|}
specifier|private
name|Blob
name|createLoad
parameter_list|(
name|SegmentNodeStore
name|store
parameter_list|,
name|FileStore
name|fileStore
parameter_list|)
throws|throws
name|IOException
throws|,
name|CommitFailedException
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Blob
name|blob
init|=
name|createBlob
argument_list|(
name|store
argument_list|,
literal|18000
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"bin"
argument_list|,
name|blob
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|fileStore
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|blob
return|;
block|}
specifier|private
name|void
name|assertReferences
parameter_list|(
name|int
name|count
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|blobIds
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|actualReferences
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|splitFileStore
operator|.
name|collectBlobReferences
argument_list|(
name|actualReferences
operator|::
name|add
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"visible references different"
argument_list|,
name|count
argument_list|,
name|actualReferences
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Binary reference returned should be same"
argument_list|,
name|blobIds
argument_list|,
name|actualReferences
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

