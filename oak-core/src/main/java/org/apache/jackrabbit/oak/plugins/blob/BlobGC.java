begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Default implementation of {@link BlobGCMBean} based on a {@link BlobGarbageCollector}.  */
end_comment

begin_class
specifier|public
class|class
name|BlobGC
implements|implements
name|BlobGCMBean
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlobGC
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|BlobGarbageCollector
name|blobGarbageCollector
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|executorService
decl_stmt|;
specifier|private
name|Future
argument_list|<
name|Long
argument_list|>
name|gcOp
decl_stmt|;
comment|/**      * @param blobGarbageCollector  Blob garbage collector      * @param executorService  executor service for running the garbage collection task      *                         in the background.      */
specifier|public
name|BlobGC
parameter_list|(
annotation|@
name|Nonnull
name|BlobGarbageCollector
name|blobGarbageCollector
parameter_list|,
annotation|@
name|Nonnull
name|ExecutorService
name|executorService
parameter_list|)
block|{
name|this
operator|.
name|blobGarbageCollector
operator|=
name|checkNotNull
argument_list|(
name|blobGarbageCollector
argument_list|)
expr_stmt|;
name|this
operator|.
name|executorService
operator|=
name|checkNotNull
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|startBlobGC
parameter_list|()
block|{
if|if
condition|(
name|gcOp
operator|!=
literal|null
operator|&&
operator|!
name|gcOp
operator|.
name|isDone
argument_list|()
condition|)
block|{
return|return
literal|"Garbage collection already running"
return|;
block|}
else|else
block|{
name|gcOp
operator|=
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|t0
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|blobGarbageCollector
operator|.
name|collectGarbage
argument_list|()
expr_stmt|;
return|return
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|t0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|getBlobGCStatus
argument_list|()
return|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|getBlobGCStatus
parameter_list|()
block|{
if|if
condition|(
name|gcOp
operator|==
literal|null
condition|)
block|{
return|return
literal|"Garbage collection not started"
return|;
block|}
elseif|else
if|if
condition|(
name|gcOp
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
return|return
literal|"Garbage collection cancelled"
return|;
block|}
elseif|else
if|if
condition|(
name|gcOp
operator|.
name|isDone
argument_list|()
condition|)
block|{
try|try
block|{
return|return
literal|"Garbage collection completed in "
operator|+
name|formatTime
argument_list|(
name|gcOp
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
literal|"Garbage Collection status unknown: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Garbage collection failed"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|"Garbage collection failed: "
operator|+
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
return|;
block|}
block|}
else|else
block|{
return|return
literal|"Garbage collection running"
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|formatTime
parameter_list|(
name|long
name|nanos
parameter_list|)
block|{
return|return
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|convert
argument_list|(
name|nanos
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|+
literal|" minutes"
return|;
block|}
block|}
end_class

end_unit

