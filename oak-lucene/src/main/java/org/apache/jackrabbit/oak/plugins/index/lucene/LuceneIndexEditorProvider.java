begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|ActiveDeletedBlobCollectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|ActiveDeletedBlobCollectorFactory
operator|.
name|ActiveDeletedBlobCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|ActiveDeletedBlobCollectorFactory
operator|.
name|BlobDeletionCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|DefaultDirectoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|DirectoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|hybrid
operator|.
name|IndexingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|hybrid
operator|.
name|LocalIndexWriterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|hybrid
operator|.
name|LuceneDocumentHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
operator|.
name|LuceneIndexPropertyQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
operator|.
name|PropertyIndexUpdateCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
operator|.
name|PropertyQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|writer
operator|.
name|DefaultIndexWriterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|writer
operator|.
name|LuceneIndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|CompositePropertyUpdateCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|ExtractedTextCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|PropertyUpdateCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|spi
operator|.
name|editor
operator|.
name|FulltextIndexWriterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ReadOnlyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|TYPE_LUCENE
import|;
end_import

begin_comment
comment|/**  * Service that provides Lucene based {@link IndexEditor}s  *  * @see LuceneIndexEditor  * @see IndexEditorProvider  *  */
end_comment

begin_class
specifier|public
class|class
name|LuceneIndexEditorProvider
implements|implements
name|IndexEditorProvider
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|IndexCopier
name|indexCopier
decl_stmt|;
specifier|private
specifier|final
name|ExtractedTextCache
name|extractedTextCache
decl_stmt|;
specifier|private
specifier|final
name|IndexAugmentorFactory
name|augmentorFactory
decl_stmt|;
specifier|private
specifier|final
name|IndexTracker
name|indexTracker
decl_stmt|;
specifier|private
specifier|final
name|MountInfoProvider
name|mountInfoProvider
decl_stmt|;
specifier|private
specifier|final
name|ActiveDeletedBlobCollector
name|activeDeletedBlobCollector
decl_stmt|;
specifier|private
name|GarbageCollectableBlobStore
name|blobStore
decl_stmt|;
specifier|private
name|IndexingQueue
name|indexingQueue
decl_stmt|;
specifier|private
name|boolean
name|nrtIndexingEnabled
decl_stmt|;
specifier|private
name|LuceneIndexWriterConfig
name|writerConfig
init|=
operator|new
name|LuceneIndexWriterConfig
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LuceneIndexMBean
name|mbean
decl_stmt|;
specifier|private
specifier|final
name|StatisticsProvider
name|statisticsProvider
decl_stmt|;
comment|/**      * Number of indexed Lucene document that can be held in memory      * This ensures that for very large commit memory consumption      * is bounded      */
specifier|private
name|int
name|inMemoryDocsLimit
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.lucene.inMemoryDocsLimit"
argument_list|,
literal|500
argument_list|)
decl_stmt|;
specifier|public
name|LuceneIndexEditorProvider
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LuceneIndexEditorProvider
parameter_list|(
annotation|@
name|Nullable
name|IndexCopier
name|indexCopier
parameter_list|)
block|{
comment|//Disable the cache by default in ExtractedTextCache
name|this
argument_list|(
name|indexCopier
argument_list|,
operator|new
name|ExtractedTextCache
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LuceneIndexEditorProvider
parameter_list|(
annotation|@
name|Nullable
name|IndexCopier
name|indexCopier
parameter_list|,
name|ExtractedTextCache
name|extractedTextCache
parameter_list|)
block|{
name|this
argument_list|(
name|indexCopier
argument_list|,
name|extractedTextCache
argument_list|,
literal|null
argument_list|,
name|Mounts
operator|.
name|defaultMountInfoProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LuceneIndexEditorProvider
parameter_list|(
annotation|@
name|Nullable
name|IndexCopier
name|indexCopier
parameter_list|,
name|ExtractedTextCache
name|extractedTextCache
parameter_list|,
annotation|@
name|Nullable
name|IndexAugmentorFactory
name|augmentorFactory
parameter_list|,
name|MountInfoProvider
name|mountInfoProvider
parameter_list|)
block|{
name|this
argument_list|(
name|indexCopier
argument_list|,
literal|null
argument_list|,
name|extractedTextCache
argument_list|,
name|augmentorFactory
argument_list|,
name|mountInfoProvider
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LuceneIndexEditorProvider
parameter_list|(
annotation|@
name|Nullable
name|IndexCopier
name|indexCopier
parameter_list|,
annotation|@
name|Nullable
name|IndexTracker
name|indexTracker
parameter_list|,
name|ExtractedTextCache
name|extractedTextCache
parameter_list|,
annotation|@
name|Nullable
name|IndexAugmentorFactory
name|augmentorFactory
parameter_list|,
name|MountInfoProvider
name|mountInfoProvider
parameter_list|)
block|{
name|this
argument_list|(
name|indexCopier
argument_list|,
name|indexTracker
argument_list|,
name|extractedTextCache
argument_list|,
name|augmentorFactory
argument_list|,
name|mountInfoProvider
argument_list|,
name|ActiveDeletedBlobCollectorFactory
operator|.
name|NOOP
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LuceneIndexEditorProvider
parameter_list|(
annotation|@
name|Nullable
name|IndexCopier
name|indexCopier
parameter_list|,
annotation|@
name|Nullable
name|IndexTracker
name|indexTracker
parameter_list|,
name|ExtractedTextCache
name|extractedTextCache
parameter_list|,
annotation|@
name|Nullable
name|IndexAugmentorFactory
name|augmentorFactory
parameter_list|,
name|MountInfoProvider
name|mountInfoProvider
parameter_list|,
annotation|@
name|NotNull
name|ActiveDeletedBlobCollectorFactory
operator|.
name|ActiveDeletedBlobCollector
name|activeDeletedBlobCollector
parameter_list|,
annotation|@
name|Nullable
name|LuceneIndexMBean
name|mbean
parameter_list|,
annotation|@
name|Nullable
name|StatisticsProvider
name|statisticsProvider
parameter_list|)
block|{
name|this
operator|.
name|indexCopier
operator|=
name|indexCopier
expr_stmt|;
name|this
operator|.
name|indexTracker
operator|=
name|indexTracker
expr_stmt|;
name|this
operator|.
name|extractedTextCache
operator|=
name|extractedTextCache
operator|!=
literal|null
condition|?
name|extractedTextCache
else|:
operator|new
name|ExtractedTextCache
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|augmentorFactory
operator|=
name|augmentorFactory
expr_stmt|;
name|this
operator|.
name|mountInfoProvider
operator|=
name|checkNotNull
argument_list|(
name|mountInfoProvider
argument_list|)
expr_stmt|;
name|this
operator|.
name|activeDeletedBlobCollector
operator|=
name|activeDeletedBlobCollector
expr_stmt|;
name|this
operator|.
name|mbean
operator|=
name|mbean
expr_stmt|;
name|this
operator|.
name|statisticsProvider
operator|=
name|statisticsProvider
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|getIndexEditor
parameter_list|(
annotation|@
name|NotNull
name|String
name|type
parameter_list|,
annotation|@
name|NotNull
name|NodeBuilder
name|definition
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|root
parameter_list|,
annotation|@
name|NotNull
name|IndexUpdateCallback
name|callback
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|TYPE_LUCENE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|checkArgument
argument_list|(
name|callback
operator|instanceof
name|ContextAwareCallback
argument_list|,
literal|"callback instance not of type "
operator|+
literal|"ContextAwareCallback [%s]"
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|IndexingContext
name|indexingContext
init|=
operator|(
operator|(
name|ContextAwareCallback
operator|)
name|callback
operator|)
operator|.
name|getIndexingContext
argument_list|()
decl_stmt|;
name|BlobDeletionCallback
name|blobDeletionCallback
init|=
name|activeDeletedBlobCollector
operator|.
name|getBlobDeletionCallback
argument_list|()
decl_stmt|;
name|indexingContext
operator|.
name|registerIndexCommitCallback
argument_list|(
name|blobDeletionCallback
argument_list|)
expr_stmt|;
name|FulltextIndexWriterFactory
name|writerFactory
init|=
literal|null
decl_stmt|;
name|LuceneIndexDefinition
name|indexDefinition
init|=
literal|null
decl_stmt|;
name|boolean
name|asyncIndexing
init|=
literal|true
decl_stmt|;
name|String
name|indexPath
init|=
name|indexingContext
operator|.
name|getIndexPath
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|PropertyUpdateCallback
argument_list|>
name|callbacks
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|PropertyIndexUpdateCallback
name|propertyIndexUpdateCallback
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nrtIndexingEnabled
argument_list|()
operator|&&
operator|!
name|indexingContext
operator|.
name|isAsync
argument_list|()
operator|&&
name|IndexDefinition
operator|.
name|supportsSyncOrNRTIndexing
argument_list|(
name|definition
argument_list|)
condition|)
block|{
comment|//Would not participate in reindexing. Only interested in
comment|//incremental indexing
if|if
condition|(
name|indexingContext
operator|.
name|isReindexing
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|CommitContext
name|commitContext
init|=
name|getCommitContext
argument_list|(
name|indexingContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|commitContext
operator|==
literal|null
condition|)
block|{
comment|//Logically there should not be any commit without commit context. But
comment|//some initializer code does the commit with out it. So ignore such calls with
comment|//warning now
comment|//TODO Revisit use of warn level once all such cases are analyzed
name|log
operator|.
name|warn
argument_list|(
literal|"No CommitContext found for commit"
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|//TODO Also check if index has been done once
name|writerFactory
operator|=
operator|new
name|LocalIndexWriterFactory
argument_list|(
name|getDocumentHolder
argument_list|(
name|commitContext
argument_list|)
argument_list|,
name|indexPath
argument_list|)
expr_stmt|;
comment|//IndexDefinition from tracker might differ from one passed here for reindexing
comment|//case which should be fine. However reusing existing definition would avoid
comment|//creating definition instance for each commit as this gets executed for each commit
if|if
condition|(
name|indexTracker
operator|!=
literal|null
condition|)
block|{
name|indexDefinition
operator|=
name|indexTracker
operator|.
name|getIndexDefinition
argument_list|(
name|indexPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexDefinition
operator|!=
literal|null
operator|&&
operator|!
name|indexDefinition
operator|.
name|hasMatchingNodeTypeReg
argument_list|(
name|root
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Detected change in NodeType registry for index {}. Would not use "
operator|+
literal|"existing index definition"
argument_list|,
name|indexDefinition
operator|.
name|getIndexPath
argument_list|()
argument_list|)
expr_stmt|;
name|indexDefinition
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|indexDefinition
operator|==
literal|null
condition|)
block|{
name|indexDefinition
operator|=
name|LuceneIndexDefinition
operator|.
name|newBuilder
argument_list|(
name|root
argument_list|,
name|definition
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|indexPath
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|indexDefinition
operator|.
name|hasSyncPropertyDefinitions
argument_list|()
condition|)
block|{
name|propertyIndexUpdateCallback
operator|=
operator|new
name|PropertyIndexUpdateCallback
argument_list|(
name|indexPath
argument_list|,
name|definition
argument_list|,
name|root
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexTracker
operator|!=
literal|null
condition|)
block|{
name|PropertyQuery
name|query
init|=
operator|new
name|LuceneIndexPropertyQuery
argument_list|(
name|indexTracker
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
name|propertyIndexUpdateCallback
operator|.
name|getUniquenessConstraintValidator
argument_list|()
operator|.
name|setSecondStore
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Pass on a read only builder to ensure that nothing gets written
comment|//at all to NodeStore for local indexing.
comment|//TODO [hybrid] This would cause issue with Facets as for faceted fields
comment|//some stuff gets written to NodeBuilder. That logic should be refactored
comment|//to be moved to LuceneIndexWriter
name|definition
operator|=
operator|new
name|ReadOnlyBuilder
argument_list|(
name|definition
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|asyncIndexing
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|writerFactory
operator|==
literal|null
condition|)
block|{
name|writerFactory
operator|=
operator|new
name|DefaultIndexWriterFactory
argument_list|(
name|mountInfoProvider
argument_list|,
name|newDirectoryFactory
argument_list|(
name|blobDeletionCallback
argument_list|)
argument_list|,
name|writerConfig
argument_list|)
expr_stmt|;
block|}
name|LuceneIndexEditorContext
name|context
init|=
operator|new
name|LuceneIndexEditorContext
argument_list|(
name|root
argument_list|,
name|definition
argument_list|,
name|indexDefinition
argument_list|,
name|callback
argument_list|,
name|writerFactory
argument_list|,
name|extractedTextCache
argument_list|,
name|augmentorFactory
argument_list|,
name|indexingContext
argument_list|,
name|asyncIndexing
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyIndexUpdateCallback
operator|!=
literal|null
condition|)
block|{
name|callbacks
operator|.
name|add
argument_list|(
name|propertyIndexUpdateCallback
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mbean
operator|!=
literal|null
operator|&&
name|statisticsProvider
operator|!=
literal|null
condition|)
block|{
name|callbacks
operator|.
name|add
argument_list|(
operator|new
name|LuceneIndexStatsUpdateCallback
argument_list|(
name|indexPath
argument_list|,
name|mbean
argument_list|,
name|statisticsProvider
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|callbacks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CompositePropertyUpdateCallback
name|compositePropertyUpdateCallback
init|=
operator|new
name|CompositePropertyUpdateCallback
argument_list|(
name|callbacks
argument_list|)
decl_stmt|;
name|context
operator|.
name|setPropertyUpdateCallback
argument_list|(
name|compositePropertyUpdateCallback
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|LuceneIndexEditor
argument_list|(
name|context
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
name|IndexCopier
name|getIndexCopier
parameter_list|()
block|{
return|return
name|indexCopier
return|;
block|}
name|IndexingQueue
name|getIndexingQueue
parameter_list|()
block|{
return|return
name|indexingQueue
return|;
block|}
specifier|public
name|ExtractedTextCache
name|getExtractedTextCache
parameter_list|()
block|{
return|return
name|extractedTextCache
return|;
block|}
specifier|public
name|void
name|setInMemoryDocsLimit
parameter_list|(
name|int
name|inMemoryDocsLimit
parameter_list|)
block|{
name|this
operator|.
name|inMemoryDocsLimit
operator|=
name|inMemoryDocsLimit
expr_stmt|;
block|}
specifier|protected
name|DirectoryFactory
name|newDirectoryFactory
parameter_list|(
name|BlobDeletionCallback
name|blobDeletionCallback
parameter_list|)
block|{
return|return
operator|new
name|DefaultDirectoryFactory
argument_list|(
name|indexCopier
argument_list|,
name|blobStore
argument_list|,
name|blobDeletionCallback
argument_list|)
return|;
block|}
specifier|private
name|LuceneDocumentHolder
name|getDocumentHolder
parameter_list|(
name|CommitContext
name|commitContext
parameter_list|)
block|{
name|LuceneDocumentHolder
name|holder
init|=
operator|(
name|LuceneDocumentHolder
operator|)
name|commitContext
operator|.
name|get
argument_list|(
name|LuceneDocumentHolder
operator|.
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|holder
operator|==
literal|null
condition|)
block|{
name|holder
operator|=
operator|new
name|LuceneDocumentHolder
argument_list|(
name|indexingQueue
argument_list|,
name|inMemoryDocsLimit
argument_list|)
expr_stmt|;
name|commitContext
operator|.
name|set
argument_list|(
name|LuceneDocumentHolder
operator|.
name|NAME
argument_list|,
name|holder
argument_list|)
expr_stmt|;
block|}
return|return
name|holder
return|;
block|}
specifier|public
name|void
name|setBlobStore
parameter_list|(
annotation|@
name|Nullable
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|)
block|{
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
block|}
specifier|public
name|void
name|setIndexingQueue
parameter_list|(
name|IndexingQueue
name|indexingQueue
parameter_list|)
block|{
name|this
operator|.
name|indexingQueue
operator|=
name|indexingQueue
expr_stmt|;
name|this
operator|.
name|nrtIndexingEnabled
operator|=
name|indexingQueue
operator|!=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|setWriterConfig
parameter_list|(
name|LuceneIndexWriterConfig
name|writerConfig
parameter_list|)
block|{
name|this
operator|.
name|writerConfig
operator|=
name|writerConfig
expr_stmt|;
block|}
name|GarbageCollectableBlobStore
name|getBlobStore
parameter_list|()
block|{
return|return
name|blobStore
return|;
block|}
specifier|private
name|boolean
name|nrtIndexingEnabled
parameter_list|()
block|{
return|return
name|nrtIndexingEnabled
return|;
block|}
specifier|private
specifier|static
name|CommitContext
name|getCommitContext
parameter_list|(
name|IndexingContext
name|indexingContext
parameter_list|)
block|{
return|return
operator|(
name|CommitContext
operator|)
name|indexingContext
operator|.
name|getCommitInfo
argument_list|()
operator|.
name|getInfo
argument_list|()
operator|.
name|get
argument_list|(
name|CommitContext
operator|.
name|NAME
argument_list|)
return|;
block|}
block|}
end_class

end_unit

