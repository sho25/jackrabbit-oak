begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law  * or agreed to in writing, software distributed under the License is  * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the specific language  * governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|ChildNode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|ChildNodeJoinCondition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Column
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Comparison
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|DescendantNode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|DescendantNodeJoinCondition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|DynamicOperand
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|EquiJoinCondition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|FullTextSearch
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|FullTextSearchScore
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|JoinCondition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Length
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|LowerCase
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|NodeLocalName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|NodeName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Not
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Or
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|PropertyExistence
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|QueryObjectModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|QueryObjectModelFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|SameNode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|SameNodeJoinCondition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Selector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|StaticOperand
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|UpperCase
import|;
end_import

begin_comment
comment|/**  * The implementation of the corresponding JCR interface.  */
end_comment

begin_class
specifier|public
class|class
name|QueryObjectModelFactoryImpl
implements|implements
name|QueryObjectModelFactory
block|{
annotation|@
name|Override
specifier|public
name|AndImpl
name|and
parameter_list|(
name|Constraint
name|constraint1
parameter_list|,
name|Constraint
name|constraint2
parameter_list|)
block|{
return|return
operator|new
name|AndImpl
argument_list|(
operator|(
name|ConstraintImpl
operator|)
name|constraint1
argument_list|,
operator|(
name|ConstraintImpl
operator|)
name|constraint2
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|OrderingImpl
name|ascending
parameter_list|(
name|DynamicOperand
name|operand
parameter_list|)
block|{
return|return
operator|new
name|OrderingImpl
argument_list|(
operator|(
name|DynamicOperandImpl
operator|)
name|operand
argument_list|,
name|Order
operator|.
name|ASCENDING
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BindVariableValueImpl
name|bindVariable
parameter_list|(
name|String
name|bindVariableName
parameter_list|)
block|{
return|return
operator|new
name|BindVariableValueImpl
argument_list|(
name|bindVariableName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ChildNode
name|childNode
parameter_list|(
name|String
name|selectorName
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
operator|new
name|ChildNodeImpl
argument_list|(
name|selectorName
argument_list|,
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ChildNodeJoinCondition
name|childNodeJoinCondition
parameter_list|(
name|String
name|childSelectorName
parameter_list|,
name|String
name|parentSelectorName
parameter_list|)
block|{
return|return
operator|new
name|ChildNodeJoinConditionImpl
argument_list|(
name|childSelectorName
argument_list|,
name|parentSelectorName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Column
name|column
parameter_list|(
name|String
name|selectorName
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
return|return
operator|new
name|ColumnImpl
argument_list|(
name|selectorName
argument_list|,
name|propertyName
argument_list|,
name|columnName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Comparison
name|comparison
parameter_list|(
name|DynamicOperand
name|operand1
parameter_list|,
name|String
name|operator
parameter_list|,
name|StaticOperand
name|operand2
parameter_list|)
block|{
return|return
operator|new
name|ComparisonImpl
argument_list|(
operator|(
name|DynamicOperandImpl
operator|)
name|operand1
argument_list|,
name|Operator
operator|.
name|getOperatorByName
argument_list|(
name|operator
argument_list|)
argument_list|,
operator|(
name|StaticOperandImpl
operator|)
name|operand2
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DescendantNode
name|descendantNode
parameter_list|(
name|String
name|selectorName
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
operator|new
name|DescendantNodeImpl
argument_list|(
name|selectorName
argument_list|,
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DescendantNodeJoinCondition
name|descendantNodeJoinCondition
parameter_list|(
name|String
name|descendantSelectorName
parameter_list|,
name|String
name|ancestorSelectorName
parameter_list|)
block|{
return|return
operator|new
name|DescendantNodeJoinConditionImpl
argument_list|(
name|descendantSelectorName
argument_list|,
name|ancestorSelectorName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Ordering
name|descending
parameter_list|(
name|DynamicOperand
name|operand
parameter_list|)
block|{
return|return
operator|new
name|OrderingImpl
argument_list|(
operator|(
name|DynamicOperandImpl
operator|)
name|operand
argument_list|,
name|Order
operator|.
name|DESCENDING
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|EquiJoinCondition
name|equiJoinCondition
parameter_list|(
name|String
name|selector1Name
parameter_list|,
name|String
name|property1Name
parameter_list|,
name|String
name|selector2Name
parameter_list|,
name|String
name|property2Name
parameter_list|)
block|{
return|return
operator|new
name|EquiJoinConditionImpl
argument_list|(
name|selector1Name
argument_list|,
name|property1Name
argument_list|,
name|selector2Name
argument_list|,
name|property2Name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|FullTextSearch
name|fullTextSearch
parameter_list|(
name|String
name|selectorName
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|StaticOperand
name|fullTextSearchExpression
parameter_list|)
block|{
return|return
operator|new
name|FullTextSearchImpl
argument_list|(
name|selectorName
argument_list|,
name|propertyName
argument_list|,
operator|(
name|StaticOperandImpl
operator|)
name|fullTextSearchExpression
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|FullTextSearchScore
name|fullTextSearchScore
parameter_list|(
name|String
name|selectorName
parameter_list|)
block|{
return|return
operator|new
name|FullTextSearchScoreImpl
argument_list|(
name|selectorName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Join
name|join
parameter_list|(
name|Source
name|left
parameter_list|,
name|Source
name|right
parameter_list|,
name|String
name|joinType
parameter_list|,
name|JoinCondition
name|joinCondition
parameter_list|)
block|{
return|return
operator|new
name|JoinImpl
argument_list|(
operator|(
name|SourceImpl
operator|)
name|left
argument_list|,
operator|(
name|SourceImpl
operator|)
name|right
argument_list|,
name|JoinType
operator|.
name|getJoinTypeByName
argument_list|(
name|joinType
argument_list|)
argument_list|,
operator|(
name|JoinConditionImpl
operator|)
name|joinCondition
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Length
name|length
parameter_list|(
name|PropertyValue
name|propertyValue
parameter_list|)
block|{
return|return
operator|new
name|LengthImpl
argument_list|(
operator|(
name|PropertyValueImpl
operator|)
name|propertyValue
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Literal
name|literal
parameter_list|(
name|Value
name|literalValue
parameter_list|)
block|{
return|return
operator|new
name|LiteralImpl
argument_list|(
name|literalValue
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|LowerCase
name|lowerCase
parameter_list|(
name|DynamicOperand
name|operand
parameter_list|)
block|{
return|return
operator|new
name|LowerCaseImpl
argument_list|(
operator|(
name|DynamicOperandImpl
operator|)
name|operand
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeLocalName
name|nodeLocalName
parameter_list|(
name|String
name|selectorName
parameter_list|)
block|{
return|return
operator|new
name|NodeLocalNameImpl
argument_list|(
name|selectorName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeName
name|nodeName
parameter_list|(
name|String
name|selectorName
parameter_list|)
block|{
return|return
operator|new
name|NodeNameImpl
argument_list|(
name|selectorName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Not
name|not
parameter_list|(
name|Constraint
name|constraint
parameter_list|)
block|{
return|return
operator|new
name|NotImpl
argument_list|(
operator|(
name|ConstraintImpl
operator|)
name|constraint
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Or
name|or
parameter_list|(
name|Constraint
name|constraint1
parameter_list|,
name|Constraint
name|constraint2
parameter_list|)
block|{
return|return
operator|new
name|OrImpl
argument_list|(
operator|(
name|ConstraintImpl
operator|)
name|constraint1
argument_list|,
operator|(
name|ConstraintImpl
operator|)
name|constraint2
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyExistence
name|propertyExistence
parameter_list|(
name|String
name|selectorName
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
return|return
operator|new
name|PropertyExistenceImpl
argument_list|(
name|selectorName
argument_list|,
name|propertyName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyValue
name|propertyValue
parameter_list|(
name|String
name|selectorName
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
return|return
operator|new
name|PropertyValueImpl
argument_list|(
name|selectorName
argument_list|,
name|propertyName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SameNode
name|sameNode
parameter_list|(
name|String
name|selectorName
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
operator|new
name|SameNodeImpl
argument_list|(
name|selectorName
argument_list|,
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SameNodeJoinCondition
name|sameNodeJoinCondition
parameter_list|(
name|String
name|selector1Name
parameter_list|,
name|String
name|selector2Name
parameter_list|,
name|String
name|selector2Path
parameter_list|)
block|{
return|return
operator|new
name|SameNodeJoinConditionImpl
argument_list|(
name|selector1Name
argument_list|,
name|selector2Name
argument_list|,
name|selector2Path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Selector
name|selector
parameter_list|(
name|String
name|nodeTypeName
parameter_list|,
name|String
name|selectorName
parameter_list|)
block|{
return|return
operator|new
name|SelectorImpl
argument_list|(
name|nodeTypeName
argument_list|,
name|selectorName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|UpperCase
name|upperCase
parameter_list|(
name|DynamicOperand
name|operand
parameter_list|)
block|{
return|return
operator|new
name|UpperCaseImpl
argument_list|(
operator|(
name|DynamicOperandImpl
operator|)
name|operand
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryObjectModel
name|createQuery
parameter_list|(
name|Source
name|source
parameter_list|,
name|Constraint
name|constraint
parameter_list|,
name|Ordering
index|[]
name|orderings
parameter_list|,
name|Column
index|[]
name|columns
parameter_list|)
block|{
name|QueryObjectModelImpl
name|qom
init|=
operator|new
name|QueryObjectModelImpl
argument_list|(
name|source
argument_list|,
name|constraint
argument_list|,
name|orderings
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|qom
operator|.
name|bindVariables
argument_list|()
expr_stmt|;
return|return
name|qom
return|;
block|}
block|}
end_class

end_unit

