begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
operator|.
name|Token
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * This JSON tokenizer operates on a string as its input. For maximal performance  * it<em>does not</em> unescape JSON string values.  * Use {@link JsonValue#unescape(String)} to unescape the text of {@link Token}s  * of type {@link Type#STRING}.  *   * @see UnescapingJsonTokenizer  */
end_comment

begin_class
specifier|public
class|class
name|DefaultJsonTokenizer
extends|extends
name|JsonTokenizer
block|{
specifier|private
specifier|final
name|String
name|json
decl_stmt|;
specifier|private
name|int
name|pos
decl_stmt|;
comment|/**      * Create a tokenizer for the given input string      * @param json      */
specifier|public
name|DefaultJsonTokenizer
parameter_list|(
name|String
name|json
parameter_list|)
block|{
name|this
operator|.
name|json
operator|=
name|json
expr_stmt|;
block|}
comment|/**      * @see JsonTokenizer#JsonTokenizer(JsonTokenizer)      */
specifier|protected
name|DefaultJsonTokenizer
parameter_list|(
name|DefaultJsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|super
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
name|json
operator|=
name|tokenizer
operator|.
name|json
expr_stmt|;
name|pos
operator|=
name|tokenizer
operator|.
name|pos
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Token
name|nextToken
parameter_list|()
block|{
name|skipWhiteSpace
argument_list|()
expr_stmt|;
if|if
condition|(
name|pos
operator|>=
name|json
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
name|createToken
argument_list|(
name|Type
operator|.
name|EOF
argument_list|,
literal|""
argument_list|,
name|pos
argument_list|)
return|;
block|}
switch|switch
condition|(
name|json
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
condition|)
block|{
case|case
literal|'{'
case|:
return|return
name|createToken
argument_list|(
name|Type
operator|.
name|BEGIN_OBJECT
argument_list|,
literal|"{"
argument_list|,
name|pos
operator|++
argument_list|)
return|;
case|case
literal|'}'
case|:
return|return
name|createToken
argument_list|(
name|Type
operator|.
name|END_OBJECT
argument_list|,
literal|"}"
argument_list|,
name|pos
operator|++
argument_list|)
return|;
case|case
literal|'['
case|:
return|return
name|createToken
argument_list|(
name|Type
operator|.
name|BEGIN_ARRAY
argument_list|,
literal|"["
argument_list|,
name|pos
operator|++
argument_list|)
return|;
case|case
literal|']'
case|:
return|return
name|createToken
argument_list|(
name|Type
operator|.
name|END_ARRAY
argument_list|,
literal|"]"
argument_list|,
name|pos
operator|++
argument_list|)
return|;
case|case
literal|':'
case|:
return|return
name|createToken
argument_list|(
name|Type
operator|.
name|COLON
argument_list|,
literal|":"
argument_list|,
name|pos
operator|++
argument_list|)
return|;
case|case
literal|','
case|:
return|return
name|createToken
argument_list|(
name|Type
operator|.
name|COMMA
argument_list|,
literal|","
argument_list|,
name|pos
operator|++
argument_list|)
return|;
case|case
literal|'t'
case|:
return|return
name|readLiteral
argument_list|(
name|Type
operator|.
name|TRUE
argument_list|,
literal|"true"
argument_list|)
return|;
case|case
literal|'f'
case|:
return|return
name|readLiteral
argument_list|(
name|Type
operator|.
name|FALSE
argument_list|,
literal|"false"
argument_list|)
return|;
case|case
literal|'n'
case|:
return|return
name|readLiteral
argument_list|(
name|Type
operator|.
name|NULL
argument_list|,
literal|"null"
argument_list|)
return|;
case|case
literal|'"'
case|:
return|return
name|readString
argument_list|()
return|;
default|default:
return|return
name|isNumber
argument_list|()
condition|?
name|readNumber
argument_list|()
else|:
name|readUnknown
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|pos
parameter_list|()
block|{
return|return
name|peek
argument_list|()
operator|.
name|pos
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPos
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|currentToken
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|pos
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|currentToken
operator|==
literal|null
condition|?
literal|""
else|:
name|currentToken
operator|)
operator|+
literal|" "
operator|+
name|json
operator|.
name|substring
argument_list|(
name|pos
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DefaultJsonTokenizer
name|copy
parameter_list|()
block|{
return|return
operator|new
name|DefaultJsonTokenizer
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|//------------------------------------------< protected>---
comment|/**      * Advance {@link #pos()} until the current character is not a      * whitespace character.      */
specifier|protected
name|void
name|skipWhiteSpace
parameter_list|()
block|{
while|while
condition|(
name|pos
operator|<
name|json
operator|.
name|length
argument_list|()
operator|&&
name|Character
operator|.
name|isWhitespace
argument_list|(
name|json
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
argument_list|)
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
block|}
comment|/**      * Factory method for creating {@link Token}s      * @param type      * @param text      * @param pos      * @return a new token      */
specifier|protected
name|Token
name|createToken
parameter_list|(
name|Type
name|type
parameter_list|,
name|String
name|text
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
return|return
operator|new
name|Token
argument_list|(
name|type
argument_list|,
name|text
argument_list|,
name|pos
argument_list|)
return|;
block|}
comment|/**      * Read the literal {@code text} and create a token of the given {@code type}      * @param type      * @param text      * @return a new token      * @throws ParseException  if {@code text} cannot be read at the current position      */
specifier|protected
name|Token
name|readLiteral
parameter_list|(
name|Type
name|type
parameter_list|,
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|json
operator|.
name|substring
argument_list|(
name|pos
argument_list|)
operator|.
name|startsWith
argument_list|(
name|text
argument_list|)
condition|)
block|{
name|Token
name|token
init|=
name|createToken
argument_list|(
name|type
argument_list|,
name|text
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
return|return
name|token
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
name|pos
argument_list|,
literal|"Expected '"
operator|+
name|text
operator|+
literal|",' found: "
operator|+
name|excerpt
argument_list|(
name|json
argument_list|,
name|pos
argument_list|,
literal|40
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**      * Read a JSON string and create a {@link Token.Type#STRING} token.      * @return a new token      * @throws ParseException  if no string can be read at the current position      */
specifier|protected
name|Token
name|readString
parameter_list|()
block|{
name|int
name|i
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|boolean
name|even
init|=
literal|true
decl_stmt|;
comment|// starting at pos + 1, find index i of the first quote character in json which
comment|// is preceded by an even number of backslash characters
for|for
control|(
name|i
operator|=
name|pos
operator|+
literal|1
init|;
name|i
operator|<
name|json
operator|.
name|length
argument_list|()
operator|&&
operator|!
operator|(
name|found
operator|=
name|json
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'"'
operator|&&
name|even
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|even
operator|=
name|json
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
literal|'\\'
operator|||
operator|!
name|even
expr_stmt|;
block|}
if|if
condition|(
name|found
condition|)
block|{
name|Token
name|token
init|=
name|createToken
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|json
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|,
name|i
argument_list|)
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|pos
operator|=
name|i
operator|+
literal|1
expr_stmt|;
return|return
name|token
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
name|pos
argument_list|,
literal|"Expected string, found. "
operator|+
name|excerpt
argument_list|(
name|json
argument_list|,
name|pos
argument_list|,
literal|40
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Pattern
name|NUMBER_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\+|-)?(\\d+)((\\.)(\\d+))?(((e|E)(\\+|-)?)(\\d+))?"
argument_list|)
decl_stmt|;
comment|/**      * Read a JSON number and create a {@link Token.Type#NUMBER} token.      * @return a new token      * @throws ParseException  if no number can be read at the current position      */
specifier|protected
name|Token
name|readNumber
parameter_list|()
block|{
name|Matcher
name|matcher
init|=
name|NUMBER_PATTERN
operator|.
name|matcher
argument_list|(
name|json
operator|.
name|substring
argument_list|(
name|pos
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|lookingAt
argument_list|()
condition|)
block|{
name|Token
name|token
init|=
name|createToken
argument_list|(
name|Type
operator|.
name|NUMBER
argument_list|,
name|matcher
operator|.
name|group
argument_list|()
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|matcher
operator|.
name|end
argument_list|()
expr_stmt|;
return|return
name|token
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
name|pos
argument_list|,
literal|"Expected number, found. "
operator|+
name|excerpt
argument_list|(
name|json
argument_list|,
name|pos
argument_list|,
literal|40
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**      * Read from the current position until a new token starts and create a      * {@link Token.Type#UNKNOWN} token.      * @return a new token      */
specifier|protected
name|Token
name|readUnknown
parameter_list|()
block|{
name|int
name|start
init|=
name|pos
operator|++
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|json
operator|.
name|length
argument_list|()
operator|&&
literal|"{}[]:,tfn+-0123456789\" "
operator|.
name|indexOf
argument_list|(
name|json
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
return|return
operator|new
name|Token
argument_list|(
name|Type
operator|.
name|UNKNOWN
argument_list|,
name|json
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|pos
argument_list|)
argument_list|,
name|start
argument_list|)
return|;
block|}
comment|//------------------------------------------< private>---
specifier|private
name|boolean
name|isNumber
parameter_list|()
block|{
comment|// true if first character is a digit or a sign and second character is a digit
name|char
name|first
init|=
name|json
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
return|return
operator|!
operator|(
operator|!
name|Character
operator|.
name|isDigit
argument_list|(
name|first
argument_list|)
operator|&&
operator|(
literal|'+'
operator|!=
name|first
operator|&&
literal|'-'
operator|!=
name|first
operator|||
name|pos
operator|+
literal|1
operator|>=
name|json
operator|.
name|length
argument_list|()
operator|||
operator|!
name|Character
operator|.
name|isDigit
argument_list|(
name|json
operator|.
name|charAt
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
argument_list|)
operator|)
operator|)
return|;
block|}
specifier|private
specifier|static
name|String
name|excerpt
parameter_list|(
name|String
name|string
parameter_list|,
name|int
name|pos
parameter_list|,
name|int
name|len
parameter_list|)
block|{
return|return
name|string
operator|.
name|substring
argument_list|(
name|pos
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|string
operator|.
name|length
argument_list|()
argument_list|,
name|pos
operator|+
name|len
argument_list|)
argument_list|)
operator|+
literal|"..."
return|;
block|}
block|}
end_class

end_unit

