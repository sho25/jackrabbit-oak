begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * A simple CPU profiling tool similar to java -Xrunhprof.  */
end_comment

begin_class
specifier|public
class|class
name|Profiler
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|String
name|LINE_SEPARATOR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|,
literal|"\n"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_ELEMENTS
init|=
literal|1000
decl_stmt|;
specifier|public
name|int
name|interval
init|=
literal|50
decl_stmt|;
specifier|public
name|int
name|depth
init|=
literal|16
decl_stmt|;
specifier|public
name|boolean
name|paused
decl_stmt|;
name|String
index|[]
name|ignoreLines
init|=
name|arraySplit
argument_list|(
literal|""
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
index|[]
name|ignorePackages
init|=
name|arraySplit
argument_list|(
literal|"java."
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
index|[]
name|ignoreThreads
init|=
name|arraySplit
argument_list|(
literal|"java.lang.Thread.dumpThreads,"
operator|+
literal|"java.lang.Thread.getThreads,"
operator|+
literal|"java.net.PlainSocketImpl.socketAccept,"
operator|+
literal|"java.net.SocketInputStream.socketRead0,"
operator|+
literal|"java.net.SocketOutputStream.socketWrite0,"
operator|+
literal|"java.lang.UNIXProcess.waitForProcessExit,"
operator|+
literal|"java.lang.Object.wait,"
operator|+
literal|"java.lang.Thread.sleep,"
operator|+
literal|"sun.awt.windows.WToolkit.eventLoop,"
operator|+
literal|"sun.misc.Unsafe.park,"
operator|+
literal|"dalvik.system.VMStack.getThreadStackTrace,"
operator|+
literal|"dalvik.system.NativeStart.run"
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|volatile
name|boolean
name|stop
decl_stmt|;
name|int
name|total
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|counts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|packages
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|minCount
init|=
literal|1
decl_stmt|;
specifier|private
name|Thread
name|thread
decl_stmt|;
specifier|private
name|long
name|time
decl_stmt|;
comment|/**      * Start collecting profiling data.      */
specifier|public
name|void
name|startCollecting
parameter_list|()
block|{
name|thread
operator|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|,
literal|"Profiler"
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**      * Stop collecting.      */
specifier|public
name|void
name|stopCollecting
parameter_list|()
block|{
name|stop
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|thread
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|thread
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|stop
condition|)
block|{
try|try
block|{
name|tick
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
break|break;
block|}
block|}
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
block|}
specifier|private
name|void
name|tick
parameter_list|()
block|{
if|if
condition|(
name|interval
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|paused
condition|)
block|{
return|return;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|Map
argument_list|<
name|Thread
argument_list|,
name|StackTraceElement
index|[]
argument_list|>
name|map
init|=
name|Thread
operator|.
name|getAllStackTraces
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Thread
argument_list|,
name|StackTraceElement
index|[]
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Thread
name|t
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|getState
argument_list|()
operator|!=
name|Thread
operator|.
name|State
operator|.
name|RUNNABLE
condition|)
block|{
continue|continue;
block|}
name|StackTraceElement
index|[]
name|dump
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|dump
operator|==
literal|null
operator|||
name|dump
operator|.
name|length
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|startsWithAny
argument_list|(
name|dump
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|ignoreThreads
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// simple recursive calls are ignored
name|String
name|last
init|=
literal|null
decl_stmt|;
name|boolean
name|packageCounts
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|,
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dump
operator|.
name|length
operator|&&
name|j
operator|<
name|depth
condition|;
name|i
operator|++
control|)
block|{
name|String
name|el
init|=
name|dump
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|el
operator|.
name|equals
argument_list|(
name|last
argument_list|)
operator|&&
operator|!
name|startsWithAny
argument_list|(
name|el
argument_list|,
name|ignoreLines
argument_list|)
condition|)
block|{
name|last
operator|=
name|el
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"at "
argument_list|)
operator|.
name|append
argument_list|(
name|el
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|packageCounts
operator|&&
operator|!
name|startsWithAny
argument_list|(
name|el
argument_list|,
name|ignorePackages
argument_list|)
condition|)
block|{
name|packageCounts
operator|=
literal|true
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|index
operator|<
name|el
operator|.
name|length
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|char
name|c
init|=
name|el
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isUpperCase
argument_list|(
name|c
argument_list|)
operator|||
name|c
operator|==
literal|'('
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|index
operator|>
literal|0
operator|&&
name|el
operator|.
name|charAt
argument_list|(
name|index
operator|-
literal|1
argument_list|)
operator|==
literal|'.'
condition|)
block|{
name|index
operator|--
expr_stmt|;
block|}
name|String
name|packageName
init|=
name|el
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|increment
argument_list|(
name|packages
argument_list|,
name|packageName
argument_list|,
literal|0
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|index
operator|=
name|packageName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|packageName
operator|=
name|packageName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|increment
argument_list|(
name|packages
argument_list|,
name|packageName
operator|+
literal|".*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|buff
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|minCount
operator|=
name|increment
argument_list|(
name|counts
argument_list|,
name|buff
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|minCount
argument_list|)
expr_stmt|;
name|total
operator|++
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|boolean
name|startsWithAny
parameter_list|(
name|String
name|s
parameter_list|,
name|String
index|[]
name|prefixes
parameter_list|)
block|{
for|for
control|(
name|String
name|p
range|:
name|prefixes
control|)
block|{
if|if
condition|(
name|p
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|s
operator|.
name|startsWith
argument_list|(
name|p
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|int
name|increment
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
parameter_list|,
name|String
name|trace
parameter_list|,
name|int
name|minCount
parameter_list|)
block|{
name|Integer
name|oldCount
init|=
name|map
operator|.
name|get
argument_list|(
name|trace
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldCount
operator|==
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|trace
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|.
name|put
argument_list|(
name|trace
argument_list|,
name|oldCount
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|map
operator|.
name|size
argument_list|()
operator|>
name|MAX_ELEMENTS
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|ei
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ei
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|e
init|=
name|ei
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|<=
name|minCount
condition|)
block|{
name|ei
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|map
operator|.
name|size
argument_list|()
operator|>
name|MAX_ELEMENTS
condition|)
block|{
name|minCount
operator|++
expr_stmt|;
block|}
block|}
return|return
name|minCount
return|;
block|}
comment|/**      * Get the top stack traces.      *      * @param count the maximum number of stack traces      * @return the stack traces.      */
specifier|public
name|String
name|getTop
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|stopCollecting
argument_list|()
expr_stmt|;
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"Profiler Results"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
literal|"Package summary:"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|k
range|:
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|packages
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|int
name|percent
init|=
literal|100
operator|*
name|packages
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|/
name|Math
operator|.
name|max
argument_list|(
name|total
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|percent
operator|>=
literal|5
condition|)
block|{
if|if
condition|(
name|percent
operator|<
literal|10
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|percent
argument_list|)
operator|.
name|append
argument_list|(
literal|"%: "
argument_list|)
operator|.
name|append
argument_list|(
name|k
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
block|}
block|}
name|buff
operator|.
name|append
argument_list|(
name|LINE_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
literal|"Top "
argument_list|)
operator|.
name|append
argument_list|(
name|count
argument_list|)
operator|.
name|append
argument_list|(
literal|" stack trace(s) of "
argument_list|)
operator|.
name|append
argument_list|(
name|time
argument_list|)
operator|.
name|append
argument_list|(
literal|" ms "
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
if|if
condition|(
name|counts
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"(none)"
argument_list|)
expr_stmt|;
block|}
name|appendTop
argument_list|(
name|buff
argument_list|,
name|counts
argument_list|,
name|count
argument_list|,
name|total
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|appendTop
parameter_list|(
name|StringBuilder
name|buff
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|total
parameter_list|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|,
name|min
init|=
literal|0
init|;
condition|;
control|)
block|{
name|int
name|highest
init|=
literal|0
decl_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|best
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|el
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|el
operator|.
name|getValue
argument_list|()
operator|>
name|highest
operator|||
operator|(
name|el
operator|.
name|getValue
argument_list|()
operator|==
name|highest
operator|&&
name|el
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
operator|<
name|best
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
operator|)
condition|)
block|{
name|best
operator|=
name|el
expr_stmt|;
name|highest
operator|=
name|el
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|best
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|map
operator|.
name|remove
argument_list|(
name|best
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|x
operator|>=
name|count
condition|)
block|{
if|if
condition|(
name|best
operator|.
name|getValue
argument_list|()
operator|<
name|min
condition|)
block|{
break|break;
block|}
name|min
operator|=
name|best
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|int
name|c
init|=
name|best
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|percent
init|=
literal|100
operator|*
name|c
operator|/
name|Math
operator|.
name|max
argument_list|(
name|total
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|c
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|total
argument_list|)
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|percent
argument_list|)
operator|.
name|append
argument_list|(
literal|"%):"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|best
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Split a string into an array of strings using the given separator. A null      * string will result in a null array, and an empty string in a zero element      * array.      *      * @param s             the string to split      * @param separatorChar the separator character      * @param trim          whether each element should be trimmed      * @return the array list      */
specifier|public
specifier|static
name|String
index|[]
name|arraySplit
parameter_list|(
name|String
name|s
parameter_list|,
name|char
name|separatorChar
parameter_list|,
name|boolean
name|trim
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|(
name|s
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
name|separatorChar
condition|)
block|{
name|String
name|e
init|=
name|buff
operator|.
name|toString
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|trim
condition|?
name|e
operator|.
name|trim
argument_list|()
else|:
name|e
argument_list|)
expr_stmt|;
name|buff
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'\\'
operator|&&
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
operator|++
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buff
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|e
init|=
name|buff
operator|.
name|toString
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|trim
condition|?
name|e
operator|.
name|trim
argument_list|()
else|:
name|e
argument_list|)
expr_stmt|;
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[
name|list
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|list
operator|.
name|toArray
argument_list|(
name|array
argument_list|)
expr_stmt|;
return|return
name|array
return|;
block|}
block|}
end_class

end_unit

