begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FieldNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetsCollector
operator|.
name|MatchingDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetsConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|LabelAndValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|sortedset
operator|.
name|DefaultSortedSetDocValuesReaderState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|sortedset
operator|.
name|SortedSetDocValuesFacetCounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|sortedset
operator|.
name|SortedSetDocValuesReaderState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_comment
comment|/**  * ACL filtered version of {@link SortedSetDocValuesFacetCounts}  */
end_comment

begin_class
class|class
name|SecureSortedSetDocValuesFacetCounts
extends|extends
name|SortedSetDocValuesFacetCounts
block|{
specifier|private
specifier|final
name|FacetsCollector
name|facetsCollector
decl_stmt|;
specifier|private
specifier|final
name|Filter
name|filter
decl_stmt|;
specifier|private
specifier|final
name|IndexReader
name|reader
decl_stmt|;
specifier|private
specifier|final
name|SortedSetDocValuesReaderState
name|state
decl_stmt|;
specifier|private
name|FacetResult
name|facetResult
init|=
literal|null
decl_stmt|;
name|SecureSortedSetDocValuesFacetCounts
parameter_list|(
name|DefaultSortedSetDocValuesReaderState
name|state
parameter_list|,
name|FacetsCollector
name|facetsCollector
parameter_list|,
name|Filter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|state
argument_list|,
name|facetsCollector
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|state
operator|.
name|origReader
expr_stmt|;
name|this
operator|.
name|facetsCollector
operator|=
name|facetsCollector
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|FacetResult
name|getTopChildren
parameter_list|(
name|int
name|topN
parameter_list|,
name|String
name|dim
parameter_list|,
name|String
modifier|...
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|facetResult
operator|==
literal|null
condition|)
block|{
name|facetResult
operator|=
name|getTopChildren0
argument_list|(
name|topN
argument_list|,
name|dim
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|facetResult
return|;
block|}
specifier|private
name|FacetResult
name|getTopChildren0
parameter_list|(
name|int
name|topN
parameter_list|,
name|String
name|dim
parameter_list|,
name|String
modifier|...
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FacetResult
name|topChildren
init|=
name|super
operator|.
name|getTopChildren
argument_list|(
name|topN
argument_list|,
name|dim
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|topChildren
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|InaccessibleFacetCountManager
name|inaccessibleFacetCountManager
init|=
operator|new
name|InaccessibleFacetCountManager
argument_list|(
name|dim
argument_list|,
name|reader
argument_list|,
name|filter
argument_list|,
name|state
argument_list|,
name|facetsCollector
argument_list|,
name|topChildren
operator|.
name|labelValues
argument_list|)
decl_stmt|;
name|inaccessibleFacetCountManager
operator|.
name|filterFacets
argument_list|()
expr_stmt|;
name|LabelAndValue
index|[]
name|labelAndValues
init|=
name|inaccessibleFacetCountManager
operator|.
name|updateLabelAndValue
argument_list|()
decl_stmt|;
name|int
name|childCount
init|=
name|labelAndValues
operator|.
name|length
decl_stmt|;
name|Number
name|value
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LabelAndValue
name|lv
range|:
name|labelAndValues
control|)
block|{
name|value
operator|=
name|value
operator|.
name|longValue
argument_list|()
operator|+
name|lv
operator|.
name|value
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|FacetResult
argument_list|(
name|dim
argument_list|,
name|path
argument_list|,
name|value
argument_list|,
name|labelAndValues
argument_list|,
name|childCount
argument_list|)
return|;
block|}
specifier|static
class|class
name|InaccessibleFacetCountManager
block|{
specifier|private
specifier|final
name|String
name|dimension
decl_stmt|;
specifier|private
specifier|final
name|IndexReader
name|reader
decl_stmt|;
specifier|private
specifier|final
name|Filter
name|filter
decl_stmt|;
specifier|private
specifier|final
name|SortedSetDocValuesReaderState
name|state
decl_stmt|;
specifier|private
specifier|final
name|FacetsCollector
name|facetsCollector
decl_stmt|;
specifier|private
specifier|final
name|LabelAndValue
index|[]
name|labelAndValues
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|labelToIndexMap
decl_stmt|;
specifier|private
specifier|final
name|long
index|[]
name|inaccessibleCounts
decl_stmt|;
name|InaccessibleFacetCountManager
parameter_list|(
name|String
name|dimension
parameter_list|,
name|IndexReader
name|reader
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|SortedSetDocValuesReaderState
name|state
parameter_list|,
name|FacetsCollector
name|facetsCollector
parameter_list|,
name|LabelAndValue
index|[]
name|labelAndValues
parameter_list|)
block|{
name|this
operator|.
name|dimension
operator|=
name|dimension
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|facetsCollector
operator|=
name|facetsCollector
expr_stmt|;
name|this
operator|.
name|labelAndValues
operator|=
name|labelAndValues
expr_stmt|;
name|inaccessibleCounts
operator|=
operator|new
name|long
index|[
name|labelAndValues
operator|.
name|length
index|]
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|labelAndValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LabelAndValue
name|lv
init|=
name|labelAndValues
index|[
name|i
index|]
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|lv
operator|.
name|label
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|labelToIndexMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
name|void
name|filterFacets
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|MatchingDocs
argument_list|>
name|matchingDocsList
init|=
name|facetsCollector
operator|.
name|getMatchingDocs
argument_list|()
decl_stmt|;
for|for
control|(
name|MatchingDocs
name|matchingDocs
range|:
name|matchingDocsList
control|)
block|{
name|DocIdSet
name|bits
init|=
name|matchingDocs
operator|.
name|bits
decl_stmt|;
name|DocIdSetIterator
name|docIdSetIterator
init|=
name|bits
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|doc
init|=
name|docIdSetIterator
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
while|while
condition|(
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|int
name|docId
init|=
name|matchingDocs
operator|.
name|context
operator|.
name|docBase
operator|+
name|doc
decl_stmt|;
name|filterFacet
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|doc
operator|=
name|docIdSetIterator
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|filterFacet
parameter_list|(
name|int
name|docId
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|document
init|=
name|reader
operator|.
name|document
argument_list|(
name|docId
argument_list|)
decl_stmt|;
comment|// filter using doc values (avoiding requiring stored values)
if|if
condition|(
operator|!
name|filter
operator|.
name|isAccessible
argument_list|(
name|document
operator|.
name|getField
argument_list|(
name|FieldNames
operator|.
name|PATH
argument_list|)
operator|.
name|stringValue
argument_list|()
operator|+
literal|"/"
operator|+
name|dimension
argument_list|)
condition|)
block|{
name|SortedSetDocValues
name|docValues
init|=
name|state
operator|.
name|getDocValues
argument_list|()
decl_stmt|;
name|docValues
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|TermsEnum
name|termsEnum
init|=
name|docValues
operator|.
name|termsEnum
argument_list|()
decl_stmt|;
name|long
name|ord
init|=
name|docValues
operator|.
name|nextOrd
argument_list|()
decl_stmt|;
while|while
condition|(
name|ord
operator|!=
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
condition|)
block|{
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|ord
argument_list|)
expr_stmt|;
name|String
name|facetDVTerm
init|=
name|termsEnum
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|String
index|[]
name|facetDVDimPaths
init|=
name|FacetsConfig
operator|.
name|stringToPath
argument_list|(
name|facetDVTerm
argument_list|)
decl_stmt|;
comment|// first element is dimention name
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|facetDVDimPaths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|markInaccessbile
argument_list|(
name|facetDVDimPaths
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|ord
operator|=
name|docValues
operator|.
name|nextOrd
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|void
name|markInaccessbile
parameter_list|(
annotation|@
name|NotNull
name|String
name|label
parameter_list|)
block|{
name|inaccessibleCounts
index|[
name|labelToIndexMap
operator|.
name|get
argument_list|(
name|label
argument_list|)
index|]
operator|++
expr_stmt|;
block|}
name|LabelAndValue
index|[]
name|updateLabelAndValue
parameter_list|()
block|{
name|int
name|numZeros
init|=
literal|0
decl_stmt|;
name|LabelAndValue
index|[]
name|newValues
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|labelAndValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LabelAndValue
name|lv
init|=
name|labelAndValues
index|[
name|i
index|]
decl_stmt|;
name|long
name|inaccessibleCount
init|=
name|inaccessibleCounts
index|[
name|labelToIndexMap
operator|.
name|get
argument_list|(
name|lv
operator|.
name|label
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|inaccessibleCount
operator|>
literal|0
condition|)
block|{
name|long
name|newValue
init|=
name|lv
operator|.
name|value
operator|.
name|longValue
argument_list|()
operator|-
name|inaccessibleCount
decl_stmt|;
if|if
condition|(
name|newValue
operator|<=
literal|0
condition|)
block|{
name|newValue
operator|=
literal|0
expr_stmt|;
name|numZeros
operator|++
expr_stmt|;
block|}
name|labelAndValues
index|[
name|i
index|]
operator|=
operator|new
name|LabelAndValue
argument_list|(
name|lv
operator|.
name|label
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numZeros
operator|>
literal|0
condition|)
block|{
name|newValues
operator|=
operator|new
name|LabelAndValue
index|[
name|labelAndValues
operator|.
name|length
operator|-
name|numZeros
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LabelAndValue
name|lv
range|:
name|labelAndValues
control|)
block|{
if|if
condition|(
name|lv
operator|.
name|value
operator|.
name|longValue
argument_list|()
operator|>
literal|0
condition|)
block|{
name|newValues
index|[
name|i
operator|++
index|]
operator|=
name|lv
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|newValues
operator|=
name|labelAndValues
expr_stmt|;
block|}
return|return
name|newValues
return|;
block|}
block|}
block|}
end_class

end_unit

