begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|PropInfoTest
block|{
specifier|private
name|TextValue
name|mockTextValue
parameter_list|(
annotation|@
name|NotNull
name|String
name|value
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|mockTextValue
argument_list|(
name|value
argument_list|,
name|type
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|TextValue
name|mockTextValue
parameter_list|(
annotation|@
name|NotNull
name|String
name|value
parameter_list|,
name|int
name|type
parameter_list|,
name|boolean
name|throwOnDispose
parameter_list|)
throws|throws
name|Exception
block|{
name|Value
name|jcrValue
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Value
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|jcrValue
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|jcrValue
operator|.
name|getString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|TextValue
name|tv
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|TextValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|tv
operator|.
name|getString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|tv
operator|.
name|getValue
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jcrValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|throwOnDispose
condition|)
block|{
name|doThrow
argument_list|(
name|DisposeException
operator|.
name|class
argument_list|)
operator|.
name|when
argument_list|(
name|tv
argument_list|)
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
return|return
name|tv
return|;
block|}
specifier|private
name|PropertyDefinition
name|mockPropDef
parameter_list|(
name|int
name|type
parameter_list|,
name|boolean
name|isMultiple
parameter_list|)
block|{
name|PropertyDefinition
name|def
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|PropertyDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|def
operator|.
name|getRequiredType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|def
operator|.
name|isMultiple
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|isMultiple
argument_list|)
expr_stmt|;
return|return
name|def
return|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DisposeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDisposeThrowing
parameter_list|()
throws|throws
name|Exception
block|{
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"string"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
name|mockTextValue
argument_list|(
literal|"value"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|propInfo
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DisposeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDisposeMultipleThrowing
parameter_list|()
throws|throws
name|Exception
block|{
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"string"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|mockTextValue
argument_list|(
literal|"value"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|propInfo
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisposeMultiple
parameter_list|()
throws|throws
name|Exception
block|{
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"string"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|mockTextValue
argument_list|(
literal|"value"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|propInfo
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getTargetTypeRequiredTypeBoolean
parameter_list|()
throws|throws
name|Exception
block|{
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"undef"
argument_list|,
name|PropertyType
operator|.
name|UNDEFINED
argument_list|,
name|mockTextValue
argument_list|(
literal|"value"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|)
argument_list|)
decl_stmt|;
name|PropertyDefinition
name|def
init|=
name|mockPropDef
argument_list|(
name|PropertyType
operator|.
name|BOOLEAN
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|BOOLEAN
argument_list|,
name|propInfo
operator|.
name|getTargetType
argument_list|(
name|def
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getTargetTypeRequiredTypeUndefined
parameter_list|()
throws|throws
name|Exception
block|{
name|PropInfo
name|prop
init|=
operator|new
name|PropInfo
argument_list|(
literal|"long"
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|,
name|mockTextValue
argument_list|(
literal|"23"
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|)
argument_list|)
decl_stmt|;
name|PropInfo
name|undef
init|=
operator|new
name|PropInfo
argument_list|(
literal|"undef"
argument_list|,
name|PropertyType
operator|.
name|UNDEFINED
argument_list|,
name|mockTextValue
argument_list|(
literal|"value"
argument_list|,
name|PropertyType
operator|.
name|UNDEFINED
argument_list|)
argument_list|)
decl_stmt|;
name|PropertyDefinition
name|def
init|=
name|mockPropDef
argument_list|(
name|PropertyType
operator|.
name|UNDEFINED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|LONG
argument_list|,
name|prop
operator|.
name|getTargetType
argument_list|(
name|def
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|undef
operator|.
name|getTargetType
argument_list|(
name|def
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetName
parameter_list|()
throws|throws
name|Exception
block|{
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"string"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
name|mockTextValue
argument_list|(
literal|"value"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"string"
argument_list|,
name|propInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetType
parameter_list|()
throws|throws
name|Exception
block|{
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"path"
argument_list|,
name|PropertyType
operator|.
name|PATH
argument_list|,
name|mockTextValue
argument_list|(
literal|"/a/path"
argument_list|,
name|PropertyType
operator|.
name|PATH
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|PATH
argument_list|,
name|propInfo
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsUnknownMultiple
parameter_list|()
throws|throws
name|Exception
block|{
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"boolean"
argument_list|,
name|PropertyType
operator|.
name|BOOLEAN
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|mockTextValue
argument_list|(
literal|"false"
argument_list|,
name|PropertyType
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
argument_list|,
name|PropInfo
operator|.
name|MultipleStatus
operator|.
name|UNKNOWN
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|propInfo
operator|.
name|isUnknownMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|propInfo
operator|=
operator|new
name|PropInfo
argument_list|(
literal|"boolean"
argument_list|,
name|PropertyType
operator|.
name|BOOLEAN
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|mockTextValue
argument_list|(
literal|"false"
argument_list|,
name|PropertyType
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
argument_list|,
name|PropInfo
operator|.
name|MultipleStatus
operator|.
name|MULTIPLE
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|propInfo
operator|.
name|isUnknownMultiple
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsUnknownMultipleSingle
parameter_list|()
throws|throws
name|Exception
block|{
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"long"
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|,
name|mockTextValue
argument_list|(
literal|"24"
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|propInfo
operator|.
name|isUnknownMultiple
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsUnknownMultipleSingleList
parameter_list|()
throws|throws
name|Exception
block|{
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"long"
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|mockTextValue
argument_list|(
literal|"24"
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|propInfo
operator|.
name|isUnknownMultiple
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsUnknownMultipleSingleList2
parameter_list|()
throws|throws
name|Exception
block|{
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"long"
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|mockTextValue
argument_list|(
literal|"24"
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|)
argument_list|)
argument_list|,
name|PropInfo
operator|.
name|MultipleStatus
operator|.
name|MULTIPLE
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|propInfo
operator|.
name|isUnknownMultiple
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsUnknownMultipleEmpty
parameter_list|()
block|{
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"longs"
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|propInfo
operator|.
name|isUnknownMultiple
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsUnknownMultipleMultiple
parameter_list|()
throws|throws
name|Exception
block|{
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"longs"
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|mockTextValue
argument_list|(
literal|"24"
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|)
argument_list|,
name|mockTextValue
argument_list|(
literal|"44"
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|propInfo
operator|.
name|isUnknownMultiple
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTextValueSingle
parameter_list|()
throws|throws
name|Exception
block|{
name|TextValue
name|tv
init|=
name|mockTextValue
argument_list|(
literal|"value"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"string"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
name|tv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tv
argument_list|,
name|propInfo
operator|.
name|getTextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTextValueSingleList
parameter_list|()
throws|throws
name|Exception
block|{
name|TextValue
name|tv
init|=
name|mockTextValue
argument_list|(
literal|"value"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"string"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|tv
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tv
argument_list|,
name|propInfo
operator|.
name|getTextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetTextValueMultiple
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|TextValue
argument_list|>
name|tvs
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|mockTextValue
argument_list|(
literal|"24"
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|)
argument_list|,
name|mockTextValue
argument_list|(
literal|"35"
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|)
argument_list|)
decl_stmt|;
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"longs"
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|,
name|tvs
argument_list|)
decl_stmt|;
name|propInfo
operator|.
name|getTextValue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTextValuesSingle
parameter_list|()
throws|throws
name|Exception
block|{
name|TextValue
name|tv
init|=
name|mockTextValue
argument_list|(
literal|"value"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"string"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
name|tv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|tv
argument_list|)
argument_list|,
name|propInfo
operator|.
name|getTextValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTextValuesMultiple
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|TextValue
argument_list|>
name|tvs
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|mockTextValue
argument_list|(
literal|"24"
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|)
argument_list|)
decl_stmt|;
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"longs"
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|,
name|tvs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tvs
argument_list|,
name|propInfo
operator|.
name|getTextValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetValueSingle
parameter_list|()
throws|throws
name|Exception
block|{
name|TextValue
name|tv
init|=
name|mockTextValue
argument_list|(
literal|"value"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"string"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
name|tv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tv
operator|.
name|getValue
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|)
argument_list|,
name|propInfo
operator|.
name|getValue
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetValueSingleList
parameter_list|()
throws|throws
name|Exception
block|{
name|TextValue
name|tv
init|=
name|mockTextValue
argument_list|(
literal|"value"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"string"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|tv
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tv
operator|.
name|getValue
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|)
argument_list|,
name|propInfo
operator|.
name|getValue
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetValueMultiple
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|TextValue
argument_list|>
name|tvs
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|mockTextValue
argument_list|(
literal|"24"
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|)
argument_list|,
name|mockTextValue
argument_list|(
literal|"35"
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|)
argument_list|)
decl_stmt|;
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"longs"
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|,
name|tvs
argument_list|)
decl_stmt|;
name|propInfo
operator|.
name|getValue
argument_list|(
name|PropertyType
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetValuesSingle
parameter_list|()
throws|throws
name|Exception
block|{
name|TextValue
name|tv
init|=
name|mockTextValue
argument_list|(
literal|"value"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"string"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
name|tv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|tv
operator|.
name|getValue
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|,
name|propInfo
operator|.
name|getValues
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetValuesEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"longs"
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|propInfo
operator|.
name|getValues
argument_list|(
name|PropertyType
operator|.
name|LONG
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetValuesMultiple
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|TextValue
argument_list|>
name|tvs
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|mockTextValue
argument_list|(
literal|"24"
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|)
argument_list|)
decl_stmt|;
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"longs"
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|,
name|tvs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|tvs
argument_list|,
name|input
lambda|->
block|{
try|try
block|{
return|return
name|input
operator|.
name|getValue
argument_list|(
name|PropertyType
operator|.
name|LONG
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
argument_list|)
argument_list|,
name|propInfo
operator|.
name|getValues
argument_list|(
name|PropertyType
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAsPropertyStateSingle
parameter_list|()
throws|throws
name|Exception
block|{
name|TextValue
name|tv
init|=
name|mockTextValue
argument_list|(
literal|"value"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"string"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
name|tv
argument_list|)
decl_stmt|;
name|PropertyState
name|ps
init|=
name|propInfo
operator|.
name|asPropertyState
argument_list|(
name|mockPropDef
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|ps
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAsPropertyStateEmptyList
parameter_list|()
throws|throws
name|Exception
block|{
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"string"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|PropertyState
name|ps
init|=
name|propInfo
operator|.
name|asPropertyState
argument_list|(
name|mockPropDef
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ps
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAsPropertyStateSingleList
parameter_list|()
throws|throws
name|Exception
block|{
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"strings"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|mockTextValue
argument_list|(
literal|"a"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|,
name|PropInfo
operator|.
name|MultipleStatus
operator|.
name|MULTIPLE
argument_list|)
decl_stmt|;
name|PropertyState
name|ps
init|=
name|propInfo
operator|.
name|asPropertyState
argument_list|(
name|mockPropDef
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ps
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ps
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAsPropertyStateMultiples
parameter_list|()
throws|throws
name|Exception
block|{
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
literal|"strings"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|mockTextValue
argument_list|(
literal|"a"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|)
argument_list|,
name|mockTextValue
argument_list|(
literal|"b"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|PropertyState
name|ps
init|=
name|propInfo
operator|.
name|asPropertyState
argument_list|(
name|mockPropDef
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ps
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ps
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleStatus
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|PropInfo
operator|.
name|MultipleStatus
operator|.
name|UNKNOWN
argument_list|,
name|PropInfo
operator|.
name|MultipleStatus
operator|.
name|valueOf
argument_list|(
literal|"UNKNOWN"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropInfo
operator|.
name|MultipleStatus
operator|.
name|MULTIPLE
argument_list|,
name|PropInfo
operator|.
name|MultipleStatus
operator|.
name|valueOf
argument_list|(
literal|"MULTIPLE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|PropInfo
operator|.
name|MultipleStatus
index|[]
block|{
name|PropInfo
operator|.
name|MultipleStatus
operator|.
name|UNKNOWN
block|,
name|PropInfo
operator|.
name|MultipleStatus
operator|.
name|MULTIPLE
block|}
argument_list|,
name|PropInfo
operator|.
name|MultipleStatus
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|DisposeException
extends|extends
name|RuntimeException
block|{}
block|}
end_class

end_unit

