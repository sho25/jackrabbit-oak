begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentId
operator|.
name|isDataSegmentId
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCStatus
operator|.
name|CLEANUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCStatus
operator|.
name|ESTIMATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCStatus
operator|.
name|IDLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|PrintableBytes
operator|.
name|newPrintableBytes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Revisions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|CleanupContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|GCGeneration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|TarFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_class
class|class
name|DefaultGarbageCollectionStrategy
implements|implements
name|GarbageCollectionStrategy
block|{
specifier|private
specifier|final
name|CompactionStrategy
name|fullCompactionStrategy
init|=
operator|new
name|FullCompactionStrategy
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|CompactionStrategy
name|tailCompactionStrategy
init|=
operator|new
name|FallbackCompactionStrategy
argument_list|(
operator|new
name|TailCompactionStrategy
argument_list|()
argument_list|,
name|fullCompactionStrategy
argument_list|)
decl_stmt|;
specifier|private
name|GCGeneration
name|getGcGeneration
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|getRevisions
argument_list|()
operator|.
name|getHead
argument_list|()
operator|.
name|getSegmentId
argument_list|()
operator|.
name|getGcGeneration
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|collectGarbage
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|context
operator|.
name|getGCOptions
argument_list|()
operator|.
name|getGCType
argument_list|()
condition|)
block|{
case|case
name|FULL
case|:
name|collectFullGarbage
argument_list|(
name|context
argument_list|)
expr_stmt|;
break|break;
case|case
name|TAIL
case|:
name|collectTailGarbage
argument_list|(
name|context
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Invalid GC type"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|collectFullGarbage
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|run
argument_list|(
name|context
argument_list|,
literal|true
argument_list|,
name|this
operator|::
name|compactFull
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|collectTailGarbage
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|run
argument_list|(
name|context
argument_list|,
literal|false
argument_list|,
name|this
operator|::
name|compactTail
argument_list|)
expr_stmt|;
block|}
specifier|private
interface|interface
name|Compactor
block|{
name|CompactionResult
name|compact
parameter_list|(
name|Context
name|contex
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|private
name|void
name|run
parameter_list|(
name|Context
name|context
parameter_list|,
name|boolean
name|full
parameter_list|,
name|Compactor
name|compact
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"started"
argument_list|)
expr_stmt|;
name|long
name|dt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|context
operator|.
name|getLastSuccessfulGC
argument_list|()
decl_stmt|;
if|if
condition|(
name|dt
operator|<
name|context
operator|.
name|getGCBackOff
argument_list|()
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|skipped
argument_list|(
literal|"skipping garbage collection as it already ran less than {} hours ago ({} s)."
argument_list|,
name|context
operator|.
name|getGCBackOff
argument_list|()
operator|/
literal|3600000
argument_list|,
name|dt
operator|/
literal|1000
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|sufficientEstimatedGain
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getGCOptions
argument_list|()
operator|.
name|isEstimationDisabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"estimation skipped because it was explicitly disabled"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|getGCOptions
argument_list|()
operator|.
name|isPaused
argument_list|()
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"estimation skipped because compaction is paused"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"estimation started"
argument_list|)
expr_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|updateStatus
argument_list|(
name|ESTIMATION
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
name|PrintableStopwatch
name|watch
init|=
name|PrintableStopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|GCEstimationResult
name|estimation
init|=
name|estimateCompactionGain
argument_list|(
name|context
argument_list|,
name|full
argument_list|)
decl_stmt|;
name|sufficientEstimatedGain
operator|=
name|estimation
operator|.
name|isGcNeeded
argument_list|()
expr_stmt|;
name|String
name|gcLog
init|=
name|estimation
operator|.
name|getGcLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|sufficientEstimatedGain
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"estimation completed in {}. {}"
argument_list|,
name|watch
argument_list|,
name|gcLog
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|skipped
argument_list|(
literal|"estimation completed in {}. {}"
argument_list|,
name|watch
argument_list|,
name|gcLog
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sufficientEstimatedGain
condition|)
block|{
try|try
init|(
name|GCMemoryBarrier
name|ignored
init|=
operator|new
name|GCMemoryBarrier
argument_list|(
name|context
operator|.
name|getSufficientMemory
argument_list|()
argument_list|,
name|context
operator|.
name|getGCListener
argument_list|()
argument_list|,
name|context
operator|.
name|getGCOptions
argument_list|()
argument_list|)
init|)
block|{
if|if
condition|(
name|context
operator|.
name|getGCOptions
argument_list|()
operator|.
name|isPaused
argument_list|()
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|skipped
argument_list|(
literal|"compaction paused"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|context
operator|.
name|getSufficientMemory
argument_list|()
operator|.
name|get
argument_list|()
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|skipped
argument_list|(
literal|"compaction skipped. Not enough memory"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CompactionResult
name|compactionResult
init|=
name|compact
operator|.
name|compact
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|compactionResult
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|context
operator|.
name|getSuccessfulGarbageCollectionListener
argument_list|()
operator|.
name|onSuccessfulGarbageCollection
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"cleaning up after failed compaction"
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|getFileReaper
argument_list|()
operator|.
name|add
argument_list|(
name|cleanup
argument_list|(
name|context
argument_list|,
name|compactionResult
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|context
operator|.
name|getCompactionMonitor
argument_list|()
operator|.
name|finished
argument_list|()
expr_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|updateStatus
argument_list|(
name|IDLE
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|CompactionStrategy
operator|.
name|Context
name|newCompactionStrategyContext
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
return|return
operator|new
name|CompactionStrategy
operator|.
name|Context
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SegmentTracker
name|getSegmentTracker
parameter_list|()
block|{
return|return
name|context
operator|.
name|getSegmentTracker
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|GCListener
name|getGCListener
parameter_list|()
block|{
return|return
name|context
operator|.
name|getGCListener
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|GCJournal
name|getGCJournal
parameter_list|()
block|{
return|return
name|context
operator|.
name|getGCJournal
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SegmentGCOptions
name|getGCOptions
parameter_list|()
block|{
return|return
name|context
operator|.
name|getGCOptions
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|GCNodeWriteMonitor
name|getCompactionMonitor
parameter_list|()
block|{
return|return
name|context
operator|.
name|getCompactionMonitor
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SegmentReader
name|getSegmentReader
parameter_list|()
block|{
return|return
name|context
operator|.
name|getSegmentReader
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SegmentWriterFactory
name|getSegmentWriterFactory
parameter_list|()
block|{
return|return
name|context
operator|.
name|getSegmentWriterFactory
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Revisions
name|getRevisions
parameter_list|()
block|{
return|return
name|context
operator|.
name|getRevisions
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|TarFiles
name|getTarFiles
parameter_list|()
block|{
return|return
name|context
operator|.
name|getTarFiles
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|BlobStore
name|getBlobStore
parameter_list|()
block|{
return|return
name|context
operator|.
name|getBlobStore
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CancelCompactionSupplier
name|getCanceller
parameter_list|()
block|{
return|return
name|context
operator|.
name|getCanceller
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getGCCount
parameter_list|()
block|{
return|return
name|context
operator|.
name|getGCCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SuccessfulCompactionListener
name|getSuccessfulCompactionListener
parameter_list|()
block|{
return|return
name|context
operator|.
name|getSuccessfulCompactionListener
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Flusher
name|getFlusher
parameter_list|()
block|{
return|return
name|context
operator|.
name|getFlusher
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|CompactionResult
name|compactFull
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
return|return
name|fullCompactionStrategy
operator|.
name|compact
argument_list|(
name|newCompactionStrategyContext
argument_list|(
name|context
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|CompactionResult
name|compactTail
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
return|return
name|tailCompactionStrategy
operator|.
name|compact
argument_list|(
name|newCompactionStrategyContext
argument_list|(
name|context
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|GCEstimationResult
name|estimateCompactionGain
parameter_list|(
name|Context
name|context
parameter_list|,
name|boolean
name|full
parameter_list|)
block|{
return|return
operator|new
name|SizeDeltaGcEstimation
argument_list|(
name|context
operator|.
name|getGCOptions
argument_list|()
operator|.
name|getGcSizeDeltaEstimation
argument_list|()
argument_list|,
name|context
operator|.
name|getGCJournal
argument_list|()
argument_list|,
name|context
operator|.
name|getTarFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|full
argument_list|)
operator|.
name|estimate
argument_list|()
return|;
block|}
specifier|private
name|long
name|size
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|getTarFiles
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|List
argument_list|<
name|String
argument_list|>
name|cleanup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|cleanup
argument_list|(
name|context
argument_list|,
name|CompactionResult
operator|.
name|skipped
argument_list|(
name|context
operator|.
name|getLastCompactionType
argument_list|()
argument_list|,
name|getGcGeneration
argument_list|(
name|context
argument_list|)
argument_list|,
name|context
operator|.
name|getGCOptions
argument_list|()
argument_list|,
name|context
operator|.
name|getRevisions
argument_list|()
operator|.
name|getHead
argument_list|()
argument_list|,
name|context
operator|.
name|getGCCount
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|cleanup
parameter_list|(
name|Context
name|context
parameter_list|,
name|CompactionResult
name|compactionResult
parameter_list|)
throws|throws
name|IOException
block|{
name|PrintableStopwatch
name|watch
init|=
name|PrintableStopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"cleanup started using reclaimer {}"
argument_list|,
name|compactionResult
operator|.
name|reclaimer
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|updateStatus
argument_list|(
name|CLEANUP
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|getSegmentCache
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Suggest to the JVM that now would be a good time
comment|// to clear stale weak references in the SegmentTracker
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|TarFiles
operator|.
name|CleanupResult
name|cleanupResult
init|=
name|context
operator|.
name|getTarFiles
argument_list|()
operator|.
name|cleanup
argument_list|(
name|newCleanupContext
argument_list|(
name|context
argument_list|,
name|compactionResult
operator|.
name|reclaimer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cleanupResult
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"cleanup interrupted"
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|getSegmentTracker
argument_list|()
operator|.
name|clearSegmentIdTables
argument_list|(
name|cleanupResult
operator|.
name|getReclaimedSegmentIds
argument_list|()
argument_list|,
name|compactionResult
operator|.
name|gcInfo
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"cleanup marking files for deletion: {}"
argument_list|,
name|toFileNames
argument_list|(
name|cleanupResult
operator|.
name|getRemovableFiles
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|finalSize
init|=
name|size
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|long
name|reclaimedSize
init|=
name|cleanupResult
operator|.
name|getReclaimedSize
argument_list|()
decl_stmt|;
name|context
operator|.
name|getFileStoreStats
argument_list|()
operator|.
name|reclaimed
argument_list|(
name|reclaimedSize
argument_list|)
expr_stmt|;
name|context
operator|.
name|getGCJournal
argument_list|()
operator|.
name|persist
argument_list|(
name|reclaimedSize
argument_list|,
name|finalSize
argument_list|,
name|getGcGeneration
argument_list|(
name|context
argument_list|)
argument_list|,
name|context
operator|.
name|getCompactionMonitor
argument_list|()
operator|.
name|getCompactedNodes
argument_list|()
argument_list|,
name|compactionResult
operator|.
name|getCompactedRootId
argument_list|()
operator|.
name|toString10
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|cleaned
argument_list|(
name|reclaimedSize
argument_list|,
name|finalSize
argument_list|)
expr_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"cleanup completed in {}. Post cleanup size is {} and space reclaimed {}."
argument_list|,
name|watch
argument_list|,
name|newPrintableBytes
argument_list|(
name|finalSize
argument_list|)
argument_list|,
name|newPrintableBytes
argument_list|(
name|reclaimedSize
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cleanupResult
operator|.
name|getRemovableFiles
argument_list|()
return|;
block|}
specifier|private
name|CleanupContext
name|newCleanupContext
parameter_list|(
name|Context
name|context
parameter_list|,
name|Predicate
argument_list|<
name|GCGeneration
argument_list|>
name|old
parameter_list|)
block|{
return|return
operator|new
name|CleanupContext
argument_list|()
block|{
specifier|private
name|boolean
name|isUnreferencedBulkSegment
parameter_list|(
name|UUID
name|id
parameter_list|,
name|boolean
name|referenced
parameter_list|)
block|{
return|return
operator|!
name|isDataSegmentId
argument_list|(
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
operator|&&
operator|!
name|referenced
return|;
block|}
specifier|private
name|boolean
name|isOldDataSegment
parameter_list|(
name|UUID
name|id
parameter_list|,
name|GCGeneration
name|generation
parameter_list|)
block|{
return|return
name|isDataSegmentId
argument_list|(
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
operator|&&
name|old
operator|.
name|apply
argument_list|(
name|generation
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|UUID
argument_list|>
name|initialReferences
parameter_list|()
block|{
name|Set
argument_list|<
name|UUID
argument_list|>
name|references
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|SegmentId
name|id
range|:
name|context
operator|.
name|getSegmentTracker
argument_list|()
operator|.
name|getReferencedSegmentIds
argument_list|()
control|)
block|{
if|if
condition|(
name|id
operator|.
name|isBulkSegmentId
argument_list|()
condition|)
block|{
name|references
operator|.
name|add
argument_list|(
name|id
operator|.
name|asUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|references
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|shouldReclaim
parameter_list|(
name|UUID
name|id
parameter_list|,
name|GCGeneration
name|generation
parameter_list|,
name|boolean
name|referenced
parameter_list|)
block|{
return|return
name|isUnreferencedBulkSegment
argument_list|(
name|id
argument_list|,
name|referenced
argument_list|)
operator|||
name|isOldDataSegment
argument_list|(
name|id
argument_list|,
name|generation
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|shouldFollow
parameter_list|(
name|UUID
name|from
parameter_list|,
name|UUID
name|to
parameter_list|)
block|{
return|return
operator|!
name|isDataSegmentId
argument_list|(
name|to
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|private
name|String
name|toFileNames
parameter_list|(
annotation|@
name|Nonnull
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|)
block|{
if|if
condition|(
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|"none"
return|;
block|}
else|else
block|{
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|files
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

