begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tika
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteSource
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_class
class|class
name|BinaryResource
block|{
specifier|private
specifier|final
name|ByteSource
name|byteSource
decl_stmt|;
specifier|private
specifier|final
name|String
name|mimeType
decl_stmt|;
specifier|private
specifier|final
name|String
name|encoding
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|String
name|blobId
decl_stmt|;
specifier|public
name|BinaryResource
parameter_list|(
name|ByteSource
name|byteSource
parameter_list|,
annotation|@
name|Nullable
name|String
name|mimeType
parameter_list|,
annotation|@
name|Nullable
name|String
name|encoding
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|blobId
parameter_list|)
block|{
name|this
operator|.
name|byteSource
operator|=
name|checkNotNull
argument_list|(
name|byteSource
argument_list|,
literal|"ByteSource must be provided"
argument_list|)
expr_stmt|;
name|this
operator|.
name|mimeType
operator|=
name|mimeType
expr_stmt|;
name|this
operator|.
name|encoding
operator|=
name|encoding
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|checkNotNull
argument_list|(
name|path
argument_list|,
literal|"Path must be provided"
argument_list|)
expr_stmt|;
name|this
operator|.
name|blobId
operator|=
name|checkNotNull
argument_list|(
name|blobId
argument_list|,
literal|"BlobId must be specified"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ByteSource
name|getByteSource
parameter_list|()
block|{
return|return
name|byteSource
return|;
block|}
annotation|@
name|CheckForNull
specifier|public
name|String
name|getMimeType
parameter_list|()
block|{
return|return
name|mimeType
return|;
block|}
annotation|@
name|CheckForNull
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
return|return
name|encoding
return|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
specifier|public
name|String
name|getBlobId
parameter_list|()
block|{
return|return
name|blobId
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|path
return|;
block|}
block|}
end_class

end_unit

