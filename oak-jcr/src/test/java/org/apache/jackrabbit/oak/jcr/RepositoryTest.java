begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|GuestCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|InvalidItemStateException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceRegistry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NoSuchWorkspaceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|ObservationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|RepositoryTest
extends|extends
name|AbstractRepositoryTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_NODE
init|=
literal|"test_node"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_PATH
init|=
literal|'/'
operator|+
name|TEST_NODE
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
name|ValueFactory
name|valueFactory
init|=
name|session
operator|.
name|getValueFactory
argument_list|()
decl_stmt|;
try|try
block|{
name|Node
name|root
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Node
name|foo
init|=
name|root
operator|.
name|addNode
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|foo
operator|.
name|setProperty
argument_list|(
literal|"stringProp"
argument_list|,
literal|"stringVal"
argument_list|)
expr_stmt|;
name|foo
operator|.
name|setProperty
argument_list|(
literal|"intProp"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|foo
operator|.
name|setProperty
argument_list|(
literal|"mvProp"
argument_list|,
operator|new
name|Value
index|[]
block|{
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|1
argument_list|)
block|,
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|2
argument_list|)
block|,
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|3
argument_list|)
block|,             }
argument_list|)
expr_stmt|;
name|root
operator|.
name|addNode
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|root
operator|.
name|addNode
argument_list|(
name|TEST_NODE
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|createRepository
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Repository
name|repository
init|=
name|getRepository
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|login
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|assertNotNull
argument_list|(
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchWorkspaceException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|loginInvalidWorkspace
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Repository
name|repository
init|=
name|getRepository
argument_list|()
decl_stmt|;
name|repository
operator|.
name|login
argument_list|(
operator|new
name|GuestCredentials
argument_list|()
argument_list|,
literal|"invalid"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"WIP"
argument_list|)
comment|// TODO implement workspace management
annotation|@
name|Test
specifier|public
name|void
name|getWorkspaceNames
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
index|[]
name|workspaces
init|=
name|getSession
argument_list|()
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getAccessibleWorkspaceNames
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|asList
argument_list|(
name|workspaces
argument_list|)
operator|.
name|containsAll
argument_list|(
name|names
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|containsAll
argument_list|(
name|asList
argument_list|(
name|workspaces
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"WIP"
argument_list|)
comment|// TODO implement workspace management
annotation|@
name|Test
specifier|public
name|void
name|createDeleteWorkspace
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|getSession
argument_list|()
operator|.
name|getWorkspace
argument_list|()
operator|.
name|createWorkspace
argument_list|(
literal|"new"
argument_list|)
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|String
index|[]
name|workspaces
init|=
name|session2
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getAccessibleWorkspaceNames
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|asList
argument_list|(
name|workspaces
argument_list|)
operator|.
name|contains
argument_list|(
literal|"new"
argument_list|)
argument_list|)
expr_stmt|;
name|Session
name|session3
init|=
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
literal|"new"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"new"
argument_list|,
name|session3
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|session3
operator|.
name|logout
argument_list|()
expr_stmt|;
name|session2
operator|.
name|getWorkspace
argument_list|()
operator|.
name|deleteWorkspace
argument_list|(
literal|"new"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
name|Session
name|session4
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|String
index|[]
name|workspaces
init|=
name|session4
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getAccessibleWorkspaceNames
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|asList
argument_list|(
name|workspaces
argument_list|)
operator|.
name|contains
argument_list|(
literal|"new"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session4
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|getRoot
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|root
init|=
name|getSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|root
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|root
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getRootFromPath
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|root
init|=
name|getNode
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|root
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|root
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getNode
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|node
init|=
name|getNode
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|node
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/foo"
argument_list|,
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getNodeByIdentifier
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|node
init|=
name|getNode
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|node
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|Node
name|node2
init|=
name|getSession
argument_list|()
operator|.
name|getNodeByIdentifier
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|isSame
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getNodeFromNode
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|root
init|=
name|getNode
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|root
operator|.
name|getNode
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|node
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/foo"
argument_list|,
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|nodeAgain
init|=
name|getNode
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|isSame
argument_list|(
name|nodeAgain
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getNodes
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|nodeNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"added"
argument_list|)
expr_stmt|;
name|add
parameter_list|(
name|TEST_NODE
parameter_list|)
constructor_decl|;
block|}
block|}
decl_stmt|;
name|Node
name|root
init|=
name|getNode
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|root
operator|.
name|addNode
argument_list|(
literal|"added"
argument_list|)
expr_stmt|;
comment|// transiently added
name|root
operator|.
name|getNode
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// transiently removed
name|root
operator|.
name|getNode
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// transiently removed and...
name|root
operator|.
name|addNode
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
comment|// ... added again
name|NodeIterator
name|nodes
init|=
name|root
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|int
name|expected
init|=
literal|3
operator|+
operator|(
name|root
operator|.
name|hasNode
argument_list|(
literal|"jcr:system"
argument_list|)
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|nodes
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|nodes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|nodes
operator|.
name|nextNode
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
literal|"jcr:system"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|nodeNames
operator|.
name|remove
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|nodeNames
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getProperties
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|propertyNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
literal|"intProp"
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"mvProp"
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"added"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
literal|"added"
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"42"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Node
name|node
init|=
name|getNode
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"added"
argument_list|,
literal|"added"
argument_list|)
expr_stmt|;
comment|// transiently added
name|node
operator|.
name|getProperty
argument_list|(
literal|"stringProp"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// transiently removed
name|node
operator|.
name|getProperty
argument_list|(
literal|"intProp"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// transiently removed...
name|node
operator|.
name|setProperty
argument_list|(
literal|"intProp"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
comment|// ...and added again
name|PropertyIterator
name|properties
init|=
name|node
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|properties
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|properties
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Property
name|p
init|=
name|properties
operator|.
name|nextProperty
argument_list|()
decl_stmt|;
if|if
condition|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|assertTrue
argument_list|(
name|propertyNames
operator|.
name|remove
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|isMultiple
argument_list|()
condition|)
block|{
for|for
control|(
name|Value
name|v
range|:
name|p
operator|.
name|getValues
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|values
operator|.
name|remove
argument_list|(
name|v
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|values
operator|.
name|remove
argument_list|(
name|p
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|propertyNames
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|values
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PathNotFoundException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|getNonExistingNode
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|getNode
argument_list|(
literal|"/qoo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getProperty
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Property
name|property
init|=
name|getProperty
argument_list|(
literal|"/foo/stringProp"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|property
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"stringProp"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/foo/stringProp"
argument_list|,
name|property
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Value
name|value
init|=
name|property
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|value
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"stringVal"
argument_list|,
name|value
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPropertyFromNode
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|node
init|=
name|getNode
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|Property
name|property
init|=
name|node
operator|.
name|getProperty
argument_list|(
literal|"stringProp"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|property
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"stringProp"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/foo/stringProp"
argument_list|,
name|property
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Value
name|value
init|=
name|property
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|value
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"stringVal"
argument_list|,
name|value
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|Property
name|propertyAgain
init|=
name|getProperty
argument_list|(
literal|"/foo/stringProp"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|property
operator|.
name|isSame
argument_list|(
name|propertyAgain
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addNode
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|getSession
argument_list|()
decl_stmt|;
name|String
name|newNode
init|=
name|TEST_PATH
operator|+
literal|"/new"
decl_stmt|;
name|assertFalse
argument_list|(
name|session
operator|.
name|nodeExists
argument_list|(
name|newNode
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|node
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Node
name|added
init|=
name|node
operator|.
name|addNode
argument_list|(
literal|"new"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|node
operator|.
name|isNew
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|added
operator|.
name|isNew
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|added
operator|.
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
name|session2
operator|.
name|nodeExists
argument_list|(
name|newNode
argument_list|)
argument_list|)
expr_stmt|;
name|added
operator|=
name|session2
operator|.
name|getNode
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|added
operator|.
name|isNew
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|added
operator|.
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addNodeWithSpecialChars
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|getSession
argument_list|()
decl_stmt|;
name|String
name|nodeName
init|=
literal|"foo{"
decl_stmt|;
name|String
name|newNode
init|=
name|TEST_PATH
operator|+
literal|'/'
operator|+
name|nodeName
decl_stmt|;
name|assertFalse
argument_list|(
name|session
operator|.
name|nodeExists
argument_list|(
name|newNode
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|node
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|node
operator|.
name|addNode
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
name|session2
operator|.
name|nodeExists
argument_list|(
name|newNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addNodeWithNodeType
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|getSession
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|node
operator|.
name|addNode
argument_list|(
literal|"new"
argument_list|,
literal|"nt:folder"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addNodeToRootNode
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|getSession
argument_list|()
decl_stmt|;
name|Node
name|root
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|newNode
init|=
literal|"newNodeBelowRoot"
decl_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|hasNode
argument_list|(
name|newNode
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addNode
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addStringProperty
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|addProperty
argument_list|(
name|parentNode
argument_list|,
literal|"string"
argument_list|,
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"string value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addMultiValuedString
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Value
index|[]
name|values
init|=
operator|new
name|Value
index|[
literal|2
index|]
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|setProperty
argument_list|(
literal|"multi string"
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Property
name|property
init|=
name|session2
operator|.
name|getProperty
argument_list|(
name|TEST_PATH
operator|+
literal|"/multi string"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|property
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Value
index|[]
name|values2
init|=
name|property
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|values
operator|.
name|length
argument_list|,
name|values2
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|,
name|values2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|,
name|values2
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addLongProperty
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|addProperty
argument_list|(
name|parentNode
argument_list|,
literal|"long"
argument_list|,
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|42L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addMultiValuedLong
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Value
index|[]
name|values
init|=
operator|new
name|Value
index|[
literal|2
index|]
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|42L
argument_list|)
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|84L
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|setProperty
argument_list|(
literal|"multi long"
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Property
name|property
init|=
name|session2
operator|.
name|getProperty
argument_list|(
name|TEST_PATH
operator|+
literal|"/multi long"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|property
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|LONG
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Value
index|[]
name|values2
init|=
name|property
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|values
operator|.
name|length
argument_list|,
name|values2
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|,
name|values2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|,
name|values2
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addDoubleProperty
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|addProperty
argument_list|(
name|parentNode
argument_list|,
literal|"double"
argument_list|,
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|42.2D
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addMultiValuedDouble
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Value
index|[]
name|values
init|=
operator|new
name|Value
index|[
literal|2
index|]
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|42.1d
argument_list|)
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|99.0d
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|setProperty
argument_list|(
literal|"multi double"
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Property
name|property
init|=
name|session2
operator|.
name|getProperty
argument_list|(
name|TEST_PATH
operator|+
literal|"/multi double"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|property
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|DOUBLE
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Value
index|[]
name|values2
init|=
name|property
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|values
operator|.
name|length
argument_list|,
name|values2
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|,
name|values2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|,
name|values2
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addBooleanProperty
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|addProperty
argument_list|(
name|parentNode
argument_list|,
literal|"boolean"
argument_list|,
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addMultiValuedBoolean
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Value
index|[]
name|values
init|=
operator|new
name|Value
index|[
literal|2
index|]
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|setProperty
argument_list|(
literal|"multi boolean"
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Property
name|property
init|=
name|session2
operator|.
name|getProperty
argument_list|(
name|TEST_PATH
operator|+
literal|"/multi boolean"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|property
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|BOOLEAN
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Value
index|[]
name|values2
init|=
name|property
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|values
operator|.
name|length
argument_list|,
name|values2
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|,
name|values2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|,
name|values2
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addDecimalProperty
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|addProperty
argument_list|(
name|parentNode
argument_list|,
literal|"decimal"
argument_list|,
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|21
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addMultiValuedDecimal
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Value
index|[]
name|values
init|=
operator|new
name|Value
index|[
literal|2
index|]
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|setProperty
argument_list|(
literal|"multi decimal"
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Property
name|property
init|=
name|session2
operator|.
name|getProperty
argument_list|(
name|TEST_PATH
operator|+
literal|"/multi decimal"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|property
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|DECIMAL
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Value
index|[]
name|values2
init|=
name|property
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|values
operator|.
name|length
argument_list|,
name|values2
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|,
name|values2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|,
name|values2
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addDateProperty
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|addProperty
argument_list|(
name|parentNode
argument_list|,
literal|"date"
argument_list|,
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addMultiValuedDate
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Value
index|[]
name|values
init|=
operator|new
name|Value
index|[
literal|2
index|]
decl_stmt|;
name|Calendar
name|calendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|calendar
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|calendar
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|setProperty
argument_list|(
literal|"multi date"
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Property
name|property
init|=
name|session2
operator|.
name|getProperty
argument_list|(
name|TEST_PATH
operator|+
literal|"/multi date"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|property
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|DATE
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Value
index|[]
name|values2
init|=
name|property
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|values
operator|.
name|length
argument_list|,
name|values2
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|,
name|values2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|,
name|values2
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addURIProperty
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|addProperty
argument_list|(
name|parentNode
argument_list|,
literal|"uri"
argument_list|,
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"http://www.day.com/"
argument_list|,
name|PropertyType
operator|.
name|URI
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addMultiValuedURI
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Value
index|[]
name|values
init|=
operator|new
name|Value
index|[
literal|2
index|]
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"http://www.day.com"
argument_list|,
name|PropertyType
operator|.
name|URI
argument_list|)
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"file://var/dam"
argument_list|,
name|PropertyType
operator|.
name|URI
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|setProperty
argument_list|(
literal|"multi uri"
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Property
name|property
init|=
name|session2
operator|.
name|getProperty
argument_list|(
name|TEST_PATH
operator|+
literal|"/multi uri"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|property
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|URI
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Value
index|[]
name|values2
init|=
name|property
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|values
operator|.
name|length
argument_list|,
name|values2
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|,
name|values2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|,
name|values2
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addNameProperty
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|addProperty
argument_list|(
name|parentNode
argument_list|,
literal|"name"
argument_list|,
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"jcr:something\""
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addMultiValuedName
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Value
index|[]
name|values
init|=
operator|new
name|Value
index|[
literal|2
index|]
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"jcr:foo"
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"bar"
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|setProperty
argument_list|(
literal|"multi name"
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Property
name|property
init|=
name|session2
operator|.
name|getProperty
argument_list|(
name|TEST_PATH
operator|+
literal|"/multi name"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|property
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|NAME
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Value
index|[]
name|values2
init|=
name|property
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|values
operator|.
name|length
argument_list|,
name|values2
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|,
name|values2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|,
name|values2
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addPathProperty
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|addProperty
argument_list|(
name|parentNode
argument_list|,
literal|"path"
argument_list|,
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"/jcr:foo/bar\""
argument_list|,
name|PropertyType
operator|.
name|PATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addMultiValuedPath
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Value
index|[]
name|values
init|=
operator|new
name|Value
index|[
literal|2
index|]
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"/nt:foo/jcr:bar"
argument_list|,
name|PropertyType
operator|.
name|PATH
argument_list|)
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"/"
argument_list|,
name|PropertyType
operator|.
name|PATH
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|setProperty
argument_list|(
literal|"multi path"
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Property
name|property
init|=
name|session2
operator|.
name|getProperty
argument_list|(
name|TEST_PATH
operator|+
literal|"/multi path"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|property
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|PATH
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Value
index|[]
name|values2
init|=
name|property
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|values
operator|.
name|length
argument_list|,
name|values2
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|,
name|values2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|,
name|values2
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addBinaryProperty
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"foo\""
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|Binary
name|bin
init|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createBinary
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|addProperty
argument_list|(
name|parentNode
argument_list|,
literal|"binary"
argument_list|,
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|bin
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addSmallBinaryProperty
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|NumberStream
argument_list|(
literal|1234
argument_list|)
decl_stmt|;
name|Binary
name|bin
init|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createBinary
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|addProperty
argument_list|(
name|parentNode
argument_list|,
literal|"bigBinary"
argument_list|,
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|bin
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addBigBinaryProperty
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|NumberStream
argument_list|(
literal|123456
argument_list|)
decl_stmt|;
name|Binary
name|bin
init|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createBinary
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|addProperty
argument_list|(
name|parentNode
argument_list|,
literal|"bigBinary"
argument_list|,
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|bin
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addMultiValuedBinary
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Value
index|[]
name|values
init|=
operator|new
name|Value
index|[
literal|2
index|]
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"foo"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|Binary
name|bin
init|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createBinary
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|bin
argument_list|)
expr_stmt|;
name|is
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"bar"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|bin
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createBinary
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|bin
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|setProperty
argument_list|(
literal|"multi binary"
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Property
name|property
init|=
name|session2
operator|.
name|getProperty
argument_list|(
name|TEST_PATH
operator|+
literal|"/multi binary"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|property
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|BINARY
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Value
index|[]
name|values2
init|=
name|property
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|values
operator|.
name|length
argument_list|,
name|values2
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|,
name|values2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|,
name|values2
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addReferenceProperty
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Node
name|referee
init|=
name|getSession
argument_list|()
operator|.
name|getNode
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|referee
operator|.
name|addMixin
argument_list|(
literal|"mix:referenceable"
argument_list|)
expr_stmt|;
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|addProperty
argument_list|(
name|parentNode
argument_list|,
literal|"reference"
argument_list|,
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|referee
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addMultiValuedReference
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Node
name|referee
init|=
name|getSession
argument_list|()
operator|.
name|getNode
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|referee
operator|.
name|addMixin
argument_list|(
literal|"mix:referenceable"
argument_list|)
expr_stmt|;
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Value
index|[]
name|values
init|=
operator|new
name|Value
index|[
literal|2
index|]
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|referee
argument_list|)
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|referee
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|setProperty
argument_list|(
literal|"multi reference"
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Property
name|property
init|=
name|session2
operator|.
name|getProperty
argument_list|(
name|TEST_PATH
operator|+
literal|"/multi reference"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|property
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|REFERENCE
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Value
index|[]
name|values2
init|=
name|property
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|values
operator|.
name|length
argument_list|,
name|values2
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|,
name|values2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|,
name|values2
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addWeakReferenceProperty
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Node
name|referee
init|=
name|getSession
argument_list|()
operator|.
name|getNode
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|referee
operator|.
name|addMixin
argument_list|(
literal|"mix:referenceable"
argument_list|)
expr_stmt|;
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|addProperty
argument_list|(
name|parentNode
argument_list|,
literal|"weak reference"
argument_list|,
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|referee
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addMultiValuedWeakReference
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Node
name|referee
init|=
name|getSession
argument_list|()
operator|.
name|getNode
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|referee
operator|.
name|addMixin
argument_list|(
literal|"mix:referenceable"
argument_list|)
expr_stmt|;
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Value
index|[]
name|values
init|=
operator|new
name|Value
index|[
literal|2
index|]
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|referee
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|referee
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|setProperty
argument_list|(
literal|"multi weak reference"
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Property
name|property
init|=
name|session2
operator|.
name|getProperty
argument_list|(
name|TEST_PATH
operator|+
literal|"/multi weak reference"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|property
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|WEAKREFERENCE
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Value
index|[]
name|values2
init|=
name|property
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|values
operator|.
name|length
argument_list|,
name|values2
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|,
name|values2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|,
name|values2
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addEmptyMultiValuedProperty
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Value
index|[]
name|values
init|=
operator|new
name|Value
index|[
literal|0
index|]
decl_stmt|;
name|parentNode
operator|.
name|setProperty
argument_list|(
literal|"multi empty"
argument_list|,
name|values
argument_list|,
name|PropertyType
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Property
name|property
init|=
name|session2
operator|.
name|getProperty
argument_list|(
name|TEST_PATH
operator|+
literal|"/multi empty"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|property
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|Value
index|[]
name|values2
init|=
name|property
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|values2
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyMultiValuedPropertyType
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Value
index|[]
name|values
init|=
operator|new
name|Value
index|[
literal|0
index|]
decl_stmt|;
name|parentNode
operator|.
name|setProperty
argument_list|(
literal|"multi empty"
argument_list|,
name|values
argument_list|,
name|PropertyType
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Property
name|property
init|=
name|session2
operator|.
name|getProperty
argument_list|(
name|TEST_PATH
operator|+
literal|"/multi empty"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|property
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Value
index|[]
name|values2
init|=
name|property
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|values2
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addMultiValuedStringWithNull
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Value
index|[]
name|values
init|=
operator|new
name|Value
index|[
literal|3
index|]
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|values
index|[
literal|2
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|setProperty
argument_list|(
literal|"multi with null"
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Property
name|property
init|=
name|session2
operator|.
name|getProperty
argument_list|(
name|TEST_PATH
operator|+
literal|"/multi with null"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|property
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|BOOLEAN
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Value
index|[]
name|values2
init|=
name|property
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|values
operator|.
name|length
operator|-
literal|1
argument_list|,
name|values2
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|transientChanges
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|parentNode
operator|.
name|addNode
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|node
operator|.
name|hasProperty
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"pv"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|hasProperty
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"n"
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|.
name|addNode
argument_list|(
literal|"n"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|hasProperties
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|hasNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setStringProperty
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|addProperty
argument_list|(
name|parentNode
argument_list|,
literal|"string"
argument_list|,
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"string \" value"
argument_list|)
argument_list|)
expr_stmt|;
name|Property
name|property
init|=
name|parentNode
operator|.
name|getProperty
argument_list|(
literal|"string"
argument_list|)
decl_stmt|;
name|property
operator|.
name|setValue
argument_list|(
literal|"new value"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parentNode
operator|.
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|property
operator|.
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|property
operator|.
name|isNew
argument_list|()
argument_list|)
expr_stmt|;
name|property
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Property
name|property2
init|=
name|session2
operator|.
name|getProperty
argument_list|(
name|TEST_PATH
operator|+
literal|"/string"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"new value"
argument_list|,
name|property2
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|setDoubleNaNProperty
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|addProperty
argument_list|(
name|parentNode
argument_list|,
literal|"NaN"
argument_list|,
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Property
name|property2
init|=
name|session2
operator|.
name|getProperty
argument_list|(
name|TEST_PATH
operator|+
literal|"/NaN"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|property2
operator|.
name|getDouble
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|setMultiValuedProperty
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Value
index|[]
name|values
init|=
operator|new
name|Value
index|[
literal|2
index|]
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|setProperty
argument_list|(
literal|"multi string2"
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"eins"
argument_list|)
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"zwei"
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|setProperty
argument_list|(
literal|"multi string2"
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Property
name|property
init|=
name|session2
operator|.
name|getProperty
argument_list|(
name|TEST_PATH
operator|+
literal|"/multi string2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|property
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|Value
index|[]
name|values2
init|=
name|property
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|,
name|values2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|,
name|values2
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|nullProperty
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|parentNode
operator|.
name|setProperty
argument_list|(
literal|"newProperty"
argument_list|,
literal|"some value"
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|session2
operator|.
name|getProperty
argument_list|(
name|TEST_PATH
operator|+
literal|"/newProperty"
argument_list|)
operator|.
name|setValue
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|session2
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
name|Session
name|session3
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|assertFalse
argument_list|(
name|session3
operator|.
name|propertyExists
argument_list|(
name|TEST_PATH
operator|+
literal|"/newProperty"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session3
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeProperty
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|parentNode
operator|.
name|setProperty
argument_list|(
literal|"newProperty"
argument_list|,
literal|"some value"
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|session2
operator|.
name|getProperty
argument_list|(
name|TEST_PATH
operator|+
literal|"/newProperty"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|session2
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
name|Session
name|session3
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|assertFalse
argument_list|(
name|session3
operator|.
name|propertyExists
argument_list|(
name|TEST_PATH
operator|+
literal|"/newProperty"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session3
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeNode
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|parentNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|parentNode
operator|.
name|addNode
argument_list|(
literal|"newNode"
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Node
name|removeNode
init|=
name|session2
operator|.
name|getNode
argument_list|(
name|TEST_PATH
operator|+
literal|"/newNode"
argument_list|)
decl_stmt|;
name|removeNode
operator|.
name|remove
argument_list|()
expr_stmt|;
try|try
block|{
name|removeNode
operator|.
name|getParent
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Cannot retrieve the parent from a transiently removed item."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidItemStateException
name|expected
parameter_list|)
block|{}
name|assertTrue
argument_list|(
name|session2
operator|.
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
operator|.
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|session2
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
name|Session
name|session3
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|assertFalse
argument_list|(
name|session3
operator|.
name|nodeExists
argument_list|(
name|TEST_PATH
operator|+
literal|"/newNode"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|session3
operator|.
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
operator|.
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session3
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|sessionSave
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session1
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Add some items and ensure they are accessible through this session
name|session1
operator|.
name|getNode
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"node1"
argument_list|)
expr_stmt|;
name|session1
operator|.
name|getNode
argument_list|(
literal|"/node1"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"node2"
argument_list|)
expr_stmt|;
name|session1
operator|.
name|getNode
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"node1/node3"
argument_list|)
expr_stmt|;
name|Node
name|node1
init|=
name|session1
operator|.
name|getNode
argument_list|(
literal|"/node1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/node1"
argument_list|,
name|node1
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|node2
init|=
name|session1
operator|.
name|getNode
argument_list|(
literal|"/node1/node2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/node1/node2"
argument_list|,
name|node2
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|node3
init|=
name|session1
operator|.
name|getNode
argument_list|(
literal|"/node1/node3"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/node1/node3"
argument_list|,
name|node3
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|node3
operator|.
name|setProperty
argument_list|(
literal|"property1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|Item
name|property1
init|=
name|session1
operator|.
name|getProperty
argument_list|(
literal|"/node1/node3/property1"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|property1
operator|.
name|isNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value1"
argument_list|,
operator|(
operator|(
name|Property
operator|)
name|property1
operator|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure these items are not accessible through another session
name|assertFalse
argument_list|(
name|session2
operator|.
name|itemExists
argument_list|(
literal|"/node1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|session2
operator|.
name|itemExists
argument_list|(
literal|"/node1/node2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|session2
operator|.
name|itemExists
argument_list|(
literal|"/node1/node3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|session2
operator|.
name|itemExists
argument_list|(
literal|"/node1/node3/property1"
argument_list|)
argument_list|)
expr_stmt|;
name|session1
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// Make sure these items are still not accessible through another session until refresh
name|assertFalse
argument_list|(
name|session2
operator|.
name|itemExists
argument_list|(
literal|"/node1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|session2
operator|.
name|itemExists
argument_list|(
literal|"/node1/node2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|session2
operator|.
name|itemExists
argument_list|(
literal|"/node1/node3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|session2
operator|.
name|itemExists
argument_list|(
literal|"/node1/node3/property1"
argument_list|)
argument_list|)
expr_stmt|;
name|session2
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|session2
operator|.
name|itemExists
argument_list|(
literal|"/node1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|session2
operator|.
name|itemExists
argument_list|(
literal|"/node1/node2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|session2
operator|.
name|itemExists
argument_list|(
literal|"/node1/node3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|session2
operator|.
name|itemExists
argument_list|(
literal|"/node1/node3/property1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session1
operator|.
name|logout
argument_list|()
expr_stmt|;
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|sessionRefresh
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Add some items and ensure they are accessible through this session
name|session
operator|.
name|getNode
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"node1"
argument_list|)
expr_stmt|;
name|session
operator|.
name|getNode
argument_list|(
literal|"/node1"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"node2"
argument_list|)
expr_stmt|;
name|session
operator|.
name|getNode
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"node1/node3"
argument_list|)
expr_stmt|;
name|Node
name|node1
init|=
name|session
operator|.
name|getNode
argument_list|(
literal|"/node1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/node1"
argument_list|,
name|node1
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|node2
init|=
name|session
operator|.
name|getNode
argument_list|(
literal|"/node1/node2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/node1/node2"
argument_list|,
name|node2
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|node3
init|=
name|session
operator|.
name|getNode
argument_list|(
literal|"/node1/node3"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/node1/node3"
argument_list|,
name|node3
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|node3
operator|.
name|setProperty
argument_list|(
literal|"property1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|Item
name|property1
init|=
name|session
operator|.
name|getProperty
argument_list|(
literal|"/node1/node3/property1"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|property1
operator|.
name|isNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value1"
argument_list|,
operator|(
operator|(
name|Property
operator|)
name|property1
operator|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure these items are still accessible after refresh(true);
name|session
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|session
operator|.
name|itemExists
argument_list|(
literal|"/node1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|session
operator|.
name|itemExists
argument_list|(
literal|"/node1/node2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|session
operator|.
name|itemExists
argument_list|(
literal|"/node1/node3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|session
operator|.
name|itemExists
argument_list|(
literal|"/node1/node3/property1"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Make sure these items are not accessible after refresh(false);
name|assertFalse
argument_list|(
name|session
operator|.
name|itemExists
argument_list|(
literal|"/node1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|session
operator|.
name|itemExists
argument_list|(
literal|"/node1/node2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|session
operator|.
name|itemExists
argument_list|(
literal|"/node1/node3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|session
operator|.
name|itemExists
argument_list|(
literal|"/node1/node3/property1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|sessionRefreshFalse
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session1
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Node
name|foo
init|=
name|session1
operator|.
name|getNode
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|foo
operator|.
name|addNode
argument_list|(
literal|"added"
argument_list|)
expr_stmt|;
name|session2
operator|.
name|getNode
argument_list|(
literal|"/foo"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|session2
operator|.
name|save
argument_list|()
expr_stmt|;
name|session1
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|foo
operator|.
name|hasNode
argument_list|(
literal|"added"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foo
operator|.
name|hasNode
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session1
operator|.
name|logout
argument_list|()
expr_stmt|;
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|sessionRefreshTrue
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session1
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Node
name|foo
init|=
name|session1
operator|.
name|getNode
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|foo
operator|.
name|addNode
argument_list|(
literal|"added"
argument_list|)
expr_stmt|;
name|session2
operator|.
name|getNode
argument_list|(
literal|"/foo"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|session2
operator|.
name|save
argument_list|()
expr_stmt|;
name|session1
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foo
operator|.
name|hasNode
argument_list|(
literal|"added"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foo
operator|.
name|hasNode
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session1
operator|.
name|logout
argument_list|()
expr_stmt|;
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|sessionIsolation
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session1
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|session1
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"node1"
argument_list|)
expr_stmt|;
name|session2
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"node2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|session1
operator|.
name|getRootNode
argument_list|()
operator|.
name|hasNode
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|session2
operator|.
name|getRootNode
argument_list|()
operator|.
name|hasNode
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|session1
operator|.
name|getRootNode
argument_list|()
operator|.
name|hasNode
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|session2
operator|.
name|getRootNode
argument_list|()
operator|.
name|hasNode
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
expr_stmt|;
name|session1
operator|.
name|save
argument_list|()
expr_stmt|;
name|session2
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|session1
operator|.
name|getRootNode
argument_list|()
operator|.
name|hasNode
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|session1
operator|.
name|getRootNode
argument_list|()
operator|.
name|hasNode
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|session2
operator|.
name|getRootNode
argument_list|()
operator|.
name|hasNode
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|session2
operator|.
name|getRootNode
argument_list|()
operator|.
name|hasNode
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session1
operator|.
name|logout
argument_list|()
expr_stmt|;
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|saveRefreshConflict
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session1
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|session1
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"node"
argument_list|)
expr_stmt|;
name|session2
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"node"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|session1
operator|.
name|getRootNode
argument_list|()
operator|.
name|hasNode
argument_list|(
literal|"node"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|session2
operator|.
name|getRootNode
argument_list|()
operator|.
name|hasNode
argument_list|(
literal|"node"
argument_list|)
argument_list|)
expr_stmt|;
name|session1
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|session1
operator|.
name|getRootNode
argument_list|()
operator|.
name|hasNode
argument_list|(
literal|"node"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|session2
operator|.
name|getRootNode
argument_list|()
operator|.
name|hasNode
argument_list|(
literal|"node"
argument_list|)
argument_list|)
expr_stmt|;
name|session2
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|session1
operator|.
name|getRootNode
argument_list|()
operator|.
name|hasNode
argument_list|(
literal|"node"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|session2
operator|.
name|getRootNode
argument_list|()
operator|.
name|hasNode
argument_list|(
literal|"node"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|session2
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected InvalidItemStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidItemStateException
name|expected
parameter_list|)
block|{             }
block|}
finally|finally
block|{
name|session1
operator|.
name|logout
argument_list|()
expr_stmt|;
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|saveConflict
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|getSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"node"
argument_list|)
expr_stmt|;
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session1
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|session1
operator|.
name|getNode
argument_list|(
literal|"/node"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|session2
operator|.
name|getNode
argument_list|(
literal|"/node"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|session1
operator|.
name|getRootNode
argument_list|()
operator|.
name|hasNode
argument_list|(
literal|"node"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|session2
operator|.
name|getRootNode
argument_list|()
operator|.
name|hasNode
argument_list|(
literal|"node"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|session2
operator|.
name|getRootNode
argument_list|()
operator|.
name|getNode
argument_list|(
literal|"node"
argument_list|)
operator|.
name|hasNode
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|session1
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|session1
operator|.
name|getRootNode
argument_list|()
operator|.
name|hasNode
argument_list|(
literal|"node"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|session2
operator|.
name|getRootNode
argument_list|()
operator|.
name|hasNode
argument_list|(
literal|"node"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|session2
operator|.
name|getRootNode
argument_list|()
operator|.
name|getNode
argument_list|(
literal|"node"
argument_list|)
operator|.
name|hasNode
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|session2
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected InvalidItemStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidItemStateException
name|expected
parameter_list|)
block|{             }
block|}
finally|finally
block|{
name|session1
operator|.
name|logout
argument_list|()
expr_stmt|;
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|liveNodes
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Node
name|n1
init|=
operator|(
name|Node
operator|)
name|session
operator|.
name|getItem
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Node
name|n2
init|=
operator|(
name|Node
operator|)
name|session
operator|.
name|getItem
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Node
name|c1
init|=
name|n1
operator|.
name|addNode
argument_list|(
literal|"c1"
argument_list|)
decl_stmt|;
name|Node
name|c2
init|=
name|n2
operator|.
name|addNode
argument_list|(
literal|"c2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|n1
operator|.
name|hasNode
argument_list|(
literal|"c1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|n1
operator|.
name|hasNode
argument_list|(
literal|"c2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|n2
operator|.
name|hasNode
argument_list|(
literal|"c1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|n2
operator|.
name|hasNode
argument_list|(
literal|"c2"
argument_list|)
argument_list|)
expr_stmt|;
name|c1
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|n1
operator|.
name|hasNode
argument_list|(
literal|"c1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|n1
operator|.
name|hasNode
argument_list|(
literal|"c2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|n2
operator|.
name|hasNode
argument_list|(
literal|"c1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|n2
operator|.
name|hasNode
argument_list|(
literal|"c2"
argument_list|)
argument_list|)
expr_stmt|;
name|c2
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|n1
operator|.
name|hasNode
argument_list|(
literal|"c1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|n1
operator|.
name|hasNode
argument_list|(
literal|"c2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|n2
operator|.
name|hasNode
argument_list|(
literal|"c1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|n2
operator|.
name|hasNode
argument_list|(
literal|"c2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|move
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|getSession
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|node
operator|.
name|addNode
argument_list|(
literal|"source"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"node"
argument_list|)
expr_stmt|;
name|node
operator|.
name|addNode
argument_list|(
literal|"target"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|Node
name|sourceNode
init|=
name|session
operator|.
name|getNode
argument_list|(
name|TEST_PATH
operator|+
literal|"/source/node"
argument_list|)
decl_stmt|;
name|session
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|move
argument_list|(
name|TEST_PATH
operator|+
literal|"/source/node"
argument_list|,
name|TEST_PATH
operator|+
literal|"/target/moved"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test_node/target/moved"
argument_list|,
name|sourceNode
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"source/node"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"source"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"target/moved"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"source/node"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"source"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"target/moved"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|workspaceMove
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|getSession
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|node
operator|.
name|addNode
argument_list|(
literal|"source"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"node"
argument_list|)
expr_stmt|;
name|node
operator|.
name|addNode
argument_list|(
literal|"target"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|move
argument_list|(
name|TEST_PATH
operator|+
literal|"/source/node"
argument_list|,
name|TEST_PATH
operator|+
literal|"/target/moved"
argument_list|)
expr_stmt|;
comment|// Move must not be visible in session
name|assertTrue
argument_list|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"source/node"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"target/moved"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Move must be visible in session after refresh
name|assertFalse
argument_list|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"source/node"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"source"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"target/moved"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|workspaceCopy
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|getSession
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|node
operator|.
name|addNode
argument_list|(
literal|"source"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"node"
argument_list|)
expr_stmt|;
name|node
operator|.
name|addNode
argument_list|(
literal|"target"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|copy
argument_list|(
name|TEST_PATH
operator|+
literal|"/source/node"
argument_list|,
name|TEST_PATH
operator|+
literal|"/target/copied"
argument_list|)
expr_stmt|;
comment|// Copy must not be visible in session
name|assertTrue
argument_list|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"source/node"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"target/copied"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Copy must be visible in session after refresh
name|assertTrue
argument_list|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"source/node"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"target/copied"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setPrimaryType
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|testNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"nt:unstructured"
argument_list|,
name|testNode
operator|.
name|getPrimaryNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nt:unstructured"
argument_list|,
name|testNode
operator|.
name|getProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|setPrimaryType
argument_list|(
literal|"nt:folder"
argument_list|)
expr_stmt|;
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|testNode
operator|=
name|session2
operator|.
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nt:folder"
argument_list|,
name|testNode
operator|.
name|getPrimaryNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nt:folder"
argument_list|,
name|testNode
operator|.
name|getProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeTypeRegistry
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|NodeTypeManager
name|ntMgr
init|=
name|getSession
argument_list|()
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|ntMgr
operator|.
name|hasNodeType
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeTypeTemplate
name|ntd
init|=
name|ntMgr
operator|.
name|createNodeTypeTemplate
argument_list|()
decl_stmt|;
name|ntd
operator|.
name|setName
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|ntMgr
operator|.
name|registerNodeType
argument_list|(
name|ntd
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ntMgr
operator|.
name|hasNodeType
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|ntMgr
operator|.
name|unregisterNodeType
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ntMgr
operator|.
name|hasNodeType
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNamespaceRegistry
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|NamespaceRegistry
name|nsReg
init|=
name|getSession
argument_list|()
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNamespaceRegistry
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|asList
argument_list|(
name|nsReg
operator|.
name|getPrefixes
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|asList
argument_list|(
name|nsReg
operator|.
name|getURIs
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"file:///foo"
argument_list|)
argument_list|)
expr_stmt|;
name|nsReg
operator|.
name|registerNamespace
argument_list|(
literal|"foo"
argument_list|,
literal|"file:///foo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asList
argument_list|(
name|nsReg
operator|.
name|getPrefixes
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asList
argument_list|(
name|nsReg
operator|.
name|getURIs
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"file:///foo"
argument_list|)
argument_list|)
expr_stmt|;
name|nsReg
operator|.
name|unregisterNamespace
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|asList
argument_list|(
name|nsReg
operator|.
name|getPrefixes
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|asList
argument_list|(
name|nsReg
operator|.
name|getURIs
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"file:///foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
comment|// TODO implement node type support
annotation|@
name|Test
specifier|public
name|void
name|mixin
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|NodeTypeManager
name|ntMgr
init|=
name|getSession
argument_list|()
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|NodeTypeTemplate
name|mixTest
init|=
name|ntMgr
operator|.
name|createNodeTypeTemplate
argument_list|()
decl_stmt|;
name|mixTest
operator|.
name|setName
argument_list|(
literal|"mix:test"
argument_list|)
expr_stmt|;
name|mixTest
operator|.
name|setMixin
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ntMgr
operator|.
name|registerNodeType
argument_list|(
name|mixTest
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Node
name|testNode
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|NodeType
index|[]
name|mix
init|=
name|testNode
operator|.
name|getMixinNodeTypes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mix
operator|.
name|length
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|addMixin
argument_list|(
literal|"mix:test"
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|mix
operator|=
name|session2
operator|.
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
operator|.
name|getMixinNodeTypes
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mix
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mix:test"
argument_list|,
name|mix
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
name|testNode
operator|.
name|removeMixin
argument_list|(
literal|"mix:test"
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|session2
operator|=
name|createAnonymousSession
argument_list|()
expr_stmt|;
try|try
block|{
name|mix
operator|=
name|session2
operator|.
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
operator|.
name|getMixinNodeTypes
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mix
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|observation
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|InterruptedException
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|addNodes
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|TEST_PATH
operator|+
literal|"/1"
argument_list|,
name|TEST_PATH
operator|+
literal|"/2"
argument_list|,
name|TEST_PATH
operator|+
literal|"/3"
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removeNodes
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|TEST_PATH
operator|+
literal|"/2"
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|addProperties
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|TEST_PATH
operator|+
literal|"/property"
argument_list|,
name|TEST_PATH
operator|+
literal|"/prop0"
argument_list|,
name|TEST_PATH
operator|+
literal|"/1/prop1"
argument_list|,
name|TEST_PATH
operator|+
literal|"/1/prop2"
argument_list|,
name|TEST_PATH
operator|+
literal|"/1/jcr:primaryType"
argument_list|,
name|TEST_PATH
operator|+
literal|"/2/jcr:primaryType"
argument_list|,
name|TEST_PATH
operator|+
literal|"/3/jcr:primaryType"
argument_list|,
name|TEST_PATH
operator|+
literal|"/3/prop3"
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|setProperties
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|TEST_PATH
operator|+
literal|"/1/prop1"
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removeProperties
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|TEST_PATH
operator|+
literal|"/1/prop2"
argument_list|,
name|TEST_PATH
operator|+
literal|"/2/jcr:primaryType"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Event
argument_list|>
name|failedEvents
init|=
operator|new
name|ArrayList
argument_list|<
name|Event
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
name|eventCount
init|=
operator|new
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Session
name|observingSession
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|ObservationManager
name|obsMgr
init|=
name|observingSession
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getObservationManager
argument_list|()
decl_stmt|;
name|obsMgr
operator|.
name|addEventListener
argument_list|(
operator|new
name|EventListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onEvent
parameter_list|(
name|EventIterator
name|events
parameter_list|)
block|{
while|while
condition|(
name|events
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Event
name|event
init|=
name|events
operator|.
name|nextEvent
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|path
init|=
name|event
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/jcr:system"
argument_list|)
condition|)
block|{
comment|// ignore changes in jcr:system
continue|continue;
block|}
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Event
operator|.
name|NODE_ADDED
case|:
if|if
condition|(
operator|!
name|addNodes
operator|.
name|remove
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|failedEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|observingSession
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|failedEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Event
operator|.
name|NODE_REMOVED
case|:
if|if
condition|(
operator|!
name|removeNodes
operator|.
name|remove
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|failedEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|observingSession
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|failedEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Event
operator|.
name|PROPERTY_ADDED
case|:
if|if
condition|(
operator|!
name|addProperties
operator|.
name|remove
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|failedEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|observingSession
operator|.
name|propertyExists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|failedEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Event
operator|.
name|PROPERTY_CHANGED
case|:
if|if
condition|(
operator|!
name|setProperties
operator|.
name|remove
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|failedEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Event
operator|.
name|PROPERTY_REMOVED
case|:
if|if
condition|(
operator|!
name|removeProperties
operator|.
name|remove
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|failedEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|observingSession
operator|.
name|propertyExists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|failedEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|failedEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|failedEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
name|eventCount
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|Event
operator|.
name|NODE_ADDED
operator||
name|Event
operator|.
name|NODE_REMOVED
operator||
name|Event
operator|.
name|NODE_MOVED
operator||
name|Event
operator|.
name|PROPERTY_ADDED
operator||
name|Event
operator|.
name|PROPERTY_REMOVED
operator||
name|Event
operator|.
name|PROPERTY_CHANGED
operator||
name|Event
operator|.
name|PERSIST
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|eventCount
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"prop0"
argument_list|,
literal|"val0"
argument_list|)
expr_stmt|;
name|Node
name|n1
init|=
name|n
operator|.
name|addNode
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
literal|"prop1"
argument_list|,
literal|"val1"
argument_list|)
expr_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
literal|"prop2"
argument_list|,
literal|"val2"
argument_list|)
expr_stmt|;
name|n
operator|.
name|addNode
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|eventCount
operator|.
name|get
argument_list|()
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|eventCount
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"property"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|n
operator|.
name|addNode
argument_list|(
literal|"3"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop3"
argument_list|,
literal|"val3"
argument_list|)
expr_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
literal|"prop1"
argument_list|,
literal|"val1 new"
argument_list|)
expr_stmt|;
name|n1
operator|.
name|getProperty
argument_list|(
literal|"prop2"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|n
operator|.
name|getNode
argument_list|(
literal|"2"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|eventCount
operator|.
name|get
argument_list|()
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"failedEvents not empty: "
operator|+
name|failedEvents
argument_list|,
name|failedEvents
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"addNodes not empty: "
operator|+
name|addNodes
argument_list|,
name|addNodes
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"removeNodes not empty: "
operator|+
name|removeNodes
argument_list|,
name|removeNodes
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"addProperties not empty: "
operator|+
name|addProperties
argument_list|,
name|addProperties
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"removeProperties not empty: "
operator|+
name|removeProperties
argument_list|,
name|removeProperties
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"setProperties not empty: "
operator|+
name|setProperties
argument_list|,
name|setProperties
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|observingSession
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|observation2
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|InterruptedException
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|addNodes
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|TEST_PATH
operator|+
literal|"/1"
argument_list|,
name|TEST_PATH
operator|+
literal|"/2"
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removeNodes
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|TEST_PATH
operator|+
literal|"/1"
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|addProperties
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|TEST_PATH
operator|+
literal|"/1/jcr:primaryType"
argument_list|,
name|TEST_PATH
operator|+
literal|"/2/jcr:primaryType"
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removeProperties
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|TEST_PATH
operator|+
literal|"/1/jcr:primaryType"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Event
argument_list|>
name|failedEvents
init|=
operator|new
name|ArrayList
argument_list|<
name|Event
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
name|eventCount
init|=
operator|new
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Session
name|observingSession
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|ObservationManager
name|obsMgr
init|=
name|observingSession
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getObservationManager
argument_list|()
decl_stmt|;
name|obsMgr
operator|.
name|addEventListener
argument_list|(
operator|new
name|EventListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onEvent
parameter_list|(
name|EventIterator
name|events
parameter_list|)
block|{
while|while
condition|(
name|events
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Event
name|event
init|=
name|events
operator|.
name|nextEvent
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|path
init|=
name|event
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/jcr:system"
argument_list|)
condition|)
block|{
comment|// ignore changes in jcr:system
continue|continue;
block|}
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Event
operator|.
name|NODE_ADDED
case|:
if|if
condition|(
operator|!
name|addNodes
operator|.
name|remove
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|failedEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|observingSession
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|failedEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Event
operator|.
name|NODE_REMOVED
case|:
if|if
condition|(
operator|!
name|removeNodes
operator|.
name|remove
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|failedEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|observingSession
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|failedEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Event
operator|.
name|PROPERTY_ADDED
case|:
if|if
condition|(
operator|!
name|addProperties
operator|.
name|remove
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|failedEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|observingSession
operator|.
name|propertyExists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|failedEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Event
operator|.
name|PROPERTY_REMOVED
case|:
if|if
condition|(
operator|!
name|removeProperties
operator|.
name|remove
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|failedEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|observingSession
operator|.
name|propertyExists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|failedEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|failedEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|failedEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
name|eventCount
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|Event
operator|.
name|NODE_ADDED
operator||
name|Event
operator|.
name|NODE_REMOVED
operator||
name|Event
operator|.
name|NODE_MOVED
operator||
name|Event
operator|.
name|PROPERTY_ADDED
operator||
name|Event
operator|.
name|PROPERTY_REMOVED
operator||
name|Event
operator|.
name|PROPERTY_CHANGED
operator||
name|Event
operator|.
name|PERSIST
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|eventCount
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|n
operator|.
name|addNode
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|eventCount
operator|.
name|get
argument_list|()
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|eventCount
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|n
operator|.
name|addNode
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|n
operator|.
name|getNode
argument_list|(
literal|"1"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|eventCount
operator|.
name|get
argument_list|()
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"failedEvents not empty: "
operator|+
name|failedEvents
argument_list|,
name|failedEvents
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"addNodes not empty: "
operator|+
name|addNodes
argument_list|,
name|addNodes
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"removeNodes not empty: "
operator|+
name|removeNodes
argument_list|,
name|removeNodes
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"addProperties not empty: "
operator|+
name|addProperties
argument_list|,
name|addProperties
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"removeProperties not empty: "
operator|+
name|removeProperties
argument_list|,
name|removeProperties
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|observingSession
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|observationDispose
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
specifier|final
name|List
argument_list|<
name|Event
argument_list|>
name|failedEvents
init|=
operator|new
name|ArrayList
argument_list|<
name|Event
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ObservationManager
name|obsMgr
init|=
name|getSession
argument_list|()
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getObservationManager
argument_list|()
decl_stmt|;
specifier|final
name|EventListener
name|listener
init|=
operator|new
name|EventListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onEvent
parameter_list|(
name|EventIterator
name|events
parameter_list|)
block|{
while|while
condition|(
name|events
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|failedEvents
operator|.
name|add
argument_list|(
name|events
operator|.
name|nextEvent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|obsMgr
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|Event
operator|.
name|NODE_ADDED
operator||
name|Event
operator|.
name|NODE_REMOVED
operator||
name|Event
operator|.
name|NODE_MOVED
operator||
name|Event
operator|.
name|PROPERTY_ADDED
operator||
name|Event
operator|.
name|PROPERTY_REMOVED
operator||
name|Event
operator|.
name|PROPERTY_CHANGED
operator||
name|Event
operator|.
name|PERSIST
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FutureTask
argument_list|<
name|Void
argument_list|>
name|disposer
init|=
operator|new
name|FutureTask
argument_list|<
name|Void
argument_list|>
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|obsMgr
operator|.
name|removeEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
operator|.
name|execute
argument_list|(
name|disposer
argument_list|)
expr_stmt|;
name|disposer
operator|.
name|get
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|failedEvents
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|liveNode
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|getSession
argument_list|()
decl_stmt|;
name|Node
name|n1
init|=
name|session
operator|.
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Node
name|n2
init|=
name|session
operator|.
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|n1
operator|.
name|isSame
argument_list|(
name|n2
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|c1
init|=
name|n1
operator|.
name|addNode
argument_list|(
literal|"c1"
argument_list|)
decl_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
literal|"p1"
argument_list|,
literal|"v1"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|setProperty
argument_list|(
literal|"pc1"
argument_list|,
literal|"vc1"
argument_list|)
expr_stmt|;
name|Node
name|c2
init|=
name|n2
operator|.
name|addNode
argument_list|(
literal|"c2"
argument_list|)
decl_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
literal|"p2"
argument_list|,
literal|"v2"
argument_list|)
expr_stmt|;
name|c2
operator|.
name|setProperty
argument_list|(
literal|"pc2"
argument_list|,
literal|"vc2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c1
operator|.
name|isSame
argument_list|(
name|n2
operator|.
name|getNode
argument_list|(
literal|"c1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c2
operator|.
name|isSame
argument_list|(
name|n1
operator|.
name|getNode
argument_list|(
literal|"c2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|n1
operator|.
name|hasNode
argument_list|(
literal|"c1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|n1
operator|.
name|hasNode
argument_list|(
literal|"c2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|n1
operator|.
name|hasProperty
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|n1
operator|.
name|hasProperty
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c1
operator|.
name|hasProperty
argument_list|(
literal|"pc1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c1
operator|.
name|hasProperty
argument_list|(
literal|"pc2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|n2
operator|.
name|hasNode
argument_list|(
literal|"c1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|n2
operator|.
name|hasNode
argument_list|(
literal|"c2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|n2
operator|.
name|hasProperty
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|n2
operator|.
name|hasProperty
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c2
operator|.
name|hasProperty
argument_list|(
literal|"pc1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c2
operator|.
name|hasProperty
argument_list|(
literal|"pc2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------< private>---
specifier|private
name|void
name|addProperty
parameter_list|(
name|Node
name|parentNode
parameter_list|,
name|String
name|name
parameter_list|,
name|Value
name|value
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|String
name|propertyPath
init|=
name|parentNode
operator|.
name|getPath
argument_list|()
operator|+
literal|'/'
operator|+
name|name
decl_stmt|;
name|assertFalse
argument_list|(
name|getSession
argument_list|()
operator|.
name|propertyExists
argument_list|(
name|propertyPath
argument_list|)
argument_list|)
expr_stmt|;
name|Property
name|added
init|=
name|parentNode
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|parentNode
operator|.
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|added
operator|.
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|added
operator|.
name|isNew
argument_list|()
argument_list|)
expr_stmt|;
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|createAnonymousSession
argument_list|()
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
name|session2
operator|.
name|propertyExists
argument_list|(
name|propertyPath
argument_list|)
argument_list|)
expr_stmt|;
name|Value
name|value2
init|=
name|session2
operator|.
name|getProperty
argument_list|(
name|propertyPath
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|value
operator|.
name|getType
argument_list|()
argument_list|,
name|value2
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|getType
argument_list|()
operator|==
name|PropertyType
operator|.
name|BINARY
condition|)
block|{
name|assertEqualStream
argument_list|(
name|value
operator|.
name|getStream
argument_list|()
argument_list|,
name|value2
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|,
name|value2
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value2
operator|.
name|getType
argument_list|()
operator|==
name|PropertyType
operator|.
name|REFERENCE
operator|||
name|value2
operator|.
name|getType
argument_list|()
operator|==
name|PropertyType
operator|.
name|WEAKREFERENCE
condition|)
block|{
name|String
name|ref
init|=
name|value2
operator|.
name|getString
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|getSession
argument_list|()
operator|.
name|getNodeByIdentifier
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assertEqualStream
parameter_list|(
name|InputStream
name|is1
parameter_list|,
name|InputStream
name|is2
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf1
init|=
operator|new
name|byte
index|[
literal|65536
index|]
decl_stmt|;
name|byte
index|[]
name|buf2
init|=
operator|new
name|byte
index|[
literal|65536
index|]
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|c
operator|!=
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|c
operator|=
name|is1
operator|.
name|read
argument_list|(
name|buf1
argument_list|)
argument_list|,
name|is2
operator|.
name|read
argument_list|(
name|buf2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|c
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|buf1
index|[
name|i
index|]
argument_list|,
name|buf2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Dummy stream class used by the binary property tests.      */
specifier|private
specifier|static
class|class
name|NumberStream
extends|extends
name|InputStream
block|{
specifier|private
specifier|final
name|int
name|limit
decl_stmt|;
specifier|private
name|int
name|counter
decl_stmt|;
specifier|public
name|NumberStream
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|counter
operator|<
name|limit
condition|?
name|counter
operator|++
operator|&
literal|0xff
else|:
operator|-
literal|1
return|;
block|}
block|}
block|}
end_class

end_unit

