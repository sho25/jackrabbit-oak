begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FieldNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetsConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|LabelAndValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|sortedset
operator|.
name|DefaultSortedSetDocValuesReaderState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|sortedset
operator|.
name|SortedSetDocValuesFacetCounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|sortedset
operator|.
name|SortedSetDocValuesReaderState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_comment
comment|/**  * ACL filtered version of {@link SortedSetDocValuesFacetCounts}  */
end_comment

begin_class
class|class
name|FilteredSortedSetDocValuesFacetCounts
extends|extends
name|SortedSetDocValuesFacetCounts
block|{
specifier|private
specifier|final
name|TopDocs
name|docs
decl_stmt|;
specifier|private
specifier|final
name|Filter
name|filter
decl_stmt|;
specifier|private
specifier|final
name|IndexReader
name|reader
decl_stmt|;
specifier|private
specifier|final
name|SortedSetDocValuesReaderState
name|state
decl_stmt|;
specifier|public
name|FilteredSortedSetDocValuesFacetCounts
parameter_list|(
name|DefaultSortedSetDocValuesReaderState
name|state
parameter_list|,
name|FacetsCollector
name|facetsCollector
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|TopDocs
name|docs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|state
argument_list|,
name|facetsCollector
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|state
operator|.
name|origReader
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|this
operator|.
name|docs
operator|=
name|docs
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|FacetResult
name|getTopChildren
parameter_list|(
name|int
name|topN
parameter_list|,
name|String
name|dim
parameter_list|,
name|String
modifier|...
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FacetResult
name|topChildren
init|=
name|super
operator|.
name|getTopChildren
argument_list|(
name|topN
argument_list|,
name|dim
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|topChildren
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LabelAndValue
index|[]
name|labelAndValues
init|=
name|topChildren
operator|.
name|labelValues
decl_stmt|;
for|for
control|(
name|ScoreDoc
name|scoreDoc
range|:
name|docs
operator|.
name|scoreDocs
control|)
block|{
name|labelAndValues
operator|=
name|filterFacet
argument_list|(
name|scoreDoc
operator|.
name|doc
argument_list|,
name|dim
argument_list|,
name|labelAndValues
argument_list|)
expr_stmt|;
block|}
name|int
name|childCount
init|=
name|labelAndValues
operator|.
name|length
decl_stmt|;
name|Number
name|value
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LabelAndValue
name|lv
range|:
name|labelAndValues
control|)
block|{
name|value
operator|=
name|value
operator|.
name|longValue
argument_list|()
operator|+
name|lv
operator|.
name|value
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|FacetResult
argument_list|(
name|dim
argument_list|,
name|path
argument_list|,
name|value
argument_list|,
name|labelAndValues
argument_list|,
name|childCount
argument_list|)
return|;
block|}
specifier|private
name|LabelAndValue
index|[]
name|filterFacet
parameter_list|(
name|int
name|docId
parameter_list|,
name|String
name|dimension
parameter_list|,
name|LabelAndValue
index|[]
name|labelAndValues
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|filterd
init|=
literal|false
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|newValues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|reader
operator|.
name|document
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|SortedSetDocValues
name|docValues
init|=
name|state
operator|.
name|getDocValues
argument_list|()
decl_stmt|;
name|docValues
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
expr_stmt|;
comment|// filter using doc values (avoiding requiring stored values)
if|if
condition|(
operator|!
name|filter
operator|.
name|isAccessible
argument_list|(
name|document
operator|.
name|getField
argument_list|(
name|FieldNames
operator|.
name|PATH
argument_list|)
operator|.
name|stringValue
argument_list|()
operator|+
literal|"/"
operator|+
name|dimension
argument_list|)
condition|)
block|{
name|filterd
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|LabelAndValue
name|lv
range|:
name|labelAndValues
control|)
block|{
name|long
name|existingCount
init|=
name|lv
operator|.
name|value
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|BytesRef
name|key
init|=
operator|new
name|BytesRef
argument_list|(
name|FacetsConfig
operator|.
name|pathToString
argument_list|(
name|dimension
argument_list|,
operator|new
name|String
index|[]
block|{
name|lv
operator|.
name|label
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|l
init|=
name|docValues
operator|.
name|lookupTerm
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|existingCount
operator|>
literal|0
condition|)
block|{
name|newValues
operator|.
name|put
argument_list|(
name|lv
operator|.
name|label
argument_list|,
name|existingCount
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|newValues
operator|.
name|containsKey
argument_list|(
name|lv
operator|.
name|label
argument_list|)
condition|)
block|{
name|newValues
operator|.
name|remove
argument_list|(
name|lv
operator|.
name|label
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|LabelAndValue
index|[]
name|filteredLVs
decl_stmt|;
if|if
condition|(
name|filterd
condition|)
block|{
name|filteredLVs
operator|=
operator|new
name|LabelAndValue
index|[
name|newValues
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|newValues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|filteredLVs
index|[
name|i
index|]
operator|=
operator|new
name|LabelAndValue
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
name|filteredLVs
operator|=
name|labelAndValues
expr_stmt|;
block|}
return|return
name|filteredLVs
return|;
block|}
block|}
end_class

end_unit

