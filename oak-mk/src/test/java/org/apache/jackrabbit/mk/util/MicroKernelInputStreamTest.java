begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law  * or agreed to in writing, software distributed under the License is  * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the specific language  * governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|core
operator|.
name|MicroKernelImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests the {@code MicroKernelInputStream}.  */
end_comment

begin_class
specifier|public
class|class
name|MicroKernelInputStreamTest
block|{
name|MicroKernel
name|mk
init|=
operator|new
name|MicroKernelImpl
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|small
parameter_list|()
throws|throws
name|IOException
block|{
name|doTest
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|medium
parameter_list|()
throws|throws
name|IOException
block|{
name|doTest
argument_list|(
literal|1000
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|large
parameter_list|()
throws|throws
name|IOException
block|{
name|doTest
argument_list|(
literal|100000
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTest
parameter_list|(
name|int
name|maxLength
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|s
init|=
operator|new
name|String
index|[
name|count
operator|*
literal|2
index|]
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
condition|;
control|)
block|{
name|int
name|len
init|=
name|count
operator|==
literal|1
condition|?
name|maxLength
else|:
name|r
operator|.
name|nextInt
argument_list|(
name|maxLength
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|s
index|[
name|i
operator|++
index|]
operator|=
name|mk
operator|.
name|write
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|s
index|[
name|i
operator|++
index|]
operator|=
name|mk
operator|.
name|write
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|setSeed
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
condition|;
control|)
block|{
name|int
name|len
init|=
name|count
operator|==
literal|1
condition|?
name|maxLength
else|:
name|r
operator|.
name|nextInt
argument_list|(
name|maxLength
argument_list|)
decl_stmt|;
name|byte
index|[]
name|expectedData
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|expectedData
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|len
argument_list|,
name|mk
operator|.
name|getLength
argument_list|(
name|s
index|[
name|i
operator|++
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|s
index|[
name|i
operator|++
index|]
decl_stmt|;
name|doTestReadFully
argument_list|(
name|expectedData
argument_list|,
name|len
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|doTestRead
argument_list|(
name|expectedData
argument_list|,
name|len
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestReadFully
parameter_list|(
name|byte
index|[]
name|expectedData
parameter_list|,
name|int
name|expectedLen
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|got
init|=
name|MicroKernelInputStream
operator|.
name|readFully
argument_list|(
name|mk
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertByteArrayEquals
argument_list|(
name|expectedData
argument_list|,
name|expectedLen
argument_list|,
name|got
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertByteArrayEquals
parameter_list|(
name|byte
index|[]
name|expected
parameter_list|,
name|int
name|expectedLen
parameter_list|,
name|byte
index|[]
name|got
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedLen
argument_list|,
name|got
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|expectedLen
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|expected
index|[
name|j
index|]
operator|!=
name|got
index|[
name|j
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"j:"
operator|+
name|j
argument_list|,
name|expected
index|[
name|j
index|]
argument_list|,
name|got
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestRead
parameter_list|(
name|byte
index|[]
name|expectedData
parameter_list|,
name|int
name|expectedLen
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|in
init|=
operator|new
name|MicroKernelInputStream
argument_list|(
name|mk
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|buff
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|minLen
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|expectedLen
operator|>
literal|1000000
condition|)
block|{
name|minLen
operator|=
literal|4000
expr_stmt|;
block|}
name|int
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|op
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|0
condition|)
block|{
comment|// read one byte
name|int
name|x
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|buff
operator|.
name|write
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
literal|1
condition|)
block|{
comment|// skip a large number of bytes
name|long
name|n
init|=
name|minLen
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|long
name|skipped
init|=
name|in
operator|.
name|skip
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|skipped
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|buff
operator|.
name|write
argument_list|(
name|expectedData
argument_list|,
name|pos
argument_list|,
operator|(
name|int
operator|)
name|skipped
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|skipped
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
literal|2
condition|)
block|{
comment|// skip a small number of bytes (possibly negative)
name|long
name|n
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|-
literal|3
decl_stmt|;
name|long
name|skipped
init|=
name|in
operator|.
name|skip
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|skipped
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|buff
operator|.
name|write
argument_list|(
name|expectedData
argument_list|,
name|pos
argument_list|,
operator|(
name|int
operator|)
name|skipped
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|skipped
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
literal|3
condition|)
block|{
comment|// read a large number of bytes
name|byte
index|[]
name|x
init|=
operator|new
name|byte
index|[
name|minLen
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|5000
argument_list|)
index|]
decl_stmt|;
name|int
name|l
init|=
name|in
operator|.
name|read
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|buff
operator|.
name|write
argument_list|(
name|x
argument_list|,
literal|0
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|l
expr_stmt|;
block|}
else|else
block|{
comment|// read a small number of bytes
name|int
name|offset
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|minLen
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|byte
index|[]
name|x
init|=
operator|new
name|byte
index|[
name|offset
operator|+
name|len
index|]
decl_stmt|;
name|int
name|l
init|=
name|in
operator|.
name|read
argument_list|(
name|x
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|buff
operator|.
name|write
argument_list|(
name|x
argument_list|,
name|offset
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|l
expr_stmt|;
block|}
block|}
name|byte
index|[]
name|got
init|=
name|buff
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|assertByteArrayEquals
argument_list|(
name|expectedData
argument_list|,
name|expectedLen
argument_list|,
name|got
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

