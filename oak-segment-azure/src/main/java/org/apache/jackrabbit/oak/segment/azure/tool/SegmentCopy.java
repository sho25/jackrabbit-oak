begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|tool
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|tool
operator|.
name|ToolUtils
operator|.
name|newSegmentNodeStorePersistence
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|tool
operator|.
name|ToolUtils
operator|.
name|printMessage
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|tool
operator|.
name|ToolUtils
operator|.
name|printableStopwatch
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|tool
operator|.
name|ToolUtils
operator|.
name|storeDescription
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|tool
operator|.
name|ToolUtils
operator|.
name|storeTypeFromPathOrUri
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|tool
operator|.
name|ToolUtils
operator|.
name|SegmentStoreType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|RepositoryLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentNodeStorePersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
operator|.
name|Check
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_comment
comment|/**  * Perform a full-copy of repository data at segment level.  */
end_comment

begin_class
specifier|public
class|class
name|SegmentCopy
block|{
comment|/**      * Create a builder for the {@link SegmentCopy} command.      *      * @return an instance of {@link Builder}.      */
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|/**      * Collect options for the {@link SegmentCopy} command.      */
specifier|public
specifier|static
class|class
name|Builder
block|{
specifier|private
name|String
name|source
decl_stmt|;
specifier|private
name|String
name|destination
decl_stmt|;
specifier|private
name|SegmentNodeStorePersistence
name|srcPersistence
decl_stmt|;
specifier|private
name|SegmentNodeStorePersistence
name|destPersistence
decl_stmt|;
specifier|private
name|PrintWriter
name|outWriter
decl_stmt|;
specifier|private
name|PrintWriter
name|errWriter
decl_stmt|;
specifier|private
name|Builder
parameter_list|()
block|{
comment|// Prevent external instantiation.
block|}
comment|/**          * The source path/URI to an existing segment store. This parameter is required.          *          * @param source          *            the source path/URI to an existing segment store.          * @return this builder.          */
specifier|public
name|Builder
name|withSource
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|checkNotNull
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The destination path/URI to an existing segment store. This parameter is          * required.          *          * @param destination          *            the destination path/URI to an existing segment store.          * @return this builder.          */
specifier|public
name|Builder
name|withDestination
parameter_list|(
name|String
name|destination
parameter_list|)
block|{
name|this
operator|.
name|destination
operator|=
name|checkNotNull
argument_list|(
name|destination
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The destination {@link SegmentNodeStorePersistence}.          *          * @param srcPersistence          *            the destination {@link SegmentNodeStorePersistence}.          * @return this builder.          */
specifier|public
name|Builder
name|withSrcPersistencee
parameter_list|(
name|SegmentNodeStorePersistence
name|srcPersistence
parameter_list|)
block|{
name|this
operator|.
name|srcPersistence
operator|=
name|checkNotNull
argument_list|(
name|srcPersistence
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The destination {@link SegmentNodeStorePersistence}.          *          * @param destPersistence          *            the destination {@link SegmentNodeStorePersistence}.          * @return this builder.          */
specifier|public
name|Builder
name|withDestPersistence
parameter_list|(
name|SegmentNodeStorePersistence
name|destPersistence
parameter_list|)
block|{
name|this
operator|.
name|destPersistence
operator|=
name|checkNotNull
argument_list|(
name|destPersistence
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The text output stream writer used to print normal output.          *          * @param outWriter          *            the output writer.          * @return this builder.          */
specifier|public
name|Builder
name|withOutWriter
parameter_list|(
name|PrintWriter
name|outWriter
parameter_list|)
block|{
name|this
operator|.
name|outWriter
operator|=
name|outWriter
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The text error stream writer used to print erroneous output.          *          * @param errWriter          *            the error writer.          * @return this builder.          */
specifier|public
name|Builder
name|withErrWriter
parameter_list|(
name|PrintWriter
name|errWriter
parameter_list|)
block|{
name|this
operator|.
name|errWriter
operator|=
name|errWriter
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Create an executable version of the {@link Check} command.          *          * @return an instance of {@link Runnable}.          */
specifier|public
name|SegmentCopy
name|build
parameter_list|()
block|{
if|if
condition|(
name|srcPersistence
operator|==
literal|null
operator|&&
name|destPersistence
operator|==
literal|null
condition|)
block|{
name|checkNotNull
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SegmentCopy
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|final
name|String
name|source
decl_stmt|;
specifier|private
specifier|final
name|String
name|destination
decl_stmt|;
specifier|private
specifier|final
name|PrintWriter
name|outWriter
decl_stmt|;
specifier|private
specifier|final
name|PrintWriter
name|errWriter
decl_stmt|;
specifier|private
name|SegmentNodeStorePersistence
name|srcPersistence
decl_stmt|;
specifier|private
name|SegmentNodeStorePersistence
name|destPersistence
decl_stmt|;
specifier|public
name|SegmentCopy
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|builder
operator|.
name|source
expr_stmt|;
name|this
operator|.
name|destination
operator|=
name|builder
operator|.
name|destination
expr_stmt|;
name|this
operator|.
name|srcPersistence
operator|=
name|builder
operator|.
name|srcPersistence
expr_stmt|;
name|this
operator|.
name|destPersistence
operator|=
name|builder
operator|.
name|destPersistence
expr_stmt|;
name|this
operator|.
name|outWriter
operator|=
name|builder
operator|.
name|outWriter
expr_stmt|;
name|this
operator|.
name|errWriter
operator|=
name|builder
operator|.
name|errWriter
expr_stmt|;
block|}
specifier|public
name|int
name|run
parameter_list|()
block|{
name|Stopwatch
name|watch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|RepositoryLock
name|srcRepositoryLock
init|=
literal|null
decl_stmt|;
name|SegmentStoreType
name|srcType
init|=
name|storeTypeFromPathOrUri
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|SegmentStoreType
name|destType
init|=
name|storeTypeFromPathOrUri
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|String
name|srcDescription
init|=
name|storeDescription
argument_list|(
name|srcType
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|String
name|destDescription
init|=
name|storeDescription
argument_list|(
name|destType
argument_list|,
name|destination
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|srcPersistence
operator|==
literal|null
operator|||
name|destPersistence
operator|==
literal|null
condition|)
block|{
name|srcPersistence
operator|=
name|newSegmentNodeStorePersistence
argument_list|(
name|srcType
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|destPersistence
operator|=
name|newSegmentNodeStorePersistence
argument_list|(
name|destType
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
name|printMessage
argument_list|(
name|outWriter
argument_list|,
literal|"Started segment-copy transfer!"
argument_list|)
expr_stmt|;
name|printMessage
argument_list|(
name|outWriter
argument_list|,
literal|"Source: {0}"
argument_list|,
name|srcDescription
argument_list|)
expr_stmt|;
name|printMessage
argument_list|(
name|outWriter
argument_list|,
literal|"Destination: {0}"
argument_list|,
name|destDescription
argument_list|)
expr_stmt|;
try|try
block|{
name|srcRepositoryLock
operator|=
name|srcPersistence
operator|.
name|lockRepository
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Cannot lock source segment store {0} for starting copying process. Giving up!"
argument_list|,
name|srcDescription
argument_list|)
argument_list|)
throw|;
block|}
name|SegmentStoreMigrator
name|migrator
init|=
operator|new
name|SegmentStoreMigrator
operator|.
name|Builder
argument_list|()
operator|.
name|withSourcePersistence
argument_list|(
name|srcPersistence
argument_list|,
name|srcDescription
argument_list|)
operator|.
name|withTargetPersistence
argument_list|(
name|destPersistence
argument_list|,
name|destDescription
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|migrator
operator|.
name|migrate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|watch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|printMessage
argument_list|(
name|errWriter
argument_list|,
literal|"A problem occured while copying archives from {0} to {1} "
argument_list|,
name|source
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|errWriter
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|srcRepositoryLock
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|srcRepositoryLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|printMessage
argument_list|(
name|errWriter
argument_list|,
literal|"A problem occured while unlocking source repository {0} "
argument_list|,
name|srcDescription
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|errWriter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|watch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|printMessage
argument_list|(
name|outWriter
argument_list|,
literal|"Segment-copy succeeded in {0}"
argument_list|,
name|printableStopwatch
argument_list|(
name|watch
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

