begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|journal
package|;
end_package

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudAppendBlob
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|AzuriteDockerRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|ReverseFileReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_class
specifier|public
class|class
name|ReverseFileReaderTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
name|AzuriteDockerRule
name|azurite
init|=
operator|new
name|AzuriteDockerRule
argument_list|()
decl_stmt|;
specifier|private
name|CloudBlobContainer
name|container
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|StorageException
throws|,
name|InvalidKeyException
throws|,
name|URISyntaxException
block|{
name|container
operator|=
name|azurite
operator|.
name|getContainer
argument_list|(
literal|"oak-test"
argument_list|)
expr_stmt|;
name|getBlob
argument_list|()
operator|.
name|createOrReplace
argument_list|()
expr_stmt|;
block|}
specifier|private
name|CloudAppendBlob
name|getBlob
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|StorageException
block|{
return|return
name|container
operator|.
name|getAppendBlobReference
argument_list|(
literal|"test-blob"
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReverseReader
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|StorageException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|entries
init|=
name|createFile
argument_list|(
literal|1024
argument_list|,
literal|80
argument_list|)
decl_stmt|;
name|ReverseFileReader
name|reader
init|=
operator|new
name|ReverseFileReader
argument_list|(
name|getBlob
argument_list|()
argument_list|,
literal|256
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|entries
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyFile
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|StorageException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|entries
init|=
name|createFile
argument_list|(
literal|0
argument_list|,
literal|80
argument_list|)
decl_stmt|;
name|ReverseFileReader
name|reader
init|=
operator|new
name|ReverseFileReader
argument_list|(
name|getBlob
argument_list|()
argument_list|,
literal|256
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|entries
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test1ByteBlock
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|StorageException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|entries
init|=
name|createFile
argument_list|(
literal|10
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|ReverseFileReader
name|reader
init|=
operator|new
name|ReverseFileReader
argument_list|(
name|getBlob
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|entries
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|createFile
parameter_list|(
name|int
name|lines
parameter_list|,
name|int
name|maxLineLength
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|StorageException
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|CloudAppendBlob
name|blob
init|=
name|getBlob
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lines
condition|;
name|i
operator|++
control|)
block|{
name|int
name|entrySize
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|maxLineLength
argument_list|)
operator|+
literal|1
decl_stmt|;
name|String
name|entry
init|=
name|randomString
argument_list|(
name|entrySize
argument_list|)
decl_stmt|;
try|try
block|{
name|blob
operator|.
name|appendText
argument_list|(
name|entry
operator|+
literal|'\n'
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|entries
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|entries
argument_list|)
expr_stmt|;
return|return
name|entries
return|;
block|}
specifier|private
specifier|static
name|void
name|assertEquals
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|entries
parameter_list|,
name|ReverseFileReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
init|=
name|entries
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|e
range|:
name|entries
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"line "
operator|+
operator|(
operator|--
name|i
operator|)
argument_list|,
name|e
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNull
argument_list|(
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|randomString
parameter_list|(
name|int
name|entrySize
parameter_list|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entrySize
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
literal|'a'
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|'z'
operator|-
literal|'a'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

