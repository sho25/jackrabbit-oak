begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|s3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|Headers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|SSEAlgorithm
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|time
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|CloseableHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|InputStreamEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClients
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|AbstractDataStoreTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|directaccess
operator|.
name|ConfigurableDataRecordAccessProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|directaccess
operator|.
name|DataRecordAccessProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|directaccess
operator|.
name|DataRecordDownloadOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|directaccess
operator|.
name|DataRecordUpload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|directaccess
operator|.
name|DataRecordUploadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|s3
operator|.
name|S3DataStoreUtils
operator|.
name|getFixtures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|s3
operator|.
name|S3DataStoreUtils
operator|.
name|getS3Config
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|s3
operator|.
name|S3DataStoreUtils
operator|.
name|getS3DataStore
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|s3
operator|.
name|S3DataStoreUtils
operator|.
name|isS3Configured
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_comment
comment|/**  * Test {@link S3DataStore} with S3Backend and local cache on.  * It requires to pass aws config file via system property or system properties by prefixing with 'ds.'.  * See details @ {@link S3DataStoreUtils}.  * For e.g. -Dconfig=/opt/cq/aws.properties. Sample aws properties located at  * src/test/resources/aws.properties  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestS3Ds
extends|extends
name|AbstractDataStoreTest
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestS3Ds
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|long
name|ONE_KB
init|=
literal|1024
decl_stmt|;
specifier|protected
specifier|static
name|long
name|ONE_MB
init|=
name|ONE_KB
operator|*
name|ONE_KB
decl_stmt|;
specifier|protected
specifier|static
name|long
name|ONE_HUNDRED_MB
init|=
name|ONE_MB
operator|*
literal|100
decl_stmt|;
specifier|protected
specifier|static
name|long
name|ONE_GB
init|=
name|ONE_HUNDRED_MB
operator|*
literal|10
decl_stmt|;
specifier|private
specifier|static
name|Date
name|overallStartTime
init|=
name|getBackdatedDate
argument_list|()
decl_stmt|;
specifier|private
name|Date
name|thisTestStartTime
init|=
literal|null
decl_stmt|;
specifier|protected
name|Properties
name|props
decl_stmt|;
specifier|protected
name|String
name|bucket
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
specifier|public
name|String
name|s3Class
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{index}: ({0})"
argument_list|)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|fixtures
parameter_list|()
block|{
return|return
name|getFixtures
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Date
name|getBackdatedDate
parameter_list|()
block|{
comment|// Use a backdated date to accommodate time drift when deleting created resources.
return|return
name|DateUtils
operator|.
name|addMinutes
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|assumptions
parameter_list|()
block|{
name|assumeTrue
argument_list|(
name|isS3Configured
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|createdBucketNames
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|props
operator|=
name|getS3Config
argument_list|()
expr_stmt|;
name|thisTestStartTime
operator|=
name|getBackdatedDate
argument_list|()
expr_stmt|;
name|bucket
operator|=
name|randomGen
operator|.
name|nextInt
argument_list|(
literal|9999
argument_list|)
operator|+
literal|"-"
operator|+
name|randomGen
operator|.
name|nextInt
argument_list|(
literal|9999
argument_list|)
operator|+
literal|"-s3ds-unittest-autogenerated"
expr_stmt|;
name|createdBucketNames
operator|.
name|add
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|S3Constants
operator|.
name|S3_BUCKET
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"secret"
argument_list|,
literal|"123456"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|S3Constants
operator|.
name|PRESIGNED_HTTP_DOWNLOAD_URI_EXPIRY_SECONDS
argument_list|,
literal|"60"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|S3Constants
operator|.
name|PRESIGNED_HTTP_UPLOAD_URI_EXPIRY_SECONDS
argument_list|,
literal|"60"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|S3Constants
operator|.
name|PRESIGNED_URI_ENABLE_ACCELERATION
argument_list|,
literal|"60"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|S3Constants
operator|.
name|PRESIGNED_HTTP_DOWNLOAD_URI_CACHE_MAX_SIZE
argument_list|,
literal|"60"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|S3Constants
operator|.
name|S3_ENCRYPTION
argument_list|,
name|S3Constants
operator|.
name|S3_ENCRYPTION_NONE
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitiateDirectUploadUnlimitedURIs
parameter_list|()
throws|throws
name|DataRecordUploadException
throws|,
name|RepositoryException
block|{
name|ConfigurableDataRecordAccessProvider
name|ds
init|=
operator|(
name|ConfigurableDataRecordAccessProvider
operator|)
name|createDataStore
argument_list|()
decl_stmt|;
name|long
name|uploadSize
init|=
name|ONE_GB
operator|*
literal|50
decl_stmt|;
name|int
name|expectedNumURIs
init|=
literal|5000
decl_stmt|;
name|DataRecordUpload
name|upload
init|=
name|ds
operator|.
name|initiateDataRecordUpload
argument_list|(
name|uploadSize
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedNumURIs
argument_list|,
name|upload
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|uploadSize
operator|=
name|ONE_GB
operator|*
literal|100
expr_stmt|;
name|expectedNumURIs
operator|=
literal|10000
expr_stmt|;
name|upload
operator|=
name|ds
operator|.
name|initiateDataRecordUpload
argument_list|(
name|uploadSize
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedNumURIs
argument_list|,
name|upload
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|uploadSize
operator|=
name|ONE_GB
operator|*
literal|200
expr_stmt|;
name|upload
operator|=
name|ds
operator|.
name|initiateDataRecordUpload
argument_list|(
name|uploadSize
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedNumURIs
argument_list|,
name|upload
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDownloadURI
parameter_list|()
throws|throws
name|IOException
throws|,
name|RepositoryException
block|{
name|DataStore
name|ds
init|=
name|createDataStore
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|dataLength
index|]
decl_stmt|;
name|randomGen
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|DataRecord
name|record
init|=
name|doSynchronousAddRecord
argument_list|(
name|ds
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
operator|(
operator|(
name|DataRecordAccessProvider
operator|)
name|ds
operator|)
operator|.
name|getDownloadURI
argument_list|(
name|record
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|DataRecordDownloadOptions
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"uri is null"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
comment|// Download content from the URI directly and check
name|HttpEntity
name|entity
init|=
name|httpGet
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|assertStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|,
name|entity
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|// Download with DataStore API and check
name|DataRecord
name|getrec
init|=
name|ds
operator|.
name|getRecord
argument_list|(
name|record
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|getrec
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|getrec
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertRecord
argument_list|(
name|data
argument_list|,
name|getrec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDataMigration
parameter_list|()
block|{
try|try
block|{
name|String
name|encryption
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|S3Constants
operator|.
name|S3_ENCRYPTION
argument_list|)
decl_stmt|;
comment|//manually close the setup ds and remove encryption
name|ds
operator|.
name|close
argument_list|()
expr_stmt|;
name|props
operator|.
name|remove
argument_list|(
name|S3Constants
operator|.
name|S3_ENCRYPTION
argument_list|)
expr_stmt|;
name|ds
operator|=
name|createDataStore
argument_list|()
expr_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|dataLength
index|]
decl_stmt|;
name|randomGen
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|DataRecord
name|rec
init|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|rec
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertRecord
argument_list|(
name|data
argument_list|,
name|rec
argument_list|)
expr_stmt|;
name|ds
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// turn encryption now anc recreate datastore instance
name|props
operator|.
name|setProperty
argument_list|(
name|S3Constants
operator|.
name|S3_ENCRYPTION
argument_list|,
name|encryption
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|S3Constants
operator|.
name|S3_RENAME_KEYS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|ds
operator|=
name|createDataStore
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|null
argument_list|,
name|ds
argument_list|)
expr_stmt|;
name|rec
operator|=
name|ds
operator|.
name|getRecord
argument_list|(
name|rec
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|null
argument_list|,
name|rec
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|rec
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertRecord
argument_list|(
name|data
argument_list|,
name|rec
argument_list|)
expr_stmt|;
name|randomGen
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|rec
operator|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|DataRecord
name|rec1
init|=
name|ds
operator|.
name|getRecord
argument_list|(
name|rec
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rec
operator|.
name|getLength
argument_list|()
argument_list|,
name|rec1
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertRecord
argument_list|(
name|data
argument_list|,
name|rec
argument_list|)
expr_stmt|;
name|ds
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitiateCompleteUpload
parameter_list|()
throws|throws
name|IOException
throws|,
name|RepositoryException
throws|,
name|IllegalArgumentException
throws|,
name|DataRecordUploadException
block|{
name|S3DataStore
name|ds
init|=
operator|(
name|S3DataStore
operator|)
name|createDataStore
argument_list|()
decl_stmt|;
name|ds
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
literal|60
operator|*
literal|5
argument_list|)
expr_stmt|;
name|ds
operator|.
name|setDirectDownloadURIExpirySeconds
argument_list|(
literal|60
operator|*
literal|5
argument_list|)
expr_stmt|;
name|ds
operator|.
name|setDirectDownloadURICacheSize
argument_list|(
literal|60
operator|*
literal|5
argument_list|)
expr_stmt|;
name|DataRecordUpload
name|uploadContext
init|=
name|ds
operator|.
name|initiateDataRecordUpload
argument_list|(
name|ONE_GB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|uploadContext
argument_list|)
expr_stmt|;
name|String
name|uploadToken
init|=
name|uploadContext
operator|.
name|getUploadToken
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|dataLength
index|]
decl_stmt|;
name|randomGen
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// Upload directly using the URI and check
name|CloseableHttpResponse
name|response
init|=
name|httpPut
argument_list|(
name|uploadContext
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|,
name|data
operator|.
name|length
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|DataRecord
name|uploadedRecord
init|=
name|ds
operator|.
name|completeDataRecordUpload
argument_list|(
name|uploadToken
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|uploadedRecord
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|uploadedRecord
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertRecord
argument_list|(
name|data
argument_list|,
name|uploadedRecord
argument_list|)
expr_stmt|;
comment|// Retieve through DataStore API and check
name|DataRecord
name|getrec
init|=
name|ds
operator|.
name|getRecord
argument_list|(
name|uploadedRecord
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|getrec
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|getrec
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertRecord
argument_list|(
name|data
argument_list|,
name|getrec
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CloseableHttpResponse
name|httpPut
parameter_list|(
annotation|@
name|Nullable
name|DataRecordUpload
name|uploadContext
parameter_list|,
name|InputStream
name|inputstream
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
comment|// this weird combination of @Nullable and assertNotNull() is for IDEs not warning in test methods
name|assertNotNull
argument_list|(
name|uploadContext
argument_list|)
expr_stmt|;
name|URI
name|puturl
init|=
name|uploadContext
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|HttpPut
name|putreq
init|=
operator|new
name|HttpPut
argument_list|(
name|puturl
argument_list|)
decl_stmt|;
name|String
name|keyId
init|=
literal|null
decl_stmt|;
name|String
name|encryptionType
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|S3Constants
operator|.
name|S3_ENCRYPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|encryptionType
operator|.
name|equals
argument_list|(
name|S3Constants
operator|.
name|S3_ENCRYPTION_SSE_KMS
argument_list|)
condition|)
block|{
name|keyId
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|S3Constants
operator|.
name|S3_SSE_KMS_KEYID
argument_list|)
expr_stmt|;
name|putreq
operator|.
name|addHeader
argument_list|(
operator|new
name|BasicHeader
argument_list|(
name|Headers
operator|.
name|SERVER_SIDE_ENCRYPTION
argument_list|,
name|SSEAlgorithm
operator|.
name|KMS
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyId
operator|!=
literal|null
condition|)
block|{
name|putreq
operator|.
name|addHeader
argument_list|(
operator|new
name|BasicHeader
argument_list|(
name|Headers
operator|.
name|SERVER_SIDE_ENCRYPTION_AWS_KMS_KEYID
argument_list|,
name|keyId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|putreq
operator|.
name|setEntity
argument_list|(
operator|new
name|InputStreamEntity
argument_list|(
name|inputstream
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|CloseableHttpClient
name|httpclient
init|=
name|HttpClients
operator|.
name|createDefault
argument_list|()
decl_stmt|;
name|CloseableHttpResponse
name|response
init|=
name|httpclient
operator|.
name|execute
argument_list|(
name|putreq
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
specifier|private
name|HttpEntity
name|httpGet
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpGet
name|getreq
init|=
operator|new
name|HttpGet
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|CloseableHttpClient
name|httpclient
init|=
name|HttpClients
operator|.
name|createDefault
argument_list|()
decl_stmt|;
name|CloseableHttpResponse
name|res
init|=
name|httpclient
operator|.
name|execute
argument_list|(
name|getreq
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|res
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|res
operator|.
name|getEntity
argument_list|()
return|;
block|}
specifier|protected
name|DataRecord
name|doSynchronousAddRecord
parameter_list|(
name|DataStore
name|ds
parameter_list|,
name|InputStream
name|in
parameter_list|)
throws|throws
name|DataStoreException
block|{
return|return
operator|(
operator|(
name|S3DataStore
operator|)
name|ds
operator|)
operator|.
name|addRecord
argument_list|(
name|in
argument_list|,
operator|new
name|BlobOptions
argument_list|()
operator|.
name|setUpload
argument_list|(
name|BlobOptions
operator|.
name|UploadType
operator|.
name|SYNCHRONOUS
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|assertStream
parameter_list|(
name|InputStream
name|expected
parameter_list|,
name|InputStream
name|actual
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|expectedByte
init|=
name|expected
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|actualByte
init|=
name|actual
operator|.
name|read
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedByte
argument_list|,
name|actualByte
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedByte
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
block|}
block|}
annotation|@
name|Override
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
try|try
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{ }
try|try
block|{
name|S3DataStoreUtils
operator|.
name|deleteBucket
argument_list|(
name|bucket
argument_list|,
name|thisTestStartTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{ }
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|verifyAllBucketsDeleted
parameter_list|()
block|{
for|for
control|(
name|String
name|bucket
range|:
name|createdBucketNames
control|)
block|{
try|try
block|{
name|S3DataStoreUtils
operator|.
name|deleteBucket
argument_list|(
name|bucket
argument_list|,
name|overallStartTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{ }
block|}
block|}
specifier|protected
name|DataStore
name|createDataStore
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|DataStore
name|s3ds
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s3ds
operator|=
name|getS3DataStore
argument_list|(
name|s3Class
argument_list|,
name|props
argument_list|,
name|dataStoreDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
return|return
name|s3ds
return|;
block|}
comment|/**----------Not supported-----------**/
annotation|@
name|Override
specifier|public
name|void
name|testUpdateLastModifiedOnAccess
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|testDeleteAllOlderThan
parameter_list|()
block|{     }
block|}
end_class

end_unit

