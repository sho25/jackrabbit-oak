begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|perf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
operator|.
name|util
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_class
specifier|public
class|class
name|RandomJsopGenerator
block|{
specifier|private
specifier|static
specifier|final
name|int
name|OP_ADD_NODE
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|OP_SET_PROP
init|=
literal|1
decl_stmt|;
specifier|private
name|Node
index|[]
name|descendants
decl_stmt|;
specifier|private
name|String
name|path
decl_stmt|;
specifier|private
name|Random
name|random
decl_stmt|;
specifier|public
name|RandomJsopGenerator
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|setSeed
argument_list|(
literal|""
argument_list|,
literal|"{ \"/\" : {} }"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RandomJsop
name|nextRandom
parameter_list|()
block|{
name|JsopBuilder
name|jsopBuilder
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|int
name|numOps
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOps
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|this
operator|.
name|createRandomOp
argument_list|(
name|jsopBuilder
argument_list|)
condition|)
block|{
name|jsopBuilder
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
else|else
block|{
operator|--
name|i
expr_stmt|;
block|}
block|}
return|return
operator|new
name|RandomJsop
argument_list|(
name|path
argument_list|,
name|jsopBuilder
operator|.
name|toString
argument_list|()
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSeed
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|json
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|String
name|all
init|=
name|String
operator|.
name|format
argument_list|(
literal|"{ \"%s\" : %s }"
argument_list|,
name|PathUtils
operator|.
name|getName
argument_list|(
name|path
argument_list|)
argument_list|,
name|json
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|all
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|descendants
operator|=
operator|new
name|Node
index|[
name|node
operator|.
name|getChildNodeCount
argument_list|()
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Node
argument_list|>
name|it
init|=
name|node
operator|.
name|getChildNodeEntries
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|descendants
index|[
name|i
operator|++
index|]
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|random
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|createRandomAddNodeOp
parameter_list|(
name|JsopBuilder
name|jsopBuilder
parameter_list|)
block|{
name|Node
name|random
init|=
name|selectRandom
argument_list|()
decl_stmt|;
name|String
name|childName
init|=
name|createRandomString
argument_list|()
decl_stmt|;
name|String
name|newPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|random
operator|.
name|getPath
argument_list|()
argument_list|,
name|childName
argument_list|)
decl_stmt|;
name|String
name|addPath
init|=
name|newPath
decl_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|addPath
operator|=
name|PathUtils
operator|.
name|relativize
argument_list|(
name|path
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
block|}
name|jsopBuilder
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
name|jsopBuilder
operator|.
name|key
argument_list|(
name|addPath
argument_list|)
expr_stmt|;
name|jsopBuilder
operator|.
name|object
argument_list|()
expr_stmt|;
name|jsopBuilder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|createRandomSetPropOp
parameter_list|(
name|JsopBuilder
name|jsopBuilder
parameter_list|)
block|{
name|int
name|next
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|this
operator|.
name|descendants
operator|.
name|length
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|descendants
index|[
name|next
index|]
decl_stmt|;
name|String
name|addPath
init|=
name|PathUtils
operator|.
name|relativize
argument_list|(
name|path
argument_list|,
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|addPath
argument_list|)
condition|)
block|{
name|addPath
operator|=
literal|"/"
expr_stmt|;
block|}
name|int
name|numProps
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numProps
condition|;
operator|++
name|i
control|)
block|{
name|String
name|propName
init|=
name|createRandomString
argument_list|()
decl_stmt|;
name|String
name|propValue
init|=
name|createRandomString
argument_list|()
decl_stmt|;
name|jsopBuilder
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
expr_stmt|;
name|jsopBuilder
operator|.
name|key
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|addPath
argument_list|,
name|propName
argument_list|)
argument_list|)
expr_stmt|;
name|jsopBuilder
operator|.
name|value
argument_list|(
name|propValue
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|createRandomOp
parameter_list|(
name|JsopBuilder
name|jsopBuilder
parameter_list|)
block|{
name|boolean
name|performed
init|=
literal|false
decl_stmt|;
name|int
name|op
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|OP_ADD_NODE
case|:
block|{
name|performed
operator|=
name|createRandomAddNodeOp
argument_list|(
name|jsopBuilder
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OP_SET_PROP
case|:
block|{
name|performed
operator|=
name|createRandomSetPropOp
argument_list|(
name|jsopBuilder
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|performed
return|;
block|}
specifier|private
name|String
name|createRandomString
parameter_list|()
block|{
name|int
name|length
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
operator|+
literal|5
decl_stmt|;
name|char
index|[]
name|chars
init|=
operator|new
name|char
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|char
name|rand
init|=
call|(
name|char
call|)
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|65
argument_list|)
operator|+
literal|59
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|rand
argument_list|)
condition|)
block|{
name|chars
index|[
name|i
index|]
operator|=
name|rand
expr_stmt|;
block|}
else|else
block|{
operator|--
name|i
expr_stmt|;
block|}
block|}
return|return
operator|new
name|String
argument_list|(
name|chars
argument_list|)
return|;
block|}
specifier|private
name|Node
name|selectRandom
parameter_list|()
block|{
name|int
name|next
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|this
operator|.
name|descendants
operator|.
name|length
argument_list|)
decl_stmt|;
name|Node
name|randomNode
init|=
name|descendants
index|[
name|next
index|]
decl_stmt|;
return|return
name|randomNode
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|RandomJsopGenerator
name|gen
init|=
operator|new
name|RandomJsopGenerator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|RandomJsop
name|rand
init|=
name|gen
operator|.
name|nextRandom
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|rand
operator|.
name|path
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|rand
operator|.
name|jsop
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|RandomJsop
block|{
specifier|private
specifier|final
name|String
name|jsop
decl_stmt|;
specifier|private
specifier|final
name|String
name|message
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|public
name|RandomJsop
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|jsop
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|jsop
operator|=
name|jsop
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
specifier|public
name|String
name|getJsop
parameter_list|()
block|{
return|return
name|jsop
return|;
block|}
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
block|}
block|}
end_class

end_unit

