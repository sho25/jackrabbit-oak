begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * Utility methods to use in an OSGi environment.  */
end_comment

begin_class
specifier|public
class|class
name|OsgiUtil
block|{
specifier|private
name|OsgiUtil
parameter_list|()
block|{
comment|// Prevent instantiation.
block|}
comment|/**      * Looks a property up by name in a component context. Returns {@code null}      * if the property is not found or if the property is found but it is an      * empty string.      *      * @param context Component context.      * @param name    Name of the property.      * @return The property value serialized as a string, or {@code null}.      */
specifier|public
specifier|static
name|String
name|lookup
parameter_list|(
name|ComponentContext
name|context
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|asString
argument_list|(
name|checkNotNull
argument_list|(
name|context
argument_list|)
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|checkNotNull
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Looks a property up by name in the set of framework properties. Returns      * {@code null} if the property is not found or if the property is found but      * it is an empty string.      *      * @param context Bundle context.      * @param name    Name of the property.      * @return The property value serialized as a string, or {@code null}.      */
specifier|public
specifier|static
name|String
name|lookup
parameter_list|(
name|BundleContext
name|context
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|asString
argument_list|(
name|checkNotNull
argument_list|(
name|context
argument_list|)
operator|.
name|getProperty
argument_list|(
name|checkNotNull
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Looks a property up by name in the component context first, falling back      * in the framework properties if not found. Returns {@code null} if the      * property is not found or if the property is found but it is an empty      * string.      *      * @param context Component context.      * @param name    Name of the property.      * @return The property value serialized as a string, or {@code null}.      */
specifier|public
specifier|static
name|String
name|lookupConfigurationThenFramework
parameter_list|(
name|ComponentContext
name|context
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|lookupConfigurationThenFramework
argument_list|(
name|context
argument_list|,
name|name
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/**      * Looks a property up by name in the component context first, falling back      * in the framework properties if not found. Returns {@code null} if the      * property is not found or if the property is found but it is an empty      * string.      *      * @param context         Component context.      * @param nameInComponent Name of the property in the component context.      * @param nameInFramework Name of the property in the framework properties.      * @return The property value serialized as a string, or {@code null}.      */
specifier|public
specifier|static
name|String
name|lookupConfigurationThenFramework
parameter_list|(
name|ComponentContext
name|context
parameter_list|,
name|String
name|nameInComponent
parameter_list|,
name|String
name|nameInFramework
parameter_list|)
block|{
name|String
name|fromComponent
init|=
name|lookup
argument_list|(
name|context
argument_list|,
name|nameInComponent
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromComponent
operator|!=
literal|null
condition|)
block|{
return|return
name|fromComponent
return|;
block|}
name|String
name|fromFramework
init|=
name|lookup
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|,
name|nameInFramework
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromFramework
operator|!=
literal|null
condition|)
block|{
return|return
name|fromFramework
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Looks a property up by name in the framework properties first, falling      * back to the component context if not not found. Returns {@code null} if      * the property is not found or if the property is found but it is an empty      * string.      *      * @param context Component context.      * @param name    Name of the property.      * @return The property value serialized as a string, or {@code null}.      */
specifier|public
specifier|static
name|String
name|lookupFrameworkThenConfiguration
parameter_list|(
name|ComponentContext
name|context
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|lookupFrameworkThenConfiguration
argument_list|(
name|context
argument_list|,
name|name
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/**      * Looks a property up by name in the framework properties first, falling      * back to the component context if not not found. Returns {@code null} if      * the property is not found or if the property is found but it is an empty      * string.      *      * @param context         Component context.      * @param nameInComponent Name of the property in the component context.      * @param nameInFramework Name of the property in the framework properties.      * @return The property value serialized as a string, or {@code null}.      */
specifier|public
specifier|static
name|String
name|lookupFrameworkThenConfiguration
parameter_list|(
name|ComponentContext
name|context
parameter_list|,
name|String
name|nameInComponent
parameter_list|,
name|String
name|nameInFramework
parameter_list|)
block|{
name|String
name|fromFramework
init|=
name|lookup
argument_list|(
name|checkNotNull
argument_list|(
name|context
argument_list|)
operator|.
name|getBundleContext
argument_list|()
argument_list|,
name|nameInFramework
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromFramework
operator|!=
literal|null
condition|)
block|{
return|return
name|fromFramework
return|;
block|}
name|String
name|fromComponent
init|=
name|lookup
argument_list|(
name|context
argument_list|,
name|nameInComponent
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromComponent
operator|!=
literal|null
condition|)
block|{
return|return
name|fromComponent
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|String
name|asString
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|string
init|=
name|value
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|string
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|string
return|;
block|}
comment|/**      * Create a {@link Filter} using the passed Class as an objectClass and the map      * as the filter attributes.      * @param clazz the target objectClass      * @param attributes target attributes (null value for the absence)      * @return OSGi filter representing the input      */
specifier|public
specifier|static
name|Filter
name|getFilter
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
parameter_list|)
block|{
name|StringBuilder
name|filterBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"(&"
argument_list|)
decl_stmt|;
name|appendLdapFilterAttribute
argument_list|(
name|filterBuilder
argument_list|,
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|appendLdapFilterAttribute
argument_list|(
name|filterBuilder
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|filterBuilder
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|FrameworkUtil
operator|.
name|createFilter
argument_list|(
name|filterBuilder
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|static
name|StringBuilder
name|appendLdapFilterAttribute
parameter_list|(
name|StringBuilder
name|filterBuilder
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|filterBuilder
operator|.
name|append
argument_list|(
literal|"(!("
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
literal|"=*))"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filterBuilder
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|appendEscapedLdapValue
argument_list|(
name|filterBuilder
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|filterBuilder
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
return|return
name|filterBuilder
return|;
block|}
specifier|static
name|StringBuilder
name|appendEscapedLdapValue
parameter_list|(
name|StringBuilder
name|filterBuilder
parameter_list|,
name|String
name|value
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|value
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|c
operator|==
literal|'\\'
operator|)
operator|||
operator|(
name|c
operator|==
literal|'('
operator|)
operator|||
operator|(
name|c
operator|==
literal|')'
operator|)
operator|||
operator|(
name|c
operator|==
literal|'*'
operator|)
condition|)
block|{
name|filterBuilder
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
block|}
name|filterBuilder
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|filterBuilder
return|;
block|}
block|}
end_class

end_unit

