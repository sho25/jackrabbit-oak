begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|System
operator|.
name|arraycopy
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|binarySearch
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Segment
operator|.
name|RECORD_ALIGN_BITS
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A memory optimised set of {@link RecordId}s.  *  * The set doesn't keep references to the actual record ids  * it contains.  */
end_comment

begin_class
specifier|public
class|class
name|RecordIdSet
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ShortSet
argument_list|>
name|seenIds
init|=
name|newHashMap
argument_list|()
decl_stmt|;
comment|/**      * Add {@code id} to this set if not already present      * @param id  the record id to add      * @return  {@code true} if added, {@code false} if already present      */
specifier|public
name|boolean
name|addIfNotPresent
parameter_list|(
name|RecordId
name|id
parameter_list|)
block|{
name|String
name|segmentId
init|=
name|id
operator|.
name|getSegmentId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ShortSet
name|offsets
init|=
name|seenIds
operator|.
name|get
argument_list|(
name|segmentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|offsets
operator|==
literal|null
condition|)
block|{
name|offsets
operator|=
operator|new
name|ShortSet
argument_list|()
expr_stmt|;
name|seenIds
operator|.
name|put
argument_list|(
name|segmentId
argument_list|,
name|offsets
argument_list|)
expr_stmt|;
block|}
return|return
name|offsets
operator|.
name|add
argument_list|(
name|crop
argument_list|(
name|id
operator|.
name|getOffset
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Check whether {@code id} is present is this set.      * @param id  the record id to check for      * @return  {@code true} iff {@code id} is present.      */
specifier|public
name|boolean
name|contains
parameter_list|(
name|RecordId
name|id
parameter_list|)
block|{
name|String
name|segmentId
init|=
name|id
operator|.
name|getSegmentId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ShortSet
name|offsets
init|=
name|seenIds
operator|.
name|get
argument_list|(
name|segmentId
argument_list|)
decl_stmt|;
return|return
name|offsets
operator|!=
literal|null
operator|&&
name|offsets
operator|.
name|contains
argument_list|(
name|crop
argument_list|(
name|id
operator|.
name|getOffset
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|short
name|crop
parameter_list|(
name|int
name|value
parameter_list|)
block|{
return|return
call|(
name|short
call|)
argument_list|(
name|value
operator|>>
name|RECORD_ALIGN_BITS
argument_list|)
return|;
block|}
specifier|static
class|class
name|ShortSet
block|{
name|short
index|[]
name|elements
decl_stmt|;
name|boolean
name|add
parameter_list|(
name|short
name|n
parameter_list|)
block|{
if|if
condition|(
name|elements
operator|==
literal|null
condition|)
block|{
name|elements
operator|=
operator|new
name|short
index|[
literal|1
index|]
expr_stmt|;
name|elements
index|[
literal|0
index|]
operator|=
name|n
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|int
name|k
init|=
name|binarySearch
argument_list|(
name|elements
argument_list|,
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|<
literal|0
condition|)
block|{
name|int
name|l
init|=
operator|-
name|k
operator|-
literal|1
decl_stmt|;
name|short
index|[]
name|e
init|=
operator|new
name|short
index|[
name|elements
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|arraycopy
argument_list|(
name|elements
argument_list|,
literal|0
argument_list|,
name|e
argument_list|,
literal|0
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|e
index|[
name|l
index|]
operator|=
name|n
expr_stmt|;
name|int
name|c
init|=
name|elements
operator|.
name|length
operator|-
name|l
decl_stmt|;
if|if
condition|(
name|c
operator|>
literal|0
condition|)
block|{
name|arraycopy
argument_list|(
name|elements
argument_list|,
name|l
argument_list|,
name|e
argument_list|,
name|l
operator|+
literal|1
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|elements
operator|=
name|e
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
name|boolean
name|contains
parameter_list|(
name|short
name|n
parameter_list|)
block|{
return|return
name|elements
operator|!=
literal|null
operator|&&
name|binarySearch
argument_list|(
name|elements
argument_list|,
name|n
argument_list|)
operator|>=
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

