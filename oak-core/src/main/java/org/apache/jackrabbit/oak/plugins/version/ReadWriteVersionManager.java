begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|identifier
operator|.
name|IdentifierManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|ReadOnlyNodeTypeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|TypePredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|RootFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|ISO8601
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_BASEVERSION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_CREATED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_ISCHECKEDOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PREDECESSORS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_ROOTVERSION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SUCCESSORS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_VERSIONABLEUUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_VERSIONHISTORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_VERSIONLABELS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_VERSION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_VERSIONHISTORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_VERSIONLABELS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|Utils
operator|.
name|uuidFromNode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionConstants
operator|.
name|JCR_COPIED_FROM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionConstants
operator|.
name|REP_VERSIONSTORAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionConstants
operator|.
name|VERSION_STORE_PATH
import|;
end_import

begin_comment
comment|/**  * Extends the {@link ReadOnlyVersionManager} with methods to modify the  * version store.  */
end_comment

begin_class
specifier|public
class|class
name|ReadWriteVersionManager
extends|extends
name|ReadOnlyVersionManager
block|{
specifier|private
specifier|final
name|NodeBuilder
name|versionStorageNode
decl_stmt|;
specifier|private
specifier|final
name|NodeBuilder
name|workspaceRoot
decl_stmt|;
specifier|private
specifier|final
name|TypePredicate
name|isVersion
decl_stmt|;
specifier|private
name|ReadOnlyNodeTypeManager
name|ntMgr
decl_stmt|;
specifier|public
name|ReadWriteVersionManager
parameter_list|(
name|NodeBuilder
name|versionStorageNode
parameter_list|,
name|NodeBuilder
name|workspaceRoot
parameter_list|)
block|{
name|this
operator|.
name|versionStorageNode
operator|=
name|checkNotNull
argument_list|(
name|versionStorageNode
argument_list|)
expr_stmt|;
name|this
operator|.
name|workspaceRoot
operator|=
name|checkNotNull
argument_list|(
name|workspaceRoot
argument_list|)
expr_stmt|;
name|this
operator|.
name|isVersion
operator|=
operator|new
name|TypePredicate
argument_list|(
name|workspaceRoot
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|NT_VERSION
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|protected
name|Tree
name|getVersionStorage
parameter_list|()
block|{
return|return
name|TreeFactory
operator|.
name|createReadOnlyTree
argument_list|(
name|versionStorageNode
operator|.
name|getNodeState
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|protected
name|Root
name|getWorkspaceRoot
parameter_list|()
block|{
return|return
name|RootFactory
operator|.
name|createReadOnlyRoot
argument_list|(
name|workspaceRoot
operator|.
name|getNodeState
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|protected
name|ReadOnlyNodeTypeManager
name|getNodeTypeManager
parameter_list|()
block|{
if|if
condition|(
name|ntMgr
operator|==
literal|null
condition|)
block|{
name|ntMgr
operator|=
name|ReadOnlyNodeTypeManager
operator|.
name|getInstance
argument_list|(
name|getWorkspaceRoot
argument_list|()
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
return|return
name|ntMgr
return|;
block|}
comment|/**      * Gets or creates the version history for the given      * {@code versionable} node.      *      * @param versionable the versionable node.      * @param infoMap The additional information as provided by {@link org.apache.jackrabbit.oak.spi.commit.CommitInfo#getInfo()}      * @return the version history node.      * @throws IllegalArgumentException if the given node does not have a      *                                  {@code jcr:uuid} property.      */
annotation|@
name|Nonnull
specifier|public
name|NodeBuilder
name|getOrCreateVersionHistory
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|versionable
parameter_list|,
annotation|@
name|Nonnull
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|infoMap
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|checkNotNull
argument_list|(
name|versionable
argument_list|)
expr_stmt|;
name|String
name|vUUID
init|=
name|uuidFromNode
argument_list|(
name|versionable
argument_list|)
decl_stmt|;
name|String
name|relPath
init|=
name|getVersionHistoryPath
argument_list|(
name|vUUID
argument_list|)
decl_stmt|;
name|NodeBuilder
name|node
init|=
name|versionStorageNode
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|PathUtils
operator|.
name|elements
argument_list|(
name|relPath
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|node
operator|=
name|node
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|hasProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
condition|)
block|{
name|String
name|nt
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|nt
operator|=
name|REP_VERSIONSTORAGE
expr_stmt|;
block|}
else|else
block|{
comment|// last path element denotes nt:versionHistory node
name|nt
operator|=
name|NT_VERSIONHISTORY
expr_stmt|;
block|}
name|node
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|nt
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
block|}
name|Object
name|copiedFrom
init|=
name|infoMap
operator|.
name|get
argument_list|(
name|JCR_COPIED_FROM
argument_list|)
decl_stmt|;
if|if
condition|(
name|copiedFrom
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|setProperty
argument_list|(
name|JCR_COPIED_FROM
argument_list|,
name|copiedFrom
operator|.
name|toString
argument_list|()
argument_list|,
name|Type
operator|.
name|WEAKREFERENCE
argument_list|)
expr_stmt|;
block|}
comment|// use jcr:rootVersion node to detect if we need to initialize the
comment|// version history
if|if
condition|(
operator|!
name|node
operator|.
name|hasChildNode
argument_list|(
name|JCR_ROOTVERSION
argument_list|)
condition|)
block|{
comment|// jcr:versionableUuid property
name|node
operator|.
name|setProperty
argument_list|(
name|JCR_VERSIONABLEUUID
argument_list|,
name|vUUID
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|JCR_UUID
argument_list|,
name|IdentifierManager
operator|.
name|generateUUID
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
comment|// jcr:versionLabels child node
name|NodeBuilder
name|vLabels
init|=
name|node
operator|.
name|child
argument_list|(
name|JCR_VERSIONLABELS
argument_list|)
decl_stmt|;
name|vLabels
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_VERSIONLABELS
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
comment|// jcr:rootVersion child node
name|createVersion
argument_list|(
name|node
argument_list|,
name|versionable
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|versionable
operator|.
name|hasProperty
argument_list|(
name|JCR_VERSIONHISTORY
argument_list|)
condition|)
block|{
comment|// connect versionable node with existing history
name|connectHistory
argument_list|(
name|node
operator|.
name|getChildNode
argument_list|(
name|JCR_ROOTVERSION
argument_list|)
argument_list|,
name|uuidFromNode
argument_list|(
name|node
argument_list|)
argument_list|,
name|versionable
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
name|void
name|removeVersion
parameter_list|(
name|String
name|versionRelPath
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|String
name|historyRelPath
init|=
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
name|versionRelPath
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|versionName
init|=
name|Text
operator|.
name|getName
argument_list|(
name|versionRelPath
argument_list|)
decl_stmt|;
name|NodeBuilder
name|vh
init|=
name|resolve
argument_list|(
name|versionStorageNode
argument_list|,
name|historyRelPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|JCR_ROOTVERSION
operator|.
name|equals
argument_list|(
name|versionName
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Removal of root version not allowed."
decl_stmt|;
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|CommitFailedException
operator|.
name|VERSION
argument_list|,
name|VersionExceptionCode
operator|.
name|ROOT_VERSION_REMOVAL
operator|.
name|ordinal
argument_list|()
argument_list|,
name|msg
argument_list|)
throw|;
block|}
name|NodeBuilder
name|versionNode
init|=
name|vh
operator|.
name|getChildNode
argument_list|(
name|versionName
argument_list|)
decl_stmt|;
name|String
name|versionId
init|=
name|versionNode
operator|.
name|getProperty
argument_list|(
name|JCR_UUID
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
comment|// unregister from labels
for|for
control|(
name|String
name|label
range|:
name|getVersionLabels
argument_list|(
name|versionRelPath
argument_list|,
name|versionId
argument_list|)
control|)
block|{
name|removeVersionLabel
argument_list|(
name|historyRelPath
argument_list|,
name|label
argument_list|)
expr_stmt|;
block|}
comment|// reconnected predecessors and successors of the version being removed
name|PropertyState
name|successorIds
init|=
name|versionNode
operator|.
name|getProperty
argument_list|(
name|JCR_SUCCESSORS
argument_list|)
decl_stmt|;
name|PropertyState
name|predecessorIds
init|=
name|versionNode
operator|.
name|getProperty
argument_list|(
name|JCR_PREDECESSORS
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|succId
range|:
name|successorIds
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCES
argument_list|)
control|)
block|{
name|NodeBuilder
name|successor
init|=
name|getVersionById
argument_list|(
name|vh
argument_list|,
name|succId
argument_list|)
decl_stmt|;
name|PropertyBuilder
argument_list|<
name|String
argument_list|>
name|pb
init|=
name|PropertyBuilder
operator|.
name|array
argument_list|(
name|Type
operator|.
name|REFERENCE
argument_list|)
decl_stmt|;
name|pb
operator|.
name|setName
argument_list|(
name|JCR_PREDECESSORS
argument_list|)
operator|.
name|setValues
argument_list|(
name|successor
operator|.
name|getProperty
argument_list|(
name|JCR_PREDECESSORS
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCES
argument_list|)
argument_list|)
expr_stmt|;
name|pb
operator|.
name|removeValue
argument_list|(
name|versionId
argument_list|)
expr_stmt|;
name|pb
operator|.
name|setValues
argument_list|(
name|predecessorIds
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCES
argument_list|)
argument_list|)
expr_stmt|;
name|successor
operator|.
name|setProperty
argument_list|(
name|pb
operator|.
name|getPropertyState
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|predId
range|:
name|predecessorIds
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCES
argument_list|)
control|)
block|{
name|NodeBuilder
name|predecessor
init|=
name|getVersionById
argument_list|(
name|vh
argument_list|,
name|predId
argument_list|)
decl_stmt|;
name|PropertyBuilder
argument_list|<
name|String
argument_list|>
name|pb
init|=
name|PropertyBuilder
operator|.
name|array
argument_list|(
name|Type
operator|.
name|REFERENCE
argument_list|)
decl_stmt|;
name|pb
operator|.
name|setName
argument_list|(
name|JCR_SUCCESSORS
argument_list|)
operator|.
name|setValues
argument_list|(
name|predecessor
operator|.
name|getProperty
argument_list|(
name|JCR_SUCCESSORS
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCES
argument_list|)
argument_list|)
expr_stmt|;
name|pb
operator|.
name|removeValue
argument_list|(
name|versionId
argument_list|)
expr_stmt|;
name|pb
operator|.
name|setValues
argument_list|(
name|successorIds
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCES
argument_list|)
argument_list|)
expr_stmt|;
name|predecessor
operator|.
name|setProperty
argument_list|(
name|pb
operator|.
name|getPropertyState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|versionNode
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|checkout
parameter_list|(
name|NodeBuilder
name|versionable
parameter_list|)
block|{
name|versionable
operator|.
name|setProperty
argument_list|(
name|JCR_ISCHECKEDOUT
argument_list|,
literal|true
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|PropertyState
name|baseVersion
init|=
name|versionable
operator|.
name|getProperty
argument_list|(
name|JCR_BASEVERSION
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|predecessors
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|baseVersion
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCE
argument_list|)
argument_list|)
decl_stmt|;
name|versionable
operator|.
name|setProperty
argument_list|(
name|JCR_PREDECESSORS
argument_list|,
name|predecessors
argument_list|,
name|Type
operator|.
name|REFERENCES
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkin
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|versionable
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|history
init|=
name|getOrCreateVersionHistory
argument_list|(
name|versionable
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|createVersion
argument_list|(
name|history
argument_list|,
name|versionable
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|restore
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|versionable
parameter_list|,
annotation|@
name|Nonnull
name|String
name|versionUUID
parameter_list|,
annotation|@
name|Nullable
name|VersionSelector
name|selector
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|String
name|versionPath
init|=
name|getIdentifierManager
argument_list|()
operator|.
name|getPath
argument_list|(
name|versionUUID
argument_list|)
decl_stmt|;
name|NodeBuilder
name|history
init|=
name|getOrCreateVersionHistory
argument_list|(
name|versionable
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|NodeBuilder
name|version
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|versionPath
operator|!=
literal|null
condition|)
block|{
name|String
name|versionName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|versionPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|history
operator|.
name|hasChildNode
argument_list|(
name|versionName
argument_list|)
condition|)
block|{
name|version
operator|=
name|history
operator|.
name|getChildNode
argument_list|(
name|versionName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|CommitFailedException
operator|.
name|VERSION
argument_list|,
name|VersionExceptionCode
operator|.
name|NO_SUCH_VERSION
operator|.
name|ordinal
argument_list|()
argument_list|,
literal|"The VersionHistory with UUID: "
operator|+
name|uuidFromNode
argument_list|(
name|versionable
argument_list|)
operator|+
literal|" does not have a Version with UUID: "
operator|+
name|versionUUID
argument_list|)
throw|;
block|}
name|VersionableState
name|versionableState
init|=
name|VersionableState
operator|.
name|forRestore
argument_list|(
name|version
argument_list|,
name|history
argument_list|,
name|versionable
argument_list|,
name|this
argument_list|,
name|ntMgr
argument_list|)
decl_stmt|;
name|versionableState
operator|.
name|restore
argument_list|(
name|selector
argument_list|)
expr_stmt|;
block|}
comment|/**      * Restores a version from the history identified by {@code historyIdentifier}      * using the given version {@code selector}.      *      * @param historyIdentifier identifier of the version history node.      * @param selector the version selector.      * @param versionable the versionable node where the version is restored to.      * @throws CommitFailedException if an error occurs while restoring.      */
name|void
name|restore
parameter_list|(
annotation|@
name|Nonnull
name|String
name|historyIdentifier
parameter_list|,
annotation|@
name|Nonnull
name|VersionSelector
name|selector
parameter_list|,
annotation|@
name|Nonnull
name|NodeBuilder
name|versionable
parameter_list|)
throws|throws
name|CommitFailedException
throws|,
name|RepositoryException
block|{
name|String
name|historyPath
init|=
name|getIdentifierManager
argument_list|()
operator|.
name|getPath
argument_list|(
name|historyIdentifier
argument_list|)
decl_stmt|;
name|String
name|historyRelPath
init|=
name|PathUtils
operator|.
name|relativize
argument_list|(
name|VERSION_STORE_PATH
argument_list|,
name|historyPath
argument_list|)
decl_stmt|;
name|NodeBuilder
name|history
init|=
name|resolve
argument_list|(
name|versionStorageNode
argument_list|,
name|historyRelPath
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|history
operator|.
name|exists
argument_list|()
argument_list|,
literal|"Version history does not exist: "
operator|+
name|historyPath
argument_list|)
expr_stmt|;
name|NodeBuilder
name|version
init|=
name|selector
operator|.
name|select
argument_list|(
name|history
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|CommitFailedException
operator|.
name|VERSION
argument_list|,
name|VersionExceptionCode
operator|.
name|NO_VERSION_TO_RESTORE
operator|.
name|ordinal
argument_list|()
argument_list|,
literal|"VersionSelector did not select any version from "
operator|+
literal|"history: "
operator|+
name|historyPath
argument_list|)
throw|;
block|}
comment|// make sure versionable nodes has a jcr:uuid
comment|// (required to identify its version history)
name|String
name|versionableUUUID
init|=
name|history
operator|.
name|getProperty
argument_list|(
name|JCR_VERSIONABLEUUID
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|versionable
operator|.
name|setProperty
argument_list|(
name|JCR_UUID
argument_list|,
name|versionableUUUID
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|restore
argument_list|(
name|versionable
argument_list|,
name|uuidFromNode
argument_list|(
name|version
argument_list|)
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes a version label from the jcr:versionLabels node of the referenced      * version history.      *      * @param historyRelPath relative path from the jcr:versionStorage node to      *                       the version history node.      * @param label          the version label.      * @throws CommitFailedException if there is no such version history or if      * there is no label with the given name.      */
specifier|public
name|void
name|removeVersionLabel
parameter_list|(
annotation|@
name|Nonnull
name|String
name|historyRelPath
parameter_list|,
annotation|@
name|Nonnull
name|String
name|label
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|labels
init|=
name|getVersionLabelsFor
argument_list|(
name|checkNotNull
argument_list|(
name|historyRelPath
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|labels
operator|.
name|hasProperty
argument_list|(
name|checkNotNull
argument_list|(
name|label
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|CommitFailedException
operator|.
name|VERSION
argument_list|,
name|VersionExceptionCode
operator|.
name|NO_SUCH_VERSION_LABEL
operator|.
name|ordinal
argument_list|()
argument_list|,
literal|"Version label "
operator|+
name|label
operator|+
literal|" does not exist on this version history"
argument_list|)
throw|;
block|}
name|labels
operator|.
name|removeProperty
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes the version history if it's empty.      *      * @param versionable the versionable node.      */
name|void
name|removeEmptyHistory
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|versionable
parameter_list|)
block|{
name|NodeBuilder
name|history
init|=
name|getVersionHistory
argument_list|(
name|versionable
argument_list|)
decl_stmt|;
if|if
condition|(
name|isEmptyHistory
argument_list|(
name|history
operator|.
name|getNodeState
argument_list|()
argument_list|)
condition|)
block|{
name|history
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|// TODO: more methods that modify versions
comment|//------------------------------< internal>--------------------------------
comment|/**      * Resolves the {@code relPath} based on the given {@code node}      * and returns the resulting node, possibly non-existing.      *      * @param node the resolved node.      * @param relPath a relative path.      * @return the resolved node.      */
annotation|@
name|Nonnull
specifier|private
name|NodeBuilder
name|resolve
parameter_list|(
name|NodeBuilder
name|node
parameter_list|,
name|String
name|relPath
parameter_list|)
block|{
name|checkArgument
argument_list|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|relPath
argument_list|)
argument_list|,
literal|"Not a relative path"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|relPath
argument_list|)
control|)
block|{
name|node
operator|=
name|node
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
comment|/**      * Creates a version in the given version history. If the given version      * history does not yet have a version, then a root version is created and      * the versionable node is in a checked out state. Otherwise a version is      * created and the versionable node is set to checked in.      *      * @param vHistory the version history node.      * @param versionable the versionable node.      * @return the created version (nt:version) node.      * @throws CommitFailedException if creating the version fails. E.g. because      * the versionable node contains a OPV item with ABORT.      */
specifier|private
name|NodeBuilder
name|createVersion
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|vHistory
parameter_list|,
annotation|@
name|Nonnull
name|NodeBuilder
name|versionable
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|CommitFailedException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|predecessors
decl_stmt|;
name|NodeBuilder
name|version
decl_stmt|;
name|boolean
name|isRootVersion
decl_stmt|;
if|if
condition|(
operator|!
name|vHistory
operator|.
name|hasChildNode
argument_list|(
name|JCR_ROOTVERSION
argument_list|)
condition|)
block|{
comment|// create root version
name|isRootVersion
operator|=
literal|true
expr_stmt|;
name|predecessors
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|version
operator|=
name|vHistory
operator|.
name|child
argument_list|(
name|JCR_ROOTVERSION
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|isRootVersion
operator|=
literal|false
expr_stmt|;
name|checkState
argument_list|(
name|versionable
operator|.
name|hasProperty
argument_list|(
name|JCR_PREDECESSORS
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyState
name|state
init|=
name|versionable
operator|.
name|getProperty
argument_list|(
name|JCR_PREDECESSORS
argument_list|)
decl_stmt|;
name|predecessors
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|state
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCES
argument_list|)
argument_list|)
expr_stmt|;
name|version
operator|=
name|vHistory
operator|.
name|child
argument_list|(
name|calculateVersion
argument_list|(
name|vHistory
argument_list|,
name|versionable
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|versionUUID
init|=
name|IdentifierManager
operator|.
name|generateUUID
argument_list|()
decl_stmt|;
name|version
operator|.
name|setProperty
argument_list|(
name|JCR_UUID
argument_list|,
name|versionUUID
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|version
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_VERSION
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|version
operator|.
name|setProperty
argument_list|(
name|JCR_CREATED
argument_list|,
name|ISO8601
operator|.
name|format
argument_list|(
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|,
name|Type
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|version
operator|.
name|setProperty
argument_list|(
name|JCR_PREDECESSORS
argument_list|,
name|predecessors
argument_list|,
name|Type
operator|.
name|REFERENCES
argument_list|)
expr_stmt|;
name|version
operator|.
name|setProperty
argument_list|(
name|JCR_SUCCESSORS
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Type
operator|.
name|REFERENCES
argument_list|)
expr_stmt|;
comment|// update successors of versions identified by predecessors
for|for
control|(
name|String
name|id
range|:
name|predecessors
control|)
block|{
name|String
name|name
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|getIdentifierManager
argument_list|()
operator|.
name|getPath
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|NodeBuilder
name|predecessor
init|=
name|vHistory
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|PropertyState
name|state
init|=
name|predecessor
operator|.
name|getProperty
argument_list|(
name|JCR_SUCCESSORS
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Missing "
operator|+
name|JCR_SUCCESSORS
operator|+
literal|" property on "
operator|+
name|predecessor
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|refs
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|state
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCES
argument_list|)
argument_list|)
decl_stmt|;
name|refs
operator|.
name|add
argument_list|(
name|versionUUID
argument_list|)
expr_stmt|;
name|predecessor
operator|.
name|setProperty
argument_list|(
name|JCR_SUCCESSORS
argument_list|,
name|refs
argument_list|,
name|Type
operator|.
name|REFERENCES
argument_list|)
expr_stmt|;
block|}
comment|// jcr:frozenNode of created version
name|VersionableState
name|versionableState
init|=
name|VersionableState
operator|.
name|fromVersion
argument_list|(
name|version
argument_list|,
name|vHistory
argument_list|,
name|versionable
argument_list|,
name|this
argument_list|,
name|getNodeTypeManager
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isRootVersion
condition|)
block|{
name|versionableState
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
comment|// set jcr:isCheckedOut, jcr:versionHistory, jcr:baseVersion and
comment|// jcr:predecessors on versionable node
name|versionable
operator|.
name|setProperty
argument_list|(
name|JCR_ISCHECKEDOUT
argument_list|,
name|isRootVersion
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|versionable
operator|.
name|setProperty
argument_list|(
name|JCR_VERSIONHISTORY
argument_list|,
name|uuidFromNode
argument_list|(
name|vHistory
argument_list|)
argument_list|,
name|Type
operator|.
name|REFERENCE
argument_list|)
expr_stmt|;
name|versionable
operator|.
name|setProperty
argument_list|(
name|JCR_BASEVERSION
argument_list|,
name|versionUUID
argument_list|,
name|Type
operator|.
name|REFERENCE
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRootVersion
condition|)
block|{
comment|// set predecessors to base version if this is the root version
name|predecessors
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|versionUUID
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// otherwise clear predecessors for check-in
name|predecessors
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
name|versionable
operator|.
name|setProperty
argument_list|(
name|JCR_PREDECESSORS
argument_list|,
name|predecessors
argument_list|,
name|Type
operator|.
name|REFERENCES
argument_list|)
expr_stmt|;
return|return
name|version
return|;
block|}
comment|/**      * Connects a versionable node with the root version of an existing version      * history.      *      * @param rootVersion the root version of a version history.      * @param vHistoryUUID the uuid of the version history node.      * @param versionable the versionable node.      */
specifier|private
name|void
name|connectHistory
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|rootVersion
parameter_list|,
annotation|@
name|Nonnull
name|String
name|vHistoryUUID
parameter_list|,
annotation|@
name|Nonnull
name|NodeBuilder
name|versionable
parameter_list|)
block|{
name|String
name|rootVersionUUID
init|=
name|uuidFromNode
argument_list|(
name|rootVersion
argument_list|)
decl_stmt|;
name|versionable
operator|.
name|setProperty
argument_list|(
name|JCR_ISCHECKEDOUT
argument_list|,
literal|true
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|versionable
operator|.
name|setProperty
argument_list|(
name|JCR_VERSIONHISTORY
argument_list|,
name|vHistoryUUID
argument_list|,
name|Type
operator|.
name|REFERENCE
argument_list|)
expr_stmt|;
name|versionable
operator|.
name|setProperty
argument_list|(
name|JCR_BASEVERSION
argument_list|,
name|rootVersionUUID
argument_list|,
name|Type
operator|.
name|REFERENCE
argument_list|)
expr_stmt|;
name|versionable
operator|.
name|setProperty
argument_list|(
name|JCR_PREDECESSORS
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|rootVersionUUID
argument_list|)
argument_list|,
name|Type
operator|.
name|REFERENCES
argument_list|)
expr_stmt|;
block|}
comment|/**      *<i>Copied from Apache Jackrabbit Core</i>      *<p>      * Calculates the name of the new version that will be created by a      * checkin call. The name is determined as follows:      *<ul>      *<li> first the predecessor version with the shortest name is searched.      *<li> if that predecessor version is the root version, the new version gets      *      the name "{number of successors}+1" + ".0"      *<li> if that predecessor version has no successor, the last digit of it's      *      version number is incremented.      *<li> if that predecessor version has successors but the incremented name      *      does not exist, that name is used.      *<li> otherwise a ".0" is added to the name until a non conflicting name      *      is found.      *<ul>      *</p>      * Example Graph:      *<pre>      * jcr:rootVersion      *  |     |      * 1.0   2.0      *  |      * 1.1      *  |      * 1.2 ---\  ------\      *  |      \        \      * 1.3   1.2.0   1.2.0.0      *  |      |      * 1.4   1.2.1 ----\      *  |      |        \      * 1.5   1.2.2   1.2.1.0      *  |      |        |      * 1.6     |     1.2.1.1      *  |-----/      * 1.7      *</pre>      *      * @param history the version history      * @param versionable the node to checkin      * @return the new version name      * @throws IllegalStateException if mandatory version properties are missing.      */
specifier|protected
name|String
name|calculateVersion
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|history
parameter_list|,
annotation|@
name|Nonnull
name|NodeBuilder
name|versionable
parameter_list|)
throws|throws
name|IllegalStateException
block|{
comment|// 1. search a predecessor, suitable for generating the new name
name|PropertyState
name|predecessors
init|=
name|versionable
operator|.
name|getProperty
argument_list|(
name|JCR_PREDECESSORS
argument_list|)
decl_stmt|;
if|if
condition|(
name|predecessors
operator|==
literal|null
operator|||
name|predecessors
operator|.
name|count
argument_list|()
operator|==
literal|0
condition|)
block|{
name|String
name|message
decl_stmt|;
if|if
condition|(
name|predecessors
operator|==
literal|null
condition|)
block|{
name|message
operator|=
literal|"Mandatory jcr:predecessors property missing on node "
operator|+
name|uuidFromNode
argument_list|(
name|versionable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
literal|"Mandatory jcr:predecessors property is empty on node "
operator|+
name|uuidFromNode
argument_list|(
name|versionable
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|String
name|best
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|predecessors
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCES
argument_list|)
control|)
block|{
name|String
name|name
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|getIdentifierManager
argument_list|()
operator|.
name|getPath
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|best
operator|==
literal|null
operator|||
name|name
operator|.
name|length
argument_list|()
operator|<
name|best
operator|.
name|length
argument_list|()
condition|)
block|{
name|best
operator|=
name|name
expr_stmt|;
block|}
block|}
if|if
condition|(
name|best
operator|==
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|"Could not find 'best' predecessor node for "
operator|+
name|uuidFromNode
argument_list|(
name|versionable
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|// 2. generate version name (assume no namespaces in version names)
name|String
name|versionName
init|=
name|best
decl_stmt|;
name|int
name|pos
init|=
name|versionName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>
literal|0
condition|)
block|{
name|String
name|newVersionName
init|=
name|versionName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
operator|+
literal|1
argument_list|)
operator|+
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|versionName
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
argument_list|)
operator|+
literal|1
operator|)
decl_stmt|;
while|while
condition|(
name|history
operator|.
name|hasChildNode
argument_list|(
name|newVersionName
argument_list|)
condition|)
block|{
name|versionName
operator|+=
literal|".0"
expr_stmt|;
name|newVersionName
operator|=
name|versionName
expr_stmt|;
block|}
return|return
name|newVersionName
return|;
block|}
else|else
block|{
comment|// best is root version
name|checkState
argument_list|(
name|history
operator|.
name|hasChildNode
argument_list|(
name|JCR_ROOTVERSION
argument_list|)
argument_list|)
expr_stmt|;
name|NodeBuilder
name|v
init|=
name|history
operator|.
name|getChildNode
argument_list|(
name|JCR_ROOTVERSION
argument_list|)
decl_stmt|;
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|v
operator|.
name|getProperty
argument_list|(
name|JCR_SUCCESSORS
argument_list|)
operator|.
name|count
argument_list|()
operator|+
literal|1
argument_list|)
operator|+
literal|".0"
return|;
block|}
block|}
comment|/**      * Returns the jcr:versionLabels node of the version history referenced      * by the given path.      *      * @param historyRelPath relative path from the jcr:versionStorage node      *                       to the history node.      * @return the jcr:versionLabels node.      * @throws CommitFailedException if there is no version history at the      * given path.      */
specifier|private
name|NodeBuilder
name|getVersionLabelsFor
parameter_list|(
name|String
name|historyRelPath
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|history
init|=
name|resolve
argument_list|(
name|versionStorageNode
argument_list|,
name|historyRelPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|history
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|CommitFailedException
operator|.
name|VERSION
argument_list|,
name|VersionExceptionCode
operator|.
name|UNEXPECTED_REPOSITORY_EXCEPTION
operator|.
name|ordinal
argument_list|()
argument_list|,
literal|"Version history does not exist: "
operator|+
name|PathUtils
operator|.
name|concat
argument_list|(
name|VERSION_STORE_PATH
argument_list|,
name|historyRelPath
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|history
operator|.
name|child
argument_list|(
name|JCR_VERSIONLABELS
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|Iterable
argument_list|<
name|String
argument_list|>
name|getVersionLabels
parameter_list|(
annotation|@
name|Nonnull
name|String
name|historyRelPath
parameter_list|,
annotation|@
name|Nonnull
name|String
name|versionId
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|labels
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|NodeBuilder
name|labelNode
init|=
name|getVersionLabelsFor
argument_list|(
name|historyRelPath
argument_list|)
decl_stmt|;
for|for
control|(
name|PropertyState
name|ps
range|:
name|labelNode
operator|.
name|getProperties
argument_list|()
control|)
block|{
if|if
condition|(
name|Type
operator|.
name|REFERENCE
operator|==
name|ps
operator|.
name|getType
argument_list|()
condition|)
block|{
if|if
condition|(
name|versionId
operator|.
name|equals
argument_list|(
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCE
argument_list|)
argument_list|)
condition|)
block|{
name|labels
operator|.
name|add
argument_list|(
name|ps
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|labels
return|;
block|}
annotation|@
name|CheckForNull
specifier|private
name|NodeBuilder
name|getVersionById
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|vhBuilder
parameter_list|,
annotation|@
name|Nonnull
name|String
name|versionId
parameter_list|)
block|{
for|for
control|(
name|String
name|childName
range|:
name|vhBuilder
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
name|NodeBuilder
name|nb
init|=
name|vhBuilder
operator|.
name|getChildNode
argument_list|(
name|childName
argument_list|)
decl_stmt|;
name|PropertyState
name|uuid
init|=
name|nb
operator|.
name|getProperty
argument_list|(
name|JCR_UUID
argument_list|)
decl_stmt|;
if|if
condition|(
name|uuid
operator|!=
literal|null
operator|&&
name|versionId
operator|.
name|equals
argument_list|(
name|uuid
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|nb
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Gets the version history for the given      * {@code versionable} node.      *      * @param versionable the versionable node.      * @return the version history node.      * @throws IllegalArgumentException if the given node does not have a      *                                  {@code jcr:uuid} property.      */
annotation|@
name|Nonnull
specifier|private
name|NodeBuilder
name|getVersionHistory
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|versionable
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|versionable
argument_list|)
expr_stmt|;
name|String
name|vUUID
init|=
name|uuidFromNode
argument_list|(
name|versionable
argument_list|)
decl_stmt|;
name|String
name|relPath
init|=
name|getVersionHistoryPath
argument_list|(
name|vUUID
argument_list|)
decl_stmt|;
name|NodeBuilder
name|node
init|=
name|versionStorageNode
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|PathUtils
operator|.
name|elements
argument_list|(
name|relPath
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|node
operator|=
name|node
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No version history for this node"
argument_list|)
throw|;
block|}
block|}
return|return
name|node
return|;
block|}
comment|/**      * Checks whether the passed node history hasn't been modified since its      * creation. It means that: (1) there's just one version, called jcr:rootVersion      * and (2) there are no custom labels.      *      * @param versionHistory to test      * @return {@code true} if the version history hasn't been changed yet      */
specifier|private
name|boolean
name|isEmptyHistory
parameter_list|(
name|NodeState
name|versionHistory
parameter_list|)
block|{
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|versionHistory
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getName
argument_list|()
decl_stmt|;
name|NodeState
name|node
init|=
name|entry
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|JCR_ROOTVERSION
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
name|isVersion
operator|.
name|apply
argument_list|(
name|node
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
comment|// a checked-in version
block|}
block|}
name|NodeState
name|labels
init|=
name|versionHistory
operator|.
name|getChildNode
argument_list|(
name|JCR_VERSIONLABELS
argument_list|)
decl_stmt|;
for|for
control|(
name|PropertyState
name|prop
range|:
name|labels
operator|.
name|getProperties
argument_list|()
control|)
block|{
if|if
condition|(
name|prop
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|REFERENCE
condition|)
block|{
return|return
literal|false
return|;
comment|// custom label
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

