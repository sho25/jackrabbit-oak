begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
operator|.
name|authorization
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
operator|.
name|JCR_READ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
operator|.
name|addAccessControlEntry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
operator|.
name|AbstractTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_comment
comment|/**  * Tests the behavior of the permission cache when faced with lots of paths that  * have no relevant policies for the current session (but may have other  * policies). For more info see OAK-7860.  */
end_comment

begin_class
specifier|public
class|class
name|CanReadNonExisting
extends|extends
name|AbstractTest
block|{
specifier|static
specifier|final
name|String
name|uid
init|=
literal|"u0"
decl_stmt|;
specifier|static
specifier|final
name|int
name|contentNodes
init|=
literal|10000
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|beforeSuite
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|beforeSuite
argument_list|()
expr_stmt|;
comment|//PermissionEntryProviderImpl#DEFAULT_SIZE + delta
name|int
name|groupCount
init|=
literal|255
decl_stmt|;
name|Session
name|s
init|=
name|loginAdministrative
argument_list|()
decl_stmt|;
name|addAccessControlEntry
argument_list|(
name|s
argument_list|,
literal|"/"
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_READ
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// PermissionCacheBuilder#MAX_PATHS_SIZE + 1
name|int
name|extraPolicies
init|=
literal|11
decl_stmt|;
name|Node
name|extras
init|=
name|s
operator|.
name|getNode
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"extras"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|extraPolicies
condition|;
name|i
operator|++
control|)
block|{
name|extras
operator|.
name|addNode
argument_list|(
name|i
operator|+
literal|""
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|save
argument_list|()
expr_stmt|;
try|try
block|{
name|UserManager
name|userManager
init|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|s
operator|)
operator|.
name|getUserManager
argument_list|()
decl_stmt|;
name|User
name|eye
init|=
name|userManager
operator|.
name|createUser
argument_list|(
literal|"eye"
argument_list|,
literal|"eye"
argument_list|)
decl_stmt|;
name|User
name|u
init|=
name|userManager
operator|.
name|createUser
argument_list|(
name|uid
argument_list|,
name|uid
argument_list|)
decl_stmt|;
name|addAccessControlEntry
argument_list|(
name|s
argument_list|,
name|u
operator|.
name|getPath
argument_list|()
argument_list|,
name|u
operator|.
name|getPrincipal
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|JCR_READ
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|extraPolicies
condition|;
name|i
operator|++
control|)
block|{
name|addAccessControlEntry
argument_list|(
name|s
argument_list|,
literal|"/extras/"
operator|+
name|i
argument_list|,
name|u
operator|.
name|getPrincipal
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|JCR_READ
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|groupCount
condition|;
name|i
operator|++
control|)
block|{
name|Group
name|g
init|=
name|userManager
operator|.
name|createGroup
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|"g"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|addAccessControlEntry
argument_list|(
name|s
argument_list|,
name|g
operator|.
name|getPath
argument_list|()
argument_list|,
name|g
operator|.
name|getPrincipal
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|JCR_READ
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|extraPolicies
condition|;
name|j
operator|++
control|)
block|{
name|addAccessControlEntry
argument_list|(
name|s
argument_list|,
literal|"/extras/"
operator|+
name|j
argument_list|,
name|g
operator|.
name|getPrincipal
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|JCR_READ
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|Node
name|content
init|=
name|s
operator|.
name|getNode
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contentNodes
condition|;
name|i
operator|++
control|)
block|{
name|String
name|p
init|=
name|content
operator|.
name|addNode
argument_list|(
name|i
operator|+
literal|""
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|addAccessControlEntry
argument_list|(
name|s
argument_list|,
name|p
argument_list|,
name|eye
operator|.
name|getPrincipal
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|JCR_READ
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|s
operator|.
name|save
argument_list|()
expr_stmt|;
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"setup done."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|runTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|uid
argument_list|,
name|uid
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contentNodes
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|s
operator|.
name|nodeExists
argument_list|(
literal|"/content/"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

