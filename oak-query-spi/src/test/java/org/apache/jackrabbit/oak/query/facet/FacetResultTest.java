begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|facet
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|facet
operator|.
name|FacetResult
operator|.
name|Facet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|facet
operator|.
name|FacetResult
operator|.
name|FacetResultRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|RowIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryConstants
operator|.
name|REP_FACET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Tests for {@link FacetResult}  */
end_comment

begin_class
specifier|public
class|class
name|FacetResultTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testResult
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryResult
name|queryResult
init|=
name|mock
argument_list|(
name|QueryResult
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|queryResult
operator|.
name|getColumnNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"rep:facet(text)"
block|,
literal|"jcr:path"
block|,
literal|"rep:facet(jcr:title)"
block|}
argument_list|)
expr_stmt|;
name|RowIterator
name|rows
init|=
name|mock
argument_list|(
name|RowIterator
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Row
name|row
init|=
name|mock
argument_list|(
name|Row
operator|.
name|class
argument_list|)
decl_stmt|;
name|Value
name|value
init|=
name|mock
argument_list|(
name|Value
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"{}"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|row
operator|.
name|getValue
argument_list|(
literal|"rep:facet(text)"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|Value
name|value2
init|=
name|mock
argument_list|(
name|Value
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|value2
operator|.
name|getString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"{\"a\" : 2, \"b\" : 1}"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|row
operator|.
name|getValue
argument_list|(
literal|"rep:facet(jcr:title)"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rows
operator|.
name|nextRow
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|queryResult
operator|.
name|getRows
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|queryResult
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|contains
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|contains
argument_list|(
literal|"jcr:title"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"text"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"jcr:title"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"jcr:title"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"jcr:title"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"jcr:title"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"jcr:title"
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"jcr:title"
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|simpleMergeFacets
parameter_list|()
block|{
name|String
name|r1c1Facet
init|=
name|json
argument_list|(
name|f
argument_list|(
literal|"l1"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"l2"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|r2c1Facet
init|=
name|json
argument_list|(
name|f
argument_list|(
literal|"l2"
argument_list|,
literal|4
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"l1"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|FacetResult
name|merged
init|=
name|facet
argument_list|(
operator|new
name|FacetColumn
argument_list|(
literal|"x"
argument_list|,
name|r1c1Facet
argument_list|,
name|r2c1Facet
argument_list|)
argument_list|)
decl_stmt|;
name|FacetResult
name|expected
init|=
name|facet
argument_list|(
operator|new
name|FacetColumn
argument_list|(
literal|"x"
argument_list|,
name|json
argument_list|(
name|f
argument_list|(
literal|"l2"
argument_list|,
literal|5
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"l1"
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|expected
argument_list|,
name|merged
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|uniqueLabelsMergeFacets
parameter_list|()
block|{
name|String
name|r1c1Facet
init|=
name|json
argument_list|(
name|f
argument_list|(
literal|"l1"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|r2c1Facet
init|=
name|json
argument_list|(
name|f
argument_list|(
literal|"l2"
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|FacetResult
name|merged
init|=
name|facet
argument_list|(
operator|new
name|FacetColumn
argument_list|(
literal|"x"
argument_list|,
name|r1c1Facet
argument_list|,
name|r2c1Facet
argument_list|)
argument_list|)
decl_stmt|;
name|FacetResult
name|expected
init|=
name|facet
argument_list|(
operator|new
name|FacetColumn
argument_list|(
literal|"x"
argument_list|,
name|json
argument_list|(
name|f
argument_list|(
literal|"l2"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"l1"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|expected
argument_list|,
name|merged
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleColumns
parameter_list|()
block|{
name|String
name|r1c1Facet
init|=
name|json
argument_list|(
name|f
argument_list|(
literal|"l1"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|r2c1Facet
init|=
name|json
argument_list|(
name|f
argument_list|(
literal|"l2"
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|r1c2Facet
init|=
name|json
argument_list|(
name|f
argument_list|(
literal|"m1"
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|r2c2Facet
init|=
name|json
argument_list|(
name|f
argument_list|(
literal|"m2"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|FacetResult
name|merged
init|=
name|facet
argument_list|(
operator|new
name|FacetColumn
argument_list|(
literal|"x"
argument_list|,
name|r1c1Facet
argument_list|,
name|r2c1Facet
argument_list|)
argument_list|,
operator|new
name|FacetColumn
argument_list|(
literal|"y"
argument_list|,
name|r1c2Facet
argument_list|,
name|r2c2Facet
argument_list|)
argument_list|)
decl_stmt|;
name|FacetResult
name|expected
init|=
name|facet
argument_list|(
operator|new
name|FacetColumn
argument_list|(
literal|"x"
argument_list|,
name|json
argument_list|(
name|f
argument_list|(
literal|"l2"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"l1"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FacetColumn
argument_list|(
literal|"y"
argument_list|,
name|json
argument_list|(
name|f
argument_list|(
literal|"m1"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"m2"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|expected
argument_list|,
name|merged
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleColumnsWithNullColumns
parameter_list|()
block|{
name|String
name|r2c1Facet
init|=
name|json
argument_list|(
name|f
argument_list|(
literal|"l1"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|r1c2Facet
init|=
name|json
argument_list|(
name|f
argument_list|(
literal|"m1"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|FacetResult
name|merged
init|=
name|facet
argument_list|(
operator|new
name|FacetColumn
argument_list|(
literal|"x"
argument_list|,
literal|null
argument_list|,
name|r2c1Facet
argument_list|)
argument_list|,
operator|new
name|FacetColumn
argument_list|(
literal|"y"
argument_list|,
name|r1c2Facet
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|FacetResult
name|expected
init|=
name|facet
argument_list|(
operator|new
name|FacetColumn
argument_list|(
literal|"x"
argument_list|,
name|json
argument_list|(
name|f
argument_list|(
literal|"l1"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FacetColumn
argument_list|(
literal|"y"
argument_list|,
name|json
argument_list|(
name|f
argument_list|(
literal|"m1"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|expected
argument_list|,
name|merged
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FacetResult
name|facet
parameter_list|(
name|FacetColumn
modifier|...
name|facetColumns
parameter_list|)
block|{
name|String
index|[]
name|colNames
init|=
operator|new
name|String
index|[
name|facetColumns
operator|.
name|length
index|]
decl_stmt|;
name|colNames
index|[
literal|0
index|]
operator|=
name|facetColumns
index|[
literal|0
index|]
operator|.
name|colName
expr_stmt|;
name|int
name|numRows
init|=
name|facetColumns
index|[
literal|0
index|]
operator|.
name|facets
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|facetColumns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"numRows for col num "
operator|+
name|i
operator|+
literal|" wasn't same as first"
argument_list|,
name|numRows
argument_list|,
name|facetColumns
index|[
name|i
index|]
operator|.
name|facets
operator|.
name|length
argument_list|)
expr_stmt|;
name|colNames
index|[
name|i
index|]
operator|=
name|facetColumns
index|[
name|i
index|]
operator|.
name|colName
expr_stmt|;
block|}
name|FacetResultRow
index|[]
name|facetResultRows
init|=
operator|new
name|FacetResultRow
index|[
name|numRows
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columns
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|FacetColumn
name|col
range|:
name|facetColumns
control|)
block|{
name|columns
operator|.
name|put
argument_list|(
name|col
operator|.
name|colName
argument_list|,
name|col
operator|.
name|facets
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|facetResultRows
index|[
name|i
index|]
operator|=
operator|new
name|FacetResultRow
argument_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cols
init|=
name|columns
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|(
name|String
name|columnName
parameter_list|)
block|{
return|return
name|cols
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
return|return
operator|new
name|FacetResult
argument_list|(
name|colNames
argument_list|,
name|facetResultRows
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|json
parameter_list|(
name|Facet
modifier|...
name|facets
parameter_list|)
block|{
name|JsopBuilder
name|builder
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|object
argument_list|()
expr_stmt|;
for|for
control|(
name|Facet
name|facet
range|:
name|facets
control|)
block|{
name|builder
operator|.
name|key
argument_list|(
name|facet
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|value
argument_list|(
name|facet
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
class|class
name|FacetColumn
block|{
specifier|final
name|String
name|colName
decl_stmt|;
specifier|final
name|String
index|[]
name|facets
decl_stmt|;
name|FacetColumn
parameter_list|(
name|String
name|colName
parameter_list|,
name|String
modifier|...
name|facets
parameter_list|)
block|{
name|this
operator|.
name|colName
operator|=
name|REP_FACET
operator|+
literal|"("
operator|+
name|colName
operator|+
literal|")"
expr_stmt|;
name|this
operator|.
name|facets
operator|=
name|facets
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Facet
name|f
parameter_list|(
name|String
name|label
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
operator|new
name|Facet
argument_list|(
name|label
argument_list|,
name|count
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|verify
parameter_list|(
name|FacetResult
name|expected
parameter_list|,
name|FacetResult
name|result
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Dimension mismatch"
argument_list|,
name|expected
operator|.
name|getDimensions
argument_list|()
argument_list|,
name|result
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dim
range|:
name|expected
operator|.
name|getDimensions
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Facet
argument_list|>
name|expectedFacets
init|=
name|expected
operator|.
name|getFacets
argument_list|(
name|dim
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Facet
argument_list|>
name|resultFacets
init|=
name|result
operator|.
name|getFacets
argument_list|(
name|dim
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedFacets
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Facet
name|expectedFacet
init|=
name|expectedFacets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Facet
name|resultFacet
init|=
name|resultFacets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"label mismatch for dim "
operator|+
name|dim
argument_list|,
name|expectedFacet
operator|.
name|getLabel
argument_list|()
argument_list|,
name|resultFacet
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"count mismatch for dim "
operator|+
name|dim
argument_list|,
name|expectedFacet
operator|.
name|getCount
argument_list|()
argument_list|,
name|resultFacet
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

