begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|http
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonFactory
import|;
end_import

begin_class
specifier|public
class|class
name|AcceptHeaderTest
block|{
specifier|private
name|Representation
name|json
init|=
operator|new
name|JsonRepresentation
argument_list|(
name|MediaType
operator|.
name|parse
argument_list|(
literal|"application/json"
argument_list|)
argument_list|,
operator|new
name|JsonFactory
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Representation
name|html
init|=
operator|new
name|HtmlRepresentation
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testSpecificTypePlusGenericRange
parameter_list|()
block|{
comment|// both have the same q value (default of 1.0), but application/json is more specific
comment|// see RFC 7231, Section 5.3.2
name|AcceptHeader
name|ah
init|=
operator|new
name|AcceptHeader
argument_list|(
literal|"application/json, */*"
argument_list|)
decl_stmt|;
name|Representation
name|selected
decl_stmt|;
name|selected
operator|=
name|ah
operator|.
name|resolve
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
name|selected
argument_list|)
expr_stmt|;
name|selected
operator|=
name|ah
operator|.
name|resolve
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|html
argument_list|,
name|selected
argument_list|)
expr_stmt|;
name|selected
operator|=
name|ah
operator|.
name|resolve
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|html
argument_list|,
name|selected
argument_list|)
expr_stmt|;
name|selected
operator|=
name|ah
operator|.
name|resolve
argument_list|(
name|json
argument_list|,
name|html
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
name|selected
argument_list|)
expr_stmt|;
comment|// OAK-8135
name|selected
operator|=
name|ah
operator|.
name|resolve
argument_list|(
name|html
argument_list|,
name|json
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
name|selected
argument_list|)
expr_stmt|;
comment|// retry with q values
name|ah
operator|=
operator|new
name|AcceptHeader
argument_list|(
literal|"application/json; q=0.4, */*; q=0.5"
argument_list|)
expr_stmt|;
name|selected
operator|=
name|ah
operator|.
name|resolve
argument_list|(
name|html
argument_list|,
name|json
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|html
argument_list|,
name|selected
argument_list|)
expr_stmt|;
name|ah
operator|=
operator|new
name|AcceptHeader
argument_list|(
literal|"application/json, */*; q=0.5"
argument_list|)
expr_stmt|;
name|selected
operator|=
name|ah
operator|.
name|resolve
argument_list|(
name|html
argument_list|,
name|json
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
name|selected
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

