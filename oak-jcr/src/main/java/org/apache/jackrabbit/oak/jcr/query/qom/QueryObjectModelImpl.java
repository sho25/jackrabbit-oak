begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law  * or agreed to in writing, software distributed under the License is  * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the specific language  * governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Column
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|QueryObjectModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Selector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryManagerImpl
import|;
end_import

begin_comment
comment|/**  * The implementation of the corresponding JCR interface.  */
end_comment

begin_class
specifier|public
class|class
name|QueryObjectModelImpl
implements|implements
name|QueryObjectModel
block|{
specifier|private
specifier|final
name|QueryManagerImpl
name|queryManager
decl_stmt|;
specifier|private
specifier|final
name|ValueFactory
name|valueFactory
decl_stmt|;
specifier|final
name|Source
name|source
decl_stmt|;
specifier|final
name|Constraint
name|constraint
decl_stmt|;
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|bindVariableMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|Selector
argument_list|>
name|selectors
init|=
operator|new
name|ArrayList
argument_list|<
name|Selector
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Ordering
index|[]
name|orderings
decl_stmt|;
specifier|private
specifier|final
name|Column
index|[]
name|columns
decl_stmt|;
specifier|private
name|long
name|limit
decl_stmt|;
specifier|private
name|long
name|offset
decl_stmt|;
specifier|private
name|boolean
name|parsed
decl_stmt|;
specifier|public
name|QueryObjectModelImpl
parameter_list|(
name|QueryManagerImpl
name|queryManager
parameter_list|,
name|ValueFactory
name|valueFactory
parameter_list|,
name|Source
name|source
parameter_list|,
name|Constraint
name|constraint
parameter_list|,
name|Ordering
index|[]
name|orderings
parameter_list|,
name|Column
index|[]
name|columns
parameter_list|)
block|{
name|this
operator|.
name|queryManager
operator|=
name|queryManager
expr_stmt|;
name|this
operator|.
name|valueFactory
operator|=
name|valueFactory
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|constraint
operator|=
name|constraint
expr_stmt|;
name|this
operator|.
name|orderings
operator|=
name|orderings
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
block|}
specifier|public
name|void
name|bindVariables
parameter_list|()
block|{
if|if
condition|(
name|constraint
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|ConstraintImpl
operator|)
name|constraint
operator|)
operator|.
name|bindVariables
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Column
index|[]
name|getColumns
parameter_list|()
block|{
return|return
name|columns
return|;
block|}
annotation|@
name|Override
specifier|public
name|Constraint
name|getConstraint
parameter_list|()
block|{
return|return
name|constraint
return|;
block|}
annotation|@
name|Override
specifier|public
name|Ordering
index|[]
name|getOrderings
parameter_list|()
block|{
return|return
name|orderings
return|;
block|}
annotation|@
name|Override
specifier|public
name|Source
name|getSource
parameter_list|()
block|{
return|return
name|source
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getBindVariableNames
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|parse
argument_list|()
expr_stmt|;
name|String
index|[]
name|names
init|=
operator|new
name|String
index|[
name|bindVariableMap
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|bindVariableMap
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
name|names
argument_list|)
expr_stmt|;
return|return
name|names
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLimit
parameter_list|(
name|long
name|limit
parameter_list|)
block|{
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setOffset
parameter_list|(
name|long
name|offset
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
specifier|public
name|ValueFactory
name|getValueFactory
parameter_list|()
block|{
return|return
name|valueFactory
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|bindValue
parameter_list|(
name|String
name|varName
parameter_list|,
name|Value
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|parse
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|bindVariableMap
operator|.
name|containsKey
argument_list|(
name|varName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Variable name "
operator|+
name|varName
operator|+
literal|" is not a valid variable in this query"
argument_list|)
throw|;
block|}
name|bindVariableMap
operator|.
name|put
argument_list|(
name|varName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|parse
parameter_list|()
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|parsed
condition|)
block|{
return|return;
block|}
name|String
index|[]
name|names
init|=
name|queryManager
operator|.
name|createQuery
argument_list|(
name|getStatement
argument_list|()
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
operator|.
name|getBindVariableNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|n
range|:
name|names
control|)
block|{
name|bindVariableMap
operator|.
name|put
argument_list|(
name|n
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|QueryResult
name|execute
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|queryManager
operator|.
name|executeQuery
argument_list|(
name|getStatement
argument_list|()
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|,
name|bindVariableMap
argument_list|,
name|limit
argument_list|,
name|offset
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
name|Query
operator|.
name|JCR_JQOM
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStatement
parameter_list|()
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"select "
argument_list|)
expr_stmt|;
name|int
name|i
decl_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
condition|)
block|{
name|i
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Column
name|c
range|:
name|columns
control|)
block|{
if|if
condition|(
name|i
operator|++
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|" from "
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|source
argument_list|)
expr_stmt|;
if|if
condition|(
name|constraint
operator|!=
literal|null
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|" where "
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|orderings
operator|!=
literal|null
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|" order by "
argument_list|)
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Ordering
name|o
range|:
name|orderings
control|)
block|{
if|if
condition|(
name|i
operator|++
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStoredQueryPath
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|storeAsNode
parameter_list|(
name|String
name|arg0
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|addBindVariable
parameter_list|(
name|BindVariableValueImpl
name|var
parameter_list|)
block|{
name|this
operator|.
name|bindVariableMap
operator|.
name|put
argument_list|(
name|var
operator|.
name|getBindVariableName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

