begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|state
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
operator|.
name|JsonHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
operator|.
name|JsonTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
operator|.
name|JsonValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
operator|.
name|JsonValue
operator|.
name|JsonArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
operator|.
name|JsonValue
operator|.
name|JsonAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
operator|.
name|UnescapingJsonTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|util
operator|.
name|Function0
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|util
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|AbstractChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|AbstractNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A {@code NodeState} implementation on top of a {@code MicroKernel}.  * todo this class should probably go into oak-core  */
end_comment

begin_class
specifier|public
class|class
name|PersistentNodeState
extends|extends
name|AbstractNodeState
block|{
specifier|private
specifier|final
name|MicroKernel
name|microkernel
decl_stmt|;
specifier|private
specifier|final
name|String
name|revision
decl_stmt|;
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
comment|/**      * Create a new {@code NodeState} instance for the given {@code path} and {@code revision}.      *      * @param microkernel      * @param path      * @param revision      */
specifier|public
name|PersistentNodeState
parameter_list|(
name|MicroKernel
name|microkernel
parameter_list|,
name|Path
name|path
parameter_list|,
name|String
name|revision
parameter_list|)
block|{
name|this
operator|.
name|microkernel
operator|=
name|microkernel
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|revision
operator|=
name|revision
expr_stmt|;
block|}
specifier|private
specifier|final
name|Function0
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyStateImpl
argument_list|>
argument_list|>
name|properties
init|=
operator|new
name|Function0
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyStateImpl
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyStateImpl
argument_list|>
name|properties
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyStateImpl
argument_list|>
name|apply
parameter_list|()
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
name|readProperties
argument_list|()
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|PropertyState
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|properties
operator|.
name|apply
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|properties
operator|.
name|apply
argument_list|()
operator|.
name|values
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|microkernel
operator|.
name|nodeExists
argument_list|(
name|name
argument_list|,
name|revision
argument_list|)
condition|)
block|{
return|return
operator|new
name|PersistentNodeState
argument_list|(
name|microkernel
argument_list|,
name|path
operator|.
name|concat
argument_list|(
name|name
argument_list|)
argument_list|,
name|revision
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|()
block|{
name|JsonValue
name|count
init|=
name|properties
operator|.
name|apply
argument_list|()
operator|.
name|get
argument_list|(
literal|":childNodeCount"
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|c
init|=
name|toLong
argument_list|(
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|<
literal|0
condition|)
block|{
return|return
name|super
operator|.
name|getChildNodeCount
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|c
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|(
specifier|final
name|long
name|offset
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
block|{
name|String
name|json
init|=
name|microkernel
operator|.
name|getNodes
argument_list|(
name|path
operator|.
name|toMkPath
argument_list|()
argument_list|,
name|revision
argument_list|,
literal|1
argument_list|,
name|offset
argument_list|,
name|count
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ChildNodeEntry
argument_list|>
name|childNodeEntries
init|=
operator|new
name|ArrayList
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
decl_stmt|;
operator|new
name|JsonParser
argument_list|(
operator|new
name|JsonHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|object
parameter_list|(
name|JsonParser
name|parser
parameter_list|,
name|Token
name|key
parameter_list|,
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|super
operator|.
name|object
argument_list|(
name|parser
argument_list|,
name|key
argument_list|,
name|tokenizer
argument_list|)
expr_stmt|;
name|childNodeEntries
operator|.
name|add
argument_list|(
name|createChildNodeEntry
argument_list|(
name|key
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|parseObject
argument_list|(
operator|new
name|UnescapingJsonTokenizer
argument_list|(
name|json
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|childNodeEntries
return|;
block|}
comment|//------------------------------------------< private>---
specifier|private
name|ChildNodeEntry
name|createChildNodeEntry
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|AbstractChildNodeEntry
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getNode
parameter_list|()
block|{
return|return
operator|new
name|PersistentNodeState
argument_list|(
name|microkernel
argument_list|,
name|path
operator|.
name|concat
argument_list|(
name|name
argument_list|)
argument_list|,
name|revision
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ChildNodeEntry("
operator|+
name|name
operator|+
literal|')'
return|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|long
name|toLong
parameter_list|(
name|JsonValue
name|count
parameter_list|)
block|{
if|if
condition|(
name|count
operator|==
literal|null
operator|||
operator|!
name|count
operator|.
name|isAtom
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
try|try
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|count
operator|.
name|asAtom
argument_list|()
operator|.
name|value
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyStateImpl
argument_list|>
name|readProperties
parameter_list|()
block|{
name|String
name|json
init|=
name|microkernel
operator|.
name|getNodes
argument_list|(
name|path
operator|.
name|toMkPath
argument_list|()
argument_list|,
name|revision
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyStateImpl
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PropertyStateImpl
argument_list|>
argument_list|()
decl_stmt|;
operator|new
name|JsonParser
argument_list|(
operator|new
name|JsonHandler
argument_list|()
block|{
name|JsonArray
name|multiValue
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|atom
parameter_list|(
name|Token
name|key
parameter_list|,
name|Token
name|value
parameter_list|)
block|{
if|if
condition|(
name|multiValue
operator|==
literal|null
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|key
operator|.
name|text
argument_list|()
argument_list|,
operator|new
name|PropertyStateImpl
argument_list|(
name|key
operator|.
name|text
argument_list|()
argument_list|,
operator|new
name|JsonAtom
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|multiValue
operator|.
name|add
argument_list|(
operator|new
name|JsonAtom
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|array
parameter_list|(
name|JsonParser
name|parser
parameter_list|,
name|Token
name|key
parameter_list|,
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|multiValue
operator|=
operator|new
name|JsonArray
argument_list|()
expr_stmt|;
name|super
operator|.
name|array
argument_list|(
name|parser
argument_list|,
name|key
argument_list|,
name|tokenizer
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|key
operator|.
name|text
argument_list|()
argument_list|,
operator|new
name|PropertyStateImpl
argument_list|(
name|key
operator|.
name|text
argument_list|()
argument_list|,
name|multiValue
argument_list|)
argument_list|)
expr_stmt|;
name|multiValue
operator|=
literal|null
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|parseObject
argument_list|(
operator|new
name|UnescapingJsonTokenizer
argument_list|(
name|json
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
block|}
end_class

end_unit

