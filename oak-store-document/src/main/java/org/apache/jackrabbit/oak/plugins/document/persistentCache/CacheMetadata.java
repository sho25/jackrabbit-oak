begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newConcurrentMap
import|;
end_import

begin_comment
comment|/**  * In order to avoid leaking values from the metadataMap, following order should  * be maintained for combining the cache and CacheMetadata:  *  * 1. For remove(), removeAll() and clear():  *  * - cache.invalidate()  * - metadata.remove()  *  * 2. For put(), putAll() and putFromPersistenceAndIncrement():  *  * - metadata.put()  * - cache.put()  *  * 3. For increment():  *  * - metadata.increment()  * - cache.get()  * - (metadata.remove() if value doesn't exists in cache)  *  * 4. For incrementAll():  *  * - metadata.incrementAll()  * - cache.getAll()  * - (metadata.removeAll() on keys that returned nulls)  *  * Preserving this order will allow to avoid leaked values in the metadata without  * an extra synchronization between cache and metadata operations. This strategy  * is a best-effort option - it may happen that cache values won't have their  * metadata entries.  */
end_comment

begin_class
specifier|public
class|class
name|CacheMetadata
parameter_list|<
name|K
parameter_list|>
block|{
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|MetadataEntry
argument_list|>
name|metadataMap
init|=
name|newConcurrentMap
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|enabled
init|=
literal|true
decl_stmt|;
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|enabled
return|;
block|}
name|void
name|disable
parameter_list|()
block|{
name|this
operator|.
name|enabled
operator|=
literal|false
expr_stmt|;
block|}
name|void
name|put
parameter_list|(
name|K
name|key
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
return|return;
block|}
name|getOrCreate
argument_list|(
name|key
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|void
name|putFromPersistenceAndIncrement
parameter_list|(
name|K
name|key
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
return|return;
block|}
name|getOrCreate
argument_list|(
name|key
argument_list|,
literal|true
argument_list|)
operator|.
name|incrementCount
argument_list|()
expr_stmt|;
block|}
name|void
name|increment
parameter_list|(
name|K
name|key
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
return|return;
block|}
name|getOrCreate
argument_list|(
name|key
argument_list|,
literal|false
argument_list|)
operator|.
name|incrementCount
argument_list|()
expr_stmt|;
block|}
name|MetadataEntry
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|metadataMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
name|void
name|putAll
parameter_list|(
name|Iterable
argument_list|<
name|?
argument_list|>
name|keys
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Object
name|k
range|:
name|keys
control|)
block|{
name|getOrCreate
argument_list|(
operator|(
name|K
operator|)
name|k
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|incrementAll
parameter_list|(
name|Iterable
argument_list|<
name|?
argument_list|>
name|keys
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Object
name|k
range|:
name|keys
control|)
block|{
name|getOrCreate
argument_list|(
operator|(
name|K
operator|)
name|k
argument_list|,
literal|false
argument_list|)
operator|.
name|incrementCount
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|removeAll
parameter_list|(
name|Iterable
argument_list|<
name|?
argument_list|>
name|keys
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Object
name|k
range|:
name|keys
control|)
block|{
name|metadataMap
operator|.
name|remove
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|clear
parameter_list|()
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
return|return;
block|}
name|metadataMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|MetadataEntry
name|getOrCreate
parameter_list|(
name|K
name|key
parameter_list|,
name|boolean
name|readFromPersistentCache
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
return|return
literal|null
return|;
block|}
name|MetadataEntry
name|metadata
init|=
name|metadataMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
name|MetadataEntry
name|newEntry
init|=
operator|new
name|MetadataEntry
argument_list|(
name|readFromPersistentCache
argument_list|)
decl_stmt|;
name|MetadataEntry
name|oldEntry
init|=
name|metadataMap
operator|.
name|putIfAbsent
argument_list|(
name|key
argument_list|,
name|newEntry
argument_list|)
decl_stmt|;
name|metadata
operator|=
name|oldEntry
operator|==
literal|null
condition|?
name|newEntry
else|:
name|oldEntry
expr_stmt|;
block|}
return|return
name|metadata
return|;
block|}
specifier|static
class|class
name|MetadataEntry
block|{
specifier|private
specifier|final
name|AtomicLong
name|accessCount
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|readFromPersistentCache
decl_stmt|;
specifier|private
name|MetadataEntry
parameter_list|(
name|boolean
name|readFromPersistentCache
parameter_list|)
block|{
name|this
operator|.
name|readFromPersistentCache
operator|=
name|readFromPersistentCache
expr_stmt|;
block|}
name|void
name|incrementCount
parameter_list|()
block|{
name|accessCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|long
name|getAccessCount
parameter_list|()
block|{
return|return
name|accessCount
operator|.
name|get
argument_list|()
return|;
block|}
name|boolean
name|isReadFromPersistentCache
parameter_list|()
block|{
return|return
name|readFromPersistentCache
return|;
block|}
block|}
block|}
end_class

end_unit

