begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoClientOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|ServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMKBuilderProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|MongoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeThat
import|;
end_import

begin_comment
comment|/**  * A long running resilience IT. The test sets up a three node replica set and  * adds nodes in batches between one and ten nodes. In the background a task  * periodically stops the MongoDB primary for 30 seconds. A reader thread  * verifies all nodes are present. This test is skipped by default and can be  * enabled with a system property {@code -Dtest=ReplicaSetResilienceIT}.  */
end_comment

begin_class
specifier|public
class|class
name|ReplicaSetResilienceIT
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReplicaSetResilienceIT
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_NODES
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
name|ReplicaSetResilienceIT
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".numNodes"
argument_list|,
literal|100
operator|*
literal|1000
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|MongodProcessFactory
name|mongodProcessFactory
init|=
operator|new
name|MongodProcessFactory
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|DocumentMKBuilderProvider
name|builderProvider
init|=
operator|new
name|DocumentMKBuilderProvider
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|MongodProcess
argument_list|>
name|executables
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|ScheduledExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
decl_stmt|;
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
name|DocumentNodeStore
name|ns
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Exception
argument_list|>
name|exceptions
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|checkEnabled
parameter_list|()
block|{
name|assumeThat
argument_list|(
name|ReplicaSetResilienceIT
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|is
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|IOException
block|{
name|executables
operator|.
name|putAll
argument_list|(
name|mongodProcessFactory
operator|.
name|startReplicaSet
argument_list|(
literal|"rs"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// crash and restart the primary once a minute
name|executorService
operator|.
name|scheduleWithFixedDelay
argument_list|(
operator|new
name|PrimaryCrasher
argument_list|()
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
literal|"mongodb://"
operator|+
name|MongodProcessFactory
operator|.
name|localhost
argument_list|(
name|executables
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|ns
operator|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setMongoDB
argument_list|(
name|uri
argument_list|,
name|MongoUtils
operator|.
name|DB
argument_list|,
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|Thread
name|reader
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Verifier
argument_list|()
argument_list|,
literal|"Reader"
argument_list|)
decl_stmt|;
name|reader
operator|.
name|start
argument_list|()
expr_stmt|;
name|AtomicInteger
name|i
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|get
argument_list|()
operator|<
name|NUM_NODES
operator|&&
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|names
init|=
name|addNodes
argument_list|(
name|builder
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|TestUtils
operator|.
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created {}"
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|join
argument_list|()
expr_stmt|;
for|for
control|(
name|Exception
name|e
range|:
name|exceptions
control|)
block|{
throw|throw
name|e
throw|;
block|}
name|verifyAll
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|verifyAll
parameter_list|()
block|{
name|Stopwatch
name|sw
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|names
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNodeNames
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_NODES
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|names
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|nodeName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|names
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Verified {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|long
name|rate
init|=
name|NUM_NODES
operator|*
literal|1000L
decl_stmt|;
name|rate
operator|=
name|rate
operator|/
name|sw
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Verified at {} nodes/s"
argument_list|,
name|rate
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Iterable
argument_list|<
name|String
argument_list|>
name|addNodes
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|AtomicInteger
name|counter
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// create between one and ten nodes
name|int
name|numNodes
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNodes
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|nodeName
argument_list|(
name|counter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|names
return|;
block|}
specifier|private
specifier|static
name|String
name|nodeName
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"node-%09d"
argument_list|,
name|i
argument_list|)
return|;
block|}
specifier|private
class|class
name|Verifier
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_NODES
condition|;
name|i
operator|++
control|)
block|{
name|await
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|await
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|String
name|name
init|=
name|nodeName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NodeState
name|root
init|=
name|ns
operator|.
name|getRoot
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|root
operator|.
name|hasChildNode
argument_list|(
name|name
argument_list|)
condition|)
block|{
try|try
block|{
comment|// sleep a bit
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
comment|// must not see a gap (look ahead 3 nodes)
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
literal|3
condition|;
name|j
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|root
operator|.
name|hasChildNode
argument_list|(
name|nodeName
argument_list|(
name|i
operator|+
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// get a fresh root
name|root
operator|=
name|ns
operator|.
name|getRoot
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Seen {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|PrimaryCrasher
implements|implements
name|Runnable
block|{
specifier|private
specifier|volatile
name|int
name|stopped
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
try|try
block|{
if|if
condition|(
name|stopped
operator|>
literal|0
condition|)
block|{
name|start
argument_list|(
name|stopped
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stopPrimary
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception running task"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|void
name|start
parameter_list|(
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"=== Starting MongoDB on port {}"
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|executables
operator|.
name|get
argument_list|(
name|port
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|stopped
operator|=
literal|0
expr_stmt|;
block|}
specifier|private
name|void
name|stopPrimary
parameter_list|()
block|{
name|List
argument_list|<
name|ServerAddress
argument_list|>
name|seeds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MongodProcess
name|p
range|:
name|executables
operator|.
name|values
argument_list|()
control|)
block|{
name|seeds
operator|.
name|add
argument_list|(
name|p
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|MongoClient
name|c
init|=
operator|new
name|MongoClient
argument_list|(
name|seeds
argument_list|,
operator|new
name|MongoClientOptions
operator|.
name|Builder
argument_list|()
operator|.
name|requiredReplicaSetName
argument_list|(
literal|"rs"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
init|)
block|{
name|ServerAddress
name|address
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|address
operator|=
name|c
operator|.
name|getReplicaSetStatus
argument_list|()
operator|.
name|getMaster
argument_list|()
expr_stmt|;
if|if
condition|(
name|address
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Primary unavailable. Waiting one second..."
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|address
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"=== ReplicaSet does not (yet?) have a primary"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"=== Stopping MongoDB on port {}"
argument_list|,
name|address
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|MongodProcess
name|proc
init|=
name|executables
operator|.
name|get
argument_list|(
name|address
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|proc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|stopped
operator|=
name|address
operator|.
name|getPort
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Stopping mongod process failed ({}/5): {}"
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|stopped
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"=== Stopped primary on port {}"
argument_list|,
name|stopped
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"=== Unable to stop primary on port {}"
argument_list|,
name|address
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception stopping primary"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

