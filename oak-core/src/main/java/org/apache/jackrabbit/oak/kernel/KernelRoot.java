begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
operator|.
name|KernelTree
operator|.
name|Listener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|CoreValueUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|PathUtils
operator|.
name|elements
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|PathUtils
operator|.
name|getName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|PathUtils
operator|.
name|getParentPath
import|;
end_import

begin_comment
comment|/**  * This {@code Root} implementation accumulates all changes into a json diff  * and applies them to the microkernel on {@link #commit()}  *  * TODO: review/rewrite when OAK-45 is resolved  * When the MicroKernel has support for branching and merging private working copies,  * this implementation could:  * - directly write every operation through to the private working copy  * - batch write operations through to the private working copy when the  *   transient space gets too big.  * - spool write operations through to the private working copy on a background thread  */
end_comment

begin_class
specifier|public
class|class
name|KernelRoot
implements|implements
name|Root
block|{
specifier|private
specifier|final
name|KernelNodeStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|String
name|workspaceName
decl_stmt|;
comment|/** Base node state of this tree */
specifier|private
name|NodeState
name|base
decl_stmt|;
comment|/** Root state of this tree */
specifier|private
name|KernelTree
name|root
decl_stmt|;
comment|/** Log of changes to this tree */
specifier|private
name|ChangeLog
name|changeLog
init|=
operator|new
name|ChangeLog
argument_list|()
decl_stmt|;
specifier|public
name|KernelRoot
parameter_list|(
name|KernelNodeStore
name|store
parameter_list|,
name|String
name|workspaceName
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|workspaceName
operator|=
name|workspaceName
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|workspaceName
argument_list|)
expr_stmt|;
name|this
operator|.
name|root
operator|=
operator|new
name|KernelTree
argument_list|(
name|base
argument_list|,
name|changeLog
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|move
parameter_list|(
name|String
name|sourcePath
parameter_list|,
name|String
name|destPath
parameter_list|)
block|{
name|KernelTree
name|source
init|=
name|getTransientState
argument_list|(
name|sourcePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|KernelTree
name|destParent
init|=
name|getTransientState
argument_list|(
name|getParentPath
argument_list|(
name|destPath
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|destName
init|=
name|getName
argument_list|(
name|destPath
argument_list|)
decl_stmt|;
return|return
name|destParent
operator|!=
literal|null
operator|&&
name|source
operator|.
name|move
argument_list|(
name|destParent
argument_list|,
name|destName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|copy
parameter_list|(
name|String
name|sourcePath
parameter_list|,
name|String
name|destPath
parameter_list|)
block|{
name|KernelTree
name|sourceNode
init|=
name|getTransientState
argument_list|(
name|sourcePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceNode
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|KernelTree
name|destParent
init|=
name|getTransientState
argument_list|(
name|getParentPath
argument_list|(
name|destPath
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|destName
init|=
name|getName
argument_list|(
name|destPath
argument_list|)
decl_stmt|;
return|return
name|destParent
operator|!=
literal|null
operator|&&
name|sourceNode
operator|.
name|copy
argument_list|(
name|destParent
argument_list|,
name|destName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Tree
name|getTree
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|getTransientState
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|()
block|{
name|base
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|workspaceName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|commit
parameter_list|()
throws|throws
name|CommitFailedException
block|{
try|try
block|{
name|store
operator|.
name|save
argument_list|(
name|this
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|changeLog
operator|=
operator|new
name|ChangeLog
argument_list|()
expr_stmt|;
name|base
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|workspaceName
argument_list|)
expr_stmt|;
name|root
operator|=
operator|new
name|KernelTree
argument_list|(
name|base
argument_list|,
name|changeLog
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|hasPendingChanges
parameter_list|()
block|{
return|return
operator|!
name|changeLog
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|//------------------------------------------------------------< internal>---
comment|/**      * JSOP representation of the changes done to this tree      * @return  changes in JSOP representation      */
name|String
name|getChanges
parameter_list|()
block|{
return|return
name|changeLog
operator|.
name|toJsop
argument_list|()
return|;
block|}
comment|//------------------------------------------------------------< private>---
comment|/**      * Get a transient node state for the node identified by      * {@code path}      * @param path  the path to the node state      * @return  a {@link KernelTree} instance for the item      *          at {@code path} or {@code null} if no such item exits.      */
specifier|private
name|KernelTree
name|getTransientState
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|KernelTree
name|state
init|=
name|root
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|state
operator|=
name|state
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|state
return|;
block|}
comment|/**      * Path of the item {@code name} of the given {@code state}      *      * @param state      * @param name The item name.      * @return relative path of the item {@code name}      */
specifier|private
specifier|static
name|String
name|path
parameter_list|(
name|Tree
name|state
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
name|path
init|=
name|state
operator|.
name|getPath
argument_list|()
decl_stmt|;
return|return
name|path
operator|.
name|isEmpty
argument_list|()
condition|?
name|name
else|:
name|path
operator|+
literal|'/'
operator|+
name|name
return|;
block|}
comment|/**      * This {@code Listener} implementation records all changes to      * a associated tree as JSOP.      */
specifier|private
specifier|static
class|class
name|ChangeLog
implements|implements
name|Listener
block|{
specifier|private
specifier|final
name|StringBuilder
name|jsop
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|addChild
parameter_list|(
name|KernelTree
name|tree
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|jsop
operator|.
name|append
argument_list|(
literal|"+\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|(
name|tree
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":{}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeChild
parameter_list|(
name|KernelTree
name|tree
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|jsop
operator|.
name|append
argument_list|(
literal|"-\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|(
name|tree
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
name|KernelTree
name|tree
parameter_list|,
name|String
name|name
parameter_list|,
name|CoreValue
name|value
parameter_list|)
block|{
name|jsop
operator|.
name|append
argument_list|(
literal|"^\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|(
name|tree
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":"
argument_list|)
operator|.
name|append
argument_list|(
name|CoreValueUtil
operator|.
name|toJsonValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
name|KernelTree
name|tree
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|CoreValue
argument_list|>
name|values
parameter_list|)
block|{
name|jsop
operator|.
name|append
argument_list|(
literal|"^\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|(
name|tree
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":"
argument_list|)
operator|.
name|append
argument_list|(
name|CoreValueUtil
operator|.
name|toJsonArray
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeProperty
parameter_list|(
name|KernelTree
name|tree
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|jsop
operator|.
name|append
argument_list|(
literal|"^\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|(
name|tree
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":null"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|move
parameter_list|(
name|KernelTree
name|tree
parameter_list|,
name|String
name|name
parameter_list|,
name|KernelTree
name|moved
parameter_list|)
block|{
name|jsop
operator|.
name|append
argument_list|(
literal|">\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|(
name|tree
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":\""
argument_list|)
operator|.
name|append
argument_list|(
name|moved
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|copy
parameter_list|(
name|KernelTree
name|state
parameter_list|,
name|String
name|name
parameter_list|,
name|KernelTree
name|copied
parameter_list|)
block|{
name|jsop
operator|.
name|append
argument_list|(
literal|"*\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|(
name|state
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":\""
argument_list|)
operator|.
name|append
argument_list|(
name|copied
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|jsop
operator|.
name|length
argument_list|()
operator|==
literal|0
return|;
block|}
specifier|public
name|String
name|toJsop
parameter_list|()
block|{
return|return
name|jsop
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

