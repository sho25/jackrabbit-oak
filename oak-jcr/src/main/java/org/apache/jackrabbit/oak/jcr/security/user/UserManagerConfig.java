begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_comment
comment|/**  * UserManagerConfig...  */
end_comment

begin_class
specifier|public
class|class
name|UserManagerConfig
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UserManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Configuration parameter to change the default algorithm used to generate      * password hashes. The default value is {@link PasswordUtility#DEFAULT_ALGORITHM}.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_PASSWORD_HASH_ALGORITHM
init|=
literal|"passwordHashAlgorithm"
decl_stmt|;
comment|/**      * Configuration parameter to change the number of iterations used for      * password hash generation. The default value is {@link PasswordUtility#DEFAULT_ITERATIONS}.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_PASSWORD_HASH_ITERATIONS
init|=
literal|"passwordHashIterations"
decl_stmt|;
comment|/**      * Configuration parameter to change the number of iterations used for      * password hash generation. The default value is {@link PasswordUtility#DEFAULT_ITERATIONS}.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_PASSWORD_SALT_SIZE
init|=
literal|"passwordSaltSize"
decl_stmt|;
comment|// TODO: check if that can really be node, who would retrieve it and what kind of access rights needed to be enforced on it
specifier|private
specifier|final
name|Node
name|configNode
decl_stmt|;
specifier|private
specifier|final
name|String
name|adminId
decl_stmt|;
comment|//private final AuthorizableAction[] actions;
name|UserManagerConfig
parameter_list|(
name|Node
name|configNode
parameter_list|,
name|String
name|adminId
parameter_list|)
block|{
name|this
operator|.
name|configNode
operator|=
name|configNode
expr_stmt|;
name|this
operator|.
name|adminId
operator|=
name|adminId
expr_stmt|;
comment|// this.actions = (actions == null) ? new AuthorizableAction[0] : actions;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getConfigValue
parameter_list|(
name|String
name|key
parameter_list|,
name|T
name|defaultValue
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|configNode
operator|.
name|hasProperty
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|convert
argument_list|(
name|configNode
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// unexpected error -> return default value
name|log
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|defaultValue
return|;
block|}
specifier|public
name|String
name|getAdminId
parameter_list|()
block|{
return|return
name|adminId
return|;
block|}
comment|//    public AuthorizableAction[] getAuthorizableActions() {
comment|//        return actions;
comment|//    }
comment|//--------------------------------------------------------< private>---
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|convert
parameter_list|(
name|Property
name|configProperty
parameter_list|,
name|T
name|defaultValue
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|T
name|value
decl_stmt|;
name|String
name|str
decl_stmt|;
comment|// TODO properly deal with multi-value properties and array-default-values.
if|if
condition|(
name|configProperty
operator|.
name|isMultiple
argument_list|()
condition|)
block|{
name|Value
index|[]
name|vls
init|=
name|configProperty
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|str
operator|=
operator|(
name|vls
operator|.
name|length
operator|==
literal|0
operator|)
condition|?
literal|""
else|:
name|vls
index|[
literal|0
index|]
operator|.
name|getString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|str
operator|=
name|configProperty
operator|.
name|getString
argument_list|()
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|targetClass
init|=
operator|(
name|defaultValue
operator|==
literal|null
operator|)
condition|?
name|String
operator|.
name|class
else|:
name|defaultValue
operator|.
name|getClass
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|targetClass
operator|==
name|String
operator|.
name|class
condition|)
block|{
name|value
operator|=
operator|(
name|T
operator|)
name|str
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|targetClass
operator|==
name|Integer
operator|.
name|class
condition|)
block|{
name|value
operator|=
operator|(
name|T
operator|)
name|Integer
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|targetClass
operator|==
name|Long
operator|.
name|class
condition|)
block|{
name|value
operator|=
operator|(
name|T
operator|)
name|Long
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|targetClass
operator|==
name|Double
operator|.
name|class
condition|)
block|{
name|value
operator|=
operator|(
name|T
operator|)
name|Double
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|targetClass
operator|==
name|Boolean
operator|.
name|class
condition|)
block|{
name|value
operator|=
operator|(
name|T
operator|)
name|Boolean
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// unsupported target type
name|log
operator|.
name|warn
argument_list|(
literal|"Unsupported target type {} for config entry {}"
argument_list|,
name|targetClass
operator|.
name|getName
argument_list|()
argument_list|,
name|configProperty
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot convert config entry "
operator|+
name|configProperty
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|targetClass
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid value of config entry {}; cannot be parsed into {}"
argument_list|,
name|configProperty
operator|.
name|getName
argument_list|()
argument_list|,
name|targetClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|=
name|defaultValue
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
block|}
end_class

end_unit

