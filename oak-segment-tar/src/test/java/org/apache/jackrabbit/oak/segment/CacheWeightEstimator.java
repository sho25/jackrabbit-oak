begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Segment
operator|.
name|GC_FULL_GENERATION_OFFSET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentCache
operator|.
name|newSegmentCache
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentVersion
operator|.
name|LATEST_VERSION
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
operator|.
name|SimpleImmutableEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|AbstractCacheStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|CacheWeights
operator|.
name|StringCacheWeigher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|PriorityCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|memory
operator|.
name|MemoryStore
import|;
end_import

begin_comment
comment|/**  * Test/Utility class to measure size in memory for common segment-tar objects.  *<p>  * The test is<b>disabled</b> by default, to run it you need to set the  * {@code CacheWeightsTest} system property:<br>  * {@code mv clean test -Dtest=CacheWeightsTest -DCacheWeightsTest=true -Dtest.opts.memory=-Xmx2G}  *</p>  *<p>  * To collect the results check the  * {@code org.apache.jackrabbit.oak.segment.CacheWeightsTest-output.txt} file:<br>  * {@code cat target/surefire-reports/org.apache.jackrabbit.oak.segment.CacheWeightsTest-output.txt}  *</p>  */
end_comment

begin_class
specifier|public
class|class
name|CacheWeightEstimator
block|{
comment|// http://www.javaworld.com/article/2077496/testing-debugging/java-tip-130--do-you-know-your-data-size-.html
comment|// http://www.javaspecialists.eu/archive/Issue029.html
comment|// http://www.slideshare.net/cnbailey/memory-efficient-java
comment|/*-      * Open JDK's JOL report on various segment classes:      org.apache.jackrabbit.oak.segment.RecordId object internals:     OFFSET  SIZE      TYPE DESCRIPTION                    VALUE       0    12           (object header)                N/A      12     4       int RecordId.offset                N/A      16     4 SegmentId RecordId.segmentId             N/A      20     4           (loss due to the next object alignment)     Instance size: 24 bytes     Space losses: 0 bytes internal + 4 bytes external = 4 bytes total      org.apache.jackrabbit.oak.segment.SegmentId object internals:     OFFSET  SIZE         TYPE DESCRIPTION                    VALUE       0    12              (object header)                N/A      12     4          int SegmentId.gcGeneration         N/A      16     8         long SegmentId.msb                  N/A      24     8         long SegmentId.lsb                  N/A      32     8         long SegmentId.creationTime         N/A      40     4 SegmentStore SegmentId.store                N/A      44     4       String SegmentId.gcInfo               N/A      48     4      Segment SegmentId.segment              N/A      52     4              (loss due to the next object alignment)     Instance size: 56 bytes     Space losses: 0 bytes internal + 4 bytes external = 4 bytes total      org.apache.jackrabbit.oak.segment.Segment object internals:     OFFSET  SIZE              TYPE DESCRIPTION                    VALUE       0    12                   (object header)                N/A      12     4      SegmentStore Segment.store                  N/A      16     4     SegmentReader Segment.reader                 N/A      20     4         SegmentId Segment.id                     N/A      24     4        ByteBuffer Segment.data                   N/A      28     4    SegmentVersion Segment.version                N/A      32     4     RecordNumbers Segment.recordNumbers          N/A      36     4 SegmentReferences Segment.segmentReferences      N/A      40     4            String Segment.info                   N/A      44     4                   (loss due to the next object alignment)     Instance size: 48 bytes     Space losses: 0 bytes internal + 4 bytes external = 4 bytes total      org.apache.jackrabbit.oak.segment.Template object internals:     OFFSET  SIZE               TYPE DESCRIPTION                    VALUE       0    12                    (object header)                N/A      12     4      SegmentReader Template.reader                N/A      16     4      PropertyState Template.primaryType           N/A      20     4      PropertyState Template.mixinTypes            N/A      24     4 PropertyTemplate[] Template.properties            N/A      28     4             String Template.childName             N/A     Instance size: 32 bytes     Space losses: 0 bytes internal + 0 bytes external = 0 bytes total       */
specifier|private
specifier|static
name|MemoryStore
name|store
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|run
argument_list|(
name|CacheWeightEstimator
operator|::
name|testObjects
argument_list|)
expr_stmt|;
name|run
argument_list|(
name|CacheWeightEstimator
operator|::
name|testSegmentIds
argument_list|)
expr_stmt|;
name|run
argument_list|(
name|CacheWeightEstimator
operator|::
name|testSegmentIdsWGc
argument_list|)
expr_stmt|;
name|run
argument_list|(
name|CacheWeightEstimator
operator|::
name|testRecordIds
argument_list|)
expr_stmt|;
name|run
argument_list|(
name|CacheWeightEstimator
operator|::
name|testRecordIdsWGc
argument_list|)
expr_stmt|;
name|run
argument_list|(
name|CacheWeightEstimator
operator|::
name|testStringCache
argument_list|)
expr_stmt|;
name|run
argument_list|(
name|CacheWeightEstimator
operator|::
name|testNodeCache
argument_list|)
expr_stmt|;
name|run
argument_list|(
name|CacheWeightEstimator
operator|::
name|testSegments
argument_list|)
expr_stmt|;
name|run
argument_list|(
name|CacheWeightEstimator
operator|::
name|testSegmentCache
argument_list|)
expr_stmt|;
name|run
argument_list|(
name|CacheWeightEstimator
operator|::
name|testStrings
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|run
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
throws|throws
name|Exception
block|{
name|store
operator|=
operator|new
name|MemoryStore
argument_list|()
expr_stmt|;
try|try
block|{
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|store
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|testObjects
parameter_list|()
block|{
specifier|final
name|int
name|count
init|=
literal|1000000
decl_stmt|;
name|Supplier
argument_list|<
name|Entry
argument_list|<
name|Object
argument_list|,
name|Long
index|[]
argument_list|>
argument_list|>
name|factory
init|=
parameter_list|()
lambda|->
block|{
name|Object
index|[]
name|objects
init|=
operator|new
name|Object
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|Object
name|o
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|objects
index|[
name|i
index|]
operator|=
name|o
expr_stmt|;
block|}
name|long
name|weight
init|=
name|CacheWeights
operator|.
name|OBJECT_HEADER_SIZE
operator|*
name|count
decl_stmt|;
return|return
operator|new
name|SimpleImmutableEntry
argument_list|<>
argument_list|(
name|objects
argument_list|,
operator|new
name|Long
index|[]
block|{
operator|(
name|long
operator|)
name|count
operator|,
name|weight
block|}
block|)
decl_stmt|;
block|}
empty_stmt|;
name|runTest
argument_list|(
name|factory
argument_list|,
literal|"Object[x"
operator|+
name|count
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
end_class

begin_function
specifier|private
specifier|static
name|void
name|testSegmentIds
parameter_list|()
block|{
name|runSegmentIds
argument_list|(
literal|1000000
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|testSegmentIdsWGc
parameter_list|()
block|{
name|runSegmentIds
argument_list|(
literal|1000000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|runSegmentIds
parameter_list|(
specifier|final
name|int
name|count
parameter_list|,
specifier|final
name|boolean
name|gcInfo
parameter_list|)
block|{
name|Supplier
argument_list|<
name|Entry
argument_list|<
name|Object
argument_list|,
name|Long
index|[]
argument_list|>
argument_list|>
name|factory
init|=
parameter_list|()
lambda|->
block|{
name|long
name|weight
init|=
literal|0
decl_stmt|;
name|Object
index|[]
name|objects
init|=
operator|new
name|Object
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|SegmentId
name|o
init|=
name|randomSegmentId
argument_list|(
name|gcInfo
argument_list|)
decl_stmt|;
name|weight
operator|+=
name|o
operator|.
name|estimateMemoryUsage
argument_list|()
expr_stmt|;
name|objects
index|[
name|i
index|]
operator|=
name|o
expr_stmt|;
block|}
return|return
operator|new
name|SimpleImmutableEntry
argument_list|<>
argument_list|(
name|objects
argument_list|,
operator|new
name|Long
index|[]
block|{
operator|(
name|long
operator|)
name|count
operator|,
name|weight
block|}
block|)
decl_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|String
name|name
init|=
literal|"SegmentId"
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|gcInfo
condition|)
block|{
name|name
operator|+=
literal|"[x"
operator|+
name|count
operator|+
literal|"|GCInfo]"
expr_stmt|;
block|}
else|else
block|{
name|name
operator|+=
literal|"[x"
operator|+
name|count
operator|+
literal|"]"
expr_stmt|;
block|}
end_if

begin_expr_stmt
name|runTest
argument_list|(
name|factory
argument_list|,
name|name
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      private
specifier|static
name|void
name|testRecordIds
parameter_list|()
block|{
name|runRecordIds
argument_list|(
literal|1000000
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|testRecordIdsWGc
parameter_list|()
block|{
name|runRecordIds
argument_list|(
literal|1000000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|runRecordIds
parameter_list|(
specifier|final
name|int
name|count
parameter_list|,
specifier|final
name|boolean
name|gcInfo
parameter_list|)
block|{
name|Supplier
argument_list|<
name|Entry
argument_list|<
name|Object
argument_list|,
name|Long
index|[]
argument_list|>
argument_list|>
name|factory
init|=
parameter_list|()
lambda|->
block|{
name|long
name|weight
init|=
literal|0
decl_stmt|;
name|Object
index|[]
name|objects
init|=
operator|new
name|Object
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|RecordId
name|o
init|=
name|randomRecordId
argument_list|(
name|gcInfo
argument_list|)
decl_stmt|;
name|weight
operator|+=
name|o
operator|.
name|estimateMemoryUsage
argument_list|()
expr_stmt|;
name|objects
index|[
name|i
index|]
operator|=
name|o
expr_stmt|;
block|}
return|return
operator|new
name|SimpleImmutableEntry
argument_list|<>
argument_list|(
name|objects
argument_list|,
operator|new
name|Long
index|[]
block|{
operator|(
name|long
operator|)
name|count
operator|,
name|weight
block|}
block|)
decl_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|String
name|name
init|=
literal|"RecordId"
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|gcInfo
condition|)
block|{
name|name
operator|+=
literal|"[x"
operator|+
name|count
operator|+
literal|"|GCInfo]"
expr_stmt|;
block|}
else|else
block|{
name|name
operator|+=
literal|"[x"
operator|+
name|count
operator|+
literal|"]"
expr_stmt|;
block|}
end_if

begin_expr_stmt
name|runTest
argument_list|(
name|factory
argument_list|,
name|name
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      private
specifier|static
name|void
name|testStringCache
parameter_list|()
block|{
specifier|final
name|int
name|count
init|=
literal|1000000
decl_stmt|;
specifier|final
name|int
name|keySize
init|=
literal|96
decl_stmt|;
specifier|final
name|boolean
name|gcInfo
init|=
literal|true
decl_stmt|;
name|Supplier
argument_list|<
name|Entry
argument_list|<
name|Object
argument_list|,
name|Long
index|[]
argument_list|>
argument_list|>
name|factory
init|=
parameter_list|()
lambda|->
block|{
name|RecordCache
argument_list|<
name|String
argument_list|>
name|cache
init|=
name|RecordCache
operator|.
name|factory
argument_list|(
name|count
argument_list|,
operator|new
name|StringCacheWeigher
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|String
name|k
init|=
name|randomString
argument_list|(
name|keySize
argument_list|)
decl_stmt|;
name|RecordId
name|v
init|=
name|randomRecordId
argument_list|(
name|gcInfo
argument_list|)
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
name|long
name|weight
init|=
name|cache
operator|.
name|estimateCurrentWeight
argument_list|()
decl_stmt|;
return|return
operator|new
name|SimpleImmutableEntry
argument_list|<>
argument_list|(
name|cache
argument_list|,
operator|new
name|Long
index|[]
block|{
operator|(
name|long
operator|)
name|count
operator|,
name|weight
block|}
block|)
decl_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|runTest
argument_list|(
name|factory
argument_list|,
literal|"StringCache[x"
operator|+
name|count
operator|+
literal|"|RecordCache<String, RecordId>]"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      private
specifier|static
name|void
name|testNodeCache
parameter_list|()
block|{
specifier|final
name|int
name|count
init|=
literal|1000000
decl_stmt|;
comment|// key usually is a stableid, see SegmentNodeState#getStableId
comment|// 2fdd370e-423c-43d6-aad7-6e336c551a38:xxxxxx
specifier|final
name|int
name|keySize
init|=
literal|43
decl_stmt|;
specifier|final
name|boolean
name|gcInfo
init|=
literal|true
decl_stmt|;
name|Supplier
argument_list|<
name|Entry
argument_list|<
name|Object
argument_list|,
name|Long
index|[]
argument_list|>
argument_list|>
name|factory
init|=
parameter_list|()
lambda|->
block|{
name|int
name|size
init|=
operator|(
name|int
operator|)
name|PriorityCache
operator|.
name|nextPowerOfTwo
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|PriorityCache
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|cache
init|=
name|PriorityCache
operator|.
name|factory
argument_list|(
name|size
argument_list|,
operator|new
name|CacheWeights
operator|.
name|NodeCacheWeigher
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|String
name|k
init|=
name|randomString
argument_list|(
name|keySize
argument_list|)
decl_stmt|;
name|RecordId
name|v
init|=
name|randomRecordId
argument_list|(
name|gcInfo
argument_list|)
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|,
literal|0
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
name|long
name|weight
init|=
name|cache
operator|.
name|estimateCurrentWeight
argument_list|()
decl_stmt|;
return|return
operator|new
name|SimpleImmutableEntry
argument_list|<>
argument_list|(
name|cache
argument_list|,
operator|new
name|Long
index|[]
block|{
operator|(
name|long
operator|)
name|count
operator|,
name|weight
block|}
block|)
decl_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|runTest
argument_list|(
name|factory
argument_list|,
literal|"NodeCache[x"
operator|+
name|count
operator|+
literal|"|PriorityCache<String, RecordId>]"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      private
specifier|static
name|void
name|testSegments
parameter_list|()
block|{
specifier|final
name|int
name|count
init|=
literal|10000
decl_stmt|;
specifier|final
name|int
name|bufferSize
init|=
literal|5
operator|*
literal|1024
decl_stmt|;
name|Supplier
argument_list|<
name|Entry
argument_list|<
name|Object
argument_list|,
name|Long
index|[]
argument_list|>
argument_list|>
name|factory
init|=
parameter_list|()
lambda|->
block|{
name|long
name|weight
init|=
literal|0
decl_stmt|;
name|Object
index|[]
name|objects
init|=
operator|new
name|Object
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|Segment
name|o
init|=
name|randomSegment
argument_list|(
name|bufferSize
argument_list|)
decl_stmt|;
name|weight
operator|+=
name|o
operator|.
name|estimateMemoryUsage
argument_list|()
expr_stmt|;
name|objects
index|[
name|i
index|]
operator|=
name|o
expr_stmt|;
block|}
return|return
operator|new
name|SimpleImmutableEntry
argument_list|<>
argument_list|(
name|objects
argument_list|,
operator|new
name|Long
index|[]
block|{
operator|(
name|long
operator|)
name|count
operator|,
name|weight
block|}
block|)
decl_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|runTest
argument_list|(
name|factory
argument_list|,
literal|"Segment[x"
operator|+
name|count
operator|+
literal|"|"
operator|+
name|bufferSize
operator|+
literal|"]"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      private
specifier|static
name|void
name|testSegmentCache
parameter_list|()
block|{
specifier|final
name|int
name|count
init|=
literal|10000
decl_stmt|;
specifier|final
name|int
name|cacheSizeMB
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|bufferSize
init|=
literal|5
operator|*
literal|1024
decl_stmt|;
name|Supplier
argument_list|<
name|Entry
argument_list|<
name|Object
argument_list|,
name|Long
index|[]
argument_list|>
argument_list|>
name|factory
init|=
parameter_list|()
lambda|->
block|{
name|SegmentCache
name|cache
init|=
name|newSegmentCache
argument_list|(
name|cacheSizeMB
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|Segment
name|segment
init|=
name|randomSegment
argument_list|(
name|bufferSize
argument_list|)
decl_stmt|;
name|cache
operator|.
name|putSegment
argument_list|(
name|segment
argument_list|)
expr_stmt|;
block|}
name|AbstractCacheStats
name|stats
init|=
name|cache
operator|.
name|getCacheStats
argument_list|()
decl_stmt|;
name|long
name|elements
init|=
name|stats
operator|.
name|getElementCount
argument_list|()
decl_stmt|;
name|long
name|weight
init|=
name|stats
operator|.
name|estimateCurrentWeight
argument_list|()
decl_stmt|;
return|return
operator|new
name|SimpleImmutableEntry
argument_list|<>
argument_list|(
name|cache
argument_list|,
operator|new
name|Long
index|[]
block|{
name|elements
operator|,
name|weight
block|}
block|)
decl_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|runTest
argument_list|(
name|factory
argument_list|,
literal|"SegmentCache[x"
operator|+
name|cacheSizeMB
operator|+
literal|"MB|"
operator|+
name|bufferSize
operator|+
literal|"|Cache<SegmentId, Segment>]"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      private
specifier|static
name|void
name|testStrings
parameter_list|()
block|{
specifier|final
name|int
name|count
init|=
literal|10000
decl_stmt|;
specifier|final
name|int
name|length
init|=
literal|256
decl_stmt|;
name|Supplier
argument_list|<
name|Entry
argument_list|<
name|Object
argument_list|,
name|Long
index|[]
argument_list|>
argument_list|>
name|factory
init|=
parameter_list|()
lambda|->
block|{
name|long
name|weight
init|=
literal|0
decl_stmt|;
name|Object
index|[]
name|objects
init|=
operator|new
name|Object
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|String
name|s
init|=
name|randomString
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|weight
operator|+=
name|StringUtils
operator|.
name|estimateMemoryUsage
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|objects
index|[
name|i
index|]
operator|=
name|s
expr_stmt|;
block|}
return|return
operator|new
name|SimpleImmutableEntry
argument_list|<>
argument_list|(
name|objects
argument_list|,
operator|new
name|Long
index|[]
block|{
operator|(
name|long
operator|)
name|count
operator|,
name|weight
block|}
block|)
decl_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|runTest
argument_list|(
name|factory
argument_list|,
literal|"String[x"
operator|+
name|count
operator|+
literal|"|"
operator|+
name|length
operator|+
literal|"]"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      private
specifier|static
name|SegmentId
name|randomSegmentId
parameter_list|(
name|boolean
name|withGc
parameter_list|)
block|{
name|UUID
name|u
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|SegmentId
name|id
init|=
operator|new
name|SegmentId
argument_list|(
name|store
argument_list|,
name|u
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|u
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|withGc
condition|)
block|{
name|id
operator|.
name|reclaimed
argument_list|(
name|randomString
argument_list|(
literal|80
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|RecordId
name|randomRecordId
parameter_list|(
name|boolean
name|withGc
parameter_list|)
block|{
return|return
operator|new
name|RecordId
argument_list|(
name|randomSegmentId
argument_list|(
name|withGc
argument_list|)
argument_list|,
literal|128
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|Segment
name|randomSegment
parameter_list|(
name|int
name|bufferSize
parameter_list|)
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|bufferSize
index|]
decl_stmt|;
name|buffer
index|[
literal|0
index|]
operator|=
literal|'0'
expr_stmt|;
name|buffer
index|[
literal|1
index|]
operator|=
literal|'a'
expr_stmt|;
name|buffer
index|[
literal|2
index|]
operator|=
literal|'K'
expr_stmt|;
name|buffer
index|[
literal|3
index|]
operator|=
name|SegmentVersion
operator|.
name|asByte
argument_list|(
name|LATEST_VERSION
argument_list|)
expr_stmt|;
name|buffer
index|[
literal|4
index|]
operator|=
literal|0
expr_stmt|;
comment|// reserved
name|buffer
index|[
literal|5
index|]
operator|=
literal|0
expr_stmt|;
comment|// refcount
name|int
name|generation
init|=
literal|0
decl_stmt|;
name|buffer
index|[
name|GC_FULL_GENERATION_OFFSET
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|generation
operator|>>
literal|24
argument_list|)
expr_stmt|;
name|buffer
index|[
name|GC_FULL_GENERATION_OFFSET
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|generation
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|buffer
index|[
name|GC_FULL_GENERATION_OFFSET
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|generation
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|buffer
index|[
name|GC_FULL_GENERATION_OFFSET
operator|+
literal|3
index|]
operator|=
operator|(
name|byte
operator|)
name|generation
expr_stmt|;
name|ByteBuffer
name|data
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|SegmentId
name|id
init|=
name|randomSegmentId
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Segment
name|segment
init|=
operator|new
name|Segment
argument_list|(
name|store
operator|.
name|getSegmentIdProvider
argument_list|()
argument_list|,
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|id
argument_list|,
name|data
argument_list|)
decl_stmt|;
comment|//
comment|// TODO check impact of MutableRecordNumbers overhead of 65k bytes
comment|//
comment|// MutableRecordNumbers recordNumbers = new MutableRecordNumbers();
comment|// MutableSegmentReferences segmentReferences = new
comment|// MutableSegmentReferences();
comment|// String metaInfo = "{\"wid\":\"" + wid + '"' + ",\"sno\":" + 0
comment|// + ",\"t\":" + currentTimeMillis() + "}";
comment|// segment = new Segment(store, store.getReader(), buffer,
comment|// recordNumbers, segmentReferences, metaInfo);
return|return
name|segment
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|String
name|randomString
parameter_list|(
name|int
name|lenght
parameter_list|)
block|{
return|return
name|RandomStringUtils
operator|.
name|randomAlphanumeric
argument_list|(
name|lenght
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|static
name|void
name|runTest
parameter_list|(
name|Supplier
argument_list|<
name|Entry
argument_list|<
name|Object
argument_list|,
name|Long
index|[]
argument_list|>
argument_list|>
name|factory
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|long
name|start
init|=
name|memory
argument_list|()
decl_stmt|;
name|Entry
argument_list|<
name|Object
argument_list|,
name|Long
index|[]
argument_list|>
name|e
init|=
name|factory
operator|.
name|get
argument_list|()
decl_stmt|;
name|Object
name|object
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// prevent gc
name|long
name|count
init|=
name|e
operator|.
name|getValue
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|long
name|weight
init|=
name|e
operator|.
name|getValue
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|long
name|end
init|=
name|memory
argument_list|()
decl_stmt|;
name|long
name|delta
init|=
name|end
operator|-
name|start
decl_stmt|;
name|long
name|itemH
init|=
name|delta
operator|/
name|count
decl_stmt|;
name|long
name|itemW
init|=
name|weight
operator|/
name|count
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|":: %s Test\n"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"heap delta is       %d, %d bytes per item (%d -> %d)\n"
argument_list|,
name|delta
argument_list|,
name|itemH
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"estimated weight is %d, %d bytes per item\n"
argument_list|,
name|weight
argument_list|,
name|itemW
argument_list|)
expr_stmt|;
if|if
condition|(
name|itemW
operator|>
name|itemH
operator|*
literal|1.1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"*warn* estimated weight is over 10%% bigger than heap based weight\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|itemW
operator|*
literal|1.1
operator|<
name|itemH
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"*warn* estimated weight is over 10%% smaller than heap based weight\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
specifier|static
name|long
name|memory
parameter_list|()
block|{
name|gc
argument_list|()
expr_stmt|;
return|return
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|totalMemory
argument_list|()
operator|-
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|freeMemory
argument_list|()
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|gc
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
end_function

unit|}
end_unit

