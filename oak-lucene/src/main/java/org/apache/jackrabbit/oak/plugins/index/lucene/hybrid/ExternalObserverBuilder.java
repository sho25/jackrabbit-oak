begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|hybrid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|BackgroundObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|ExternalObserverBuilder
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExternalIndexObserver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|IndexingQueue
name|indexingQueue
decl_stmt|;
specifier|private
specifier|final
name|IndexTracker
name|indexTracker
decl_stmt|;
specifier|private
specifier|final
name|StatisticsProvider
name|statisticsProvider
decl_stmt|;
specifier|private
specifier|final
name|Executor
name|executor
decl_stmt|;
specifier|private
specifier|final
name|int
name|queueSize
decl_stmt|;
specifier|private
name|BackgroundObserver
name|backgroundObserver
decl_stmt|;
specifier|private
name|FilteringObserver
name|filteringObserver
decl_stmt|;
specifier|public
name|ExternalObserverBuilder
parameter_list|(
name|IndexingQueue
name|indexingQueue
parameter_list|,
name|IndexTracker
name|indexTracker
parameter_list|,
name|StatisticsProvider
name|statisticsProvider
parameter_list|,
name|Executor
name|executor
parameter_list|,
name|int
name|queueSize
parameter_list|)
block|{
name|this
operator|.
name|indexingQueue
operator|=
name|checkNotNull
argument_list|(
name|indexingQueue
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexTracker
operator|=
name|checkNotNull
argument_list|(
name|indexTracker
argument_list|)
expr_stmt|;
name|this
operator|.
name|statisticsProvider
operator|=
name|checkNotNull
argument_list|(
name|statisticsProvider
argument_list|)
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|checkNotNull
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|this
operator|.
name|queueSize
operator|=
name|queueSize
expr_stmt|;
block|}
specifier|public
name|Observer
name|build
parameter_list|()
block|{
if|if
condition|(
name|filteringObserver
operator|!=
literal|null
condition|)
block|{
return|return
name|filteringObserver
return|;
block|}
name|ExternalIndexObserver
name|externalObserver
init|=
operator|new
name|ExternalIndexObserver
argument_list|(
name|indexingQueue
argument_list|,
name|indexTracker
argument_list|,
name|statisticsProvider
argument_list|)
decl_stmt|;
name|backgroundObserver
operator|=
operator|new
name|WarningObserver
argument_list|(
name|externalObserver
argument_list|,
name|executor
argument_list|,
name|queueSize
argument_list|)
expr_stmt|;
name|filteringObserver
operator|=
operator|new
name|FilteringObserver
argument_list|(
name|backgroundObserver
argument_list|,
name|externalObserver
argument_list|)
expr_stmt|;
return|return
name|filteringObserver
return|;
block|}
specifier|public
name|BackgroundObserver
name|getBackgroundObserver
parameter_list|()
block|{
return|return
name|backgroundObserver
return|;
block|}
specifier|private
specifier|static
class|class
name|WarningObserver
extends|extends
name|BackgroundObserver
block|{
specifier|private
specifier|final
name|int
name|queueLength
decl_stmt|;
specifier|public
name|WarningObserver
parameter_list|(
annotation|@
name|Nonnull
name|Observer
name|observer
parameter_list|,
annotation|@
name|Nonnull
name|Executor
name|executor
parameter_list|,
name|int
name|queueLength
parameter_list|)
block|{
name|super
argument_list|(
name|observer
argument_list|,
name|executor
argument_list|,
name|queueLength
argument_list|)
expr_stmt|;
name|this
operator|.
name|queueLength
operator|=
name|queueLength
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|added
parameter_list|(
name|int
name|queueSize
parameter_list|)
block|{
comment|//TODO Have a variant of BackgroundObserver which drops elements from the tail
comment|//as for indexing case its fine to drop older stuff
if|if
condition|(
name|queueSize
operator|>=
name|queueLength
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"External observer queue is full"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|FilteringObserver
implements|implements
name|Observer
block|{
specifier|private
specifier|final
name|Observer
name|delegate
decl_stmt|;
specifier|private
specifier|final
name|Filter
name|filter
decl_stmt|;
specifier|private
name|FilteringObserver
parameter_list|(
name|Observer
name|delegate
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|contentChanged
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|root
parameter_list|,
annotation|@
name|Nonnull
name|CommitInfo
name|info
parameter_list|)
block|{
comment|//TODO Optimize for the case where new async index update is detected. Then
comment|//existing items in queue should not be processed
comment|//We need to only pass on included changes. Not using FilteringAwareObserver
comment|//As here the filtering logic only relies on CommitContext and not concerned
comment|//with before state
if|if
condition|(
operator|!
name|filter
operator|.
name|excludes
argument_list|(
name|root
argument_list|,
name|info
argument_list|)
condition|)
block|{
name|delegate
operator|.
name|contentChanged
argument_list|(
name|root
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

