begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|MISSING_NODE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|AbstractNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateDiff
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_class
specifier|public
class|class
name|SegmentNodeState
extends|extends
name|Record
implements|implements
name|NodeState
block|{
specifier|static
name|boolean
name|fastEquals
parameter_list|(
name|NodeState
name|a
parameter_list|,
name|NodeState
name|b
parameter_list|)
block|{
return|return
name|a
operator|instanceof
name|SegmentNodeState
operator|&&
name|b
operator|instanceof
name|SegmentNodeState
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
operator|(
operator|(
name|SegmentNodeState
operator|)
name|a
operator|)
operator|.
name|getRecordId
argument_list|()
argument_list|,
operator|(
operator|(
name|SegmentNodeState
operator|)
name|b
operator|)
operator|.
name|getRecordId
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|RecordId
name|templateId
init|=
literal|null
decl_stmt|;
specifier|private
name|Template
name|template
init|=
literal|null
decl_stmt|;
specifier|public
name|SegmentNodeState
parameter_list|(
name|Segment
name|segment
parameter_list|,
name|RecordId
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|segment
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|RecordId
name|getTemplateId
parameter_list|()
block|{
name|getTemplate
argument_list|()
expr_stmt|;
comment|// force loading of the template
return|return
name|templateId
return|;
block|}
specifier|synchronized
name|Template
name|getTemplate
parameter_list|()
block|{
if|if
condition|(
name|template
operator|==
literal|null
condition|)
block|{
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
name|templateId
operator|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|=
name|segment
operator|.
name|readTemplate
argument_list|(
name|templateId
argument_list|)
expr_stmt|;
block|}
return|return
name|template
return|;
block|}
name|MapRecord
name|getChildNodeMap
parameter_list|()
block|{
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
return|return
name|segment
operator|.
name|readMap
argument_list|(
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPropertyCount
parameter_list|()
block|{
name|Template
name|template
init|=
name|getTemplate
argument_list|()
decl_stmt|;
name|long
name|count
init|=
name|template
operator|.
name|getPropertyTemplates
argument_list|()
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|template
operator|.
name|getPrimaryType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|template
operator|.
name|getMixinTypes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Template
name|template
init|=
name|getTemplate
argument_list|()
decl_stmt|;
if|if
condition|(
name|JCR_PRIMARYTYPE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|template
operator|.
name|getPrimaryType
argument_list|()
operator|!=
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|JCR_MIXINTYPES
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|template
operator|.
name|getMixinTypes
argument_list|()
operator|!=
literal|null
return|;
block|}
else|else
block|{
return|return
name|template
operator|.
name|getPropertyTemplate
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
specifier|public
name|PropertyState
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Template
name|template
init|=
name|getTemplate
argument_list|()
decl_stmt|;
if|if
condition|(
name|JCR_PRIMARYTYPE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|template
operator|.
name|getPrimaryType
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|JCR_MIXINTYPES
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|template
operator|.
name|getMixinTypes
argument_list|()
return|;
block|}
else|else
block|{
name|PropertyTemplate
name|propertyTemplate
init|=
name|template
operator|.
name|getPropertyTemplate
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyTemplate
operator|!=
literal|null
condition|)
block|{
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
name|int
name|ids
init|=
literal|1
operator|+
name|propertyTemplate
operator|.
name|getIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|template
operator|.
name|getChildName
argument_list|()
operator|!=
name|Template
operator|.
name|ZERO_CHILD_NODES
condition|)
block|{
name|ids
operator|++
expr_stmt|;
block|}
return|return
operator|new
name|SegmentPropertyState
argument_list|(
name|segment
argument_list|,
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|0
argument_list|,
name|ids
argument_list|)
argument_list|)
argument_list|,
name|propertyTemplate
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Iterable
argument_list|<
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
name|Template
name|template
init|=
name|getTemplate
argument_list|()
decl_stmt|;
name|PropertyTemplate
index|[]
name|propertyTemplates
init|=
name|template
operator|.
name|getPropertyTemplates
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PropertyState
argument_list|>
name|list
init|=
name|newArrayListWithCapacity
argument_list|(
name|propertyTemplates
operator|.
name|length
operator|+
literal|2
argument_list|)
decl_stmt|;
name|PropertyState
name|primaryType
init|=
name|template
operator|.
name|getPrimaryType
argument_list|()
decl_stmt|;
if|if
condition|(
name|primaryType
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|primaryType
argument_list|)
expr_stmt|;
block|}
name|PropertyState
name|mixinTypes
init|=
name|template
operator|.
name|getMixinTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|mixinTypes
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|mixinTypes
argument_list|)
expr_stmt|;
block|}
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
name|int
name|ids
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|template
operator|.
name|getChildName
argument_list|()
operator|!=
name|Template
operator|.
name|ZERO_CHILD_NODES
condition|)
block|{
name|ids
operator|++
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propertyTemplates
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|RecordId
name|propertyId
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|0
argument_list|,
name|ids
operator|++
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|SegmentPropertyState
argument_list|(
name|segment
argument_list|,
name|propertyId
argument_list|,
name|propertyTemplates
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getBoolean
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|AbstractNodeState
operator|.
name|getBoolean
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLong
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|AbstractNodeState
operator|.
name|getLong
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getString
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|AbstractNodeState
operator|.
name|getString
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|AbstractNodeState
operator|.
name|getName
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getNames
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|AbstractNodeState
operator|.
name|getNames
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|(
name|long
name|max
parameter_list|)
block|{
name|String
name|childName
init|=
name|getTemplate
argument_list|()
operator|.
name|getChildName
argument_list|()
decl_stmt|;
if|if
condition|(
name|childName
operator|==
name|Template
operator|.
name|ZERO_CHILD_NODES
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|childName
operator|==
name|Template
operator|.
name|MANY_CHILD_NODES
condition|)
block|{
return|return
name|getChildNodeMap
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasChildNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|checkArgument
argument_list|(
operator|!
name|checkNotNull
argument_list|(
name|name
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|childName
init|=
name|getTemplate
argument_list|()
operator|.
name|getChildName
argument_list|()
decl_stmt|;
if|if
condition|(
name|childName
operator|==
name|Template
operator|.
name|ZERO_CHILD_NODES
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|childName
operator|==
name|Template
operator|.
name|MANY_CHILD_NODES
condition|)
block|{
return|return
name|getChildNodeMap
argument_list|()
operator|.
name|getEntry
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
else|else
block|{
return|return
name|childName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// checkArgument(!checkNotNull(name).isEmpty()); // TODO
name|String
name|childName
init|=
name|getTemplate
argument_list|()
operator|.
name|getChildName
argument_list|()
decl_stmt|;
if|if
condition|(
name|childName
operator|==
name|Template
operator|.
name|ZERO_CHILD_NODES
condition|)
block|{
return|return
name|MISSING_NODE
return|;
block|}
elseif|else
if|if
condition|(
name|childName
operator|==
name|Template
operator|.
name|MANY_CHILD_NODES
condition|)
block|{
name|MapEntry
name|child
init|=
name|getChildNodeMap
argument_list|()
operator|.
name|getEntry
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
return|return
name|child
operator|.
name|getNodeState
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|MISSING_NODE
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|childName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
name|RecordId
name|childNodeId
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|SegmentNodeState
argument_list|(
name|segment
argument_list|,
name|childNodeId
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|MISSING_NODE
return|;
block|}
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getChildNodeNames
parameter_list|()
block|{
name|String
name|childName
init|=
name|getTemplate
argument_list|()
operator|.
name|getChildName
argument_list|()
decl_stmt|;
if|if
condition|(
name|childName
operator|==
name|Template
operator|.
name|ZERO_CHILD_NODES
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|childName
operator|==
name|Template
operator|.
name|MANY_CHILD_NODES
condition|)
block|{
return|return
name|getChildNodeMap
argument_list|()
operator|.
name|getKeys
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|childName
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|()
block|{
name|String
name|childName
init|=
name|getTemplate
argument_list|()
operator|.
name|getChildName
argument_list|()
decl_stmt|;
if|if
condition|(
name|childName
operator|==
name|Template
operator|.
name|ZERO_CHILD_NODES
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|childName
operator|==
name|Template
operator|.
name|MANY_CHILD_NODES
condition|)
block|{
return|return
name|getChildNodeMap
argument_list|()
operator|.
name|getEntries
argument_list|()
return|;
block|}
else|else
block|{
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
name|RecordId
name|childNodeId
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|MemoryChildNodeEntry
argument_list|(
name|childName
argument_list|,
operator|new
name|SegmentNodeState
argument_list|(
name|segment
argument_list|,
name|childNodeId
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|NodeBuilder
name|builder
parameter_list|()
block|{
comment|// TODO: avoid the Segment.store reference
return|return
operator|new
name|SegmentRootBuilder
argument_list|(
name|this
argument_list|,
name|getSegment
argument_list|()
operator|.
name|store
operator|.
name|getWriter
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|compareAgainstBaseState
parameter_list|(
name|NodeState
name|base
parameter_list|,
name|NodeStateDiff
name|diff
parameter_list|)
block|{
if|if
condition|(
name|base
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
comment|// no changes
block|}
elseif|else
if|if
condition|(
name|base
operator|==
name|EMPTY_NODE
operator|||
operator|!
name|base
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// special case
return|return
name|getTemplate
argument_list|()
operator|.
name|compareAgainstEmptyState
argument_list|(
name|getSegment
argument_list|()
argument_list|,
name|getRecordId
argument_list|()
argument_list|,
name|diff
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|base
operator|instanceof
name|SegmentNodeState
condition|)
block|{
name|SegmentNodeState
name|that
init|=
operator|(
name|SegmentNodeState
operator|)
name|base
decl_stmt|;
return|return
name|getRecordId
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getRecordId
argument_list|()
argument_list|)
operator|||
name|getTemplate
argument_list|()
operator|.
name|compareAgainstBaseState
argument_list|(
name|getSegment
argument_list|()
argument_list|,
name|getRecordId
argument_list|()
argument_list|,
name|that
operator|.
name|getTemplate
argument_list|()
argument_list|,
name|that
operator|.
name|getSegment
argument_list|()
argument_list|,
name|that
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|diff
argument_list|)
return|;
block|}
else|else
block|{
comment|// fallback
return|return
name|AbstractNodeState
operator|.
name|compareAgainstBaseState
argument_list|(
name|this
argument_list|,
name|base
argument_list|,
name|diff
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|object
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|SegmentNodeState
condition|)
block|{
name|SegmentNodeState
name|that
init|=
operator|(
name|SegmentNodeState
operator|)
name|object
decl_stmt|;
if|if
condition|(
name|getRecordId
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getRecordId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|Template
name|template
init|=
name|getTemplate
argument_list|()
decl_stmt|;
return|return
name|template
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getTemplate
argument_list|()
argument_list|)
operator|&&
name|template
operator|.
name|compare
argument_list|(
name|getSegment
argument_list|()
argument_list|,
name|getRecordId
argument_list|()
argument_list|,
name|that
operator|.
name|getSegment
argument_list|()
argument_list|,
name|that
operator|.
name|getRecordId
argument_list|()
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|NodeState
condition|)
block|{
return|return
name|AbstractNodeState
operator|.
name|equals
argument_list|(
name|this
argument_list|,
operator|(
name|NodeState
operator|)
name|object
argument_list|)
return|;
comment|// TODO
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|AbstractNodeState
operator|.
name|toString
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
end_class

end_unit

