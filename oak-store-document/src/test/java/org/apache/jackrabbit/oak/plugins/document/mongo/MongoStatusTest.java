begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
package|;
end_package

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|MongoConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|MongoConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|MongoUtils
operator|.
name|isAvailable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_class
specifier|public
class|class
name|MongoStatusTest
block|{
annotation|@
name|Rule
specifier|public
name|MongoConnectionFactory
name|connectionFactory
init|=
operator|new
name|MongoConnectionFactory
argument_list|()
decl_stmt|;
specifier|private
name|MongoStatus
name|status
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|mongoAvailable
parameter_list|()
block|{
name|assumeTrue
argument_list|(
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|createStatus
parameter_list|()
block|{
name|MongoConnection
name|c
init|=
name|connectionFactory
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|status
operator|=
operator|new
name|MongoStatus
argument_list|(
name|c
operator|.
name|getMongoClient
argument_list|()
argument_list|,
name|c
operator|.
name|getDBName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDetails
parameter_list|()
block|{
name|String
name|details
init|=
name|status
operator|.
name|getServerDetails
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|details
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|details
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|details
operator|.
name|startsWith
argument_list|(
literal|"{"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|details
operator|.
name|endsWith
argument_list|(
literal|"}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|details
operator|.
name|contains
argument_list|(
literal|"host="
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadConcern
parameter_list|()
block|{
name|BasicDBObject
name|mockServerStatus
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|BasicDBObject
name|storageEngine
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|status
operator|.
name|setServerStatus
argument_list|(
name|mockServerStatus
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|isVersion
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
condition|)
block|{
comment|// OAK-7291: majority read concern is enabled by default
name|assertTrue
argument_list|(
name|status
operator|.
name|isMajorityReadConcernSupported
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|status
operator|.
name|isMajorityReadConcernSupported
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mockServerStatus
operator|.
name|put
argument_list|(
literal|"storageEngine"
argument_list|,
name|storageEngine
argument_list|)
expr_stmt|;
name|status
operator|.
name|setServerStatus
argument_list|(
name|mockServerStatus
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|status
operator|.
name|isMajorityReadConcernSupported
argument_list|()
argument_list|)
expr_stmt|;
name|storageEngine
operator|.
name|put
argument_list|(
literal|"supportsCommittedReads"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|status
operator|.
name|setServerStatus
argument_list|(
name|mockServerStatus
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|status
operator|.
name|isMajorityReadConcernSupported
argument_list|()
argument_list|)
expr_stmt|;
name|storageEngine
operator|.
name|put
argument_list|(
literal|"supportsCommittedReads"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|status
operator|.
name|setServerStatus
argument_list|(
name|mockServerStatus
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|isMajorityReadConcernSupported
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetVersion
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|status
operator|.
name|getVersion
argument_list|()
operator|.
name|matches
argument_list|(
literal|"^\\d+\\.\\d+\\.\\d+$"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckVersionValid
parameter_list|()
block|{
for|for
control|(
name|String
name|v
range|:
operator|new
name|String
index|[]
block|{
literal|"2.6.0"
block|,
literal|"2.7.0"
block|,
literal|"3.0.0"
block|}
control|)
block|{
name|status
operator|.
name|setVersion
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|status
operator|.
name|checkVersion
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckVersionInvalid
parameter_list|()
block|{
for|for
control|(
name|String
name|v
range|:
operator|new
name|String
index|[]
block|{
literal|"1.0.0"
block|,
literal|"2.0.0"
block|,
literal|"2.5.0"
block|}
control|)
block|{
name|status
operator|.
name|setVersion
argument_list|(
name|v
argument_list|)
expr_stmt|;
try|try
block|{
name|status
operator|.
name|checkVersion
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Version "
operator|+
name|v
operator|+
literal|" shouldn't be allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
block|}
block|}
block|}
end_class

end_unit

