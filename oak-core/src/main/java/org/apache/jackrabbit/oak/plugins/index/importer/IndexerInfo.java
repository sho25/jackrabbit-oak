begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|importer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|filefilter
operator|.
name|DirectoryFileFilter
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * Represents the index data created by oak-run tooling on the file system.  * It looks for 'indexer-info.properties' file in given directory to read the  * check point information.  *  * Then for each sub directory it looks for 'index-details.txt' file  * which contains index specific implementation details. It looks for  * property 'indexPath' which is used to associate the index data to  * index location in repository  */
end_comment

begin_class
specifier|public
class|class
name|IndexerInfo
block|{
comment|/**      * File name stored in final index directory which contains meta      * information like checkpoint details. This can be used by      * importer while importing the indexes      */
specifier|public
specifier|static
specifier|final
name|String
name|INDEXER_META
init|=
literal|"indexer-info.properties"
decl_stmt|;
comment|/**      * Name of meta file which stores the index related meta information      * in properties file format      */
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_METADATA_FILE_NAME
init|=
literal|"index-details.txt"
decl_stmt|;
comment|/**      * Property name in index-details.txt which refers to the      * index path in repository      */
specifier|public
specifier|static
specifier|final
name|String
name|PROP_INDEX_PATH
init|=
literal|"indexPath"
decl_stmt|;
specifier|public
specifier|final
name|String
name|checkpoint
decl_stmt|;
specifier|private
specifier|final
name|File
name|rootDir
decl_stmt|;
specifier|public
name|IndexerInfo
parameter_list|(
name|File
name|rootDir
parameter_list|,
name|String
name|checkpoint
parameter_list|)
block|{
name|this
operator|.
name|rootDir
operator|=
name|rootDir
expr_stmt|;
name|this
operator|.
name|checkpoint
operator|=
name|checkNotNull
argument_list|(
name|checkpoint
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|save
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|infoFile
init|=
operator|new
name|File
argument_list|(
name|rootDir
argument_list|,
name|INDEXER_META
argument_list|)
decl_stmt|;
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
literal|"checkpoint"
argument_list|,
name|checkpoint
argument_list|)
expr_stmt|;
name|PropUtils
operator|.
name|writeTo
argument_list|(
name|p
argument_list|,
name|infoFile
argument_list|,
literal|"Indexer info"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|getIndexes
parameter_list|()
throws|throws
name|IOException
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|indexes
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|dir
range|:
name|rootDir
operator|.
name|listFiles
argument_list|(
operator|(
operator|(
name|FileFilter
operator|)
name|DirectoryFileFilter
operator|.
name|DIRECTORY
operator|)
argument_list|)
control|)
block|{
name|File
name|metaFile
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|INDEX_METADATA_FILE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Properties
name|p
init|=
name|PropUtils
operator|.
name|loadFromFile
argument_list|(
name|metaFile
argument_list|)
decl_stmt|;
name|String
name|indexPath
init|=
name|p
operator|.
name|getProperty
argument_list|(
name|PROP_INDEX_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexPath
operator|!=
literal|null
condition|)
block|{
name|indexes
operator|.
name|put
argument_list|(
name|indexPath
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|indexes
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|IndexerInfo
name|fromDirectory
parameter_list|(
name|File
name|rootDir
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|infoFile
init|=
operator|new
name|File
argument_list|(
name|rootDir
argument_list|,
name|INDEXER_META
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|infoFile
operator|.
name|exists
argument_list|()
argument_list|,
literal|"No [%s] file found in [%s]. Not a valid exported index "
operator|+
literal|"directory"
argument_list|,
name|INDEXER_META
argument_list|,
name|rootDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|Properties
name|p
init|=
name|PropUtils
operator|.
name|loadFromFile
argument_list|(
name|infoFile
argument_list|)
decl_stmt|;
return|return
operator|new
name|IndexerInfo
argument_list|(
name|rootDir
argument_list|,
name|PropUtils
operator|.
name|getProp
argument_list|(
name|p
argument_list|,
literal|"checkpoint"
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

