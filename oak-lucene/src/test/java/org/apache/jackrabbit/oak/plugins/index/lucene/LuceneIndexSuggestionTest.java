begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|nodetype
operator|.
name|NodeTypeIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|AbstractQueryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ConstantConditions"
argument_list|)
specifier|public
class|class
name|LuceneIndexSuggestionTest
extends|extends
name|AbstractQueryTest
block|{
specifier|private
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|private
name|LuceneIndexEditorProvider
name|editorProvider
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|createTestIndexNode
parameter_list|()
throws|throws
name|Exception
block|{
name|setTraversalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|()
block|{
name|editorProvider
operator|=
operator|new
name|LuceneIndexEditorProvider
argument_list|(
name|createIndexCopier
argument_list|()
argument_list|)
expr_stmt|;
name|LuceneIndexProvider
name|provider
init|=
operator|new
name|LuceneIndexProvider
argument_list|()
decl_stmt|;
return|return
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|QueryIndexProvider
operator|)
name|provider
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|Observer
operator|)
name|provider
argument_list|)
operator|.
name|with
argument_list|(
name|editorProvider
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|NodeTypeIndexProvider
argument_list|()
argument_list|)
operator|.
name|createContentRepository
argument_list|()
return|;
block|}
specifier|private
name|IndexCopier
name|createIndexCopier
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|IndexCopier
argument_list|(
name|executorService
argument_list|,
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|shutdownExecutor
parameter_list|()
block|{
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Tree
name|createSuggestIndex
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|indexedNodeType
parameter_list|,
name|String
name|indexedPropertyName
parameter_list|,
name|boolean
name|addFullText
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Tree
name|index
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|def
init|=
name|index
operator|.
name|addChild
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|addChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|,
name|LuceneIndexConstants
operator|.
name|TYPE_LUCENE
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|COMPAT_MODE
argument_list|,
name|IndexFormatVersion
operator|.
name|V2
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|indexRules
init|=
name|def
operator|.
name|addChild
argument_list|(
literal|"indexRules"
argument_list|)
decl_stmt|;
name|indexRules
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|nodeType
init|=
name|indexRules
operator|.
name|addChild
argument_list|(
name|indexedNodeType
argument_list|)
decl_stmt|;
name|nodeType
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|properties
init|=
name|nodeType
operator|.
name|addChild
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE
argument_list|)
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|propertyIdxDef
init|=
name|properties
operator|.
name|addChild
argument_list|(
literal|"indexedProperty"
argument_list|)
decl_stmt|;
name|propertyIdxDef
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|propertyIdxDef
operator|.
name|setProperty
argument_list|(
literal|"propertyIndex"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|propertyIdxDef
operator|.
name|setProperty
argument_list|(
literal|"analyzed"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|propertyIdxDef
operator|.
name|setProperty
argument_list|(
literal|"useInSuggest"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|addFullText
condition|)
block|{
name|propertyIdxDef
operator|.
name|setProperty
argument_list|(
literal|"nodeScopeIndex"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|propertyIdxDef
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
name|indexedPropertyName
argument_list|)
expr_stmt|;
return|return
name|index
operator|.
name|getChild
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Utility method to check suggestion over {@code nodeType} when the index definition also created for      * the same type      */
specifier|private
name|void
name|checkSuggestions
parameter_list|(
specifier|final
name|String
name|nodeType
parameter_list|,
specifier|final
name|String
name|indexPropName
parameter_list|,
specifier|final
name|String
name|indexPropValue
parameter_list|,
specifier|final
name|String
name|suggestQueryText
parameter_list|,
specifier|final
name|boolean
name|shouldSuggest
parameter_list|)
throws|throws
name|CommitFailedException
throws|,
name|ParseException
block|{
name|checkSuggestions
argument_list|(
name|nodeType
argument_list|,
name|nodeType
argument_list|,
name|indexPropName
argument_list|,
literal|false
argument_list|,
name|indexPropValue
argument_list|,
name|suggestQueryText
argument_list|,
name|shouldSuggest
argument_list|)
expr_stmt|;
block|}
comment|/**      * Utility method to check suggestion over {@code queryNodeType} when the index definition is created for      * {@code indexNodeType}      */
specifier|private
name|void
name|checkSuggestions
parameter_list|(
specifier|final
name|String
name|indexNodeType
parameter_list|,
specifier|final
name|String
name|queryNodeType
parameter_list|,
specifier|final
name|String
name|indexPropName
parameter_list|,
specifier|final
name|boolean
name|addFullText
parameter_list|,
specifier|final
name|String
name|indexPropValue
parameter_list|,
specifier|final
name|String
name|suggestQueryText
parameter_list|,
specifier|final
name|boolean
name|shouldSuggest
parameter_list|)
throws|throws
name|CommitFailedException
throws|,
name|ParseException
block|{
name|createSuggestIndex
argument_list|(
literal|"lucene-suggest"
argument_list|,
name|indexNodeType
argument_list|,
name|indexPropName
argument_list|,
name|addFullText
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"indexedNode"
argument_list|)
decl_stmt|;
name|test
operator|.
name|setProperty
argument_list|(
name|indexPropName
argument_list|,
name|indexPropValue
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|suggQuery
init|=
name|createSuggestQuery
argument_list|(
name|queryNodeType
argument_list|,
name|suggestQueryText
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|executeQuery
argument_list|(
name|suggQuery
argument_list|,
name|SQL2
argument_list|,
name|QueryEngine
operator|.
name|NO_BINDINGS
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|rows
init|=
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|ResultRow
name|firstRow
init|=
name|rows
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|firstRow
operator|.
name|getValue
argument_list|(
literal|"suggestion"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|Suggestion
name|suggestion
init|=
name|Suggestion
operator|.
name|fromString
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldSuggest
condition|)
block|{
name|assertNotNull
argument_list|(
literal|"There should be some suggestion"
argument_list|,
name|suggestion
operator|.
name|getSuggestion
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
literal|"There shouldn't be any suggestion"
argument_list|,
name|suggestion
operator|.
name|getSuggestion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|createSuggestQuery
parameter_list|(
name|String
name|nodeTypeName
parameter_list|,
name|String
name|suggestFor
parameter_list|)
block|{
return|return
literal|"SELECT [rep:suggest()] as suggestion  FROM ["
operator|+
name|nodeTypeName
operator|+
literal|"] WHERE suggest('"
operator|+
name|suggestFor
operator|+
literal|"')"
return|;
block|}
specifier|static
class|class
name|Suggestion
block|{
specifier|private
specifier|final
name|long
name|weight
decl_stmt|;
specifier|private
specifier|final
name|String
name|suggestion
decl_stmt|;
name|Suggestion
parameter_list|(
name|String
name|suggestion
parameter_list|,
name|long
name|weight
parameter_list|)
block|{
name|this
operator|.
name|suggestion
operator|=
name|suggestion
expr_stmt|;
name|this
operator|.
name|weight
operator|=
name|weight
expr_stmt|;
block|}
name|long
name|getWeight
parameter_list|()
block|{
return|return
name|weight
return|;
block|}
name|String
name|getSuggestion
parameter_list|()
block|{
return|return
name|suggestion
return|;
block|}
specifier|static
name|Suggestion
name|fromString
parameter_list|(
name|String
name|suggestionResultStr
parameter_list|)
block|{
if|if
condition|(
name|suggestionResultStr
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|suggestionResultStr
argument_list|)
operator|||
literal|"[]"
operator|.
name|equals
argument_list|(
name|suggestionResultStr
argument_list|)
condition|)
block|{
return|return
operator|new
name|Suggestion
argument_list|(
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
name|String
index|[]
name|parts
init|=
name|suggestionResultStr
operator|.
name|split
argument_list|(
literal|",weight="
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|int
name|endWeightIdx
init|=
name|parts
index|[
literal|1
index|]
operator|.
name|lastIndexOf
argument_list|(
literal|"}"
argument_list|)
decl_stmt|;
name|long
name|weight
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|parts
index|[
literal|1
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|endWeightIdx
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|suggestion
init|=
name|parts
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|"="
argument_list|,
literal|2
argument_list|)
index|[
literal|1
index|]
decl_stmt|;
return|return
operator|new
name|Suggestion
argument_list|(
name|suggestion
argument_list|,
name|weight
argument_list|)
return|;
block|}
block|}
comment|//OAK-3157
annotation|@
name|Test
specifier|public
name|void
name|testSuggestQuery
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|nodeType
init|=
literal|"nt:base"
decl_stmt|;
specifier|final
name|String
name|indexPropName
init|=
literal|"description"
decl_stmt|;
specifier|final
name|String
name|indexPropValue
init|=
literal|"this is just a sample text which should get some response in suggestions"
decl_stmt|;
specifier|final
name|String
name|suggestQueryText
init|=
literal|"th"
decl_stmt|;
specifier|final
name|boolean
name|shouldSuggest
init|=
literal|true
decl_stmt|;
name|checkSuggestions
argument_list|(
name|nodeType
argument_list|,
name|indexPropName
argument_list|,
name|indexPropValue
argument_list|,
name|suggestQueryText
argument_list|,
name|shouldSuggest
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

