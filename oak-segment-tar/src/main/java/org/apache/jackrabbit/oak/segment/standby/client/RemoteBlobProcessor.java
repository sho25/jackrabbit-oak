begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_class
class|class
name|RemoteBlobProcessor
implements|implements
name|BlobProcessor
block|{
interface|interface
name|BlobDownloader
block|{
name|InputStream
name|downloadBlob
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|InterruptedException
function_decl|;
block|}
specifier|private
specifier|final
name|BlobStore
name|blobStore
decl_stmt|;
specifier|private
specifier|final
name|BlobDownloader
name|blobDownloader
decl_stmt|;
name|RemoteBlobProcessor
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|,
name|BlobDownloader
name|blobDownloader
parameter_list|)
block|{
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
name|this
operator|.
name|blobDownloader
operator|=
name|blobDownloader
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|processBinary
parameter_list|(
name|Blob
name|b
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|b
operator|instanceof
name|SegmentBlob
condition|)
block|{
name|fetchBinary
argument_list|(
operator|(
name|SegmentBlob
operator|)
name|b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|BlobTypeUnknownException
argument_list|()
throw|;
block|}
block|}
specifier|private
name|void
name|fetchBinary
parameter_list|(
name|SegmentBlob
name|blob
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|shouldFetchBinary
argument_list|(
name|blob
argument_list|)
condition|)
block|{
name|fetchAndStoreBlob
argument_list|(
name|blob
operator|.
name|getBlobId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|shouldFetchBinary
parameter_list|(
name|SegmentBlob
name|blob
parameter_list|)
block|{
return|return
name|blob
operator|.
name|isExternal
argument_list|()
operator|&&
name|blob
operator|.
name|getReference
argument_list|()
operator|==
literal|null
operator|&&
name|blob
operator|.
name|getBlobId
argument_list|()
operator|!=
literal|null
return|;
block|}
specifier|private
name|void
name|fetchAndStoreBlob
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|InterruptedException
block|{
try|try
init|(
name|InputStream
name|in
init|=
name|downloadBlob
argument_list|(
name|blobId
argument_list|)
init|)
block|{
name|writeBlob
argument_list|(
name|blobId
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BlobWriteException
argument_list|(
name|blobId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|writeBlob
parameter_list|(
name|String
name|blobId
parameter_list|,
name|InputStream
name|stream
parameter_list|)
block|{
try|try
block|{
name|blobStore
operator|.
name|writeBlob
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BlobWriteException
argument_list|(
name|blobId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|InputStream
name|downloadBlob
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|blobDownloader
operator|.
name|downloadBlob
argument_list|(
name|blobId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

