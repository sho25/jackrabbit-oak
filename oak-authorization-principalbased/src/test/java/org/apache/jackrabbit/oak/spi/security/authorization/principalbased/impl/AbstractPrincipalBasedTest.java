begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ObjectArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|impl
operator|.
name|LocalNameMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|impl
operator|.
name|NamePathMapperImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|internal
operator|.
name|SecurityProviderHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|FilterProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|AbstractPrincipalBasedTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|static
specifier|final
name|String
name|INTERMEDIATE_PATH
init|=
name|UserConstants
operator|.
name|DEFAULT_SYSTEM_RELATIVE_PATH
operator|+
literal|"/test"
decl_stmt|;
specifier|static
specifier|final
name|String
name|SUPPORTED_PATH
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|UserConstants
operator|.
name|DEFAULT_USER_PATH
argument_list|,
name|INTERMEDIATE_PATH
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|TEST_OAK_PATH
init|=
literal|"/oak:content/child/grandchild/oak:subtree"
decl_stmt|;
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|LOCAL_NAME_MAPPINGS
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"internal"
argument_list|,
literal|"b"
argument_list|,
literal|"http://www.jcp.org/jcr/1.0"
argument_list|,
literal|"c"
argument_list|,
literal|"http://jackrabbit.apache.org/oak/ns/1.0"
argument_list|)
decl_stmt|;
specifier|private
name|User
name|testSystemUser
decl_stmt|;
specifier|private
name|PrincipalBasedAuthorizationConfiguration
name|principalBasedAuthorizationConfiguration
decl_stmt|;
name|String
name|testJcrPath
decl_stmt|;
name|String
name|testContentJcrPath
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|namePathMapper
operator|=
operator|new
name|NamePathMapperImpl
argument_list|(
operator|new
name|LocalNameMapper
argument_list|(
name|root
argument_list|,
name|LOCAL_NAME_MAPPINGS
argument_list|)
argument_list|)
expr_stmt|;
name|testJcrPath
operator|=
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrPath
argument_list|(
name|TEST_OAK_PATH
argument_list|)
expr_stmt|;
name|testContentJcrPath
operator|=
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
name|testJcrPath
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
if|if
condition|(
name|testSystemUser
operator|!=
literal|null
condition|)
block|{
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|testSystemUser
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|NotNull
specifier|protected
name|SecurityProvider
name|initSecurityProvider
parameter_list|()
block|{
name|SecurityProvider
name|sp
init|=
name|super
operator|.
name|initSecurityProvider
argument_list|()
decl_stmt|;
name|principalBasedAuthorizationConfiguration
operator|=
operator|new
name|PrincipalBasedAuthorizationConfiguration
argument_list|()
expr_stmt|;
name|principalBasedAuthorizationConfiguration
operator|.
name|bindFilterProvider
argument_list|(
name|getFilterProvider
argument_list|()
argument_list|)
expr_stmt|;
name|principalBasedAuthorizationConfiguration
operator|.
name|bindMountInfoProvider
argument_list|(
name|Mounts
operator|.
name|defaultMountInfoProvider
argument_list|()
argument_list|)
expr_stmt|;
name|SecurityProviderHelper
operator|.
name|updateConfig
argument_list|(
name|sp
argument_list|,
name|principalBasedAuthorizationConfiguration
argument_list|,
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|sp
return|;
block|}
annotation|@
name|Override
annotation|@
name|NotNull
specifier|protected
name|Privilege
index|[]
name|privilegesFromNames
parameter_list|(
annotation|@
name|NotNull
name|String
modifier|...
name|privilegeNames
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|pn
init|=
name|Iterables
operator|.
name|transform
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|privilegeNames
argument_list|)
argument_list|,
name|privName
lambda|->
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrName
argument_list|(
name|privName
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|super
operator|.
name|privilegesFromNames
argument_list|(
name|pn
argument_list|)
return|;
block|}
annotation|@
name|NotNull
name|User
name|getTestSystemUser
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|testSystemUser
operator|==
literal|null
condition|)
block|{
name|String
name|uid
init|=
literal|"testSystemUser"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|testSystemUser
operator|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createSystemUser
argument_list|(
name|uid
argument_list|,
name|INTERMEDIATE_PATH
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
return|return
name|testSystemUser
return|;
block|}
name|void
name|setupContentTrees
parameter_list|(
annotation|@
name|NotNull
name|String
name|oakPath
parameter_list|)
throws|throws
name|Exception
block|{
name|setupContentTrees
argument_list|(
name|NT_OAK_UNSTRUCTURED
argument_list|,
name|oakPath
argument_list|)
expr_stmt|;
block|}
name|void
name|setupContentTrees
parameter_list|(
annotation|@
name|NotNull
name|String
name|ntName
parameter_list|,
annotation|@
name|NotNull
name|String
modifier|...
name|oakPaths
parameter_list|)
throws|throws
name|Exception
block|{
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|absPath
range|:
name|oakPaths
control|)
block|{
name|Tree
name|t
init|=
name|rootTree
decl_stmt|;
for|for
control|(
name|String
name|element
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|absPath
argument_list|)
control|)
block|{
name|t
operator|=
name|TreeUtil
operator|.
name|getOrAddChild
argument_list|(
name|t
argument_list|,
name|element
argument_list|,
name|ntName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|NotNull
name|PrincipalPolicyImpl
name|getPrincipalPolicyImpl
parameter_list|(
annotation|@
name|NotNull
name|Principal
name|testPrincipal
parameter_list|,
annotation|@
name|NotNull
name|JackrabbitAccessControlManager
name|acMgr
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|JackrabbitAccessControlPolicy
name|policy
range|:
name|ObjectArrays
operator|.
name|concat
argument_list|(
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|testPrincipal
argument_list|)
argument_list|,
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testPrincipal
argument_list|)
argument_list|,
name|JackrabbitAccessControlPolicy
operator|.
name|class
argument_list|)
control|)
block|{
if|if
condition|(
name|policy
operator|instanceof
name|PrincipalPolicyImpl
condition|)
block|{
return|return
operator|(
name|PrincipalPolicyImpl
operator|)
name|policy
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unable to obtain PrincipalPolicyImpl"
argument_list|)
throw|;
block|}
annotation|@
name|NotNull
name|PrincipalPolicyImpl
name|setupPrincipalBasedAccessControl
parameter_list|(
annotation|@
name|NotNull
name|Principal
name|testPrincipal
parameter_list|,
annotation|@
name|Nullable
name|String
name|effectivePath
parameter_list|,
annotation|@
name|NotNull
name|String
modifier|...
name|privNames
parameter_list|)
throws|throws
name|Exception
block|{
comment|// set principal-based policy for 'testPrincipal'
name|JackrabbitAccessControlManager
name|jacm
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|PrincipalPolicyImpl
name|policy
init|=
name|getPrincipalPolicyImpl
argument_list|(
name|testPrincipal
argument_list|,
name|jacm
argument_list|)
decl_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|effectivePath
argument_list|,
name|privilegesFromNames
argument_list|(
name|privNames
argument_list|)
argument_list|)
expr_stmt|;
name|jacm
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
return|return
name|policy
return|;
block|}
name|boolean
name|addPrincipalBasedEntry
parameter_list|(
annotation|@
name|NotNull
name|PrincipalPolicyImpl
name|policy
parameter_list|,
annotation|@
name|Nullable
name|String
name|effectivePath
parameter_list|,
annotation|@
name|NotNull
name|String
modifier|...
name|privNames
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|mod
init|=
name|policy
operator|.
name|addEntry
argument_list|(
name|effectivePath
argument_list|,
name|privilegesFromNames
argument_list|(
name|privNames
argument_list|)
argument_list|)
decl_stmt|;
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
return|return
name|mod
return|;
block|}
name|boolean
name|addDefaultEntry
parameter_list|(
annotation|@
name|Nullable
name|String
name|path
parameter_list|,
annotation|@
name|NotNull
name|Principal
name|principal
parameter_list|,
annotation|@
name|NotNull
name|String
modifier|...
name|privNames
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|addDefaultEntry
argument_list|(
name|path
argument_list|,
name|principal
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|privNames
argument_list|)
return|;
block|}
name|boolean
name|addDefaultEntry
parameter_list|(
annotation|@
name|Nullable
name|String
name|path
parameter_list|,
annotation|@
name|NotNull
name|Principal
name|principal
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restr
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Value
index|[]
argument_list|>
name|mvRestr
parameter_list|,
annotation|@
name|NotNull
name|String
modifier|...
name|privNames
parameter_list|)
throws|throws
name|Exception
block|{
name|JackrabbitAccessControlManager
name|jacm
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|jacm
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|checkNotNull
argument_list|(
name|acl
argument_list|)
expr_stmt|;
name|boolean
name|mod
init|=
name|acl
operator|.
name|addEntry
argument_list|(
name|principal
argument_list|,
name|privilegesFromNames
argument_list|(
name|privNames
argument_list|)
argument_list|,
literal|true
argument_list|,
name|restr
argument_list|,
name|mvRestr
argument_list|)
decl_stmt|;
name|jacm
operator|.
name|setPolicy
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|,
name|acl
argument_list|)
expr_stmt|;
return|return
name|mod
return|;
block|}
annotation|@
name|NotNull
name|PrincipalBasedPermissionProvider
name|createPermissionProvider
parameter_list|(
annotation|@
name|NotNull
name|Root
name|root
parameter_list|,
annotation|@
name|NotNull
name|Principal
modifier|...
name|principals
parameter_list|)
block|{
name|PermissionProvider
name|pp
init|=
name|principalBasedAuthorizationConfiguration
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
name|root
operator|.
name|getContentSession
argument_list|()
operator|.
name|getWorkspaceName
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|principals
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pp
operator|instanceof
name|PrincipalBasedPermissionProvider
condition|)
block|{
return|return
operator|(
name|PrincipalBasedPermissionProvider
operator|)
name|pp
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"not a PrincipalBasedPermissionProvider"
argument_list|)
throw|;
block|}
block|}
name|PrincipalBasedAccessControlManager
name|createAccessControlManager
parameter_list|(
annotation|@
name|NotNull
name|Root
name|root
parameter_list|)
block|{
name|AccessControlManager
name|acMgr
init|=
name|principalBasedAuthorizationConfiguration
operator|.
name|getAccessControlManager
argument_list|(
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|acMgr
operator|instanceof
name|PrincipalBasedAccessControlManager
condition|)
block|{
return|return
operator|(
name|PrincipalBasedAccessControlManager
operator|)
name|acMgr
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"not a PrincipalBasedAccessControlManager"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|NotNull
name|FilterProvider
name|getFilterProvider
parameter_list|()
block|{
return|return
name|createFilterProviderImpl
argument_list|(
name|SUPPORTED_PATH
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|static
name|FilterProviderImpl
name|createFilterProviderImpl
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|String
name|path
parameter_list|)
block|{
name|FilterProviderImpl
name|fp
init|=
operator|new
name|FilterProviderImpl
argument_list|()
decl_stmt|;
name|fp
operator|.
name|activate
argument_list|(
name|when
argument_list|(
name|mock
argument_list|(
name|FilterProviderImpl
operator|.
name|Configuration
operator|.
name|class
argument_list|)
operator|.
name|path
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|path
argument_list|)
operator|.
name|getMock
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|fp
return|;
block|}
annotation|@
name|NotNull
name|MgrProvider
name|getMgrProvider
parameter_list|(
name|Root
name|r
parameter_list|)
block|{
return|return
operator|new
name|MgrProviderImpl
argument_list|(
name|principalBasedAuthorizationConfiguration
argument_list|,
name|r
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|NotNull
name|PrincipalBasedAuthorizationConfiguration
name|getPrincipalBasedAuthorizationConfiguration
parameter_list|()
block|{
return|return
name|principalBasedAuthorizationConfiguration
return|;
block|}
block|}
end_class

end_unit

