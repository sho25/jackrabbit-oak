begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|authorization
operator|.
name|advanced
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|GuestCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicyIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrincipalSetPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|composite
operator|.
name|CompositeAuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|internal
operator|.
name|SecurityProviderHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|namespace
operator|.
name|NamespaceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|cug
operator|.
name|impl
operator|.
name|CugConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: Advanced Authorization Topics  * =============================================================================  *  * Title: Aggregating Multiple Authorization Models : How It Works  * -----------------------------------------------------------------------------  *  * Goal:  * Understand the inner working of aggregated authorization by stepping through  * access control management and permission evaluation.  * Note that this exercise uses a non-OSGi setup for training purpose relying on  * helpers available only for test setup.  *  * Exercises:  * Debug through each of the test methods in order to get an understand on how  * the composite setup works.  *  * - {@link #testTestUserReadPermissions()}  * - {@link #testTestUserWritePermissions()}  * - {@link #testGuestReadPermissions()}  * - {@link #testGuestWritePermissions()}  * - {@link #testAdminReadPermissions()}  * - {@link #testAdminWritePermissions()}  * - {@link #testEffectivePolicies()}  * - {@link #testApplicablePolicies()}  * - {@link #testGetPolicies()}  * - {@link #testRemovePolicy()}  *  * - Explain the {@link org.apache.jackrabbit.oak.spi.security.authorization.accesscontrol.PolicyOwner} interface.  *  * - Write more tests to explore aggregation of additional features within the  *   authorization setup such as e.g.  *> Privilege discovery  *> Repository level privileges such as e.g. ability to register a new node type.  *> XML Import  *> Validation  *> Repository Initialization  *  *  * Advanced Exercises  * -----------------------------------------------------------------------------  *  * - Change the 'authorizationCompositionType' to 'OR' and discuss the expected effect  *   on the tests. Re-run the tests to verify your expectations.  *  * - Take another look at {@link org.apache.jackrabbit.oak.spi.security.authorization.permission.AggregatedPermissionProvider}.  *   What happens if a given {@link AuthorizationConfiguration} exposes a simple  *   {@link org.apache.jackrabbit.oak.spi.security.authorization.permission.PermissionProvider}  *   that doesn't implement the aggregation-extension?  *   To verify your findings write a test-setup that combines the default authorization model with  *   {@link org.apache.jackrabbit.oak.exercise.security.authorization.models.predefined.PredefinedAuthorizationConfiguration}  *  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|L3_UnderstandAggregationTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
name|PropertyState
name|prop
decl_stmt|;
specifier|private
name|AccessControlManager
name|acMgr
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|prop
operator|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|Tree
name|var
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"var"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|var
operator|.
name|setProperty
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|Tree
name|content
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"content"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|content
operator|.
name|setProperty
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|Tree
name|c1
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|content
argument_list|,
literal|"c1"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|c1
operator|.
name|setProperty
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|Tree
name|c2
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|content
argument_list|,
literal|"c2"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|c2
operator|.
name|setProperty
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|acMgr
operator|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
expr_stmt|;
comment|// at /content grant read-access for everyone using default model
name|AccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|content
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|content
operator|.
name|getPath
argument_list|()
argument_list|,
name|acl
argument_list|)
expr_stmt|;
comment|// at /content/c1 deny reading properties (default model) and establish
comment|// a CUG that limits access to test user
name|AccessControlPolicyIterator
name|it
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|c1
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|AccessControlPolicy
name|policy
init|=
name|it
operator|.
name|nextAccessControlPolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|policy
operator|instanceof
name|PrincipalSetPolicy
condition|)
block|{
name|PrincipalSetPolicy
name|psp
init|=
operator|(
name|PrincipalSetPolicy
operator|)
name|policy
decl_stmt|;
name|psp
operator|.
name|addPrincipals
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|c1
operator|.
name|getPath
argument_list|()
argument_list|,
name|psp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|policy
operator|instanceof
name|JackrabbitAccessControlList
condition|)
block|{
name|JackrabbitAccessControlList
name|jacl
init|=
operator|(
name|JackrabbitAccessControlList
operator|)
name|policy
decl_stmt|;
name|jacl
operator|.
name|addEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_ADD_PROPERTIES
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|c1
operator|.
name|getPath
argument_list|()
argument_list|,
name|jacl
argument_list|)
expr_stmt|;
block|}
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|root
operator|.
name|getTree
argument_list|(
literal|"/content"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|getTree
argument_list|(
literal|"/var"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|SecurityProvider
name|initSecurityProvider
parameter_list|()
block|{
name|SecurityProvider
name|sp
init|=
name|super
operator|.
name|initSecurityProvider
argument_list|()
decl_stmt|;
name|CugConfiguration
name|cugConfiguration
init|=
operator|new
name|CugConfiguration
argument_list|()
decl_stmt|;
name|cugConfiguration
operator|.
name|setParameters
argument_list|(
name|ConfigurationParameters
operator|.
name|of
argument_list|(
literal|"cugSupportedPaths"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"/content"
block|}
argument_list|,
literal|"cugEnabled"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|SecurityProviderHelper
operator|.
name|updateConfig
argument_list|(
name|sp
argument_list|,
name|cugConfiguration
argument_list|,
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|sp
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ConfigurationParameters
name|getSecurityConfigParameters
parameter_list|()
block|{
return|return
name|ConfigurationParameters
operator|.
name|of
argument_list|(
literal|"authorizationCompositionType"
argument_list|,
name|CompositeAuthorizationConfiguration
operator|.
name|CompositionType
operator|.
name|AND
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTestUserReadPermissions
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ContentSession
name|cs
init|=
name|createTestSession
argument_list|()
init|)
block|{
name|Root
name|r
init|=
name|cs
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|getTree
argument_list|(
literal|"/var"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|t
init|=
name|r
operator|.
name|getTree
argument_list|(
literal|"/content"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|hasProperty
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|r
operator|.
name|getTree
argument_list|(
literal|"/content/c2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|hasProperty
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|r
operator|.
name|getTree
argument_list|(
literal|"/content/c1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|hasProperty
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTestUserWritePermissions
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ContentSession
name|cs
init|=
name|createTestSession
argument_list|()
init|)
block|{
name|Root
name|r
init|=
name|cs
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|t
init|=
name|r
operator|.
name|getTree
argument_list|(
literal|"/content/c1"
argument_list|)
decl_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
literal|"addingProperty"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|getAccessControlManager
argument_list|(
name|r
argument_list|)
operator|.
name|hasPrivileges
argument_list|(
literal|"/content/c1"
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|getAccessControlManager
argument_list|(
name|r
argument_list|)
operator|.
name|hasPrivileges
argument_list|(
literal|"/content/c1"
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|getAccessControlManager
argument_list|(
name|r
argument_list|)
operator|.
name|hasPrivileges
argument_list|(
literal|"/content/c1"
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_REMOVE_PROPERTIES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|getAccessControlManager
argument_list|(
name|r
argument_list|)
operator|.
name|hasPrivileges
argument_list|(
literal|"/content/c1"
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_ALTER_PROPERTIES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGuestReadPermissions
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|GuestCredentials
argument_list|()
argument_list|)
init|)
block|{
name|Root
name|r
init|=
name|cs
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|getTree
argument_list|(
literal|"/var"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|t
init|=
name|r
operator|.
name|getTree
argument_list|(
literal|"/content"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|hasProperty
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|r
operator|.
name|getTree
argument_list|(
literal|"/content/c2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|hasProperty
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|getTree
argument_list|(
literal|"/content/c1"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGuestWritePermissions
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|GuestCredentials
argument_list|()
argument_list|)
init|)
block|{
name|Root
name|r
init|=
name|cs
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
comment|// EXERCISE: write additional code testing permissions required for
comment|//           another property and child node.
name|Tree
name|t
init|=
name|r
operator|.
name|getTree
argument_list|(
literal|"/content"
argument_list|)
decl_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
literal|"prop2"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|t
operator|.
name|addChild
argument_list|(
literal|"anotherChild"
argument_list|)
expr_stmt|;
name|r
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAdminReadPermissions
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/var"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/content"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|hasProperty
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/c2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|hasProperty
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/c1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|hasProperty
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAdminWritePermissions
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|p
range|:
operator|new
name|String
index|[]
block|{
literal|"/"
block|,
literal|"/var"
block|,
literal|"/content"
block|,
literal|"/content/c1"
block|,
literal|"/content/c2"
block|}
control|)
block|{
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|p
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEffectivePolicies
parameter_list|()
throws|throws
name|Exception
block|{
comment|// EXERCISE: inspect the effective policies to be discovered at the various paths
comment|//           explain the result and the differences.
comment|// EXERCISE: compare list of effective policies to policies return upon AccessControlManager.getPolicies
name|AccessControlPolicy
index|[]
name|effective
init|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
literal|"/content/c1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
name|effective
operator|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
literal|"/content/c2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
name|effective
operator|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
literal|"/var"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
name|effective
operator|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|NamespaceConstants
operator|.
name|NAMESPACES_PATH
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// EXERCISE: try to modify the policies obtained in any of the calls
comment|// EXERCISE: try to write back the effective policies using AccessControlManager.setPolicy
block|}
annotation|@
name|Test
specifier|public
name|void
name|testApplicablePolicies
parameter_list|()
throws|throws
name|Exception
block|{
comment|// EXERCISE: observe the type of applicable policies and explain differences
comment|//           between the 3 paths.
name|AccessControlPolicyIterator
name|it
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
literal|"/content/c2"
argument_list|)
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|AccessControlPolicy
name|policy
init|=
name|it
operator|.
name|nextAccessControlPolicy
argument_list|()
decl_stmt|;
name|cnt
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
name|it
operator|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
literal|"/var"
argument_list|)
expr_stmt|;
name|cnt
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|AccessControlPolicy
name|policy
init|=
name|it
operator|.
name|nextAccessControlPolicy
argument_list|()
decl_stmt|;
name|cnt
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
name|it
operator|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
literal|"/content"
argument_list|)
expr_stmt|;
name|cnt
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|AccessControlPolicy
name|policy
init|=
name|it
operator|.
name|nextAccessControlPolicy
argument_list|()
decl_stmt|;
name|cnt
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
comment|// EXERCISE: expand the test by optionally modifying the applicable policies
comment|//           and writing them back using AccessControlManager.setPolicy
comment|// EXERCISE: explain the effective permissions resulting from both applying
comment|//           empty and modified policies.
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSetPolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
literal|"/content/c1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// EXERCISE: observe how the different authorization models claim responsibility for the setPolicy call.
for|for
control|(
name|AccessControlPolicy
name|policy
range|:
name|policies
control|)
block|{
name|acMgr
operator|.
name|setPolicy
argument_list|(
literal|"/content/c1"
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|acMgr
operator|.
name|getPolicies
argument_list|(
literal|"/content/c1"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovePolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
literal|"/content/c1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// EXERCISE: observe how the different authorization models claim responsibility for the removal.
for|for
control|(
name|AccessControlPolicy
name|policy
range|:
name|policies
control|)
block|{
name|acMgr
operator|.
name|removePolicy
argument_list|(
literal|"/content/c1"
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getPolicies
argument_list|(
literal|"/content/c1"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

