begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|basic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|value
operator|.
name|ValueFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalUser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|TestIdentityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultSyncContextTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
name|TestIdentityProvider
name|idp
init|=
operator|new
name|TestIdentityProvider
argument_list|()
decl_stmt|;
specifier|private
name|DefaultSyncConfig
name|config
init|=
operator|new
name|DefaultSyncConfig
argument_list|()
decl_stmt|;
specifier|private
name|DefaultSyncContext
name|syncCtx
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|authorizableIds
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|syncCtx
operator|=
operator|new
name|DefaultSyncContext
argument_list|(
name|config
argument_list|,
name|idp
argument_list|,
name|getUserManager
argument_list|(
name|root
argument_list|)
argument_list|,
operator|new
name|ValueFactoryImpl
argument_list|(
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|syncCtx
operator|.
name|close
argument_list|()
expr_stmt|;
name|UserManager
name|umgr
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|ExternalIdentity
argument_list|>
name|ids
init|=
name|Iterators
operator|.
name|concat
argument_list|(
name|idp
operator|.
name|listGroups
argument_list|()
argument_list|,
name|idp
operator|.
name|listUsers
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|ids
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Authorizable
name|a
init|=
name|umgr
operator|.
name|getAuthorizable
argument_list|(
name|ids
operator|.
name|next
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|id
range|:
name|authorizableIds
control|)
block|{
name|Authorizable
name|a
init|=
name|umgr
operator|.
name|getAuthorizable
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Group
name|createTestGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|gr
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createGroup
argument_list|(
literal|"group"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
name|authorizableIds
operator|.
name|add
argument_list|(
name|gr
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|gr
return|;
block|}
specifier|private
name|void
name|setExternalID
parameter_list|(
annotation|@
name|Nonnull
name|Authorizable
name|authorizable
parameter_list|,
annotation|@
name|Nullable
name|String
name|idpName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|authorizable
operator|.
name|setProperty
argument_list|(
name|DefaultSyncContext
operator|.
name|REP_EXTERNAL_ID
argument_list|,
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|authorizable
operator|.
name|getID
argument_list|()
operator|+
literal|';'
operator|+
name|idpName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSyncInvalidExternalIdentity
parameter_list|()
throws|throws
name|Exception
block|{
name|syncCtx
operator|.
name|sync
argument_list|(
operator|new
name|TestExternalIdentity
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncExternalUser
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalUser
name|user
init|=
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|ADD
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|NOP
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|syncCtx
operator|.
name|setForceUserSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|UPDATE
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncExternalGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalGroup
name|gr
init|=
name|idp
operator|.
name|listGroups
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|gr
argument_list|)
expr_stmt|;
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|gr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|ADD
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|gr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|NOP
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|syncCtx
operator|.
name|setForceGroupSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|gr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|UPDATE
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncUserById
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentity
name|externalId
init|=
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// no initial sync -> sync-by-id doesn't succeed
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|externalId
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|NO_SUCH_AUTHORIZABLE
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// force sync
name|syncCtx
operator|.
name|sync
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
comment|// try again
name|syncCtx
operator|.
name|setForceUserSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|externalId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|UPDATE
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncRemovedUserById
parameter_list|()
throws|throws
name|Exception
block|{
comment|// mark a regular repo user as external user from the test IDP
name|User
name|u
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createUser
argument_list|(
literal|"test"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|userId
init|=
name|u
operator|.
name|getID
argument_list|()
decl_stmt|;
name|authorizableIds
operator|.
name|add
argument_list|(
name|userId
argument_list|)
expr_stmt|;
name|setExternalID
argument_list|(
name|u
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// test sync with 'keepmissing' = true
name|syncCtx
operator|.
name|setKeepMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|userId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|MISSING
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|userId
argument_list|)
argument_list|)
expr_stmt|;
comment|// test sync with 'keepmissing' = false
name|syncCtx
operator|.
name|setKeepMissing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|userId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|DELETE
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|userId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncGroupById
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentity
name|externalId
init|=
name|idp
operator|.
name|listGroups
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// no initial sync -> sync-by-id doesn't succeed
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|externalId
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|NO_SUCH_AUTHORIZABLE
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// force sync
name|syncCtx
operator|.
name|sync
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
comment|// try again
name|syncCtx
operator|.
name|setForceGroupSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|externalId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|UPDATE
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncRemovedGroupById
parameter_list|()
throws|throws
name|Exception
block|{
comment|// mark a regular repo user as external user from the test IDP
name|Group
name|gr
init|=
name|createTestGroup
argument_list|()
decl_stmt|;
name|String
name|groupId
init|=
name|gr
operator|.
name|getID
argument_list|()
decl_stmt|;
name|setExternalID
argument_list|(
name|gr
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// test sync with 'keepmissing' = true
name|syncCtx
operator|.
name|setKeepMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|MISSING
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|groupId
argument_list|)
argument_list|)
expr_stmt|;
comment|// test sync with 'keepmissing' = false
name|syncCtx
operator|.
name|setKeepMissing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|DELETE
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|groupId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncRemovedGroupWithMembers
parameter_list|()
throws|throws
name|Exception
block|{
comment|// mark a regular repo user as external user from the test IDP
name|Group
name|gr
init|=
name|createTestGroup
argument_list|()
decl_stmt|;
name|gr
operator|.
name|addMember
argument_list|(
name|getTestUser
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|groupId
init|=
name|gr
operator|.
name|getID
argument_list|()
decl_stmt|;
name|setExternalID
argument_list|(
name|gr
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// test sync with 'keepmissing' = true
name|syncCtx
operator|.
name|setKeepMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|NOP
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|groupId
argument_list|)
argument_list|)
expr_stmt|;
comment|// test sync with 'keepmissing' = false
name|syncCtx
operator|.
name|setKeepMissing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|NOP
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|groupId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncByForeignId
parameter_list|()
throws|throws
name|Exception
block|{
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|FOREIGN
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncByForeignId2
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|u
init|=
name|getTestUser
argument_list|()
decl_stmt|;
name|setExternalID
argument_list|(
name|u
argument_list|,
literal|"differentIDP"
argument_list|)
expr_stmt|;
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|u
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|FOREIGN
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncAutoMembership
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|gr
init|=
name|createTestGroup
argument_list|()
decl_stmt|;
name|config
operator|.
name|user
argument_list|()
operator|.
name|setAutoMembership
argument_list|(
name|gr
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|ADD
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Authorizable
name|a
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|result
operator|.
name|getIdentity
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|gr
operator|.
name|isDeclaredMember
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncAutoMembershipListsNonExistingGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|config
operator|.
name|user
argument_list|()
operator|.
name|setAutoMembership
argument_list|(
literal|"nonExistingGroup"
argument_list|)
expr_stmt|;
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|ADD
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncAutoMembershipListsUser
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set auto-membership config to point to a user instead a group
name|config
operator|.
name|user
argument_list|()
operator|.
name|setAutoMembership
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|syncCtx
operator|.
name|sync
argument_list|(
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLostMembership
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a group in the repository which is marked as being external
comment|// and associated with the test-IDP to setup the situation that a
comment|// repository group is no longer listed in the IDP.
name|Group
name|gr
init|=
name|createTestGroup
argument_list|()
decl_stmt|;
name|setExternalID
argument_list|(
name|gr
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// sync an external user from the IDP into the repo and make it member
comment|// of the test group
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|result
operator|.
name|getIdentity
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|gr
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// enforce synchronization of the user and it's group membership
name|syncCtx
operator|.
name|setForceUserSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|user
argument_list|()
operator|.
name|setMembershipExpirationTime
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// 1. membership nesting is< 0 => membership not synchronized
name|config
operator|.
name|user
argument_list|()
operator|.
name|setMembershipNestingDepth
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|syncCtx
operator|.
name|sync
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|gr
operator|.
name|isDeclaredMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2. membership nesting is> 0 => membership gets synchronized
name|config
operator|.
name|user
argument_list|()
operator|.
name|setMembershipNestingDepth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|UPDATE
argument_list|,
name|syncCtx
operator|.
name|sync
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|gr
operator|.
name|isDeclaredMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLostMembershipDifferentIDP
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a group in the repository which is marked as being external
comment|// and associated with another IPD.
name|Group
name|gr
init|=
name|createTestGroup
argument_list|()
decl_stmt|;
name|setExternalID
argument_list|(
name|gr
argument_list|,
literal|"differentIDP"
argument_list|)
expr_stmt|;
comment|// sync an external user from the IDP into the repo and make it member
comment|// of the test group
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|result
operator|.
name|getIdentity
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|gr
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// enforce synchronization of the user and it's group membership
name|syncCtx
operator|.
name|setForceUserSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|user
argument_list|()
operator|.
name|setMembershipExpirationTime
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|config
operator|.
name|user
argument_list|()
operator|.
name|setMembershipNestingDepth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|UPDATE
argument_list|,
name|syncCtx
operator|.
name|sync
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// since the group is not associated with the test-IDP the group-membership
comment|// must NOT be modified during the sync.
name|assertTrue
argument_list|(
name|gr
operator|.
name|isDeclaredMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * ExternalIdentity implementation that is neither user nor group.      */
specifier|private
specifier|final
class|class
name|TestExternalIdentity
implements|implements
name|ExternalIdentity
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|ExternalIdentityRef
name|getExternalId
parameter_list|()
block|{
return|return
operator|new
name|ExternalIdentityRef
argument_list|(
name|getId
argument_list|()
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
literal|"externalId"
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|getPrincipalName
parameter_list|()
block|{
return|return
literal|"principalName"
return|;
block|}
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
name|String
name|getIntermediatePath
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|ExternalIdentityRef
argument_list|>
name|getDeclaredGroups
parameter_list|()
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|ImmutableMap
operator|.
name|of
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

