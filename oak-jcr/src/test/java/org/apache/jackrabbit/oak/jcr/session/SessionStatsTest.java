begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|session
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|reflect
operator|.
name|FieldUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|delegate
operator|.
name|SessionDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|SessionStatsTest
extends|extends
name|AbstractJCRTest
block|{
comment|/**      * Tests if the init stack trace is not recorded by default.      */
specifier|public
name|void
name|testInitStackTraceDisabledByDefault
parameter_list|()
throws|throws
name|IllegalAccessException
block|{
name|assertTrue
argument_list|(
literal|"initStackTrace is not empty"
argument_list|,
name|getInitStackTrace
argument_list|(
name|superuser
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests if the init stack trace is recorded after opening a lot of sessions.      */
specifier|public
name|void
name|testInitStackTraceEnabledAfterOpeningManySessions
parameter_list|()
throws|throws
name|IllegalAccessException
throws|,
name|RepositoryException
block|{
specifier|final
name|int
name|sessionCount
init|=
name|SessionStats
operator|.
name|INIT_STACK_TRACE_THRESHOLD
operator|+
literal|1
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Session
argument_list|>
name|sessions
init|=
operator|new
name|ArrayList
argument_list|<
name|Session
argument_list|>
argument_list|(
name|sessionCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sessionCount
condition|;
name|i
operator|++
control|)
block|{
name|sessions
operator|.
name|add
argument_list|(
name|createSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Stack trace should be recorded by now
name|Session
name|lastSession
init|=
name|sessions
operator|.
name|get
argument_list|(
name|sessionCount
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"initStackTrace is empty"
argument_list|,
name|getInitStackTrace
argument_list|(
name|lastSession
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Session
name|session
range|:
name|sessions
control|)
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
comment|// Stack trace should not be recorded anymore
name|Session
name|afterSession
init|=
name|createSession
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"initStackTrace is not empty"
argument_list|,
name|getInitStackTrace
argument_list|(
name|afterSession
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|afterSession
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Session
name|createSession
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|getHelper
argument_list|()
operator|.
name|getReadWriteSession
argument_list|()
return|;
block|}
specifier|private
name|String
name|getInitStackTrace
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|IllegalAccessException
block|{
name|SessionDelegate
name|sessionDelegate
init|=
operator|(
name|SessionDelegate
operator|)
name|FieldUtils
operator|.
name|readDeclaredField
argument_list|(
name|session
argument_list|,
literal|"sd"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SessionStats
name|sessionStats
init|=
name|sessionDelegate
operator|.
name|getSessionStats
argument_list|()
decl_stmt|;
return|return
name|sessionStats
operator|.
name|getInitStackTrace
argument_list|()
return|;
block|}
block|}
end_class

end_unit

