begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|elasticsearch
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FieldNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|spi
operator|.
name|binary
operator|.
name|FulltextBinaryTextExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|spi
operator|.
name|editor
operator|.
name|FulltextDocumentMaker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|ElasticsearchDocumentMaker
extends|extends
name|FulltextDocumentMaker
argument_list|<
name|ElasticsearchDocument
argument_list|>
block|{
name|ElasticsearchDocumentMaker
parameter_list|(
annotation|@
name|Nullable
name|FulltextBinaryTextExtractor
name|textExtractor
parameter_list|,
annotation|@
name|NotNull
name|IndexDefinition
name|definition
parameter_list|,
name|IndexDefinition
operator|.
name|IndexingRule
name|indexingRule
parameter_list|,
annotation|@
name|NotNull
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
name|textExtractor
argument_list|,
name|definition
argument_list|,
name|indexingRule
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ElasticsearchDocument
name|initDoc
parameter_list|()
block|{
return|return
operator|new
name|ElasticsearchDocument
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ElasticsearchDocument
name|finalizeDoc
parameter_list|(
name|ElasticsearchDocument
name|doc
parameter_list|,
name|boolean
name|dirty
parameter_list|,
name|boolean
name|facet
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doc
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't generate id for doc - (More details during initDoc)"
operator|+
name|doc
argument_list|)
throw|;
block|}
return|return
name|doc
return|;
block|}
comment|// TODO: needed only for oak-lucene. Should be removed from oak-search
annotation|@
name|Override
specifier|protected
name|boolean
name|isFacetingEnabled
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|indexTypeOrderedFields
parameter_list|(
name|ElasticsearchDocument
name|doc
parameter_list|,
name|String
name|pname
parameter_list|,
name|int
name|tag
parameter_list|,
name|PropertyState
name|property
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
block|{
comment|// TODO: check the conjecture below
comment|// ES doesn't seem to require special mapping to sort so we don't need to add anything
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|addBinary
parameter_list|(
name|ElasticsearchDocument
name|doc
parameter_list|,
name|String
name|path
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|binaryValues
parameter_list|)
block|{
name|boolean
name|added
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|binaryValue
range|:
name|binaryValues
control|)
block|{
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|addFulltextRelative
argument_list|(
name|path
argument_list|,
name|binaryValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|addFulltext
argument_list|(
name|binaryValue
argument_list|)
expr_stmt|;
block|}
name|added
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|added
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|indexFacetProperty
parameter_list|(
name|ElasticsearchDocument
name|doc
parameter_list|,
name|int
name|tag
parameter_list|,
name|PropertyState
name|property
parameter_list|,
name|String
name|pname
parameter_list|)
block|{
comment|// faceting on ES works automatically for keyword (propertyIndex) and subsequently query params.
comment|// We we don't need to add anything.
comment|// https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-terms-aggregation.html
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|indexAnalyzedProperty
parameter_list|(
name|ElasticsearchDocument
name|doc
parameter_list|,
name|String
name|pname
parameter_list|,
name|String
name|value
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
block|{
name|doc
operator|.
name|addProperty
argument_list|(
name|FieldNames
operator|.
name|createAnalyzedFieldName
argument_list|(
name|pname
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|indexSuggestValue
parameter_list|(
name|ElasticsearchDocument
name|doc
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|doc
operator|.
name|addSuggest
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|indexSpellcheckValue
parameter_list|(
name|ElasticsearchDocument
name|doc
parameter_list|,
name|String
name|value
parameter_list|)
block|{
comment|// TODO: Figure out how to do spellcheck with ES (interwebs seems to say that it should be simple
comment|// and don't need anything extra in indexed document
block|}
annotation|@
name|Override
specifier|protected
name|void
name|indexFulltextValue
parameter_list|(
name|ElasticsearchDocument
name|doc
parameter_list|,
name|String
name|value
parameter_list|)
block|{
comment|// Note: diversion from lucene impl - here we are storing even these cases and not just binary
name|doc
operator|.
name|addFulltext
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|indexTypedProperty
parameter_list|(
name|ElasticsearchDocument
name|doc
parameter_list|,
name|PropertyState
name|property
parameter_list|,
name|String
name|pname
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
block|{
name|int
name|tag
init|=
name|property
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
decl_stmt|;
name|boolean
name|fieldAdded
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|property
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|f
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|Type
operator|.
name|LONG
operator|.
name|tag
argument_list|()
condition|)
block|{
name|f
operator|=
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|==
name|Type
operator|.
name|DATE
operator|.
name|tag
argument_list|()
condition|)
block|{
name|f
operator|=
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|==
name|Type
operator|.
name|DOUBLE
operator|.
name|tag
argument_list|()
condition|)
block|{
name|f
operator|=
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|==
name|Type
operator|.
name|BOOLEAN
operator|.
name|tag
argument_list|()
condition|)
block|{
name|f
operator|=
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|i
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|f
operator|=
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includePropertyValue
argument_list|(
name|property
argument_list|,
name|i
argument_list|,
name|pd
argument_list|)
condition|)
block|{
name|doc
operator|.
name|addProperty
argument_list|(
name|pname
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|fieldAdded
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|fieldAdded
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|indexAncestors
parameter_list|(
name|ElasticsearchDocument
name|doc
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|doc
operator|.
name|indexAncestors
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|indexNotNullProperty
parameter_list|(
name|ElasticsearchDocument
name|doc
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
block|{
name|doc
operator|.
name|notNullProp
argument_list|(
name|pd
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|indexNullProperty
parameter_list|(
name|ElasticsearchDocument
name|doc
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
block|{
name|doc
operator|.
name|nullProp
argument_list|(
name|pd
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|indexAggregateValue
parameter_list|(
name|ElasticsearchDocument
name|doc
parameter_list|,
name|Aggregate
operator|.
name|NodeIncludeResult
name|result
parameter_list|,
name|String
name|value
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|isRelativeNode
argument_list|()
condition|)
block|{
name|doc
operator|.
name|addFulltextRelative
argument_list|(
name|result
operator|.
name|rootIncludePath
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|addFulltext
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|indexNodeName
parameter_list|(
name|ElasticsearchDocument
name|doc
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|doc
operator|.
name|addProperty
argument_list|(
name|FieldNames
operator|.
name|NODE_NAME
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|indexSimilarityTag
parameter_list|(
name|ElasticsearchDocument
name|doc
parameter_list|,
name|PropertyState
name|property
parameter_list|)
block|{
comment|// TODO : not implemented
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|indexSimilarityBinaries
parameter_list|(
name|ElasticsearchDocument
name|doc
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|,
name|Blob
name|blob
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO : not implemented
comment|// see https://www.elastic.co/blog/text-similarity-search-with-vectors-in-elasticsearch
comment|// see https://www.elastic.co/guide/en/elasticsearch/reference/current/dense-vector.html
block|}
annotation|@
name|Override
specifier|protected
name|void
name|indexSimilarityStrings
parameter_list|(
name|ElasticsearchDocument
name|doc
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO : not implemented
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|augmentCustomFields
parameter_list|(
name|String
name|path
parameter_list|,
name|ElasticsearchDocument
name|doc
parameter_list|,
name|NodeState
name|document
parameter_list|)
block|{
comment|// TODO : not implemented
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

