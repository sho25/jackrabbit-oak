begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * A MongoDB "update" operation for one document.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|UpdateOp
block|{
specifier|final
name|String
name|id
decl_stmt|;
specifier|private
name|boolean
name|isNew
decl_stmt|;
specifier|private
name|boolean
name|isDelete
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Key
argument_list|,
name|Operation
argument_list|>
name|changes
init|=
operator|new
name|HashMap
argument_list|<
name|Key
argument_list|,
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Create an update operation for the document with the given id. The commit      * root is assumed to be the path, unless this is changed later on.      *      * @param id the primary key      * @param isNew whether this is a new document      */
name|UpdateOp
parameter_list|(
name|String
name|id
parameter_list|,
name|boolean
name|isNew
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|isNew
operator|=
name|isNew
expr_stmt|;
block|}
comment|/**      * Creates an update operation for the document with the given id. The      * changes are shared with the other update operation.      *      * @param id the primary key.      * @param other the other update operation.      */
name|UpdateOp
parameter_list|(
name|String
name|id
parameter_list|,
name|UpdateOp
name|other
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|changes
operator|=
name|other
operator|.
name|changes
expr_stmt|;
name|this
operator|.
name|isNew
operator|=
name|other
operator|.
name|isNew
expr_stmt|;
name|this
operator|.
name|isDelete
operator|=
name|other
operator|.
name|isDelete
expr_stmt|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|public
name|boolean
name|isNew
parameter_list|()
block|{
return|return
name|isNew
return|;
block|}
name|void
name|setDelete
parameter_list|(
name|boolean
name|isDelete
parameter_list|)
block|{
name|this
operator|.
name|isDelete
operator|=
name|isDelete
expr_stmt|;
block|}
name|boolean
name|isDelete
parameter_list|()
block|{
return|return
name|isDelete
return|;
block|}
name|Map
argument_list|<
name|Key
argument_list|,
name|Operation
argument_list|>
name|getChanges
parameter_list|()
block|{
return|return
name|changes
return|;
block|}
comment|/**      * Add a new or update an existing map entry.      * The property is a map of revisions / values.      *       * @param property the property      * @param revision the revision      * @param value the value      */
name|void
name|setMapEntry
parameter_list|(
annotation|@
name|Nonnull
name|String
name|property
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|Operation
name|op
init|=
operator|new
name|Operation
argument_list|()
decl_stmt|;
name|op
operator|.
name|type
operator|=
name|Operation
operator|.
name|Type
operator|.
name|SET_MAP_ENTRY
expr_stmt|;
name|op
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|changes
operator|.
name|put
argument_list|(
operator|new
name|Key
argument_list|(
name|property
argument_list|,
name|checkNotNull
argument_list|(
name|revision
argument_list|)
argument_list|)
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove a map entry.      * The property is a map of revisions / values.      *       * @param property the property      * @param revision the revision      */
specifier|public
name|void
name|removeMapEntry
parameter_list|(
annotation|@
name|Nonnull
name|String
name|property
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|)
block|{
name|Operation
name|op
init|=
operator|new
name|Operation
argument_list|()
decl_stmt|;
name|op
operator|.
name|type
operator|=
name|Operation
operator|.
name|Type
operator|.
name|REMOVE_MAP_ENTRY
expr_stmt|;
name|changes
operator|.
name|put
argument_list|(
operator|new
name|Key
argument_list|(
name|property
argument_list|,
name|checkNotNull
argument_list|(
name|revision
argument_list|)
argument_list|)
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the property to the given value.      *       * @param property the property name      * @param value the value      */
name|void
name|set
parameter_list|(
name|String
name|property
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|Operation
name|op
init|=
operator|new
name|Operation
argument_list|()
decl_stmt|;
name|op
operator|.
name|type
operator|=
name|Operation
operator|.
name|Type
operator|.
name|SET
expr_stmt|;
name|op
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|changes
operator|.
name|put
argument_list|(
operator|new
name|Key
argument_list|(
name|property
argument_list|,
literal|null
argument_list|)
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
comment|/**      * Do not set the property entry (after it has been set).      * The property is a map of revisions / values.      *       * @param property the property name      * @param revision the revision      */
name|void
name|unsetMapEntry
parameter_list|(
annotation|@
name|Nonnull
name|String
name|property
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|)
block|{
name|changes
operator|.
name|remove
argument_list|(
operator|new
name|Key
argument_list|(
name|property
argument_list|,
name|checkNotNull
argument_list|(
name|revision
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks if the named key exists or is absent in the MongoDB document. This      * method can be used to make a conditional update.      *      * @param property the property name      * @param revision the revision      */
name|void
name|containsMapEntry
parameter_list|(
annotation|@
name|Nonnull
name|String
name|property
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|,
name|boolean
name|exists
parameter_list|)
block|{
if|if
condition|(
name|isNew
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot use containsMapEntry() on new document"
argument_list|)
throw|;
block|}
name|Operation
name|op
init|=
operator|new
name|Operation
argument_list|()
decl_stmt|;
name|op
operator|.
name|type
operator|=
name|Operation
operator|.
name|Type
operator|.
name|CONTAINS_MAP_ENTRY
expr_stmt|;
name|op
operator|.
name|value
operator|=
name|exists
expr_stmt|;
name|changes
operator|.
name|put
argument_list|(
operator|new
name|Key
argument_list|(
name|property
argument_list|,
name|checkNotNull
argument_list|(
name|revision
argument_list|)
argument_list|)
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
comment|/**      * Increment the value.      *       * @param property the key      * @param value the increment      */
name|void
name|increment
parameter_list|(
annotation|@
name|Nonnull
name|String
name|property
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|Operation
name|op
init|=
operator|new
name|Operation
argument_list|()
decl_stmt|;
name|op
operator|.
name|type
operator|=
name|Operation
operator|.
name|Type
operator|.
name|INCREMENT
expr_stmt|;
name|op
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|changes
operator|.
name|put
argument_list|(
operator|new
name|Key
argument_list|(
name|property
argument_list|,
literal|null
argument_list|)
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UpdateOp
name|getReverseOperation
parameter_list|()
block|{
name|UpdateOp
name|reverse
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
name|isNew
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Key
argument_list|,
name|Operation
argument_list|>
name|e
range|:
name|changes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Operation
name|r
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getReverse
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|reverse
operator|.
name|changes
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|reverse
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"key: "
operator|+
name|id
operator|+
literal|" "
operator|+
operator|(
name|isNew
condition|?
literal|"new"
else|:
literal|"update"
operator|)
operator|+
literal|" "
operator|+
name|changes
return|;
block|}
comment|/**      * A MongoDB operation for a given key within a document.       */
specifier|public
specifier|static
class|class
name|Operation
block|{
comment|/**          * The MongoDB operation type.          */
specifier|public
enum|enum
name|Type
block|{
comment|/**              * Set the value.               * The sub-key is not used.              */
name|SET
block|,
comment|/**              * Increment the Long value with the provided Long value.              * The sub-key is not used.              */
name|INCREMENT
block|,
comment|/**              * Add the sub-key / value pair.              * The value in the stored node is a map.              */
name|SET_MAP_ENTRY
block|,
comment|/**              * Remove the sub-key / value pair.              * The value in the stored node is a map.              */
name|REMOVE_MAP_ENTRY
block|,
comment|/**              * Checks if the sub-key is present in a map or not.              */
name|CONTAINS_MAP_ENTRY
block|}
comment|/**          * The operation type.          */
name|Type
name|type
decl_stmt|;
comment|/**          * The value, if any.          */
name|Object
name|value
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|type
operator|+
literal|" "
operator|+
name|value
return|;
block|}
specifier|public
name|Operation
name|getReverse
parameter_list|()
block|{
name|Operation
name|reverse
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|INCREMENT
case|:
name|reverse
operator|=
operator|new
name|Operation
argument_list|()
expr_stmt|;
name|reverse
operator|.
name|type
operator|=
name|Type
operator|.
name|INCREMENT
expr_stmt|;
name|reverse
operator|.
name|value
operator|=
operator|-
operator|(
name|Long
operator|)
name|value
expr_stmt|;
break|break;
case|case
name|SET
case|:
case|case
name|REMOVE_MAP_ENTRY
case|:
case|case
name|CONTAINS_MAP_ENTRY
case|:
comment|// nothing to do
break|break;
case|case
name|SET_MAP_ENTRY
case|:
name|reverse
operator|=
operator|new
name|Operation
argument_list|()
expr_stmt|;
name|reverse
operator|.
name|type
operator|=
name|Type
operator|.
name|REMOVE_MAP_ENTRY
expr_stmt|;
break|break;
block|}
return|return
name|reverse
return|;
block|}
block|}
comment|/**      * A key for an operation consists of a property name and an optional      * revision. The revision is only set if the value for the operation is      * set for a certain revision.      */
specifier|public
specifier|static
specifier|final
class|class
name|Key
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|Revision
name|revision
decl_stmt|;
specifier|public
name|Key
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|,
annotation|@
name|Nullable
name|Revision
name|revision
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|revision
operator|=
name|revision
expr_stmt|;
block|}
annotation|@
name|Nonnull
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|CheckForNull
specifier|public
name|Revision
name|getRevision
parameter_list|()
block|{
return|return
name|revision
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|s
init|=
name|name
decl_stmt|;
if|if
condition|(
name|revision
operator|!=
literal|null
condition|)
block|{
name|s
operator|+=
literal|"."
operator|+
name|revision
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
name|name
operator|.
name|hashCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|revision
operator|!=
literal|null
condition|)
block|{
name|hash
operator|^=
name|revision
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|hash
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Key
condition|)
block|{
name|Key
name|other
init|=
operator|(
name|Key
operator|)
name|obj
decl_stmt|;
return|return
name|name
operator|.
name|equals
argument_list|(
name|other
operator|.
name|name
argument_list|)
operator|&&
name|revision
operator|!=
literal|null
condition|?
name|revision
operator|.
name|equals
argument_list|(
name|other
operator|.
name|revision
argument_list|)
else|:
name|other
operator|.
name|revision
operator|==
literal|null
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

