begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|UncheckedExecutionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoClientURI
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoExecutionTimeoutException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|QueryOperators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|ReadPreference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentStoreStatsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|JournalEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Revision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|StableRevisionComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateOp
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateOp
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateOp
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|cache
operator|.
name|CacheInvalidationStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|cache
operator|.
name|NodeDocumentCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|locks
operator|.
name|TreeNodeDocumentLocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BulkWriteError
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BulkWriteException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BulkWriteOperation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BulkWriteResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BulkWriteUpsert
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|WriteConcern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|WriteResult
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
operator|.
name|in
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
operator|.
name|notNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|filter
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|filterKeys
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|filterValues
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|difference
import|;
end_import

begin_comment
comment|/**  * A document store that uses MongoDB as the backend.  */
end_comment

begin_class
specifier|public
class|class
name|MongoDocumentStore
implements|implements
name|DocumentStore
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MongoDocumentStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PerfLogger
name|PERFLOG
init|=
operator|new
name|PerfLogger
argument_list|(
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MongoDocumentStore
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".perf"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DBObject
name|BY_ID_ASC
init|=
operator|new
name|BasicDBObject
argument_list|(
name|Document
operator|.
name|ID
argument_list|,
literal|1
argument_list|)
decl_stmt|;
enum|enum
name|DocumentReadPreference
block|{
name|PRIMARY
block|,
name|PREFER_PRIMARY
block|,
name|PREFER_SECONDARY
block|,
name|PREFER_SECONDARY_IF_OLD_ENOUGH
block|}
specifier|public
specifier|static
specifier|final
name|int
name|IN_CLAUSE_BATCH_SIZE
init|=
literal|500
decl_stmt|;
specifier|private
specifier|final
name|DBCollection
name|nodes
decl_stmt|;
specifier|private
specifier|final
name|DBCollection
name|clusterNodes
decl_stmt|;
specifier|private
specifier|final
name|DBCollection
name|settings
decl_stmt|;
specifier|private
specifier|final
name|DBCollection
name|journal
decl_stmt|;
specifier|private
specifier|final
name|DB
name|db
decl_stmt|;
specifier|private
specifier|final
name|NodeDocumentCache
name|nodesCache
decl_stmt|;
specifier|private
specifier|final
name|TreeNodeDocumentLocks
name|nodeLocks
decl_stmt|;
specifier|private
name|Clock
name|clock
init|=
name|Clock
operator|.
name|SIMPLE
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxReplicationLagMillis
decl_stmt|;
comment|/**      * Duration in seconds under which queries would use index on _modified field      * If set to -1 then modifiedTime index would not be used.      *<p>      * Default is 60 seconds.      */
specifier|private
specifier|final
name|long
name|maxDeltaForModTimeIdxSecs
init|=
name|Long
operator|.
name|getLong
argument_list|(
literal|"oak.mongo.maxDeltaForModTimeIdxSecs"
argument_list|,
literal|60
argument_list|)
decl_stmt|;
comment|/**      * Disables the index hint sent to MongoDB.      * This overrides {@link #maxDeltaForModTimeIdxSecs}.      */
specifier|private
specifier|final
name|boolean
name|disableIndexHint
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"oak.mongo.disableIndexHint"
argument_list|)
decl_stmt|;
comment|/**      * Duration in milliseconds after which a mongo query will be terminated.      *<p>      * If this value is -1 no timeout is being set at all, if it is 1 or greater      * this translated to MongoDB's maxTimeNS being set accordingly.      *<p>      * Default is 60'000 (one minute).      * See: http://mongodb.github.io/node-mongodb-native/driver-articles/anintroductionto1_4_and_2_6.html#maxtimems      */
specifier|private
specifier|final
name|long
name|maxQueryTimeMS
init|=
name|Long
operator|.
name|getLong
argument_list|(
literal|"oak.mongo.maxQueryTimeMS"
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * Duration in milliseconds after a mongo query with an additional      * constraint (e.g. _modified) on the NODES collection times out and is      * executed again without holding a {@link TreeNodeDocumentLocks.TreeLock}      * and without updating the cache with data retrieved from MongoDB.      *<p>      * Default is 3000 (three seconds).      */
specifier|private
name|long
name|maxLockedQueryTimeMS
init|=
name|Long
operator|.
name|getLong
argument_list|(
literal|"oak.mongo.maxLockedQueryTimeMS"
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * The number of documents to put into one bulk update.      *<p>      * Default is 30.      */
specifier|private
name|int
name|bulkSize
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.mongo.bulkSize"
argument_list|,
literal|30
argument_list|)
decl_stmt|;
specifier|private
name|String
name|lastReadWriteMode
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
decl_stmt|;
specifier|private
name|DocumentStoreStatsCollector
name|stats
decl_stmt|;
specifier|public
name|MongoDocumentStore
parameter_list|(
name|DB
name|db
parameter_list|,
name|DocumentMK
operator|.
name|Builder
name|builder
parameter_list|)
block|{
name|String
name|version
init|=
name|checkVersion
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|metadata
operator|=
name|ImmutableMap
operator|.
expr|<
name|String
operator|,
name|String
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"mongo"
argument_list|)
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|version
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|stats
operator|=
name|builder
operator|.
name|getDocumentStoreStatsCollector
argument_list|()
expr_stmt|;
name|nodes
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|Collection
operator|.
name|NODES
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|clusterNodes
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|Collection
operator|.
name|CLUSTER_NODES
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|Collection
operator|.
name|SETTINGS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|journal
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|Collection
operator|.
name|JOURNAL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|maxReplicationLagMillis
operator|=
name|builder
operator|.
name|getMaxReplicationLagMillis
argument_list|()
expr_stmt|;
comment|// indexes:
comment|// the _id field is the primary key, so we don't need to define it
name|DBObject
name|index
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
comment|// modification time (descending)
name|index
operator|.
name|put
argument_list|(
name|NodeDocument
operator|.
name|MODIFIED_IN_SECS
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|DBObject
name|options
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"unique"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|createIndex
argument_list|(
name|index
argument_list|,
name|options
argument_list|)
expr_stmt|;
comment|// index on the _bin flag to faster access nodes with binaries for GC
name|index
operator|=
operator|new
name|BasicDBObject
argument_list|()
expr_stmt|;
name|index
operator|.
name|put
argument_list|(
name|NodeDocument
operator|.
name|HAS_BINARY_FLAG
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|options
operator|=
operator|new
name|BasicDBObject
argument_list|()
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"unique"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"sparse"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodes
operator|.
name|createIndex
argument_list|(
name|index
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|BasicDBObject
argument_list|()
expr_stmt|;
name|index
operator|.
name|put
argument_list|(
name|NodeDocument
operator|.
name|DELETED_ONCE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|options
operator|=
operator|new
name|BasicDBObject
argument_list|()
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"unique"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"sparse"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodes
operator|.
name|createIndex
argument_list|(
name|index
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|BasicDBObject
argument_list|()
expr_stmt|;
name|index
operator|.
name|put
argument_list|(
name|NodeDocument
operator|.
name|SD_TYPE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|options
operator|=
operator|new
name|BasicDBObject
argument_list|()
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"unique"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"sparse"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodes
operator|.
name|createIndex
argument_list|(
name|index
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|BasicDBObject
argument_list|()
expr_stmt|;
name|index
operator|.
name|put
argument_list|(
name|JournalEntry
operator|.
name|MODIFIED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|options
operator|=
operator|new
name|BasicDBObject
argument_list|()
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"unique"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|this
operator|.
name|journal
operator|.
name|createIndex
argument_list|(
name|index
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeLocks
operator|=
operator|new
name|TreeNodeDocumentLocks
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodesCache
operator|=
name|builder
operator|.
name|buildNodeDocumentCache
argument_list|(
name|this
argument_list|,
name|nodeLocks
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Configuration maxReplicationLagMillis {}, "
operator|+
literal|"maxDeltaForModTimeIdxSecs {}, disableIndexHint {}, {}"
argument_list|,
name|maxReplicationLagMillis
argument_list|,
name|maxDeltaForModTimeIdxSecs
argument_list|,
name|disableIndexHint
argument_list|,
name|db
operator|.
name|getWriteConcern
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|checkVersion
parameter_list|(
name|DB
name|db
parameter_list|)
block|{
name|String
name|version
init|=
name|db
operator|.
name|command
argument_list|(
literal|"buildInfo"
argument_list|)
operator|.
name|getString
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(\\d+)\\.(\\d+)\\..*"
argument_list|)
operator|.
name|matcher
argument_list|(
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Malformed MongoDB version: "
operator|+
name|version
argument_list|)
throw|;
block|}
name|int
name|major
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|minor
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|major
operator|>
literal|2
condition|)
block|{
return|return
name|version
return|;
block|}
if|if
condition|(
name|minor
operator|<
literal|6
condition|)
block|{
name|String
name|msg
init|=
literal|"MongoDB version 2.6.0 or higher required. "
operator|+
literal|"Currently connected to a MongoDB with version: "
operator|+
name|version
decl_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
name|version
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
comment|// TODO should not be needed, but it seems
comment|// oak-jcr doesn't call dispose()
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CacheInvalidationStats
name|invalidateCache
parameter_list|()
block|{
name|InvalidationResult
name|result
init|=
operator|new
name|InvalidationResult
argument_list|()
decl_stmt|;
for|for
control|(
name|CacheValue
name|key
range|:
name|nodesCache
operator|.
name|keys
argument_list|()
control|)
block|{
name|result
operator|.
name|invalidationCount
operator|++
expr_stmt|;
name|invalidateCache
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|key
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|CacheInvalidationStats
name|invalidateCache
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"invalidateCache: start"
argument_list|)
expr_stmt|;
specifier|final
name|InvalidationResult
name|result
init|=
operator|new
name|InvalidationResult
argument_list|()
decl_stmt|;
name|int
name|size
init|=
literal|0
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|keys
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// read chunks of documents only
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|IN_CLAUSE_BATCH_SIZE
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
name|ids
operator|.
name|size
argument_list|()
operator|<
name|IN_CLAUSE_BATCH_SIZE
condition|)
block|{
specifier|final
name|String
name|id
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodesCache
operator|.
name|getIfPresent
argument_list|(
name|id
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// only add those that we actually do have cached
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|size
operator|+=
name|ids
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"invalidateCache: batch size: {} of total so far {}"
argument_list|,
name|ids
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|modCounts
init|=
name|getModCounts
argument_list|(
name|ids
argument_list|)
decl_stmt|;
name|result
operator|.
name|queryCount
operator|++
expr_stmt|;
name|int
name|invalidated
init|=
name|nodesCache
operator|.
name|invalidateOutdated
argument_list|(
name|modCounts
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|filter
argument_list|(
name|ids
argument_list|,
name|not
argument_list|(
name|in
argument_list|(
name|modCounts
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
argument_list|)
control|)
block|{
name|nodesCache
operator|.
name|invalidate
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|invalidated
operator|++
expr_stmt|;
block|}
name|result
operator|.
name|cacheEntriesProcessedCount
operator|+=
name|ids
operator|.
name|size
argument_list|()
expr_stmt|;
name|result
operator|.
name|invalidationCount
operator|+=
name|invalidated
expr_stmt|;
name|result
operator|.
name|upToDateCount
operator|+=
name|ids
operator|.
name|size
argument_list|()
operator|-
name|invalidated
expr_stmt|;
block|}
name|result
operator|.
name|cacheSize
operator|=
name|size
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"invalidateCache: end. total: {}"
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|void
name|invalidateCache
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
condition|)
block|{
name|nodesCache
operator|.
name|invalidate
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|find
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|)
block|{
specifier|final
name|long
name|start
init|=
name|PERFLOG
operator|.
name|start
argument_list|()
decl_stmt|;
specifier|final
name|T
name|result
init|=
name|find
argument_list|(
name|collection
argument_list|,
name|key
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|PERFLOG
operator|.
name|end
argument_list|(
name|start
argument_list|,
literal|1
argument_list|,
literal|"find: preferCached=true, key={}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|find
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
specifier|final
name|String
name|key
parameter_list|,
name|int
name|maxCacheAge
parameter_list|)
block|{
specifier|final
name|long
name|start
init|=
name|PERFLOG
operator|.
name|start
argument_list|()
decl_stmt|;
specifier|final
name|T
name|result
init|=
name|find
argument_list|(
name|collection
argument_list|,
name|key
argument_list|,
literal|false
argument_list|,
name|maxCacheAge
argument_list|)
decl_stmt|;
name|PERFLOG
operator|.
name|end
argument_list|(
name|start
argument_list|,
literal|1
argument_list|,
literal|"find: preferCached=false, key={}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|find
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
specifier|final
name|String
name|key
parameter_list|,
name|boolean
name|preferCached
parameter_list|,
specifier|final
name|int
name|maxCacheAge
parameter_list|)
block|{
if|if
condition|(
name|collection
operator|!=
name|Collection
operator|.
name|NODES
condition|)
block|{
return|return
name|findUncachedWithRetry
argument_list|(
name|collection
argument_list|,
name|key
argument_list|,
name|DocumentReadPreference
operator|.
name|PRIMARY
argument_list|,
literal|2
argument_list|)
return|;
block|}
name|NodeDocument
name|doc
decl_stmt|;
if|if
condition|(
name|maxCacheAge
operator|>
literal|0
operator|||
name|preferCached
condition|)
block|{
comment|// first try without lock
name|doc
operator|=
name|nodesCache
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|preferCached
operator|||
name|getTime
argument_list|()
operator|-
name|doc
operator|.
name|getCreated
argument_list|()
operator|<
name|maxCacheAge
condition|)
block|{
name|stats
operator|.
name|doneFindCached
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
name|NodeDocument
operator|.
name|NULL
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|T
operator|)
name|doc
return|;
block|}
block|}
block|}
name|Throwable
name|t
decl_stmt|;
try|try
block|{
name|Lock
name|lock
init|=
name|nodeLocks
operator|.
name|acquire
argument_list|(
name|key
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|maxCacheAge
operator|>
literal|0
operator|||
name|preferCached
condition|)
block|{
comment|// try again some other thread may have populated
comment|// the cache by now
name|doc
operator|=
name|nodesCache
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|preferCached
operator|||
name|getTime
argument_list|()
operator|-
name|doc
operator|.
name|getCreated
argument_list|()
operator|<
name|maxCacheAge
condition|)
block|{
name|stats
operator|.
name|doneFindCached
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
name|NodeDocument
operator|.
name|NULL
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|T
operator|)
name|doc
return|;
block|}
block|}
block|}
specifier|final
name|NodeDocument
name|d
init|=
operator|(
name|NodeDocument
operator|)
name|findUncachedWithRetry
argument_list|(
name|collection
argument_list|,
name|key
argument_list|,
name|getReadPreference
argument_list|(
name|maxCacheAge
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|invalidateCache
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|doc
operator|=
name|nodesCache
operator|.
name|get
argument_list|(
name|key
argument_list|,
operator|new
name|Callable
argument_list|<
name|NodeDocument
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NodeDocument
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|d
operator|==
literal|null
condition|?
name|NodeDocument
operator|.
name|NULL
else|:
name|d
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|doc
operator|==
name|NodeDocument
operator|.
name|NULL
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|(
name|T
operator|)
name|doc
return|;
block|}
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|e
parameter_list|)
block|{
name|t
operator|=
name|e
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|t
operator|=
name|e
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|t
operator|=
name|e
expr_stmt|;
block|}
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"Failed to load document with "
operator|+
name|key
argument_list|,
name|t
argument_list|)
throw|;
block|}
comment|/**      * Finds a document and performs a number of retries if the read fails with      * an exception.      *      * @param collection the collection to read from.      * @param key the key of the document to find.      * @param docReadPref the read preference.      * @param retries the number of retries. Must not be negative.      * @param<T> the document type of the given collection.      * @return the document or {@code null} if the document doesn't exist.      */
annotation|@
name|CheckForNull
specifier|private
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|findUncachedWithRetry
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|,
name|DocumentReadPreference
name|docReadPref
parameter_list|,
name|int
name|retries
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|retries
operator|>=
literal|0
argument_list|,
literal|"retries must not be negative"
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"0:/"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"root node"
argument_list|)
expr_stmt|;
block|}
name|int
name|numAttempts
init|=
name|retries
operator|+
literal|1
decl_stmt|;
name|MongoException
name|ex
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAttempts
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Retrying read of "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|findUncached
argument_list|(
name|collection
argument_list|,
name|key
argument_list|,
name|docReadPref
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MongoException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
else|else
block|{
comment|// impossible to get here
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|CheckForNull
specifier|protected
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|findUncached
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|,
name|DocumentReadPreference
name|docReadPref
parameter_list|)
block|{
name|log
argument_list|(
literal|"findUncached"
argument_list|,
name|key
argument_list|,
name|docReadPref
argument_list|)
expr_stmt|;
name|DBCollection
name|dbCollection
init|=
name|getDBCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
specifier|final
name|Stopwatch
name|watch
init|=
name|startWatch
argument_list|()
decl_stmt|;
name|boolean
name|isSlaveOk
init|=
literal|false
decl_stmt|;
name|boolean
name|docFound
init|=
literal|true
decl_stmt|;
try|try
block|{
name|ReadPreference
name|readPreference
init|=
name|getMongoReadPreference
argument_list|(
name|collection
argument_list|,
name|Utils
operator|.
name|getParentId
argument_list|(
name|key
argument_list|)
argument_list|,
name|docReadPref
argument_list|)
decl_stmt|;
if|if
condition|(
name|readPreference
operator|.
name|isSlaveOk
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Routing call to secondary for fetching [{}]"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|isSlaveOk
operator|=
literal|true
expr_stmt|;
block|}
name|DBObject
name|obj
init|=
name|dbCollection
operator|.
name|findOne
argument_list|(
name|getByKeyQuery
argument_list|(
name|key
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|readPreference
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
operator|&&
name|readPreference
operator|.
name|isSlaveOk
argument_list|()
condition|)
block|{
comment|//In case secondary read preference is used and node is not found
comment|//then check with primary again as it might happen that node document has not been
comment|//replicated. This is required for case like SplitDocument where the SplitDoc is fetched with
comment|//maxCacheAge == Integer.MAX_VALUE which results in readPreference of secondary.
comment|//In such a case we know that document with such an id must exist
comment|//but possibly dut to replication lag it has not reached to secondary. So in that case read again
comment|//from primary
name|obj
operator|=
name|dbCollection
operator|.
name|findOne
argument_list|(
name|getByKeyQuery
argument_list|(
name|key
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|ReadPreference
operator|.
name|primary
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
name|docFound
operator|=
literal|false
expr_stmt|;
return|return
literal|null
return|;
block|}
name|T
name|doc
init|=
name|convertFromDBObject
argument_list|(
name|collection
argument_list|,
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|seal
argument_list|()
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
finally|finally
block|{
name|stats
operator|.
name|doneFindUncached
argument_list|(
name|watch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|,
name|collection
argument_list|,
name|key
argument_list|,
name|docFound
argument_list|,
name|isSlaveOk
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|query
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|fromKey
parameter_list|,
name|String
name|toKey
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
return|return
name|query
argument_list|(
name|collection
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|limit
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|query
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|fromKey
parameter_list|,
name|String
name|toKey
parameter_list|,
name|String
name|indexedProperty
parameter_list|,
name|long
name|startValue
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|boolean
name|withLock
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
operator|&&
name|indexedProperty
operator|!=
literal|null
condition|)
block|{
name|long
name|maxQueryTime
decl_stmt|;
if|if
condition|(
name|maxQueryTimeMS
operator|>
literal|0
condition|)
block|{
name|maxQueryTime
operator|=
name|Math
operator|.
name|min
argument_list|(
name|maxQueryTimeMS
argument_list|,
name|maxLockedQueryTimeMS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|maxQueryTime
operator|=
name|maxLockedQueryTimeMS
expr_stmt|;
block|}
try|try
block|{
return|return
name|queryInternal
argument_list|(
name|collection
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|,
name|indexedProperty
argument_list|,
name|startValue
argument_list|,
name|limit
argument_list|,
name|maxQueryTime
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MongoExecutionTimeoutException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"query timed out after {} milliseconds and will be retried without lock {}"
argument_list|,
name|maxQueryTime
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|fromKey
argument_list|,
name|toKey
argument_list|,
name|indexedProperty
argument_list|,
name|startValue
argument_list|,
name|limit
argument_list|)
argument_list|)
expr_stmt|;
name|withLock
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|queryInternal
argument_list|(
name|collection
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|,
name|indexedProperty
argument_list|,
name|startValue
argument_list|,
name|limit
argument_list|,
name|maxQueryTimeMS
argument_list|,
name|withLock
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
argument_list|<
name|T
extends|extends
name|Document
argument_list|>
name|List
argument_list|<
name|T
argument_list|>
name|queryInternal
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|fromKey
parameter_list|,
name|String
name|toKey
parameter_list|,
name|String
name|indexedProperty
parameter_list|,
name|long
name|startValue
parameter_list|,
name|int
name|limit
parameter_list|,
name|long
name|maxQueryTime
parameter_list|,
name|boolean
name|withLock
parameter_list|)
block|{
name|log
argument_list|(
literal|"query"
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|,
name|indexedProperty
argument_list|,
name|startValue
argument_list|,
name|limit
argument_list|)
expr_stmt|;
name|DBCollection
name|dbCollection
init|=
name|getDBCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|QueryBuilder
name|queryBuilder
init|=
name|QueryBuilder
operator|.
name|start
argument_list|(
name|Document
operator|.
name|ID
argument_list|)
decl_stmt|;
name|queryBuilder
operator|.
name|greaterThan
argument_list|(
name|fromKey
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|lessThan
argument_list|(
name|toKey
argument_list|)
expr_stmt|;
name|DBObject
name|hint
init|=
operator|new
name|BasicDBObject
argument_list|(
name|NodeDocument
operator|.
name|ID
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexedProperty
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|NodeDocument
operator|.
name|DELETED_ONCE
operator|.
name|equals
argument_list|(
name|indexedProperty
argument_list|)
condition|)
block|{
if|if
condition|(
name|startValue
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"unsupported value for property "
operator|+
name|NodeDocument
operator|.
name|DELETED_ONCE
argument_list|)
throw|;
block|}
name|queryBuilder
operator|.
name|and
argument_list|(
name|indexedProperty
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|is
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queryBuilder
operator|.
name|and
argument_list|(
name|indexedProperty
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|greaterThanEquals
argument_list|(
name|startValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|NodeDocument
operator|.
name|MODIFIED_IN_SECS
operator|.
name|equals
argument_list|(
name|indexedProperty
argument_list|)
operator|&&
name|canUseModifiedTimeIdx
argument_list|(
name|startValue
argument_list|)
condition|)
block|{
name|hint
operator|=
operator|new
name|BasicDBObject
argument_list|(
name|NodeDocument
operator|.
name|MODIFIED_IN_SECS
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|DBObject
name|query
init|=
name|queryBuilder
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|parentId
init|=
name|Utils
operator|.
name|getParentIdFromLowerLimit
argument_list|(
name|fromKey
argument_list|)
decl_stmt|;
name|long
name|lockTime
init|=
operator|-
literal|1
decl_stmt|;
specifier|final
name|Stopwatch
name|watch
init|=
name|startWatch
argument_list|()
decl_stmt|;
name|Lock
name|lock
init|=
name|withLock
condition|?
name|nodeLocks
operator|.
name|acquireExclusive
argument_list|(
name|parentId
operator|!=
literal|null
condition|?
name|parentId
else|:
literal|""
argument_list|)
else|:
literal|null
decl_stmt|;
name|boolean
name|isSlaveOk
init|=
literal|false
decl_stmt|;
name|int
name|resultSize
init|=
literal|0
decl_stmt|;
try|try
block|{
name|lockTime
operator|=
name|withLock
condition|?
name|watch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
else|:
operator|-
literal|1
expr_stmt|;
name|DBCursor
name|cursor
init|=
name|dbCollection
operator|.
name|find
argument_list|(
name|query
argument_list|)
operator|.
name|sort
argument_list|(
name|BY_ID_ASC
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|disableIndexHint
condition|)
block|{
name|cursor
operator|.
name|hint
argument_list|(
name|hint
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxQueryTime
operator|>
literal|0
condition|)
block|{
comment|// OAK-2614: set maxTime if maxQueryTimeMS> 0
name|cursor
operator|.
name|maxTime
argument_list|(
name|maxQueryTime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
name|ReadPreference
name|readPreference
init|=
name|getMongoReadPreference
argument_list|(
name|collection
argument_list|,
name|parentId
argument_list|,
name|getDefaultReadPreference
argument_list|(
name|collection
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|readPreference
operator|.
name|isSlaveOk
argument_list|()
condition|)
block|{
name|isSlaveOk
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Routing call to secondary for fetching children from [{}] to [{}]"
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|)
expr_stmt|;
block|}
name|cursor
operator|.
name|setReadPreference
argument_list|(
name|readPreference
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
try|try
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
operator|&&
name|cursor
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DBObject
name|o
init|=
name|cursor
operator|.
name|next
argument_list|()
decl_stmt|;
name|T
name|doc
init|=
name|convertFromDBObject
argument_list|(
name|collection
argument_list|,
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
operator|&&
name|doc
operator|!=
literal|null
operator|&&
name|lock
operator|!=
literal|null
condition|)
block|{
name|nodesCache
operator|.
name|putIfNewer
argument_list|(
operator|(
name|NodeDocument
operator|)
name|doc
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|resultSize
operator|=
name|list
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|cursor
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|stats
operator|.
name|doneQuery
argument_list|(
name|watch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|,
name|collection
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|,
name|indexedProperty
operator|!=
literal|null
argument_list|,
name|resultSize
argument_list|,
name|lockTime
argument_list|,
name|isSlaveOk
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|canUseModifiedTimeIdx
parameter_list|(
name|long
name|modifiedTimeInSecs
parameter_list|)
block|{
if|if
condition|(
name|maxDeltaForModTimeIdxSecs
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|(
name|NodeDocument
operator|.
name|getModifiedInSecs
argument_list|(
name|getTime
argument_list|()
argument_list|)
operator|-
name|modifiedTimeInSecs
operator|)
operator|<=
name|maxDeltaForModTimeIdxSecs
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|void
name|remove
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|log
argument_list|(
literal|"remove"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|DBCollection
name|dbCollection
init|=
name|getDBCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|PERFLOG
operator|.
name|start
argument_list|()
decl_stmt|;
try|try
block|{
name|dbCollection
operator|.
name|remove
argument_list|(
name|getByKeyQuery
argument_list|(
name|key
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|DocumentStoreException
operator|.
name|convert
argument_list|(
name|e
argument_list|,
literal|"Remove failed for "
operator|+
name|key
argument_list|)
throw|;
block|}
finally|finally
block|{
name|invalidateCache
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|PERFLOG
operator|.
name|end
argument_list|(
name|start
argument_list|,
literal|1
argument_list|,
literal|"remove key={}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|void
name|remove
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
name|log
argument_list|(
literal|"remove"
argument_list|,
name|keys
argument_list|)
expr_stmt|;
name|DBCollection
name|dbCollection
init|=
name|getDBCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|PERFLOG
operator|.
name|start
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|keyBatch
range|:
name|Lists
operator|.
name|partition
argument_list|(
name|keys
argument_list|,
name|IN_CLAUSE_BATCH_SIZE
argument_list|)
control|)
block|{
name|DBObject
name|query
init|=
name|QueryBuilder
operator|.
name|start
argument_list|(
name|Document
operator|.
name|ID
argument_list|)
operator|.
name|in
argument_list|(
name|keyBatch
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|dbCollection
operator|.
name|remove
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|DocumentStoreException
operator|.
name|convert
argument_list|(
name|e
argument_list|,
literal|"Remove failed for "
operator|+
name|keyBatch
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
condition|)
block|{
for|for
control|(
name|String
name|key
range|:
name|keyBatch
control|)
block|{
name|invalidateCache
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
finally|finally
block|{
name|PERFLOG
operator|.
name|end
argument_list|(
name|start
argument_list|,
literal|1
argument_list|,
literal|"remove keys={}"
argument_list|,
name|keys
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|int
name|remove
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Key
argument_list|,
name|Condition
argument_list|>
argument_list|>
name|toRemove
parameter_list|)
block|{
name|log
argument_list|(
literal|"remove"
argument_list|,
name|toRemove
argument_list|)
expr_stmt|;
name|int
name|num
init|=
literal|0
decl_stmt|;
name|DBCollection
name|dbCollection
init|=
name|getDBCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|PERFLOG
operator|.
name|start
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|batchIds
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DBObject
argument_list|>
name|batch
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Key
argument_list|,
name|Condition
argument_list|>
argument_list|>
argument_list|>
name|it
init|=
name|toRemove
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Key
argument_list|,
name|Condition
argument_list|>
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|QueryBuilder
name|query
init|=
name|createQueryForUpdate
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|batchIds
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|batch
operator|.
name|add
argument_list|(
name|query
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
operator|||
name|batch
operator|.
name|size
argument_list|()
operator|==
name|IN_CLAUSE_BATCH_SIZE
condition|)
block|{
name|DBObject
name|q
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|q
operator|.
name|put
argument_list|(
name|QueryOperators
operator|.
name|OR
argument_list|,
name|batch
argument_list|)
expr_stmt|;
try|try
block|{
name|num
operator|+=
name|dbCollection
operator|.
name|remove
argument_list|(
name|q
argument_list|)
operator|.
name|getN
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|DocumentStoreException
operator|.
name|convert
argument_list|(
name|e
argument_list|,
literal|"Remove failed for "
operator|+
name|batch
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
condition|)
block|{
name|invalidateCache
argument_list|(
name|batchIds
argument_list|)
expr_stmt|;
block|}
block|}
name|batchIds
operator|.
name|clear
argument_list|()
expr_stmt|;
name|batch
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|PERFLOG
operator|.
name|end
argument_list|(
name|start
argument_list|,
literal|1
argument_list|,
literal|"remove keys={}"
argument_list|,
name|toRemove
argument_list|)
expr_stmt|;
block|}
return|return
name|num
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|CheckForNull
specifier|private
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|findAndModify
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|UpdateOp
name|updateOp
parameter_list|,
name|boolean
name|upsert
parameter_list|,
name|boolean
name|checkConditions
parameter_list|)
block|{
name|DBCollection
name|dbCollection
init|=
name|getDBCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
comment|// make sure we don't modify the original updateOp
name|updateOp
operator|=
name|updateOp
operator|.
name|copy
argument_list|()
expr_stmt|;
name|DBObject
name|update
init|=
name|createUpdate
argument_list|(
name|updateOp
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Lock
name|lock
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
condition|)
block|{
name|lock
operator|=
name|nodeLocks
operator|.
name|acquire
argument_list|(
name|updateOp
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Stopwatch
name|watch
init|=
name|startWatch
argument_list|()
decl_stmt|;
name|boolean
name|newEntry
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// get modCount of cached document
name|Long
name|modCount
init|=
literal|null
decl_stmt|;
name|T
name|cachedDoc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
condition|)
block|{
name|cachedDoc
operator|=
operator|(
name|T
operator|)
name|nodesCache
operator|.
name|getIfPresent
argument_list|(
name|updateOp
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cachedDoc
operator|!=
literal|null
condition|)
block|{
name|modCount
operator|=
name|cachedDoc
operator|.
name|getModCount
argument_list|()
expr_stmt|;
block|}
block|}
comment|// perform a conditional update with limited result
comment|// if we have a matching modCount
if|if
condition|(
name|modCount
operator|!=
literal|null
condition|)
block|{
name|QueryBuilder
name|query
init|=
name|createQueryForUpdate
argument_list|(
name|updateOp
operator|.
name|getId
argument_list|()
argument_list|,
name|updateOp
operator|.
name|getConditions
argument_list|()
argument_list|)
decl_stmt|;
name|query
operator|.
name|and
argument_list|(
name|Document
operator|.
name|MOD_COUNT
argument_list|)
operator|.
name|is
argument_list|(
name|modCount
argument_list|)
expr_stmt|;
name|WriteResult
name|result
init|=
name|dbCollection
operator|.
name|update
argument_list|(
name|query
operator|.
name|get
argument_list|()
argument_list|,
name|update
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getN
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// success, update cached document
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
condition|)
block|{
name|NodeDocument
name|newDoc
init|=
operator|(
name|NodeDocument
operator|)
name|applyChanges
argument_list|(
name|collection
argument_list|,
name|cachedDoc
argument_list|,
name|updateOp
argument_list|)
decl_stmt|;
name|nodesCache
operator|.
name|put
argument_list|(
name|newDoc
argument_list|)
expr_stmt|;
block|}
comment|// return previously cached document
return|return
name|cachedDoc
return|;
block|}
block|}
comment|// conditional update failed or not possible
comment|// perform operation and get complete document
name|QueryBuilder
name|query
init|=
name|createQueryForUpdate
argument_list|(
name|updateOp
operator|.
name|getId
argument_list|()
argument_list|,
name|updateOp
operator|.
name|getConditions
argument_list|()
argument_list|)
decl_stmt|;
name|DBObject
name|oldNode
init|=
name|dbCollection
operator|.
name|findAndModify
argument_list|(
name|query
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
comment|/*sort*/
argument_list|,
literal|false
comment|/*remove*/
argument_list|,
name|update
argument_list|,
literal|false
comment|/*returnNew*/
argument_list|,
name|upsert
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldNode
operator|==
literal|null
condition|)
block|{
name|newEntry
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|checkConditions
operator|&&
name|oldNode
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|T
name|oldDoc
init|=
name|convertFromDBObject
argument_list|(
name|collection
argument_list|,
name|oldNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDoc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
condition|)
block|{
name|NodeDocument
name|newDoc
init|=
operator|(
name|NodeDocument
operator|)
name|applyChanges
argument_list|(
name|collection
argument_list|,
name|oldDoc
argument_list|,
name|updateOp
argument_list|)
decl_stmt|;
name|nodesCache
operator|.
name|put
argument_list|(
name|newDoc
argument_list|)
expr_stmt|;
block|}
name|oldDoc
operator|.
name|seal
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|upsert
condition|)
block|{
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
condition|)
block|{
name|NodeDocument
name|doc
init|=
operator|(
name|NodeDocument
operator|)
name|collection
operator|.
name|newDocument
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|UpdateUtils
operator|.
name|applyChanges
argument_list|(
name|doc
argument_list|,
name|updateOp
argument_list|)
expr_stmt|;
name|nodesCache
operator|.
name|putIfAbsent
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// updateOp without conditions and not an upsert
comment|// this means the document does not exist
block|}
return|return
name|oldDoc
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|DocumentStoreException
operator|.
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|stats
operator|.
name|doneFindAndModify
argument_list|(
name|watch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|,
name|collection
argument_list|,
name|updateOp
operator|.
name|getId
argument_list|()
argument_list|,
name|newEntry
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|createOrUpdate
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|UpdateOp
name|update
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
name|log
argument_list|(
literal|"createOrUpdate"
argument_list|,
name|update
argument_list|)
expr_stmt|;
name|UpdateUtils
operator|.
name|assertUnconditional
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|T
name|doc
init|=
name|findAndModify
argument_list|(
name|collection
argument_list|,
name|update
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|log
argument_list|(
literal|"createOrUpdate returns "
argument_list|,
name|doc
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
comment|/**      * Try to apply all the {@link UpdateOp}s with at least MongoDB requests as      * possible. The return value is the list of the old documents (before      * applying changes). The mechanism is as follows:      *      *<ol>      *<li>For each UpdateOp try to read the assigned document from the cache.      *     Add them to {@code oldDocs}.</li>      *<li>Prepare a list of all UpdateOps that doesn't have their documents and      *     read them in one find() call. Add results to {@code oldDocs}.</li>      *<li>Prepare a bulk update. For each remaining UpdateOp add following      *     operation:      *<ul>      *<li>Find document with the same id and the same mod_count as in the      *       {@code oldDocs}.</li>      *<li>Apply changes from the UpdateOps.</li>      *</ul>      *</li>      *<li>Execute the bulk update.</li>      *</ol>      *      * If some other process modifies the target documents between points 2 and      * 3, the mod_count will be increased as well and the bulk update will fail      * for the concurrently modified docs. The method will then remove the      * failed documents from the {@code oldDocs} and restart the process from      * point 2. It will stop after 3rd iteration.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|createOrUpdate
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|updateOps
parameter_list|)
block|{
name|log
argument_list|(
literal|"createOrUpdate"
argument_list|,
name|updateOps
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|UpdateOp
argument_list|>
name|operationsToCover
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|UpdateOp
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|duplicates
init|=
operator|new
name|ArrayList
argument_list|<
name|UpdateOp
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|UpdateOp
argument_list|,
name|T
argument_list|>
name|results
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|UpdateOp
argument_list|,
name|T
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|long
name|start
init|=
name|PERFLOG
operator|.
name|start
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|UpdateOp
name|updateOp
range|:
name|updateOps
control|)
block|{
name|UpdateUtils
operator|.
name|assertUnconditional
argument_list|(
name|updateOp
argument_list|)
expr_stmt|;
name|UpdateOp
name|clone
init|=
name|updateOp
operator|.
name|copy
argument_list|()
decl_stmt|;
if|if
condition|(
name|operationsToCover
operator|.
name|containsKey
argument_list|(
name|updateOp
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|duplicates
operator|.
name|add
argument_list|(
name|clone
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|operationsToCover
operator|.
name|put
argument_list|(
name|updateOp
operator|.
name|getId
argument_list|()
argument_list|,
name|clone
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|put
argument_list|(
name|clone
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|oldDocs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
condition|)
block|{
name|oldDocs
operator|.
name|putAll
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
operator|)
name|getCachedNodes
argument_list|(
name|operationsToCover
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|operationsToCover
operator|.
name|size
argument_list|()
operator|<=
literal|2
condition|)
block|{
comment|// bulkUpdate() method invokes Mongo twice, so sending 2 updates
comment|// in bulk mode wouldn't result in any performance gain
break|break;
block|}
for|for
control|(
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|partition
range|:
name|Lists
operator|.
name|partition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|operationsToCover
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
name|bulkSize
argument_list|)
control|)
block|{
name|Map
argument_list|<
name|UpdateOp
argument_list|,
name|T
argument_list|>
name|successfulUpdates
init|=
name|bulkUpdate
argument_list|(
name|collection
argument_list|,
name|partition
argument_list|,
name|oldDocs
argument_list|)
decl_stmt|;
name|results
operator|.
name|putAll
argument_list|(
name|successfulUpdates
argument_list|)
expr_stmt|;
name|operationsToCover
operator|.
name|values
argument_list|()
operator|.
name|removeAll
argument_list|(
name|successfulUpdates
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if there are some changes left, we'll apply them one after another
name|Iterator
argument_list|<
name|UpdateOp
argument_list|>
name|it
init|=
name|Iterators
operator|.
name|concat
argument_list|(
name|operationsToCover
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
name|duplicates
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|UpdateOp
name|op
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|T
name|oldDoc
init|=
name|createOrUpdate
argument_list|(
name|collection
argument_list|,
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDoc
operator|!=
literal|null
condition|)
block|{
name|results
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|oldDoc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|PERFLOG
operator|.
name|end
argument_list|(
name|start
argument_list|,
literal|1
argument_list|,
literal|"createOrUpdate {}"
argument_list|,
name|updateOps
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|T
argument_list|>
name|resultList
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
name|results
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|log
argument_list|(
literal|"createOrUpdate returns"
argument_list|,
name|resultList
argument_list|)
expr_stmt|;
return|return
name|resultList
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|NodeDocument
argument_list|>
name|getCachedNodes
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|NodeDocument
argument_list|>
name|nodes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|NodeDocument
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|NodeDocument
name|cached
init|=
name|nodesCache
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|cached
operator|!=
literal|null
operator|&&
name|cached
operator|!=
name|NodeDocument
operator|.
name|NULL
condition|)
block|{
name|nodes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|cached
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nodes
return|;
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|Map
argument_list|<
name|UpdateOp
argument_list|,
name|T
argument_list|>
name|bulkUpdate
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|updateOperations
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|oldDocs
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|UpdateOp
argument_list|>
name|bulkOperations
init|=
name|createMap
argument_list|(
name|updateOperations
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|lackingDocs
init|=
name|difference
argument_list|(
name|bulkOperations
operator|.
name|keySet
argument_list|()
argument_list|,
name|oldDocs
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|oldDocs
operator|.
name|putAll
argument_list|(
name|findDocuments
argument_list|(
name|collection
argument_list|,
name|lackingDocs
argument_list|)
argument_list|)
expr_stmt|;
name|Lock
name|lock
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
condition|)
block|{
name|lock
operator|=
name|nodeLocks
operator|.
name|acquire
argument_list|(
name|bulkOperations
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|BulkUpdateResult
name|bulkResult
init|=
name|sendBulkUpdate
argument_list|(
name|collection
argument_list|,
name|bulkOperations
operator|.
name|values
argument_list|()
argument_list|,
name|oldDocs
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
condition|)
block|{
for|for
control|(
name|UpdateOp
name|op
range|:
name|filterKeys
argument_list|(
name|bulkOperations
argument_list|,
name|in
argument_list|(
name|bulkResult
operator|.
name|upserts
argument_list|)
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
name|NodeDocument
name|doc
init|=
name|Collection
operator|.
name|NODES
operator|.
name|newDocument
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|UpdateUtils
operator|.
name|applyChanges
argument_list|(
name|doc
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|nodesCache
operator|.
name|put
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|key
range|:
name|difference
argument_list|(
name|bulkOperations
operator|.
name|keySet
argument_list|()
argument_list|,
name|bulkResult
operator|.
name|failedUpdates
argument_list|)
control|)
block|{
name|T
name|oldDoc
init|=
name|oldDocs
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDoc
operator|!=
literal|null
condition|)
block|{
name|NodeDocument
name|newDoc
init|=
operator|(
name|NodeDocument
operator|)
name|applyChanges
argument_list|(
name|collection
argument_list|,
name|oldDoc
argument_list|,
name|bulkOperations
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|nodesCache
operator|.
name|put
argument_list|(
name|newDoc
argument_list|)
expr_stmt|;
name|oldDoc
operator|.
name|seal
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|oldDocs
operator|.
name|keySet
argument_list|()
operator|.
name|removeAll
argument_list|(
name|bulkResult
operator|.
name|failedUpdates
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|UpdateOp
argument_list|,
name|T
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|UpdateOp
argument_list|,
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|UpdateOp
argument_list|>
name|entry
range|:
name|bulkOperations
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|bulkResult
operator|.
name|failedUpdates
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|bulkResult
operator|.
name|upserts
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|oldDocs
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|UpdateOp
argument_list|>
name|createMap
parameter_list|(
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|updateOps
parameter_list|)
block|{
return|return
name|Maps
operator|.
name|uniqueIndex
argument_list|(
name|updateOps
argument_list|,
operator|new
name|Function
argument_list|<
name|UpdateOp
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|UpdateOp
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getId
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|findDocuments
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|docs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|keys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DBObject
index|[]
name|conditions
init|=
operator|new
name|DBObject
index|[
name|keys
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|conditions
index|[
name|i
operator|++
index|]
operator|=
name|getByKeyQuery
argument_list|(
name|key
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|QueryBuilder
name|builder
init|=
operator|new
name|QueryBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|or
argument_list|(
name|conditions
argument_list|)
expr_stmt|;
name|DBCursor
name|cursor
init|=
name|getDBCollection
argument_list|(
name|collection
argument_list|)
operator|.
name|find
argument_list|(
name|builder
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|cursor
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|T
name|foundDoc
init|=
name|convertFromDBObject
argument_list|(
name|collection
argument_list|,
name|cursor
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|docs
operator|.
name|put
argument_list|(
name|foundDoc
operator|.
name|getId
argument_list|()
argument_list|,
name|foundDoc
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|docs
return|;
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|BulkUpdateResult
name|sendBulkUpdate
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|java
operator|.
name|util
operator|.
name|Collection
argument_list|<
name|UpdateOp
argument_list|>
name|updateOps
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|oldDocs
parameter_list|)
block|{
name|DBCollection
name|dbCollection
init|=
name|getDBCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|BulkWriteOperation
name|bulk
init|=
name|dbCollection
operator|.
name|initializeUnorderedBulkOperation
argument_list|()
decl_stmt|;
name|String
index|[]
name|bulkIds
init|=
operator|new
name|String
index|[
name|updateOps
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|UpdateOp
name|updateOp
range|:
name|updateOps
control|)
block|{
name|String
name|id
init|=
name|updateOp
operator|.
name|getId
argument_list|()
decl_stmt|;
name|QueryBuilder
name|query
init|=
name|createQueryForUpdate
argument_list|(
name|id
argument_list|,
name|updateOp
operator|.
name|getConditions
argument_list|()
argument_list|)
decl_stmt|;
name|T
name|oldDoc
init|=
name|oldDocs
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|DBObject
name|update
decl_stmt|;
if|if
condition|(
name|oldDoc
operator|==
literal|null
condition|)
block|{
name|query
operator|.
name|not
argument_list|()
operator|.
name|exists
argument_list|(
name|Document
operator|.
name|MOD_COUNT
argument_list|)
expr_stmt|;
name|update
operator|=
name|createUpdate
argument_list|(
name|updateOp
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|and
argument_list|(
name|Document
operator|.
name|MOD_COUNT
argument_list|)
operator|.
name|is
argument_list|(
name|oldDoc
operator|.
name|getModCount
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|=
name|createUpdate
argument_list|(
name|updateOp
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|bulk
operator|.
name|find
argument_list|(
name|query
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|upsert
argument_list|()
operator|.
name|updateOne
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|bulkIds
index|[
name|i
operator|++
index|]
operator|=
name|id
expr_stmt|;
block|}
name|BulkWriteResult
name|bulkResult
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|failedUpdates
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|upserts
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|bulkResult
operator|=
name|bulk
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BulkWriteException
name|e
parameter_list|)
block|{
name|bulkResult
operator|=
name|e
operator|.
name|getWriteResult
argument_list|()
expr_stmt|;
for|for
control|(
name|BulkWriteError
name|err
range|:
name|e
operator|.
name|getWriteErrors
argument_list|()
control|)
block|{
name|failedUpdates
operator|.
name|add
argument_list|(
name|bulkIds
index|[
name|err
operator|.
name|getIndex
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|BulkWriteUpsert
name|upsert
range|:
name|bulkResult
operator|.
name|getUpserts
argument_list|()
control|)
block|{
name|upserts
operator|.
name|add
argument_list|(
name|bulkIds
index|[
name|upsert
operator|.
name|getIndex
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BulkUpdateResult
argument_list|(
name|failedUpdates
argument_list|,
name|upserts
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|findAndUpdate
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|UpdateOp
name|update
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
name|log
argument_list|(
literal|"findAndUpdate"
argument_list|,
name|update
argument_list|)
expr_stmt|;
name|T
name|doc
init|=
name|findAndModify
argument_list|(
name|collection
argument_list|,
name|update
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|log
argument_list|(
literal|"findAndUpdate returns "
argument_list|,
name|doc
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|boolean
name|create
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|updateOps
parameter_list|)
block|{
name|log
argument_list|(
literal|"create"
argument_list|,
name|updateOps
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
name|DBObject
index|[]
name|inserts
init|=
operator|new
name|DBObject
index|[
name|updateOps
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|updateOps
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|updateOps
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|inserts
index|[
name|i
index|]
operator|=
operator|new
name|BasicDBObject
argument_list|()
expr_stmt|;
name|UpdateOp
name|update
init|=
name|updateOps
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|UpdateUtils
operator|.
name|assertUnconditional
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|T
name|target
init|=
name|collection
operator|.
name|newDocument
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|UpdateUtils
operator|.
name|applyChanges
argument_list|(
name|target
argument_list|,
name|update
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|updateOps
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Key
argument_list|,
name|Operation
argument_list|>
name|entry
range|:
name|update
operator|.
name|getChanges
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Key
name|k
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Operation
name|op
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|op
operator|.
name|type
condition|)
block|{
case|case
name|SET
case|:
case|case
name|MAX
case|:
case|case
name|INCREMENT
case|:
block|{
name|inserts
index|[
name|i
index|]
operator|.
name|put
argument_list|(
name|k
operator|.
name|toString
argument_list|()
argument_list|,
name|op
operator|.
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SET_MAP_ENTRY
case|:
block|{
name|Revision
name|r
init|=
name|k
operator|.
name|getRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"SET_MAP_ENTRY must not have null revision"
argument_list|)
throw|;
block|}
name|DBObject
name|value
init|=
operator|(
name|DBObject
operator|)
name|inserts
index|[
name|i
index|]
operator|.
name|get
argument_list|(
name|k
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
operator|new
name|RevisionEntry
argument_list|(
name|r
argument_list|,
name|op
operator|.
name|value
argument_list|)
expr_stmt|;
name|inserts
index|[
name|i
index|]
operator|.
name|put
argument_list|(
name|k
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|String
name|key
init|=
name|value
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|value
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|value
operator|=
operator|new
name|BasicDBObject
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|value
operator|.
name|put
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|,
name|op
operator|.
name|value
argument_list|)
expr_stmt|;
name|inserts
index|[
name|i
index|]
operator|.
name|put
argument_list|(
name|k
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|.
name|put
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|,
name|op
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|REMOVE_MAP_ENTRY
case|:
comment|// nothing to do for new entries
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|inserts
index|[
name|i
index|]
operator|.
name|containsField
argument_list|(
name|Document
operator|.
name|MOD_COUNT
argument_list|)
condition|)
block|{
name|inserts
index|[
name|i
index|]
operator|.
name|put
argument_list|(
name|Document
operator|.
name|MOD_COUNT
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|target
operator|.
name|put
argument_list|(
name|Document
operator|.
name|MOD_COUNT
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
block|}
block|}
name|DBCollection
name|dbCollection
init|=
name|getDBCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
specifier|final
name|Stopwatch
name|watch
init|=
name|startWatch
argument_list|()
decl_stmt|;
name|boolean
name|insertSuccess
init|=
literal|false
decl_stmt|;
try|try
block|{
try|try
block|{
name|dbCollection
operator|.
name|insert
argument_list|(
name|inserts
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
condition|)
block|{
for|for
control|(
name|T
name|doc
range|:
name|docs
control|)
block|{
name|nodesCache
operator|.
name|putIfAbsent
argument_list|(
operator|(
name|NodeDocument
operator|)
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
name|insertSuccess
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|MongoException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
finally|finally
block|{
name|stats
operator|.
name|doneCreate
argument_list|(
name|watch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|,
name|collection
argument_list|,
name|ids
argument_list|,
name|insertSuccess
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|void
name|update
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|,
name|UpdateOp
name|updateOp
parameter_list|)
block|{
name|log
argument_list|(
literal|"update"
argument_list|,
name|keys
argument_list|,
name|updateOp
argument_list|)
expr_stmt|;
name|UpdateUtils
operator|.
name|assertUnconditional
argument_list|(
name|updateOp
argument_list|)
expr_stmt|;
name|DBCollection
name|dbCollection
init|=
name|getDBCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|QueryBuilder
name|query
init|=
name|QueryBuilder
operator|.
name|start
argument_list|(
name|Document
operator|.
name|ID
argument_list|)
operator|.
name|in
argument_list|(
name|keys
argument_list|)
decl_stmt|;
comment|// make sure we don't modify the original updateOp
name|updateOp
operator|=
name|updateOp
operator|.
name|copy
argument_list|()
expr_stmt|;
name|DBObject
name|update
init|=
name|createUpdate
argument_list|(
name|updateOp
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Stopwatch
name|watch
init|=
name|startWatch
argument_list|()
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|NodeDocument
argument_list|>
name|cachedDocs
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
condition|)
block|{
name|cachedDocs
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|cachedDocs
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|nodesCache
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|dbCollection
operator|.
name|update
argument_list|(
name|query
operator|.
name|get
argument_list|()
argument_list|,
name|update
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|modCounts
init|=
name|getModCounts
argument_list|(
name|filterValues
argument_list|(
name|cachedDocs
argument_list|,
name|notNull
argument_list|()
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
comment|// update cache
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|NodeDocument
argument_list|>
name|entry
range|:
name|cachedDocs
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// the cachedDocs is not empty, so the collection = NODES
name|Lock
name|lock
init|=
name|nodeLocks
operator|.
name|acquire
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|Long
name|postUpdateModCount
init|=
name|modCounts
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|postUpdateModCount
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
name|NodeDocument
operator|.
name|NULL
operator|&&
name|Long
operator|.
name|valueOf
argument_list|(
name|postUpdateModCount
operator|-
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getModCount
argument_list|()
argument_list|)
condition|)
block|{
comment|// post update modCount is one higher than
comment|// what we currently see in the cache. we can
comment|// replace the cached document
name|NodeDocument
name|newDoc
init|=
name|applyChanges
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|updateOp
operator|.
name|shallowCopy
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|nodesCache
operator|.
name|replaceCachedDocument
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|newDoc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// make sure concurrently loaded document is
comment|// invalidated
name|nodesCache
operator|.
name|invalidate
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|MongoException
name|e
parameter_list|)
block|{
comment|// some documents may still have been updated
comment|// invalidate all documents affected by this update call
for|for
control|(
name|String
name|k
range|:
name|keys
control|)
block|{
name|nodesCache
operator|.
name|invalidate
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
throw|throw
name|DocumentStoreException
operator|.
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|stats
operator|.
name|doneUpdate
argument_list|(
name|watch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|,
name|collection
argument_list|,
name|keys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the {@link Document#MOD_COUNT} value of the documents with the      * given {@code keys}. The returned map will only contain entries for      * existing documents.      *      * @param keys the keys of the documents.      * @return map with key to {@link Document#MOD_COUNT} value mapping.      * @throws MongoException if the call fails      */
annotation|@
name|Nonnull
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getModCounts
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
throws|throws
name|MongoException
block|{
name|QueryBuilder
name|query
init|=
name|QueryBuilder
operator|.
name|start
argument_list|(
name|Document
operator|.
name|ID
argument_list|)
operator|.
name|in
argument_list|(
name|keys
argument_list|)
decl_stmt|;
comment|// Fetch only the modCount and id
specifier|final
name|BasicDBObject
name|fields
init|=
operator|new
name|BasicDBObject
argument_list|(
name|Document
operator|.
name|ID
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|Document
operator|.
name|MOD_COUNT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DBCursor
name|cursor
init|=
name|nodes
operator|.
name|find
argument_list|(
name|query
operator|.
name|get
argument_list|()
argument_list|,
name|fields
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|setReadPreference
argument_list|(
name|ReadPreference
operator|.
name|primary
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|modCounts
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|DBObject
name|obj
range|:
name|cursor
control|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|obj
operator|.
name|get
argument_list|(
name|Document
operator|.
name|ID
argument_list|)
decl_stmt|;
name|Long
name|modCount
init|=
name|Utils
operator|.
name|asLong
argument_list|(
operator|(
name|Number
operator|)
name|obj
operator|.
name|get
argument_list|(
name|Document
operator|.
name|MOD_COUNT
argument_list|)
argument_list|)
decl_stmt|;
name|modCounts
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|modCount
argument_list|)
expr_stmt|;
block|}
return|return
name|modCounts
return|;
block|}
name|DocumentReadPreference
name|getReadPreference
parameter_list|(
name|int
name|maxCacheAge
parameter_list|)
block|{
if|if
condition|(
name|maxCacheAge
operator|>=
literal|0
operator|&&
name|maxCacheAge
operator|<
name|maxReplicationLagMillis
condition|)
block|{
return|return
name|DocumentReadPreference
operator|.
name|PRIMARY
return|;
block|}
elseif|else
if|if
condition|(
name|maxCacheAge
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
name|DocumentReadPreference
operator|.
name|PREFER_SECONDARY
return|;
block|}
else|else
block|{
return|return
name|DocumentReadPreference
operator|.
name|PREFER_SECONDARY_IF_OLD_ENOUGH
return|;
block|}
block|}
name|DocumentReadPreference
name|getDefaultReadPreference
parameter_list|(
name|Collection
name|col
parameter_list|)
block|{
return|return
name|col
operator|==
name|Collection
operator|.
name|NODES
condition|?
name|DocumentReadPreference
operator|.
name|PREFER_SECONDARY_IF_OLD_ENOUGH
else|:
name|DocumentReadPreference
operator|.
name|PRIMARY
return|;
block|}
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|ReadPreference
name|getMongoReadPreference
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|parentId
parameter_list|,
name|DocumentReadPreference
name|preference
parameter_list|)
block|{
switch|switch
condition|(
name|preference
condition|)
block|{
case|case
name|PRIMARY
case|:
return|return
name|ReadPreference
operator|.
name|primary
argument_list|()
return|;
case|case
name|PREFER_PRIMARY
case|:
return|return
name|ReadPreference
operator|.
name|primaryPreferred
argument_list|()
return|;
case|case
name|PREFER_SECONDARY
case|:
return|return
name|getConfiguredReadPreference
argument_list|(
name|collection
argument_list|)
return|;
case|case
name|PREFER_SECONDARY_IF_OLD_ENOUGH
case|:
if|if
condition|(
name|collection
operator|!=
name|Collection
operator|.
name|NODES
condition|)
block|{
return|return
name|ReadPreference
operator|.
name|primary
argument_list|()
return|;
block|}
comment|// read from primary unless parent has not been modified
comment|// within replication lag period
name|ReadPreference
name|readPreference
init|=
name|ReadPreference
operator|.
name|primary
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentId
operator|!=
literal|null
condition|)
block|{
name|long
name|replicationSafeLimit
init|=
name|getTime
argument_list|()
operator|-
name|maxReplicationLagMillis
decl_stmt|;
name|NodeDocument
name|cachedDoc
init|=
name|nodesCache
operator|.
name|getIfPresent
argument_list|(
name|parentId
argument_list|)
decl_stmt|;
comment|// FIXME: this is not quite accurate, because ancestors
comment|// are updated in a background thread (_lastRev). We
comment|// will need to revise this for low maxReplicationLagMillis
comment|// values
if|if
condition|(
name|cachedDoc
operator|!=
literal|null
operator|&&
operator|!
name|cachedDoc
operator|.
name|hasBeenModifiedSince
argument_list|(
name|replicationSafeLimit
argument_list|)
condition|)
block|{
comment|//If parent has been modified loooong time back then there children
comment|//would also have not be modified. In that case we can read from secondary
name|readPreference
operator|=
name|getConfiguredReadPreference
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|readPreference
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported usage "
operator|+
name|preference
argument_list|)
throw|;
block|}
block|}
comment|/**      * Retrieves the ReadPreference specified for the Mongo DB in use irrespective of      * DBCollection. Depending on deployments the user can tweak the default references      * to read from secondary and in that also tag secondaries      *      * @return db level ReadPreference      */
name|ReadPreference
name|getConfiguredReadPreference
parameter_list|(
name|Collection
name|collection
parameter_list|)
block|{
return|return
name|getDBCollection
argument_list|(
name|collection
argument_list|)
operator|.
name|getReadPreference
argument_list|()
return|;
block|}
annotation|@
name|CheckForNull
specifier|protected
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|convertFromDBObject
parameter_list|(
annotation|@
name|Nonnull
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
annotation|@
name|Nullable
name|DBObject
name|n
parameter_list|)
block|{
name|T
name|copy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|n
operator|!=
literal|null
condition|)
block|{
name|copy
operator|=
name|collection
operator|.
name|newDocument
argument_list|(
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|n
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Object
name|o
init|=
name|n
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|copy
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Long
condition|)
block|{
name|copy
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Integer
condition|)
block|{
name|copy
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Boolean
condition|)
block|{
name|copy
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|BasicDBObject
condition|)
block|{
name|copy
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|convertMongoMap
argument_list|(
operator|(
name|BasicDBObject
operator|)
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|copy
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|Map
argument_list|<
name|Revision
argument_list|,
name|Object
argument_list|>
name|convertMongoMap
parameter_list|(
annotation|@
name|Nonnull
name|BasicDBObject
name|obj
parameter_list|)
block|{
name|Map
argument_list|<
name|Revision
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|Revision
argument_list|,
name|Object
argument_list|>
argument_list|(
name|StableRevisionComparator
operator|.
name|REVERSE
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|obj
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|Revision
operator|.
name|fromString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|DBCollection
name|getDBCollection
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|)
block|{
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
condition|)
block|{
return|return
name|nodes
return|;
block|}
elseif|else
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|CLUSTER_NODES
condition|)
block|{
return|return
name|clusterNodes
return|;
block|}
elseif|else
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|SETTINGS
condition|)
block|{
return|return
name|settings
return|;
block|}
elseif|else
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|JOURNAL
condition|)
block|{
return|return
name|journal
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown collection: "
operator|+
name|collection
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|QueryBuilder
name|getByKeyQuery
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|QueryBuilder
operator|.
name|start
argument_list|(
name|Document
operator|.
name|ID
argument_list|)
operator|.
name|is
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|nodes
operator|.
name|getDB
argument_list|()
operator|.
name|getMongo
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|nodesCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error occurred while closing nodes cache"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|CacheStats
argument_list|>
name|getCacheStats
parameter_list|()
block|{
return|return
name|nodesCache
operator|.
name|getCacheStats
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getMetadata
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
name|long
name|getMaxDeltaForModTimeIdxSecs
parameter_list|()
block|{
return|return
name|maxDeltaForModTimeIdxSecs
return|;
block|}
name|boolean
name|getDisableIndexHint
parameter_list|()
block|{
return|return
name|disableIndexHint
return|;
block|}
specifier|private
specifier|static
name|void
name|log
parameter_list|(
name|String
name|message
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|argList
init|=
name|Arrays
operator|.
name|toString
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|argList
operator|.
name|length
argument_list|()
operator|>
literal|10000
condition|)
block|{
name|argList
operator|=
name|argList
operator|.
name|length
argument_list|()
operator|+
literal|": "
operator|+
name|argList
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|message
operator|+
name|argList
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|getIfCached
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|collection
operator|!=
name|Collection
operator|.
name|NODES
condition|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|T
name|doc
init|=
operator|(
name|T
operator|)
name|nodesCache
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
name|NodeDocument
operator|.
name|NULL
condition|)
block|{
name|doc
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
annotation|@
name|Nonnull
specifier|private
specifier|static
name|QueryBuilder
name|createQueryForUpdate
parameter_list|(
name|String
name|key
parameter_list|,
name|Map
argument_list|<
name|Key
argument_list|,
name|Condition
argument_list|>
name|conditions
parameter_list|)
block|{
name|QueryBuilder
name|query
init|=
name|getByKeyQuery
argument_list|(
name|key
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Key
argument_list|,
name|Condition
argument_list|>
name|entry
range|:
name|conditions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Key
name|k
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Condition
name|c
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|c
operator|.
name|type
condition|)
block|{
case|case
name|EXISTS
case|:
name|query
operator|.
name|and
argument_list|(
name|k
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|(
name|c
operator|.
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|EQUALS
case|:
name|query
operator|.
name|and
argument_list|(
name|k
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|is
argument_list|(
name|c
operator|.
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|NOTEQUALS
case|:
name|query
operator|.
name|and
argument_list|(
name|k
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|notEquals
argument_list|(
name|c
operator|.
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|query
return|;
block|}
comment|/**      * Creates a MongoDB update object from the given UpdateOp.      *      * @param updateOp the update op.      * @param includeId whether to include the SET id operation      * @return the DBObject.      */
annotation|@
name|Nonnull
specifier|private
specifier|static
name|DBObject
name|createUpdate
parameter_list|(
name|UpdateOp
name|updateOp
parameter_list|,
name|boolean
name|includeId
parameter_list|)
block|{
name|BasicDBObject
name|setUpdates
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|BasicDBObject
name|maxUpdates
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|BasicDBObject
name|incUpdates
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|BasicDBObject
name|unsetUpdates
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
comment|// always increment modCount
name|updateOp
operator|.
name|increment
argument_list|(
name|Document
operator|.
name|MOD_COUNT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// other updates
for|for
control|(
name|Entry
argument_list|<
name|Key
argument_list|,
name|Operation
argument_list|>
name|entry
range|:
name|updateOp
operator|.
name|getChanges
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Key
name|k
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeId
operator|&&
name|k
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|Document
operator|.
name|ID
argument_list|)
condition|)
block|{
comment|// avoid exception "Mod on _id not allowed"
continue|continue;
block|}
name|Operation
name|op
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|op
operator|.
name|type
condition|)
block|{
case|case
name|SET
case|:
case|case
name|SET_MAP_ENTRY
case|:
block|{
name|setUpdates
operator|.
name|append
argument_list|(
name|k
operator|.
name|toString
argument_list|()
argument_list|,
name|op
operator|.
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MAX
case|:
block|{
name|maxUpdates
operator|.
name|append
argument_list|(
name|k
operator|.
name|toString
argument_list|()
argument_list|,
name|op
operator|.
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|INCREMENT
case|:
block|{
name|incUpdates
operator|.
name|append
argument_list|(
name|k
operator|.
name|toString
argument_list|()
argument_list|,
name|op
operator|.
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|REMOVE_MAP_ENTRY
case|:
block|{
name|unsetUpdates
operator|.
name|append
argument_list|(
name|k
operator|.
name|toString
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|BasicDBObject
name|update
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|setUpdates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|update
operator|.
name|append
argument_list|(
literal|"$set"
argument_list|,
name|setUpdates
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|maxUpdates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|update
operator|.
name|append
argument_list|(
literal|"$max"
argument_list|,
name|maxUpdates
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|incUpdates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|update
operator|.
name|append
argument_list|(
literal|"$inc"
argument_list|,
name|incUpdates
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|unsetUpdates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|update
operator|.
name|append
argument_list|(
literal|"$unset"
argument_list|,
name|unsetUpdates
argument_list|)
expr_stmt|;
block|}
return|return
name|update
return|;
block|}
annotation|@
name|Nonnull
specifier|private
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|applyChanges
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|T
name|oldDoc
parameter_list|,
name|UpdateOp
name|update
parameter_list|)
block|{
name|T
name|doc
init|=
name|collection
operator|.
name|newDocument
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|oldDoc
operator|.
name|deepCopy
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|UpdateUtils
operator|.
name|applyChanges
argument_list|(
name|doc
argument_list|,
name|update
argument_list|)
expr_stmt|;
name|doc
operator|.
name|seal
argument_list|()
expr_stmt|;
return|return
name|doc
return|;
block|}
specifier|private
name|Stopwatch
name|startWatch
parameter_list|()
block|{
return|return
name|Stopwatch
operator|.
name|createStarted
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setReadWriteMode
parameter_list|(
name|String
name|readWriteMode
parameter_list|)
block|{
if|if
condition|(
name|readWriteMode
operator|==
literal|null
operator|||
name|readWriteMode
operator|.
name|equals
argument_list|(
name|lastReadWriteMode
argument_list|)
condition|)
block|{
return|return;
block|}
name|lastReadWriteMode
operator|=
name|readWriteMode
expr_stmt|;
try|try
block|{
name|String
name|rwModeUri
init|=
name|readWriteMode
decl_stmt|;
if|if
condition|(
operator|!
name|readWriteMode
operator|.
name|startsWith
argument_list|(
literal|"mongodb://"
argument_list|)
condition|)
block|{
name|rwModeUri
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"mongodb://localhost/?%s"
argument_list|,
name|readWriteMode
argument_list|)
expr_stmt|;
block|}
name|MongoClientURI
name|uri
init|=
operator|new
name|MongoClientURI
argument_list|(
name|rwModeUri
argument_list|)
decl_stmt|;
name|ReadPreference
name|readPref
init|=
name|uri
operator|.
name|getOptions
argument_list|()
operator|.
name|getReadPreference
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|readPref
operator|.
name|equals
argument_list|(
name|nodes
operator|.
name|getReadPreference
argument_list|()
argument_list|)
condition|)
block|{
name|nodes
operator|.
name|setReadPreference
argument_list|(
name|readPref
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using ReadPreference {} "
argument_list|,
name|readPref
argument_list|)
expr_stmt|;
block|}
name|WriteConcern
name|writeConcern
init|=
name|uri
operator|.
name|getOptions
argument_list|()
operator|.
name|getWriteConcern
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|writeConcern
operator|.
name|equals
argument_list|(
name|nodes
operator|.
name|getWriteConcern
argument_list|()
argument_list|)
condition|)
block|{
name|nodes
operator|.
name|setWriteConcern
argument_list|(
name|writeConcern
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using WriteConcern "
operator|+
name|writeConcern
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error setting readWriteMode "
operator|+
name|readWriteMode
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|long
name|getTime
parameter_list|()
block|{
return|return
name|clock
operator|.
name|getTime
argument_list|()
return|;
block|}
name|void
name|setClock
parameter_list|(
name|Clock
name|clock
parameter_list|)
block|{
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
block|}
name|void
name|setMaxLockedQueryTimeMS
parameter_list|(
name|long
name|maxLockedQueryTimeMS
parameter_list|)
block|{
name|this
operator|.
name|maxLockedQueryTimeMS
operator|=
name|maxLockedQueryTimeMS
expr_stmt|;
block|}
name|void
name|resetLockAcquisitionCount
parameter_list|()
block|{
name|nodeLocks
operator|.
name|resetLockAcquisitionCount
argument_list|()
expr_stmt|;
block|}
name|long
name|getLockAcquisitionCount
parameter_list|()
block|{
return|return
name|nodeLocks
operator|.
name|getLockAcquisitionCount
argument_list|()
return|;
block|}
name|NodeDocumentCache
name|getNodeDocumentCache
parameter_list|()
block|{
return|return
name|nodesCache
return|;
block|}
specifier|public
name|void
name|setStatsCollector
parameter_list|(
name|DocumentStoreStatsCollector
name|stats
parameter_list|)
block|{
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|determineServerTimeDifferenceMillis
parameter_list|()
block|{
comment|// the assumption is that the network delay from this instance
comment|// to the server, and from the server back to this instance
comment|// are (more or less) equal.
comment|// taking this assumption into account allows to remove
comment|// the network delays from the picture: the difference
comment|// between end and start time is exactly this network
comment|// delay (plus some server time, but that's neglected).
comment|// so if the clocks are in perfect sync and the above
comment|// mentioned assumption holds, then the server time should
comment|// be exactly at the midPoint between start and end.
comment|// this should allow a more accurate picture of the diff.
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// assumption here: server returns UTC - ie the returned
comment|// date object is correctly taking care of time zones.
specifier|final
name|Date
name|serverLocalTime
init|=
name|db
operator|.
name|command
argument_list|(
literal|"serverStatus"
argument_list|)
operator|.
name|getDate
argument_list|(
literal|"localTime"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|long
name|midPoint
init|=
operator|(
name|start
operator|+
name|end
operator|)
operator|/
literal|2
decl_stmt|;
specifier|final
name|long
name|serverLocalTimeMillis
init|=
name|serverLocalTime
operator|.
name|getTime
argument_list|()
decl_stmt|;
comment|// the difference should be
comment|// * positive when local instance is ahead
comment|// * and negative when the local instance is behind
specifier|final
name|long
name|diff
init|=
name|midPoint
operator|-
name|serverLocalTimeMillis
decl_stmt|;
return|return
name|diff
return|;
block|}
specifier|private
specifier|static
class|class
name|BulkUpdateResult
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|failedUpdates
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|upserts
decl_stmt|;
specifier|private
name|BulkUpdateResult
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|failedUpdates
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|upserts
parameter_list|)
block|{
name|this
operator|.
name|failedUpdates
operator|=
name|failedUpdates
expr_stmt|;
name|this
operator|.
name|upserts
operator|=
name|upserts
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|InvalidationResult
implements|implements
name|CacheInvalidationStats
block|{
name|int
name|invalidationCount
decl_stmt|;
name|int
name|upToDateCount
decl_stmt|;
name|int
name|cacheSize
decl_stmt|;
name|int
name|queryCount
decl_stmt|;
name|int
name|cacheEntriesProcessedCount
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"InvalidationResult{"
operator|+
literal|"invalidationCount="
operator|+
name|invalidationCount
operator|+
literal|", upToDateCount="
operator|+
name|upToDateCount
operator|+
literal|", cacheSize="
operator|+
name|cacheSize
operator|+
literal|", queryCount="
operator|+
name|queryCount
operator|+
literal|", cacheEntriesProcessedCount="
operator|+
name|cacheEntriesProcessedCount
operator|+
literal|'}'
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|summaryReport
parameter_list|()
block|{
return|return
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

