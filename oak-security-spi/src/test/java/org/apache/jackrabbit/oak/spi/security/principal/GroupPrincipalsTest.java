begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|GroupPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|GroupPrincipalsTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testIsGroup
parameter_list|()
block|{
name|Principal
name|p0
init|=
operator|new
name|PrincipalImpl
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|GroupPrincipals
operator|.
name|isGroup
argument_list|(
name|p0
argument_list|)
argument_list|)
expr_stmt|;
name|GroupPrincipal
name|g
init|=
operator|new
name|GroupPrincipal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"testG"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|members
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMember
parameter_list|(
name|Principal
name|member
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|GroupPrincipals
operator|.
name|isGroup
argument_list|(
name|g
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMembersOfNonGroup
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyEnumeration
argument_list|()
argument_list|,
name|GroupPrincipals
operator|.
name|members
argument_list|(
name|mock
argument_list|(
name|Principal
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMembersOfGroupPrincipal
parameter_list|()
block|{
name|GroupPrincipal
name|gp
init|=
name|mock
argument_list|(
name|GroupPrincipal
operator|.
name|class
argument_list|)
decl_stmt|;
name|GroupPrincipals
operator|.
name|members
argument_list|(
name|gp
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|gp
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|members
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsMemberOfNonGroup
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|GroupPrincipals
operator|.
name|isMember
argument_list|(
name|mock
argument_list|(
name|Principal
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|Principal
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsMemberOfGroupPrincipal
parameter_list|()
block|{
name|GroupPrincipal
name|gp
init|=
name|mock
argument_list|(
name|GroupPrincipal
operator|.
name|class
argument_list|)
decl_stmt|;
name|Principal
name|p
init|=
name|mock
argument_list|(
name|Principal
operator|.
name|class
argument_list|)
decl_stmt|;
name|GroupPrincipals
operator|.
name|isMember
argument_list|(
name|gp
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|gp
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isMember
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

