begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
operator|.
name|newScheduledThreadPool
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordCache
operator|.
name|newRecordCache
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|concurrent
operator|.
name|ExecutorCloser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|DefaultStatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|MeterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatsOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|CacheAccessTrackerTest
block|{
specifier|private
name|CacheAccessTracker
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|cache
decl_stmt|;
specifier|private
name|Closeable
name|closer
decl_stmt|;
specifier|private
name|MeterStats
name|accessStats
decl_stmt|;
specifier|private
name|MeterStats
name|missStats
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|ScheduledExecutorService
name|scheduler
init|=
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|StatisticsProvider
name|statistics
init|=
operator|new
name|DefaultStatisticsProvider
argument_list|(
name|scheduler
argument_list|)
decl_stmt|;
name|cache
operator|=
operator|new
name|CacheAccessTracker
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
argument_list|(
literal|"foo"
argument_list|,
name|statistics
argument_list|,
name|newRecordCache
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|closer
operator|=
operator|new
name|ExecutorCloser
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
name|accessStats
operator|=
name|statistics
operator|.
name|getMeter
argument_list|(
literal|"foo.access-count"
argument_list|,
name|StatsOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|missStats
operator|=
name|statistics
operator|.
name|getMeter
argument_list|(
literal|"foo.miss-count"
argument_list|,
name|StatsOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoAccess
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|accessStats
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|missStats
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissOnEmpty
parameter_list|()
block|{
name|cache
operator|.
name|get
argument_list|(
literal|"non existing"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|accessStats
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|missStats
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHit
parameter_list|()
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
name|RecordId
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|accessStats
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|missStats
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissOnNonEmpty
parameter_list|()
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
name|RecordId
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|"non existing"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|accessStats
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|missStats
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHitMiss
parameter_list|()
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
name|RecordId
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|"non existing"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|accessStats
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|missStats
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

