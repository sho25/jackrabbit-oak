begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SettableFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|concurrent
operator|.
name|ExecutorCloser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|DefaultStatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests for {@link CompositeDataStoreCache}.  */
end_comment

begin_class
specifier|public
class|class
name|CompositeDataStoreCacheTest
extends|extends
name|AbstractDataStoreCacheTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UploadStagingCacheTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ID_PREFIX
init|=
literal|"12345"
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|expectedEx
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
specifier|private
name|CompositeDataStoreCache
name|cache
decl_stmt|;
specifier|private
specifier|final
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
name|File
name|root
decl_stmt|;
specifier|private
name|TestStagingUploader
name|uploader
decl_stmt|;
specifier|private
name|TestCacheLoader
name|loader
decl_stmt|;
specifier|private
name|CountDownLatch
name|taskLatch
decl_stmt|;
specifier|private
name|CountDownLatch
name|callbackLatch
decl_stmt|;
specifier|private
name|CountDownLatch
name|afterExecuteLatch
decl_stmt|;
specifier|private
name|TestExecutor
name|executor
decl_stmt|;
specifier|private
name|StatisticsProvider
name|statsProvider
decl_stmt|;
specifier|private
name|ScheduledExecutorService
name|scheduledExecutor
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting setup"
argument_list|)
expr_stmt|;
name|root
operator|=
name|folder
operator|.
name|newFolder
argument_list|()
expr_stmt|;
name|loader
operator|=
operator|new
name|TestCacheLoader
argument_list|<
name|String
argument_list|,
name|InputStream
argument_list|>
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
argument_list|)
expr_stmt|;
name|uploader
operator|=
operator|new
name|TestStagingUploader
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
argument_list|)
expr_stmt|;
comment|// create executor
name|taskLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|callbackLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|afterExecuteLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|executor
operator|=
operator|new
name|TestExecutor
argument_list|(
literal|1
argument_list|,
name|taskLatch
argument_list|,
name|callbackLatch
argument_list|,
name|afterExecuteLatch
argument_list|)
expr_stmt|;
comment|// stats
name|ScheduledExecutorService
name|statsExecutor
init|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
operator|new
name|ExecutorCloser
argument_list|(
name|statsExecutor
argument_list|,
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|statsProvider
operator|=
operator|new
name|DefaultStatisticsProvider
argument_list|(
name|statsExecutor
argument_list|)
expr_stmt|;
name|scheduledExecutor
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
operator|new
name|ExecutorCloser
argument_list|(
name|scheduledExecutor
argument_list|,
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|//cache instance
name|cache
operator|=
operator|new
name|CompositeDataStoreCache
argument_list|(
name|root
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|80
operator|*
literal|1024
comment|/* bytes */
argument_list|,
literal|10
argument_list|,
literal|1
comment|/*threads*/
argument_list|,
name|loader
argument_list|,
name|uploader
argument_list|,
name|statsProvider
argument_list|,
name|executor
argument_list|,
name|scheduledExecutor
argument_list|,
literal|3000
argument_list|,
literal|6000
argument_list|)
expr_stmt|;
name|Futures
operator|.
name|successfulAsList
argument_list|(
operator|(
name|Iterable
argument_list|<
name|?
extends|extends
name|ListenableFuture
argument_list|<
name|?
argument_list|>
argument_list|>
operator|)
name|executor
operator|.
name|futures
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished setup"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tear
parameter_list|()
throws|throws
name|IOException
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|zeroCache
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting zeroCache"
argument_list|)
expr_stmt|;
name|cache
operator|=
operator|new
name|CompositeDataStoreCache
argument_list|(
name|root
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|0
comment|/* bytes         */
argument_list|,
literal|10
argument_list|,
literal|1
comment|/*threads*/
argument_list|,
name|loader
argument_list|,
name|uploader
argument_list|,
name|statsProvider
argument_list|,
name|executor
argument_list|,
name|scheduledExecutor
argument_list|,
literal|3000
argument_list|,
literal|6000
argument_list|)
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|File
name|f
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|accepted
init|=
name|cache
operator|.
name|stage
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|accepted
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getStagingCache
argument_list|()
operator|.
name|getStats
argument_list|()
operator|.
name|getMaxTotalWeight
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getStagingCacheStats
argument_list|()
operator|.
name|getMaxTotalWeight
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getDownloadCache
argument_list|()
operator|.
name|getStats
argument_list|()
operator|.
name|getMaxTotalWeight
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getCacheStats
argument_list|()
operator|.
name|getMaxTotalWeight
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|invalidate
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
expr_stmt|;
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished zeroCache"
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@link CompositeDataStoreCache#getIfPresent(String)} when no cache.      */
annotation|@
name|Test
specifier|public
name|void
name|getIfPresentNoCache
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting getIfPresentNoCache"
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|cache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|cache
operator|.
name|getStagingCacheStats
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished getIfPresentNoCache"
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@link CompositeDataStoreCache#get(String)} when no cache.      * @throws IOException      */
annotation|@
name|Test
specifier|public
name|void
name|getNoCache
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting getNoCache"
argument_list|)
expr_stmt|;
name|expectedEx
operator|.
name|expect
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished getNoCache"
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@link CompositeDataStoreCache#getIfPresent(Object)} when no cache.      */
annotation|@
name|Test
specifier|public
name|void
name|getIfPresentObjectNoCache
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting getIfPresentObjectNoCache"
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|cache
operator|.
name|getIfPresent
argument_list|(
call|(
name|Object
call|)
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|cache
operator|.
name|getStagingCacheStats
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|cache
operator|.
name|getDownloadCache
argument_list|()
operator|.
name|getStats
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished getIfPresentObjectNoCache"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add to staging      */
annotation|@
name|Test
specifier|public
name|void
name|add
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting add"
argument_list|)
expr_stmt|;
name|File
name|f
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|accepted
init|=
name|cache
operator|.
name|stage
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|accepted
argument_list|)
expr_stmt|;
comment|//start
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|waitFinish
argument_list|()
expr_stmt|;
name|File
name|file
init|=
name|cache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|assertFile
argument_list|(
name|file
argument_list|,
literal|0
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|cache
operator|.
name|getStagingCacheStats
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished add"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add to staging when cache full.      */
annotation|@
name|Test
specifier|public
name|void
name|addCacheFull
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting addCacheFull"
argument_list|)
expr_stmt|;
name|cache
operator|=
operator|new
name|CompositeDataStoreCache
argument_list|(
name|root
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|40
operator|*
literal|1024
comment|/*         bytes */
argument_list|,
literal|10
comment|/* staging % */
argument_list|,
literal|1
comment|/*threads*/
argument_list|,
name|loader
argument_list|,
name|uploader
argument_list|,
name|statsProvider
argument_list|,
name|executor
argument_list|,
name|scheduledExecutor
argument_list|,
literal|3000
argument_list|,
literal|6000
argument_list|)
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|File
name|f
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|accepted
init|=
name|cache
operator|.
name|stage
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|accepted
argument_list|)
expr_stmt|;
name|File
name|f2
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|1
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|accepted
operator|=
name|cache
operator|.
name|stage
argument_list|(
name|ID_PREFIX
operator|+
literal|1
argument_list|,
name|f2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|accepted
argument_list|)
expr_stmt|;
comment|//start the original upload
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|waitFinish
argument_list|()
expr_stmt|;
name|File
name|file
init|=
name|cache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|assertFile
argument_list|(
name|file
argument_list|,
literal|0
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|cache
operator|.
name|getStagingCacheStats
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished addCacheFull"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Invalidate from staging.      */
annotation|@
name|Test
specifier|public
name|void
name|invalidateStaging
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting invalidateStaging"
argument_list|)
expr_stmt|;
comment|// create executor
name|taskLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|callbackLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|afterExecuteLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|executor
operator|=
operator|new
name|TestExecutor
argument_list|(
literal|1
argument_list|,
name|taskLatch
argument_list|,
name|callbackLatch
argument_list|,
name|afterExecuteLatch
argument_list|)
expr_stmt|;
name|cache
operator|=
operator|new
name|CompositeDataStoreCache
argument_list|(
name|root
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|80
operator|*
literal|1024
comment|/*         bytes */
argument_list|,
literal|10
comment|/* staging % */
argument_list|,
literal|1
comment|/*threads*/
argument_list|,
name|loader
argument_list|,
name|uploader
argument_list|,
name|statsProvider
argument_list|,
name|executor
argument_list|,
name|scheduledExecutor
argument_list|,
literal|3000
argument_list|,
literal|6000
argument_list|)
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|File
name|f
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|accepted
init|=
name|cache
operator|.
name|stage
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|accepted
argument_list|)
expr_stmt|;
name|File
name|f2
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|1
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|accepted
operator|=
name|cache
operator|.
name|stage
argument_list|(
name|ID_PREFIX
operator|+
literal|1
argument_list|,
name|f2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|accepted
argument_list|)
expr_stmt|;
name|cache
operator|.
name|invalidate
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
expr_stmt|;
comment|//start the original uploads
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|waitFinish
argument_list|()
expr_stmt|;
name|File
name|file
init|=
name|cache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|file
operator|=
name|cache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertFile
argument_list|(
name|file
argument_list|,
literal|1
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|cache
operator|.
name|getStagingCacheStats
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished invalidateStaging"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test {@link CompositeDataStoreCache#getIfPresent(String)} when file staged      * and then put in download cache when uploaded.      * @throws IOException      */
annotation|@
name|Test
specifier|public
name|void
name|getIfPresentStaged
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting getIfPresentStaged"
argument_list|)
expr_stmt|;
name|get
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished getIfPresentStaged"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test {@link CompositeDataStoreCache#get(String)} when file staged and then put in      * download cache when uploaded.      * @throws IOException      */
annotation|@
name|Test
specifier|public
name|void
name|getStaged
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting getStaged"
argument_list|)
expr_stmt|;
name|get
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished getStaged"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|get
parameter_list|(
name|boolean
name|get
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|f
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|accepted
init|=
name|cache
operator|.
name|stage
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|accepted
argument_list|)
expr_stmt|;
comment|// hit the staging cache as not uploaded
name|File
name|file
decl_stmt|;
if|if
condition|(
name|get
condition|)
block|{
name|file
operator|=
name|cache
operator|.
name|get
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|=
name|cache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|assertFile
argument_list|(
name|file
argument_list|,
literal|0
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|cache
operator|.
name|getStagingCacheStats
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|4
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//start the original upload
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|waitFinish
argument_list|()
expr_stmt|;
comment|// Now should hit the download cache
if|if
condition|(
name|get
condition|)
block|{
name|file
operator|=
name|cache
operator|.
name|get
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|=
name|cache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"File loaded from cache [{}]"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|assertFile
argument_list|(
name|file
argument_list|,
literal|0
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|cache
operator|.
name|getStagingCacheStats
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|cache
operator|.
name|getCacheStats
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|4
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Load and get from the download cache.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|getLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting getLoad"
argument_list|)
expr_stmt|;
name|File
name|f
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|loader
operator|.
name|write
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|,
name|f
argument_list|)
expr_stmt|;
comment|// Not present yet
name|File
name|cached
init|=
name|cache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|cached
argument_list|)
expr_stmt|;
comment|// present after loading
name|cached
operator|=
name|cache
operator|.
name|get
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cached
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|f
argument_list|,
name|cached
argument_list|)
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|cache
operator|.
name|getStagingCacheStats
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|getStagingCacheStats
argument_list|()
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getStagingCacheStats
argument_list|()
operator|.
name|getLoadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|cache
operator|.
name|getCacheStats
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|4
operator|*
literal|1024
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getCacheStats
argument_list|()
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getCacheStats
argument_list|()
operator|.
name|getLoadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished getLoad"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Invalidate cache entry.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|invalidate
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting invalidate"
argument_list|)
expr_stmt|;
name|File
name|f
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|loader
operator|.
name|write
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|,
name|f
argument_list|)
expr_stmt|;
comment|// present after loading
name|File
name|cached
init|=
name|cache
operator|.
name|get
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cached
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|f
argument_list|,
name|cached
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|.
name|invalidate
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
expr_stmt|;
comment|// Not present now
name|cached
operator|=
name|cache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cached
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|cache
operator|.
name|getStagingCacheStats
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|getStagingCacheStats
argument_list|()
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getStagingCacheStats
argument_list|()
operator|.
name|getLoadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|cache
operator|.
name|getCacheStats
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getCacheStats
argument_list|()
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getCacheStats
argument_list|()
operator|.
name|getLoadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
comment|/** Check eviction count */
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getCacheStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished invalidate"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Concurrently retrieves 2 different files from cache.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|concurrentGetCached
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting concurrentGetCached"
argument_list|)
expr_stmt|;
comment|// Add 2 files to backend
comment|// Concurrently get both
name|ListeningExecutorService
name|executorService
init|=
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
operator|new
name|ExecutorCloser
argument_list|(
name|executorService
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|f
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|loader
operator|.
name|write
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|f2
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|1
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|loader
operator|.
name|write
argument_list|(
name|ID_PREFIX
operator|+
literal|1
argument_list|,
name|f2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|CountDownLatch
name|thread1Start
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|SettableFuture
argument_list|<
name|File
argument_list|>
name|future1
init|=
name|retrieveThread
argument_list|(
name|executorService
argument_list|,
name|ID_PREFIX
operator|+
literal|0
argument_list|,
name|cache
argument_list|,
name|thread1Start
argument_list|)
decl_stmt|;
name|CountDownLatch
name|thread2Start
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|SettableFuture
argument_list|<
name|File
argument_list|>
name|future2
init|=
name|retrieveThread
argument_list|(
name|executorService
argument_list|,
name|ID_PREFIX
operator|+
literal|1
argument_list|,
name|cache
argument_list|,
name|thread2Start
argument_list|)
decl_stmt|;
name|thread1Start
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|thread2Start
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|File
name|cached
init|=
name|future1
operator|.
name|get
argument_list|()
decl_stmt|;
name|File
name|cached2
init|=
name|future2
operator|.
name|get
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Async tasks finished"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|f
argument_list|,
name|cached
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|f2
argument_list|,
name|cached2
argument_list|)
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|cache
operator|.
name|getStagingCacheStats
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|getStagingCacheStats
argument_list|()
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getStagingCacheStats
argument_list|()
operator|.
name|getLoadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|cache
operator|.
name|getCacheStats
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|8
operator|*
literal|1024
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|getCacheStats
argument_list|()
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|getCacheStats
argument_list|()
operator|.
name|getLoadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished concurrentGetCached"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Concurrently retrieves 2 different files from cache.      * One is staged and other in the download cache.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|concurrentGetFromStagedAndCached
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting concurrentGetFromStagedAndCached"
argument_list|)
expr_stmt|;
comment|// Add 1 to backend
comment|// Add 2 to upload area
comment|// Stop upload execution
comment|// Concurrently get 1& 2
comment|// continue upload execution
name|ListeningExecutorService
name|executorService
init|=
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
operator|new
name|ExecutorCloser
argument_list|(
name|executorService
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add file to backend
name|File
name|f2
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|1
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|loader
operator|.
name|write
argument_list|(
name|ID_PREFIX
operator|+
literal|1
argument_list|,
name|f2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// stage for upload
name|File
name|f
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|accepted
init|=
name|cache
operator|.
name|stage
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|accepted
argument_list|)
expr_stmt|;
comment|// Would hit the staging cache
name|CountDownLatch
name|thread1Start
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|SettableFuture
argument_list|<
name|File
argument_list|>
name|future1
init|=
name|retrieveThread
argument_list|(
name|executorService
argument_list|,
name|ID_PREFIX
operator|+
literal|0
argument_list|,
name|cache
argument_list|,
name|thread1Start
argument_list|)
decl_stmt|;
comment|// Would hit the download cache and load
name|CountDownLatch
name|thread2Start
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|SettableFuture
argument_list|<
name|File
argument_list|>
name|future2
init|=
name|retrieveThread
argument_list|(
name|executorService
argument_list|,
name|ID_PREFIX
operator|+
literal|1
argument_list|,
name|cache
argument_list|,
name|thread2Start
argument_list|)
decl_stmt|;
name|thread1Start
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|thread2Start
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|File
name|cached
init|=
name|future1
operator|.
name|get
argument_list|()
decl_stmt|;
name|File
name|cached2
init|=
name|future2
operator|.
name|get
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Async tasks finished"
argument_list|)
expr_stmt|;
name|assertFile
argument_list|(
name|cached
argument_list|,
literal|0
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|f2
argument_list|,
name|cached2
argument_list|)
argument_list|)
expr_stmt|;
comment|//start the original upload
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|waitFinish
argument_list|()
expr_stmt|;
name|assertCacheStats
argument_list|(
name|cache
operator|.
name|getStagingCacheStats
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|getStagingCacheStats
argument_list|()
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getStagingCacheStats
argument_list|()
operator|.
name|getLoadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|cache
operator|.
name|getCacheStats
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|8
operator|*
literal|1024
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getCacheStats
argument_list|()
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getCacheStats
argument_list|()
operator|.
name|getLoadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished concurrentGetFromStagedAndCached"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Concurrently stage and get a file and then upload.      * Use the file retrieve to read contents.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|concurrentAddGet
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting concurrentAddGet"
argument_list|)
expr_stmt|;
comment|// Add to the upload area
comment|// stop upload execution
comment|// Same as above but concurrently
comment|// Get
comment|// Continue upload execution
name|ListeningExecutorService
name|executorService
init|=
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
operator|new
name|ExecutorCloser
argument_list|(
name|executorService
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// stage for upload
name|File
name|f
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|accepted
init|=
name|cache
operator|.
name|stage
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|accepted
argument_list|)
expr_stmt|;
comment|// Would hit the staging cache
name|CountDownLatch
name|thread1Start
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|SettableFuture
argument_list|<
name|File
argument_list|>
name|future1
init|=
name|retrieveThread
argument_list|(
name|executorService
argument_list|,
name|ID_PREFIX
operator|+
literal|0
argument_list|,
name|cache
argument_list|,
name|thread1Start
argument_list|)
decl_stmt|;
comment|// Get a handle to the file and open stream
name|File
name|fileOnUpload
init|=
name|cache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fileOnUpload
argument_list|)
expr_stmt|;
specifier|final
name|InputStream
name|fStream
init|=
name|Files
operator|.
name|asByteSource
argument_list|(
name|fileOnUpload
argument_list|)
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|thread1Start
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|//start the original upload
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|future1
operator|.
name|get
argument_list|()
expr_stmt|;
name|waitFinish
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Async tasks finished"
argument_list|)
expr_stmt|;
name|File
name|gold
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|fromUploadStream
init|=
name|copyToFile
argument_list|(
name|fStream
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|gold
argument_list|,
name|fromUploadStream
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|getStagingCacheStats
argument_list|()
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getCacheStats
argument_list|()
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getCacheStats
argument_list|()
operator|.
name|getLoadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished concurrentAddGet"
argument_list|)
expr_stmt|;
block|}
comment|/**--------------------------- Helper Methods -----------------------------------------------**/
specifier|private
specifier|static
name|SettableFuture
argument_list|<
name|File
argument_list|>
name|retrieveThread
parameter_list|(
name|ListeningExecutorService
name|executor
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|CompositeDataStoreCache
name|cache
parameter_list|,
specifier|final
name|CountDownLatch
name|start
parameter_list|)
block|{
specifier|final
name|SettableFuture
argument_list|<
name|File
argument_list|>
name|future
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for start retrieve"
argument_list|)
expr_stmt|;
name|start
operator|.
name|await
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting retrieve [{}]"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|File
name|cached
init|=
name|cache
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished retrieve"
argument_list|)
expr_stmt|;
name|future
operator|.
name|set
argument_list|(
name|cached
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception in get"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|future
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
specifier|private
name|void
name|waitFinish
parameter_list|()
block|{
try|try
block|{
comment|// wait for upload finish
name|afterExecuteLatch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Force execute removal from staging cache
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduledFuture
init|=
name|scheduledExecutor
operator|.
name|schedule
argument_list|(
name|cache
operator|.
name|getStagingCache
argument_list|()
operator|.
operator|new
name|RemoveJob
argument_list|()
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|scheduledFuture
operator|.
name|get
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"After jobs completed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assertCacheStats
parameter_list|(
name|DataStoreCacheStatsMBean
name|cache
parameter_list|,
name|long
name|elems
parameter_list|,
name|long
name|weight
parameter_list|,
name|long
name|hits
parameter_list|,
name|long
name|count
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"elements don't match"
argument_list|,
name|elems
argument_list|,
name|cache
operator|.
name|getElementCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"weight doesn't match"
argument_list|,
name|weight
argument_list|,
name|cache
operator|.
name|estimateCurrentWeight
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hits count don't match"
argument_list|,
name|hits
argument_list|,
name|cache
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"requests count don't match"
argument_list|,
name|count
argument_list|,
name|cache
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertFile
parameter_list|(
name|File
name|f
parameter_list|,
name|int
name|seed
parameter_list|,
name|TemporaryFolder
name|folder
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|temp
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
name|seed
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Uploaded file content differs"
argument_list|,
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|temp
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

