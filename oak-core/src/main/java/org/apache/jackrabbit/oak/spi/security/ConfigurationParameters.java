begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * ConfigurationParameters is a convenience class that allows typed access to configuration properties. It implements  * the {@link Map} interface but is immutable.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ConfigurationParameters
implements|implements
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
block|{
comment|/**      * internal logger      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConfigurationParameters
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * An empty configuration parameters      */
specifier|public
specifier|static
specifier|final
name|ConfigurationParameters
name|EMPTY
init|=
operator|new
name|ConfigurationParameters
argument_list|()
decl_stmt|;
comment|/**      * internal map of the config parameters      */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
decl_stmt|;
comment|/**      * creates an empty config parameters instance.      * Note: the constructor is private to avoid creation of empty maps.      */
specifier|private
name|ConfigurationParameters
parameter_list|()
block|{
name|this
operator|.
name|options
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates an config parameter instance.      * Note: the constructor is private to avoid creation of empty maps.      * @param options the source options.      */
specifier|private
name|ConfigurationParameters
parameter_list|(
annotation|@
name|Nonnull
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|options
parameter_list|)
block|{
name|this
operator|.
name|options
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new configuration parameters instance by merging all {@code params} sequentially.      * I.e. property define in subsequent arguments overwrite the ones before.      *      * @param params source parameters to merge      * @return merged configuration parameters or {@link #EMPTY} if all source params were empty.      */
annotation|@
name|Nonnull
specifier|public
specifier|static
name|ConfigurationParameters
name|of
parameter_list|(
annotation|@
name|Nonnull
name|ConfigurationParameters
modifier|...
name|params
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ConfigurationParameters
name|cp
range|:
name|params
control|)
block|{
name|m
operator|.
name|putAll
argument_list|(
name|cp
operator|.
name|options
argument_list|)
expr_stmt|;
block|}
return|return
name|m
operator|.
name|isEmpty
argument_list|()
condition|?
name|EMPTY
else|:
operator|new
name|ConfigurationParameters
argument_list|(
name|m
argument_list|)
return|;
block|}
comment|/**      * Creates new a configuration parameters instance by copying the given properties.      * @param properties source properties      * @return configuration parameters or {@link #EMPTY} if the source properties were empty.      */
annotation|@
name|Nonnull
specifier|public
specifier|static
name|ConfigurationParameters
name|of
parameter_list|(
annotation|@
name|Nonnull
name|Properties
name|properties
parameter_list|)
block|{
if|if
condition|(
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|EMPTY
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|properties
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|properties
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|options
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ConfigurationParameters
argument_list|(
name|options
argument_list|)
return|;
block|}
comment|/**      * Creates new a configuration parameters instance by copying the given properties.      * @param properties source properties      * @return configuration parameters or {@link #EMPTY} if the source properties were empty.      */
annotation|@
name|Nonnull
specifier|public
specifier|static
name|ConfigurationParameters
name|of
parameter_list|(
annotation|@
name|Nonnull
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
if|if
condition|(
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|EMPTY
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|properties
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|properties
operator|.
name|keys
argument_list|()
init|;
name|keys
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
name|keys
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|options
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ConfigurationParameters
argument_list|(
name|options
argument_list|)
return|;
block|}
comment|/**      * Creates new a configuration parameters instance by copying the given map.      * @param map source map      * @return configuration parameters or {@link #EMPTY} if the source map was empty.      */
annotation|@
name|Nonnull
specifier|public
specifier|static
name|ConfigurationParameters
name|of
parameter_list|(
annotation|@
name|Nonnull
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
parameter_list|)
block|{
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|EMPTY
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|options
operator|.
name|put
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ConfigurationParameters
argument_list|(
name|options
argument_list|)
return|;
block|}
comment|/**      * Returns {@code true} if this instance contains a configuration entry with      * the specified key irrespective of the defined value; {@code false} otherwise.      *      * @param key The key to be tested.      * @return {@code true} if this instance contains a configuration entry with      * the specified key irrespective of the defined value; {@code false} otherwise.      */
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|Nonnull
name|String
name|key
parameter_list|)
block|{
return|return
name|options
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * Returns the value of the configuration entry with the given {@code key}      * applying the following rules:      *      *<ul>      *<li>If this instance doesn't contain a configuration entry with that      *     key the specified {@code defaultValue} will be returned.</li>      *<li>If {@code defaultValue} is {@code null} the original value will      *     be returned.</li>      *<li>If the configured value is {@code null} this method will always      *     return {@code null}.</li>      *<li>If neither {@code defaultValue} nor the configured value is      *     {@code null} an attempt is made to convert the configured value to      *     match the type of the default value.</li>      *</ul>      *      * @param key The name of the configuration option.      * @param defaultValue The default value to return if no such entry exists      * or to use for conversion.      * @param targetClass The target class      * @return The original or converted configuration value or {@code null}.      */
annotation|@
name|CheckForNull
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getConfigValue
parameter_list|(
annotation|@
name|Nonnull
name|String
name|key
parameter_list|,
annotation|@
name|Nullable
name|T
name|defaultValue
parameter_list|,
annotation|@
name|Nullable
name|Class
argument_list|<
name|T
argument_list|>
name|targetClass
parameter_list|)
block|{
if|if
condition|(
name|options
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|convert
argument_list|(
name|options
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|defaultValue
argument_list|,
name|targetClass
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|defaultValue
return|;
block|}
block|}
comment|/**      * Returns the value of the configuration entry with the given {@code key}      * applying the following rules:      *      *<ul>      *<li>If this instance doesn't contain a configuration entry with that      *     key, or if the entry is {@code null}, the specified {@code defaultValue} will be returned.</li>      *<li>If the configured value is not {@code null} an attempt is made to convert the configured value to      *     match the type of the default value.</li>      *</ul>      *      * @param key The name of the configuration option.      * @param defaultValue The default value to return if no such entry exists      * or to use for conversion.      * @return The original or converted configuration value or {@code null}.      */
annotation|@
name|Nonnull
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getConfigValue
parameter_list|(
annotation|@
name|Nonnull
name|String
name|key
parameter_list|,
annotation|@
name|Nonnull
name|T
name|defaultValue
parameter_list|)
block|{
name|Object
name|property
init|=
name|options
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
else|else
block|{
name|T
name|value
init|=
name|convert
argument_list|(
name|property
argument_list|,
name|defaultValue
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
name|defaultValue
else|:
name|value
return|;
block|}
block|}
comment|//--------------------------------------------------------< private>---
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Nullable
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|convert
parameter_list|(
annotation|@
name|Nullable
name|Object
name|configProperty
parameter_list|,
annotation|@
name|Nullable
name|T
name|defaultValue
parameter_list|,
annotation|@
name|Nullable
name|Class
argument_list|<
name|T
argument_list|>
name|targetClass
parameter_list|)
block|{
if|if
condition|(
name|configProperty
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|str
init|=
name|configProperty
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Class
name|clazz
init|=
name|targetClass
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
name|clazz
operator|=
operator|(
name|defaultValue
operator|==
literal|null
operator|)
condition|?
name|configProperty
operator|.
name|getClass
argument_list|()
else|:
name|defaultValue
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|configProperty
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|configProperty
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|==
name|String
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|str
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|==
name|Integer
operator|.
name|class
operator|||
name|clazz
operator|==
name|int
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|Integer
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|==
name|Long
operator|.
name|class
operator|||
name|clazz
operator|==
name|long
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|Long
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|==
name|Float
operator|.
name|class
operator|||
name|clazz
operator|==
name|float
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|Float
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|==
name|Double
operator|.
name|class
operator|||
name|clazz
operator|==
name|double
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|Double
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|==
name|Boolean
operator|.
name|class
operator|||
name|clazz
operator|==
name|boolean
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|Boolean
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
return|;
block|}
else|else
block|{
comment|// unsupported target type
name|log
operator|.
name|warn
argument_list|(
literal|"Unsupported target type {} for value {}"
argument_list|,
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|str
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot convert config entry "
operator|+
name|str
operator|+
literal|" to "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid value {}; cannot be parsed into {}"
argument_list|,
name|str
argument_list|,
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot convert config entry "
operator|+
name|str
operator|+
literal|" to "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|//-----------------------------------------------------------------------------------< Map interface delegation>---
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|options
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|options
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|options
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|options
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|options
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|Object
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
comment|// we rely on the immutability of the delegated map to throw the correct exceptions.
return|return
name|options
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|Object
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
comment|// we rely on the immutability of the delegated map to throw the correct exceptions.
return|return
name|options
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|String
argument_list|,
name|?
argument_list|>
name|m
parameter_list|)
block|{
comment|// we rely on the immutability of the delegated map to throw the correct exceptions.
name|options
operator|.
name|putAll
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
comment|// we rely on the immutability of the delegated map to throw the correct exceptions.
name|options
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
name|options
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|()
block|{
return|return
name|options
operator|.
name|values
argument_list|()
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
return|return
name|options
operator|.
name|entrySet
argument_list|()
return|;
block|}
block|}
end_class

end_unit

