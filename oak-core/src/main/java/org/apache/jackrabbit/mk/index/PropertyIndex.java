begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|simple
operator|.
name|NodeImpl
import|;
end_import

begin_comment
comment|/**  * A node handler that maps the property value to the key, and the path of the  * node to the value. Only string and numbers are indexes (arrays, true, false,  * and null are not indexes).  */
end_comment

begin_class
specifier|public
class|class
name|PropertyIndex
implements|implements
name|Index
block|{
specifier|private
specifier|final
name|Indexer
name|indexer
decl_stmt|;
specifier|private
specifier|final
name|BTree
name|tree
decl_stmt|;
specifier|private
specifier|final
name|String
name|propertyName
decl_stmt|;
name|PropertyIndex
parameter_list|(
name|Indexer
name|indexer
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|boolean
name|unique
parameter_list|)
block|{
name|this
operator|.
name|indexer
operator|=
name|indexer
expr_stmt|;
name|this
operator|.
name|propertyName
operator|=
name|propertyName
expr_stmt|;
name|this
operator|.
name|tree
operator|=
operator|new
name|BTree
argument_list|(
name|indexer
argument_list|,
name|Indexer
operator|.
name|TYPE_PROPERTY
operator|+
name|propertyName
operator|+
operator|(
name|unique
condition|?
literal|","
operator|+
name|Indexer
operator|.
name|UNIQUE
else|:
literal|""
operator|)
argument_list|,
name|unique
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setMinSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
specifier|static
name|PropertyIndex
name|fromNodeName
parameter_list|(
name|Indexer
name|indexer
parameter_list|,
name|String
name|nodeName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|nodeName
operator|.
name|startsWith
argument_list|(
name|Indexer
operator|.
name|TYPE_PROPERTY
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|boolean
name|unique
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|nodeName
operator|.
name|endsWith
argument_list|(
name|Indexer
operator|.
name|UNIQUE
argument_list|)
condition|)
block|{
name|unique
operator|=
literal|true
expr_stmt|;
name|nodeName
operator|=
name|nodeName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|nodeName
operator|.
name|length
argument_list|()
operator|-
name|Indexer
operator|.
name|UNIQUE
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|property
init|=
name|nodeName
operator|.
name|substring
argument_list|(
name|Indexer
operator|.
name|TYPE_PROPERTY
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|PropertyIndex
argument_list|(
name|indexer
argument_list|,
name|property
argument_list|,
name|unique
argument_list|)
return|;
block|}
specifier|public
name|String
name|getPropertyName
parameter_list|()
block|{
return|return
name|propertyName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIndexNodeName
parameter_list|()
block|{
return|return
name|tree
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addOrRemoveNode
parameter_list|(
name|NodeImpl
name|node
parameter_list|,
name|boolean
name|add
parameter_list|)
block|{
name|String
name|value
init|=
name|node
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|addOrRemoveRaw
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|,
name|value
argument_list|,
name|add
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addOrRemoveProperty
parameter_list|(
name|String
name|nodePath
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|add
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|propertyName
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|addOrRemoveRaw
argument_list|(
name|nodePath
argument_list|,
name|value
argument_list|,
name|add
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addOrRemoveRaw
parameter_list|(
name|String
name|nodePath
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|add
parameter_list|)
block|{
name|JsopTokenizer
name|t
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
name|JsopReader
operator|.
name|STRING
argument_list|)
operator|||
name|t
operator|.
name|matches
argument_list|(
name|JsopReader
operator|.
name|NUMBER
argument_list|)
condition|)
block|{
name|String
name|v
init|=
name|t
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|addOrRemove
argument_list|(
name|nodePath
argument_list|,
name|v
argument_list|,
name|add
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addOrRemove
parameter_list|(
name|String
name|nodePath
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|add
parameter_list|)
block|{
if|if
condition|(
name|add
condition|)
block|{
name|tree
operator|.
name|add
argument_list|(
name|value
argument_list|,
name|nodePath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tree
operator|.
name|remove
argument_list|(
name|value
argument_list|,
name|nodePath
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get the path for the given property value. For unique indexes, this will      * return the only path (if found). For non-unique indexes, this will return      * only one path.      *      * @param propertyValue the value      * @param revision the revision      * @return the path, or null if not found      */
specifier|public
name|String
name|getPath
parameter_list|(
name|String
name|propertyValue
parameter_list|,
name|String
name|revision
parameter_list|)
block|{
name|indexer
operator|.
name|updateUntil
argument_list|(
name|revision
argument_list|)
expr_stmt|;
name|Cursor
name|c
init|=
name|tree
operator|.
name|findFirst
argument_list|(
name|propertyValue
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|key
init|=
name|c
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|propertyValue
argument_list|)
condition|)
block|{
return|return
name|c
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Get an iterator over the paths for the given property value. For unique      * indexes, the iterator will contain at most one element.      *      * @param propertyValue the value, or null to return all indexed rows      * @param revision the revision      * @return an iterator of the paths (an empty iterator if not found)      */
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getPaths
parameter_list|(
name|String
name|propertyValue
parameter_list|,
name|String
name|revision
parameter_list|)
block|{
name|indexer
operator|.
name|updateUntil
argument_list|(
name|revision
argument_list|)
expr_stmt|;
name|Cursor
name|c
init|=
name|tree
operator|.
name|findFirst
argument_list|(
name|propertyValue
argument_list|)
decl_stmt|;
return|return
operator|new
name|Cursor
operator|.
name|RangeIterator
argument_list|(
name|c
argument_list|,
name|propertyValue
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isUnique
parameter_list|()
block|{
return|return
name|tree
operator|.
name|isUnique
argument_list|()
return|;
block|}
block|}
end_class

end_unit

