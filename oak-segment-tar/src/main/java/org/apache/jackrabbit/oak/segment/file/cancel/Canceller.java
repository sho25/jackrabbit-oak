begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|cancel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BooleanSupplier
import|;
end_import

begin_comment
comment|/**  * Represents a way to check for a cancellation request. Users of this class  * (possibly cancelable, long-running operations) should periodically check  * whether a cancellation request has been received.  */
end_comment

begin_class
specifier|public
class|class
name|Canceller
block|{
specifier|private
specifier|static
specifier|final
name|Canceller
name|ROOT
init|=
operator|new
name|Canceller
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Cancellation
name|NOPE
init|=
operator|new
name|Cancellation
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**      * Create a new {@link Canceller} which is trivially empty. The returned      * {@link Canceller} will never relay a positive cancellation request.      *      * @return an instance of {@link Canceller}.      */
specifier|public
specifier|static
name|Canceller
name|newCanceller
parameter_list|()
block|{
return|return
name|ROOT
return|;
block|}
name|Canceller
parameter_list|()
block|{
comment|// Prevent instantiation outside of this package.
block|}
comment|/**      * Check if cancellation has been requested. This method should be invoked      * periodically, and the returned {@link Cancellation} should be inspected      * and reacted upon.      *      * @return an instance of {@link Cancellation}.      */
specifier|public
name|Cancellation
name|check
parameter_list|()
block|{
return|return
name|NOPE
return|;
block|}
comment|/**      * Return a new {@link Canceller} based on a boolean predicate. The returned      * instance will relay a positive cancellation request when either the      * supplied boolean predicate is {@code true} or this {@link Canceller} is      * cancelled.      *      * @param reason    The reason associated to the boolean condition.      * @param condition A boolean predicate.      * @return a new instance of {@link Canceller}.      */
specifier|public
name|Canceller
name|withCondition
parameter_list|(
name|String
name|reason
parameter_list|,
name|BooleanSupplier
name|condition
parameter_list|)
block|{
return|return
operator|new
name|ConditionCanceller
argument_list|(
name|this
argument_list|,
name|reason
argument_list|,
name|condition
argument_list|)
return|;
block|}
comment|/**      * Return a new {@link Canceller} based on time duration. The returned      * instance will relay a positive cancellation request when either the      * duration expires or this {@link Canceller} is cancelled.      *      * @param reason   The reason associated to the boolean condition.      * @param duration The duration for the timeout.      * @param unit     The time unit for the duration.      * @return a new instance of {@link Canceller}.      */
specifier|public
name|Canceller
name|withTimeout
parameter_list|(
name|String
name|reason
parameter_list|,
name|long
name|duration
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
operator|new
name|TimeoutCanceller
argument_list|(
name|this
argument_list|,
name|reason
argument_list|,
name|duration
argument_list|,
name|unit
argument_list|)
return|;
block|}
comment|/**      * Create a new {@link Canceller} based on this {@link Canceller}. The      * returned instance will be canceled when this instance is canceled, but      * will never transition back to an "uncanceled" state.      *      * @return an new instance of {@link Canceller}.      */
specifier|public
name|Canceller
name|withShortCircuit
parameter_list|()
block|{
return|return
operator|new
name|ShortCircuitCanceller
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
end_class

end_unit

