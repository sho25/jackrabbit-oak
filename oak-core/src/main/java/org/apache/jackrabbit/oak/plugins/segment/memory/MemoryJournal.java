begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|memory
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Journal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|MergeDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|RecordId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_class
specifier|public
class|class
name|MemoryJournal
implements|implements
name|Journal
block|{
specifier|private
specifier|final
name|SegmentStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|Journal
name|parent
decl_stmt|;
specifier|private
name|RecordId
name|base
decl_stmt|;
specifier|private
name|RecordId
name|head
decl_stmt|;
specifier|public
name|MemoryJournal
parameter_list|(
name|SegmentStore
name|store
parameter_list|,
name|NodeState
name|head
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|checkNotNull
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
literal|null
expr_stmt|;
name|SegmentWriter
name|writer
init|=
operator|new
name|SegmentWriter
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|RecordId
name|id
init|=
name|writer
operator|.
name|writeNode
argument_list|(
name|head
argument_list|)
operator|.
name|getRecordId
argument_list|()
decl_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|head
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|MemoryJournal
parameter_list|(
name|SegmentStore
name|store
parameter_list|,
name|String
name|parent
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|checkNotNull
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|store
operator|.
name|getJournal
argument_list|(
name|checkNotNull
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|this
operator|.
name|parent
operator|.
name|getHead
argument_list|()
expr_stmt|;
name|this
operator|.
name|head
operator|=
name|base
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|RecordId
name|getHead
parameter_list|()
block|{
return|return
name|head
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|setHead
parameter_list|(
name|RecordId
name|base
parameter_list|,
name|RecordId
name|head
parameter_list|)
block|{
if|if
condition|(
name|checkNotNull
argument_list|(
name|base
argument_list|)
operator|.
name|equals
argument_list|(
name|this
operator|.
name|head
argument_list|)
condition|)
block|{
name|this
operator|.
name|head
operator|=
name|checkNotNull
argument_list|(
name|head
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|merge
parameter_list|()
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|NodeState
name|before
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|store
argument_list|,
name|base
argument_list|)
decl_stmt|;
name|NodeState
name|after
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|store
argument_list|,
name|head
argument_list|)
decl_stmt|;
name|SegmentWriter
name|writer
init|=
operator|new
name|SegmentWriter
argument_list|(
name|store
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|parent
operator|.
name|setHead
argument_list|(
name|base
argument_list|,
name|head
argument_list|)
condition|)
block|{
name|RecordId
name|newBase
init|=
name|parent
operator|.
name|getHead
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|store
argument_list|,
name|newBase
argument_list|)
operator|.
name|builder
argument_list|()
decl_stmt|;
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
operator|new
name|MergeDiff
argument_list|(
name|builder
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|state
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|RecordId
name|newHead
init|=
name|writer
operator|.
name|writeNode
argument_list|(
name|state
argument_list|)
operator|.
name|getRecordId
argument_list|()
decl_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|base
operator|=
name|newBase
expr_stmt|;
name|head
operator|=
name|newHead
expr_stmt|;
block|}
name|base
operator|=
name|head
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

