begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|ExerciseUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|NotExecutableException
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: Authorization (Access Control Management)  * =============================================================================  *  * Title: Access Control List in Detail  * -----------------------------------------------------------------------------  *  * Goal:  * Learn to use additional ways to modify an JCR or Jackrabbit ACL.  *  * Exercises:  *  * - {@link #testEmptyList()}  *   Get familiar with the concept of an empty ACL and what methods the Jackrabbit  *   API extensions provides. Fix the test case.  *  *   Question: Can you set an empty ACL?  *   Question: If that works, what is the nature of the ACL if you retrieve it using AccessControlManager#getPolicies()?  *  * - {@link #testAddEntries()}  *   Use this test to play with the different ways of adding one (or multiple) ACE  *   to the list. Verify your expectations and keep an eye on the size of the ACL.  *  * - {@link #testRemoveEntries()}  *   Remove one ACE that has been added to the policy before and verify the result.  *  * - {@link #testReorderEntries()}  *   Reorder the ACEs created for this test according to the instructions in the  *   test. Make sure the test passes.  *  * - {@link #testGetPath()}  *   Test illustrating the {@link org.apache.jackrabbit.api.security.JackrabbitAccessControlList#getPath()}.  *   Fill in the expected path and explain the meaning of the path  *  *   Question: Can you use the path exposed by the ACL to set the policy? If not fix the test accordingly  *  *  * Related Exercises:  * -----------------------------------------------------------------------------  *  * - {@link L5_AccessControlListImplTest}  * - {@link L7_RestrictionsTest}  * - {@link org.apache.jackrabbit.oak.security.privilege.L3_BuiltInPrivilegesTest}  * - {@link org.apache.jackrabbit.oak.security.authorization.permission.L4_PrivilegesAndPermissionsTest}  *  *  *</pre>  *  * @see javax.jcr.security.AccessControlList  * @see org.apache.jackrabbit.api.security.JackrabbitAccessControlList  * @see javax.jcr.security.AccessControlEntry  * @see org.apache.jackrabbit.api.security.JackrabbitAccessControlEntry  */
end_comment

begin_class
specifier|public
class|class
name|L3_AccessControlListTest
extends|extends
name|AbstractJCRTest
block|{
specifier|private
name|AccessControlManager
name|acMgr
decl_stmt|;
specifier|private
name|JackrabbitAccessControlList
name|acl
decl_stmt|;
specifier|private
name|Principal
name|testPrincipal
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|acMgr
operator|=
name|superuser
operator|.
name|getAccessControlManager
argument_list|()
expr_stmt|;
name|testPrincipal
operator|=
name|ExerciseUtility
operator|.
name|createTestGroup
argument_list|(
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
argument_list|)
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|acl
operator|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|superuser
argument_list|,
name|testRoot
argument_list|)
expr_stmt|;
if|if
condition|(
name|acl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Authorizable
name|testGroup
init|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
operator|.
name|getAuthorizable
argument_list|(
name|testPrincipal
argument_list|)
decl_stmt|;
if|if
condition|(
name|testGroup
operator|!=
literal|null
condition|)
block|{
name|testGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testEmptyList
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|AccessControlEntry
index|[]
name|entries
init|=
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
decl_stmt|;
name|int
name|expectedLength
init|=
operator|-
literal|1
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|entries
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|expectedSize
init|=
operator|-
literal|1
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|acl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|expectedIsEmpty
init|=
literal|false
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedIsEmpty
argument_list|,
name|acl
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// EXERCISE: can you set an empty ACL? if not fix the test accordingly.
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testRoot
argument_list|,
name|acl
argument_list|)
expr_stmt|;
comment|// EXERCISE: retrieve the policy with acMgr.getPolicies(). what will the ACL look like?
block|}
specifier|public
name|void
name|testAddEntries
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Privilege
index|[]
name|privileges1
init|=
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|,
name|Privilege
operator|.
name|JCR_WRITE
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|privileges2
init|=
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|Privilege
operator|.
name|JCR_ALL
argument_list|)
decl_stmt|;
name|Principal
name|principal1
init|=
name|testPrincipal
decl_stmt|;
name|Principal
name|principal2
init|=
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|// EXERCISE : make use of the different variants provided by JCR and Jackrabbit API to set ACEs to the list.
comment|// EXERCISE : verify the expected result and test the size/nature of the ACL afterwards
comment|// HINT the test AccessControlListImpl test will make you familiar with some implementation details
block|}
specifier|public
name|void
name|testRemoveEntry
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|assertTrue
argument_list|(
name|AccessControlUtils
operator|.
name|addAccessControlEntry
argument_list|(
name|superuser
argument_list|,
name|testRoot
argument_list|,
name|testPrincipal
argument_list|,
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_READ
block|}
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|AccessControlUtils
operator|.
name|addAccessControlEntry
argument_list|(
name|superuser
argument_list|,
name|testRoot
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_READ
block|}
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// EXERCISE remove the Everyone-ACE from the list and verify that the list still contains the entry for testPrincipal.
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|superuser
argument_list|,
name|testRoot
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|acl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|acl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReorderEntries
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|read
init|=
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|,
name|Privilege
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|write
init|=
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|Privilege
operator|.
name|JCR_WRITE
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|write
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|write
argument_list|)
expr_stmt|;
name|AccessControlEntry
index|[]
name|entries
init|=
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|entries
operator|.
name|length
argument_list|)
expr_stmt|;
name|AccessControlEntry
name|first
init|=
name|entries
index|[
literal|0
index|]
decl_stmt|;
name|AccessControlEntry
name|second
init|=
name|entries
index|[
literal|1
index|]
decl_stmt|;
name|AccessControlEntry
name|third
init|=
name|entries
index|[
literal|2
index|]
decl_stmt|;
comment|// EXERCISE: reorder 'second' to the first position
name|entries
operator|=
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|second
argument_list|,
name|entries
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|first
argument_list|,
name|entries
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|third
argument_list|,
name|entries
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// EXERCISE reorder 'third' before 'first'
name|entries
operator|=
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|second
argument_list|,
name|entries
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|third
argument_list|,
name|entries
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|first
argument_list|,
name|entries
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// EXERCISE reorder 'second' to the end of the list
name|entries
operator|=
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|third
argument_list|,
name|entries
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|first
argument_list|,
name|entries
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|second
argument_list|,
name|entries
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetPath
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|expectedPath
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedPath
argument_list|,
name|acl
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// EXERCISE: does that the following code work? why? if not fix the code
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|,
name|acl
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

