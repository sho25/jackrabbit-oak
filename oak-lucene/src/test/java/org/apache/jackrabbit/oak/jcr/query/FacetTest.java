begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|query
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|RowIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|query
operator|.
name|AbstractQueryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FulltextIndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|facet
operator|.
name|FacetResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
import|;
end_import

begin_comment
comment|/**  * Test for faceting capabilities via JCR API  */
end_comment

begin_class
specifier|public
class|class
name|FacetTest
extends|extends
name|AbstractQueryTest
block|{
specifier|public
specifier|static
specifier|final
name|String
name|FACET_CONFING_PROP_PATH
init|=
literal|"/oak:index/luceneGlobal/indexRules/nt:base/properties/allProps/facets"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FACET_CONFING_NODE_PATH
init|=
literal|"/oak:index/luceneGlobal/facets"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_CONFING_NODE_PATH
init|=
literal|"/oak:index/luceneGlobal"
decl_stmt|;
annotation|@
name|Before
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
if|if
condition|(
name|superuser
operator|.
name|itemExists
argument_list|(
name|FACET_CONFING_PROP_PATH
argument_list|)
condition|)
block|{
name|superuser
operator|.
name|getItem
argument_list|(
name|FACET_CONFING_PROP_PATH
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|Node
name|props
init|=
name|superuser
operator|.
name|getNode
argument_list|(
literal|"/oak:index/luceneGlobal/indexRules/nt:base/properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|hasNode
argument_list|(
literal|"relative"
argument_list|)
condition|)
block|{
name|props
operator|.
name|getNode
argument_list|(
literal|"relative"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|Node
name|node
init|=
name|props
operator|.
name|addNode
argument_list|(
literal|"relative"
argument_list|)
decl_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"jc/text"
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_FACETS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|node
operator|=
name|props
operator|.
name|getNode
argument_list|(
literal|"allProps"
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_FACETS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|markIndexForReindex
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|superuser
operator|.
name|nodeExists
argument_list|(
name|FACET_CONFING_NODE_PATH
argument_list|)
condition|)
block|{
name|node
operator|=
name|superuser
operator|.
name|getNode
argument_list|(
name|INDEX_CONFING_NODE_PATH
argument_list|)
expr_stmt|;
name|node
operator|.
name|addNode
argument_list|(
name|FulltextIndexConstants
operator|.
name|FACETS
argument_list|)
expr_stmt|;
name|markIndexForReindex
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|superuser
operator|.
name|nodeExists
argument_list|(
literal|"/oak:index/luceneGlobal/facets"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|superuser
operator|.
name|nodeExists
argument_list|(
name|FACET_CONFING_PROP_PATH
argument_list|)
condition|)
block|{
name|superuser
operator|.
name|getProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_FACETS
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|superuser
operator|.
name|nodeExists
argument_list|(
literal|"/oak:index/luceneGlobal/indexRules/nt:base/properties/relative"
argument_list|)
condition|)
block|{
name|superuser
operator|.
name|removeItem
argument_list|(
literal|"/oak:index/luceneGlobal/indexRules/nt:base/properties/relative"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|superuser
operator|.
name|nodeExists
argument_list|(
name|FACET_CONFING_NODE_PATH
argument_list|)
condition|)
block|{
name|superuser
operator|.
name|getNode
argument_list|(
name|FACET_CONFING_NODE_PATH
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testFacetRetrieval
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|superuser
decl_stmt|;
name|Node
name|n1
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node1"
argument_list|)
decl_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|Node
name|n2
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node2"
argument_list|)
decl_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"hallo"
argument_list|)
expr_stmt|;
name|Node
name|n3
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node3"
argument_list|)
decl_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"oh hallo"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|String
name|sql2
init|=
literal|"select [jcr:path], [rep:facet(text)] from [nt:base] "
operator|+
literal|"where contains([text], 'hello OR hallo') order by [jcr:path]"
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|sql2
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|contains
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
operator|.
name|Facet
argument_list|>
name|facets
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facets
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hallo"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"oh hallo"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|NodeIterator
name|nodes
init|=
name|result
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFacetRetrievalXPath
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|superuser
decl_stmt|;
name|Node
name|n1
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node1"
argument_list|)
decl_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|Node
name|n2
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node2"
argument_list|)
decl_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"hallo"
argument_list|)
expr_stmt|;
name|Node
name|n3
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node3"
argument_list|)
decl_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"oh hallo"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|String
name|xpath
init|=
literal|"//*[jcr:contains(@text, 'hello OR hallo')]/(rep:facet(text)) order by jcr:path"
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|xpath
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|contains
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
operator|.
name|Facet
argument_list|>
name|facets
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facets
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hallo"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"oh hallo"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|NodeIterator
name|nodes
init|=
name|result
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFacetRetrievalRelativeProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|superuser
decl_stmt|;
name|Node
name|n1
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node1"
argument_list|)
decl_stmt|;
name|n1
operator|.
name|addNode
argument_list|(
literal|"jc"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|Node
name|n2
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node2"
argument_list|)
decl_stmt|;
name|n2
operator|.
name|addNode
argument_list|(
literal|"jc"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"hallo"
argument_list|)
expr_stmt|;
name|Node
name|n3
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node3"
argument_list|)
decl_stmt|;
name|n3
operator|.
name|addNode
argument_list|(
literal|"jc"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"oh hallo"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|String
name|sql2
init|=
literal|"select [jcr:path], [rep:facet(jc/text)] from [nt:base] "
operator|+
literal|"where contains([jc/text], 'hello OR hallo') order by [jcr:path]"
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|sql2
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|contains
argument_list|(
literal|"jc/text"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
operator|.
name|Facet
argument_list|>
name|facets
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"jc/text"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facets
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hallo"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"oh hallo"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|NodeIterator
name|nodes
init|=
name|result
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFacetRetrievalRelativePropertyXPath
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|superuser
decl_stmt|;
name|Node
name|n1
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node1"
argument_list|)
decl_stmt|;
name|n1
operator|.
name|addNode
argument_list|(
literal|"jc"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|Node
name|n2
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node2"
argument_list|)
decl_stmt|;
name|n2
operator|.
name|addNode
argument_list|(
literal|"jc"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"hallo"
argument_list|)
expr_stmt|;
name|Node
name|n3
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node3"
argument_list|)
decl_stmt|;
name|n3
operator|.
name|addNode
argument_list|(
literal|"jc"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"oh hallo"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|String
name|xpath
init|=
literal|"//*[jcr:contains(jc/@text, 'hello OR hallo')]/(rep:facet(jc/text)) order by jcr:path"
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|xpath
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|contains
argument_list|(
literal|"jc/text"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
operator|.
name|Facet
argument_list|>
name|facets
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"jc/text"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facets
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hallo"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"oh hallo"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|NodeIterator
name|nodes
init|=
name|result
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFacetRetrievalMV
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|superuser
decl_stmt|;
name|Node
name|n1
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node1"
argument_list|)
decl_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"apache jackrabbit oak"
argument_list|)
expr_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
literal|"tags"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"software"
block|,
literal|"repository"
block|,
literal|"apache"
block|}
argument_list|)
expr_stmt|;
name|Node
name|n2
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node2"
argument_list|)
decl_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"oak furniture"
argument_list|)
expr_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
literal|"tags"
argument_list|,
literal|"furniture"
argument_list|)
expr_stmt|;
name|Node
name|n3
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node3"
argument_list|)
decl_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"oak cosmetics"
argument_list|)
expr_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
literal|"tags"
argument_list|,
literal|"cosmetics"
argument_list|)
expr_stmt|;
name|Node
name|n4
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node4"
argument_list|)
decl_stmt|;
name|n4
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"oak and aem"
argument_list|)
expr_stmt|;
name|n4
operator|.
name|setProperty
argument_list|(
literal|"tags"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"software"
block|,
literal|"repository"
block|,
literal|"aem"
block|}
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|String
name|sql2
init|=
literal|"select [jcr:path], [rep:facet(tags)] from [nt:base] "
operator|+
literal|"where contains([jcr:title], 'oak') order by [jcr:path]"
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|sql2
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|contains
argument_list|(
literal|"tags"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
operator|.
name|Facet
argument_list|>
name|facets
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"tags"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facets
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"repository"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"software"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aem"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"apache"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cosmetics"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"furniture"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|NodeIterator
name|nodes
init|=
name|result
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFacetRetrievalWithAnonymousUser
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|superuser
decl_stmt|;
name|Node
name|n1
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node1"
argument_list|)
decl_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|Node
name|n2
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node2"
argument_list|)
decl_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"hallo"
argument_list|)
expr_stmt|;
name|Node
name|n3
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node3"
argument_list|)
decl_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"oh hallo"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|session
operator|=
name|getHelper
argument_list|()
operator|.
name|getReadOnlySession
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|String
name|sql2
init|=
literal|"select [jcr:path], [rep:facet(text)] from [nt:base] "
operator|+
literal|"where contains([text], 'hello OR hallo') order by [jcr:path]"
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|sql2
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|contains
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
operator|.
name|Facet
argument_list|>
name|facets
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facets
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hallo"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"oh hallo"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|NodeIterator
name|nodes
init|=
name|result
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFacetRetrieval2
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|superuser
decl_stmt|;
name|Node
name|n1
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node1"
argument_list|)
decl_stmt|;
name|String
name|pn
init|=
literal|"jcr:title"
decl_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|Node
name|n2
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node2"
argument_list|)
decl_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo"
argument_list|)
expr_stmt|;
name|Node
name|n3
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node3"
argument_list|)
decl_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"oh hallo"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|String
name|sql2
init|=
literal|"select [jcr:path], [rep:facet("
operator|+
name|pn
operator|+
literal|")] from [nt:base] "
operator|+
literal|"where contains(["
operator|+
name|pn
operator|+
literal|"], 'hallo') order by [jcr:path]"
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|sql2
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|contains
argument_list|(
name|pn
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
operator|.
name|Facet
argument_list|>
name|facets
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
name|pn
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facets
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hallo"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"oh hallo"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|NodeIterator
name|nodes
init|=
name|result
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMultipleFacetsRetrieval
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|superuser
decl_stmt|;
name|Node
name|n1
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node1"
argument_list|)
decl_stmt|;
name|String
name|pn
init|=
literal|"jcr:title"
decl_stmt|;
name|String
name|pn2
init|=
literal|"jcr:description"
decl_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
name|pn2
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|Node
name|n2
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node2"
argument_list|)
decl_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo"
argument_list|)
expr_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
name|pn2
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|Node
name|n3
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node3"
argument_list|)
decl_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"oh hallo"
argument_list|)
expr_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
name|pn2
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|String
name|sql2
init|=
literal|"select [jcr:path], [rep:facet("
operator|+
name|pn
operator|+
literal|")], [rep:facet("
operator|+
name|pn2
operator|+
literal|")] from [nt:base] "
operator|+
literal|"where contains(["
operator|+
name|pn
operator|+
literal|"], 'hallo') order by [jcr:path]"
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|sql2
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|contains
argument_list|(
name|pn
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|contains
argument_list|(
name|pn2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
operator|.
name|Facet
argument_list|>
name|facets
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
name|pn
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facets
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hallo"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"oh hallo"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
operator|.
name|Facet
argument_list|>
name|facets1
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
name|pn2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facets1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|facets1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|facets1
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets1
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|NodeIterator
name|nodes
init|=
name|result
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFacetRetrievalDefaultNumberOfFacets
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|superuser
decl_stmt|;
name|Node
name|n1
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node1"
argument_list|)
decl_stmt|;
name|String
name|pn
init|=
literal|"jcr:title"
decl_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hello 1"
argument_list|)
expr_stmt|;
name|Node
name|n2
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node2"
argument_list|)
decl_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 2"
argument_list|)
expr_stmt|;
name|Node
name|n3
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node3"
argument_list|)
decl_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 3"
argument_list|)
expr_stmt|;
name|Node
name|n4
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node4"
argument_list|)
decl_stmt|;
name|n4
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 4"
argument_list|)
expr_stmt|;
name|Node
name|n5
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node5"
argument_list|)
decl_stmt|;
name|n5
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 5"
argument_list|)
expr_stmt|;
name|Node
name|n6
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node6"
argument_list|)
decl_stmt|;
name|n6
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 6"
argument_list|)
expr_stmt|;
name|Node
name|n7
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node7"
argument_list|)
decl_stmt|;
name|n7
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 7"
argument_list|)
expr_stmt|;
name|Node
name|n8
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node8"
argument_list|)
decl_stmt|;
name|n8
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 8"
argument_list|)
expr_stmt|;
name|Node
name|n9
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node9"
argument_list|)
decl_stmt|;
name|n9
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 9"
argument_list|)
expr_stmt|;
name|Node
name|n10
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node10"
argument_list|)
decl_stmt|;
name|n10
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 10"
argument_list|)
expr_stmt|;
name|Node
name|n11
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node11"
argument_list|)
decl_stmt|;
name|n11
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 11"
argument_list|)
expr_stmt|;
name|Node
name|n12
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node12"
argument_list|)
decl_stmt|;
name|n12
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 12"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|String
name|sql2
init|=
literal|"select [jcr:path], [rep:facet("
operator|+
name|pn
operator|+
literal|")] from [nt:base] "
operator|+
literal|"where contains(["
operator|+
name|pn
operator|+
literal|"], 'hallo') order by [jcr:path]"
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|sql2
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|contains
argument_list|(
name|pn
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
operator|.
name|Facet
argument_list|>
name|facets
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
name|pn
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facets
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|facets
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFacetRetrievalNumberOfFacetsConfiguredHigherThanDefault
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|facetsConfig
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|FACET_CONFING_NODE_PATH
argument_list|)
decl_stmt|;
name|facetsConfig
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_FACETS_TOP_CHILDREN
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|markIndexForReindex
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|superuser
decl_stmt|;
name|Node
name|n1
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node1"
argument_list|)
decl_stmt|;
name|String
name|pn
init|=
literal|"jcr:title"
decl_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hello 1"
argument_list|)
expr_stmt|;
name|Node
name|n2
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node2"
argument_list|)
decl_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 2"
argument_list|)
expr_stmt|;
name|Node
name|n3
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node3"
argument_list|)
decl_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 3"
argument_list|)
expr_stmt|;
name|Node
name|n4
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node4"
argument_list|)
decl_stmt|;
name|n4
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 4"
argument_list|)
expr_stmt|;
name|Node
name|n5
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node5"
argument_list|)
decl_stmt|;
name|n5
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 5"
argument_list|)
expr_stmt|;
name|Node
name|n6
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node6"
argument_list|)
decl_stmt|;
name|n6
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 6"
argument_list|)
expr_stmt|;
name|Node
name|n7
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node7"
argument_list|)
decl_stmt|;
name|n7
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 7"
argument_list|)
expr_stmt|;
name|Node
name|n8
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node8"
argument_list|)
decl_stmt|;
name|n8
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 8"
argument_list|)
expr_stmt|;
name|Node
name|n9
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node9"
argument_list|)
decl_stmt|;
name|n9
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 9"
argument_list|)
expr_stmt|;
name|Node
name|n10
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node10"
argument_list|)
decl_stmt|;
name|n10
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 10"
argument_list|)
expr_stmt|;
name|Node
name|n11
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node11"
argument_list|)
decl_stmt|;
name|n11
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 11"
argument_list|)
expr_stmt|;
name|Node
name|n12
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node12"
argument_list|)
decl_stmt|;
name|n12
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 12"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|String
name|sql2
init|=
literal|"select [jcr:path], [rep:facet("
operator|+
name|pn
operator|+
literal|")] from [nt:base] "
operator|+
literal|"where contains(["
operator|+
name|pn
operator|+
literal|"], 'hallo') order by [jcr:path]"
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|sql2
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|contains
argument_list|(
name|pn
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
operator|.
name|Facet
argument_list|>
name|facets
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
name|pn
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facets
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|facets
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFacetRetrievalNumberOfFacetsConfiguredLowerThanDefault
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|facetsConfig
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|FACET_CONFING_NODE_PATH
argument_list|)
decl_stmt|;
name|facetsConfig
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_FACETS_TOP_CHILDREN
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|markIndexForReindex
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|superuser
decl_stmt|;
name|Node
name|n1
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node1"
argument_list|)
decl_stmt|;
name|String
name|pn
init|=
literal|"jcr:title"
decl_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hello 1"
argument_list|)
expr_stmt|;
name|Node
name|n2
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node2"
argument_list|)
decl_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 2"
argument_list|)
expr_stmt|;
name|Node
name|n3
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node3"
argument_list|)
decl_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 3"
argument_list|)
expr_stmt|;
name|Node
name|n4
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node4"
argument_list|)
decl_stmt|;
name|n4
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 4"
argument_list|)
expr_stmt|;
name|Node
name|n5
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node5"
argument_list|)
decl_stmt|;
name|n5
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 5"
argument_list|)
expr_stmt|;
name|Node
name|n6
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node6"
argument_list|)
decl_stmt|;
name|n6
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 6"
argument_list|)
expr_stmt|;
name|Node
name|n7
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node7"
argument_list|)
decl_stmt|;
name|n7
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 7"
argument_list|)
expr_stmt|;
name|Node
name|n8
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node8"
argument_list|)
decl_stmt|;
name|n8
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 8"
argument_list|)
expr_stmt|;
name|Node
name|n9
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node9"
argument_list|)
decl_stmt|;
name|n9
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 9"
argument_list|)
expr_stmt|;
name|Node
name|n10
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node10"
argument_list|)
decl_stmt|;
name|n10
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 10"
argument_list|)
expr_stmt|;
name|Node
name|n11
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node11"
argument_list|)
decl_stmt|;
name|n11
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 11"
argument_list|)
expr_stmt|;
name|Node
name|n12
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node12"
argument_list|)
decl_stmt|;
name|n12
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo 12"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|String
name|sql2
init|=
literal|"select [jcr:path], [rep:facet("
operator|+
name|pn
operator|+
literal|")] from [nt:base] "
operator|+
literal|"where contains(["
operator|+
name|pn
operator|+
literal|"], 'hallo') order by [jcr:path]"
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|sql2
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|contains
argument_list|(
name|pn
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
operator|.
name|Facet
argument_list|>
name|facets
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
name|pn
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facets
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|facets
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// OAK-7078
specifier|public
name|void
name|testFacetsOfResultSetThatDoesntContainDim
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|content
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"absentDimFacets"
argument_list|)
decl_stmt|;
comment|// create a document with a simple/tags property
name|Node
name|foo
init|=
name|content
operator|.
name|addNode
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|Node
name|fooSimple
init|=
name|foo
operator|.
name|addNode
argument_list|(
literal|"jc"
argument_list|)
decl_stmt|;
name|foo
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"lorem lorem"
argument_list|)
expr_stmt|;
name|fooSimple
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tag1"
block|,
literal|"tag2"
block|}
argument_list|)
expr_stmt|;
comment|// now create a document without simple/tags property
name|Node
name|bar
init|=
name|content
operator|.
name|addNode
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|bar
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"lorem ipsum"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
name|query
init|=
literal|"select [rep:facet(jc/text)] from [nt:base] where contains(*, 'ipsum')"
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|query
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|RowIterator
name|rows
init|=
name|result
operator|.
name|getRows
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bar
operator|.
name|getPath
argument_list|()
argument_list|,
name|rows
operator|.
name|nextRow
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rows
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// OAK-7975
specifier|public
name|void
name|testFacetWithNoIndexedValues
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|content
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"absentDimFacets"
argument_list|)
decl_stmt|;
name|content
operator|.
name|addNode
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"lorem ipsum"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
name|query
decl_stmt|;
name|FacetResult
name|facetResult
decl_stmt|;
name|List
argument_list|<
name|FacetResult
operator|.
name|Facet
argument_list|>
name|facets
decl_stmt|;
comment|// test with single facet column which has no indexed value yet
name|query
operator|=
literal|"select [rep:facet(jc/text)] from [nt:base] where contains(*, 'ipsum')"
expr_stmt|;
name|facetResult
operator|=
operator|new
name|FacetResult
argument_list|(
name|qm
operator|.
name|createQuery
argument_list|(
name|query
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
operator|.
name|execute
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// test with requesting multiple facet columns - one would get facets other won't
name|query
operator|=
literal|"select [rep:facet(text)], [rep:facet(jc/text)] from [nt:base] where contains(*, 'ipsum')"
expr_stmt|;
name|facetResult
operator|=
operator|new
name|FacetResult
argument_list|(
name|qm
operator|.
name|createQuery
argument_list|(
name|query
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
operator|.
name|execute
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
literal|"text"
argument_list|)
argument_list|,
name|facetResult
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|facets
operator|=
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lorem ipsum"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNoFacetsIfNoAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|deny
argument_list|(
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"test3"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"child"
argument_list|)
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|anonUser
init|=
name|getHelper
argument_list|()
operator|.
name|getReadOnlySession
argument_list|()
decl_stmt|;
name|QueryManager
name|queryManager
init|=
name|anonUser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|queryManager
operator|.
name|createQuery
argument_list|(
literal|"//*[@jcr:title]/(rep:facet(jcr:title))"
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"facetResult is null"
argument_list|,
name|facetResult
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testOnlyAllowedFacetLabelsShowUp
parameter_list|()
throws|throws
name|Exception
block|{
name|deny
argument_list|(
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"test3"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|anonUser
init|=
name|getHelper
argument_list|()
operator|.
name|getReadOnlySession
argument_list|()
decl_stmt|;
name|QueryManager
name|queryManager
init|=
name|anonUser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|queryManager
operator|.
name|createQuery
argument_list|(
literal|"//*[@jcr:title]/(rep:facet(jcr:title))"
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"facetResult is null"
argument_list|,
name|facetResult
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of dimension"
argument_list|,
literal|1
argument_list|,
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"jcr:title"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FacetResult
operator|.
name|Facet
name|facet
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"jcr:title"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected facet label"
argument_list|,
literal|"test3"
argument_list|,
name|facet
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected facet count"
argument_list|,
literal|1
argument_list|,
name|facet
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInaccessibleFacetCounts
parameter_list|()
throws|throws
name|Exception
block|{
name|deny
argument_list|(
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"test3"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"test4"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"another-test"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|anonUser
init|=
name|getHelper
argument_list|()
operator|.
name|getReadOnlySession
argument_list|()
decl_stmt|;
name|QueryManager
name|queryManager
init|=
name|anonUser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|queryManager
operator|.
name|createQuery
argument_list|(
literal|"//*[@jcr:title]/(rep:facet(jcr:title))"
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"facetResult is null"
argument_list|,
name|facetResult
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of labels"
argument_list|,
literal|2
argument_list|,
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"jcr:title"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|facets
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"jcr:title"
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|FacetResult
operator|.
name|Facet
operator|::
name|getLabel
argument_list|,
name|FacetResult
operator|.
name|Facet
operator|::
name|getCount
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected facet count for jcr:title"
argument_list|,
literal|1
argument_list|,
operator|(
name|int
operator|)
name|facets
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected facet count for jcr:title"
argument_list|,
literal|1
argument_list|,
operator|(
name|int
operator|)
name|facets
operator|.
name|get
argument_list|(
literal|"another-test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAllowedSubNodeFacet
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|deny
argument_list|(
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"parent"
argument_list|)
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"child"
argument_list|)
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|anonUser
init|=
name|getHelper
argument_list|()
operator|.
name|getReadOnlySession
argument_list|()
decl_stmt|;
name|QueryManager
name|queryManager
init|=
name|anonUser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|queryManager
operator|.
name|createQuery
argument_list|(
literal|"//*[@jcr:title]/(rep:facet(jcr:title))"
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"facetResult is null"
argument_list|,
name|facetResult
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of labels"
argument_list|,
literal|1
argument_list|,
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"jcr:title"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FacetResult
operator|.
name|Facet
name|facet
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"jcr:title"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected facet label"
argument_list|,
literal|"test"
argument_list|,
name|facet
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected facet count"
argument_list|,
literal|1
argument_list|,
name|facet
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNoIndexedFacetedQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"//*[@jcr:title]/(rep:facet(non-indexed/jcr:title))"
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
try|try
block|{
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Facet evaluation must fail if the index doesn't support the required faceted properties"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|iae
parameter_list|)
block|{
if|if
condition|(
name|iae
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IllegalArgumentException
condition|)
block|{
comment|// expected and hence ignored
block|}
else|else
block|{
throw|throw
name|iae
throw|;
block|}
block|}
name|q
operator|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"//*[@jcr:title]/(rep:facet(non-indexed1/jcr:title) | rep:facet(non-indexed2/jcr:title))"
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
expr_stmt|;
name|result
operator|=
name|q
operator|.
name|execute
argument_list|()
expr_stmt|;
try|try
block|{
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Facet evaluation must fail if the index doesn't support any of the required faceted properties"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|iae
parameter_list|)
block|{
if|if
condition|(
name|iae
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IllegalArgumentException
condition|)
block|{
comment|// expected and hence ignored
block|}
else|else
block|{
throw|throw
name|iae
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|testSomeNonIndexedFacetedQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"//*[@jcr:title]/(rep:facet(non-indexed/jcr:title) | rep:facet(jcr:title))"
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
try|try
block|{
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Facet evaluation must fail if the index doesn't support some of the required faceted properties"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|iae
parameter_list|)
block|{
if|if
condition|(
name|iae
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IllegalArgumentException
condition|)
block|{
comment|// expected and hence ignored
block|}
else|else
block|{
throw|throw
name|iae
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|testAcRelativeFacetsAccessControl
parameter_list|()
throws|throws
name|Exception
block|{
name|deny
argument_list|(
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"jc"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"test_1"
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"jc"
argument_list|)
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"test_2"
argument_list|)
expr_stmt|;
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"test3"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"jc"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"test_3"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|anonUser
init|=
name|getHelper
argument_list|()
operator|.
name|getReadOnlySession
argument_list|()
decl_stmt|;
name|QueryManager
name|queryManager
init|=
name|anonUser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|queryManager
operator|.
name|createQuery
argument_list|(
literal|"//*[jcr:contains(jc/@text, 'test')]/(rep:facet(jc/text))"
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"facetResult is null"
argument_list|,
name|facetResult
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of dimension"
argument_list|,
literal|1
argument_list|,
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"jc/text"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FacetResult
operator|.
name|Facet
name|facet
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"jc/text"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected facet label"
argument_list|,
literal|"test_3"
argument_list|,
name|facet
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected facet count"
argument_list|,
literal|1
argument_list|,
name|facet
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// OAK-7605
specifier|public
name|void
name|testDistinctUnionWithDifferentFacetsOnSubQueries
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n1
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node1"
argument_list|)
decl_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"t1"
argument_list|)
expr_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"Node1"
argument_list|)
expr_stmt|;
comment|// make sure that facet values from both ends of OR clause are different
comment|// the test is essentially that facet columns don't define uniqueness of a row
name|Node
name|n3
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node3"
argument_list|)
decl_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"t1"
argument_list|)
expr_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"Node3"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
name|xpath
init|=
literal|"//*[@text = 't1' or @name = 'Node1']/(rep:facet(text))"
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|xpath
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|RowIterator
name|rows
init|=
name|result
operator|.
name|getRows
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rows
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMergedFacetsOverUnionUniqueLabels
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n1
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node1"
argument_list|)
decl_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"t1"
argument_list|)
expr_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
literal|"x1"
argument_list|)
expr_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"Node1"
argument_list|)
expr_stmt|;
name|Node
name|n2
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node2"
argument_list|)
decl_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"t2"
argument_list|)
expr_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
literal|"x2"
argument_list|)
expr_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"Node2"
argument_list|)
expr_stmt|;
name|Node
name|n3
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node3"
argument_list|)
decl_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"t3"
argument_list|)
expr_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
literal|"x3"
argument_list|)
expr_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"Node3"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
name|xpath
init|=
literal|"//*[@name = 'Node1' or @text = 't2' or @x = 'x3']/(rep:facet(text))"
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|xpath
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected dimensions"
argument_list|,
name|newHashSet
argument_list|(
literal|"text"
argument_list|)
argument_list|,
name|facetResult
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
operator|.
name|Facet
argument_list|>
name|facets
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|facetLabels
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|FacetResult
operator|.
name|Facet
name|facet
range|:
name|facets
control|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected facet count for "
operator|+
name|facet
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|1
argument_list|,
name|facet
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|facetLabels
operator|.
name|add
argument_list|(
name|facet
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Unexpected facet labels"
argument_list|,
name|newHashSet
argument_list|(
literal|"t1"
argument_list|,
literal|"t2"
argument_list|,
literal|"t3"
argument_list|)
argument_list|,
name|facetLabels
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMergedFacetsOverUnionSummingCount
parameter_list|()
throws|throws
name|Exception
block|{
comment|// the distribution of nodes with t1 and t2 are intentionally across first and second set (below)
comment|// put such that second condition turns facet count around
comment|// first set of nodes matching first condition (x1 = v1)
name|Node
name|n11
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node11"
argument_list|)
decl_stmt|;
name|n11
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"t1"
argument_list|)
expr_stmt|;
name|n11
operator|.
name|setProperty
argument_list|(
literal|"x1"
argument_list|,
literal|"v1"
argument_list|)
expr_stmt|;
name|Node
name|n12
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node12"
argument_list|)
decl_stmt|;
name|n12
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"t1"
argument_list|)
expr_stmt|;
name|n12
operator|.
name|setProperty
argument_list|(
literal|"x1"
argument_list|,
literal|"v1"
argument_list|)
expr_stmt|;
name|Node
name|n13
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node13"
argument_list|)
decl_stmt|;
name|n13
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"t2"
argument_list|)
expr_stmt|;
name|n13
operator|.
name|setProperty
argument_list|(
literal|"x1"
argument_list|,
literal|"v1"
argument_list|)
expr_stmt|;
comment|// second set of nodes matching second condition (x2 = v2)
name|Node
name|n21
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node21"
argument_list|)
decl_stmt|;
name|n21
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"t2"
argument_list|)
expr_stmt|;
name|n21
operator|.
name|setProperty
argument_list|(
literal|"x2"
argument_list|,
literal|"v2"
argument_list|)
expr_stmt|;
name|Node
name|n22
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node22"
argument_list|)
decl_stmt|;
name|n22
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"t1"
argument_list|)
expr_stmt|;
name|n22
operator|.
name|setProperty
argument_list|(
literal|"x2"
argument_list|,
literal|"v2"
argument_list|)
expr_stmt|;
name|Node
name|n23
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node23"
argument_list|)
decl_stmt|;
name|n23
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"t1"
argument_list|)
expr_stmt|;
name|n23
operator|.
name|setProperty
argument_list|(
literal|"x2"
argument_list|,
literal|"v2"
argument_list|)
expr_stmt|;
name|Node
name|n24
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node24"
argument_list|)
decl_stmt|;
name|n24
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"t1"
argument_list|)
expr_stmt|;
name|n24
operator|.
name|setProperty
argument_list|(
literal|"x2"
argument_list|,
literal|"v2"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
name|xpath
init|=
literal|"//*[@x1 = 'v1' or @x2 = 'v2']/(rep:facet(text))"
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|xpath
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected dimensions"
argument_list|,
name|newHashSet
argument_list|(
literal|"text"
argument_list|)
argument_list|,
name|facetResult
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
operator|.
name|Facet
argument_list|>
name|facets
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect facet label list size"
argument_list|,
literal|2
argument_list|,
name|facets
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FacetResult
operator|.
name|Facet
name|facet
init|=
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"t1"
argument_list|,
name|facet
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|facet
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|facet
operator|=
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"t2"
argument_list|,
name|facet
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|facet
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Node
name|deny
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|AccessControlUtils
operator|.
name|deny
argument_list|(
name|node
argument_list|,
literal|"anonymous"
argument_list|,
name|Privilege
operator|.
name|JCR_ALL
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
specifier|public
name|Node
name|allow
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|AccessControlUtils
operator|.
name|allow
argument_list|(
name|node
argument_list|,
literal|"anonymous"
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
specifier|private
name|void
name|markIndexForReindex
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|superuser
operator|.
name|getNode
argument_list|(
literal|"/oak:index/luceneGlobal"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

