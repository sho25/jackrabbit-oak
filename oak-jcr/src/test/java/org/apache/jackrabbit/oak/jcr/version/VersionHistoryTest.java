begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|version
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionHistory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_comment
comment|/**  * Contains {@link VersionHistory} related tests.  */
end_comment

begin_class
specifier|public
class|class
name|VersionHistoryTest
extends|extends
name|AbstractJCRTest
block|{
specifier|private
name|VersionManager
name|versionManager
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|versionManager
operator|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testJcrVersionHistoryProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|n
operator|.
name|addMixin
argument_list|(
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|n
operator|.
name|hasProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_VERSIONHISTORY
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetVersionHistoryFromNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|n
operator|.
name|addMixin
argument_list|(
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|VersionHistory
name|vh
init|=
name|n
operator|.
name|getVersionHistory
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|vh
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetVersionHistory
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|n
operator|.
name|addMixin
argument_list|(
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|VersionHistory
name|vh
init|=
name|versionManager
operator|.
name|getVersionHistory
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|vh
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetVersionHistory2
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|n
operator|.
name|addMixin
argument_list|(
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|s
init|=
name|getHelper
argument_list|()
operator|.
name|getSuperuserSession
argument_list|()
decl_stmt|;
try|try
block|{
name|VersionHistory
name|vh
init|=
name|s
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
operator|.
name|getVersionHistory
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|vh
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetVersionHistoryNodeByUUID
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|n
operator|.
name|addMixin
argument_list|(
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Node
name|vh
init|=
name|superuser
operator|.
name|getNodeByUUID
argument_list|(
name|n
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_VERSIONHISTORY
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|vh
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetVersionHistoryAfterMove
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|node1
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|)
decl_stmt|;
name|node1
operator|.
name|addMixin
argument_list|(
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Node
name|node2
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|)
decl_stmt|;
name|String
name|destPath
init|=
name|node2
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
name|nodeName3
decl_stmt|;
name|superuser
operator|.
name|move
argument_list|(
name|node1
operator|.
name|getPath
argument_list|()
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|superuser
operator|.
name|nodeExists
argument_list|(
name|destPath
argument_list|)
argument_list|)
expr_stmt|;
name|VersionHistory
name|vh
init|=
name|versionManager
operator|.
name|getVersionHistory
argument_list|(
name|destPath
argument_list|)
decl_stmt|;
block|}
specifier|public
name|void
name|testGetNodeByIdentifier
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|n
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|n
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|VersionManager
name|vMgr
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|vMgr
operator|.
name|getVersionHistory
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Session.getNodeByIdentifier() did not return VersionHistory object for a nt:versionHistory node."
argument_list|,
name|superuser
operator|.
name|getNodeByIdentifier
argument_list|(
name|id
argument_list|)
operator|instanceof
name|VersionHistory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
name|void
name|testGetNodeByUUID
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|n
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|n
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|VersionManager
name|vMgr
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
name|String
name|uuid
init|=
name|vMgr
operator|.
name|getVersionHistory
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getUUID
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Session.getNodeByUUID() did not return VersionHistory object for a nt:versionHistory node."
argument_list|,
name|superuser
operator|.
name|getNodeByUUID
argument_list|(
name|uuid
argument_list|)
operator|instanceof
name|VersionHistory
argument_list|)
expr_stmt|;
block|}
comment|// see OAK-8048
specifier|public
name|void
name|testRemoveVHR
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|int
name|createVersions
init|=
literal|2
decl_stmt|;
name|Node
name|n
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|n
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|VersionManager
name|vm
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|createVersions
condition|;
name|i
operator|++
control|)
block|{
name|vm
operator|.
name|checkout
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|vm
operator|.
name|checkin
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|VersionHistory
name|vhr
init|=
name|vm
operator|.
name|getVersionHistory
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|vhrpath
init|=
name|vhr
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|n
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|VersionIterator
name|allversions
init|=
name|vhr
operator|.
name|getAllVersions
argument_list|()
decl_stmt|;
name|int
name|deletedVersions
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|allversions
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Version
name|version
init|=
name|allversions
operator|.
name|nextVersion
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|JcrConstants
operator|.
name|JCR_ROOTVERSION
operator|.
name|equals
argument_list|(
name|version
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|vhr
operator|.
name|removeVersion
argument_list|(
name|version
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|deletedVersions
operator|+=
literal|1
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"unexpected number of version deletions"
argument_list|,
name|createVersions
argument_list|,
name|deletedVersions
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"VersionHistory node should have disappeared"
argument_list|,
name|superuser
operator|.
name|itemExists
argument_list|(
name|vhrpath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

