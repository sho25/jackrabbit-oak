begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|cug
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ImportUUIDBehavior
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|PropInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ReferenceChangeTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|TextValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|CugImporterTest
extends|extends
name|AbstractCugTest
block|{
specifier|private
name|CugImporter
name|importer
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|importer
operator|=
operator|new
name|CugImporter
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInitTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Session
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|importer
operator|.
name|init
argument_list|(
name|session
argument_list|,
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|,
literal|true
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
argument_list|,
operator|new
name|ReferenceChangeTracker
argument_list|()
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|init
argument_list|(
name|session
argument_list|,
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|,
literal|true
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
argument_list|,
operator|new
name|ReferenceChangeTracker
argument_list|()
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidPropInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|createCug
argument_list|(
name|root
argument_list|,
name|SUPPORTED_PATH
argument_list|,
literal|"principalName"
argument_list|)
expr_stmt|;
name|Tree
name|parent
init|=
name|root
operator|.
name|getTree
argument_list|(
name|SUPPORTED_PATH
argument_list|)
decl_stmt|;
name|PropInfo
name|propInfo
init|=
operator|new
name|PropInfo
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|TextValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getString
parameter_list|()
block|{
return|return
literal|"principalName"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Value
name|getValue
parameter_list|(
name|int
name|targetType
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|getValueFactory
argument_list|(
name|root
argument_list|)
operator|.
name|createValue
argument_list|(
literal|"principalName"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{             }
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|PropertyDefinition
name|propDef
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|PropertyDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|parent
argument_list|,
name|propInfo
argument_list|,
name|propDef
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

