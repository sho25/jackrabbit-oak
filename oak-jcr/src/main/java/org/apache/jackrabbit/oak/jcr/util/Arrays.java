begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Utility class providing helper functions for arrays.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Arrays
block|{
specifier|private
name|Arrays
parameter_list|()
block|{}
comment|/**      * Check whether an array contains a given element      * @param array      * @param element      * @param<T>      * @return {@code true} iff {@code array} contains {@code element}.      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|boolean
name|contains
parameter_list|(
name|T
index|[]
name|array
parameter_list|,
name|T
name|element
parameter_list|)
block|{
for|for
control|(
name|T
name|t
range|:
name|array
control|)
block|{
if|if
condition|(
name|element
operator|==
literal|null
operator|&&
name|t
operator|==
literal|null
operator|||
name|element
operator|!=
literal|null
operator|&&
name|element
operator|.
name|equals
argument_list|(
name|t
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Convert an array to a set.      * @param elements      * @param<T>      * @return      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Set
argument_list|<
name|T
argument_list|>
name|toSet
parameter_list|(
name|T
modifier|...
name|elements
parameter_list|)
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|T
argument_list|>
argument_list|(
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
argument_list|(
name|elements
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Create a new array of the same type with an additional element added.      * @param array      * @param value      * @param<T>      * @return array of {@code array.length + 1} with {@code value} as its last element.      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|add
parameter_list|(
name|T
index|[]
name|array
parameter_list|,
name|T
name|value
parameter_list|)
block|{
name|T
index|[]
name|copy
init|=
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|copyOf
argument_list|(
name|array
argument_list|,
name|array
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
name|copy
index|[
name|array
operator|.
name|length
index|]
operator|=
name|value
expr_stmt|;
return|return
name|copy
return|;
block|}
comment|/**      * Create a new array with all occurrences of {@code value} removed.      * @param array      * @param value      * @param<T>      * @return an array containing all elements of {@code array} except for {@code value}.      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|remove
parameter_list|(
name|T
index|[]
name|array
parameter_list|,
name|T
name|value
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|copy
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
name|array
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|T
name|v
range|:
name|array
control|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
name|copy
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|v
argument_list|)
condition|)
block|{
name|copy
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|T
index|[]
operator|)
name|copy
operator|.
name|toArray
argument_list|()
return|;
block|}
block|}
end_class

end_unit

