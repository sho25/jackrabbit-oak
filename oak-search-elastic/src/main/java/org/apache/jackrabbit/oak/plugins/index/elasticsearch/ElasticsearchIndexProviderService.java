begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CacheStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|ElasticsearchIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|elasticsearch
operator|.
name|query
operator|.
name|ElasticsearchIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|fulltext
operator|.
name|PreExtractedTextProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|ExtractedTextCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|TextExtractionStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|ONE_MB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|registerMBean
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|metatype
operator|=
literal|true
argument_list|,
name|label
operator|=
literal|"Apache Jackrabbit Oak ElasticsearchIndexProvider"
argument_list|)
specifier|public
class|class
name|ElasticsearchIndexProviderService
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ElasticsearchIndexProviderService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REPOSITORY_HOME
init|=
literal|"repository.home"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PROP_EXTRACTED_TEXT_CACHE_SIZE_DEFAULT
init|=
literal|20
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|PROP_EXTRACTED_TEXT_CACHE_SIZE_DEFAULT
argument_list|,
name|label
operator|=
literal|"Extracted text cache size (MB)"
argument_list|,
name|description
operator|=
literal|"Cache size in MB for caching extracted text for some time. When set to 0 then "
operator|+
literal|"cache would be disabled"
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|PROP_EXTRACTED_TEXT_CACHE_SIZE
init|=
literal|"extractedTextCacheSizeInMB"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PROP_EXTRACTED_TEXT_CACHE_EXPIRY_DEFAULT
init|=
literal|300
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|PROP_EXTRACTED_TEXT_CACHE_EXPIRY_DEFAULT
argument_list|,
name|label
operator|=
literal|"Extracted text cache expiry (secs)"
argument_list|,
name|description
operator|=
literal|"Time in seconds for which the extracted text would be cached in memory"
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|PROP_EXTRACTED_TEXT_CACHE_EXPIRY
init|=
literal|"extractedTextCacheExpiryInSecs"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|PROP_PRE_EXTRACTED_TEXT_ALWAYS_USE_DEFAULT
init|=
literal|false
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|boolValue
operator|=
name|PROP_PRE_EXTRACTED_TEXT_ALWAYS_USE_DEFAULT
argument_list|,
name|label
operator|=
literal|"Always use pre-extracted text cache"
argument_list|,
name|description
operator|=
literal|"By default pre extracted text cache would only be used for reindex case. If this setting "
operator|+
literal|"is enabled then it would also be used in normal incremental indexing"
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|PROP_PRE_EXTRACTED_TEXT_ALWAYS_USE
init|=
literal|"alwaysUsePreExtractedCache"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_ELASTICSEARCH_SCHEME_DEFAULT
init|=
literal|"http"
decl_stmt|;
comment|//    @Property(
comment|//            value = PROP_ELASTICSEARCH_SCHEME_DEFAULT,
comment|//            label = "Elasticsearch connection scheme"
comment|//    )
specifier|private
specifier|static
specifier|final
name|String
name|PROP_ELASTICSEARCH_SCHEME
init|=
literal|"elasticsearch.scheme"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_ELASTICSEARCH_HOST_DEFAULT
init|=
literal|"localhost"
decl_stmt|;
comment|//    @Property(
comment|//            value = PROP_ELASTICSEARCH_HOST_DEFAULT,
comment|//            label = "Elasticsearch connection host"
comment|//    )
specifier|private
specifier|static
specifier|final
name|String
name|PROP_ELASTICSEARCH_HOST
init|=
literal|"elasticsearch.host"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PROP_ELASTICSEARCH_PORT_DEFAULT
init|=
literal|9200
decl_stmt|;
comment|//    @Property(
comment|//            intValue = PROP_ELASTICSEARCH_PORT_DEFAULT,
comment|//            label = "Elasticsearch connection port"
comment|//    )
specifier|private
specifier|static
specifier|final
name|String
name|PROP_ELASTICSEARCH_PORT
init|=
literal|"elasticsearch.port"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Local text extraction cache path"
argument_list|,
name|description
operator|=
literal|"Local file system path where text extraction cache stores/load entries to recover from timed out operation"
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|PROP_LOCAL_TEXT_EXTRACTION_DIR
init|=
literal|"localTextExtractionDir"
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|StatisticsProvider
name|statisticsProvider
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|policyOption
operator|=
name|ReferencePolicyOption
operator|.
name|GREEDY
argument_list|)
specifier|private
specifier|volatile
name|PreExtractedTextProvider
name|extractedTextProvider
decl_stmt|;
specifier|private
name|ExtractedTextCache
name|extractedTextCache
decl_stmt|;
specifier|private
name|ElasticsearchConnectionFactory
name|connectionFactory
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|ServiceRegistration
argument_list|>
name|regs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Registration
argument_list|>
name|oakRegs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
name|Whiteboard
name|whiteboard
decl_stmt|;
specifier|private
name|File
name|textExtractionDir
decl_stmt|;
annotation|@
name|Activate
specifier|private
name|void
name|activate
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
parameter_list|)
block|{
name|whiteboard
operator|=
operator|new
name|OsgiWhiteboard
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|initializeTextExtractionDir
argument_list|(
name|bundleContext
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|initializeExtractedTextCache
argument_list|(
name|config
argument_list|,
name|statisticsProvider
argument_list|)
expr_stmt|;
name|connectionFactory
operator|=
operator|new
name|ElasticsearchConnectionFactory
argument_list|()
expr_stmt|;
name|ElasticsearchIndexCoordinateFactory
name|esIndexCoordFactory
init|=
name|getElasticsearchIndexCoordinateFactory
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|registerIndexProvider
argument_list|(
name|bundleContext
argument_list|,
name|esIndexCoordFactory
argument_list|)
expr_stmt|;
name|registerIndexEditor
argument_list|(
name|bundleContext
argument_list|,
name|esIndexCoordFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|private
name|void
name|deactivate
parameter_list|()
block|{
for|for
control|(
name|ServiceRegistration
name|reg
range|:
name|regs
control|)
block|{
name|reg
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Registration
name|reg
range|:
name|oakRegs
control|)
block|{
name|reg
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|connectionFactory
argument_list|)
expr_stmt|;
name|connectionFactory
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|extractedTextCache
operator|!=
literal|null
condition|)
block|{
name|extractedTextCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|registerIndexProvider
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|,
name|ElasticsearchIndexCoordinateFactory
name|esIndexCoordFactory
parameter_list|)
block|{
name|ElasticsearchIndexProvider
name|indexProvider
init|=
operator|new
name|ElasticsearchIndexProvider
argument_list|(
name|esIndexCoordFactory
argument_list|)
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|ElasticsearchIndexConstants
operator|.
name|TYPE_ELASTICSEARCH
argument_list|)
expr_stmt|;
name|regs
operator|.
name|add
argument_list|(
name|bundleContext
operator|.
name|registerService
argument_list|(
name|IndexEditorProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|indexProvider
argument_list|,
name|props
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|registerIndexEditor
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|,
name|ElasticsearchIndexCoordinateFactory
name|esIndexCoordFactory
parameter_list|)
block|{
name|ElasticsearchIndexEditorProvider
name|editorProvider
init|=
operator|new
name|ElasticsearchIndexEditorProvider
argument_list|(
name|esIndexCoordFactory
argument_list|,
name|extractedTextCache
argument_list|)
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|ElasticsearchIndexConstants
operator|.
name|TYPE_ELASTICSEARCH
argument_list|)
expr_stmt|;
name|regs
operator|.
name|add
argument_list|(
name|bundleContext
operator|.
name|registerService
argument_list|(
name|IndexEditorProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|editorProvider
argument_list|,
name|props
argument_list|)
argument_list|)
expr_stmt|;
name|oakRegs
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|TextExtractionStatsMBean
operator|.
name|class
argument_list|,
name|editorProvider
operator|.
name|getExtractedTextCache
argument_list|()
operator|.
name|getStatsMBean
argument_list|()
argument_list|,
name|TextExtractionStatsMBean
operator|.
name|TYPE
argument_list|,
literal|"TextExtraction statistics"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initializeExtractedTextCache
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
parameter_list|,
name|StatisticsProvider
name|statisticsProvider
parameter_list|)
block|{
name|int
name|cacheSizeInMB
init|=
name|PropertiesUtil
operator|.
name|toInteger
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|PROP_EXTRACTED_TEXT_CACHE_SIZE
argument_list|)
argument_list|,
name|PROP_EXTRACTED_TEXT_CACHE_SIZE_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|cacheExpiryInSecs
init|=
name|PropertiesUtil
operator|.
name|toInteger
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|PROP_EXTRACTED_TEXT_CACHE_EXPIRY
argument_list|)
argument_list|,
name|PROP_EXTRACTED_TEXT_CACHE_EXPIRY_DEFAULT
argument_list|)
decl_stmt|;
name|boolean
name|alwaysUsePreExtractedCache
init|=
name|PropertiesUtil
operator|.
name|toBoolean
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|PROP_PRE_EXTRACTED_TEXT_ALWAYS_USE
argument_list|)
argument_list|,
name|PROP_PRE_EXTRACTED_TEXT_ALWAYS_USE_DEFAULT
argument_list|)
decl_stmt|;
name|extractedTextCache
operator|=
operator|new
name|ExtractedTextCache
argument_list|(
name|cacheSizeInMB
operator|*
name|ONE_MB
argument_list|,
name|cacheExpiryInSecs
argument_list|,
name|alwaysUsePreExtractedCache
argument_list|,
name|textExtractionDir
argument_list|,
name|statisticsProvider
argument_list|)
expr_stmt|;
if|if
condition|(
name|extractedTextProvider
operator|!=
literal|null
condition|)
block|{
name|registerExtractedTextProvider
argument_list|(
name|extractedTextProvider
argument_list|)
expr_stmt|;
block|}
name|CacheStats
name|stats
init|=
name|extractedTextCache
operator|.
name|getCacheStats
argument_list|()
decl_stmt|;
if|if
condition|(
name|stats
operator|!=
literal|null
condition|)
block|{
name|oakRegs
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|stats
argument_list|,
name|CacheStatsMBean
operator|.
name|TYPE
argument_list|,
name|stats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Extracted text caching enabled with maxSize {} MB, expiry time {} secs"
argument_list|,
name|cacheSizeInMB
argument_list|,
name|cacheExpiryInSecs
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|initializeTextExtractionDir
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
parameter_list|)
block|{
name|String
name|textExtractionDir
init|=
name|PropertiesUtil
operator|.
name|toString
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|PROP_LOCAL_TEXT_EXTRACTION_DIR
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|textExtractionDir
argument_list|)
condition|)
block|{
name|String
name|repoHome
init|=
name|bundleContext
operator|.
name|getProperty
argument_list|(
name|REPOSITORY_HOME
argument_list|)
decl_stmt|;
if|if
condition|(
name|repoHome
operator|!=
literal|null
condition|)
block|{
name|textExtractionDir
operator|=
name|FilenameUtils
operator|.
name|concat
argument_list|(
name|repoHome
argument_list|,
literal|"index"
argument_list|)
expr_stmt|;
block|}
block|}
name|checkNotNull
argument_list|(
name|textExtractionDir
argument_list|,
literal|"Text extraction directory cannot be determined as neither "
operator|+
literal|"directory path [%s] nor repository home [%s] defined"
argument_list|,
name|PROP_LOCAL_TEXT_EXTRACTION_DIR
argument_list|,
name|REPOSITORY_HOME
argument_list|)
expr_stmt|;
name|this
operator|.
name|textExtractionDir
operator|=
operator|new
name|File
argument_list|(
name|textExtractionDir
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|registerExtractedTextProvider
parameter_list|(
name|PreExtractedTextProvider
name|provider
parameter_list|)
block|{
if|if
condition|(
name|extractedTextCache
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|provider
operator|!=
literal|null
condition|)
block|{
name|String
name|usage
init|=
name|extractedTextCache
operator|.
name|isAlwaysUsePreExtractedCache
argument_list|()
condition|?
literal|"always"
else|:
literal|"only during reindexing phase"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Registering PreExtractedTextProvider {} with extracted text cache. "
operator|+
literal|"It would be used {}"
argument_list|,
name|provider
argument_list|,
name|usage
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unregistering PreExtractedTextProvider with extracted text cache"
argument_list|)
expr_stmt|;
block|}
name|extractedTextCache
operator|.
name|setExtractedTextProvider
argument_list|(
name|provider
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ElasticsearchIndexCoordinateFactory
name|getElasticsearchIndexCoordinateFactory
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
parameter_list|)
block|{
name|ElasticsearchIndexCoordinateFactory
name|esIndexCoordFactory
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|esCfg
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|esCfg
operator|.
name|put
argument_list|(
name|ElasticsearchCoordinate
operator|.
name|SCHEME_PROP
argument_list|,
name|PropertiesUtil
operator|.
name|toString
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|PROP_ELASTICSEARCH_SCHEME
argument_list|)
argument_list|,
name|PROP_ELASTICSEARCH_SCHEME_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|esCfg
operator|.
name|put
argument_list|(
name|ElasticsearchCoordinate
operator|.
name|HOST_PROP
argument_list|,
name|PropertiesUtil
operator|.
name|toString
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|PROP_ELASTICSEARCH_HOST
argument_list|)
argument_list|,
name|PROP_ELASTICSEARCH_HOST_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|esCfg
operator|.
name|put
argument_list|(
name|ElasticsearchCoordinate
operator|.
name|PORT_PROP
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|PropertiesUtil
operator|.
name|toInteger
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|PROP_ELASTICSEARCH_PORT
argument_list|)
argument_list|,
name|PROP_ELASTICSEARCH_PORT_DEFAULT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|esIndexCoordFactory
operator|=
operator|new
name|DefaultElasticsearchIndexCoordinateFactory
argument_list|(
name|connectionFactory
argument_list|,
name|esCfg
argument_list|)
expr_stmt|;
return|return
name|esIndexCoordFactory
return|;
block|}
block|}
end_class

end_unit

