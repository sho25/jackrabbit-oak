begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|ldap
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|GuestCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|ldap
operator|.
name|LdapProviderTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|testing
operator|.
name|mock
operator|.
name|osgi
operator|.
name|junit
operator|.
name|OsgiContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|LdapIdentityProviderOsgiTest
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|OsgiContext
name|context
init|=
operator|new
name|OsgiContext
argument_list|()
decl_stmt|;
specifier|private
name|LdapIdentityProvider
name|provider
init|=
operator|new
name|LdapIdentityProvider
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|registerInjectActivateService
argument_list|(
name|provider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ExternalIdentityException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testFromExternalIdentityRefForeign
parameter_list|()
throws|throws
name|Exception
block|{
name|provider
operator|.
name|fromExternalIdentityRef
argument_list|(
operator|new
name|ExternalIdentityRef
argument_list|(
literal|"id"
argument_list|,
literal|"anotherName"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFromExternalIdentityRef
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"id"
argument_list|,
name|provider
operator|.
name|fromExternalIdentityRef
argument_list|(
operator|new
name|ExternalIdentityRef
argument_list|(
literal|"id"
argument_list|,
name|provider
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetName
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|LdapProviderConfig
operator|.
name|PARAM_NAME_DEFAULT
argument_list|,
name|provider
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAuthenticateOtherCredentials
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|provider
operator|.
name|authenticate
argument_list|(
operator|new
name|GuestCredentials
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetIdentityForeingRef
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentityRef
name|ref
init|=
operator|new
name|ExternalIdentityRef
argument_list|(
literal|"id"
argument_list|,
literal|"anotherName"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|provider
operator|.
name|getIdentity
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDeclaredGroupRefsForeignRef
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentityRef
name|ref
init|=
operator|new
name|ExternalIdentityRef
argument_list|(
literal|"id"
argument_list|,
literal|"anotherName"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|provider
operator|.
name|getDeclaredGroupRefs
argument_list|(
name|ref
argument_list|,
name|LdapProviderTest
operator|.
name|TEST_USER1_DN
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDeclaredMemberRefsForeignRef
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentityRef
name|ref
init|=
operator|new
name|ExternalIdentityRef
argument_list|(
literal|"id"
argument_list|,
literal|"anotherName"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|provider
operator|.
name|getDeclaredMemberRefs
argument_list|(
name|ref
argument_list|,
name|LdapProviderTest
operator|.
name|TEST_GROUP1_DN
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ExternalIdentityException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetUserMissingConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|provider
operator|.
name|getUser
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ExternalIdentityException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetGroupMissingConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|provider
operator|.
name|getGroup
argument_list|(
literal|"gr"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ExternalIdentityException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListGroupsMissingConnections
parameter_list|()
throws|throws
name|Exception
block|{
name|provider
operator|.
name|listGroups
argument_list|()
operator|.
name|hasNext
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ExternalIdentityException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListUsersMissingConnections
parameter_list|()
throws|throws
name|Exception
block|{
name|provider
operator|.
name|listUsers
argument_list|()
operator|.
name|hasNext
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

