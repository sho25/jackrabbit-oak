begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|util
operator|.
name|ConfigUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|toArray
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|elements
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getParentPath
import|;
end_import

begin_class
specifier|public
class|class
name|Aggregate
block|{
specifier|public
specifier|static
specifier|final
name|String
name|MATCH_ALL
init|=
literal|"*"
decl_stmt|;
comment|/**      * recursive aggregation (for same type nodes) limit default value.      */
specifier|public
specifier|static
specifier|final
name|int
name|RECURSIVE_AGGREGATION_LIMIT_DEFAULT
init|=
literal|5
decl_stmt|;
specifier|private
specifier|final
name|String
name|nodeTypeName
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|Include
argument_list|>
name|includes
decl_stmt|;
specifier|final
name|int
name|reAggregationLimit
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|NodeInclude
argument_list|>
name|relativeNodeIncludes
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|nodeAggregates
decl_stmt|;
name|Aggregate
parameter_list|(
name|String
name|nodeTypeName
parameter_list|)
block|{
name|this
argument_list|(
name|nodeTypeName
argument_list|,
name|Collections
operator|.
expr|<
name|Include
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Aggregate
parameter_list|(
name|String
name|nodeTypeName
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|Include
argument_list|>
name|includes
parameter_list|)
block|{
name|this
argument_list|(
name|nodeTypeName
argument_list|,
name|includes
argument_list|,
name|RECURSIVE_AGGREGATION_LIMIT_DEFAULT
argument_list|)
expr_stmt|;
block|}
name|Aggregate
parameter_list|(
name|String
name|nodeTypeName
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|Include
argument_list|>
name|includes
parameter_list|,
name|int
name|recursionLimit
parameter_list|)
block|{
name|this
operator|.
name|nodeTypeName
operator|=
name|nodeTypeName
expr_stmt|;
name|this
operator|.
name|includes
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|includes
argument_list|)
expr_stmt|;
name|this
operator|.
name|reAggregationLimit
operator|=
name|recursionLimit
expr_stmt|;
name|this
operator|.
name|relativeNodeIncludes
operator|=
name|findRelativeNodeIncludes
argument_list|(
name|includes
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeAggregates
operator|=
name|hasNodeIncludes
argument_list|(
name|includes
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|Include
argument_list|>
name|getIncludes
parameter_list|()
block|{
return|return
name|includes
return|;
block|}
specifier|public
name|void
name|collectAggregates
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|ResultCollector
name|collector
parameter_list|)
block|{
if|if
condition|(
name|matchingType
argument_list|(
name|nodeTypeName
argument_list|,
name|root
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Matcher
argument_list|>
name|matchers
init|=
name|createMatchers
argument_list|()
decl_stmt|;
name|collectAggregates
argument_list|(
name|root
argument_list|,
name|matchers
argument_list|,
name|collector
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|Matcher
argument_list|>
name|createMatchers
parameter_list|(
name|AggregateRoot
name|root
parameter_list|)
block|{
name|List
argument_list|<
name|Matcher
argument_list|>
name|matchers
init|=
name|newArrayListWithCapacity
argument_list|(
name|includes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Include
name|include
range|:
name|includes
control|)
block|{
name|matchers
operator|.
name|add
argument_list|(
operator|new
name|Matcher
argument_list|(
name|this
argument_list|,
name|include
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|matchers
return|;
block|}
specifier|public
name|boolean
name|hasRelativeNodeInclude
parameter_list|(
name|String
name|nodePath
parameter_list|)
block|{
for|for
control|(
name|NodeInclude
name|ni
range|:
name|relativeNodeIncludes
control|)
block|{
if|if
condition|(
name|ni
operator|.
name|matches
argument_list|(
name|nodePath
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasNodeAggregates
parameter_list|()
block|{
return|return
name|nodeAggregates
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|nodeTypeName
return|;
block|}
specifier|private
specifier|static
name|boolean
name|matchingType
parameter_list|(
name|String
name|nodeTypeName
parameter_list|,
name|NodeState
name|nodeState
parameter_list|)
block|{
if|if
condition|(
name|nodeTypeName
operator|.
name|equals
argument_list|(
name|ConfigUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|nodeState
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|String
name|mixin
range|:
name|ConfigUtil
operator|.
name|getMixinNames
argument_list|(
name|nodeState
argument_list|)
control|)
block|{
if|if
condition|(
name|nodeTypeName
operator|.
name|equals
argument_list|(
name|mixin
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|void
name|collectAggregates
parameter_list|(
name|NodeState
name|nodeState
parameter_list|,
name|List
argument_list|<
name|Matcher
argument_list|>
name|matchers
parameter_list|,
name|ResultCollector
name|collector
parameter_list|)
block|{
if|if
condition|(
name|hasPatternMatcher
argument_list|(
name|matchers
argument_list|)
condition|)
block|{
name|collectAggregatesForPatternMatchers
argument_list|(
name|nodeState
argument_list|,
name|matchers
argument_list|,
name|collector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collectAggregatesForDirectMatchers
argument_list|(
name|nodeState
argument_list|,
name|matchers
argument_list|,
name|collector
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|collectAggregatesForDirectMatchers
parameter_list|(
name|NodeState
name|nodeState
parameter_list|,
name|List
argument_list|<
name|Matcher
argument_list|>
name|matchers
parameter_list|,
name|ResultCollector
name|collector
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ChildNodeEntry
argument_list|>
name|children
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
comment|//Collect potentially matching child nodestates based on matcher name
for|for
control|(
name|Matcher
name|m
range|:
name|matchers
control|)
block|{
name|String
name|nodeName
init|=
name|m
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|NodeState
name|child
init|=
name|nodeState
operator|.
name|getChildNode
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|exists
argument_list|()
condition|)
block|{
name|children
operator|.
name|put
argument_list|(
name|nodeName
argument_list|,
operator|new
name|MemoryChildNodeEntry
argument_list|(
name|nodeName
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|matchChildren
argument_list|(
name|matchers
argument_list|,
name|collector
argument_list|,
name|children
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|collectAggregatesForPatternMatchers
parameter_list|(
name|NodeState
name|nodeState
parameter_list|,
name|List
argument_list|<
name|Matcher
argument_list|>
name|matchers
parameter_list|,
name|ResultCollector
name|collector
parameter_list|)
block|{
name|matchChildren
argument_list|(
name|matchers
argument_list|,
name|collector
argument_list|,
name|nodeState
operator|.
name|getChildNodeEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|matchChildren
parameter_list|(
name|List
argument_list|<
name|Matcher
argument_list|>
name|matchers
parameter_list|,
name|ResultCollector
name|collector
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|children
parameter_list|)
block|{
for|for
control|(
name|ChildNodeEntry
name|cne
range|:
name|children
control|)
block|{
name|List
argument_list|<
name|Matcher
argument_list|>
name|nextSet
init|=
name|newArrayListWithCapacity
argument_list|(
name|matchers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Matcher
name|m
range|:
name|matchers
control|)
block|{
name|Matcher
name|result
init|=
name|m
operator|.
name|match
argument_list|(
name|cne
operator|.
name|getName
argument_list|()
argument_list|,
name|cne
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getStatus
argument_list|()
operator|==
name|Matcher
operator|.
name|Status
operator|.
name|MATCH_FOUND
condition|)
block|{
name|result
operator|.
name|collectResults
argument_list|(
name|collector
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|getStatus
argument_list|()
operator|!=
name|Matcher
operator|.
name|Status
operator|.
name|FAIL
condition|)
block|{
name|nextSet
operator|.
name|addAll
argument_list|(
name|result
operator|.
name|nextSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|nextSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|collectAggregates
argument_list|(
name|cne
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|nextSet
argument_list|,
name|collector
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|boolean
name|hasPatternMatcher
parameter_list|(
name|List
argument_list|<
name|Matcher
argument_list|>
name|matchers
parameter_list|)
block|{
for|for
control|(
name|Matcher
name|m
range|:
name|matchers
control|)
block|{
if|if
condition|(
name|m
operator|.
name|isPatternBased
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|List
argument_list|<
name|Matcher
argument_list|>
name|createMatchers
parameter_list|()
block|{
name|List
argument_list|<
name|Matcher
argument_list|>
name|matchers
init|=
name|newArrayListWithCapacity
argument_list|(
name|includes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Include
name|include
range|:
name|includes
control|)
block|{
name|matchers
operator|.
name|add
argument_list|(
operator|new
name|Matcher
argument_list|(
name|this
argument_list|,
name|include
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|matchers
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|NodeInclude
argument_list|>
name|findRelativeNodeIncludes
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Include
argument_list|>
name|includes
parameter_list|)
block|{
name|List
argument_list|<
name|NodeInclude
argument_list|>
name|result
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Include
name|i
range|:
name|includes
control|)
block|{
if|if
condition|(
name|i
operator|instanceof
name|NodeInclude
condition|)
block|{
name|NodeInclude
name|ni
init|=
operator|(
name|NodeInclude
operator|)
name|i
decl_stmt|;
if|if
condition|(
name|ni
operator|.
name|relativeNode
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|ni
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|result
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|hasNodeIncludes
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Include
argument_list|>
name|includes
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|any
argument_list|(
name|includes
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Include
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Include
name|input
parameter_list|)
block|{
return|return
name|input
operator|instanceof
name|NodeInclude
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
specifier|static
interface|interface
name|AggregateMapper
block|{
annotation|@
name|CheckForNull
name|Aggregate
name|getAggregate
parameter_list|(
name|String
name|nodeTypeName
parameter_list|)
function_decl|;
block|}
comment|//~-----------------------------------------------------< Includes>
specifier|public
specifier|static
specifier|abstract
class|class
name|Include
parameter_list|<
name|T
parameter_list|>
block|{
specifier|protected
specifier|final
name|String
index|[]
name|elements
decl_stmt|;
specifier|public
name|Include
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|elements
operator|=
name|computeElements
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|nodeState
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|String
name|element
init|=
name|elements
index|[
name|depth
index|]
decl_stmt|;
if|if
condition|(
name|MATCH_ALL
operator|.
name|equals
argument_list|(
name|element
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|element
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|maxDepth
parameter_list|()
block|{
return|return
name|elements
operator|.
name|length
return|;
block|}
specifier|public
name|void
name|collectResults
parameter_list|(
name|T
name|rootInclude
parameter_list|,
name|String
name|rootIncludePath
parameter_list|,
name|String
name|nodePath
parameter_list|,
name|NodeState
name|nodeState
parameter_list|,
name|ResultCollector
name|results
parameter_list|)
block|{
name|collectResults
argument_list|(
name|nodePath
argument_list|,
name|nodeState
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|collectResults
parameter_list|(
name|String
name|nodePath
parameter_list|,
name|NodeState
name|nodeState
parameter_list|,
name|ResultCollector
name|results
parameter_list|)
block|{          }
specifier|public
specifier|abstract
name|boolean
name|aggregatesProperty
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
annotation|@
name|CheckForNull
specifier|public
name|Aggregate
name|getAggregate
parameter_list|(
name|NodeState
name|matchedNodeState
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isPattern
parameter_list|(
name|int
name|depth
parameter_list|)
block|{
return|return
name|MATCH_ALL
operator|.
name|equals
argument_list|(
name|elements
index|[
name|depth
index|]
argument_list|)
return|;
block|}
specifier|public
name|String
name|getElementNameIfNotAPattern
parameter_list|(
name|int
name|depth
parameter_list|)
block|{
name|checkArgument
argument_list|(
operator|!
name|isPattern
argument_list|(
name|depth
argument_list|)
argument_list|,
literal|"Element at %s is pattern instead of specific name in %s"
argument_list|,
name|depth
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|elements
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|elements
index|[
name|depth
index|]
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|NodeInclude
extends|extends
name|Include
argument_list|<
name|NodeInclude
argument_list|>
block|{
specifier|final
name|String
name|primaryType
decl_stmt|;
specifier|final
name|boolean
name|relativeNode
decl_stmt|;
specifier|private
specifier|final
name|String
name|pattern
decl_stmt|;
specifier|private
specifier|final
name|AggregateMapper
name|aggMapper
decl_stmt|;
specifier|public
name|NodeInclude
parameter_list|(
name|AggregateMapper
name|mapper
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
name|this
argument_list|(
name|mapper
argument_list|,
literal|null
argument_list|,
name|pattern
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NodeInclude
parameter_list|(
name|AggregateMapper
name|mapper
parameter_list|,
name|String
name|primaryType
parameter_list|,
name|String
name|pattern
parameter_list|,
name|boolean
name|relativeNode
parameter_list|)
block|{
name|super
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
name|this
operator|.
name|primaryType
operator|=
name|primaryType
expr_stmt|;
name|this
operator|.
name|aggMapper
operator|=
name|mapper
expr_stmt|;
name|this
operator|.
name|relativeNode
operator|=
name|relativeNode
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|nodeState
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
comment|//As per JR2 the primaryType is enforced on last element
comment|//last segment -> add to collector if node type matches
if|if
condition|(
name|depth
operator|==
name|maxDepth
argument_list|()
operator|-
literal|1
operator|&&
name|primaryType
operator|!=
literal|null
operator|&&
operator|!
name|matchingType
argument_list|(
name|primaryType
argument_list|,
name|nodeState
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|super
operator|.
name|match
argument_list|(
name|name
argument_list|,
name|nodeState
argument_list|,
name|depth
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|collectResults
parameter_list|(
name|NodeInclude
name|rootInclude
parameter_list|,
name|String
name|rootIncludePath
parameter_list|,
name|String
name|nodePath
parameter_list|,
name|NodeState
name|nodeState
parameter_list|,
name|ResultCollector
name|results
parameter_list|)
block|{
comment|//For supporting jcr:contains(jcr:content, 'foo')
if|if
condition|(
name|rootInclude
operator|.
name|relativeNode
condition|)
block|{
name|results
operator|.
name|onResult
argument_list|(
operator|new
name|NodeIncludeResult
argument_list|(
name|nodePath
argument_list|,
name|rootIncludePath
argument_list|,
name|nodeState
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//For supporting jcr:contains(., 'foo')
name|results
operator|.
name|onResult
argument_list|(
operator|new
name|NodeIncludeResult
argument_list|(
name|nodePath
argument_list|,
name|nodeState
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|aggregatesProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Aggregate
name|getAggregate
parameter_list|(
name|NodeState
name|matchedNodeState
parameter_list|)
block|{
comment|//Check agg defn for primaryType first
name|Aggregate
name|agg
init|=
name|aggMapper
operator|.
name|getAggregate
argument_list|(
name|ConfigUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|matchedNodeState
argument_list|)
argument_list|)
decl_stmt|;
comment|//If not found then look for defn for mixins
if|if
condition|(
name|agg
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|String
name|mixin
range|:
name|ConfigUtil
operator|.
name|getMixinNames
argument_list|(
name|matchedNodeState
argument_list|)
control|)
block|{
name|agg
operator|=
name|aggMapper
operator|.
name|getAggregate
argument_list|(
name|mixin
argument_list|)
expr_stmt|;
if|if
condition|(
name|agg
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|agg
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"NodeInclude{"
operator|+
literal|"primaryType='"
operator|+
name|primaryType
operator|+
literal|'\''
operator|+
literal|", relativeNode="
operator|+
name|relativeNode
operator|+
literal|", pattern='"
operator|+
name|pattern
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
specifier|public
name|boolean
name|matches
parameter_list|(
name|String
name|nodePath
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|pathElements
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|PathUtils
operator|.
name|elements
argument_list|(
name|nodePath
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathElements
operator|.
name|size
argument_list|()
operator|!=
name|elements
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|element
init|=
name|elements
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|MATCH_ALL
operator|.
name|equals
argument_list|(
name|element
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|element
operator|.
name|equals
argument_list|(
name|pathElements
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PropertyInclude
extends|extends
name|Include
argument_list|<
name|PropertyInclude
argument_list|>
block|{
specifier|private
specifier|final
name|PropertyDefinition
name|propertyDefinition
decl_stmt|;
specifier|private
specifier|final
name|String
name|propertyName
decl_stmt|;
specifier|private
specifier|final
name|Pattern
name|pattern
decl_stmt|;
specifier|private
specifier|final
name|String
name|parentPath
decl_stmt|;
specifier|public
name|PropertyInclude
parameter_list|(
name|PropertyDefinition
name|pd
parameter_list|)
block|{
name|super
argument_list|(
name|getParentPath
argument_list|(
name|pd
operator|.
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|propertyDefinition
operator|=
name|pd
expr_stmt|;
name|this
operator|.
name|propertyName
operator|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|pd
operator|.
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|parentPath
operator|=
name|getParentPath
argument_list|(
name|pd
operator|.
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|pd
operator|.
name|isRegexp
condition|)
block|{
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|propertyName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pattern
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|collectResults
parameter_list|(
name|String
name|nodePath
parameter_list|,
name|NodeState
name|nodeState
parameter_list|,
name|ResultCollector
name|results
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PropertyState
name|ps
range|:
name|nodeState
operator|.
name|getProperties
argument_list|()
control|)
block|{
if|if
condition|(
name|pattern
operator|.
name|matcher
argument_list|(
name|ps
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|results
operator|.
name|onResult
argument_list|(
operator|new
name|PropertyIncludeResult
argument_list|(
name|ps
argument_list|,
name|propertyDefinition
argument_list|,
name|parentPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|PropertyState
name|ps
init|=
name|nodeState
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|!=
literal|null
condition|)
block|{
name|results
operator|.
name|onResult
argument_list|(
operator|new
name|PropertyIncludeResult
argument_list|(
name|ps
argument_list|,
name|propertyDefinition
argument_list|,
name|parentPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|aggregatesProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|!=
literal|null
condition|)
block|{
return|return
name|pattern
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
return|return
name|propertyName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|propertyDefinition
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|PropertyDefinition
name|getPropertyDefinition
parameter_list|()
block|{
return|return
name|propertyDefinition
return|;
block|}
block|}
specifier|public
specifier|static
interface|interface
name|ResultCollector
block|{
name|void
name|onResult
parameter_list|(
name|NodeIncludeResult
name|result
parameter_list|)
function_decl|;
name|void
name|onResult
parameter_list|(
name|PropertyIncludeResult
name|result
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|NodeIncludeResult
block|{
specifier|public
specifier|final
name|NodeState
name|nodeState
decl_stmt|;
specifier|public
specifier|final
name|String
name|nodePath
decl_stmt|;
specifier|public
specifier|final
name|String
name|rootIncludePath
decl_stmt|;
specifier|public
name|NodeIncludeResult
parameter_list|(
name|String
name|nodePath
parameter_list|,
name|NodeState
name|nodeState
parameter_list|)
block|{
name|this
argument_list|(
name|nodePath
argument_list|,
literal|null
argument_list|,
name|nodeState
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NodeIncludeResult
parameter_list|(
name|String
name|nodePath
parameter_list|,
name|String
name|rootIncludePath
parameter_list|,
name|NodeState
name|nodeState
parameter_list|)
block|{
name|this
operator|.
name|nodePath
operator|=
name|nodePath
expr_stmt|;
name|this
operator|.
name|nodeState
operator|=
name|nodeState
expr_stmt|;
name|this
operator|.
name|rootIncludePath
operator|=
name|rootIncludePath
expr_stmt|;
block|}
specifier|public
name|boolean
name|isRelativeNode
parameter_list|()
block|{
return|return
name|rootIncludePath
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"NodeIncludeResult{"
operator|+
literal|"nodePath='"
operator|+
name|nodePath
operator|+
literal|'\''
operator|+
literal|", rootIncludePath='"
operator|+
name|rootIncludePath
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PropertyIncludeResult
block|{
specifier|public
specifier|final
name|PropertyState
name|propertyState
decl_stmt|;
specifier|public
specifier|final
name|PropertyDefinition
name|pd
decl_stmt|;
specifier|public
specifier|final
name|String
name|propertyPath
decl_stmt|;
specifier|final
name|String
name|nodePath
decl_stmt|;
specifier|public
name|PropertyIncludeResult
parameter_list|(
name|PropertyState
name|propertyState
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|,
name|String
name|parentPath
parameter_list|)
block|{
name|this
operator|.
name|propertyState
operator|=
name|propertyState
expr_stmt|;
name|this
operator|.
name|pd
operator|=
name|pd
expr_stmt|;
name|this
operator|.
name|nodePath
operator|=
name|parentPath
expr_stmt|;
name|this
operator|.
name|propertyPath
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|parentPath
argument_list|,
name|propertyState
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
interface|interface
name|AggregateRoot
block|{
name|void
name|markDirty
parameter_list|()
function_decl|;
name|String
name|getPath
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|Matcher
block|{
specifier|public
enum|enum
name|Status
block|{
name|CONTINUE
block|,
name|MATCH_FOUND
block|,
name|FAIL
block|}
specifier|private
specifier|static
class|class
name|RootState
block|{
specifier|final
name|AggregateRoot
name|root
decl_stmt|;
specifier|final
name|Aggregate
name|rootAggregate
decl_stmt|;
specifier|final
name|Include
name|rootInclude
decl_stmt|;
specifier|private
name|RootState
parameter_list|(
name|AggregateRoot
name|root
parameter_list|,
name|Aggregate
name|rootAggregate
parameter_list|,
name|Include
name|rootInclude
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|rootAggregate
operator|=
name|rootAggregate
expr_stmt|;
name|this
operator|.
name|rootInclude
operator|=
name|rootInclude
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|RootState
name|rootState
decl_stmt|;
specifier|private
specifier|final
name|Include
name|currentInclude
decl_stmt|;
comment|/**          * Current depth in the include pattern.          */
specifier|private
specifier|final
name|int
name|depth
decl_stmt|;
specifier|private
specifier|final
name|Status
name|status
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|matchedNodeState
decl_stmt|;
specifier|private
specifier|final
name|String
name|currentPath
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|aggregateStack
decl_stmt|;
specifier|public
name|Matcher
parameter_list|(
name|Aggregate
name|aggregate
parameter_list|,
name|Include
name|currentInclude
parameter_list|)
block|{
name|this
argument_list|(
name|aggregate
argument_list|,
name|currentInclude
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Matcher
parameter_list|(
name|Aggregate
name|aggregate
parameter_list|,
name|Include
name|include
parameter_list|,
name|AggregateRoot
name|root
parameter_list|)
block|{
name|this
operator|.
name|rootState
operator|=
operator|new
name|RootState
argument_list|(
name|root
argument_list|,
name|aggregate
argument_list|,
name|include
argument_list|)
expr_stmt|;
name|this
operator|.
name|depth
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|currentInclude
operator|=
name|include
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|Status
operator|.
name|CONTINUE
expr_stmt|;
name|this
operator|.
name|currentPath
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|matchedNodeState
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|aggregateStack
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Matcher
parameter_list|(
name|Matcher
name|m
parameter_list|,
name|Status
name|status
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|status
operator|==
name|Status
operator|.
name|FAIL
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootState
operator|=
name|m
operator|.
name|rootState
expr_stmt|;
name|this
operator|.
name|depth
operator|=
name|depth
expr_stmt|;
name|this
operator|.
name|currentInclude
operator|=
name|m
operator|.
name|currentInclude
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|currentPath
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|matchedNodeState
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|aggregateStack
operator|=
name|m
operator|.
name|aggregateStack
expr_stmt|;
block|}
specifier|private
name|Matcher
parameter_list|(
name|Matcher
name|m
parameter_list|,
name|Status
name|status
parameter_list|,
name|int
name|depth
parameter_list|,
name|NodeState
name|matchedNodeState
parameter_list|,
name|String
name|currentPath
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|status
operator|!=
name|Status
operator|.
name|FAIL
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootState
operator|=
name|m
operator|.
name|rootState
expr_stmt|;
name|this
operator|.
name|depth
operator|=
name|depth
expr_stmt|;
name|this
operator|.
name|currentInclude
operator|=
name|m
operator|.
name|currentInclude
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|matchedNodeState
operator|=
name|matchedNodeState
expr_stmt|;
name|this
operator|.
name|currentPath
operator|=
name|currentPath
expr_stmt|;
name|this
operator|.
name|aggregateStack
operator|=
name|m
operator|.
name|aggregateStack
expr_stmt|;
block|}
specifier|private
name|Matcher
parameter_list|(
name|Matcher
name|m
parameter_list|,
name|Include
name|i
parameter_list|,
name|String
name|currentPath
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|m
operator|.
name|status
operator|==
name|Status
operator|.
name|MATCH_FOUND
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootState
operator|=
name|m
operator|.
name|rootState
expr_stmt|;
name|this
operator|.
name|depth
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|currentInclude
operator|=
name|i
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|Status
operator|.
name|CONTINUE
expr_stmt|;
name|this
operator|.
name|matchedNodeState
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|currentPath
operator|=
name|currentPath
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|newArrayList
argument_list|(
name|m
operator|.
name|aggregateStack
argument_list|)
decl_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|currentPath
argument_list|)
expr_stmt|;
name|this
operator|.
name|aggregateStack
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|paths
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isPatternBased
parameter_list|()
block|{
return|return
name|currentInclude
operator|.
name|isPattern
argument_list|(
name|depth
argument_list|)
return|;
block|}
comment|/**          * Returns the nodeName at current depth. This should only be called          * if and only if #isPatternBased is false otherwise it would throw exception          */
specifier|public
name|String
name|getNodeName
parameter_list|()
block|{
return|return
name|currentInclude
operator|.
name|getElementNameIfNotAPattern
argument_list|(
name|depth
argument_list|)
return|;
block|}
specifier|public
name|Matcher
name|match
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|nodeState
parameter_list|)
block|{
name|boolean
name|result
init|=
name|currentInclude
operator|.
name|match
argument_list|(
name|name
argument_list|,
name|nodeState
argument_list|,
name|depth
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
if|if
condition|(
name|hasMore
argument_list|()
condition|)
block|{
return|return
operator|new
name|Matcher
argument_list|(
name|this
argument_list|,
name|Status
operator|.
name|CONTINUE
argument_list|,
name|depth
argument_list|,
name|nodeState
argument_list|,
name|path
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Matcher
argument_list|(
name|this
argument_list|,
name|Status
operator|.
name|MATCH_FOUND
argument_list|,
name|depth
argument_list|,
name|nodeState
argument_list|,
name|path
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
operator|new
name|Matcher
argument_list|(
name|this
argument_list|,
name|Status
operator|.
name|FAIL
argument_list|,
name|depth
argument_list|)
return|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|Matcher
argument_list|>
name|nextSet
parameter_list|()
block|{
name|checkArgument
argument_list|(
name|status
operator|!=
name|Status
operator|.
name|FAIL
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|==
name|Status
operator|.
name|MATCH_FOUND
condition|)
block|{
name|Aggregate
name|nextAgg
init|=
name|currentInclude
operator|.
name|getAggregate
argument_list|(
name|matchedNodeState
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextAgg
operator|!=
literal|null
condition|)
block|{
name|int
name|recursionLevel
init|=
name|aggregateStack
operator|.
name|size
argument_list|()
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|recursionLevel
operator|>=
name|rootState
operator|.
name|rootAggregate
operator|.
name|reAggregationLimit
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|Matcher
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|nextAgg
operator|.
name|includes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Include
name|i
range|:
name|nextAgg
operator|.
name|includes
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|Matcher
argument_list|(
name|this
argument_list|,
name|i
argument_list|,
name|currentPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|Matcher
argument_list|(
name|this
argument_list|,
name|status
argument_list|,
name|depth
operator|+
literal|1
argument_list|,
literal|null
argument_list|,
name|currentPath
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|collectResults
parameter_list|(
name|ResultCollector
name|results
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|status
operator|==
name|Status
operator|.
name|MATCH_FOUND
argument_list|)
expr_stmt|;
comment|//If result being collected as part of reaggregation then take path
comment|//from the stack otherwise its the current path
name|String
name|rootIncludePath
init|=
name|aggregateStack
operator|.
name|isEmpty
argument_list|()
condition|?
name|currentPath
else|:
name|aggregateStack
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|currentInclude
operator|.
name|collectResults
argument_list|(
name|rootState
operator|.
name|rootInclude
argument_list|,
name|rootIncludePath
argument_list|,
name|currentPath
argument_list|,
name|matchedNodeState
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|markRootDirty
parameter_list|()
block|{
name|checkArgument
argument_list|(
name|status
operator|==
name|Status
operator|.
name|MATCH_FOUND
argument_list|)
expr_stmt|;
name|rootState
operator|.
name|root
operator|.
name|markDirty
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getRootPath
parameter_list|()
block|{
return|return
name|rootState
operator|.
name|root
operator|.
name|getPath
argument_list|()
return|;
block|}
specifier|public
name|String
name|getMatchedPath
parameter_list|()
block|{
name|checkArgument
argument_list|(
name|status
operator|==
name|Status
operator|.
name|MATCH_FOUND
argument_list|)
expr_stmt|;
return|return
name|currentPath
return|;
block|}
specifier|public
name|Include
name|getCurrentInclude
parameter_list|()
block|{
return|return
name|currentInclude
return|;
block|}
specifier|public
name|Status
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
specifier|public
name|boolean
name|aggregatesProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|status
operator|==
name|Status
operator|.
name|MATCH_FOUND
argument_list|)
expr_stmt|;
return|return
name|currentInclude
operator|.
name|aggregatesProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|hasMore
parameter_list|()
block|{
return|return
name|depth
operator|<
name|currentInclude
operator|.
name|maxDepth
argument_list|()
operator|-
literal|1
return|;
block|}
specifier|private
name|String
name|path
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
if|if
condition|(
name|currentPath
operator|==
literal|null
condition|)
block|{
return|return
name|nodeName
return|;
block|}
else|else
block|{
return|return
name|PathUtils
operator|.
name|concat
argument_list|(
name|currentPath
argument_list|,
name|nodeName
argument_list|)
return|;
block|}
block|}
block|}
comment|//~--------------------------------------------------< utility>
specifier|private
specifier|static
name|String
index|[]
name|computeElements
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|toArray
argument_list|(
name|elements
argument_list|(
name|path
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

