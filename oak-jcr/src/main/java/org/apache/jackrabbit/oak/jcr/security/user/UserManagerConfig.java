begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|user
operator|.
name|action
operator|.
name|AuthorizableAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * UserManagerConfig...  */
end_comment

begin_class
specifier|public
class|class
name|UserManagerConfig
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UserManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Configuration option to define the path underneath which user nodes      * are being created.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_USER_PATH
init|=
literal|"usersPath"
decl_stmt|;
comment|/**      * Configuration option to define the path underneath which group nodes      * are being created.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_GROUP_PATH
init|=
literal|"groupsPath"
decl_stmt|;
comment|/**      * Parameter used to change the number of levels that are used by default      * store authorizable nodes.<br>The default number of levels is 2.      *<p/>      *<strong>NOTE:</strong> Changing the default depth once users and groups      * have been created in the repository will cause inconsistencies, due to      * the fact that the resolution of ID to an authorizable relies on the      * structure defined by the default depth.<br>      * It is recommended to remove all authorizable nodes that will not be      * reachable any more, before this config option is changed.      *<ul>      *<li>If default depth is increased:<br>      * All authorizables on levels&lt; default depth are not reachable any more.</li>      *<li>If default depth is decreased:<br>      * All authorizables on levels&gt; default depth aren't reachable any more      * unless the {@link #PARAM_AUTO_EXPAND_TREE} flag is set to {@code true}.</li>      *</ul>      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_DEFAULT_DEPTH
init|=
literal|"defaultDepth"
decl_stmt|;
comment|/**      * If this parameter is present and its value is {@code true}, the trees      * containing user and group nodes will automatically created additional      * hierarchy levels if the number of nodes on a given level exceeds the      * maximal allowed {@link #PARAM_AUTO_EXPAND_SIZE size}.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_AUTO_EXPAND_TREE
init|=
literal|"autoExpandTree"
decl_stmt|;
comment|/**      * This parameter only takes effect if {@link #PARAM_AUTO_EXPAND_TREE} is      * enabled.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_AUTO_EXPAND_SIZE
init|=
literal|"autoExpandSize"
decl_stmt|;
comment|/**      * If this parameter is present group members are collected in a node      * structure below a {@link AuthorizableImpl#REP_MEMBERS} node instead of the      * default multi valued property {@link AuthorizableImpl#REP_MEMBERS}.      * Its value determines the maximum number of member properties until      * additional intermediate nodes are inserted.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_GROUP_MEMBERSHIP_SPLIT_SIZE
init|=
literal|"groupMembershipSplitSize"
decl_stmt|;
comment|/**      * Configuration parameter to change the default algorithm used to generate      * password hashes.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_PASSWORD_HASH_ALGORITHM
init|=
literal|"passwordHashAlgorithm"
decl_stmt|;
comment|/**      * Configuration parameter to change the number of iterations used for      * password hash generation.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_PASSWORD_HASH_ITERATIONS
init|=
literal|"passwordHashIterations"
decl_stmt|;
comment|/**      * Configuration parameter to change the number of iterations used for      * password hash generation.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_PASSWORD_SALT_SIZE
init|=
literal|"passwordSaltSize"
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
decl_stmt|;
specifier|private
specifier|final
name|String
name|adminId
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|AuthorizableAction
argument_list|>
name|actions
decl_stmt|;
specifier|public
name|UserManagerConfig
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|,
name|String
name|adminId
parameter_list|,
name|Set
argument_list|<
name|AuthorizableAction
argument_list|>
name|actions
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|adminId
operator|=
name|adminId
expr_stmt|;
name|this
operator|.
name|actions
operator|=
operator|(
name|actions
operator|==
literal|null
operator|)
condition|?
name|Collections
operator|.
expr|<
name|AuthorizableAction
operator|>
name|emptySet
argument_list|()
else|:
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|actions
argument_list|)
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getConfigValue
parameter_list|(
name|String
name|key
parameter_list|,
name|T
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|config
operator|!=
literal|null
operator|&&
name|config
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|convert
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|defaultValue
return|;
block|}
block|}
specifier|public
name|String
name|getAdminId
parameter_list|()
block|{
return|return
name|adminId
return|;
block|}
specifier|public
name|AuthorizableAction
index|[]
name|getAuthorizableActions
parameter_list|()
block|{
return|return
name|actions
operator|.
name|toArray
argument_list|(
operator|new
name|AuthorizableAction
index|[
name|actions
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|//--------------------------------------------------------< private>---
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|convert
parameter_list|(
name|Object
name|configProperty
parameter_list|,
name|T
name|defaultValue
parameter_list|)
block|{
name|T
name|value
decl_stmt|;
name|String
name|str
init|=
name|configProperty
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Class
name|targetClass
init|=
operator|(
name|defaultValue
operator|==
literal|null
operator|)
condition|?
name|String
operator|.
name|class
else|:
name|defaultValue
operator|.
name|getClass
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|targetClass
operator|==
name|String
operator|.
name|class
condition|)
block|{
name|value
operator|=
operator|(
name|T
operator|)
name|str
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|targetClass
operator|==
name|Integer
operator|.
name|class
condition|)
block|{
name|value
operator|=
operator|(
name|T
operator|)
name|Integer
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|targetClass
operator|==
name|Long
operator|.
name|class
condition|)
block|{
name|value
operator|=
operator|(
name|T
operator|)
name|Long
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|targetClass
operator|==
name|Double
operator|.
name|class
condition|)
block|{
name|value
operator|=
operator|(
name|T
operator|)
name|Double
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|targetClass
operator|==
name|Boolean
operator|.
name|class
condition|)
block|{
name|value
operator|=
operator|(
name|T
operator|)
name|Boolean
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// unsupported target type
name|log
operator|.
name|warn
argument_list|(
literal|"Unsupported target type {} for value {}"
argument_list|,
name|targetClass
operator|.
name|getName
argument_list|()
argument_list|,
name|str
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot convert config entry "
operator|+
name|str
operator|+
literal|" to "
operator|+
name|targetClass
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid value {}; cannot be parsed into {}"
argument_list|,
name|str
argument_list|,
name|targetClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|=
name|defaultValue
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
block|}
end_class

end_unit

