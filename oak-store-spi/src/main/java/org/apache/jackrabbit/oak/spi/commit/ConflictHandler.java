begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * A {@code ConflictHandler} is responsible for handling conflicts which happen  * on {@link org.apache.jackrabbit.oak.api.Root#rebase()} and on the implicit rebase operation which  * takes part on {@link org.apache.jackrabbit.oak.api.Root#commit()}.  *  * This interface contains one method per type of conflict which might occur.  * Each of these methods must return a {@link Resolution} for the current conflict.  * The resolution indicates to use the changes in the current {@code Root} instance  * ({@link Resolution#OURS}) or to use the changes from the underlying persistence  * store ({@link Resolution#THEIRS}). Alternatively the resolution can also indicate  * that the changes have been successfully merged by this {@code ConflictHandler}  * instance ({@link Resolution#MERGED}).  *  * @see ConflictHandler  */
end_comment

begin_interface
specifier|public
interface|interface
name|ConflictHandler
extends|extends
name|PartialConflictHandler
block|{
comment|/**      * The property {@code ours} has been added to {@code parent} which conflicts      * with property {@code theirs} which has been added in the persistence store.      *      * @param parent  root of the conflict      * @param ours  our version of the property      * @param theirs  their version of the property      * @return  {@link Resolution} of the conflict      */
annotation|@
name|Override
annotation|@
name|Nonnull
name|Resolution
name|addExistingProperty
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|PropertyState
name|ours
parameter_list|,
name|PropertyState
name|theirs
parameter_list|)
function_decl|;
comment|/**      * The property {@code ours} has been changed in {@code parent} while it was      * removed in the persistence store.      *      * @param parent  root of the conflict      * @param ours  our version of the property      * @return  {@link Resolution} of the conflict      */
annotation|@
name|Override
annotation|@
name|Nonnull
name|Resolution
name|changeDeletedProperty
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|PropertyState
name|ours
parameter_list|)
function_decl|;
comment|/**      * The property {@code ours} has been changed in {@code parent} while it was      * also changed to a different value ({@code theirs}) in the persistence store.      *      * @param parent  root of the conflict      * @param ours  our version of the property      * @param theirs  their version of the property      * @return  {@link Resolution} of the conflict      */
annotation|@
name|Override
annotation|@
name|Nonnull
name|Resolution
name|changeChangedProperty
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|PropertyState
name|ours
parameter_list|,
name|PropertyState
name|theirs
parameter_list|)
function_decl|;
comment|/**      * The property {@code ours} has been removed in {@code parent} while it was      * also removed in the persistence store.      *      * @param parent  root of the conflict      * @param ours  our version of the property      * @return  {@link Resolution} of the conflict      */
annotation|@
name|Override
annotation|@
name|Nonnull
name|Resolution
name|deleteDeletedProperty
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|PropertyState
name|ours
parameter_list|)
function_decl|;
comment|/**      * The property {@code theirs} changed in the persistence store while it has been      * deleted locally.      *      * @param parent  root of the conflict      * @param theirs  their version of the property      * @return  {@link Resolution} of the conflict      */
annotation|@
name|Override
annotation|@
name|Nonnull
name|Resolution
name|deleteChangedProperty
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|PropertyState
name|theirs
parameter_list|)
function_decl|;
comment|/**      * The node {@code ours} has been added to {@code parent} which conflicts      * with node {@code theirs} which has been added in the persistence store.      *      * @param parent  root of the conflict      * @param name  name of the node      * @param ours  our version of the node      * @param theirs  their version of the node      * @return  {@link Resolution} of the conflict      */
annotation|@
name|Override
annotation|@
name|Nonnull
name|Resolution
name|addExistingNode
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|ours
parameter_list|,
name|NodeState
name|theirs
parameter_list|)
function_decl|;
comment|/**      * The node {@code ours} has been changed in {@code parent} while it was      * removed in the persistence store.      *      * @param parent  root of the conflict      * @param name  name of the node      * @param ours  our version of the node      * @return  {@link Resolution} of the conflict      */
annotation|@
name|Override
annotation|@
name|Nonnull
name|Resolution
name|changeDeletedNode
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|ours
parameter_list|)
function_decl|;
comment|/**      * The node {@code theirs} changed in the persistence store while it has been      * deleted locally.      *      * @param parent  root of the conflict      * @param name  name of the node      * @param theirs  their version of the node      * @return  {@link Resolution} of the conflict      */
annotation|@
name|Override
annotation|@
name|Nonnull
name|Resolution
name|deleteChangedNode
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|theirs
parameter_list|)
function_decl|;
comment|/**      * The node {@code name} has been removed in {@code parent} while it was      * also removed in the persistence store.      *      * @param parent  root of the conflict      * @param name  name of the node      * @return  {@link Resolution} of the conflict      */
annotation|@
name|Override
annotation|@
name|Nonnull
name|Resolution
name|deleteDeletedNode
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

