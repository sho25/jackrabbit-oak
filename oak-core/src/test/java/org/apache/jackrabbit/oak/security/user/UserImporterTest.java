begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ImportUUIDBehavior
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinitionTemplate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|AuthorizableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|ReadOnlyNodeTypeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|action
operator|.
name|AuthorizableAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|action
operator|.
name|AuthorizableActionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|action
operator|.
name|GroupAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|util
operator|.
name|PasswordUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ImportBehavior
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|PropInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedItemImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ReferenceChangeTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|TextValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|UserImporterTest
extends|extends
name|UserImporterBaseTest
implements|implements
name|UserConstants
block|{
comment|//---------------------------------------------------------------< init>---
annotation|@
name|Test
specifier|public
name|void
name|testInitNoJackrabbitSession
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|s
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Session
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|init
argument_list|(
name|s
argument_list|,
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|,
literal|false
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_THROW
argument_list|,
operator|new
name|ReferenceChangeTracker
argument_list|()
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInitAlreadyInitialized
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|importer
operator|.
name|init
argument_list|(
name|mockJackrabbitSession
argument_list|()
argument_list|,
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|,
name|isWorkspaceImport
argument_list|()
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REMOVE_EXISTING
argument_list|,
operator|new
name|ReferenceChangeTracker
argument_list|()
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitImportUUIDBehaviorRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|importer
operator|.
name|init
argument_list|(
name|mockJackrabbitSession
argument_list|()
argument_list|,
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|,
name|isWorkspaceImport
argument_list|()
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REMOVE_EXISTING
argument_list|,
operator|new
name|ReferenceChangeTracker
argument_list|()
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitImportUUIDBehaviorReplace
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|importer
operator|.
name|init
argument_list|(
name|mockJackrabbitSession
argument_list|()
argument_list|,
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|,
name|isWorkspaceImport
argument_list|()
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REPLACE_EXISTING
argument_list|,
operator|new
name|ReferenceChangeTracker
argument_list|()
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitImportUUIDBehaviorThrow
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|importer
operator|.
name|init
argument_list|(
name|mockJackrabbitSession
argument_list|()
argument_list|,
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|,
name|isWorkspaceImport
argument_list|()
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_THROW
argument_list|,
operator|new
name|ReferenceChangeTracker
argument_list|()
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitImportUUIDBehaviourCreateNew
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|importer
operator|.
name|init
argument_list|(
name|mockJackrabbitSession
argument_list|()
argument_list|,
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|,
name|isWorkspaceImport
argument_list|()
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
argument_list|,
operator|new
name|ReferenceChangeTracker
argument_list|()
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testHandlePropInfoNotInitialized
parameter_list|()
throws|throws
name|Exception
block|{
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|createUserTree
argument_list|()
argument_list|,
name|Mockito
operator|.
name|mock
argument_list|(
name|PropInfo
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|mock
argument_list|(
name|PropertyDefinition
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//-----------------------------------------------------< handlePropInfo>---
annotation|@
name|Test
specifier|public
name|void
name|testHandlePropInfoParentNotAuthorizable
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|Mockito
operator|.
name|mock
argument_list|(
name|PropInfo
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|mock
argument_list|(
name|PropertyDefinition
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleAuthorizableId
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_AUTHORIZABLE_ID
argument_list|,
name|TEST_USER_ID
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_AUTHORIZABLE
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_USER_ID
argument_list|,
name|userTree
operator|.
name|getProperty
argument_list|(
name|REP_AUTHORIZABLE_ID
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userTree
operator|.
name|getPath
argument_list|()
argument_list|,
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|TEST_USER_ID
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConstraintViolationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testHandleAuthorizableIdMismatch
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_AUTHORIZABLE_ID
argument_list|,
literal|"mismatch"
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_AUTHORIZABLE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AuthorizableExistsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testHandleAuthorizableIdConflictExisting
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_AUTHORIZABLE_ID
argument_list|,
name|testUser
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_AUTHORIZABLE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleAuthorizableIdMvPropertyDef
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_AUTHORIZABLE_ID
argument_list|,
name|TEST_USER_ID
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_AUTHORIZABLE
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|userTree
operator|.
name|getProperty
argument_list|(
name|REP_AUTHORIZABLE_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleAuthorizableIdOtherDeclNtDef
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_AUTHORIZABLE_ID
argument_list|,
name|TEST_USER_ID
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_AUTHORIZABLE_FOLDER
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|userTree
operator|.
name|getProperty
argument_list|(
name|REP_AUTHORIZABLE_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleAuthorizableIdDeclNtDefSubtype
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_AUTHORIZABLE_ID
argument_list|,
name|TEST_USER_ID
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_USER
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlePrincipalName
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|,
literal|"principalName"
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_AUTHORIZABLE
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"principalName"
argument_list|,
name|userTree
operator|.
name|getProperty
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testHandleEmptyPrincipalName
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|,
literal|""
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_AUTHORIZABLE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testHandleEveryonePrincipalNameOnUser
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|,
name|EveryonePrincipal
operator|.
name|NAME
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_AUTHORIZABLE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlePrincipalNameMvPropertyDef
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|,
literal|"principalName"
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_AUTHORIZABLE
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|userTree
operator|.
name|getProperty
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlePrincipalNameOtherDeclNtDef
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|,
literal|"principalName"
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_AUTHORIZABLE_FOLDER
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|userTree
operator|.
name|getProperty
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlePassword
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|String
name|pwHash
init|=
name|PasswordUtil
operator|.
name|buildPasswordHash
argument_list|(
literal|"pw"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_PASSWORD
argument_list|,
name|pwHash
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_USER
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pwHash
argument_list|,
name|userTree
operator|.
name|getProperty
argument_list|(
name|REP_PASSWORD
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlePasswordOnSystemUser
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|userTree
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_REP_SYSTEM_USER
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_PASSWORD
argument_list|,
name|PasswordUtil
operator|.
name|buildPasswordHash
argument_list|(
literal|"pw"
argument_list|)
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_USER
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlePasswordOnGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|groupTree
init|=
name|createGroupTree
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|groupTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_PASSWORD
argument_list|,
name|PasswordUtil
operator|.
name|buildPasswordHash
argument_list|(
literal|"pw"
argument_list|)
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_USER
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlePasswordMvPropertyDef
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_PASSWORD
argument_list|,
name|PasswordUtil
operator|.
name|buildPasswordHash
argument_list|(
literal|"pw"
argument_list|)
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_USER
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|userTree
operator|.
name|getProperty
argument_list|(
name|REP_PASSWORD
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlePasswordOtherDeclNtDef
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_PASSWORD
argument_list|,
name|PasswordUtil
operator|.
name|buildPasswordHash
argument_list|(
literal|"pw"
argument_list|)
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_AUTHORIZABLE
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|userTree
operator|.
name|getProperty
argument_list|(
name|REP_PASSWORD
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleImpersonators
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_IMPERSONATORS
argument_list|,
literal|"impersonator1"
argument_list|,
literal|"impersonator2"
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_USER
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// writing is postponed though and the ref-tracker must not be empty
name|assertNull
argument_list|(
name|userTree
operator|.
name|getProperty
argument_list|(
name|REP_IMPERSONATORS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|refTracker
operator|.
name|getProcessedReferences
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleImpersonatorsOnGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|groupTree
init|=
name|createGroupTree
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|groupTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_IMPERSONATORS
argument_list|,
literal|"impersonator1"
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_USER
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleImpersonatorsSinglePropertyDef
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_IMPERSONATORS
argument_list|,
literal|"impersonator1"
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_USER
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|userTree
operator|.
name|getProperty
argument_list|(
name|REP_IMPERSONATORS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleImpersonatorsOtherDeclNtDef
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_IMPERSONATORS
argument_list|,
literal|"impersonator1"
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_AUTHORIZABLE
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|userTree
operator|.
name|getProperty
argument_list|(
name|REP_IMPERSONATORS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleMembers
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|groupTree
init|=
name|createGroupTree
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|groupTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_MEMBERS
argument_list|,
literal|"member1"
argument_list|,
literal|"member2"
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_MEMBER_REFERENCES
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// writing is postponed though
name|assertNull
argument_list|(
name|groupTree
operator|.
name|getProperty
argument_list|(
name|REP_MEMBERS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleMembersOnUser
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_MEMBERS
argument_list|,
literal|"member1"
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_MEMBER_REFERENCES
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleMembersSinglePropertyDef
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|groupTree
init|=
name|createGroupTree
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|groupTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_MEMBERS
argument_list|,
literal|"member1"
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_MEMBER_REFERENCES
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|groupTree
operator|.
name|getProperty
argument_list|(
name|REP_MEMBERS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleMembersOtherDeclNtDef
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|groupTree
init|=
name|createGroupTree
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|groupTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_MEMBERS
argument_list|,
literal|"member1"
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_AUTHORIZABLE
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|groupTree
operator|.
name|getProperty
argument_list|(
name|REP_MEMBERS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_DISABLED
argument_list|,
literal|"disabled"
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_USER
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyState
name|property
init|=
name|userTree
operator|.
name|getProperty
argument_list|(
name|REP_DISABLED
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|property
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"disabled"
argument_list|,
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleDisabledOnGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|groupTree
init|=
name|createGroupTree
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|groupTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_DISABLED
argument_list|,
literal|"disabled"
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_USER
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|groupTree
operator|.
name|getProperty
argument_list|(
name|REP_DISABLED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testHandleDisabledMvProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_DISABLED
argument_list|,
literal|"disabled"
argument_list|,
literal|"disabled"
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_USER
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleDisabledMvPropertyDef
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_DISABLED
argument_list|,
literal|"disabled"
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_USER
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|userTree
operator|.
name|getProperty
argument_list|(
name|REP_DISABLED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleDisabledOtherDeclNtDef
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_DISABLED
argument_list|,
literal|"disabled"
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_AUTHORIZABLE
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|userTree
operator|.
name|getProperty
argument_list|(
name|REP_DISABLED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleUnknownProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
literal|"unknownProperty"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|userTree
operator|.
name|getProperty
argument_list|(
literal|"unknownProperty"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//--------------------------------------------------< processReferences>---
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testProcessReferencesNotInitialized
parameter_list|()
throws|throws
name|Exception
block|{
name|importer
operator|.
name|processReferences
argument_list|()
expr_stmt|;
block|}
comment|//------------------------------------------------< propertiesCompleted>---
annotation|@
name|Test
specifier|public
name|void
name|testPropertiesCompletedClearsCache
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|Tree
name|cacheTree
init|=
name|userTree
operator|.
name|addChild
argument_list|(
name|CacheConstants
operator|.
name|REP_CACHE
argument_list|)
decl_stmt|;
name|cacheTree
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|CacheConstants
operator|.
name|NT_REP_CACHE
argument_list|)
expr_stmt|;
name|importer
operator|.
name|propertiesCompleted
argument_list|(
name|cacheTree
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cacheTree
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|userTree
operator|.
name|hasChild
argument_list|(
name|CacheConstants
operator|.
name|REP_CACHE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertiesCompletedParentNotAuthorizable
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|importer
operator|.
name|propertiesCompleted
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertiesCompletedIdMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|importer
operator|.
name|propertiesCompleted
argument_list|(
name|userTree
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|userTree
operator|.
name|hasProperty
argument_list|(
name|REP_AUTHORIZABLE_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertiesCompletedIdPresent
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|testAction
operator|=
operator|new
name|TestAction
argument_list|()
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|userTree
operator|.
name|setProperty
argument_list|(
name|REP_AUTHORIZABLE_ID
argument_list|,
literal|"userId"
argument_list|)
expr_stmt|;
name|importer
operator|.
name|propertiesCompleted
argument_list|(
name|userTree
argument_list|)
expr_stmt|;
comment|// property must not be touched
name|assertEquals
argument_list|(
literal|"userId"
argument_list|,
name|userTree
operator|.
name|getProperty
argument_list|(
name|REP_AUTHORIZABLE_ID
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertiesCompletedNewUser
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|importer
operator|.
name|propertiesCompleted
argument_list|(
name|createUserTree
argument_list|()
argument_list|)
expr_stmt|;
name|testAction
operator|.
name|checkMethods
argument_list|(
literal|"onCreate-User"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertiesCompletedNewGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|groupTree
init|=
name|createGroupTree
argument_list|()
decl_stmt|;
name|init
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|importer
operator|.
name|propertiesCompleted
argument_list|(
name|groupTree
argument_list|)
expr_stmt|;
name|testAction
operator|.
name|checkMethods
argument_list|(
literal|"onCreate-Group"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertiesCompletedExistingUser
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|importer
operator|.
name|propertiesCompleted
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|testUser
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|testAction
operator|.
name|checkMethods
argument_list|()
expr_stmt|;
block|}
comment|//--------------------------------------------------------------< start>---
annotation|@
name|Test
specifier|public
name|void
name|testStartUserTree
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|start
argument_list|(
name|createUserTree
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartGroupTree
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|start
argument_list|(
name|createGroupTree
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartMembersRefListTree
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|groupTree
init|=
name|createGroupTree
argument_list|()
decl_stmt|;
name|Tree
name|memberRefList
init|=
name|groupTree
operator|.
name|addChild
argument_list|(
name|REP_MEMBERS_LIST
argument_list|)
decl_stmt|;
name|memberRefList
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_REP_MEMBER_REFERENCES_LIST
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|importer
operator|.
name|start
argument_list|(
name|memberRefList
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartMembersRefListBelowUserTree
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|Tree
name|memberRefList
init|=
name|userTree
operator|.
name|addChild
argument_list|(
name|REP_MEMBERS_LIST
argument_list|)
decl_stmt|;
name|memberRefList
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_REP_MEMBER_REFERENCES_LIST
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|start
argument_list|(
name|memberRefList
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartMembersRefBelowAnyTree
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|memberRefList
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
operator|.
name|addChild
argument_list|(
name|REP_MEMBERS_LIST
argument_list|)
decl_stmt|;
name|memberRefList
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_REP_MEMBER_REFERENCES_LIST
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|start
argument_list|(
name|memberRefList
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartRepMembersTree
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|groupTree
init|=
name|createGroupTree
argument_list|()
decl_stmt|;
name|Tree
name|repMembers
init|=
name|groupTree
operator|.
name|addChild
argument_list|(
literal|"memberTree"
argument_list|)
decl_stmt|;
name|repMembers
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_REP_MEMBERS
argument_list|)
expr_stmt|;
name|repMembers
operator|=
name|repMembers
operator|.
name|addChild
argument_list|(
literal|"memberTree"
argument_list|)
expr_stmt|;
name|repMembers
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_REP_MEMBERS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|importer
operator|.
name|start
argument_list|(
name|repMembers
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartRepMembersBelowUserTree
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|userTree
init|=
name|createUserTree
argument_list|()
decl_stmt|;
name|Tree
name|repMembers
init|=
name|userTree
operator|.
name|addChild
argument_list|(
literal|"memberTree"
argument_list|)
decl_stmt|;
name|repMembers
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_REP_MEMBERS
argument_list|)
expr_stmt|;
name|repMembers
operator|=
name|repMembers
operator|.
name|addChild
argument_list|(
literal|"memberTree"
argument_list|)
expr_stmt|;
name|repMembers
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_REP_MEMBERS
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|start
argument_list|(
name|repMembers
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartRepMembersBelowAnyTree
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|repMembers
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"memberTree"
argument_list|)
decl_stmt|;
name|repMembers
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_REP_MEMBERS
argument_list|)
expr_stmt|;
name|repMembers
operator|=
name|repMembers
operator|.
name|addChild
argument_list|(
literal|"memberTree"
argument_list|)
expr_stmt|;
name|repMembers
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_REP_MEMBERS
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|start
argument_list|(
name|repMembers
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//-----------------------------------------------------< startChildInfo>---
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testStartChildInfoIllegalState
parameter_list|()
throws|throws
name|Exception
block|{
name|importer
operator|.
name|startChildInfo
argument_list|(
name|createNodeInfo
argument_list|(
literal|"memberRef"
argument_list|,
name|NT_REP_MEMBER_REFERENCES
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|createPropInfo
argument_list|(
name|REP_MEMBERS
argument_list|,
literal|"member1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testStartChildInfoWithoutValidStart
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|memberRefList
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
operator|.
name|addChild
argument_list|(
name|REP_MEMBERS_LIST
argument_list|)
decl_stmt|;
name|memberRefList
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_REP_MEMBER_REFERENCES_LIST
argument_list|)
expr_stmt|;
name|importer
operator|.
name|start
argument_list|(
name|memberRefList
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|createNodeInfo
argument_list|(
literal|"memberRef"
argument_list|,
name|NT_REP_MEMBER_REFERENCES
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|createPropInfo
argument_list|(
name|REP_MEMBERS
argument_list|,
literal|"member1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartChildInfoWithoutRepMembersProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|groupTree
init|=
name|createGroupTree
argument_list|()
decl_stmt|;
name|Tree
name|memberRefList
init|=
name|groupTree
operator|.
name|addChild
argument_list|(
name|REP_MEMBERS_LIST
argument_list|)
decl_stmt|;
name|memberRefList
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_REP_MEMBER_REFERENCES_LIST
argument_list|)
expr_stmt|;
name|importer
operator|.
name|start
argument_list|(
name|memberRefList
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|createNodeInfo
argument_list|(
literal|"memberRef"
argument_list|,
name|NT_REP_MEMBER_REFERENCES
argument_list|)
argument_list|,
name|ImmutableList
operator|.
expr|<
name|PropInfo
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartChildInfoWithRepMembersProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|groupTree
init|=
name|createGroupTree
argument_list|()
decl_stmt|;
name|Tree
name|memberRefList
init|=
name|groupTree
operator|.
name|addChild
argument_list|(
name|REP_MEMBERS_LIST
argument_list|)
decl_stmt|;
name|memberRefList
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_REP_MEMBER_REFERENCES_LIST
argument_list|)
expr_stmt|;
name|importer
operator|.
name|start
argument_list|(
name|memberRefList
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|createNodeInfo
argument_list|(
literal|"memberRef"
argument_list|,
name|NT_REP_MEMBER_REFERENCES
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|createPropInfo
argument_list|(
name|REP_MEMBERS
argument_list|,
literal|"member1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartRepMembersChildInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|groupTree
init|=
name|createGroupTree
argument_list|()
decl_stmt|;
name|Tree
name|repMembers
init|=
name|groupTree
operator|.
name|addChild
argument_list|(
literal|"memberTree"
argument_list|)
decl_stmt|;
name|repMembers
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_REP_MEMBERS
argument_list|)
expr_stmt|;
name|importer
operator|.
name|start
argument_list|(
name|repMembers
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|createNodeInfo
argument_list|(
literal|"memberTree"
argument_list|,
name|NT_REP_MEMBERS
argument_list|)
argument_list|,
name|ImmutableList
operator|.
expr|<
name|PropInfo
operator|>
name|of
argument_list|(
name|createPropInfo
argument_list|(
literal|"anyProp"
argument_list|,
literal|"memberValue"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartOtherChildInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|groupTree
init|=
name|createGroupTree
argument_list|()
decl_stmt|;
name|Tree
name|memberRefList
init|=
name|groupTree
operator|.
name|addChild
argument_list|(
name|REP_MEMBERS_LIST
argument_list|)
decl_stmt|;
name|memberRefList
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_REP_MEMBER_REFERENCES_LIST
argument_list|)
expr_stmt|;
name|importer
operator|.
name|start
argument_list|(
name|memberRefList
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|createNodeInfo
argument_list|(
literal|"memberRef"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|createPropInfo
argument_list|(
name|REP_MEMBERS
argument_list|,
literal|"member1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

