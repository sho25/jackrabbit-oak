begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|cug
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|CugEvaluationTest
extends|extends
name|AbstractCugTest
implements|implements
name|NodeTypeConstants
block|{
specifier|private
name|ContentSession
name|testSession
decl_stmt|;
specifier|private
name|Root
name|testRoot
decl_stmt|;
specifier|private
name|Principal
name|testGroupPrincipal
decl_stmt|;
specifier|private
name|Tree
name|content
decl_stmt|;
specifier|private
name|Tree
name|content2
decl_stmt|;
specifier|private
name|Tree
name|a
decl_stmt|;
specifier|private
name|Tree
name|c
decl_stmt|;
annotation|@
name|Before
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
comment|// create cugs
comment|// - /content/a     : allow testGroup, deny everyone
comment|// - /content/aa/bb : allow testGroup, deny everyone
comment|// - /content/a/b/c : allow everyone,  deny testGroup (isolated)
comment|// - /content2      : allow everyone,  deny testGroup (isolated)
comment|// regular acl:
comment|// - /content       : allow testUser, jcr:read
comment|// - /content       : allow testGroup, jcr:read, jcr:write, jcr:readAccessControl
name|setupCugsAndAcls
argument_list|()
expr_stmt|;
name|testGroupPrincipal
operator|=
name|getTestGroupPrincipal
argument_list|()
expr_stmt|;
name|content
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/content"
argument_list|)
expr_stmt|;
name|content2
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/content2"
argument_list|)
expr_stmt|;
name|a
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/a"
argument_list|)
expr_stmt|;
name|c
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/a/b/c"
argument_list|)
expr_stmt|;
name|testSession
operator|=
name|createTestSession
argument_list|()
expr_stmt|;
name|testRoot
operator|=
name|testSession
operator|.
name|getLatestRoot
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|testSession
operator|!=
literal|null
condition|)
block|{
name|testSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|PermissionProvider
name|createPermissionProvider
parameter_list|(
name|ContentSession
name|cs
parameter_list|)
block|{
return|return
name|getSecurityProvider
argument_list|()
operator|.
name|getConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
name|adminSession
operator|.
name|getWorkspaceName
argument_list|()
argument_list|,
name|cs
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getPrincipals
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|PermissionProvider
name|createPermissionProvider
parameter_list|(
name|Principal
modifier|...
name|principals
parameter_list|)
block|{
return|return
name|getSecurityProvider
argument_list|()
operator|.
name|getConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
name|adminSession
operator|.
name|getWorkspaceName
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|principals
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRead
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|noAccess
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/"
argument_list|,
name|UNSUPPORTED_PATH
argument_list|,
comment|/* no access */
literal|"/content/a"
argument_list|,
literal|"/content/a/b"
argument_list|,
literal|"/content/aa/bb"
argument_list|,
comment|/* granted by ace, denied by cug */
literal|"/content2"
comment|/* granted by cug only */
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|noAccess
control|)
block|{
name|assertFalse
argument_list|(
name|p
argument_list|,
name|testRoot
operator|.
name|getTree
argument_list|(
name|p
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|readAccess
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content"
argument_list|,
literal|"/content/subtree"
argument_list|,
literal|"/content/a/b/c"
argument_list|,
literal|"/content/aa"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|readAccess
control|)
block|{
name|assertTrue
argument_list|(
name|p
argument_list|,
name|testRoot
operator|.
name|getTree
argument_list|(
name|p
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadAcl
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|testRoot
operator|.
name|getTree
argument_list|(
literal|"/content/rep:policy"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadAcl2
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentSession
name|cs
init|=
name|createTestSession2
argument_list|()
decl_stmt|;
try|try
block|{
name|Root
name|r
init|=
name|cs
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|getTree
argument_list|(
literal|"/content/rep:policy"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadCug
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|noAccess
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/a/rep:cugPolicy"
argument_list|,
literal|"/content/aa/bb/rep:cugPolicy"
argument_list|,
literal|"/content2/rep:cugPolicy"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|noAccess
control|)
block|{
name|assertFalse
argument_list|(
name|p
argument_list|,
name|testRoot
operator|.
name|getTree
argument_list|(
name|p
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadCug2
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentSession
name|cs
init|=
name|createTestSession2
argument_list|()
decl_stmt|;
try|try
block|{
name|Root
name|r
init|=
name|cs
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|getTree
argument_list|(
literal|"/content/a/rep:cugPolicy"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|getTree
argument_list|(
literal|"/content2/rep:cugPolicy"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|readOnly
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content"
argument_list|,
literal|"/content/a/b/c"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|readOnly
control|)
block|{
try|try
block|{
name|NodeUtil
name|content
init|=
operator|new
name|NodeUtil
argument_list|(
name|testRoot
operator|.
name|getTree
argument_list|(
name|p
argument_list|)
argument_list|)
decl_stmt|;
name|content
operator|.
name|addChild
argument_list|(
literal|"writeTest"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|testRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|isAccessViolation
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWrite2
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentSession
name|cs
init|=
name|createTestSession2
argument_list|()
decl_stmt|;
name|Root
name|r
init|=
name|cs
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
try|try
block|{
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|(
name|cs
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/writeTest"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|ADD_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/a/b/c/writeTest"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|ADD_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content"
argument_list|,
literal|"/content/a/b/c"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|paths
control|)
block|{
name|NodeUtil
name|content
init|=
operator|new
name|NodeUtil
argument_list|(
name|r
operator|.
name|getTree
argument_list|(
name|p
argument_list|)
argument_list|)
decl_stmt|;
name|content
operator|.
name|addChild
argument_list|(
literal|"writeTest"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|r
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|r
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|cs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteAcl
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentSession
name|cs
init|=
name|createTestSession2
argument_list|()
decl_stmt|;
name|Root
name|r
init|=
name|cs
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
try|try
block|{
name|Tree
name|tree
init|=
name|r
operator|.
name|getTree
argument_list|(
literal|"/content/a/b/c"
argument_list|)
decl_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|MIX_REP_CUG_MIXIN
argument_list|,
name|AccessControlConstants
operator|.
name|MIX_REP_ACCESS_CONTROLLABLE
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|tree
operator|.
name|addChild
argument_list|(
name|AccessControlConstants
operator|.
name|REP_POLICY
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|AccessControlConstants
operator|.
name|NT_REP_ACL
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|r
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|isAccessViolation
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|r
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteCug
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentSession
name|cs
init|=
name|createTestSession2
argument_list|()
decl_stmt|;
name|Root
name|r
init|=
name|cs
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
try|try
block|{
comment|// modify the existing cug
name|Tree
name|tree
init|=
name|r
operator|.
name|getTree
argument_list|(
literal|"/content/a/rep:cugPolicy"
argument_list|)
decl_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
name|REP_PRINCIPAL_NAMES
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|EveryonePrincipal
operator|.
name|NAME
argument_list|,
name|testGroupPrincipal
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|r
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|isAccessViolation
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|r
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedTestGroup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// testGroup
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|(
name|testGroupPrincipal
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|content
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|a
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|c
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|content
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|a
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|c
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedEveryone
parameter_list|()
throws|throws
name|Exception
block|{
comment|// everyone
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|content
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|content2
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|a
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|c
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|content
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|content2
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|a
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|c
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedTestGroupEveryone
parameter_list|()
throws|throws
name|Exception
block|{
comment|// testGroup + everyone
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|(
name|testGroupPrincipal
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|content
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|a
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|c
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|content
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|a
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|c
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedTestUserEveryone
parameter_list|()
throws|throws
name|Exception
block|{
comment|// testUser + everyone
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|content
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|a
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|c
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|content
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|a
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|c
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegesTestGroup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// testGroup
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|(
name|testGroupPrincipal
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|content
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|a
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|c
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|content
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|a
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|c
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegesEveryone
parameter_list|()
throws|throws
name|Exception
block|{
comment|// everyone
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|content
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|content2
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|a
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|c
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|content
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|content2
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|a
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|c
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegesTestGroupEveryone
parameter_list|()
throws|throws
name|Exception
block|{
comment|// testGroup + everyone
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|(
name|testGroupPrincipal
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|content
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|a
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|c
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|content
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|a
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|c
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegesTestUserEveryone
parameter_list|()
throws|throws
name|Exception
block|{
comment|// testUser + everyone
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|content
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|a
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|c
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|content
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|a
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|c
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasAllPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
comment|// testGroup
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|(
name|testGroupPrincipal
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|content
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|a
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|c
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasAllPrivileges2
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|AccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
literal|"/content/a"
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testGroupPrincipal
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
literal|"/content/a"
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// testGroup
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|(
name|testGroupPrincipal
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content"
argument_list|)
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/a"
argument_list|)
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/a/b"
argument_list|)
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/a/b/c"
argument_list|)
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasAllPrivilegesAdmin
parameter_list|()
throws|throws
name|Exception
block|{
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|(
name|adminSession
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|content
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|a
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|c
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesTestGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|w_rac
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|r_w_rac
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
comment|// testGroup
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|(
name|testGroupPrincipal
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|r_w_rac
argument_list|,
name|pp
operator|.
name|getPrivileges
argument_list|(
name|content
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r_w_rac
argument_list|,
name|pp
operator|.
name|getPrivileges
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|w_rac
argument_list|,
name|pp
operator|.
name|getPrivileges
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|getPrivileges
argument_list|(
name|content2
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesEveryone
parameter_list|()
throws|throws
name|Exception
block|{
comment|// everyone
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|getPrivileges
argument_list|(
name|content
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|getPrivileges
argument_list|(
name|content2
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|getPrivileges
argument_list|(
name|a
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|getPrivileges
argument_list|(
name|c
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesTestGroupEveryone
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|r_w_rac
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
comment|// testGroup + everyone
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|(
name|testGroupPrincipal
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|r_w_rac
argument_list|,
name|pp
operator|.
name|getPrivileges
argument_list|(
name|content
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r_w_rac
argument_list|,
name|pp
operator|.
name|getPrivileges
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r_w_rac
argument_list|,
name|pp
operator|.
name|getPrivileges
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|getPrivileges
argument_list|(
name|content2
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesTestUserEveryone
parameter_list|()
throws|throws
name|Exception
block|{
comment|// testUser + everyone
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|r
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|r
argument_list|,
name|pp
operator|.
name|getPrivileges
argument_list|(
name|content
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r
argument_list|,
name|pp
operator|.
name|getPrivileges
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|getPrivileges
argument_list|(
name|a
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|getPrivileges
argument_list|(
name|content2
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

