begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|FileBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|MemoryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|Id
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|StoredCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|persistence
operator|.
name|H2Persistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|persistence
operator|.
name|InMemPersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|DefaultRevisionStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|RevisionStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|Repository
block|{
specifier|private
specifier|final
name|File
name|homeDir
decl_stmt|;
specifier|private
name|boolean
name|initialized
decl_stmt|;
specifier|private
name|RevisionStore
name|rs
decl_stmt|;
specifier|private
name|BlobStore
name|bs
decl_stmt|;
specifier|private
name|boolean
name|blobStoreNeedsClose
decl_stmt|;
specifier|public
name|Repository
parameter_list|(
name|String
name|homeDir
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|home
init|=
operator|new
name|File
argument_list|(
name|homeDir
operator|==
literal|null
condition|?
literal|"."
else|:
name|homeDir
argument_list|,
literal|".mk"
argument_list|)
decl_stmt|;
name|this
operator|.
name|homeDir
operator|=
name|home
operator|.
name|getCanonicalFile
argument_list|()
expr_stmt|;
block|}
comment|/**      * Alternate constructor, used for testing.      *       * @param rs revision store      * @param bs blob store      */
specifier|public
name|Repository
parameter_list|(
name|RevisionStore
name|rs
parameter_list|,
name|BlobStore
name|bs
parameter_list|)
block|{
name|this
operator|.
name|homeDir
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|rs
operator|=
name|rs
expr_stmt|;
name|this
operator|.
name|bs
operator|=
name|bs
expr_stmt|;
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Argument-less constructor, used for in-memory kernel.      */
specifier|protected
name|Repository
parameter_list|()
block|{
name|this
operator|.
name|homeDir
operator|=
literal|null
expr_stmt|;
name|DefaultRevisionStore
name|rs
init|=
operator|new
name|DefaultRevisionStore
argument_list|(
operator|new
name|InMemPersistence
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|rs
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|/* Not plausible for in-memory operation */
throw|throw
operator|new
name|InternalError
argument_list|(
literal|"Unable to initialize in-memory store"
argument_list|)
throw|;
block|}
name|this
operator|.
name|rs
operator|=
name|rs
expr_stmt|;
name|this
operator|.
name|bs
operator|=
operator|new
name|MemoryBlobStore
argument_list|()
expr_stmt|;
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|initialized
condition|)
block|{
return|return;
block|}
name|H2Persistence
name|pm
init|=
operator|new
name|H2Persistence
argument_list|()
decl_stmt|;
name|pm
operator|.
name|initialize
argument_list|(
name|homeDir
argument_list|)
expr_stmt|;
name|DefaultRevisionStore
name|rs
init|=
operator|new
name|DefaultRevisionStore
argument_list|(
name|pm
argument_list|)
decl_stmt|;
name|rs
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|this
operator|.
name|rs
operator|=
name|rs
expr_stmt|;
if|if
condition|(
name|pm
operator|instanceof
name|BlobStore
condition|)
block|{
name|bs
operator|=
operator|(
name|BlobStore
operator|)
name|pm
expr_stmt|;
block|}
else|else
block|{
name|bs
operator|=
operator|new
name|FileBlobStore
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"blobs"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|blobStoreNeedsClose
operator|=
literal|true
expr_stmt|;
block|}
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|shutDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|blobStoreNeedsClose
operator|&&
name|bs
operator|instanceof
name|Closeable
condition|)
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
operator|(
name|Closeable
operator|)
name|bs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rs
operator|instanceof
name|Closeable
condition|)
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
operator|(
name|Closeable
operator|)
name|rs
argument_list|)
expr_stmt|;
block|}
name|initialized
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|RevisionStore
name|getRevisionStore
parameter_list|()
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"not initialized"
argument_list|)
throw|;
block|}
return|return
name|rs
return|;
block|}
specifier|public
name|BlobStore
name|getBlobStore
parameter_list|()
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"not initialized"
argument_list|)
throw|;
block|}
return|return
name|bs
return|;
block|}
specifier|public
name|Id
name|getHeadRevision
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"not initialized"
argument_list|)
throw|;
block|}
return|return
name|rs
operator|.
name|getHeadCommitId
argument_list|()
return|;
block|}
specifier|public
name|StoredCommit
name|getHeadCommit
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"not initialized"
argument_list|)
throw|;
block|}
return|return
name|rs
operator|.
name|getHeadCommit
argument_list|()
return|;
block|}
specifier|public
name|StoredCommit
name|getCommit
parameter_list|(
name|Id
name|id
parameter_list|)
throws|throws
name|NotFoundException
throws|,
name|Exception
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"not initialized"
argument_list|)
throw|;
block|}
return|return
name|rs
operator|.
name|getCommit
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|public
name|NodeState
name|getNodeState
parameter_list|(
name|Id
name|revId
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"not initialized"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal path"
argument_list|)
throw|;
block|}
name|NodeState
name|node
init|=
name|rs
operator|.
name|getNodeState
argument_list|(
name|rs
operator|.
name|getRootNode
argument_list|(
name|revId
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|node
operator|=
name|node
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
break|break;
block|}
block|}
return|return
name|node
return|;
block|}
specifier|public
name|boolean
name|nodeExists
parameter_list|(
name|Id
name|revId
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"not initialized"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal path"
argument_list|)
throw|;
block|}
name|NodeState
name|node
init|=
name|rs
operator|.
name|getNodeState
argument_list|(
name|rs
operator|.
name|getRootNode
argument_list|(
name|revId
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|node
operator|=
name|node
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|CommitBuilder
name|getCommitBuilder
parameter_list|(
name|Id
name|revId
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|CommitBuilder
argument_list|(
name|revId
argument_list|,
name|msg
argument_list|,
name|rs
argument_list|)
return|;
block|}
block|}
end_class

end_unit

