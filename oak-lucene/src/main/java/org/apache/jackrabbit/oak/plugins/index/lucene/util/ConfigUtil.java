begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_class
specifier|public
class|class
name|ConfigUtil
block|{
specifier|public
specifier|static
name|boolean
name|getOptionalValue
parameter_list|(
name|NodeState
name|definition
parameter_list|,
name|String
name|propName
parameter_list|,
name|boolean
name|defaultVal
parameter_list|)
block|{
name|PropertyState
name|ps
init|=
name|definition
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
decl_stmt|;
return|return
name|ps
operator|==
literal|null
condition|?
name|defaultVal
else|:
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|getOptionalValue
parameter_list|(
name|NodeState
name|definition
parameter_list|,
name|String
name|propName
parameter_list|,
name|int
name|defaultVal
parameter_list|)
block|{
name|PropertyState
name|ps
init|=
name|definition
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
decl_stmt|;
return|return
name|ps
operator|==
literal|null
condition|?
name|defaultVal
else|:
name|Ints
operator|.
name|checkedCast
argument_list|(
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getOptionalValue
parameter_list|(
name|NodeState
name|definition
parameter_list|,
name|String
name|propName
parameter_list|,
name|String
name|defaultVal
parameter_list|)
block|{
name|PropertyState
name|ps
init|=
name|definition
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
decl_stmt|;
return|return
name|ps
operator|==
literal|null
condition|?
name|defaultVal
else|:
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|float
name|getOptionalValue
parameter_list|(
name|NodeState
name|definition
parameter_list|,
name|String
name|propName
parameter_list|,
name|float
name|defaultVal
parameter_list|)
block|{
name|PropertyState
name|ps
init|=
name|definition
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
decl_stmt|;
return|return
name|ps
operator|==
literal|null
condition|?
name|defaultVal
else|:
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
block|}
end_class

end_unit

