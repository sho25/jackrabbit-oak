begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_comment
comment|/**  * Represents a preconditions set that may be satisfied by adding the right  * candidates.  *<p/>  * Initially, a set of preconditions is empty. An empty set of preconditions is  * always satisfied. If candidates are added, but the precondition set is empty,  * the preconditions are considered satisfied.  *<p/>  * When some preconditions are added, the preconditions set may enter into the  * unsatisfied state. In this case, the preconditions set may be come satisfied  * again only with the addition of the right candidates.  *<p/>  * This class doesn't admit duplicates for preconditions or candidates. Adding  * the same precondition (or candidate) twice doesn't have any effect on the  * state of the preconditions set.  */
end_comment

begin_class
class|class
name|Preconditions
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|preconditions
init|=
name|newHashSet
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|candidates
init|=
name|newHashSet
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|satisfied
init|=
literal|true
decl_stmt|;
comment|/**      * Add a precondition to this preconditions set. If the precondition already      * belongs to this set, this operation has no effect.      *      * @param precondition The precondition to be added.      */
specifier|public
name|void
name|addPrecondition
parameter_list|(
name|String
name|precondition
parameter_list|)
block|{
if|if
condition|(
name|preconditions
operator|.
name|add
argument_list|(
name|precondition
argument_list|)
condition|)
block|{
name|dirty
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**      * Remove all the preconditions to this set. This makes the set of      * preconditions empty and, as such, satisfied.      */
specifier|public
name|void
name|clearPreconditions
parameter_list|()
block|{
name|preconditions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dirty
operator|=
literal|false
expr_stmt|;
name|satisfied
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Add a candidate to this preconditions set. If the candidate already      * belongs to this set, this operation has no effect.      *      * @param candidate The candidate to be added.      */
specifier|public
name|void
name|addCandidate
parameter_list|(
name|String
name|candidate
parameter_list|)
block|{
if|if
condition|(
name|candidates
operator|.
name|add
argument_list|(
name|candidate
argument_list|)
condition|)
block|{
name|dirty
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**      * Remove a candidate from this preconditions set. If the candidate doesn't      * belong to this set, this operation has no effect.      *      * @param candidate The candidate to be removed.      */
specifier|public
name|void
name|removeCandidate
parameter_list|(
name|String
name|candidate
parameter_list|)
block|{
if|if
condition|(
name|candidates
operator|.
name|remove
argument_list|(
name|candidate
argument_list|)
condition|)
block|{
name|dirty
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**      * Check if the preconditions set are satisfied.      *      * @return {@code true} if the preconditions set is satisfied, {@code false}      * otherwise.      */
specifier|public
name|boolean
name|areSatisfied
parameter_list|()
block|{
if|if
condition|(
name|dirty
condition|)
block|{
name|satisfied
operator|=
name|candidates
operator|.
name|containsAll
argument_list|(
name|preconditions
argument_list|)
expr_stmt|;
name|dirty
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|satisfied
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"Preconditions(preconditions = %s, candidates = %s)"
argument_list|,
name|preconditions
argument_list|,
name|candidates
argument_list|)
return|;
block|}
block|}
end_class

end_unit

