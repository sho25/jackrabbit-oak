begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|basic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|AbstractExternalAuthTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalUser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncedIdentity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|TestIdentityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultSyncContextTest
extends|extends
name|AbstractExternalAuthTest
block|{
specifier|private
name|UserManager
name|userManager
decl_stmt|;
specifier|private
name|ValueFactory
name|valueFactory
decl_stmt|;
specifier|private
name|DefaultSyncContext
name|syncCtx
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|userManager
operator|=
name|getUserManager
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|valueFactory
operator|=
name|getValueFactory
argument_list|()
expr_stmt|;
name|syncCtx
operator|=
operator|new
name|DefaultSyncContext
argument_list|(
name|syncConfig
argument_list|,
name|idp
argument_list|,
name|userManager
argument_list|,
name|valueFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|syncCtx
operator|.
name|close
argument_list|()
expr_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|DefaultSyncConfig
name|createSyncConfig
parameter_list|()
block|{
return|return
operator|new
name|DefaultSyncConfig
argument_list|()
return|;
block|}
specifier|private
name|Group
name|createTestGroup
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|userManager
operator|.
name|createGroup
argument_list|(
literal|"group"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Test utility method to synchronize the given identity into the repository.      * This is intended to simplify those tests that require a given user/group      * to be synchronized before executing the test.      *      * @param externalIdentity The external identity to be synchronized.      * @throws Exception      */
specifier|private
name|void
name|sync
parameter_list|(
annotation|@
name|Nonnull
name|ExternalIdentity
name|externalIdentity
parameter_list|)
throws|throws
name|Exception
block|{
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|externalIdentity
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|ADD
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setExternalID
parameter_list|(
annotation|@
name|Nonnull
name|Authorizable
name|authorizable
parameter_list|,
annotation|@
name|Nullable
name|String
name|idpName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|authorizable
operator|.
name|setProperty
argument_list|(
name|DefaultSyncContext
operator|.
name|REP_EXTERNAL_ID
argument_list|,
name|valueFactory
operator|.
name|createValue
argument_list|(
name|authorizable
operator|.
name|getID
argument_list|()
operator|+
literal|';'
operator|+
name|idpName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSyncedIdentityNull
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|DefaultSyncContext
operator|.
name|createSyncedIdentity
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSyncedIdentityLocalGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|gr
init|=
name|createTestGroup
argument_list|()
decl_stmt|;
name|SyncedIdentity
name|si
init|=
name|DefaultSyncContext
operator|.
name|createSyncedIdentity
argument_list|(
name|gr
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|gr
operator|.
name|getID
argument_list|()
argument_list|,
name|si
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|si
operator|.
name|getExternalIdRef
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|si
operator|.
name|isGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|si
operator|.
name|lastSynced
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSyncedIdentityLocalUser
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|u
init|=
name|getTestUser
argument_list|()
decl_stmt|;
name|SyncedIdentity
name|si
init|=
name|DefaultSyncContext
operator|.
name|createSyncedIdentity
argument_list|(
name|u
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|u
operator|.
name|getID
argument_list|()
argument_list|,
name|si
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|si
operator|.
name|getExternalIdRef
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|si
operator|.
name|isGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|si
operator|.
name|lastSynced
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSyncedIdentitySyncedGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentity
name|externalGroup
init|=
name|idp
operator|.
name|listGroups
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|sync
argument_list|(
name|externalGroup
argument_list|)
expr_stmt|;
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalGroup
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|SyncedIdentity
name|si
init|=
name|DefaultSyncContext
operator|.
name|createSyncedIdentity
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|.
name|getID
argument_list|()
argument_list|,
name|si
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|si
operator|.
name|getExternalIdRef
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|si
operator|.
name|isGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|syncCtx
operator|.
name|now
argument_list|,
name|si
operator|.
name|lastSynced
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSyncedIdentitySyncedUser
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentity
name|externalUser
init|=
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|sync
argument_list|(
name|externalUser
argument_list|)
expr_stmt|;
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|SyncedIdentity
name|si
init|=
name|DefaultSyncContext
operator|.
name|createSyncedIdentity
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|.
name|getID
argument_list|()
argument_list|,
name|si
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|si
operator|.
name|getExternalIdRef
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|si
operator|.
name|isGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|syncCtx
operator|.
name|now
argument_list|,
name|si
operator|.
name|lastSynced
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSyncedIdentityEmptyLastSyncedProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|gr
init|=
name|createTestGroup
argument_list|()
decl_stmt|;
name|gr
operator|.
name|setProperty
argument_list|(
name|DefaultSyncContext
operator|.
name|REP_LAST_SYNCED
argument_list|,
operator|new
name|Value
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|SyncedIdentity
name|si
init|=
name|DefaultSyncContext
operator|.
name|createSyncedIdentity
argument_list|(
name|gr
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|si
operator|.
name|lastSynced
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetIdentityRefNull
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|DefaultSyncContext
operator|.
name|getIdentityRef
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetIdentityRefLocalGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|DefaultSyncContext
operator|.
name|getIdentityRef
argument_list|(
name|createTestGroup
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetIdentityRefLocalUser
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|DefaultSyncContext
operator|.
name|getIdentityRef
argument_list|(
name|getTestUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetIdentityRefSyncGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentity
name|externalGroup
init|=
name|idp
operator|.
name|listGroups
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|sync
argument_list|(
name|externalGroup
argument_list|)
expr_stmt|;
name|ExternalIdentityRef
name|ref
init|=
name|DefaultSyncContext
operator|.
name|getIdentityRef
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalGroup
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|externalGroup
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetIdentityRefSyncUser
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentity
name|externalUser
init|=
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|sync
argument_list|(
name|externalUser
argument_list|)
expr_stmt|;
name|ExternalIdentityRef
name|ref
init|=
name|DefaultSyncContext
operator|.
name|getIdentityRef
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|externalUser
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetIdentityRefEmptyMvProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|gr
init|=
name|createTestGroup
argument_list|()
decl_stmt|;
comment|// NOTE: making rep:externalId a multivalue property without any value
comment|//       not committing the changes as this prop is expected to become
comment|//       protected to prevent unintentional or malicious modification.
name|gr
operator|.
name|setProperty
argument_list|(
name|DefaultSyncContext
operator|.
name|REP_EXTERNAL_ID
argument_list|,
operator|new
name|Value
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ExternalIdentityRef
name|ref
init|=
name|DefaultSyncContext
operator|.
name|getIdentityRef
argument_list|(
name|gr
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsKeepMissing
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|syncCtx
operator|.
name|isKeepMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|syncCtx
argument_list|,
name|syncCtx
operator|.
name|setKeepMissing
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|syncCtx
operator|.
name|isKeepMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|syncCtx
argument_list|,
name|syncCtx
operator|.
name|setKeepMissing
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|syncCtx
operator|.
name|isKeepMissing
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsForceUserSync
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|syncCtx
operator|.
name|isForceUserSync
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|syncCtx
argument_list|,
name|syncCtx
operator|.
name|setForceUserSync
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|syncCtx
operator|.
name|isForceUserSync
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|syncCtx
argument_list|,
name|syncCtx
operator|.
name|setForceUserSync
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|syncCtx
operator|.
name|isForceUserSync
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsForceGroupSync
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|syncCtx
operator|.
name|isForceGroupSync
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|syncCtx
argument_list|,
name|syncCtx
operator|.
name|setForceGroupSync
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|syncCtx
operator|.
name|isForceGroupSync
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|syncCtx
argument_list|,
name|syncCtx
operator|.
name|setForceGroupSync
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|syncCtx
operator|.
name|isForceGroupSync
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSyncInvalidExternalIdentity
parameter_list|()
throws|throws
name|Exception
block|{
name|syncCtx
operator|.
name|sync
argument_list|(
operator|new
name|TestIdentityProvider
operator|.
name|TestIdentity
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncExternalUser
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalUser
name|user
init|=
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|ADD
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|NOP
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|syncCtx
operator|.
name|setForceUserSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|UPDATE
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncExternalGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalGroup
name|gr
init|=
name|idp
operator|.
name|listGroups
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|gr
argument_list|)
expr_stmt|;
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|gr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|ADD
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|gr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|NOP
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|syncCtx
operator|.
name|setForceGroupSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|gr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|UPDATE
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncForeignExternalUser
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentity
name|foreign
init|=
operator|new
name|TestIdentityProvider
operator|.
name|ForeignExternalUser
argument_list|()
decl_stmt|;
name|SyncResult
name|res
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|foreign
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|FOREIGN
argument_list|,
name|res
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// expect {@code SyncedIdentity} in accordance with {@code sync(String userId)},
comment|// where the authorizable is found to be linked to a different IDP.
name|SyncedIdentity
name|si
init|=
name|res
operator|.
name|getIdentity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|foreign
operator|.
name|getId
argument_list|()
argument_list|,
name|si
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ExternalIdentityRef
name|ref
init|=
name|si
operator|.
name|getExternalIdRef
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|foreign
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|si
operator|.
name|isGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|si
operator|.
name|lastSynced
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|hasPendingChanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncForeignExternalGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentity
name|foreign
init|=
operator|new
name|TestIdentityProvider
operator|.
name|ForeignExternalGroup
argument_list|()
decl_stmt|;
name|SyncResult
name|res
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|foreign
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|FOREIGN
argument_list|,
name|res
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// expect {@code SyncedIdentity} in accordance with {@code sync(String userId)},
comment|// where the authorizable is found to be linked to a different IDP.
name|SyncedIdentity
name|si
init|=
name|res
operator|.
name|getIdentity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|foreign
operator|.
name|getId
argument_list|()
argument_list|,
name|si
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ExternalIdentityRef
name|ref
init|=
name|si
operator|.
name|getExternalIdRef
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|foreign
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|si
operator|.
name|isGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|si
operator|.
name|lastSynced
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|hasPendingChanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncUserById
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentity
name|externalId
init|=
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// no initial sync -> sync-by-id doesn't succeed
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|externalId
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|NO_SUCH_AUTHORIZABLE
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// force sync
name|syncCtx
operator|.
name|sync
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
comment|// try again
name|syncCtx
operator|.
name|setForceUserSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|externalId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|UPDATE
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncRemovedUserById
parameter_list|()
throws|throws
name|Exception
block|{
comment|// mark a regular repo user as external user from the test IDP
name|User
name|u
init|=
name|userManager
operator|.
name|createUser
argument_list|(
literal|"test"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|userId
init|=
name|u
operator|.
name|getID
argument_list|()
decl_stmt|;
name|setExternalID
argument_list|(
name|u
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// test sync with 'keepmissing' = true
name|syncCtx
operator|.
name|setKeepMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|userId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|MISSING
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|userId
argument_list|)
argument_list|)
expr_stmt|;
comment|// test sync with 'keepmissing' = false
name|syncCtx
operator|.
name|setKeepMissing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|userId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|DELETE
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|userId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncGroupById
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentity
name|externalId
init|=
name|idp
operator|.
name|listGroups
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// no initial sync -> sync-by-id doesn't succeed
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|externalId
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|NO_SUCH_AUTHORIZABLE
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// force sync
name|syncCtx
operator|.
name|sync
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
comment|// try again
name|syncCtx
operator|.
name|setForceGroupSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|externalId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|UPDATE
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncRemovedGroupById
parameter_list|()
throws|throws
name|Exception
block|{
comment|// mark a regular repo user as external user from the test IDP
name|Group
name|gr
init|=
name|createTestGroup
argument_list|()
decl_stmt|;
name|String
name|groupId
init|=
name|gr
operator|.
name|getID
argument_list|()
decl_stmt|;
name|setExternalID
argument_list|(
name|gr
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// test sync with 'keepmissing' = true
name|syncCtx
operator|.
name|setKeepMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|MISSING
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|groupId
argument_list|)
argument_list|)
expr_stmt|;
comment|// test sync with 'keepmissing' = false
name|syncCtx
operator|.
name|setKeepMissing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|DELETE
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|groupId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncRemovedGroupWithMembers
parameter_list|()
throws|throws
name|Exception
block|{
comment|// mark a regular repo user as external user from the test IDP
name|Group
name|gr
init|=
name|createTestGroup
argument_list|()
decl_stmt|;
name|gr
operator|.
name|addMember
argument_list|(
name|getTestUser
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|groupId
init|=
name|gr
operator|.
name|getID
argument_list|()
decl_stmt|;
name|setExternalID
argument_list|(
name|gr
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// test sync with 'keepmissing' = true
name|syncCtx
operator|.
name|setKeepMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|NOP
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|groupId
argument_list|)
argument_list|)
expr_stmt|;
comment|// test sync with 'keepmissing' = false
name|syncCtx
operator|.
name|setKeepMissing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|NOP
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|groupId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncByForeignUserId
parameter_list|()
throws|throws
name|Exception
block|{
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|FOREIGN
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|SyncedIdentity
name|si
init|=
name|result
operator|.
name|getIdentity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|si
operator|.
name|getExternalIdRef
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|si
operator|.
name|isGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncByForeignGroupId
parameter_list|()
throws|throws
name|Exception
block|{
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|createTestGroup
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|FOREIGN
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|SyncedIdentity
name|si
init|=
name|result
operator|.
name|getIdentity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|si
operator|.
name|getExternalIdRef
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|si
operator|.
name|isGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncByForeignId2
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|u
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|setExternalID
argument_list|(
name|u
argument_list|,
literal|"differentIDP"
argument_list|)
expr_stmt|;
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|u
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|FOREIGN
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|SyncedIdentity
name|si
init|=
name|result
operator|.
name|getIdentity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DefaultSyncContext
operator|.
name|getIdentityRef
argument_list|(
name|u
argument_list|)
argument_list|,
name|si
operator|.
name|getExternalIdRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SyncException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSyncByIdUsingExceptionId
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|gr
init|=
name|userManager
operator|.
name|createGroup
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_EXCEPTION
argument_list|)
decl_stmt|;
name|setExternalID
argument_list|(
name|gr
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|syncCtx
operator|.
name|sync
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_EXCEPTION
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncAutoMembership
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|gr
init|=
name|createTestGroup
argument_list|()
decl_stmt|;
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setAutoMembership
argument_list|(
name|gr
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|ADD
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|result
operator|.
name|getIdentity
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|gr
operator|.
name|isDeclaredMember
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncAutoMembershipListsNonExistingGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setAutoMembership
argument_list|(
literal|"nonExistingGroup"
argument_list|)
expr_stmt|;
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|ADD
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncAutoMembershipListsUser
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set auto-membership config to point to a user instead a group
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setAutoMembership
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|syncCtx
operator|.
name|sync
argument_list|(
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLostMembership
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a group in the repository which is marked as being external
comment|// and associated with the test-IDP to setup the situation that a
comment|// repository group is no longer listed in the IDP.
name|Group
name|gr
init|=
name|createTestGroup
argument_list|()
decl_stmt|;
name|setExternalID
argument_list|(
name|gr
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// sync an external user from the IDP into the repo and make it member
comment|// of the test group
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|result
operator|.
name|getIdentity
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|gr
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// enforce synchronization of the user and it's group membership
name|syncCtx
operator|.
name|setForceUserSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setMembershipExpirationTime
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// 1. membership nesting is< 0 => membership not synchronized
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setMembershipNestingDepth
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|syncCtx
operator|.
name|sync
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|gr
operator|.
name|isDeclaredMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2. membership nesting is> 0 => membership gets synchronized
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setMembershipNestingDepth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|UPDATE
argument_list|,
name|syncCtx
operator|.
name|sync
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|gr
operator|.
name|isDeclaredMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLostMembershipDifferentIDP
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a group in the repository which is marked as being external
comment|// and associated with another IPD.
name|Group
name|gr
init|=
name|createTestGroup
argument_list|()
decl_stmt|;
name|setExternalID
argument_list|(
name|gr
argument_list|,
literal|"differentIDP"
argument_list|)
expr_stmt|;
comment|// sync an external user from the IDP into the repo and make it member
comment|// of the test group
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|result
operator|.
name|getIdentity
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|gr
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// enforce synchronization of the user and it's group membership
name|syncCtx
operator|.
name|setForceUserSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setMembershipExpirationTime
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setMembershipNestingDepth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|UPDATE
argument_list|,
name|syncCtx
operator|.
name|sync
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// since the group is not associated with the test-IDP the group-membership
comment|// must NOT be modified during the sync.
name|assertTrue
argument_list|(
name|gr
operator|.
name|isDeclaredMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLostMembershipWithExpirationSet
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|expTime
init|=
literal|2
decl_stmt|;
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setMembershipNestingDepth
argument_list|(
literal|1
argument_list|)
operator|.
name|setMembershipExpirationTime
argument_list|(
name|expTime
argument_list|)
operator|.
name|setExpirationTime
argument_list|(
name|expTime
argument_list|)
expr_stmt|;
name|Group
name|gr
init|=
name|createTestGroup
argument_list|()
decl_stmt|;
name|setExternalID
argument_list|(
name|gr
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|SyncResult
name|result
init|=
name|syncCtx
operator|.
name|sync
argument_list|(
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|User
name|user
init|=
operator|(
name|User
operator|)
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|result
operator|.
name|getIdentity
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|gr
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|waitUntilExpired
argument_list|(
name|user
argument_list|,
name|root
argument_list|,
name|expTime
argument_list|)
expr_stmt|;
name|DefaultSyncContext
name|newCtx
init|=
operator|new
name|DefaultSyncContext
argument_list|(
name|syncConfig
argument_list|,
name|idp
argument_list|,
name|userManager
argument_list|,
name|valueFactory
argument_list|)
decl_stmt|;
name|result
operator|=
name|newCtx
operator|.
name|sync
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|UPDATE
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|gr
operator|=
operator|(
name|Group
operator|)
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|gr
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|gr
operator|.
name|isDeclaredMember
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see<a href="https://issues.apache.org/jira/browse/OAK-4397">OAK-4397</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testMembershipForExistingForeignGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setMembershipNestingDepth
argument_list|(
literal|1
argument_list|)
operator|.
name|setMembershipExpirationTime
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|setExpirationTime
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|syncConfig
operator|.
name|group
argument_list|()
operator|.
name|setExpirationTime
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|USER_ID
argument_list|)
decl_stmt|;
name|ExternalIdentityRef
name|groupRef
init|=
name|externalUser
operator|.
name|getDeclaredGroups
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// create the group as if it had been synced by a foreign IDP
name|Group
name|gr
init|=
name|userManager
operator|.
name|createGroup
argument_list|(
name|groupRef
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|setExternalID
argument_list|(
name|gr
argument_list|,
literal|"foreignIDP"
argument_list|)
expr_stmt|;
comment|// but don't set rep:lastSynced :-)
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|sync
argument_list|(
name|externalUser
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|// synchronizing the user from our IDP must _neither_ change the group
comment|// members of the group belonging to a different IDP nor synchronizing
comment|// that foreign group with information retrieved from this IDP (e.g.
comment|// properties and as such must _not_ set the last-synced property.
comment|// -> verify group last-synced has not been added
name|assertFalse
argument_list|(
name|gr
operator|.
name|hasProperty
argument_list|(
name|DefaultSyncContext
operator|.
name|REP_LAST_SYNCED
argument_list|)
argument_list|)
expr_stmt|;
comment|// -> verify group membership has not changed
name|assertFalse
argument_list|(
name|gr
operator|.
name|isDeclaredMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Group
argument_list|>
name|declared
init|=
name|user
operator|.
name|declaredMemberOf
argument_list|()
decl_stmt|;
while|while
condition|(
name|declared
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertFalse
argument_list|(
name|gr
operator|.
name|getID
argument_list|()
operator|.
name|equals
argument_list|(
name|declared
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @see<a href="https://issues.apache.org/jira/browse/OAK-4845">OAK-4845</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testMembershipForExistingLocalGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setMembershipNestingDepth
argument_list|(
literal|1
argument_list|)
operator|.
name|setMembershipExpirationTime
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|setExpirationTime
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|syncConfig
operator|.
name|group
argument_list|()
operator|.
name|setExpirationTime
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|USER_ID
argument_list|)
decl_stmt|;
name|ExternalIdentityRef
name|groupRef
init|=
name|externalUser
operator|.
name|getDeclaredGroups
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// create the group locally (has no rep:externalId)
name|Group
name|gr
init|=
name|userManager
operator|.
name|createGroup
argument_list|(
name|groupRef
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|sync
argument_list|(
name|externalUser
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|// verify membership gets added
name|assertTrue
argument_list|(
name|gr
operator|.
name|isDeclaredMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Group
argument_list|>
name|declared
init|=
name|user
operator|.
name|declaredMemberOf
argument_list|()
decl_stmt|;
while|while
condition|(
name|declared
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|gr
operator|.
name|getID
argument_list|()
operator|.
name|equals
argument_list|(
name|declared
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAuthorizableUser
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentity
name|extUser
init|=
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|syncCtx
operator|.
name|getAuthorizable
argument_list|(
name|extUser
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|sync
argument_list|(
name|extUser
argument_list|)
expr_stmt|;
name|user
operator|=
name|syncCtx
operator|.
name|getAuthorizable
argument_list|(
name|extUser
argument_list|,
name|User
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SyncException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetAuthorizableUserWrongType
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentity
name|extUser
init|=
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|sync
argument_list|(
name|extUser
argument_list|)
expr_stmt|;
name|syncCtx
operator|.
name|getAuthorizable
argument_list|(
name|extUser
argument_list|,
name|Group
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAuthorizableGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentity
name|extGroup
init|=
name|idp
operator|.
name|listGroups
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Group
name|gr
init|=
name|syncCtx
operator|.
name|getAuthorizable
argument_list|(
name|extGroup
argument_list|,
name|Group
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|gr
argument_list|)
expr_stmt|;
name|sync
argument_list|(
name|extGroup
argument_list|)
expr_stmt|;
name|gr
operator|=
name|syncCtx
operator|.
name|getAuthorizable
argument_list|(
name|extGroup
argument_list|,
name|Group
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|gr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SyncException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetAuthorizableGroupWrongType
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentity
name|extGroup
init|=
name|idp
operator|.
name|listGroups
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|sync
argument_list|(
name|extGroup
argument_list|)
expr_stmt|;
name|syncCtx
operator|.
name|getAuthorizable
argument_list|(
name|extGroup
argument_list|,
name|User
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncMembershipDepthNoSync
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Authorizable
name|a
init|=
name|syncCtx
operator|.
name|createUser
argument_list|(
name|externalUser
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|externalUser
operator|.
name|getDeclaredGroups
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|syncCtx
operator|.
name|syncMembership
argument_list|(
name|externalUser
argument_list|,
name|a
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|hasPendingChanges
argument_list|()
argument_list|)
expr_stmt|;
name|syncCtx
operator|.
name|syncMembership
argument_list|(
name|externalUser
argument_list|,
name|a
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|hasPendingChanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncMembershipDepth1
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Authorizable
name|a
init|=
name|syncCtx
operator|.
name|createUser
argument_list|(
name|externalUser
argument_list|)
decl_stmt|;
name|syncCtx
operator|.
name|syncMembership
argument_list|(
name|externalUser
argument_list|,
name|a
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|hasPendingChanges
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ExternalIdentityRef
name|ref
range|:
name|externalUser
operator|.
name|getDeclaredGroups
argument_list|()
control|)
block|{
name|Group
name|g
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|ref
operator|.
name|getId
argument_list|()
argument_list|,
name|Group
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|g
operator|.
name|isDeclaredMember
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncMembershipDepthInfinite
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Authorizable
name|a
init|=
name|syncCtx
operator|.
name|createUser
argument_list|(
name|externalUser
argument_list|)
decl_stmt|;
name|syncCtx
operator|.
name|syncMembership
argument_list|(
name|externalUser
argument_list|,
name|a
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|hasPendingChanges
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
for|for
control|(
name|ExternalIdentityRef
name|ref
range|:
name|externalUser
operator|.
name|getDeclaredGroups
argument_list|()
control|)
block|{
name|ExternalIdentity
name|extGr
init|=
name|idp
operator|.
name|getIdentity
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|extGr
argument_list|)
expr_stmt|;
for|for
control|(
name|ExternalIdentityRef
name|inheritedGrRef
range|:
name|extGr
operator|.
name|getDeclaredGroups
argument_list|()
control|)
block|{
name|Group
name|g
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|inheritedGrRef
operator|.
name|getId
argument_list|()
argument_list|,
name|Group
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|g
argument_list|)
expr_stmt|;
if|if
condition|(
name|Iterables
operator|.
name|contains
argument_list|(
name|externalUser
operator|.
name|getDeclaredGroups
argument_list|()
argument_list|,
name|inheritedGrRef
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|g
operator|.
name|isDeclaredMember
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|g
operator|.
name|isDeclaredMember
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|g
operator|.
name|isMember
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncMembershipGroupIsExternalUser
parameter_list|()
throws|throws
name|Exception
block|{
comment|// sync the 'wrong' external group into the repository
name|ExternalIdentity
name|externalIdentity
init|=
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|sync
argument_list|(
name|externalIdentity
argument_list|)
expr_stmt|;
comment|// create external user with an synced-ext-user as declared group
name|ExternalUser
name|withWrongDeclaredGroup
init|=
operator|new
name|ExternalUserWithDeclaredGroup
argument_list|(
name|externalIdentity
operator|.
name|getExternalId
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|Authorizable
name|a
init|=
name|syncCtx
operator|.
name|createUser
argument_list|(
name|withWrongDeclaredGroup
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|syncCtx
operator|.
name|syncMembership
argument_list|(
name|withWrongDeclaredGroup
argument_list|,
name|a
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|hasPendingChanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|withWrongDeclaredGroup
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncMembershipGroupIsSyncedAsUser
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalUser
name|fromIDP
init|=
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExternalIdentityRef
name|groupRef
init|=
name|fromIDP
operator|.
name|getDeclaredGroups
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// sync the the ext-user from the idp (but make it just declare a single group)
name|ExternalUser
name|extuser
init|=
operator|new
name|ExternalUserWithDeclaredGroup
argument_list|(
name|groupRef
argument_list|,
name|fromIDP
argument_list|)
decl_stmt|;
name|Authorizable
name|a
init|=
name|syncCtx
operator|.
name|createUser
argument_list|(
name|extuser
argument_list|)
decl_stmt|;
comment|// create an external-user based on info that the IDP knows as group and sync it
name|ExternalUser
name|externalIdentity
init|=
operator|new
name|ExternalUserFromGroup
argument_list|(
name|idp
operator|.
name|getIdentity
argument_list|(
name|groupRef
argument_list|)
argument_list|)
decl_stmt|;
name|Authorizable
name|a2
init|=
name|syncCtx
operator|.
name|createUser
argument_list|(
name|externalIdentity
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|a2
operator|.
name|isGroup
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// now sync-ing the membership should not have any effect as the external
comment|// group referenced from 'extuser' has already been created in the system
comment|// as user.
name|syncCtx
operator|.
name|syncMembership
argument_list|(
name|extuser
argument_list|,
name|a
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|hasPendingChanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testApplyMembershipNonExistingGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|u
init|=
name|getTestUser
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
literal|"anyGroup"
argument_list|,
name|Group
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|syncCtx
operator|.
name|applyMembership
argument_list|(
name|u
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"anyGroup"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|hasPendingChanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testApplyMembershipNonGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|sync
argument_list|(
name|externalUser
argument_list|)
expr_stmt|;
name|User
name|u
init|=
name|getTestUser
argument_list|()
decl_stmt|;
name|syncCtx
operator|.
name|applyMembership
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|u
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|hasPendingChanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testApplyMembership
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|u
init|=
name|getTestUser
argument_list|()
decl_stmt|;
name|Group
name|gr
init|=
name|createTestGroup
argument_list|()
decl_stmt|;
name|syncCtx
operator|.
name|applyMembership
argument_list|(
name|u
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|gr
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|gr
operator|.
name|isDeclaredMember
argument_list|(
name|u
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|hasPendingChanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncPropertiesEmptyMap
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_SECOND_USER
argument_list|)
decl_stmt|;
name|Authorizable
name|a
init|=
name|syncCtx
operator|.
name|createUser
argument_list|(
name|externalUser
argument_list|)
decl_stmt|;
name|syncCtx
operator|.
name|syncProperties
argument_list|(
name|externalUser
argument_list|,
name|a
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|propName
range|:
name|externalUser
operator|.
name|getProperties
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertFalse
argument_list|(
name|a
operator|.
name|hasProperty
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncPropertiesEmptyMapExistingProps
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_SECOND_USER
argument_list|)
decl_stmt|;
name|Authorizable
name|a
init|=
name|syncCtx
operator|.
name|createUser
argument_list|(
name|externalUser
argument_list|)
decl_stmt|;
name|Value
name|anyValue
init|=
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"any"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|extProps
init|=
name|externalUser
operator|.
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|propName
range|:
name|extProps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|a
operator|.
name|setProperty
argument_list|(
name|propName
argument_list|,
name|anyValue
argument_list|)
expr_stmt|;
block|}
name|syncCtx
operator|.
name|syncProperties
argument_list|(
name|externalUser
argument_list|,
name|a
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|propName
range|:
name|extProps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|a
operator|.
name|hasProperty
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|anyValue
argument_list|,
name|a
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncPropertiesMappingRemovesExisting
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_SECOND_USER
argument_list|)
decl_stmt|;
name|sync
argument_list|(
name|externalUser
argument_list|)
expr_stmt|;
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|// create mapping that doesn't match to names in the external-properties
comment|// -> previously synced properties must be removed
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapping
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|extProps
init|=
name|externalUser
operator|.
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|propName
range|:
name|extProps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|mapping
operator|.
name|put
argument_list|(
name|propName
argument_list|,
literal|"any"
argument_list|)
expr_stmt|;
block|}
name|syncCtx
operator|.
name|syncProperties
argument_list|(
name|externalUser
argument_list|,
name|a
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|propName
range|:
name|extProps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertFalse
argument_list|(
name|a
operator|.
name|hasProperty
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncPropertiesMappingConstants
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_SECOND_USER
argument_list|)
decl_stmt|;
name|sync
argument_list|(
name|externalUser
argument_list|)
expr_stmt|;
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|// create mapping that doesn't match to names in the external-properties
comment|// -> previously synced properties must be removed
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapping
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|extProps
init|=
name|externalUser
operator|.
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|propName
range|:
name|extProps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|mapping
operator|.
name|put
argument_list|(
name|propName
argument_list|,
literal|"\"any\""
argument_list|)
expr_stmt|;
block|}
name|syncCtx
operator|.
name|syncProperties
argument_list|(
name|externalUser
argument_list|,
name|a
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|Value
name|anyValue
init|=
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"any"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|propName
range|:
name|extProps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|a
operator|.
name|hasProperty
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|anyValue
argument_list|,
name|a
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncPropertiesMappingDQuoteName
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_SECOND_USER
argument_list|)
decl_stmt|;
name|sync
argument_list|(
name|externalUser
argument_list|)
expr_stmt|;
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|// mapping to '"' (i.e. name size = 1) which doesn't qualify as constant
comment|// -> same behavior expected as with 'testSyncPropertiesMappingRemovesExisting'
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapping
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|extProps
init|=
name|externalUser
operator|.
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|propName
range|:
name|extProps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|mapping
operator|.
name|put
argument_list|(
name|propName
argument_list|,
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|syncCtx
operator|.
name|syncProperties
argument_list|(
name|externalUser
argument_list|,
name|a
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|propName
range|:
name|extProps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertFalse
argument_list|(
name|a
operator|.
name|hasProperty
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncPropertiesMappingNameStartsWithDQuote
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_SECOND_USER
argument_list|)
decl_stmt|;
name|sync
argument_list|(
name|externalUser
argument_list|)
expr_stmt|;
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|// mapping to '"any', which doesn't qualify as constant
comment|// -> same behavior expected as with 'testSyncPropertiesMappingRemovesExisting'
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapping
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|extProps
init|=
name|externalUser
operator|.
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|propName
range|:
name|extProps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|mapping
operator|.
name|put
argument_list|(
name|propName
argument_list|,
literal|"\"any"
argument_list|)
expr_stmt|;
block|}
name|syncCtx
operator|.
name|syncProperties
argument_list|(
name|externalUser
argument_list|,
name|a
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|propName
range|:
name|extProps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertFalse
argument_list|(
name|a
operator|.
name|hasProperty
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_SECOND_USER
argument_list|)
decl_stmt|;
name|Authorizable
name|a
init|=
name|syncCtx
operator|.
name|createUser
argument_list|(
name|externalUser
argument_list|)
decl_stmt|;
comment|// create exact mapping
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapping
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|extProps
init|=
name|externalUser
operator|.
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|propName
range|:
name|extProps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|mapping
operator|.
name|put
argument_list|(
name|propName
argument_list|,
name|propName
argument_list|)
expr_stmt|;
block|}
name|syncCtx
operator|.
name|syncProperties
argument_list|(
name|externalUser
argument_list|,
name|a
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|propName
range|:
name|extProps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|a
operator|.
name|hasProperty
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|extProps
operator|.
name|get
argument_list|(
name|propName
argument_list|)
decl_stmt|;
name|Value
index|[]
name|vs
init|=
name|a
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|vs
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|syncCtx
operator|.
name|createValue
argument_list|(
name|obj
argument_list|)
argument_list|,
name|a
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Value
index|[]
name|expected
init|=
operator|(
name|obj
operator|instanceof
name|Collection
operator|)
condition|?
name|syncCtx
operator|.
name|createValues
argument_list|(
operator|(
name|Collection
operator|)
name|obj
argument_list|)
else|:
name|syncCtx
operator|.
name|createValues
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|obj
argument_list|)
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|a
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncPropertiesRemapped
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_SECOND_USER
argument_list|)
decl_stmt|;
name|Authorizable
name|a
init|=
name|syncCtx
operator|.
name|createUser
argument_list|(
name|externalUser
argument_list|)
decl_stmt|;
comment|// create exact mapping
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapping
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|extProps
init|=
name|externalUser
operator|.
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|propName
range|:
name|extProps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|mapping
operator|.
name|put
argument_list|(
literal|"a/"
operator|+
name|propName
argument_list|,
name|propName
argument_list|)
expr_stmt|;
block|}
name|syncCtx
operator|.
name|syncProperties
argument_list|(
name|externalUser
argument_list|,
name|a
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|propName
range|:
name|extProps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|relPath
init|=
literal|"a/"
operator|+
name|propName
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|hasProperty
argument_list|(
name|relPath
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|extProps
operator|.
name|get
argument_list|(
name|propName
argument_list|)
decl_stmt|;
name|Value
index|[]
name|vs
init|=
name|a
operator|.
name|getProperty
argument_list|(
name|relPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|vs
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|syncCtx
operator|.
name|createValue
argument_list|(
name|obj
argument_list|)
argument_list|,
name|a
operator|.
name|getProperty
argument_list|(
name|relPath
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Value
index|[]
name|expected
init|=
operator|(
name|obj
operator|instanceof
name|Collection
operator|)
condition|?
name|syncCtx
operator|.
name|createValues
argument_list|(
operator|(
name|Collection
operator|)
name|obj
argument_list|)
else|:
name|syncCtx
operator|.
name|createValues
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|obj
argument_list|)
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|a
operator|.
name|getProperty
argument_list|(
name|relPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsExpiredLocalGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|gr
init|=
name|createTestGroup
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|syncCtx
operator|.
name|isExpired
argument_list|(
name|gr
argument_list|,
name|syncConfig
operator|.
name|group
argument_list|()
operator|.
name|getExpirationTime
argument_list|()
argument_list|,
literal|"any"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsExpiredEmptyLastSyncedProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|gr
init|=
name|createTestGroup
argument_list|()
decl_stmt|;
name|gr
operator|.
name|setProperty
argument_list|(
name|DefaultSyncContext
operator|.
name|REP_LAST_SYNCED
argument_list|,
operator|new
name|Value
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|syncCtx
operator|.
name|isExpired
argument_list|(
name|gr
argument_list|,
name|syncConfig
operator|.
name|group
argument_list|()
operator|.
name|getExpirationTime
argument_list|()
argument_list|,
literal|"any"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsExpiredSyncedUser
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentity
name|externalUser
init|=
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|sync
argument_list|(
name|externalUser
argument_list|)
expr_stmt|;
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|syncCtx
operator|.
name|isExpired
argument_list|(
name|a
argument_list|,
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|getExpirationTime
argument_list|()
argument_list|,
literal|"any"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|syncCtx
operator|.
name|isExpired
argument_list|(
name|a
argument_list|,
operator|-
literal|1
argument_list|,
literal|"any"
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a ctx with a newer 'now'
name|DefaultSyncContext
name|ctx
init|=
operator|new
name|DefaultSyncContext
argument_list|(
name|syncConfig
argument_list|,
name|idp
argument_list|,
name|userManager
argument_list|,
name|valueFactory
argument_list|)
decl_stmt|;
name|long
name|expTime
init|=
name|ctx
operator|.
name|now
operator|-
name|syncCtx
operator|.
name|now
operator|-
literal|1
decl_stmt|;
name|assertTrue
argument_list|(
name|ctx
operator|.
name|isExpired
argument_list|(
name|a
argument_list|,
name|expTime
argument_list|,
literal|"any"
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove last-sync property
name|a
operator|.
name|removeProperty
argument_list|(
name|DefaultSyncContext
operator|.
name|REP_LAST_SYNCED
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|syncCtx
operator|.
name|isExpired
argument_list|(
name|a
argument_list|,
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|getExpirationTime
argument_list|()
argument_list|,
literal|"any"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsExpiredSyncedGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentity
name|externalGroup
init|=
name|idp
operator|.
name|listGroups
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|sync
argument_list|(
name|externalGroup
argument_list|)
expr_stmt|;
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalGroup
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|syncCtx
operator|.
name|isExpired
argument_list|(
name|a
argument_list|,
name|syncConfig
operator|.
name|group
argument_list|()
operator|.
name|getExpirationTime
argument_list|()
argument_list|,
literal|"any"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|syncCtx
operator|.
name|isExpired
argument_list|(
name|a
argument_list|,
operator|-
literal|1
argument_list|,
literal|"any"
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a ctx with a newer 'now'
name|DefaultSyncContext
name|ctx
init|=
operator|new
name|DefaultSyncContext
argument_list|(
name|syncConfig
argument_list|,
name|idp
argument_list|,
name|userManager
argument_list|,
name|valueFactory
argument_list|)
decl_stmt|;
name|long
name|expTime
init|=
name|ctx
operator|.
name|now
operator|-
name|syncCtx
operator|.
name|now
operator|-
literal|1
decl_stmt|;
name|assertTrue
argument_list|(
name|ctx
operator|.
name|isExpired
argument_list|(
name|a
argument_list|,
name|expTime
argument_list|,
literal|"any"
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove last-sync property
name|a
operator|.
name|removeProperty
argument_list|(
name|DefaultSyncContext
operator|.
name|REP_LAST_SYNCED
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|syncCtx
operator|.
name|isExpired
argument_list|(
name|a
argument_list|,
name|syncConfig
operator|.
name|group
argument_list|()
operator|.
name|getExpirationTime
argument_list|()
argument_list|,
literal|"any"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateValueNull
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|syncCtx
operator|.
name|createValue
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateValueString
parameter_list|()
throws|throws
name|Exception
block|{
name|Value
name|v
init|=
name|syncCtx
operator|.
name|createValue
argument_list|(
literal|"s"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|v
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s"
argument_list|,
name|v
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|=
name|syncCtx
operator|.
name|createValue
argument_list|(
operator|new
name|char
index|[]
block|{
literal|'s'
block|}
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|v
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s"
argument_list|,
name|v
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
operator|new
name|TestIdentityProvider
operator|.
name|ForeignExternalUser
argument_list|()
decl_stmt|;
name|v
operator|=
name|syncCtx
operator|.
name|createValue
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|v
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|,
name|v
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateValueBoolean
parameter_list|()
throws|throws
name|Exception
block|{
name|Value
name|v
init|=
name|syncCtx
operator|.
name|createValue
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|BOOLEAN
argument_list|,
name|v
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|v
operator|.
name|getBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateValueLong
parameter_list|()
throws|throws
name|Exception
block|{
name|Value
name|v
init|=
name|syncCtx
operator|.
name|createValue
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|LONG
argument_list|,
name|v
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|v
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|=
name|syncCtx
operator|.
name|createValue
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|23
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|LONG
argument_list|,
name|v
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|23
argument_list|,
name|v
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|=
name|syncCtx
operator|.
name|createValue
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|LONG
argument_list|,
name|v
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|,
name|v
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|=
name|syncCtx
operator|.
name|createValue
argument_list|(
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|LONG
argument_list|,
name|v
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Byte
operator|.
name|MAX_VALUE
argument_list|,
name|v
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateValueDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|Value
name|v
init|=
name|syncCtx
operator|.
name|createValue
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|1.1
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|DOUBLE
argument_list|,
name|v
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.1
argument_list|,
name|v
operator|.
name|getDouble
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|v
operator|=
name|syncCtx
operator|.
name|createValue
argument_list|(
name|Float
operator|.
name|NaN
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|DOUBLE
argument_list|,
name|v
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|NaN
argument_list|,
name|v
operator|.
name|getDouble
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateValueDate
parameter_list|()
throws|throws
name|Exception
block|{
name|Date
name|d
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|Value
name|v
init|=
name|syncCtx
operator|.
name|createValue
argument_list|(
name|cal
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|DATE
argument_list|,
name|v
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Value
name|v2
init|=
name|syncCtx
operator|.
name|createValue
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|v2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|DATE
argument_list|,
name|v2
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|v
argument_list|,
name|v2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateValueDecimal
parameter_list|()
throws|throws
name|Exception
block|{
name|BigDecimal
name|dec
init|=
operator|new
name|BigDecimal
argument_list|(
literal|123
argument_list|)
decl_stmt|;
name|Value
name|v
init|=
name|syncCtx
operator|.
name|createValue
argument_list|(
name|dec
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|DECIMAL
argument_list|,
name|v
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dec
argument_list|,
name|v
operator|.
name|getDecimal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateValueFromBytesArray
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'b'
block|}
decl_stmt|;
name|ByteArrayInputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|Binary
name|binary
init|=
name|valueFactory
operator|.
name|createBinary
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Value
name|v
init|=
name|syncCtx
operator|.
name|createValue
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|BINARY
argument_list|,
name|v
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|binary
argument_list|,
name|v
operator|.
name|getBinary
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see<a href="https://issues.apache.org/jira/browse/OAK-4231">OAK-4231</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testCreateValueFromBinary
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'b'
block|}
decl_stmt|;
name|ByteArrayInputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|Binary
name|binary
init|=
name|valueFactory
operator|.
name|createBinary
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Value
name|v
init|=
name|syncCtx
operator|.
name|createValue
argument_list|(
name|binary
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|BINARY
argument_list|,
name|v
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|binary
argument_list|,
name|v
operator|.
name|getBinary
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see<a href="https://issues.apache.org/jira/browse/OAK-4231">OAK-4231</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testCreateValueFromInputStream
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'b'
block|}
decl_stmt|;
name|ByteArrayInputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|Binary
name|binary
init|=
name|valueFactory
operator|.
name|createBinary
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Value
name|v
init|=
name|syncCtx
operator|.
name|createValue
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|BINARY
argument_list|,
name|v
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|binary
argument_list|,
name|v
operator|.
name|getBinary
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateValuesEmptyCollection
parameter_list|()
throws|throws
name|Exception
block|{
name|Value
index|[]
name|vs
init|=
name|syncCtx
operator|.
name|createValues
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|vs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|vs
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateValuesSkipsNull
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"s"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"t"
argument_list|)
decl_stmt|;
name|Value
index|[]
name|vs
init|=
name|syncCtx
operator|.
name|createValues
argument_list|(
name|strings
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|vs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|vs
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsSameIDPNull
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|syncCtx
operator|.
name|isSameIDP
argument_list|(
operator|(
name|Authorizable
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsSameIDPLocalGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|syncCtx
operator|.
name|isSameIDP
argument_list|(
name|createTestGroup
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsSameIDPLocalUser
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|syncCtx
operator|.
name|isSameIDP
argument_list|(
name|getTestUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsSameIDPSyncedGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentity
name|externalGroup
init|=
name|idp
operator|.
name|listGroups
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|sync
argument_list|(
name|externalGroup
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|syncCtx
operator|.
name|isSameIDP
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalGroup
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsSameIDPSyncedUser
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentity
name|externalUser
init|=
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|sync
argument_list|(
name|externalUser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|syncCtx
operator|.
name|isSameIDP
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsSameIDPMissingExternalId
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentity
name|externalUser
init|=
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|sync
argument_list|(
name|externalUser
argument_list|)
expr_stmt|;
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|a
operator|.
name|removeProperty
argument_list|(
name|DefaultSyncContext
operator|.
name|REP_EXTERNAL_ID
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|syncCtx
operator|.
name|isSameIDP
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsSameIDPForeign
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|gr
init|=
name|createTestGroup
argument_list|()
decl_stmt|;
name|setExternalID
argument_list|(
name|gr
argument_list|,
literal|"some_other_idp"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|syncCtx
operator|.
name|isSameIDP
argument_list|(
name|gr
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsSameIDPExternalIdentityRef
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|syncCtx
operator|.
name|isSameIDP
argument_list|(
operator|new
name|TestIdentityProvider
operator|.
name|ForeignExternalUser
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|syncCtx
operator|.
name|isSameIDP
argument_list|(
operator|new
name|TestIdentityProvider
operator|.
name|ForeignExternalGroup
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|syncCtx
operator|.
name|isSameIDP
argument_list|(
operator|new
name|TestIdentityProvider
operator|.
name|TestIdentity
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|syncCtx
operator|.
name|isSameIDP
argument_list|(
name|idp
operator|.
name|listGroups
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|syncCtx
operator|.
name|isSameIDP
argument_list|(
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
class|class
name|ExternalUserWithDeclaredGroup
extends|extends
name|TestIdentityProvider
operator|.
name|TestIdentity
implements|implements
name|ExternalUser
block|{
specifier|private
specifier|final
name|ExternalIdentityRef
name|declaredGroupRef
decl_stmt|;
specifier|private
name|ExternalUserWithDeclaredGroup
parameter_list|(
annotation|@
name|Nonnull
name|ExternalIdentityRef
name|declaredGroupRef
parameter_list|)
block|{
name|super
argument_list|(
literal|"externalId"
argument_list|)
expr_stmt|;
name|this
operator|.
name|declaredGroupRef
operator|=
name|declaredGroupRef
expr_stmt|;
block|}
specifier|private
name|ExternalUserWithDeclaredGroup
parameter_list|(
annotation|@
name|Nonnull
name|ExternalIdentityRef
name|declaredGroupRef
parameter_list|,
annotation|@
name|Nonnull
name|ExternalIdentity
name|base
parameter_list|)
block|{
name|super
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|this
operator|.
name|declaredGroupRef
operator|=
name|declaredGroupRef
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|ExternalIdentityRef
argument_list|>
name|getDeclaredGroups
parameter_list|()
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|(
name|declaredGroupRef
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|final
class|class
name|ExternalUserFromGroup
extends|extends
name|TestIdentityProvider
operator|.
name|TestIdentity
implements|implements
name|ExternalUser
block|{
specifier|private
name|ExternalUserFromGroup
parameter_list|(
annotation|@
name|Nonnull
name|ExternalIdentity
name|base
parameter_list|)
block|{
name|super
argument_list|(
name|base
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

