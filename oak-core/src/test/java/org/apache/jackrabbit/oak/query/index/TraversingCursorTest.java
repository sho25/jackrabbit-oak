begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|core
operator|.
name|MicroKernelImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests the TraversingCursor.  */
end_comment

begin_class
specifier|public
class|class
name|TraversingCursorTest
block|{
specifier|private
specifier|final
name|MicroKernel
name|mk
init|=
operator|new
name|MicroKernelImpl
argument_list|()
decl_stmt|;
name|String
name|head
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|head
operator|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|traverse
parameter_list|()
throws|throws
name|Exception
block|{
name|TraversingIndex
name|t
init|=
operator|new
name|TraversingIndex
argument_list|(
name|mk
argument_list|)
decl_stmt|;
name|traverse
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|traverseBlockwise
parameter_list|()
throws|throws
name|Exception
block|{
name|TraversingIndex
name|t
init|=
operator|new
name|TraversingIndex
argument_list|(
name|mk
argument_list|)
decl_stmt|;
name|t
operator|.
name|setChildBlockSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|traverse
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|traverse
parameter_list|(
name|TraversingIndex
name|t
parameter_list|)
block|{
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \"parents\": { \"p0\": {\"id\": \"0\"}, \"p1\": {\"id\": \"1\"}, \"p2\": {\"id\": \"2\"}}"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \"children\": { \"c1\": {\"p\": \"1\"}, \"c2\": {\"p\": \"1\"}, \"c3\": {\"p\": \"2\"}, \"c4\": {\"p\": \"3\"}}"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Filter
name|f
init|=
operator|new
name|Filter
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|f
operator|.
name|setPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Cursor
name|c
init|=
name|t
operator|.
name|query
argument_list|(
name|f
argument_list|,
name|head
argument_list|)
decl_stmt|;
while|while
condition|(
name|c
operator|.
name|next
argument_list|()
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|c
operator|.
name|currentPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|paths
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/"
argument_list|,
literal|"/children"
argument_list|,
literal|"/children/c1"
argument_list|,
literal|"/children/c2"
argument_list|,
literal|"/children/c3"
argument_list|,
literal|"/children/c4"
argument_list|,
literal|"/parents"
argument_list|,
literal|"/parents/p0"
argument_list|,
literal|"/parents/p1"
argument_list|,
literal|"/parents/p2"
argument_list|)
argument_list|,
name|paths
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|setPath
argument_list|(
literal|"/nowhere"
argument_list|)
expr_stmt|;
name|c
operator|=
name|t
operator|.
name|query
argument_list|(
name|f
argument_list|,
name|head
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

