begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|Bootstrap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|nio
operator|.
name|NioEventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|SocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioServerSocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioSocketChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
specifier|public
class|class
name|NetworkErrorProxy
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NetworkErrorProxy
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|inboundPort
decl_stmt|;
specifier|private
specifier|final
name|int
name|outboundPort
decl_stmt|;
specifier|private
specifier|final
name|String
name|host
decl_stmt|;
specifier|private
name|ChannelFuture
name|f
decl_stmt|;
specifier|private
name|ForwardHandler
name|fh
decl_stmt|;
name|EventLoopGroup
name|bossGroup
init|=
operator|new
name|NioEventLoopGroup
argument_list|()
decl_stmt|;
name|EventLoopGroup
name|workerGroup
init|=
operator|new
name|NioEventLoopGroup
argument_list|()
decl_stmt|;
specifier|public
name|NetworkErrorProxy
parameter_list|(
name|int
name|inboundPort
parameter_list|,
name|String
name|outboundHost
parameter_list|,
name|int
name|outboundPort
parameter_list|)
block|{
name|this
operator|.
name|inboundPort
operator|=
name|inboundPort
expr_stmt|;
name|this
operator|.
name|outboundPort
operator|=
name|outboundPort
expr_stmt|;
name|this
operator|.
name|host
operator|=
name|outboundHost
expr_stmt|;
name|this
operator|.
name|fh
operator|=
operator|new
name|ForwardHandler
argument_list|(
name|NetworkErrorProxy
operator|.
name|this
operator|.
name|host
argument_list|,
name|NetworkErrorProxy
operator|.
name|this
operator|.
name|outboundPort
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|skipBytes
parameter_list|(
name|int
name|pos
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|this
operator|.
name|fh
operator|.
name|skipPosition
operator|=
name|pos
expr_stmt|;
name|this
operator|.
name|fh
operator|.
name|skipBytes
operator|=
name|n
expr_stmt|;
block|}
specifier|public
name|void
name|flipByte
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|this
operator|.
name|fh
operator|.
name|flipPosition
operator|=
name|pos
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|ServerBootstrap
name|b
init|=
operator|new
name|ServerBootstrap
argument_list|()
decl_stmt|;
name|b
operator|.
name|group
argument_list|(
name|bossGroup
argument_list|,
name|workerGroup
argument_list|)
operator|.
name|channel
argument_list|(
name|NioServerSocketChannel
operator|.
name|class
argument_list|)
operator|.
name|childHandler
argument_list|(
operator|new
name|ChannelInitializer
argument_list|<
name|SocketChannel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|initChannel
parameter_list|(
name|SocketChannel
name|ch
parameter_list|)
throws|throws
name|Exception
block|{
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
name|NetworkErrorProxy
operator|.
name|this
operator|.
name|fh
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|=
name|b
operator|.
name|bind
argument_list|(
name|this
operator|.
name|inboundPort
argument_list|)
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to start proxy on port "
operator|+
name|inboundPort
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"proxy not started"
argument_list|)
throw|;
block|}
name|f
operator|.
name|channel
argument_list|()
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|this
operator|.
name|fh
operator|=
operator|new
name|ForwardHandler
argument_list|(
name|NetworkErrorProxy
operator|.
name|this
operator|.
name|host
argument_list|,
name|NetworkErrorProxy
operator|.
name|this
operator|.
name|outboundPort
argument_list|)
expr_stmt|;
name|run
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
name|f
operator|.
name|channel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bossGroup
operator|!=
literal|null
operator|&&
operator|!
name|bossGroup
operator|.
name|isShuttingDown
argument_list|()
condition|)
block|{
name|bossGroup
operator|.
name|shutdownGracefully
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|syncUninterruptibly
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|workerGroup
operator|!=
literal|null
operator|&&
operator|!
name|workerGroup
operator|.
name|isShuttingDown
argument_list|()
condition|)
block|{
name|workerGroup
operator|.
name|shutdownGracefully
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|syncUninterruptibly
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
class|class
name|ForwardHandler
extends|extends
name|ChannelInboundHandlerAdapter
block|{
specifier|private
specifier|final
name|String
name|targetHost
decl_stmt|;
specifier|private
specifier|final
name|int
name|targetPort
decl_stmt|;
specifier|public
name|long
name|transferredBytes
decl_stmt|;
specifier|public
name|int
name|skipPosition
decl_stmt|;
specifier|public
name|int
name|skipBytes
decl_stmt|;
specifier|public
name|int
name|flipPosition
decl_stmt|;
specifier|private
name|ChannelFuture
name|remote
decl_stmt|;
specifier|public
name|ForwardHandler
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|targetHost
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|targetPort
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|flipPosition
operator|=
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelRegistered
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ChannelHandlerContext
name|c
init|=
name|ctx
decl_stmt|;
name|EventLoopGroup
name|group
init|=
operator|new
name|NioEventLoopGroup
argument_list|()
decl_stmt|;
name|Bootstrap
name|cb
init|=
operator|new
name|Bootstrap
argument_list|()
decl_stmt|;
name|cb
operator|.
name|group
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|cb
operator|.
name|channel
argument_list|(
name|NioSocketChannel
operator|.
name|class
argument_list|)
expr_stmt|;
name|cb
operator|.
name|handler
argument_list|(
operator|new
name|ChannelInitializer
argument_list|<
name|SocketChannel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|initChannel
parameter_list|(
name|SocketChannel
name|ch
parameter_list|)
throws|throws
name|Exception
block|{
name|SendBackHandler
name|sbh
init|=
operator|new
name|SendBackHandler
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|ForwardHandler
operator|.
name|this
operator|.
name|flipPosition
operator|>=
literal|0
condition|)
block|{
name|sbh
operator|=
operator|new
name|BitFlipHandler
argument_list|(
name|c
argument_list|,
name|ForwardHandler
operator|.
name|this
operator|.
name|flipPosition
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ForwardHandler
operator|.
name|this
operator|.
name|skipBytes
operator|>
literal|0
condition|)
block|{
name|sbh
operator|=
operator|new
name|SwallowingHandler
argument_list|(
name|c
argument_list|,
name|ForwardHandler
operator|.
name|this
operator|.
name|skipPosition
argument_list|,
name|ForwardHandler
operator|.
name|this
operator|.
name|skipBytes
argument_list|)
expr_stmt|;
block|}
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addFirst
argument_list|(
name|sbh
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|remote
operator|=
name|cb
operator|.
name|connect
argument_list|(
name|this
operator|.
name|targetHost
argument_list|,
name|this
operator|.
name|targetPort
argument_list|)
operator|.
name|sync
argument_list|()
expr_stmt|;
name|ctx
operator|.
name|fireChannelRegistered
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelUnregistered
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|remote
operator|.
name|channel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|remote
operator|=
literal|null
expr_stmt|;
name|ctx
operator|.
name|fireChannelUnregistered
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelRead
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Object
name|msg
parameter_list|)
block|{
if|if
condition|(
name|msg
operator|instanceof
name|ByteBuf
condition|)
block|{
name|ByteBuf
name|bb
init|=
operator|(
name|ByteBuf
operator|)
name|msg
decl_stmt|;
name|this
operator|.
name|transferredBytes
operator|+=
operator|(
name|bb
operator|.
name|writerIndex
argument_list|()
operator|-
name|bb
operator|.
name|readerIndex
argument_list|()
operator|)
expr_stmt|;
block|}
name|remote
operator|.
name|channel
argument_list|()
operator|.
name|write
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelReadComplete
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|remote
operator|.
name|channel
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|cause
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_class
class|class
name|SendBackHandler
implements|implements
name|ChannelInboundHandler
block|{
specifier|private
specifier|final
name|ChannelHandlerContext
name|target
decl_stmt|;
specifier|public
name|long
name|transferredBytes
decl_stmt|;
specifier|public
name|SendBackHandler
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
block|{
name|this
operator|.
name|target
operator|=
name|ctx
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelRegistered
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|channelUnregistered
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|channelActive
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|channelInactive
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{     }
specifier|public
name|int
name|messageSize
parameter_list|(
name|Object
name|msg
parameter_list|)
block|{
if|if
condition|(
name|msg
operator|instanceof
name|ByteBuf
condition|)
block|{
name|ByteBuf
name|bb
init|=
operator|(
name|ByteBuf
operator|)
name|msg
decl_stmt|;
return|return
operator|(
name|bb
operator|.
name|writerIndex
argument_list|()
operator|-
name|bb
operator|.
name|readerIndex
argument_list|()
operator|)
return|;
block|}
comment|// unknown
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|channelRead
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Object
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|transferredBytes
operator|+=
name|messageSize
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|this
operator|.
name|target
operator|.
name|write
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|channelReadComplete
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|target
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|userEventTriggered
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Object
name|evt
parameter_list|)
throws|throws
name|Exception
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|channelWritabilityChanged
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|handlerAdded
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|handlerRemoved
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Throwable
name|cause
parameter_list|)
throws|throws
name|Exception
block|{
name|cause
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|this
operator|.
name|target
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_class
class|class
name|SwallowingHandler
extends|extends
name|SendBackHandler
block|{
specifier|private
name|int
name|skipStartingPos
decl_stmt|;
specifier|private
name|int
name|nrOfBytes
decl_stmt|;
specifier|public
name|SwallowingHandler
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|int
name|skipStartingPos
parameter_list|,
name|int
name|numberOfBytes
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|skipStartingPos
operator|=
name|skipStartingPos
expr_stmt|;
name|this
operator|.
name|nrOfBytes
operator|=
name|numberOfBytes
expr_stmt|;
block|}
specifier|public
name|void
name|channelRead
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Object
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|msg
operator|instanceof
name|ByteBuf
condition|)
block|{
name|ByteBuf
name|bb
init|=
operator|(
name|ByteBuf
operator|)
name|msg
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|nrOfBytes
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|transferredBytes
operator|>=
name|this
operator|.
name|skipStartingPos
condition|)
block|{
name|bb
operator|.
name|skipBytes
argument_list|(
name|this
operator|.
name|nrOfBytes
argument_list|)
expr_stmt|;
name|this
operator|.
name|nrOfBytes
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|skipStartingPos
operator|-=
name|messageSize
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|super
operator|.
name|channelRead
argument_list|(
name|ctx
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
class|class
name|BitFlipHandler
extends|extends
name|SendBackHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BitFlipHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|int
name|startingPos
decl_stmt|;
specifier|public
name|BitFlipHandler
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|startingPos
operator|=
name|pos
expr_stmt|;
block|}
specifier|public
name|void
name|channelRead
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Object
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|msg
operator|instanceof
name|ByteBuf
condition|)
block|{
name|ByteBuf
name|bb
init|=
operator|(
name|ByteBuf
operator|)
name|msg
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"FlipHandler. Got Buffer size: "
operator|+
name|bb
operator|.
name|readableBytes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|startingPos
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|transferredBytes
operator|+
name|bb
operator|.
name|readableBytes
argument_list|()
operator|>=
name|this
operator|.
name|startingPos
condition|)
block|{
name|int
name|i
init|=
name|this
operator|.
name|startingPos
operator|-
operator|(
name|int
operator|)
name|this
operator|.
name|transferredBytes
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"FlipHandler flips byte at offset "
operator|+
operator|(
name|this
operator|.
name|transferredBytes
operator|+
name|i
operator|)
argument_list|)
expr_stmt|;
name|byte
name|b
init|=
call|(
name|byte
call|)
argument_list|(
name|bb
operator|.
name|getByte
argument_list|(
name|i
argument_list|)
operator|^
literal|0x01
argument_list|)
decl_stmt|;
name|bb
operator|.
name|setByte
argument_list|(
name|i
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|this
operator|.
name|startingPos
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
block|}
name|super
operator|.
name|channelRead
argument_list|(
name|ctx
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

