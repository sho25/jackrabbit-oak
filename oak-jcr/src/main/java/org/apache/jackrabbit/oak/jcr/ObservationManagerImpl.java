begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|UnsupportedRepositoryOperationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventJournal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventListenerIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|ObservationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|EventIteratorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|EventListenerIteratorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ChangeExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|util
operator|.
name|LazyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|Iterators
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|LazyIteratorChain
operator|.
name|chain
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|Iterators
operator|.
name|singleton
import|;
end_import

begin_class
specifier|public
class|class
name|ObservationManagerImpl
implements|implements
name|ObservationManager
block|{
specifier|private
specifier|final
name|SessionDelegate
name|sessionDelegate
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|EventListener
argument_list|,
name|ChangeProcessor
argument_list|>
name|processors
init|=
operator|new
name|HashMap
argument_list|<
name|EventListener
argument_list|,
name|ChangeProcessor
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LazyValue
argument_list|<
name|Timer
argument_list|>
name|timer
decl_stmt|;
specifier|public
name|ObservationManagerImpl
parameter_list|(
name|SessionDelegate
name|sessionDelegate
parameter_list|,
name|LazyValue
argument_list|<
name|Timer
argument_list|>
name|timer
parameter_list|)
block|{
name|this
operator|.
name|sessionDelegate
operator|=
name|sessionDelegate
expr_stmt|;
name|this
operator|.
name|timer
operator|=
name|timer
expr_stmt|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
for|for
control|(
name|ChangeProcessor
name|processor
range|:
name|processors
operator|.
name|values
argument_list|()
control|)
block|{
name|processor
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|timer
operator|.
name|get
argument_list|()
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addEventListener
parameter_list|(
name|EventListener
name|listener
parameter_list|,
name|int
name|eventTypes
parameter_list|,
name|String
name|absPath
parameter_list|,
name|boolean
name|isDeep
parameter_list|,
name|String
index|[]
name|uuid
parameter_list|,
name|String
index|[]
name|nodeTypeName
parameter_list|,
name|boolean
name|noLocal
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|ChangeProcessor
name|processor
init|=
name|processors
operator|.
name|get
argument_list|(
name|listener
argument_list|)
decl_stmt|;
if|if
condition|(
name|processor
operator|==
literal|null
condition|)
block|{
name|ChangeExtractor
name|extractor
init|=
name|sessionDelegate
operator|.
name|getChangeExtractor
argument_list|()
decl_stmt|;
name|ChangeFilter
name|filter
init|=
operator|new
name|ChangeFilter
argument_list|(
name|eventTypes
argument_list|,
name|absPath
argument_list|,
name|isDeep
argument_list|,
name|uuid
argument_list|,
name|nodeTypeName
argument_list|,
name|noLocal
argument_list|)
decl_stmt|;
name|ChangeProcessor
name|changeProcessor
init|=
operator|new
name|ChangeProcessor
argument_list|(
name|sessionDelegate
operator|.
name|getNamePathMapper
argument_list|()
argument_list|,
name|extractor
argument_list|,
name|listener
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|processors
operator|.
name|put
argument_list|(
name|listener
argument_list|,
name|changeProcessor
argument_list|)
expr_stmt|;
name|timer
operator|.
name|get
argument_list|()
operator|.
name|schedule
argument_list|(
name|changeProcessor
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ChangeFilter
name|filter
init|=
operator|new
name|ChangeFilter
argument_list|(
name|eventTypes
argument_list|,
name|absPath
argument_list|,
name|isDeep
argument_list|,
name|uuid
argument_list|,
name|nodeTypeName
argument_list|,
name|noLocal
argument_list|)
decl_stmt|;
name|processor
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeEventListener
parameter_list|(
name|EventListener
name|listener
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|ChangeProcessor
name|processor
init|=
name|processors
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
decl_stmt|;
if|if
condition|(
name|processor
operator|!=
literal|null
condition|)
block|{
name|processor
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|EventListenerIterator
name|getRegisteredEventListeners
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
operator|new
name|EventListenerIteratorAdapter
argument_list|(
name|processors
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUserData
parameter_list|(
name|String
name|userData
parameter_list|)
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|(
literal|"User data not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|EventJournal
name|getEventJournal
parameter_list|()
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|EventJournal
name|getEventJournal
parameter_list|(
name|int
name|eventTypes
parameter_list|,
name|String
name|absPath
parameter_list|,
name|boolean
name|isDeep
parameter_list|,
name|String
index|[]
name|uuid
parameter_list|,
name|String
index|[]
name|nodeTypeName
parameter_list|)
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|()
throw|;
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
specifier|static
class|class
name|ChangeProcessor
extends|extends
name|TimerTask
block|{
specifier|private
specifier|final
name|NamePathMapper
name|namePathMapper
decl_stmt|;
specifier|private
specifier|final
name|ChangeExtractor
name|changeExtractor
decl_stmt|;
specifier|private
specifier|final
name|EventListener
name|listener
decl_stmt|;
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|ChangeFilter
argument_list|>
name|filterRef
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|stopped
decl_stmt|;
specifier|public
name|ChangeProcessor
parameter_list|(
name|NamePathMapper
name|namePathMapper
parameter_list|,
name|ChangeExtractor
name|changeExtractor
parameter_list|,
name|EventListener
name|listener
parameter_list|,
name|ChangeFilter
name|filter
parameter_list|)
block|{
name|this
operator|.
name|namePathMapper
operator|=
name|namePathMapper
expr_stmt|;
name|this
operator|.
name|changeExtractor
operator|=
name|changeExtractor
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|filterRef
operator|=
operator|new
name|AtomicReference
argument_list|<
name|ChangeFilter
argument_list|>
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFilter
parameter_list|(
name|ChangeFilter
name|filter
parameter_list|)
block|{
name|filterRef
operator|.
name|set
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|cancel
argument_list|()
expr_stmt|;
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|changeExtractor
operator|.
name|getChanges
argument_list|(
operator|new
name|EventGeneratingNodeStateDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|EventGeneratingNodeStateDiff
implements|implements
name|NodeStateDiff
block|{
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
name|EventGeneratingNodeStateDiff
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
specifier|public
name|EventGeneratingNodeStateDiff
parameter_list|()
block|{
name|this
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
if|if
condition|(
operator|!
name|stopped
operator|&&
name|filterRef
operator|.
name|get
argument_list|()
operator|.
name|include
argument_list|(
name|Event
operator|.
name|PROPERTY_ADDED
argument_list|,
name|path
argument_list|,
name|after
argument_list|)
condition|)
block|{
name|Event
name|event
init|=
name|generatePropertyEvent
argument_list|(
name|Event
operator|.
name|PROPERTY_ADDED
argument_list|,
name|path
argument_list|,
name|after
argument_list|)
decl_stmt|;
name|listener
operator|.
name|onEvent
argument_list|(
operator|new
name|EventIteratorAdapter
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|event
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
if|if
condition|(
operator|!
name|stopped
operator|&&
name|filterRef
operator|.
name|get
argument_list|()
operator|.
name|include
argument_list|(
name|Event
operator|.
name|PROPERTY_CHANGED
argument_list|,
name|path
argument_list|,
name|before
argument_list|)
condition|)
block|{
name|Event
name|event
init|=
name|generatePropertyEvent
argument_list|(
name|Event
operator|.
name|PROPERTY_CHANGED
argument_list|,
name|path
argument_list|,
name|after
argument_list|)
decl_stmt|;
name|listener
operator|.
name|onEvent
argument_list|(
operator|new
name|EventIteratorAdapter
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|event
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
if|if
condition|(
operator|!
name|stopped
operator|&&
name|filterRef
operator|.
name|get
argument_list|()
operator|.
name|include
argument_list|(
name|Event
operator|.
name|PROPERTY_REMOVED
argument_list|,
name|path
argument_list|,
name|before
argument_list|)
condition|)
block|{
name|Event
name|event
init|=
name|generatePropertyEvent
argument_list|(
name|Event
operator|.
name|PROPERTY_REMOVED
argument_list|,
name|path
argument_list|,
name|before
argument_list|)
decl_stmt|;
name|listener
operator|.
name|onEvent
argument_list|(
operator|new
name|EventIteratorAdapter
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|event
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
if|if
condition|(
operator|!
name|stopped
operator|&&
name|filterRef
operator|.
name|get
argument_list|()
operator|.
name|include
argument_list|(
name|Event
operator|.
name|NODE_ADDED
argument_list|,
name|path
argument_list|,
name|after
argument_list|)
condition|)
block|{
name|Iterator
argument_list|<
name|Event
argument_list|>
name|events
init|=
name|generateNodeEvents
argument_list|(
name|Event
operator|.
name|NODE_ADDED
argument_list|,
name|path
argument_list|,
name|name
argument_list|,
name|after
argument_list|)
decl_stmt|;
name|listener
operator|.
name|onEvent
argument_list|(
operator|new
name|EventIteratorAdapter
argument_list|(
name|events
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
if|if
condition|(
operator|!
name|stopped
operator|&&
name|filterRef
operator|.
name|get
argument_list|()
operator|.
name|include
argument_list|(
name|Event
operator|.
name|NODE_REMOVED
argument_list|,
name|path
argument_list|,
name|before
argument_list|)
condition|)
block|{
name|Iterator
argument_list|<
name|Event
argument_list|>
name|events
init|=
name|generateNodeEvents
argument_list|(
name|Event
operator|.
name|NODE_REMOVED
argument_list|,
name|path
argument_list|,
name|name
argument_list|,
name|before
argument_list|)
decl_stmt|;
name|listener
operator|.
name|onEvent
argument_list|(
operator|new
name|EventIteratorAdapter
argument_list|(
name|events
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
if|if
condition|(
operator|!
name|stopped
operator|&&
name|filterRef
operator|.
name|get
argument_list|()
operator|.
name|includeChildren
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|changeExtractor
operator|.
name|getChanges
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
operator|new
name|EventGeneratingNodeStateDiff
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Event
name|generatePropertyEvent
parameter_list|(
name|int
name|eventType
parameter_list|,
name|String
name|path
parameter_list|,
name|PropertyState
name|property
parameter_list|)
block|{
name|String
name|jcrPath
init|=
name|namePathMapper
operator|.
name|getJcrPath
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// TODO support userId, identifier, info, date
return|return
operator|new
name|EventImpl
argument_list|(
name|eventType
argument_list|,
name|jcrPath
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|private
name|Iterator
argument_list|<
name|Event
argument_list|>
name|generateNodeEvents
parameter_list|(
specifier|final
name|int
name|eventType
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|node
parameter_list|)
block|{
specifier|final
name|String
name|jcrPath
init|=
name|namePathMapper
operator|.
name|getJcrPath
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Event
argument_list|>
name|propertyEvents
init|=
name|Iterators
operator|.
name|map
argument_list|(
name|node
operator|.
name|getProperties
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Function1
argument_list|<
name|PropertyState
argument_list|,
name|Event
argument_list|>
argument_list|()
block|{
name|int
name|propertyEventType
init|=
name|eventType
operator|==
name|Event
operator|.
name|NODE_ADDED
condition|?
name|Event
operator|.
name|PROPERTY_ADDED
else|:
name|Event
operator|.
name|PROPERTY_REMOVED
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Event
name|apply
parameter_list|(
name|PropertyState
name|property
parameter_list|)
block|{
return|return
name|generatePropertyEvent
argument_list|(
name|propertyEventType
argument_list|,
name|jcrPath
argument_list|,
name|property
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// TODO support userId, identifier, info, date
specifier|final
name|Event
name|nodeEvent
init|=
operator|new
name|EventImpl
argument_list|(
name|eventType
argument_list|,
name|jcrPath
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Event
argument_list|>
name|events
init|=
name|Iterators
operator|.
name|chain
argument_list|(
name|singleton
argument_list|(
name|nodeEvent
argument_list|)
argument_list|,
name|propertyEvents
argument_list|)
decl_stmt|;
return|return
name|chain
argument_list|(
name|events
argument_list|,
name|chain
argument_list|(
name|generateChildEvents
argument_list|(
name|eventType
argument_list|,
name|path
argument_list|,
name|name
argument_list|,
name|node
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Iterator
argument_list|<
name|Iterator
argument_list|<
name|Event
argument_list|>
argument_list|>
name|generateChildEvents
parameter_list|(
specifier|final
name|int
name|eventType
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
name|NodeState
name|node
parameter_list|)
block|{
return|return
name|Iterators
operator|.
name|map
argument_list|(
name|node
operator|.
name|getChildNodeEntries
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Function1
argument_list|<
name|ChildNodeEntry
argument_list|,
name|Iterator
argument_list|<
name|Event
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Event
argument_list|>
name|apply
parameter_list|(
name|ChildNodeEntry
name|entry
parameter_list|)
block|{
return|return
name|generateNodeEvents
argument_list|(
name|eventType
argument_list|,
name|path
argument_list|,
name|name
argument_list|,
name|entry
operator|.
name|getNodeState
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ChangeFilter
block|{
specifier|public
name|ChangeFilter
parameter_list|(
name|int
name|eventTypes
parameter_list|,
name|String
name|absPath
parameter_list|,
name|boolean
name|deep
parameter_list|,
name|String
index|[]
name|uuid
parameter_list|,
name|String
index|[]
name|nodeTypeName
parameter_list|,
name|boolean
name|noLocal
parameter_list|)
block|{
comment|// todo implement ChangeFilter
block|}
specifier|public
name|boolean
name|include
parameter_list|(
name|int
name|eventType
parameter_list|,
name|String
name|path
parameter_list|,
name|PropertyState
name|propertyState
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// todo implement include
block|}
specifier|public
name|boolean
name|include
parameter_list|(
name|int
name|eventType
parameter_list|,
name|String
name|path
parameter_list|,
name|NodeState
name|nodeState
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// todo implement include
block|}
specifier|public
name|boolean
name|includeChildren
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// todo implement includeChildren
block|}
block|}
specifier|private
specifier|static
class|class
name|EventImpl
implements|implements
name|Event
block|{
specifier|private
specifier|final
name|int
name|type
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|String
name|userID
decl_stmt|;
specifier|private
specifier|final
name|String
name|identifier
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|info
decl_stmt|;
specifier|private
specifier|final
name|long
name|date
decl_stmt|;
name|EventImpl
parameter_list|(
name|int
name|type
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|userID
parameter_list|,
name|String
name|identifier
parameter_list|,
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|info
parameter_list|,
name|long
name|date
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|userID
operator|=
name|userID
expr_stmt|;
name|this
operator|.
name|identifier
operator|=
name|identifier
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
name|this
operator|.
name|date
operator|=
name|date
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPath
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|path
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUserID
parameter_list|()
block|{
return|return
name|userID
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIdentifier
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|identifier
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|getInfo
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|info
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUserData
parameter_list|()
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|(
literal|"User data not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDate
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|date
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|other
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|other
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|EventImpl
name|that
init|=
operator|(
name|EventImpl
operator|)
name|other
decl_stmt|;
return|return
name|date
operator|==
name|that
operator|.
name|date
operator|&&
name|type
operator|==
name|that
operator|.
name|type
operator|&&
operator|(
name|identifier
operator|==
literal|null
condition|?
name|that
operator|.
name|identifier
operator|==
literal|null
else|:
name|identifier
operator|.
name|equals
argument_list|(
name|that
operator|.
name|identifier
argument_list|)
operator|)
operator|&&
operator|(
name|info
operator|==
literal|null
condition|?
name|that
operator|.
name|info
operator|==
literal|null
else|:
name|info
operator|.
name|equals
argument_list|(
name|that
operator|.
name|info
argument_list|)
operator|)
operator|&&
operator|(
name|path
operator|==
literal|null
condition|?
name|that
operator|.
name|path
operator|==
literal|null
else|:
name|path
operator|.
name|equals
argument_list|(
name|that
operator|.
name|path
argument_list|)
operator|)
operator|&&
operator|(
name|userID
operator|==
literal|null
condition|?
name|that
operator|.
name|userID
operator|==
literal|null
else|:
name|userID
operator|.
name|equals
argument_list|(
name|that
operator|.
name|userID
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|type
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|path
operator|==
literal|null
condition|?
literal|0
else|:
name|path
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|userID
operator|==
literal|null
condition|?
literal|0
else|:
name|userID
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|identifier
operator|==
literal|null
condition|?
literal|0
else|:
name|identifier
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|info
operator|==
literal|null
condition|?
literal|0
else|:
name|info
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|date
operator|^
operator|(
name|date
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"EventImpl{"
operator|+
literal|"type="
operator|+
name|type
operator|+
literal|", path='"
operator|+
name|path
operator|+
literal|'\''
operator|+
literal|", userID='"
operator|+
name|userID
operator|+
literal|'\''
operator|+
literal|", identifier='"
operator|+
name|identifier
operator|+
literal|'\''
operator|+
literal|", info="
operator|+
name|info
operator|+
literal|", date="
operator|+
name|date
operator|+
literal|'}'
return|;
block|}
block|}
block|}
end_class

end_unit

