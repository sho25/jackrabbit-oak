begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|nodestate
operator|.
name|report
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ReadOnlyBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A decoration layer for NodeState instances that intercepts  * all accesses to NodeStates and PropertyStates (getters) and  * informs a {@link Reporter} via its callbacks that the respective  * NodeStates or PropertyStates have been accessed.  *<br>  * The decoration is deep, i.e. any child NodeStates will be  * decorated as well and will report to the same {@code Reporter}  * instance.  *<br>  * For convenience, a {@link PeriodicReporter} abstract class exists.  * This simplifies reporting every nth node/property only.  *<br>  * Note: Multiple accesses to the same node or property are each  * reported. Therefore if exactly counting unique accesses is a  * requirement, the reporter needs to take care of de-duplication.  *  * @see Reporter, PeriodicReporter, LoggingReporter  */
end_comment

begin_class
specifier|public
class|class
name|ReportingNodeState
implements|implements
name|NodeState
block|{
specifier|private
specifier|final
name|ReportingNodeState
name|parent
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|delegate
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|Reporter
name|reporter
decl_stmt|;
comment|/**      * Allows wrapping a NodeState as a ReportingNodeState. The wrapped      * NodeState is treated as the root of a tree (i.e. path is "/").      *<br>      * Any children accessed via this NodeState are also wrapped. Each      * wrapped NodeState is also reported to the provided Reporter.      *      * @param nodeState The NodeState to be wrapped.      * @param reporter The reporter to report to.      * @return the wrapped NodeState.      */
specifier|public
specifier|static
name|NodeState
name|wrap
parameter_list|(
name|NodeState
name|nodeState
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
block|{
return|return
name|wrapAndReport
argument_list|(
literal|null
argument_list|,
literal|"/"
argument_list|,
name|nodeState
argument_list|,
name|reporter
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|NodeState
name|wrapAndReport
parameter_list|(
annotation|@
name|Nullable
name|ReportingNodeState
name|parent
parameter_list|,
annotation|@
name|Nonnull
name|String
name|name
parameter_list|,
annotation|@
name|Nonnull
name|NodeState
name|delegate
parameter_list|,
annotation|@
name|Nonnull
name|Reporter
name|reporter
parameter_list|)
block|{
specifier|final
name|ReportingNodeState
name|nodeState
init|=
operator|new
name|ReportingNodeState
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|delegate
argument_list|,
name|reporter
argument_list|)
decl_stmt|;
name|reporter
operator|.
name|reportNode
argument_list|(
name|nodeState
argument_list|)
expr_stmt|;
return|return
name|nodeState
return|;
block|}
specifier|protected
name|NodeState
name|wrapChild
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|delegate
parameter_list|)
block|{
return|return
name|wrapAndReport
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|delegate
argument_list|,
name|this
operator|.
name|reporter
argument_list|)
return|;
block|}
specifier|private
name|ReportingNodeState
parameter_list|(
name|ReportingNodeState
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|delegate
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
block|}
comment|/**      * ReportingNodeState instances provide access to their path via their      * parent hierarchy. Note that calculating the path on every access may      * incur a significant performance penalty.      *      * @return The path of the ReportingNodeState instance, assuming that      *         the first wrapped instance is the root node.      */
specifier|public
name|String
name|getPath
parameter_list|()
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
name|name
return|;
block|}
return|return
name|PathUtils
operator|.
name|concat
argument_list|(
name|parent
operator|.
name|getPath
argument_list|()
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/**      * The ReportingNodeState implementation returns a ReadOnlyBuilder, which      * will fail for any mutable operation.      *      * @return a NodeBuilder instance corresponding to this NodeState.      */
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|NodeBuilder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|ReadOnlyBuilder
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|compareAgainstBaseState
parameter_list|(
specifier|final
name|NodeState
name|base
parameter_list|,
specifier|final
name|NodeStateDiff
name|diff
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|compareAgainstBaseState
argument_list|(
name|base
argument_list|,
operator|new
name|ReportingDiff
argument_list|(
name|diff
argument_list|,
name|this
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Note that any implementation-specific optimizations of wrapped NodeStates      * will not work if a ReportingNodeState is passed into their {@code #equals()}      * method. This implementation will compare the wrapped NodeState, however. So      * optimizations work when calling {@code #equals()} on a ReportingNodeState.      *      * @param other Object to compare with this NodeState.      * @return true if the given object is equal to this NodeState, false otherwise.      */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|ReportingNodeState
condition|)
block|{
return|return
name|delegate
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ReportingNodeState
operator|)
name|other
operator|)
operator|.
name|delegate
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|delegate
operator|.
name|equals
argument_list|(
name|other
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|exists
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasChildNode
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|hasChildNode
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
name|wrapChild
argument_list|(
name|name
argument_list|,
name|delegate
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|(
specifier|final
name|long
name|max
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getChildNodeCount
argument_list|(
name|max
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getChildNodeNames
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getChildNodeNames
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|()
block|{
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|delegate
operator|.
name|getChildNodeEntries
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|ChildNodeEntry
argument_list|,
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|ChildNodeEntry
name|apply
parameter_list|(
specifier|final
name|ChildNodeEntry
name|childNodeEntry
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|childNodeEntry
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
operator|new
name|MemoryChildNodeEntry
argument_list|(
name|name
argument_list|,
name|wrapChild
argument_list|(
name|name
argument_list|,
name|childNodeEntry
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasProperty
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|hasProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getBoolean
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|name
parameter_list|)
block|{
name|reporter
operator|.
name|reportProperty
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|delegate
operator|.
name|getBoolean
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLong
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|reporter
operator|.
name|reportProperty
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|delegate
operator|.
name|getLong
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
specifier|public
name|String
name|getName
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|name
parameter_list|)
block|{
name|reporter
operator|.
name|reportProperty
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|delegate
operator|.
name|getName
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getNames
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|name
parameter_list|)
block|{
name|reporter
operator|.
name|reportProperty
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|delegate
operator|.
name|getNames
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
specifier|public
name|String
name|getString
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|reporter
operator|.
name|reportProperty
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|delegate
operator|.
name|getString
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getStrings
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|name
parameter_list|)
block|{
name|reporter
operator|.
name|reportProperty
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|delegate
operator|.
name|getStrings
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
specifier|public
name|PropertyState
name|getProperty
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|name
parameter_list|)
block|{
name|reporter
operator|.
name|reportProperty
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|delegate
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPropertyCount
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getPropertyCount
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|delegate
operator|.
name|getProperties
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|PropertyState
argument_list|,
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|PropertyState
name|apply
parameter_list|(
specifier|final
name|PropertyState
name|propertyState
parameter_list|)
block|{
name|reporter
operator|.
name|reportProperty
argument_list|(
name|ReportingNodeState
operator|.
name|this
argument_list|,
name|propertyState
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|propertyState
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ReportingNodeState{"
operator|+
name|getPath
argument_list|()
operator|+
literal|", "
operator|+
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|"}"
return|;
block|}
specifier|private
specifier|static
class|class
name|ReportingDiff
implements|implements
name|NodeStateDiff
block|{
specifier|private
specifier|final
name|NodeStateDiff
name|diff
decl_stmt|;
specifier|private
name|ReportingNodeState
name|parent
decl_stmt|;
specifier|public
name|ReportingDiff
parameter_list|(
name|NodeStateDiff
name|diff
parameter_list|,
name|ReportingNodeState
name|parent
parameter_list|)
block|{
name|this
operator|.
name|diff
operator|=
name|diff
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeAdded
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|NodeState
name|after
parameter_list|)
block|{
return|return
name|diff
operator|.
name|childNodeAdded
argument_list|(
name|name
argument_list|,
name|parent
operator|.
name|wrapChild
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeChanged
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|NodeState
name|before
parameter_list|,
specifier|final
name|NodeState
name|after
parameter_list|)
block|{
return|return
name|diff
operator|.
name|childNodeChanged
argument_list|(
name|name
argument_list|,
name|before
argument_list|,
name|parent
operator|.
name|wrapChild
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeDeleted
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|NodeState
name|before
parameter_list|)
block|{
return|return
name|diff
operator|.
name|childNodeDeleted
argument_list|(
name|name
argument_list|,
name|before
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyAdded
parameter_list|(
specifier|final
name|PropertyState
name|after
parameter_list|)
block|{
return|return
name|diff
operator|.
name|propertyAdded
argument_list|(
name|after
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyChanged
parameter_list|(
specifier|final
name|PropertyState
name|before
parameter_list|,
specifier|final
name|PropertyState
name|after
parameter_list|)
block|{
return|return
name|diff
operator|.
name|propertyChanged
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyDeleted
parameter_list|(
specifier|final
name|PropertyState
name|before
parameter_list|)
block|{
return|return
name|diff
operator|.
name|propertyDeleted
argument_list|(
name|before
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

