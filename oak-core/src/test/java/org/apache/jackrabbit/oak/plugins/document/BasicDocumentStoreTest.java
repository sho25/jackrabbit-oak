begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|BasicDocumentStoreTest
extends|extends
name|AbstractDocumentStoreTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BasicDocumentStoreTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|BasicDocumentStoreTest
parameter_list|(
name|DocumentStoreFixture
name|dsf
parameter_list|)
block|{
name|super
argument_list|(
name|dsf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddAndRemove
parameter_list|()
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testAddAndRemove"
decl_stmt|;
comment|// remove if present
name|NodeDocument
name|nd
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|nd
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|// add
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxId
parameter_list|()
block|{
comment|// TODO see OAK-1589
name|Assume
operator|.
name|assumeTrue
argument_list|(
operator|!
operator|(
name|super
operator|.
name|ds
operator|instanceof
name|MongoDocumentStore
operator|)
argument_list|)
expr_stmt|;
name|int
name|min
init|=
literal|0
decl_stmt|;
name|int
name|max
init|=
literal|32768
decl_stmt|;
name|int
name|test
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|max
operator|-
name|min
operator|>=
literal|2
condition|)
block|{
name|test
operator|=
operator|(
name|max
operator|+
name|min
operator|)
operator|/
literal|2
expr_stmt|;
name|String
name|id
init|=
name|generateString
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
comment|// check that we really can read it
name|NodeDocument
name|findme
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"failed to retrieve previously stored document"
argument_list|,
name|findme
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|min
operator|=
name|test
expr_stmt|;
block|}
else|else
block|{
name|max
operator|=
name|test
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"max id length for "
operator|+
name|super
operator|.
name|dsname
operator|+
literal|" was "
operator|+
name|test
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxProperty
parameter_list|()
block|{
name|int
name|min
init|=
literal|0
decl_stmt|;
name|int
name|max
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|4
decl_stmt|;
comment|// 32M
name|int
name|test
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|max
operator|-
name|min
operator|>=
literal|256
condition|)
block|{
name|test
operator|=
operator|(
name|max
operator|+
name|min
operator|)
operator|/
literal|2
expr_stmt|;
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testMaxProperty-"
operator|+
name|test
decl_stmt|;
name|String
name|pval
init|=
name|generateString
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
name|pval
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
comment|// check that we really can read it
name|NodeDocument
name|findme
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"failed to retrieve previously stored document"
argument_list|,
name|findme
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|min
operator|=
name|test
expr_stmt|;
block|}
else|else
block|{
name|max
operator|=
name|test
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"max prop length for "
operator|+
name|super
operator|.
name|dsname
operator|+
literal|" was "
operator|+
name|test
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteNonExisting
parameter_list|()
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testDeleteNonExisting-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
comment|// delete is best effort
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteNonExistingMultiple
parameter_list|()
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testDeleteNonExistingMultiple-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
comment|// create a test node
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
operator|+
literal|"-2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
operator|+
literal|"-2"
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|todelete
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|todelete
operator|.
name|add
argument_list|(
name|id
operator|+
literal|"-2"
argument_list|)
expr_stmt|;
name|todelete
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|todelete
argument_list|)
expr_stmt|;
comment|// id-2 should be removed
name|Document
name|d
init|=
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
operator|+
literal|"-2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|d
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateMultiple
parameter_list|()
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testUpdateMultiple"
decl_stmt|;
comment|// create a test node
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// update a non-existing one and this one
name|List
argument_list|<
name|String
argument_list|>
name|toupdate
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|toupdate
operator|.
name|add
argument_list|(
name|id
operator|+
literal|"-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
expr_stmt|;
name|toupdate
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|UpdateOp
name|up2
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|up2
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|ds
operator|.
name|update
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|toupdate
argument_list|,
name|up2
argument_list|)
expr_stmt|;
comment|// id should be updated
name|ds
operator|.
name|invalidateCache
argument_list|()
expr_stmt|;
name|Document
name|d
init|=
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|d
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQuery
parameter_list|()
block|{
comment|// create ten documents
name|String
name|base
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testQuery-"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|base
operator|+
name|i
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"document with "
operator|+
name|id
operator|+
literal|" not created"
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
name|getKeys
argument_list|(
name|ds
operator|.
name|query
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|base
argument_list|,
name|base
operator|+
literal|"A"
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|base
operator|+
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|base
operator|+
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|getKeys
argument_list|(
name|ds
operator|.
name|query
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|base
argument_list|,
name|base
operator|+
literal|"A"
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|base
operator|+
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|base
operator|+
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getKeys
parameter_list|(
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|docs
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeDocument
name|doc
range|:
name|docs
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|doc
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreatePerfSmall
parameter_list|()
block|{
name|createPerf
argument_list|(
literal|16
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreatePerfBig
parameter_list|()
block|{
name|createPerf
argument_list|(
literal|32
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createPerf
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|String
name|pval
init|=
name|generateString
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|long
name|duration
init|=
literal|1000
decl_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|duration
decl_stmt|;
name|long
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|end
condition|)
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testCreatePerf-"
operator|+
name|size
operator|+
literal|"-"
operator|+
name|cnt
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
name|pval
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"document with "
operator|+
name|id
operator|+
literal|" not created"
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|cnt
operator|+=
literal|1
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"document creation with property of size "
operator|+
name|size
operator|+
literal|" for "
operator|+
name|super
operator|.
name|dsname
operator|+
literal|" was "
operator|+
name|cnt
operator|+
literal|" in "
operator|+
name|duration
operator|+
literal|"ms ("
operator|+
operator|(
name|cnt
operator|/
operator|(
name|duration
operator|/
literal|1000f
operator|)
operator|)
operator|+
literal|"/s)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdatePerfSmall
parameter_list|()
block|{
name|updatePerf
argument_list|(
literal|16
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdatePerfBig
parameter_list|()
block|{
name|updatePerf
argument_list|(
literal|32
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updatePerf
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|String
name|pval
init|=
name|generateString
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|long
name|duration
init|=
literal|1000
decl_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|duration
decl_stmt|;
name|long
name|cnt
init|=
literal|0
decl_stmt|;
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testUpdatePerf-"
operator|+
name|size
decl_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|end
condition|)
block|{
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
name|pval
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|cnt
operator|+=
literal|1
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"document updates with property of size "
operator|+
name|size
operator|+
literal|" for "
operator|+
name|super
operator|.
name|dsname
operator|+
literal|" was "
operator|+
name|cnt
operator|+
literal|" in "
operator|+
name|duration
operator|+
literal|"ms ("
operator|+
operator|(
name|cnt
operator|/
operator|(
name|duration
operator|/
literal|1000f
operator|)
operator|)
operator|+
literal|"/s)"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|generateString
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|(
name|length
argument_list|)
decl_stmt|;
while|while
condition|(
name|length
operator|--
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'A'
operator|+
operator|(
call|(
name|int
call|)
argument_list|(
literal|26
operator|*
name|Math
operator|.
name|random
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

