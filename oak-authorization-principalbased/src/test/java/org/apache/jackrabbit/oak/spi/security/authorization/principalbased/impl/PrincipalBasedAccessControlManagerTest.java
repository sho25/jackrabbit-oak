begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrincipalAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|ItemBasedPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|ImmutableACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|FilterProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|MIX_REP_PRINCIPAL_BASED_MIXIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_PRINCIPAL_POLICY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|MockUtility
operator|.
name|mockFilterProvider
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_LOCK_MANAGEMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_READ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_CHILD_NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_RETENTION_MANAGEMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_VERSION_MANAGEMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_WORKSPACE_MANAGEMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|REP_WRITE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
specifier|public
class|class
name|PrincipalBasedAccessControlManagerTest
extends|extends
name|AbstractPrincipalBasedTest
block|{
specifier|private
name|PrincipalBasedAccessControlManager
name|acMgr
decl_stmt|;
specifier|private
name|ItemBasedPrincipal
name|validPrincipal
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|testBefore
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|acMgr
operator|=
name|createAccessControlManager
argument_list|(
name|root
argument_list|,
name|getFilterProvider
argument_list|()
argument_list|)
expr_stmt|;
name|validPrincipal
operator|=
operator|(
name|ItemBasedPrincipal
operator|)
name|getTestSystemUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
block|}
specifier|private
name|PrincipalBasedAccessControlManager
name|createAccessControlManager
parameter_list|(
name|Root
name|root
parameter_list|,
annotation|@
name|NotNull
name|FilterProvider
name|filterProvider
parameter_list|)
block|{
return|return
operator|new
name|PrincipalBasedAccessControlManager
argument_list|(
name|getMgrProvider
argument_list|(
name|this
operator|.
name|root
argument_list|)
argument_list|,
name|filterProvider
argument_list|)
return|;
block|}
specifier|private
name|PrincipalPolicyImpl
name|createValidPolicy
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|oakPath
init|=
name|getNamePathMapper
argument_list|()
operator|.
name|getOakPath
argument_list|(
name|validPrincipal
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|PrincipalPolicyImpl
argument_list|(
name|validPrincipal
argument_list|,
name|oakPath
argument_list|,
name|getMgrProvider
argument_list|(
name|root
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetApplicablePoliciesNullPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
operator|(
name|Principal
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetApplicablePoliciesEmptyPrincipalName
parameter_list|()
throws|throws
name|Exception
block|{
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetApplicablePoliciesPrincipalNotHandled
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalBasedAccessControlManager
name|mgr
init|=
name|createAccessControlManager
argument_list|(
name|root
argument_list|,
name|mockFilterProvider
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mgr
operator|.
name|getApplicablePolicies
argument_list|(
name|validPrincipal
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetApplicablePoliciesPrincipalHandled
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalBasedAccessControlManager
name|mgr
init|=
name|createAccessControlManager
argument_list|(
name|root
argument_list|,
name|mockFilterProvider
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|AccessControlPolicy
index|[]
name|applicable
init|=
name|mgr
operator|.
name|getApplicablePolicies
argument_list|(
name|validPrincipal
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|applicable
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|applicable
index|[
literal|0
index|]
operator|instanceof
name|PrincipalPolicyImpl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSetPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlPolicy
index|[]
name|applicable
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|validPrincipal
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|applicable
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|validPrincipal
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
name|policy
init|=
operator|(
name|PrincipalPolicyImpl
operator|)
name|applicable
index|[
literal|0
index|]
decl_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|testContentJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|validPrincipal
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|validPrincipal
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetPoliciesNullPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|acMgr
operator|.
name|getPolicies
argument_list|(
operator|(
name|Principal
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetPoliciesEmptyPrincipalName
parameter_list|()
throws|throws
name|Exception
block|{
name|acMgr
operator|.
name|getPolicies
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPoliciesPrincipalNotHandled
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalBasedAccessControlManager
name|mgr
init|=
name|createAccessControlManager
argument_list|(
name|root
argument_list|,
name|mockFilterProvider
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mgr
operator|.
name|getPolicies
argument_list|(
name|validPrincipal
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPoliciesAccessControlledTree
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|getNamePathMapper
argument_list|()
operator|.
name|getOakPath
argument_list|(
name|validPrincipal
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|tree
argument_list|,
name|MIX_REP_PRINCIPAL_BASED_MIXIN
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
argument_list|,
literal|"uid"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|validPrincipal
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetEffectivePoliciesEmptyPrincipalName
parameter_list|()
throws|throws
name|Exception
block|{
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|validPrincipal
argument_list|,
operator|new
name|PrincipalImpl
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePoliciesNothingSet
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|validPrincipal
argument_list|)
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPolicyImpl
name|policy
init|=
operator|(
name|PrincipalPolicyImpl
operator|)
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|validPrincipal
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|testContentJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
comment|// transient changes => no effective policy
name|AccessControlPolicy
index|[]
name|effective
init|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|validPrincipal
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// after commit => effective policy present
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|effective
operator|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|validPrincipal
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePoliciesEmptyPolicySet
parameter_list|()
throws|throws
name|Exception
block|{
name|JackrabbitAccessControlPolicy
name|emptyPolicy
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|validPrincipal
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|emptyPolicy
operator|.
name|getPath
argument_list|()
argument_list|,
name|emptyPolicy
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|validPrincipal
argument_list|)
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePoliciesRemovedPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPrincipalBasedAccessControl
argument_list|(
name|validPrincipal
argument_list|,
literal|null
argument_list|,
name|JCR_WORKSPACE_MANAGEMENT
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|id
init|=
name|getTestSystemUser
argument_list|()
operator|.
name|getID
argument_list|()
decl_stmt|;
name|Root
name|latestRoot
init|=
name|adminSession
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|getUserManager
argument_list|(
name|latestRoot
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|validPrincipal
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|latestRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|validPrincipal
argument_list|)
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createSystemUser
argument_list|(
name|id
argument_list|,
name|INTERMEDIATE_PATH
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Since principal-based permissions are only evaluated if the complete set of principals is supported, the same      * should apply for {@link AccessControlManager#getEffectivePolicies(Set)}.      */
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePoliciesMixedPrincipalSet
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPrincipalBasedAccessControl
argument_list|(
name|validPrincipal
argument_list|,
name|testJcrPath
argument_list|,
name|JCR_READ
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|mixedPrincipalSet
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|validPrincipal
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|mixedPrincipalSet
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePoliciesRemovedPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPrincipalBasedAccessControl
argument_list|(
name|validPrincipal
argument_list|,
literal|null
argument_list|,
name|JCR_WORKSPACE_MANAGEMENT
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Root
name|latestRoot
init|=
name|adminSession
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|latestRoot
operator|.
name|getTree
argument_list|(
name|getNamePathMapper
argument_list|()
operator|.
name|getOakPath
argument_list|(
name|validPrincipal
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getChild
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|latestRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|validPrincipal
argument_list|)
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSetInvalidPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalAccessControlList
name|policy
init|=
name|mock
argument_list|(
name|PrincipalAccessControlList
operator|.
name|class
argument_list|)
decl_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|validPrincipal
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSetEffectivePolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPrincipalBasedAccessControl
argument_list|(
name|validPrincipal
argument_list|,
name|testContentJcrPath
argument_list|,
name|REP_WRITE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ImmutableACL
name|effective
init|=
operator|(
name|ImmutableACL
operator|)
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|validPrincipal
argument_list|)
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|effective
operator|.
name|getPath
argument_list|()
argument_list|,
name|effective
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSetPolicyPathMismatch
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPolicyImpl
name|policy
init|=
name|createValidPolicy
argument_list|()
decl_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getOakPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSetPolicyNullPath
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalAccessControlList
name|policy
init|=
name|mock
argument_list|(
name|PrincipalAccessControlList
operator|.
name|class
argument_list|)
decl_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
literal|null
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSetPolicyUnsupportedPath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|unsupportedJcrPath
init|=
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrPath
argument_list|(
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|SUPPORTED_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|unsupportedJcrPath
argument_list|,
name|createValidPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetEmptyPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPolicyImpl
name|policy
init|=
name|createValidPolicy
argument_list|()
decl_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|validPrincipal
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|validPrincipal
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|policy
operator|.
name|getOakPath
argument_list|()
argument_list|)
operator|.
name|hasChild
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPolicyNonExistingEffectivePath
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPolicyImpl
name|policy
init|=
name|getPrincipalPolicyImpl
argument_list|(
name|validPrincipal
argument_list|,
name|acMgr
argument_list|)
decl_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPolicyRemovedEffectivePath
parameter_list|()
throws|throws
name|Exception
block|{
name|setupContentTrees
argument_list|(
name|TEST_OAK_PATH
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|PrincipalPolicyImpl
name|policy
init|=
name|getPrincipalPolicyImpl
argument_list|(
name|validPrincipal
argument_list|,
name|acMgr
argument_list|)
decl_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|getTree
argument_list|(
name|TEST_OAK_PATH
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPolicyImpl
name|policy
init|=
name|setupPrincipalBasedAccessControl
argument_list|(
name|validPrincipal
argument_list|,
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
name|addPrincipalBasedEntry
argument_list|(
name|policy
argument_list|,
literal|null
argument_list|,
name|JCR_WORKSPACE_MANAGEMENT
argument_list|)
expr_stmt|;
name|Tree
name|policyTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|policy
operator|.
name|getOakPath
argument_list|()
argument_list|)
operator|.
name|getChild
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|policyTree
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|policyTree
operator|.
name|getChildrenCount
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|validPrincipal
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|PrincipalPolicyImpl
operator|)
name|policies
index|[
literal|0
index|]
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|validPrincipal
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPolicyRemovesAllChildNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPolicyImpl
name|policy
init|=
name|setupPrincipalBasedAccessControl
argument_list|(
name|validPrincipal
argument_list|,
name|testJcrPath
argument_list|,
name|JCR_READ
argument_list|)
decl_stmt|;
name|Tree
name|policyTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|policy
operator|.
name|getOakPath
argument_list|()
argument_list|)
operator|.
name|getChild
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|)
decl_stmt|;
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|policyTree
argument_list|,
literal|"nonEntryChild"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|policy
operator|.
name|removeAccessControlEntry
argument_list|(
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|REP_READ_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|policyTree
operator|=
name|root
operator|.
name|getTree
argument_list|(
name|policy
operator|.
name|getOakPath
argument_list|()
argument_list|)
operator|.
name|getChild
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|policyTree
operator|.
name|hasChild
argument_list|(
literal|"nonEntryChild"
argument_list|)
argument_list|)
expr_stmt|;
name|policy
operator|=
operator|(
name|PrincipalPolicyImpl
operator|)
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|validPrincipal
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|privilegesFromNames
argument_list|(
name|REP_READ_NODES
argument_list|)
argument_list|,
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrivileges
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRemoveInvalidPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalAccessControlList
name|policy
init|=
name|mock
argument_list|(
name|PrincipalAccessControlList
operator|.
name|class
argument_list|)
decl_stmt|;
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|validPrincipal
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRemoveEffectivePolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPrincipalBasedAccessControl
argument_list|(
name|validPrincipal
argument_list|,
name|testContentJcrPath
argument_list|,
name|REP_WRITE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ImmutableACL
name|effective
init|=
operator|(
name|ImmutableACL
operator|)
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|validPrincipal
argument_list|)
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|effective
operator|.
name|getPath
argument_list|()
argument_list|,
name|effective
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRemovePolicyPathMismatch
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPolicyImpl
name|policy
init|=
name|createValidPolicy
argument_list|()
decl_stmt|;
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRemovePolicyNullPath
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalAccessControlList
name|policy
init|=
name|mock
argument_list|(
name|PrincipalAccessControlList
operator|.
name|class
argument_list|)
decl_stmt|;
name|acMgr
operator|.
name|removePolicy
argument_list|(
literal|null
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRemovePolicyUnsupportedPath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|unsupportedJcrPath
init|=
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrPath
argument_list|(
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|SUPPORTED_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|unsupportedJcrPath
argument_list|,
name|createValidPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRemovePolicyTreeAlreadyRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPolicyImpl
name|policy
init|=
name|createValidPolicy
argument_list|()
decl_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
comment|// remove tree => then try to remove the policy
name|root
operator|.
name|getTree
argument_list|(
name|policy
operator|.
name|getOakPath
argument_list|()
argument_list|)
operator|.
name|getChild
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveEmptyPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPolicyImpl
name|policy
init|=
name|createValidPolicy
argument_list|()
decl_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|validPrincipal
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|validPrincipal
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|policy
operator|.
name|getOakPath
argument_list|()
argument_list|)
operator|.
name|hasChild
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovePolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPolicyImpl
name|policy
init|=
name|setupPrincipalBasedAccessControl
argument_list|(
name|validPrincipal
argument_list|,
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrPath
argument_list|(
name|UserConstants
operator|.
name|DEFAULT_USER_PATH
argument_list|)
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_USER_MANAGEMENT
argument_list|)
decl_stmt|;
name|addPrincipalBasedEntry
argument_list|(
name|policy
argument_list|,
literal|null
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_PRIVILEGE_MANAGEMENT
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|validPrincipal
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|validPrincipal
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|policy
operator|.
name|getOakPath
argument_list|()
argument_list|)
operator|.
name|hasChild
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetApplicableByPath
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|assertFalse
argument_list|(
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|validPrincipal
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PathNotFoundException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetApplicableByNonExistingPath
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|testContentJcrPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPoliciesByPath
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|validPrincipal
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PathNotFoundException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetPoliciesByNonExistingPath
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testContentJcrPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePoliciesByPathNothingSet
parameter_list|()
throws|throws
name|Exception
block|{
name|setupContentTrees
argument_list|(
name|TEST_OAK_PATH
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|testContentJcrPath
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePoliciesByPathTransientPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|setupContentTrees
argument_list|(
name|TEST_OAK_PATH
argument_list|)
expr_stmt|;
name|setupPrincipalBasedAccessControl
argument_list|(
name|validPrincipal
argument_list|,
name|testContentJcrPath
argument_list|,
name|JCR_VERSION_MANAGEMENT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|testContentJcrPath
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|testJcrPath
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PathNotFoundException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetEffectivePoliciesByNonExistingPath
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPolicyImpl
name|policy
init|=
name|setupPrincipalBasedAccessControl
argument_list|(
name|validPrincipal
argument_list|,
name|testContentJcrPath
argument_list|,
name|JCR_VERSION_MANAGEMENT
argument_list|)
decl_stmt|;
name|addPrincipalBasedEntry
argument_list|(
name|policy
argument_list|,
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|JCR_READ
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|testContentJcrPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePoliciesByPath
parameter_list|()
throws|throws
name|Exception
block|{
name|setupContentTrees
argument_list|(
name|TEST_OAK_PATH
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
name|policy
init|=
name|setupPrincipalBasedAccessControl
argument_list|(
name|validPrincipal
argument_list|,
name|testContentJcrPath
argument_list|,
name|JCR_REMOVE_CHILD_NODES
argument_list|)
decl_stmt|;
name|addPrincipalBasedEntry
argument_list|(
name|policy
argument_list|,
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|JCR_READ
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|testJcrPath
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|testContentJcrPath
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPolicyWithNonAceChild
parameter_list|()
throws|throws
name|Exception
block|{
name|setupContentTrees
argument_list|(
name|TEST_OAK_PATH
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
name|policy
init|=
name|setupPrincipalBasedAccessControl
argument_list|(
name|validPrincipal
argument_list|,
name|testContentJcrPath
argument_list|,
name|JCR_RETENTION_MANAGEMENT
argument_list|)
decl_stmt|;
name|addPrincipalBasedEntry
argument_list|(
name|policy
argument_list|,
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|JCR_READ
argument_list|)
expr_stmt|;
name|Tree
name|policyTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|getNamePathMapper
argument_list|()
operator|.
name|getOakPath
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getChild
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|)
decl_stmt|;
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|policyTree
argument_list|,
literal|"nonAceChild"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
comment|// don't commit as adding such child without extra mixins was invalid
comment|// read policy again -> must only contain 2 entries and ignore the invalid child
name|policy
operator|=
operator|(
name|PrincipalPolicyImpl
operator|)
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|validPrincipal
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|policy
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPolicyMissingMixinType
parameter_list|()
throws|throws
name|Exception
block|{
name|setupContentTrees
argument_list|(
name|TEST_OAK_PATH
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
name|policy
init|=
name|setupPrincipalBasedAccessControl
argument_list|(
name|validPrincipal
argument_list|,
name|testContentJcrPath
argument_list|,
name|JCR_LOCK_MANAGEMENT
argument_list|)
decl_stmt|;
name|addPrincipalBasedEntry
argument_list|(
name|policy
argument_list|,
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|JCR_READ
argument_list|)
expr_stmt|;
name|Tree
name|policyTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|getNamePathMapper
argument_list|()
operator|.
name|getOakPath
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|policyTree
operator|.
name|removeProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|)
expr_stmt|;
comment|// don't commit as access controlled node without mixin is invalid
comment|// read policy again -> princial policy must not be read due to missing mixin
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|validPrincipal
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegesByPrincipals
parameter_list|()
throws|throws
name|Exception
block|{
name|setupContentTrees
argument_list|(
name|TEST_OAK_PATH
argument_list|)
expr_stmt|;
name|setupPrincipalBasedAccessControl
argument_list|(
name|validPrincipal
argument_list|,
name|testContentJcrPath
argument_list|,
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|)
expr_stmt|;
comment|// setup default ac mgt only on subtree (testJcrPath)
name|addDefaultEntry
argument_list|(
name|testJcrPath
argument_list|,
name|validPrincipal
argument_list|,
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// priv is only granted where both models are granting.
name|assertFalse
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|testContentJcrPath
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|validPrincipal
argument_list|)
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|testJcrPath
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|validPrincipal
argument_list|)
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// set of principals not supported by principalbased-authorization => only default impl takes effect.
name|assertFalse
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|testContentJcrPath
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|validPrincipal
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|testJcrPath
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|validPrincipal
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesByPrincipals
parameter_list|()
throws|throws
name|Exception
block|{
name|setupContentTrees
argument_list|(
name|TEST_OAK_PATH
argument_list|)
expr_stmt|;
name|setupPrincipalBasedAccessControl
argument_list|(
name|validPrincipal
argument_list|,
name|testContentJcrPath
argument_list|,
name|JCR_ADD_CHILD_NODES
argument_list|,
name|JCR_REMOVE_CHILD_NODES
argument_list|,
name|JCR_REMOVE_NODE
argument_list|)
expr_stmt|;
comment|// grant different set of privs using the default ac mgt
name|addDefaultEntry
argument_list|(
name|testContentJcrPath
argument_list|,
name|validPrincipal
argument_list|,
name|JCR_READ
argument_list|,
name|JCR_REMOVE_NODE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// only subset is is granted
name|assertPrivileges
argument_list|(
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|testContentJcrPath
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|validPrincipal
argument_list|)
argument_list|)
argument_list|,
name|JCR_REMOVE_NODE
argument_list|)
expr_stmt|;
name|assertPrivileges
argument_list|(
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|testJcrPath
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|validPrincipal
argument_list|)
argument_list|)
argument_list|,
name|JCR_REMOVE_NODE
argument_list|)
expr_stmt|;
comment|// set of principals not supported by principalbased-authorization => only default impl takes effect.
name|assertPrivileges
argument_list|(
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|testContentJcrPath
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|validPrincipal
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|JCR_READ
argument_list|,
name|JCR_REMOVE_NODE
argument_list|)
expr_stmt|;
name|assertPrivileges
argument_list|(
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|testJcrPath
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|validPrincipal
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|JCR_READ
argument_list|,
name|JCR_REMOVE_NODE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertPrivileges
parameter_list|(
annotation|@
name|NotNull
name|Privilege
index|[]
name|privs
parameter_list|,
annotation|@
name|NotNull
name|String
modifier|...
name|expectedOakPrivNames
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|privilegesFromNames
argument_list|(
name|expectedOakPrivNames
argument_list|)
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|privs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

