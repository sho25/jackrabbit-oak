begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * A pseudo-random stream.  */
end_comment

begin_class
specifier|public
class|class
name|RandomStream
extends|extends
name|InputStream
block|{
specifier|private
name|long
name|pos
decl_stmt|,
name|size
decl_stmt|;
specifier|private
name|Random
name|random
decl_stmt|;
name|RandomStream
parameter_list|(
name|long
name|size
parameter_list|,
name|int
name|seed
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|random
operator|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
name|int
name|len
init|=
name|read
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
name|len
operator|<=
literal|0
condition|?
name|len
else|:
name|data
index|[
literal|0
index|]
operator|&
literal|255
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|>=
name|size
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|len
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|size
operator|-
name|pos
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|off
operator|+
name|len
decl_stmt|;
while|while
condition|(
name|off
operator|<
name|end
condition|)
block|{
name|int
name|r
init|=
name|random
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|r
operator|^
operator|(
name|r
operator|>>>
literal|16
operator|)
argument_list|)
expr_stmt|;
block|}
name|pos
operator|+=
name|len
expr_stmt|;
return|return
name|len
return|;
block|}
block|}
end_class

end_unit

