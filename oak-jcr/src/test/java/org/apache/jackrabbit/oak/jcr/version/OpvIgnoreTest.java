begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|version
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeDefinitionTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinitionTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|OnParentVersionAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test OPV IGNORE  */
end_comment

begin_class
specifier|public
class|class
name|OpvIgnoreTest
extends|extends
name|AbstractJCRTest
block|{
specifier|private
name|VersionManager
name|versionManager
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|// add child nodes that have OPV COPY and thus end up in the frozen node
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|versionManager
operator|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|addIgnoredChild
parameter_list|(
annotation|@
name|Nonnull
name|Node
name|node
parameter_list|)
throws|throws
name|Exception
block|{
name|AccessControlManager
name|acMgr
init|=
name|superuser
operator|.
name|getAccessControlManager
argument_list|()
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Node
name|c
init|=
name|node
operator|.
name|getNode
argument_list|(
name|AccessControlConstants
operator|.
name|REP_POLICY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|OnParentVersionAction
operator|.
name|IGNORE
argument_list|,
name|c
operator|.
name|getDefinition
argument_list|()
operator|.
name|getOnParentVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDirectChild
parameter_list|()
throws|throws
name|Exception
block|{
name|addIgnoredChild
argument_list|(
name|testRootNode
argument_list|)
expr_stmt|;
name|testRootNode
operator|.
name|addMixin
argument_list|(
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// enforce the creation of the version (and the frozen node)
name|Version
name|version
init|=
name|versionManager
operator|.
name|checkpoint
argument_list|(
name|testRoot
argument_list|)
decl_stmt|;
name|Node
name|frozen
init|=
name|version
operator|.
name|getFrozenNode
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|frozen
operator|.
name|hasNode
argument_list|(
name|nodeName1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|frozen
operator|.
name|getNode
argument_list|(
name|nodeName1
argument_list|)
operator|.
name|hasNode
argument_list|(
name|nodeName2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|frozen
operator|.
name|hasNode
argument_list|(
name|AccessControlConstants
operator|.
name|REP_POLICY
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testChildInSubTree
parameter_list|()
throws|throws
name|Exception
block|{
name|addIgnoredChild
argument_list|(
name|testRootNode
operator|.
name|getNode
argument_list|(
name|nodeName1
argument_list|)
argument_list|)
expr_stmt|;
name|testRootNode
operator|.
name|addMixin
argument_list|(
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// enforce the creation of the version (and the frozen node)
name|Version
name|version
init|=
name|versionManager
operator|.
name|checkpoint
argument_list|(
name|testRoot
argument_list|)
decl_stmt|;
name|Node
name|frozen
init|=
name|version
operator|.
name|getFrozenNode
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|frozen
operator|.
name|hasNode
argument_list|(
name|nodeName1
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|frozenChild
init|=
name|frozen
operator|.
name|getNode
argument_list|(
name|nodeName1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|frozenChild
operator|.
name|hasNode
argument_list|(
name|nodeName2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|frozenChild
operator|.
name|hasNode
argument_list|(
name|AccessControlConstants
operator|.
name|REP_POLICY
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//OAK-3328
specifier|public
name|void
name|testWritePropertyWithIgnoreOPVAfterCheckIn
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|ignoreTestNode
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"ignoreTestNode"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|String
name|ignoredPropertyName
init|=
literal|"ignoredProperty"
decl_stmt|;
name|NodeTypeTemplate
name|mixinWithIgnoreProperty
init|=
name|createNodeTypeWithIgnoreOPVProperty
argument_list|(
name|ignoredPropertyName
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|ignoreTestNode
operator|.
name|addNode
argument_list|(
literal|"testNode"
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|mixinWithIgnoreProperty
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|ignoredPropertyName
argument_list|,
literal|"initial value"
argument_list|)
expr_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|VersionManager
name|vMgr
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|isCheckedOut
argument_list|()
condition|)
block|{
name|vMgr
operator|.
name|checkout
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|vMgr
operator|.
name|checkin
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|ignoredPropertyName
argument_list|,
literal|"next value"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Property
name|ignoreProperty
init|=
name|node
operator|.
name|getProperty
argument_list|(
name|ignoredPropertyName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"next value"
argument_list|,
name|ignoreProperty
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//OAK-3328
specifier|public
name|void
name|testRemovePropertyWithIgnoreOPVAfterCheckIn
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|ignoreTestNode
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"ignoreTestNode"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|String
name|ignoredPropertyName
init|=
literal|"test:ignoredProperty"
decl_stmt|;
name|NodeTypeTemplate
name|mixinWithIgnoreProperty
init|=
name|createNodeTypeWithIgnoreOPVProperty
argument_list|(
name|ignoredPropertyName
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|ignoreTestNode
operator|.
name|addNode
argument_list|(
literal|"testNode"
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|mixinWithIgnoreProperty
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|ignoredPropertyName
argument_list|,
literal|"initial value"
argument_list|)
expr_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|VersionManager
name|vMgr
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|isCheckedOut
argument_list|()
condition|)
block|{
name|vMgr
operator|.
name|checkout
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|vMgr
operator|.
name|checkin
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|getProperty
argument_list|(
name|ignoredPropertyName
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|node
operator|.
name|hasProperty
argument_list|(
name|ignoredPropertyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//OAK-3328
specifier|public
name|void
name|testAddChildNodeWithIgnoreOPVAfterCheckIn
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|ignoreTestNode
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"ignoreTestNode"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|String
name|nodeTypeName
init|=
literal|"testOpvIgnore"
decl_stmt|;
name|NodeDefinitionTemplate
name|nodeDefinition
init|=
name|createNodeDefinitionWithIgnoreOPVNode
argument_list|(
name|nodeTypeName
argument_list|)
decl_stmt|;
name|ignoreTestNode
operator|.
name|addMixin
argument_list|(
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
argument_list|)
expr_stmt|;
name|ignoreTestNode
operator|.
name|addMixin
argument_list|(
name|nodeTypeName
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|VersionManager
name|vMgr
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ignoreTestNode
operator|.
name|isCheckedOut
argument_list|()
condition|)
block|{
name|vMgr
operator|.
name|checkout
argument_list|(
name|ignoreTestNode
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|vMgr
operator|.
name|checkin
argument_list|(
name|ignoreTestNode
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|expected
init|=
name|ignoreTestNode
operator|.
name|addNode
argument_list|(
name|nodeDefinition
operator|.
name|getName
argument_list|()
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Node
name|childNode
init|=
name|ignoreTestNode
operator|.
name|getNode
argument_list|(
name|nodeDefinition
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|isSame
argument_list|(
name|childNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//OAK-3328
specifier|public
name|void
name|testRemoveChildNodeWithIgnoreOPVAfterCheckIn
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|ignoreTestNode
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"ignoreTestNode"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|String
name|nodeTypeName
init|=
literal|"testOpvIgnore"
decl_stmt|;
name|NodeDefinitionTemplate
name|nodeDefinition
init|=
name|createNodeDefinitionWithIgnoreOPVNode
argument_list|(
name|nodeTypeName
argument_list|)
decl_stmt|;
name|ignoreTestNode
operator|.
name|addMixin
argument_list|(
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
argument_list|)
expr_stmt|;
name|ignoreTestNode
operator|.
name|addMixin
argument_list|(
name|nodeTypeName
argument_list|)
expr_stmt|;
name|Node
name|expected
init|=
name|ignoreTestNode
operator|.
name|addNode
argument_list|(
name|nodeDefinition
operator|.
name|getName
argument_list|()
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|VersionManager
name|vMgr
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ignoreTestNode
operator|.
name|isCheckedOut
argument_list|()
condition|)
block|{
name|vMgr
operator|.
name|checkout
argument_list|(
name|ignoreTestNode
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|vMgr
operator|.
name|checkin
argument_list|(
name|ignoreTestNode
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|child
init|=
name|ignoreTestNode
operator|.
name|getNode
argument_list|(
name|nodeDefinition
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|child
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|ignoreTestNode
operator|.
name|hasNode
argument_list|(
name|nodeDefinition
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//OAK-3328
specifier|public
name|void
name|testIsCheckedOutOPVIgnore
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|test
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"test"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|String
name|nodeTypeName
init|=
literal|"testOpvIgnore"
decl_stmt|;
name|NodeDefinitionTemplate
name|nodeDefinition
init|=
name|createNodeDefinitionWithIgnoreOPVNode
argument_list|(
name|nodeTypeName
argument_list|)
decl_stmt|;
name|test
operator|.
name|addMixin
argument_list|(
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
argument_list|)
expr_stmt|;
name|test
operator|.
name|addMixin
argument_list|(
name|nodeTypeName
argument_list|)
expr_stmt|;
name|Node
name|ignored
init|=
name|test
operator|.
name|addNode
argument_list|(
name|nodeDefinition
operator|.
name|getName
argument_list|()
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|VersionManager
name|vMgr
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
name|vMgr
operator|.
name|checkin
argument_list|(
name|test
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ignored
operator|.
name|isCheckedOut
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|vMgr
operator|.
name|isCheckedOut
argument_list|(
name|ignored
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|NodeTypeTemplate
name|createNodeTypeWithIgnoreOPVProperty
parameter_list|(
name|String
name|propertyName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|NodeTypeManager
name|manager
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|NodeTypeTemplate
name|nt
init|=
name|manager
operator|.
name|createNodeTypeTemplate
argument_list|()
decl_stmt|;
name|nt
operator|.
name|setName
argument_list|(
literal|"testType"
argument_list|)
expr_stmt|;
name|nt
operator|.
name|setMixin
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PropertyDefinitionTemplate
name|opt
init|=
name|manager
operator|.
name|createPropertyDefinitionTemplate
argument_list|()
decl_stmt|;
name|opt
operator|.
name|setMandatory
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|opt
operator|.
name|setName
argument_list|(
name|propertyName
argument_list|)
expr_stmt|;
name|opt
operator|.
name|setRequiredType
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|opt
operator|.
name|setOnParentVersion
argument_list|(
name|OnParentVersionAction
operator|.
name|IGNORE
argument_list|)
expr_stmt|;
name|List
name|pdt
init|=
name|nt
operator|.
name|getPropertyDefinitionTemplates
argument_list|()
decl_stmt|;
name|pdt
operator|.
name|add
argument_list|(
name|opt
argument_list|)
expr_stmt|;
name|manager
operator|.
name|registerNodeType
argument_list|(
name|nt
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|nt
return|;
block|}
specifier|private
name|NodeDefinitionTemplate
name|createNodeDefinitionWithIgnoreOPVNode
parameter_list|(
name|String
name|nodeTypeName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|NodeTypeManager
name|manager
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|NodeDefinitionTemplate
name|def
init|=
name|manager
operator|.
name|createNodeDefinitionTemplate
argument_list|()
decl_stmt|;
name|def
operator|.
name|setOnParentVersion
argument_list|(
name|OnParentVersionAction
operator|.
name|IGNORE
argument_list|)
expr_stmt|;
name|def
operator|.
name|setName
argument_list|(
literal|"child"
argument_list|)
expr_stmt|;
name|def
operator|.
name|setRequiredPrimaryTypeNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|JcrConstants
operator|.
name|NT_BASE
block|}
argument_list|)
expr_stmt|;
name|NodeTypeTemplate
name|tmpl
init|=
name|manager
operator|.
name|createNodeTypeTemplate
argument_list|()
decl_stmt|;
name|tmpl
operator|.
name|setName
argument_list|(
name|nodeTypeName
argument_list|)
expr_stmt|;
name|tmpl
operator|.
name|setMixin
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tmpl
operator|.
name|getNodeDefinitionTemplates
argument_list|()
operator|.
name|add
argument_list|(
name|def
argument_list|)
expr_stmt|;
name|manager
operator|.
name|registerNodeType
argument_list|(
name|tmpl
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|def
return|;
block|}
block|}
end_class

end_unit

