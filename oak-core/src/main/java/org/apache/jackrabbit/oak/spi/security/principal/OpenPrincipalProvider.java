begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|acl
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * OpenPrincipalProvider... TODO  */
end_comment

begin_class
specifier|public
class|class
name|OpenPrincipalProvider
implements|implements
name|PrincipalProvider
block|{
comment|//--------------------------------------------------< PrincipalProvider>---
annotation|@
name|Override
specifier|public
name|Principal
name|getPrincipal
parameter_list|(
specifier|final
name|String
name|principalName
parameter_list|)
block|{
return|return
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|principalName
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Group
argument_list|>
name|getGroupMembership
parameter_list|(
name|Principal
name|principal
parameter_list|)
block|{
return|return
name|Collections
operator|.
expr|<
name|Group
operator|>
name|singleton
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Principal
argument_list|>
name|getPrincipals
parameter_list|(
name|String
name|userID
parameter_list|)
block|{
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
operator|new
name|HashSet
argument_list|<
name|Principal
argument_list|>
argument_list|()
decl_stmt|;
name|Principal
name|p
init|=
name|getPrincipal
argument_list|(
name|userID
argument_list|)
decl_stmt|;
name|principals
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|principals
operator|.
name|addAll
argument_list|(
name|getGroupMembership
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: remove again (currently needed because LoginContextProviderImpl uses this dummy principal provider)
if|if
condition|(
literal|"admin"
operator|.
name|equals
argument_list|(
name|userID
argument_list|)
condition|)
block|{
name|principals
operator|.
name|add
argument_list|(
name|AdminPrincipal
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
return|return
name|principals
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Principal
argument_list|>
name|findPrincipals
parameter_list|(
name|String
name|nameHint
parameter_list|,
name|int
name|searchType
parameter_list|)
block|{
return|return
name|PrincipalIteratorAdapter
operator|.
name|EMPTY
return|;
block|}
block|}
end_class

end_unit

