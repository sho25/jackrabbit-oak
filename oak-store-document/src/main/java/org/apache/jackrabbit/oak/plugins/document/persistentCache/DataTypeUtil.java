begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NamePathRev
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|PathRev
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Revision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|RevisionVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|mvstore
operator|.
name|DataUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|mvstore
operator|.
name|WriteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|mvstore
operator|.
name|type
operator|.
name|StringDataType
import|;
end_import

begin_comment
comment|/**  * Utility class to write various types to a buffer and read it back again.  */
end_comment

begin_class
class|class
name|DataTypeUtil
block|{
specifier|static
name|void
name|booleanToBuffer
parameter_list|(
name|boolean
name|b
parameter_list|,
name|WriteBuffer
name|buffer
parameter_list|)
block|{
name|buffer
operator|.
name|put
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|b
condition|?
literal|1
else|:
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
name|boolean
name|booleanFromBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
return|return
name|buffer
operator|.
name|get
argument_list|()
operator|!=
literal|0
return|;
block|}
specifier|static
name|void
name|revisionVectorToBuffer
parameter_list|(
name|RevisionVector
name|rv
parameter_list|,
name|WriteBuffer
name|buffer
parameter_list|)
block|{
name|buffer
operator|.
name|putVarInt
argument_list|(
name|rv
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Revision
name|r
range|:
name|rv
control|)
block|{
name|buffer
operator|.
name|putLong
argument_list|(
name|r
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putVarInt
argument_list|(
name|r
operator|.
name|getCounter
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putVarInt
argument_list|(
name|r
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|booleanToBuffer
argument_list|(
name|r
operator|.
name|isBranch
argument_list|()
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|RevisionVector
name|revisionVectorFromBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
name|int
name|dim
init|=
name|DataUtils
operator|.
name|readVarInt
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Revision
argument_list|>
name|revisions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dim
condition|;
name|i
operator|++
control|)
block|{
name|revisions
operator|.
name|add
argument_list|(
operator|new
name|Revision
argument_list|(
name|buffer
operator|.
name|getLong
argument_list|()
argument_list|,
name|DataUtils
operator|.
name|readVarInt
argument_list|(
name|buffer
argument_list|)
argument_list|,
name|DataUtils
operator|.
name|readVarInt
argument_list|(
name|buffer
argument_list|)
argument_list|,
name|booleanFromBuffer
argument_list|(
name|buffer
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RevisionVector
argument_list|(
name|revisions
argument_list|)
return|;
block|}
specifier|static
name|void
name|pathToBuffer
parameter_list|(
name|Path
name|p
parameter_list|,
name|WriteBuffer
name|buffer
parameter_list|)
block|{
name|int
name|len
init|=
name|p
operator|.
name|getDepth
argument_list|()
operator|+
operator|(
name|p
operator|.
name|isAbsolute
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|buffer
operator|.
name|putVarInt
argument_list|(
name|len
argument_list|)
expr_stmt|;
comment|// write path elements backwards
while|while
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|StringDataType
operator|.
name|INSTANCE
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|=
name|p
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
name|Path
name|pathFromBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
name|int
name|numElements
init|=
name|DataUtils
operator|.
name|readVarInt
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|elements
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numElements
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numElements
condition|;
name|i
operator|++
control|)
block|{
name|elements
operator|.
name|add
argument_list|(
name|StringDataType
operator|.
name|INSTANCE
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// elements are written backwards
name|String
name|firstElement
init|=
name|elements
operator|.
name|get
argument_list|(
name|elements
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Path
name|p
decl_stmt|;
if|if
condition|(
name|firstElement
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|p
operator|=
name|Path
operator|.
name|ROOT
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
operator|new
name|Path
argument_list|(
name|firstElement
argument_list|)
expr_stmt|;
block|}
comment|// construct path with remaining elements
for|for
control|(
name|int
name|i
init|=
name|elements
operator|.
name|size
argument_list|()
operator|-
literal|2
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|p
operator|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|elements
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|p
return|;
block|}
specifier|static
name|void
name|pathRevToBuffer
parameter_list|(
name|PathRev
name|pr
parameter_list|,
name|WriteBuffer
name|buffer
parameter_list|)
block|{
name|pathToBuffer
argument_list|(
name|pr
operator|.
name|getPath
argument_list|()
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|revisionVectorToBuffer
argument_list|(
name|pr
operator|.
name|getRevision
argument_list|()
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
specifier|static
name|PathRev
name|pathRevFromBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
return|return
operator|new
name|PathRev
argument_list|(
name|pathFromBuffer
argument_list|(
name|buffer
argument_list|)
argument_list|,
name|revisionVectorFromBuffer
argument_list|(
name|buffer
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|void
name|namePathRevToBuffer
parameter_list|(
name|NamePathRev
name|pnr
parameter_list|,
name|WriteBuffer
name|buffer
parameter_list|)
block|{
name|StringDataType
operator|.
name|INSTANCE
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
name|pnr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|pathToBuffer
argument_list|(
name|pnr
operator|.
name|getPath
argument_list|()
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|revisionVectorToBuffer
argument_list|(
name|pnr
operator|.
name|getRevision
argument_list|()
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
specifier|static
name|NamePathRev
name|namePathRevFromBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
return|return
operator|new
name|NamePathRev
argument_list|(
name|StringDataType
operator|.
name|INSTANCE
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
argument_list|,
name|pathFromBuffer
argument_list|(
name|buffer
argument_list|)
argument_list|,
name|revisionVectorFromBuffer
argument_list|(
name|buffer
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|void
name|stateToBuffer
parameter_list|(
name|DocumentNodeState
name|state
parameter_list|,
name|WriteBuffer
name|buffer
parameter_list|)
block|{
name|pathToBuffer
argument_list|(
name|state
operator|.
name|getPath
argument_list|()
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|revisionVectorToBuffer
argument_list|(
name|state
operator|.
name|getRootRevision
argument_list|()
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|RevisionVector
name|lastRevision
init|=
name|state
operator|.
name|getLastRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastRevision
operator|==
literal|null
condition|)
block|{
name|lastRevision
operator|=
name|RevisionVector
operator|.
name|fromString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|revisionVectorToBuffer
argument_list|(
name|lastRevision
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putVarInt
argument_list|(
name|state
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|booleanToBuffer
argument_list|(
name|state
operator|.
name|hasNoChildren
argument_list|()
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
name|state
operator|.
name|getAllBundledProperties
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|putVarInt
argument_list|(
name|props
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|props
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|StringDataType
operator|.
name|INSTANCE
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|StringDataType
operator|.
name|INSTANCE
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|DocumentNodeState
name|stateFromBuffer
parameter_list|(
name|DocumentNodeStore
name|store
parameter_list|,
name|ByteBuffer
name|buffer
parameter_list|)
block|{
name|Path
name|p
init|=
name|pathFromBuffer
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|RevisionVector
name|rootRevision
init|=
name|revisionVectorFromBuffer
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|RevisionVector
name|lastRevision
init|=
name|revisionVectorFromBuffer
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastRevision
operator|.
name|getDimensions
argument_list|()
operator|==
literal|0
condition|)
block|{
name|lastRevision
operator|=
literal|null
expr_stmt|;
block|}
name|int
name|mem
init|=
name|DataUtils
operator|.
name|readVarInt
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|boolean
name|noChildren
init|=
name|booleanFromBuffer
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|int
name|numProps
init|=
name|DataUtils
operator|.
name|readVarInt
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|numProps
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numProps
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|StringDataType
operator|.
name|INSTANCE
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|StringDataType
operator|.
name|INSTANCE
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|store
operator|.
name|createPropertyState
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|DocumentNodeState
argument_list|(
name|store
argument_list|,
name|p
argument_list|,
name|rootRevision
argument_list|,
name|props
argument_list|,
operator|!
name|noChildren
argument_list|,
name|mem
argument_list|,
name|lastRevision
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
end_class

end_unit

