begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|filter
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|transform
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SAMENAMESIBLINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SYSTEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_NODE_TYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|REP_NAMED_CHILD_NODE_DEFINITIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|REP_RESIDUAL_CHILD_NODE_DEFINITIONS
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|TypePredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|DefaultEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_comment
comment|/**  * This editor check if same name sibling nodes are allowed under a given  * parent. If they are not, they will be renamed by replacing brackets with a  * underscore: {@code sns_name[3] -> sns_name_3_}.  */
end_comment

begin_class
specifier|public
class|class
name|SameNameSiblingsEditor
extends|extends
name|DefaultEditor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SameNameSiblingsEditor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|SNS_REGEX
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.+)\\[(\\d+)\\]$"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|NodeState
argument_list|>
name|NO_SNS_PROPERTY
init|=
operator|new
name|Predicate
argument_list|<
name|NodeState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeState
name|input
parameter_list|)
block|{
return|return
operator|!
name|input
operator|.
name|getBoolean
argument_list|(
name|JCR_SAMENAMESIBLINGS
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/**      * List of node type definitions that doesn't allow to have SNS children.      */
specifier|private
specifier|final
name|List
argument_list|<
name|ChildTypeDef
argument_list|>
name|childrenDefsWithoutSns
decl_stmt|;
comment|/**      * Builder of the current node.      */
specifier|private
specifier|final
name|NodeBuilder
name|builder
decl_stmt|;
comment|/**      * Path to the current node.      */
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|public
specifier|static
class|class
name|Provider
implements|implements
name|EditorProvider
block|{
annotation|@
name|Override
specifier|public
name|Editor
name|getRootEditor
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
operator|new
name|SameNameSiblingsEditor
argument_list|(
name|builder
argument_list|)
return|;
block|}
block|}
specifier|public
name|SameNameSiblingsEditor
parameter_list|(
name|NodeBuilder
name|rootBuilder
parameter_list|)
block|{
name|this
operator|.
name|childrenDefsWithoutSns
operator|=
name|prepareChildDefsWithoutSns
argument_list|(
name|rootBuilder
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|builder
operator|=
name|rootBuilder
expr_stmt|;
name|this
operator|.
name|path
operator|=
literal|""
expr_stmt|;
block|}
specifier|public
name|SameNameSiblingsEditor
parameter_list|(
name|SameNameSiblingsEditor
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|childrenDefsWithoutSns
operator|=
name|parent
operator|.
name|childrenDefsWithoutSns
expr_stmt|;
name|this
operator|.
name|builder
operator|=
name|builder
expr_stmt|;
name|this
operator|.
name|path
operator|=
operator|new
name|StringBuilder
argument_list|(
name|parent
operator|.
name|path
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
operator|new
name|SameNameSiblingsEditor
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|builder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
operator|new
name|SameNameSiblingsEditor
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|builder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|leave
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|hasSameNamedChildren
argument_list|(
name|after
argument_list|)
condition|)
block|{
name|renameSameNamedChildren
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Prepare a list of node definitions that doesn't allow having SNS children.      *      * @param root Repository root      * @return a list of node definitions denying SNS children      */
specifier|private
specifier|static
name|List
argument_list|<
name|ChildTypeDef
argument_list|>
name|prepareChildDefsWithoutSns
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
name|List
argument_list|<
name|ChildTypeDef
argument_list|>
name|defs
init|=
operator|new
name|ArrayList
argument_list|<
name|ChildTypeDef
argument_list|>
argument_list|()
decl_stmt|;
name|NodeState
name|types
init|=
name|root
operator|.
name|getChildNode
argument_list|(
name|JCR_SYSTEM
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|JCR_NODE_TYPES
argument_list|)
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|typeEntry
range|:
name|types
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|NodeState
name|type
init|=
name|typeEntry
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|TypePredicate
name|typePredicate
init|=
operator|new
name|TypePredicate
argument_list|(
name|root
argument_list|,
name|typeEntry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|defs
operator|.
name|addAll
argument_list|(
name|parseResidualChildNodeDefs
argument_list|(
name|root
argument_list|,
name|type
argument_list|,
name|typePredicate
argument_list|)
argument_list|)
expr_stmt|;
name|defs
operator|.
name|addAll
argument_list|(
name|parseNamedChildNodeDefs
argument_list|(
name|root
argument_list|,
name|type
argument_list|,
name|typePredicate
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|defs
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|ChildTypeDef
argument_list|>
name|parseNamedChildNodeDefs
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|NodeState
name|parentType
parameter_list|,
name|TypePredicate
name|parentTypePredicate
parameter_list|)
block|{
name|List
argument_list|<
name|ChildTypeDef
argument_list|>
name|defs
init|=
operator|new
name|ArrayList
argument_list|<
name|ChildTypeDef
argument_list|>
argument_list|()
decl_stmt|;
name|NodeState
name|namedChildNodeDefinitions
init|=
name|parentType
operator|.
name|getChildNode
argument_list|(
name|REP_NAMED_CHILD_NODE_DEFINITIONS
argument_list|)
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|childName
range|:
name|namedChildNodeDefinitions
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|childType
range|:
name|filterChildren
argument_list|(
name|childName
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|NO_SNS_PROPERTY
argument_list|)
control|)
block|{
name|TypePredicate
name|childTypePredicate
init|=
operator|new
name|TypePredicate
argument_list|(
name|root
argument_list|,
name|childType
argument_list|)
decl_stmt|;
name|defs
operator|.
name|add
argument_list|(
operator|new
name|ChildTypeDef
argument_list|(
name|parentTypePredicate
argument_list|,
name|childName
operator|.
name|getName
argument_list|()
argument_list|,
name|childTypePredicate
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|defs
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|ChildTypeDef
argument_list|>
name|parseResidualChildNodeDefs
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|NodeState
name|parentType
parameter_list|,
name|TypePredicate
name|parentTypePredicate
parameter_list|)
block|{
name|List
argument_list|<
name|ChildTypeDef
argument_list|>
name|defs
init|=
operator|new
name|ArrayList
argument_list|<
name|ChildTypeDef
argument_list|>
argument_list|()
decl_stmt|;
name|NodeState
name|resChildNodeDefinitions
init|=
name|parentType
operator|.
name|getChildNode
argument_list|(
name|REP_RESIDUAL_CHILD_NODE_DEFINITIONS
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|childType
range|:
name|filterChildren
argument_list|(
name|resChildNodeDefinitions
argument_list|,
name|NO_SNS_PROPERTY
argument_list|)
control|)
block|{
name|TypePredicate
name|childTypePredicate
init|=
operator|new
name|TypePredicate
argument_list|(
name|root
argument_list|,
name|childType
argument_list|)
decl_stmt|;
name|defs
operator|.
name|add
argument_list|(
operator|new
name|ChildTypeDef
argument_list|(
name|parentTypePredicate
argument_list|,
name|childTypePredicate
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|defs
return|;
block|}
comment|/**      * Filter children of the given node using predicate and return the list of matching child names.      *      * @param parent      * @param predicate      * @return a list of names of children accepting the predicate      */
specifier|private
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|filterChildren
parameter_list|(
name|NodeState
name|parent
parameter_list|,
specifier|final
name|Predicate
argument_list|<
name|NodeState
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|transform
argument_list|(
name|filter
argument_list|(
name|parent
operator|.
name|getChildNodeEntries
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|ChildNodeEntry
name|input
parameter_list|)
block|{
return|return
name|predicate
operator|.
name|apply
argument_list|(
name|input
operator|.
name|getNodeState
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|,
operator|new
name|Function
argument_list|<
name|ChildNodeEntry
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|ChildNodeEntry
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * Check if there are SNS nodes under the given parent.      *      * @param parent      * @return {@code true} if there are SNS children      */
specifier|private
name|boolean
name|hasSameNamedChildren
parameter_list|(
name|NodeState
name|parent
parameter_list|)
block|{
for|for
control|(
name|String
name|name
range|:
name|parent
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
if|if
condition|(
name|SNS_REGEX
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Rename all SNS children which are not allowed under the given parent.      */
specifier|private
name|void
name|renameSameNamedChildren
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|)
block|{
name|NodeState
name|parentNode
init|=
name|parent
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|toBeRenamed
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|parent
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
name|Matcher
name|m
init|=
name|SNS_REGEX
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|isSnsAllowedForChild
argument_list|(
name|parentNode
argument_list|,
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|prefix
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|index
init|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|toBeRenamed
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|createNewName
argument_list|(
name|parentNode
argument_list|,
name|prefix
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|toBeRenamed
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Renaming SNS {}/{} to {}"
argument_list|,
name|path
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|getChildNode
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|moveTo
argument_list|(
name|parent
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Check if SNS with given name is allowed under the given parent using the {@link #childrenDefsWithoutSns} list.      */
specifier|private
name|boolean
name|isSnsAllowedForChild
parameter_list|(
name|NodeState
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|ChildTypeDef
name|snsDef
range|:
name|childrenDefsWithoutSns
control|)
block|{
if|if
condition|(
name|snsDef
operator|.
name|applies
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Create new name for the conflicting SNS node. This method makes sure that      * no node with this name already exists.      *      * @param prefix prefix of the new name, eg.<b>my_name</b>[3]      * @param index SNS index, eg. my_name[<b>3</b>]      * @param parent of the SNS node      * @return new and unused name for the node      */
specifier|private
name|String
name|createNewName
parameter_list|(
name|NodeState
name|parent
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|index
parameter_list|)
block|{
name|String
name|newName
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
do|do
block|{
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
name|newName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"%s_%s_"
argument_list|,
name|prefix
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"%s_%s_%d"
argument_list|,
name|prefix
argument_list|,
name|index
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|parent
operator|.
name|getChildNode
argument_list|(
name|newName
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
do|;
return|return
name|newName
return|;
block|}
comment|/**      * Definition of a children type. It contains the parent type, the child      * type and an optional child name.      */
specifier|private
specifier|static
class|class
name|ChildTypeDef
block|{
specifier|private
specifier|final
name|TypePredicate
name|parentType
decl_stmt|;
specifier|private
specifier|final
name|String
name|childNameConstraint
decl_stmt|;
specifier|private
specifier|final
name|TypePredicate
name|childType
decl_stmt|;
specifier|public
name|ChildTypeDef
parameter_list|(
name|TypePredicate
name|parentType
parameter_list|,
name|String
name|childName
parameter_list|,
name|TypePredicate
name|childType
parameter_list|)
block|{
name|this
operator|.
name|parentType
operator|=
name|parentType
expr_stmt|;
name|this
operator|.
name|childNameConstraint
operator|=
name|childName
expr_stmt|;
name|this
operator|.
name|childType
operator|=
name|childType
expr_stmt|;
block|}
specifier|public
name|ChildTypeDef
parameter_list|(
name|TypePredicate
name|parentType
parameter_list|,
name|TypePredicate
name|childType
parameter_list|)
block|{
name|this
argument_list|(
name|parentType
argument_list|,
literal|null
argument_list|,
name|childType
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|applies
parameter_list|(
name|NodeState
name|parent
parameter_list|,
name|String
name|childName
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|true
decl_stmt|;
name|result
operator|&=
name|parentType
operator|.
name|apply
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|result
operator|&=
name|childNameConstraint
operator|==
literal|null
operator|||
name|childName
operator|.
name|startsWith
argument_list|(
name|this
operator|.
name|childNameConstraint
operator|+
literal|'['
argument_list|)
expr_stmt|;
name|result
operator|&=
name|childType
operator|.
name|apply
argument_list|(
name|parent
operator|.
name|getChildNode
argument_list|(
name|childName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
name|parentType
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"> "
argument_list|)
expr_stmt|;
if|if
condition|(
name|childNameConstraint
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|append
argument_list|(
name|childNameConstraint
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
name|childType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

