begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|io
operator|.
name|File
operator|.
name|createTempFile
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentGraph
operator|.
name|createRegExpFilter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentGraph
operator|.
name|parseSegmentGraph
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipInputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multiset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentGraph
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
operator|.
name|ReadOnlyStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|SegmentGraphTest
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|UUID
argument_list|>
name|segments
init|=
name|newHashSet
argument_list|(
name|UUID
operator|.
name|fromString
argument_list|(
literal|"5be0c2ea-b6ba-4f80-acad-657a20f920b6"
argument_list|)
argument_list|,
name|UUID
operator|.
name|fromString
argument_list|(
literal|"fdaca71e-f71e-4f19-abf5-144e8c85f9e3"
argument_list|)
argument_list|,
name|UUID
operator|.
name|fromString
argument_list|(
literal|"53be3b93-87fa-487f-a2fc-7c17e639c231"
argument_list|)
argument_list|,
name|UUID
operator|.
name|fromString
argument_list|(
literal|"2eae0bc2-d3dd-4ba4-a765-70c38073437d"
argument_list|)
argument_list|,
name|UUID
operator|.
name|fromString
argument_list|(
literal|"ab61b8c9-222c-4119-a73b-5f61c0bc4741"
argument_list|)
argument_list|,
name|UUID
operator|.
name|fromString
argument_list|(
literal|"38c42dde-5928-4cc3-a483-37185d6971e4"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|UUID
argument_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|references
init|=
name|ImmutableMap
operator|.
expr|<
name|UUID
decl_stmt|,
name|Set
argument_list|<
name|UUID
argument_list|>
decl|>
name|of
argument_list|(
name|UUID
operator|.
name|fromString
argument_list|(
literal|"5be0c2ea-b6ba-4f80-acad-657a20f920b6"
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|UUID
operator|.
name|fromString
argument_list|(
literal|"2eae0bc2-d3dd-4ba4-a765-70c38073437d"
argument_list|)
argument_list|)
argument_list|,
name|UUID
operator|.
name|fromString
argument_list|(
literal|"fdaca71e-f71e-4f19-abf5-144e8c85f9e3"
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|UUID
operator|.
name|fromString
argument_list|(
literal|"ab61b8c9-222c-4119-a73b-5f61c0bc4741"
argument_list|)
argument_list|)
argument_list|,
name|UUID
operator|.
name|fromString
argument_list|(
literal|"2eae0bc2-d3dd-4ba4-a765-70c38073437d"
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|UUID
operator|.
name|fromString
argument_list|(
literal|"2fdaca71e-f71e-4f19-abf5-144e8c85f9e3"
argument_list|)
argument_list|,
name|UUID
operator|.
name|fromString
argument_list|(
literal|"ab61b8c9-222c-4119-a73b-5f61c0bc4741"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|UUID
argument_list|>
name|filteredSegments
init|=
name|newHashSet
argument_list|(
name|UUID
operator|.
name|fromString
argument_list|(
literal|"fdaca71e-f71e-4f19-abf5-144e8c85f9e3"
argument_list|)
argument_list|,
name|UUID
operator|.
name|fromString
argument_list|(
literal|"2eae0bc2-d3dd-4ba4-a765-70c38073437d"
argument_list|)
argument_list|,
name|UUID
operator|.
name|fromString
argument_list|(
literal|"ab61b8c9-222c-4119-a73b-5f61c0bc4741"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|UUID
argument_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|filteredReferences
init|=
name|ImmutableMap
operator|.
expr|<
name|UUID
decl_stmt|,
name|Set
argument_list|<
name|UUID
argument_list|>
decl|>
name|of
argument_list|(
name|UUID
operator|.
name|fromString
argument_list|(
literal|"fdaca71e-f71e-4f19-abf5-144e8c85f9e3"
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|UUID
operator|.
name|fromString
argument_list|(
literal|"ab61b8c9-222c-4119-a73b-5f61c0bc4741"
argument_list|)
argument_list|)
argument_list|,
name|UUID
operator|.
name|fromString
argument_list|(
literal|"2eae0bc2-d3dd-4ba4-a765-70c38073437d"
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|UUID
operator|.
name|fromString
argument_list|(
literal|"2fdaca71e-f71e-4f19-abf5-144e8c85f9e3"
argument_list|)
argument_list|,
name|UUID
operator|.
name|fromString
argument_list|(
literal|"ab61b8c9-222c-4119-a73b-5f61c0bc4741"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|gcGenerations
init|=
name|newHashSet
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|gcReferences
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"0"
argument_list|,
name|singleton
argument_list|(
literal|"0"
argument_list|)
argument_list|,
literal|"1"
argument_list|,
name|singleton
argument_list|(
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|File
name|storeDir
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|storeDir
operator|=
name|createTempFile
argument_list|(
name|SegmentGraph
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|storeDir
operator|.
name|delete
argument_list|()
expr_stmt|;
name|storeDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|unzip
argument_list|(
name|SegmentGraphTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"file-store.zip"
argument_list|)
argument_list|,
name|storeDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|storeDir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSegmentGraph
parameter_list|()
throws|throws
name|IOException
block|{
name|ReadOnlyStore
name|store
init|=
operator|new
name|ReadOnlyStore
argument_list|(
name|storeDir
argument_list|)
decl_stmt|;
try|try
block|{
name|Graph
argument_list|<
name|UUID
argument_list|>
name|segmentGraph
init|=
name|parseSegmentGraph
argument_list|(
name|store
argument_list|,
name|Predicates
operator|.
expr|<
name|UUID
operator|>
name|alwaysTrue
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|segments
argument_list|,
name|newHashSet
argument_list|(
name|segmentGraph
operator|.
name|vertices
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|UUID
argument_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|map
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|UUID
argument_list|,
name|Multiset
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|entry
range|:
name|segmentGraph
operator|.
name|edges
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|elementSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|references
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSegmentGraphWithFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|ReadOnlyStore
name|store
init|=
operator|new
name|ReadOnlyStore
argument_list|(
name|storeDir
argument_list|)
decl_stmt|;
try|try
block|{
name|Predicate
argument_list|<
name|UUID
argument_list|>
name|filter
init|=
name|createRegExpFilter
argument_list|(
literal|".*testWriter.*"
argument_list|,
name|store
operator|.
name|getTracker
argument_list|()
argument_list|)
decl_stmt|;
name|Graph
argument_list|<
name|UUID
argument_list|>
name|segmentGraph
init|=
name|parseSegmentGraph
argument_list|(
name|store
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|filteredSegments
argument_list|,
name|newHashSet
argument_list|(
name|segmentGraph
operator|.
name|vertices
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|UUID
argument_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|map
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|UUID
argument_list|,
name|Multiset
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|entry
range|:
name|segmentGraph
operator|.
name|edges
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|elementSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|filteredReferences
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGCGraph
parameter_list|()
throws|throws
name|IOException
block|{
name|ReadOnlyStore
name|store
init|=
operator|new
name|ReadOnlyStore
argument_list|(
name|storeDir
argument_list|)
decl_stmt|;
try|try
block|{
name|Graph
argument_list|<
name|String
argument_list|>
name|gcGraph
init|=
name|SegmentGraph
operator|.
name|parseGCGraph
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|gcGenerations
argument_list|,
name|newHashSet
argument_list|(
name|gcGraph
operator|.
name|vertices
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Multiset
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|gcGraph
operator|.
name|edges
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|elementSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|gcReferences
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|unzip
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|File
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|ZipInputStream
name|zis
init|=
operator|new
name|ZipInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|ZipEntry
name|entry
init|=
name|zis
operator|.
name|getNextEntry
argument_list|()
init|;
name|entry
operator|!=
literal|null
condition|;
name|entry
operator|=
name|zis
operator|.
name|getNextEntry
argument_list|()
control|)
block|{
name|OutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|target
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|zis
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|zis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

