begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBDocumentStore
operator|.
name|CHAR2OCTETRATIO
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBDocumentStore
operator|.
name|asBytes
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBJDBCTools
operator|.
name|closeResultSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBJDBCTools
operator|.
name|closeStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateOp
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateOp
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBDocumentStore
operator|.
name|QueryCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBDocumentStore
operator|.
name|RDBTableMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBDocumentStoreDB
operator|.
name|FETCHFIRSTSYNTAX
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBJDBCTools
operator|.
name|PreparedStatementComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Implements (most) DB interactions used in {@link RDBDocumentStore}.  */
end_comment

begin_class
specifier|public
class|class
name|RDBDocumentStoreJDBC
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RDBDocumentStoreJDBC
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLLISIONSMODCOUNT
init|=
name|RDBDocumentStore
operator|.
name|COLLISIONSMODCOUNT
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MODCOUNT
init|=
name|NodeDocument
operator|.
name|MOD_COUNT
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MODIFIED
init|=
name|NodeDocument
operator|.
name|MODIFIED_IN_SECS
decl_stmt|;
specifier|private
specifier|final
name|RDBDocumentStoreDB
name|dbInfo
decl_stmt|;
specifier|private
specifier|final
name|RDBDocumentSerializer
name|ser
decl_stmt|;
specifier|private
specifier|final
name|int
name|queryHitsLimit
decl_stmt|,
name|queryTimeLimit
decl_stmt|;
specifier|public
name|RDBDocumentStoreJDBC
parameter_list|(
name|RDBDocumentStoreDB
name|dbInfo
parameter_list|,
name|RDBDocumentSerializer
name|ser
parameter_list|,
name|int
name|queryHitsLimit
parameter_list|,
name|int
name|queryTimeLimit
parameter_list|)
block|{
name|this
operator|.
name|dbInfo
operator|=
name|dbInfo
expr_stmt|;
name|this
operator|.
name|ser
operator|=
name|ser
expr_stmt|;
name|this
operator|.
name|queryHitsLimit
operator|=
name|queryHitsLimit
expr_stmt|;
name|this
operator|.
name|queryTimeLimit
operator|=
name|queryTimeLimit
expr_stmt|;
block|}
specifier|public
name|boolean
name|appendingUpdate
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|RDBTableMetaData
name|tmd
parameter_list|,
name|String
name|id
parameter_list|,
name|Long
name|modified
parameter_list|,
name|boolean
name|setModifiedConditionally
parameter_list|,
name|Boolean
name|hasBinary
parameter_list|,
name|Boolean
name|deletedOnce
parameter_list|,
name|Long
name|modcount
parameter_list|,
name|Long
name|cmodcount
parameter_list|,
name|Long
name|oldmodcount
parameter_list|,
name|String
name|appendData
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|appendDataWithComma
init|=
literal|","
operator|+
name|appendData
decl_stmt|;
name|PreparedStatementComponent
name|stringAppend
init|=
name|this
operator|.
name|dbInfo
operator|.
name|getConcatQuery
argument_list|(
name|appendDataWithComma
argument_list|,
name|tmd
operator|.
name|getDataLimitInOctets
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|t
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|t
operator|.
name|append
argument_list|(
literal|"update "
operator|+
name|tmd
operator|.
name|getName
argument_list|()
operator|+
literal|" set "
argument_list|)
expr_stmt|;
name|t
operator|.
name|append
argument_list|(
name|setModifiedConditionally
condition|?
literal|"MODIFIED = case when ?> MODIFIED then ? else MODIFIED end, "
else|:
literal|"MODIFIED = ?, "
argument_list|)
expr_stmt|;
name|t
operator|.
name|append
argument_list|(
literal|"HASBINARY = ?, DELETEDONCE = ?, MODCOUNT = ?, CMODCOUNT = ?, DSIZE = DSIZE + ?, "
argument_list|)
expr_stmt|;
name|t
operator|.
name|append
argument_list|(
literal|"DATA = "
operator|+
name|stringAppend
operator|.
name|getStatementComponent
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|t
operator|.
name|append
argument_list|(
literal|"where ID = ?"
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldmodcount
operator|!=
literal|null
condition|)
block|{
name|t
operator|.
name|append
argument_list|(
literal|" and MODCOUNT = ?"
argument_list|)
expr_stmt|;
block|}
name|PreparedStatement
name|stmt
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|t
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|si
init|=
literal|1
decl_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|modified
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
if|if
condition|(
name|setModifiedConditionally
condition|)
block|{
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|modified
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|hasBinary
condition|?
literal|1
else|:
literal|0
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|deletedOnce
condition|?
literal|1
else|:
literal|0
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|modcount
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|cmodcount
operator|==
literal|null
condition|?
name|Long
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
else|:
name|cmodcount
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|appendDataWithComma
operator|.
name|length
argument_list|()
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|si
operator|=
name|stringAppend
operator|.
name|setParameters
argument_list|(
name|stmt
argument_list|,
name|si
argument_list|)
expr_stmt|;
name|setIdInStatement
argument_list|(
name|tmd
argument_list|,
name|stmt
argument_list|,
name|si
operator|++
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldmodcount
operator|!=
literal|null
condition|)
block|{
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|oldmodcount
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
block|}
name|int
name|result
init|=
name|stmt
operator|.
name|executeUpdate
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|1
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DB append update failed for "
operator|+
name|tmd
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|id
operator|+
literal|" with oldmodcount="
operator|+
name|oldmodcount
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|==
literal|1
return|;
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|batchedAppendingUpdate
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|RDBTableMetaData
name|tmd
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|,
name|Long
name|modified
parameter_list|,
name|boolean
name|setModifiedConditionally
parameter_list|,
name|String
name|appendData
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|appendDataWithComma
init|=
literal|","
operator|+
name|appendData
decl_stmt|;
name|PreparedStatementComponent
name|stringAppend
init|=
name|this
operator|.
name|dbInfo
operator|.
name|getConcatQuery
argument_list|(
name|appendDataWithComma
argument_list|,
name|tmd
operator|.
name|getDataLimitInOctets
argument_list|()
argument_list|)
decl_stmt|;
name|PreparedStatementComponent
name|inClause
init|=
name|RDBJDBCTools
operator|.
name|createInStatement
argument_list|(
literal|"ID"
argument_list|,
name|ids
argument_list|,
name|tmd
operator|.
name|isIdBinary
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|t
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|t
operator|.
name|append
argument_list|(
literal|"update "
operator|+
name|tmd
operator|.
name|getName
argument_list|()
operator|+
literal|" set "
argument_list|)
expr_stmt|;
name|t
operator|.
name|append
argument_list|(
name|setModifiedConditionally
condition|?
literal|"MODIFIED = case when ?> MODIFIED then ? else MODIFIED end, "
else|:
literal|"MODIFIED = ?, "
argument_list|)
expr_stmt|;
name|t
operator|.
name|append
argument_list|(
literal|"MODCOUNT = MODCOUNT + 1, DSIZE = DSIZE + ?, "
argument_list|)
expr_stmt|;
name|t
operator|.
name|append
argument_list|(
literal|"DATA = "
operator|+
name|stringAppend
operator|.
name|getStatementComponent
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|t
operator|.
name|append
argument_list|(
literal|"where "
argument_list|)
operator|.
name|append
argument_list|(
name|inClause
operator|.
name|getStatementComponent
argument_list|()
argument_list|)
expr_stmt|;
name|PreparedStatement
name|stmt
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|t
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|si
init|=
literal|1
decl_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|modified
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
if|if
condition|(
name|setModifiedConditionally
condition|)
block|{
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|modified
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|appendDataWithComma
operator|.
name|length
argument_list|()
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|si
operator|=
name|stringAppend
operator|.
name|setParameters
argument_list|(
name|stmt
argument_list|,
name|si
argument_list|)
expr_stmt|;
name|si
operator|=
name|inClause
operator|.
name|setParameters
argument_list|(
name|stmt
argument_list|,
name|si
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|stmt
operator|.
name|executeUpdate
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|ids
operator|.
name|size
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DB update failed: only "
operator|+
name|result
operator|+
literal|" of "
operator|+
name|ids
operator|.
name|size
argument_list|()
operator|+
literal|" updated. Table: "
operator|+
name|tmd
operator|.
name|getName
argument_list|()
operator|+
literal|", IDs:"
operator|+
name|ids
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|==
name|ids
operator|.
name|size
argument_list|()
return|;
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|delete
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|RDBTableMetaData
name|tmd
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|)
throws|throws
name|SQLException
block|{
name|PreparedStatement
name|stmt
decl_stmt|;
name|PreparedStatementComponent
name|inClause
init|=
name|RDBJDBCTools
operator|.
name|createInStatement
argument_list|(
literal|"ID"
argument_list|,
name|ids
argument_list|,
name|tmd
operator|.
name|isIdBinary
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
literal|"delete from "
operator|+
name|tmd
operator|.
name|getName
argument_list|()
operator|+
literal|" where "
operator|+
name|inClause
operator|.
name|getStatementComponent
argument_list|()
decl_stmt|;
name|stmt
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
expr_stmt|;
try|try
block|{
name|inClause
operator|.
name|setParameters
argument_list|(
name|stmt
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|stmt
operator|.
name|executeUpdate
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|ids
operator|.
name|size
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DB delete failed for "
operator|+
name|tmd
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|ids
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|delete
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|RDBTableMetaData
name|tmd
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Key
argument_list|,
name|Condition
argument_list|>
argument_list|>
name|toDelete
parameter_list|)
throws|throws
name|SQLException
throws|,
name|DocumentStoreException
block|{
name|String
name|or
init|=
literal|""
decl_stmt|;
name|StringBuilder
name|whereClause
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Key
argument_list|,
name|Condition
argument_list|>
argument_list|>
name|entry
range|:
name|toDelete
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|whereClause
operator|.
name|append
argument_list|(
name|or
argument_list|)
expr_stmt|;
name|or
operator|=
literal|" or "
expr_stmt|;
name|whereClause
operator|.
name|append
argument_list|(
literal|"ID=?"
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Key
argument_list|,
name|Condition
argument_list|>
name|c
range|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|MODIFIED
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"Unsupported condition: "
operator|+
name|c
argument_list|)
throw|;
block|}
name|whereClause
operator|.
name|append
argument_list|(
literal|" and MODIFIED"
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getValue
argument_list|()
operator|.
name|type
operator|==
name|Condition
operator|.
name|Type
operator|.
name|EQUALS
operator|&&
name|c
operator|.
name|getValue
argument_list|()
operator|.
name|value
operator|instanceof
name|Long
condition|)
block|{
name|whereClause
operator|.
name|append
argument_list|(
literal|"=?"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|getValue
argument_list|()
operator|.
name|type
operator|==
name|Condition
operator|.
name|Type
operator|.
name|EXISTS
condition|)
block|{
name|whereClause
operator|.
name|append
argument_list|(
literal|" is not null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"Unsupported condition: "
operator|+
name|c
argument_list|)
throw|;
block|}
block|}
block|}
name|PreparedStatement
name|stmt
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"delete from "
operator|+
name|tmd
operator|.
name|getName
argument_list|()
operator|+
literal|" where "
operator|+
name|whereClause
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|i
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Key
argument_list|,
name|Condition
argument_list|>
argument_list|>
name|entry
range|:
name|toDelete
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|setIdInStatement
argument_list|(
name|tmd
argument_list|,
name|stmt
argument_list|,
name|i
operator|++
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Key
argument_list|,
name|Condition
argument_list|>
name|c
range|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getValue
argument_list|()
operator|.
name|type
operator|==
name|Condition
operator|.
name|Type
operator|.
name|EQUALS
condition|)
block|{
name|stmt
operator|.
name|setLong
argument_list|(
name|i
operator|++
argument_list|,
operator|(
name|Long
operator|)
name|c
operator|.
name|getValue
argument_list|()
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|stmt
operator|.
name|executeUpdate
argument_list|()
return|;
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|determineServerTimeDifferenceMillis
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|RDBTableMetaData
name|tmd
parameter_list|)
block|{
name|PreparedStatement
name|stmt
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
name|long
name|result
decl_stmt|;
try|try
block|{
name|String
name|t
init|=
literal|"select "
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|dbInfo
operator|.
name|getFetchFirstSyntax
argument_list|()
operator|==
name|FETCHFIRSTSYNTAX
operator|.
name|TOP
condition|)
block|{
name|t
operator|+=
literal|"TOP 1 "
expr_stmt|;
block|}
name|t
operator|+=
name|this
operator|.
name|dbInfo
operator|.
name|getCurrentTimeStampInMsSyntax
argument_list|()
operator|+
literal|" from "
operator|+
name|tmd
operator|.
name|getName
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|this
operator|.
name|dbInfo
operator|.
name|getFetchFirstSyntax
argument_list|()
condition|)
block|{
case|case
name|LIMIT
case|:
name|t
operator|+=
literal|" LIMIT 1"
expr_stmt|;
break|break;
case|case
name|FETCHFIRST
case|:
name|t
operator|+=
literal|" FETCH FIRST 1 ROWS ONLY"
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|stmt
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|rs
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|long
name|roundtrip
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|long
name|serverTime
init|=
name|rs
operator|.
name|getTimestamp
argument_list|(
literal|1
argument_list|)
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|roundedTime
init|=
name|start
operator|+
name|roundtrip
operator|/
literal|2
decl_stmt|;
name|result
operator|=
name|roundedTime
operator|-
name|serverTime
expr_stmt|;
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"instance timestamp: %d, DB timestamp: %d, difference: %d"
argument_list|,
name|roundedTime
argument_list|,
name|serverTime
argument_list|,
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|result
argument_list|)
operator|>=
literal|2000
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"failed to determine server timestamp"
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Trying to determine time difference to server"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeResultSet
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|closeStatement
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|Set
argument_list|<
name|String
argument_list|>
name|insert
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|RDBTableMetaData
name|tmd
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|documents
parameter_list|)
throws|throws
name|SQLException
block|{
name|PreparedStatement
name|stmt
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"insert into "
operator|+
name|tmd
operator|.
name|getName
argument_list|()
operator|+
literal|"(ID, MODIFIED, HASBINARY, DELETEDONCE, MODCOUNT, CMODCOUNT, DSIZE, DATA, BDATA) "
operator|+
literal|"values (?, ?, ?, ?, ?, ?, ?, ?, ?)"
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|T
name|document
range|:
name|documents
control|)
block|{
name|String
name|data
init|=
name|this
operator|.
name|ser
operator|.
name|asString
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|document
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Number
name|hasBinary
init|=
operator|(
name|Number
operator|)
name|document
operator|.
name|get
argument_list|(
name|NodeDocument
operator|.
name|HAS_BINARY_FLAG
argument_list|)
decl_stmt|;
name|Boolean
name|deletedOnce
init|=
operator|(
name|Boolean
operator|)
name|document
operator|.
name|get
argument_list|(
name|NodeDocument
operator|.
name|DELETED_ONCE
argument_list|)
decl_stmt|;
name|Long
name|cmodcount
init|=
operator|(
name|Long
operator|)
name|document
operator|.
name|get
argument_list|(
name|COLLISIONSMODCOUNT
argument_list|)
decl_stmt|;
name|int
name|si
init|=
literal|1
decl_stmt|;
name|setIdInStatement
argument_list|(
name|tmd
argument_list|,
name|stmt
argument_list|,
name|si
operator|++
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|document
operator|.
name|get
argument_list|(
name|MODIFIED
argument_list|)
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
operator|(
name|hasBinary
operator|!=
literal|null
operator|&&
name|hasBinary
operator|.
name|intValue
argument_list|()
operator|==
name|NodeDocument
operator|.
name|HAS_BINARY_VAL
operator|)
condition|?
literal|1
else|:
literal|0
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
operator|(
name|deletedOnce
operator|!=
literal|null
operator|&&
name|deletedOnce
operator|)
condition|?
literal|1
else|:
literal|0
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|document
operator|.
name|get
argument_list|(
name|MODCOUNT
argument_list|)
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|cmodcount
operator|==
literal|null
condition|?
name|Long
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
else|:
name|cmodcount
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|data
operator|.
name|length
argument_list|()
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|length
argument_list|()
operator|<
name|tmd
operator|.
name|getDataLimitInOctets
argument_list|()
operator|/
name|CHAR2OCTETRATIO
condition|)
block|{
name|stmt
operator|.
name|setString
argument_list|(
name|si
operator|++
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setBinaryStream
argument_list|(
name|si
operator|++
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stmt
operator|.
name|setString
argument_list|(
name|si
operator|++
argument_list|,
literal|"\"blob\""
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|asBytes
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|stmt
operator|.
name|setBytes
argument_list|(
name|si
operator|++
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|.
name|addBatch
argument_list|()
expr_stmt|;
block|}
name|int
index|[]
name|results
init|=
name|stmt
operator|.
name|executeBatch
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|succesfullyInserted
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|documents
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|result
init|=
name|results
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|1
operator|&&
name|result
operator|!=
name|Statement
operator|.
name|SUCCESS_NO_INFO
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"DB insert failed for {}: {}"
argument_list|,
name|tmd
operator|.
name|getName
argument_list|()
argument_list|,
name|documents
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|succesfullyInserted
operator|.
name|add
argument_list|(
name|documents
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|succesfullyInserted
return|;
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Update a list of documents using JDBC batches. Some of the updates may fail because of the concurrent      * changes. The method returns a set of successfully updated documents. It's the caller responsibility      * to compare the set with the list of input documents, find out which documents conflicted and take      * appropriate action.      *<p>      * If the {@code upsert} parameter is set to true, the method will also try to insert new documents, those      * which modcount equals to 1.      *      * @param connection JDBC connection      * @param tmd Table metadata      * @param documents List of documents to update      * @param upsert Insert new documents      * @return set containing ids of successfully updated documents      * @throws SQLException      */
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|Set
argument_list|<
name|String
argument_list|>
name|update
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|RDBTableMetaData
name|tmd
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|documents
parameter_list|,
name|boolean
name|upsert
parameter_list|)
throws|throws
name|SQLException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|successfulUpdates
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|PreparedStatement
name|stmt
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"update "
operator|+
name|tmd
operator|.
name|getName
argument_list|()
operator|+
literal|" set MODIFIED = ?, HASBINARY = ?, DELETEDONCE = ?, MODCOUNT = ?, CMODCOUNT = ?, DSIZE = ?, DATA = ?, BDATA = ? where ID = ? and MODCOUNT = ?"
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|updatedKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|T
name|document
range|:
name|documents
control|)
block|{
name|Long
name|modcount
init|=
operator|(
name|Long
operator|)
name|document
operator|.
name|get
argument_list|(
name|MODCOUNT
argument_list|)
decl_stmt|;
if|if
condition|(
name|modcount
operator|==
literal|1
condition|)
block|{
continue|continue;
comment|// This is a new document. We'll deal with the inserts later.
block|}
name|String
name|data
init|=
name|this
operator|.
name|ser
operator|.
name|asString
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|Number
name|hasBinary
init|=
operator|(
name|Number
operator|)
name|document
operator|.
name|get
argument_list|(
name|NodeDocument
operator|.
name|HAS_BINARY_FLAG
argument_list|)
decl_stmt|;
name|Boolean
name|deletedOnce
init|=
operator|(
name|Boolean
operator|)
name|document
operator|.
name|get
argument_list|(
name|NodeDocument
operator|.
name|DELETED_ONCE
argument_list|)
decl_stmt|;
name|Long
name|cmodcount
init|=
operator|(
name|Long
operator|)
name|document
operator|.
name|get
argument_list|(
name|COLLISIONSMODCOUNT
argument_list|)
decl_stmt|;
name|int
name|si
init|=
literal|1
decl_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|document
operator|.
name|get
argument_list|(
name|MODIFIED
argument_list|)
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
operator|(
name|hasBinary
operator|!=
literal|null
operator|&&
name|hasBinary
operator|.
name|intValue
argument_list|()
operator|==
name|NodeDocument
operator|.
name|HAS_BINARY_VAL
operator|)
condition|?
literal|1
else|:
literal|0
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
operator|(
name|deletedOnce
operator|!=
literal|null
operator|&&
name|deletedOnce
operator|)
condition|?
literal|1
else|:
literal|0
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|modcount
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|cmodcount
operator|==
literal|null
condition|?
name|Long
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
else|:
name|cmodcount
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|data
operator|.
name|length
argument_list|()
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|length
argument_list|()
operator|<
name|tmd
operator|.
name|getDataLimitInOctets
argument_list|()
operator|/
name|CHAR2OCTETRATIO
condition|)
block|{
name|stmt
operator|.
name|setString
argument_list|(
name|si
operator|++
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setBinaryStream
argument_list|(
name|si
operator|++
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stmt
operator|.
name|setString
argument_list|(
name|si
operator|++
argument_list|,
literal|"\"blob\""
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|asBytes
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|stmt
operator|.
name|setBytes
argument_list|(
name|si
operator|++
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
name|setIdInStatement
argument_list|(
name|tmd
argument_list|,
name|stmt
argument_list|,
name|si
operator|++
argument_list|,
name|document
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|modcount
operator|-
literal|1
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|addBatch
argument_list|()
expr_stmt|;
name|updatedKeys
operator|.
name|add
argument_list|(
name|document
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
index|[]
name|batchResults
init|=
name|stmt
operator|.
name|executeBatch
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchResults
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|result
init|=
name|batchResults
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|1
operator|||
name|result
operator|==
name|Statement
operator|.
name|SUCCESS_NO_INFO
condition|)
block|{
name|successfulUpdates
operator|.
name|add
argument_list|(
name|updatedKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|upsert
condition|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|remainingDocuments
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
name|documents
operator|.
name|size
argument_list|()
operator|-
name|successfulUpdates
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|T
name|doc
range|:
name|documents
control|)
block|{
if|if
condition|(
operator|!
name|successfulUpdates
operator|.
name|contains
argument_list|(
name|doc
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|remainingDocuments
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|remainingDocuments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|remainingDocumentIds
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|remainingDocuments
argument_list|,
name|idExtractor
argument_list|)
decl_stmt|;
name|PreparedStatementComponent
name|inClause
init|=
name|RDBJDBCTools
operator|.
name|createInStatement
argument_list|(
literal|"ID"
argument_list|,
name|remainingDocumentIds
argument_list|,
name|tmd
operator|.
name|isIdBinary
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"select ID from "
argument_list|)
operator|.
name|append
argument_list|(
name|tmd
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|" where "
argument_list|)
operator|.
name|append
argument_list|(
name|inClause
operator|.
name|getStatementComponent
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|documentsWithUpdatedModcount
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|PreparedStatement
name|selectStmt
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|selectStmt
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|sql
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|selectStmt
operator|.
name|setPoolable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|inClause
operator|.
name|setParameters
argument_list|(
name|selectStmt
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rs
operator|=
name|selectStmt
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|documentsWithUpdatedModcount
operator|.
name|add
argument_list|(
name|getIdFromRS
argument_list|(
name|tmd
argument_list|,
name|rs
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|closeResultSet
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|closeStatement
argument_list|(
name|selectStmt
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|T
argument_list|>
name|it
init|=
name|remainingDocuments
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|documentsWithUpdatedModcount
operator|.
name|contains
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|remainingDocuments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|id
range|:
name|insert
argument_list|(
name|connection
argument_list|,
name|tmd
argument_list|,
name|remainingDocuments
argument_list|)
control|)
block|{
name|successfulUpdates
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|successfulUpdates
return|;
block|}
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|INDEXED_PROP_MAPPING
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tmp
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|tmp
operator|.
name|put
argument_list|(
name|MODIFIED
argument_list|,
literal|"MODIFIED"
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|put
argument_list|(
name|NodeDocument
operator|.
name|HAS_BINARY_FLAG
argument_list|,
literal|"HASBINARY"
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|put
argument_list|(
name|NodeDocument
operator|.
name|DELETED_ONCE
argument_list|,
literal|"DELETEDONCE"
argument_list|)
expr_stmt|;
name|INDEXED_PROP_MAPPING
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|SUPPORTED_OPS
decl_stmt|;
static|static
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|tmp
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|tmp
operator|.
name|add
argument_list|(
literal|">="
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|add
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|add
argument_list|(
literal|"<="
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|add
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|add
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|SUPPORTED_OPS
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
specifier|public
name|List
argument_list|<
name|RDBRow
argument_list|>
name|query
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|RDBTableMetaData
name|tmd
parameter_list|,
name|String
name|minId
parameter_list|,
name|String
name|maxId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|excludeKeyPatterns
parameter_list|,
name|List
argument_list|<
name|QueryCondition
argument_list|>
name|conditions
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|SQLException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|StringBuilder
name|selectClause
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|whereClause
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|limit
operator|!=
name|Integer
operator|.
name|MAX_VALUE
operator|&&
name|this
operator|.
name|dbInfo
operator|.
name|getFetchFirstSyntax
argument_list|()
operator|==
name|FETCHFIRSTSYNTAX
operator|.
name|TOP
condition|)
block|{
name|selectClause
operator|.
name|append
argument_list|(
literal|"TOP "
operator|+
name|limit
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
name|selectClause
operator|.
name|append
argument_list|(
literal|"ID, MODIFIED, MODCOUNT, CMODCOUNT, HASBINARY, DELETEDONCE, DATA, BDATA from "
argument_list|)
operator|.
name|append
argument_list|(
name|tmd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// dynamically build where clause
name|String
name|whereSep
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|minId
operator|!=
literal|null
condition|)
block|{
name|whereClause
operator|.
name|append
argument_list|(
literal|"ID> ?"
argument_list|)
expr_stmt|;
name|whereSep
operator|=
literal|" and "
expr_stmt|;
block|}
if|if
condition|(
name|maxId
operator|!=
literal|null
condition|)
block|{
name|whereClause
operator|.
name|append
argument_list|(
name|whereSep
argument_list|)
operator|.
name|append
argument_list|(
literal|"ID< ?"
argument_list|)
expr_stmt|;
name|whereSep
operator|=
literal|" and "
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|excludeKeyPatterns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|whereClause
operator|.
name|append
argument_list|(
name|whereSep
argument_list|)
expr_stmt|;
name|whereSep
operator|=
literal|" and "
expr_stmt|;
name|whereClause
operator|.
name|append
argument_list|(
literal|"not ("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|excludeKeyPatterns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|whereClause
operator|.
name|append
argument_list|(
name|i
operator|==
literal|0
condition|?
literal|""
else|:
literal|" or "
argument_list|)
expr_stmt|;
name|whereClause
operator|.
name|append
argument_list|(
literal|"ID like ?"
argument_list|)
expr_stmt|;
block|}
name|whereClause
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|QueryCondition
name|cond
range|:
name|conditions
control|)
block|{
name|String
name|op
init|=
name|cond
operator|.
name|getOperator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|SUPPORTED_OPS
operator|.
name|contains
argument_list|(
name|op
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"unsupported operator: "
operator|+
name|op
argument_list|)
throw|;
block|}
name|String
name|indexedProperty
init|=
name|cond
operator|.
name|getPropertyName
argument_list|()
decl_stmt|;
name|String
name|column
init|=
name|INDEXED_PROP_MAPPING
operator|.
name|get
argument_list|(
name|indexedProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|column
operator|!=
literal|null
condition|)
block|{
name|whereClause
operator|.
name|append
argument_list|(
name|whereSep
argument_list|)
operator|.
name|append
argument_list|(
name|column
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|op
argument_list|)
operator|.
name|append
argument_list|(
literal|" ?"
argument_list|)
expr_stmt|;
name|whereSep
operator|=
literal|" and "
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"unsupported indexed property: "
operator|+
name|indexedProperty
argument_list|)
throw|;
block|}
block|}
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"select "
argument_list|)
operator|.
name|append
argument_list|(
name|selectClause
argument_list|)
expr_stmt|;
if|if
condition|(
name|whereClause
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" where "
argument_list|)
operator|.
name|append
argument_list|(
name|whereClause
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
literal|" order by ID"
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|!=
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
switch|switch
condition|(
name|this
operator|.
name|dbInfo
operator|.
name|getFetchFirstSyntax
argument_list|()
condition|)
block|{
case|case
name|LIMIT
case|:
name|query
operator|.
name|append
argument_list|(
literal|" LIMIT "
operator|+
name|limit
argument_list|)
expr_stmt|;
break|break;
case|case
name|FETCHFIRST
case|:
name|query
operator|.
name|append
argument_list|(
literal|" FETCH FIRST "
operator|+
name|limit
operator|+
literal|" ROWS ONLY"
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
name|PreparedStatement
name|stmt
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RDBRow
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|RDBRow
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|dataTotal
init|=
literal|0
decl_stmt|,
name|bdataTotal
init|=
literal|0
decl_stmt|;
try|try
block|{
name|int
name|si
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|minId
operator|!=
literal|null
condition|)
block|{
name|setIdInStatement
argument_list|(
name|tmd
argument_list|,
name|stmt
argument_list|,
name|si
operator|++
argument_list|,
name|minId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxId
operator|!=
literal|null
condition|)
block|{
name|setIdInStatement
argument_list|(
name|tmd
argument_list|,
name|stmt
argument_list|,
name|si
operator|++
argument_list|,
name|maxId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|keyPattern
range|:
name|excludeKeyPatterns
control|)
block|{
name|setIdInStatement
argument_list|(
name|tmd
argument_list|,
name|stmt
argument_list|,
name|si
operator|++
argument_list|,
name|keyPattern
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|QueryCondition
name|cond
range|:
name|conditions
control|)
block|{
name|stmt
operator|.
name|setLong
argument_list|(
name|si
operator|++
argument_list|,
name|cond
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|limit
operator|!=
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|stmt
operator|.
name|setFetchSize
argument_list|(
name|limit
argument_list|)
expr_stmt|;
block|}
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
operator|&&
name|result
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
block|{
name|String
name|id
init|=
name|getIdFromRS
argument_list|(
name|tmd
argument_list|,
name|rs
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|minId
operator|!=
literal|null
operator|&&
name|id
operator|.
name|compareTo
argument_list|(
name|minId
argument_list|)
operator|<
literal|0
operator|)
operator|||
operator|(
name|maxId
operator|!=
literal|null
operator|&&
name|id
operator|.
name|compareTo
argument_list|(
name|maxId
argument_list|)
operator|>
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"unexpected query result: '"
operator|+
name|minId
operator|+
literal|"'< '"
operator|+
name|id
operator|+
literal|"'< '"
operator|+
name|maxId
operator|+
literal|"' - broken DB collation?"
argument_list|)
throw|;
block|}
name|long
name|modified
init|=
name|rs
operator|.
name|getLong
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|long
name|modcount
init|=
name|rs
operator|.
name|getLong
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|long
name|cmodcount
init|=
name|rs
operator|.
name|getLong
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|long
name|hasBinary
init|=
name|rs
operator|.
name|getLong
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|long
name|deletedOnce
init|=
name|rs
operator|.
name|getLong
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|String
name|data
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bdata
init|=
name|rs
operator|.
name|getBytes
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|RDBRow
argument_list|(
name|id
argument_list|,
name|hasBinary
operator|==
literal|1
argument_list|,
name|deletedOnce
operator|==
literal|1
argument_list|,
name|modified
argument_list|,
name|modcount
argument_list|,
name|cmodcount
argument_list|,
name|data
argument_list|,
name|bdata
argument_list|)
argument_list|)
expr_stmt|;
name|dataTotal
operator|+=
name|data
operator|.
name|length
argument_list|()
expr_stmt|;
name|bdataTotal
operator|+=
name|bdata
operator|==
literal|null
condition|?
literal|0
else|:
name|bdata
operator|.
name|length
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|long
name|elapsed
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|queryHitsLimit
operator|!=
literal|0
operator|&&
name|result
operator|.
name|size
argument_list|()
operator|>
name|this
operator|.
name|queryHitsLimit
condition|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Potentially excessive query with %d hits (limited to %d, configured QUERYHITSLIMIT %d), elapsed time %dms, params minid '%s' maxid '%s' excludeKeyPatterns %s condition %s limit %d. Check calling method."
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|limit
argument_list|,
name|this
operator|.
name|queryHitsLimit
argument_list|,
name|elapsed
argument_list|,
name|minId
argument_list|,
name|maxId
argument_list|,
name|excludeKeyPatterns
argument_list|,
name|conditions
argument_list|,
name|limit
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"call stack"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|queryTimeLimit
operator|!=
literal|0
operator|&&
name|elapsed
operator|>
name|this
operator|.
name|queryTimeLimit
condition|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Long running query with %d hits (limited to %d), elapsed time %dms (configured QUERYTIMELIMIT %d), params minid '%s' maxid '%s' excludeKeyPatterns %s conditions %s limit %d. Read %d chars from DATA and %d bytes from BDATA. Check calling method."
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|limit
argument_list|,
name|elapsed
argument_list|,
name|this
operator|.
name|queryTimeLimit
argument_list|,
name|minId
argument_list|,
name|maxId
argument_list|,
name|excludeKeyPatterns
argument_list|,
name|conditions
argument_list|,
name|limit
argument_list|,
name|dataTotal
argument_list|,
name|bdataTotal
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"call stack"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|List
argument_list|<
name|RDBRow
argument_list|>
name|read
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|RDBTableMetaData
name|tmd
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|keys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|PreparedStatementComponent
name|inClause
init|=
name|RDBJDBCTools
operator|.
name|createInStatement
argument_list|(
literal|"ID"
argument_list|,
name|keys
argument_list|,
name|tmd
operator|.
name|isIdBinary
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"select ID, MODIFIED, MODCOUNT, CMODCOUNT, HASBINARY, DELETEDONCE, DATA, BDATA from "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
name|tmd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" where "
argument_list|)
operator|.
name|append
argument_list|(
name|inClause
operator|.
name|getStatementComponent
argument_list|()
argument_list|)
expr_stmt|;
name|PreparedStatement
name|stmt
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|stmt
operator|.
name|setPoolable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|inClause
operator|.
name|setParameters
argument_list|(
name|stmt
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RDBRow
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|RDBRow
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|int
name|col
init|=
literal|1
decl_stmt|;
name|String
name|id
init|=
name|getIdFromRS
argument_list|(
name|tmd
argument_list|,
name|rs
argument_list|,
name|col
operator|++
argument_list|)
decl_stmt|;
name|long
name|modified
init|=
name|rs
operator|.
name|getLong
argument_list|(
name|col
operator|++
argument_list|)
decl_stmt|;
name|long
name|modcount
init|=
name|rs
operator|.
name|getLong
argument_list|(
name|col
operator|++
argument_list|)
decl_stmt|;
name|long
name|cmodcount
init|=
name|rs
operator|.
name|getLong
argument_list|(
name|col
operator|++
argument_list|)
decl_stmt|;
name|long
name|hasBinary
init|=
name|rs
operator|.
name|getLong
argument_list|(
name|col
operator|++
argument_list|)
decl_stmt|;
name|long
name|deletedOnce
init|=
name|rs
operator|.
name|getLong
argument_list|(
name|col
operator|++
argument_list|)
decl_stmt|;
name|String
name|data
init|=
name|rs
operator|.
name|getString
argument_list|(
name|col
operator|++
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bdata
init|=
name|rs
operator|.
name|getBytes
argument_list|(
name|col
operator|++
argument_list|)
decl_stmt|;
name|RDBRow
name|row
init|=
operator|new
name|RDBRow
argument_list|(
name|id
argument_list|,
name|hasBinary
operator|==
literal|1
argument_list|,
name|deletedOnce
operator|==
literal|1
argument_list|,
name|modified
argument_list|,
name|modcount
argument_list|,
name|cmodcount
argument_list|,
name|data
argument_list|,
name|bdata
argument_list|)
decl_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
return|return
name|rows
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"attempting to read "
operator|+
name|keys
argument_list|,
name|ex
argument_list|)
expr_stmt|;
comment|// DB2 throws an SQLException for invalid keys; handle this more
comment|// gracefully
if|if
condition|(
literal|"22001"
operator|.
name|equals
argument_list|(
name|ex
operator|.
name|getSQLState
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|connection
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex2
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"failed to rollback"
argument_list|,
name|ex2
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
else|else
block|{
throw|throw
operator|(
name|ex
operator|)
throw|;
block|}
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|CheckForNull
specifier|public
name|RDBRow
name|read
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|RDBTableMetaData
name|tmd
parameter_list|,
name|String
name|id
parameter_list|,
name|long
name|lastmodcount
parameter_list|)
throws|throws
name|SQLException
block|{
name|PreparedStatement
name|stmt
decl_stmt|;
name|boolean
name|useCaseStatement
init|=
name|lastmodcount
operator|!=
operator|-
literal|1
operator|&&
name|this
operator|.
name|dbInfo
operator|.
name|allowsCaseInSelect
argument_list|()
decl_stmt|;
if|if
condition|(
name|useCaseStatement
condition|)
block|{
comment|// the case statement causes the actual row data not to be
comment|// sent in case we already have it
name|stmt
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"select MODIFIED, MODCOUNT, CMODCOUNT, HASBINARY, DELETEDONCE, case MODCOUNT when ? then null else DATA end as DATA, "
operator|+
literal|"case MODCOUNT when ? then null else BDATA end as BDATA from "
operator|+
name|tmd
operator|.
name|getName
argument_list|()
operator|+
literal|" where ID = ?"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// either we don't have a previous version of the document
comment|// or the database does not support CASE in SELECT
name|stmt
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"select MODIFIED, MODCOUNT, CMODCOUNT, HASBINARY, DELETEDONCE, DATA, BDATA from "
operator|+
name|tmd
operator|.
name|getName
argument_list|()
operator|+
literal|" where ID = ?"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|int
name|si
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|useCaseStatement
condition|)
block|{
name|stmt
operator|.
name|setLong
argument_list|(
name|si
operator|++
argument_list|,
name|lastmodcount
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setLong
argument_list|(
name|si
operator|++
argument_list|,
name|lastmodcount
argument_list|)
expr_stmt|;
block|}
name|setIdInStatement
argument_list|(
name|tmd
argument_list|,
name|stmt
argument_list|,
name|si
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|long
name|modified
init|=
name|rs
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|long
name|modcount
init|=
name|rs
operator|.
name|getLong
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|long
name|cmodcount
init|=
name|rs
operator|.
name|getLong
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|long
name|hasBinary
init|=
name|rs
operator|.
name|getLong
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|long
name|deletedOnce
init|=
name|rs
operator|.
name|getLong
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|data
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bdata
init|=
name|rs
operator|.
name|getBytes
argument_list|(
literal|7
argument_list|)
decl_stmt|;
return|return
operator|new
name|RDBRow
argument_list|(
name|id
argument_list|,
name|hasBinary
operator|==
literal|1
argument_list|,
name|deletedOnce
operator|==
literal|1
argument_list|,
name|modified
argument_list|,
name|modcount
argument_list|,
name|cmodcount
argument_list|,
name|data
argument_list|,
name|bdata
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"attempting to read "
operator|+
name|id
operator|+
literal|" (id length is "
operator|+
name|id
operator|.
name|length
argument_list|()
operator|+
literal|")"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
comment|// DB2 throws an SQLException for invalid keys; handle this more
comment|// gracefully
if|if
condition|(
literal|"22001"
operator|.
name|equals
argument_list|(
name|ex
operator|.
name|getSQLState
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|connection
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex2
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"failed to rollback"
argument_list|,
name|ex2
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
else|else
block|{
throw|throw
operator|(
name|ex
operator|)
throw|;
block|}
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|update
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|RDBTableMetaData
name|tmd
parameter_list|,
name|String
name|id
parameter_list|,
name|Long
name|modified
parameter_list|,
name|Boolean
name|hasBinary
parameter_list|,
name|Boolean
name|deletedOnce
parameter_list|,
name|Long
name|modcount
parameter_list|,
name|Long
name|cmodcount
parameter_list|,
name|Long
name|oldmodcount
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|t
init|=
literal|"update "
operator|+
name|tmd
operator|.
name|getName
argument_list|()
operator|+
literal|" set MODIFIED = ?, HASBINARY = ?, DELETEDONCE = ?, MODCOUNT = ?, CMODCOUNT = ?, DSIZE = ?, DATA = ?, BDATA = ? where ID = ?"
decl_stmt|;
if|if
condition|(
name|oldmodcount
operator|!=
literal|null
condition|)
block|{
name|t
operator|+=
literal|" and MODCOUNT = ?"
expr_stmt|;
block|}
name|PreparedStatement
name|stmt
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|t
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|si
init|=
literal|1
decl_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|modified
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|hasBinary
condition|?
literal|1
else|:
literal|0
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|deletedOnce
condition|?
literal|1
else|:
literal|0
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|modcount
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|cmodcount
operator|==
literal|null
condition|?
name|Long
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
else|:
name|cmodcount
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|data
operator|.
name|length
argument_list|()
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|length
argument_list|()
operator|<
name|tmd
operator|.
name|getDataLimitInOctets
argument_list|()
operator|/
name|CHAR2OCTETRATIO
condition|)
block|{
name|stmt
operator|.
name|setString
argument_list|(
name|si
operator|++
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setBinaryStream
argument_list|(
name|si
operator|++
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stmt
operator|.
name|setString
argument_list|(
name|si
operator|++
argument_list|,
literal|"\"blob\""
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|asBytes
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|stmt
operator|.
name|setBytes
argument_list|(
name|si
operator|++
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
name|setIdInStatement
argument_list|(
name|tmd
argument_list|,
name|stmt
argument_list|,
name|si
operator|++
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldmodcount
operator|!=
literal|null
condition|)
block|{
name|stmt
operator|.
name|setObject
argument_list|(
name|si
operator|++
argument_list|,
name|oldmodcount
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
block|}
name|int
name|result
init|=
name|stmt
operator|.
name|executeUpdate
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|1
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DB update failed for "
operator|+
name|tmd
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|id
operator|+
literal|" with oldmodcount="
operator|+
name|oldmodcount
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|==
literal|1
return|;
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getIdFromRS
parameter_list|(
name|RDBTableMetaData
name|tmd
parameter_list|,
name|ResultSet
name|rs
parameter_list|,
name|int
name|idx
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|tmd
operator|.
name|isIdBinary
argument_list|()
condition|)
block|{
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|rs
operator|.
name|getBytes
argument_list|(
name|idx
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"UTF-8 not supported??"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
name|rs
operator|.
name|getString
argument_list|(
name|idx
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|setIdInStatement
parameter_list|(
name|RDBTableMetaData
name|tmd
parameter_list|,
name|PreparedStatement
name|stmt
parameter_list|,
name|int
name|idx
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|tmd
operator|.
name|isIdBinary
argument_list|()
condition|)
block|{
try|try
block|{
name|stmt
operator|.
name|setBytes
argument_list|(
name|idx
argument_list|,
name|id
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"UTF-8 not supported??"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|stmt
operator|.
name|setString
argument_list|(
name|idx
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|Document
argument_list|,
name|String
argument_list|>
name|idExtractor
init|=
operator|new
name|Function
argument_list|<
name|Document
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|Document
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getId
argument_list|()
return|;
block|}
block|}
decl_stmt|;
block|}
end_class

end_unit

