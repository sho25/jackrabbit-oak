begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|doc
operator|.
name|doxia
operator|.
name|jcr
package|;
end_package

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|bnf
operator|.
name|Bnf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|bnf
operator|.
name|BnfVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|bnf
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|bnf
operator|.
name|RuleFixed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A BNF visitor that generates HTML railroad diagrams.  */
end_comment

begin_class
specifier|public
class|class
name|BnfRailroad
implements|implements
name|BnfVisitor
block|{
specifier|private
specifier|static
specifier|final
name|boolean
name|RAILROAD_DOTS
init|=
literal|true
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|XPATH_KEYWORD_TO_ESCAPE
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
static|static
block|{
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"|"
argument_list|,
literal|"@PIPE@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"element"
argument_list|,
literal|"@ELEMENT@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"/jcr:root"
argument_list|,
literal|"@JCR_ROOT@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"jcr:contains"
argument_list|,
literal|"@CONTAINS@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"jcr:like"
argument_list|,
literal|"@LIKE@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"jcr:score"
argument_list|,
literal|"@SCORE@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"fn:not"
argument_list|,
literal|"@FN_NOT@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"fn:string-length"
argument_list|,
literal|"@FN_STRING_LENGTH@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"fn:name"
argument_list|,
literal|"@FN_NAME@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"fn:local-name"
argument_list|,
literal|"@FN_LOCAL_NAME@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"fn:lower-case"
argument_list|,
literal|"@FN_LOWER_CASE@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"fn:upper-case"
argument_list|,
literal|"@FN_UPPER_CASE@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"fn:coalesce"
argument_list|,
literal|"@FN_COALESCE@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"rep:excerpt"
argument_list|,
literal|"@EXCERPT@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"rep:native"
argument_list|,
literal|"@NATIVE@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"rep:similar"
argument_list|,
literal|"@SIMILAR@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"rep:spellcheck"
argument_list|,
literal|"@SPELLCHECK@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"rep:suggest"
argument_list|,
literal|"@SUGGEST@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"rep:facet"
argument_list|,
literal|"@FACET@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"text()"
argument_list|,
literal|"@TEXT@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"xs:dateTime"
argument_list|,
literal|"@XS_DATE_TIME@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"true"
argument_list|,
literal|"@TRUE@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"false"
argument_list|,
literal|"@FALSE@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"ascending"
argument_list|,
literal|"@ASCENDING@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"descending"
argument_list|,
literal|"@DESCENDING@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"or"
argument_list|,
literal|"@OR@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"and"
argument_list|,
literal|"@AND@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"not"
argument_list|,
literal|"@NOT@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"explain"
argument_list|,
literal|"@EXPLAIN@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"measure"
argument_list|,
literal|"@MEASURE@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"order by"
argument_list|,
literal|"@ORDER_BY@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"option"
argument_list|,
literal|"@OPTION@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"traversal"
argument_list|,
literal|"@TRAVERSAL@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"ok"
argument_list|,
literal|"@OK@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"warn"
argument_list|,
literal|"@WARN@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"fail"
argument_list|,
literal|"@FAIL@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"default"
argument_list|,
literal|"@DEFAULT@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"index"
argument_list|,
literal|"@INDEX@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"tag"
argument_list|,
literal|"@TAG@"
argument_list|)
expr_stmt|;
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|put
argument_list|(
literal|"fulltextSearchExpression"
argument_list|,
literal|"@FULLTEXT_EXPRESSION@"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|BnfSyntax
name|syntaxVisitor
decl_stmt|;
specifier|private
name|Bnf
name|config
decl_stmt|;
specifier|private
name|String
name|html
decl_stmt|;
comment|/**      * Generate the HTML for the given syntax.      *      * @param bnf the BNF parser      * @param syntaxLines the syntax      * @return the HTML      */
specifier|public
name|String
name|getHtml
parameter_list|(
name|Bnf
name|bnf
parameter_list|,
name|String
name|syntaxLines
parameter_list|)
block|{
name|syntaxVisitor
operator|=
operator|new
name|BnfSyntax
argument_list|()
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|bnf
expr_stmt|;
name|syntaxLines
operator|=
name|StringUtils
operator|.
name|replaceAll
argument_list|(
name|syntaxLines
argument_list|,
literal|"\n    "
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|String
index|[]
name|syntaxList
init|=
name|StringUtils
operator|.
name|arraySplit
argument_list|(
name|syntaxLines
argument_list|,
literal|'\n'
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|syntaxList
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|s
operator|=
name|StringUtils
operator|.
name|replaceAll
argument_list|(
name|s
argument_list|,
literal|"'"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"'"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|bnf
operator|.
name|visit
argument_list|(
name|this
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|html
operator|=
name|StringUtils
operator|.
name|replaceAll
argument_list|(
name|html
argument_list|,
literal|"</code></td>"
operator|+
literal|"<td class=\"d\"><code class=\"c\">"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|XPATH_KEYWORD_TO_ESCAPE
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|html
operator|=
name|StringUtils
operator|.
name|replaceAll
argument_list|(
name|html
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|buff
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"<br />"
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|html
argument_list|)
expr_stmt|;
block|}
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitRuleElement
parameter_list|(
name|boolean
name|keyword
parameter_list|,
name|String
name|name
parameter_list|,
name|Rule
name|link
parameter_list|)
block|{
name|String
name|x
decl_stmt|;
if|if
condition|(
name|keyword
condition|)
block|{
name|x
operator|=
name|StringUtils
operator|.
name|xmlText
argument_list|(
name|name
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|x
operator|=
name|syntaxVisitor
operator|.
name|getLink
argument_list|(
name|config
argument_list|,
name|name
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|html
operator|=
literal|"<code class=\"c\">"
operator|+
name|x
operator|+
literal|"</code>"
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitRuleRepeat
parameter_list|(
name|boolean
name|comma
parameter_list|,
name|Rule
name|rule
parameter_list|)
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|RAILROAD_DOTS
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"<code class=\"c\">"
argument_list|)
expr_stmt|;
if|if
condition|(
name|comma
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|"...</code>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"<table class=\"railroad\">"
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"<tr class=\"railroad\"><td class=\"te\"></td>"
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"<td class=\"d\">"
argument_list|)
expr_stmt|;
name|rule
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"</td><td class=\"ts\"></td></tr>"
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"<tr class=\"railroad\"><td class=\"ls\"></td>"
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"<td class=\"d\">&nbsp;</td>"
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"<td class=\"le\"></td></tr></table>"
argument_list|)
expr_stmt|;
block|}
name|html
operator|=
name|buff
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitRuleFixed
parameter_list|(
name|int
name|type
parameter_list|)
block|{
name|html
operator|=
name|getHtmlText
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the HTML text for the given fixed rule.      *      * @param type the fixed rule type      * @return the HTML text      */
specifier|static
name|String
name|getHtmlText
parameter_list|(
name|int
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|RuleFixed
operator|.
name|YMD
case|:
return|return
literal|"2000-01-01"
return|;
case|case
name|RuleFixed
operator|.
name|HMS
case|:
return|return
literal|"12:00:00"
return|;
case|case
name|RuleFixed
operator|.
name|NANOS
case|:
return|return
literal|"000000000"
return|;
case|case
name|RuleFixed
operator|.
name|ANY_UNTIL_EOL
case|:
case|case
name|RuleFixed
operator|.
name|ANY_EXCEPT_SINGLE_QUOTE
case|:
case|case
name|RuleFixed
operator|.
name|ANY_EXCEPT_DOUBLE_QUOTE
case|:
case|case
name|RuleFixed
operator|.
name|ANY_WORD
case|:
case|case
name|RuleFixed
operator|.
name|ANY_EXCEPT_2_DOLLAR
case|:
case|case
name|RuleFixed
operator|.
name|ANY_UNTIL_END
case|:
block|{
return|return
literal|"anything"
return|;
block|}
case|case
name|RuleFixed
operator|.
name|HEX_START
case|:
return|return
literal|"0x"
return|;
case|case
name|RuleFixed
operator|.
name|CONCAT
case|:
return|return
literal|"||"
return|;
case|case
name|RuleFixed
operator|.
name|AZ_UNDERSCORE
case|:
return|return
literal|"A-Z | _"
return|;
case|case
name|RuleFixed
operator|.
name|AF
case|:
return|return
literal|"A-F"
return|;
case|case
name|RuleFixed
operator|.
name|DIGIT
case|:
return|return
literal|"0-9"
return|;
case|case
name|RuleFixed
operator|.
name|OPEN_BRACKET
case|:
return|return
literal|"["
return|;
case|case
name|RuleFixed
operator|.
name|CLOSE_BRACKET
case|:
return|return
literal|"]"
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"type="
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitRuleList
parameter_list|(
name|boolean
name|or
parameter_list|,
name|ArrayList
argument_list|<
name|Rule
argument_list|>
name|list
parameter_list|)
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|or
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"<table class=\"railroad\">"
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Rule
name|r
range|:
name|list
control|)
block|{
name|String
name|a
init|=
name|i
operator|==
literal|0
condition|?
literal|"t"
else|:
name|i
operator|==
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|?
literal|"l"
else|:
literal|"k"
decl_stmt|;
name|i
operator|++
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"<tr class=\"railroad\"><td class=\""
operator|+
name|a
operator|+
literal|"s\"></td><td class=\"d\">"
argument_list|)
expr_stmt|;
name|r
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"</td><td class=\""
operator|+
name|a
operator|+
literal|"e\"></td></tr>"
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|"</table>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"<table class=\"railroad\">"
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"<tr class=\"railroad\">"
argument_list|)
expr_stmt|;
for|for
control|(
name|Rule
name|r
range|:
name|list
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"<td class=\"d\">"
argument_list|)
expr_stmt|;
name|r
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"</td>"
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|"</tr></table>"
argument_list|)
expr_stmt|;
block|}
name|html
operator|=
name|buff
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitRuleOptional
parameter_list|(
name|Rule
name|rule
parameter_list|)
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"<table class=\"railroad\">"
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"<tr class=\"railroad\"><td class=\"ts\"></td>"
operator|+
literal|"<td class=\"d\">&nbsp;</td><td class=\"te\"></td></tr>"
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"<tr class=\"railroad\">"
operator|+
literal|"<td class=\"ls\"></td><td class=\"d\">"
argument_list|)
expr_stmt|;
name|rule
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"</td><td class=\"le\"></td></tr></table>"
argument_list|)
expr_stmt|;
name|html
operator|=
name|buff
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

