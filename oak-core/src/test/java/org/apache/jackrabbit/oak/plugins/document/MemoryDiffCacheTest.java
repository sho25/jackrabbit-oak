begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_class
specifier|public
class|class
name|MemoryDiffCacheTest
block|{
annotation|@
name|Rule
specifier|public
name|DocumentMKBuilderProvider
name|builderProvider
init|=
operator|new
name|DocumentMKBuilderProvider
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|limit
parameter_list|()
throws|throws
name|Exception
block|{
name|DiffCache
name|cache
init|=
operator|new
name|MemoryDiffCache
argument_list|(
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCacheSegmentCount
argument_list|(
literal|1
argument_list|)
operator|.
name|memoryCacheDistribution
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|99
argument_list|)
argument_list|)
decl_stmt|;
name|RevisionVector
name|from
init|=
operator|new
name|RevisionVector
argument_list|(
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|RevisionVector
name|to
init|=
operator|new
name|RevisionVector
argument_list|(
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|DiffCache
operator|.
name|Entry
name|entry
init|=
name|cache
operator|.
name|newEntry
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|entry
operator|.
name|append
argument_list|(
literal|"/"
argument_list|,
literal|"^\"foo\":{}"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|append
argument_list|(
literal|"/foo"
argument_list|,
name|changes
argument_list|(
name|MemoryDiffCache
operator|.
name|CACHE_VALUE_LIMIT
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|done
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|getChanges
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
literal|"/"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cache
operator|.
name|getChanges
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
literal|"/foo"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|changes
parameter_list|(
name|int
name|minLength
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|<
name|minLength
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"^\""
argument_list|)
operator|.
name|append
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":{}"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

