begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
operator|.
name|checks
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|IllegalRepositoryStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
operator|.
name|MountedNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|NodeStoreChecksServiceTest
block|{
specifier|private
name|MemoryNodeStore
name|globalStore
decl_stmt|;
specifier|private
name|MemoryNodeStore
name|mountedStore
decl_stmt|;
specifier|private
name|MountInfoProvider
name|mip
decl_stmt|;
specifier|private
name|Mount
name|mount
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createFixture
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|globalStore
operator|=
operator|new
name|MemoryNodeStore
argument_list|()
expr_stmt|;
name|mountedStore
operator|=
operator|new
name|MemoryNodeStore
argument_list|()
expr_stmt|;
name|NodeBuilder
name|rootBuilder
init|=
name|mountedStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|rootBuilder
operator|.
name|setChildNode
argument_list|(
literal|"first"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"second"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"third"
argument_list|)
expr_stmt|;
name|rootBuilder
operator|.
name|setChildNode
argument_list|(
literal|"not-covered"
argument_list|)
expr_stmt|;
name|mountedStore
operator|.
name|merge
argument_list|(
name|rootBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|mip
operator|=
name|Mounts
operator|.
name|newBuilder
argument_list|()
operator|.
name|readOnlyMount
argument_list|(
literal|"first"
argument_list|,
literal|"/first"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|mount
operator|=
name|mip
operator|.
name|getMountByName
argument_list|(
literal|"first"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noCheckers
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|NodeStoreChecksService
name|checks
init|=
operator|new
name|NodeStoreChecksService
argument_list|()
decl_stmt|;
name|checks
operator|.
name|check
argument_list|(
name|globalStore
argument_list|,
operator|new
name|MountedNodeStore
argument_list|(
name|mount
argument_list|,
name|mountedStore
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalRepositoryStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|failOnNodeCoveredByMount
parameter_list|()
block|{
name|NodeStoreChecksService
name|checks
init|=
operator|new
name|NodeStoreChecksService
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|FailOnTreeNameChecker
argument_list|(
literal|"third"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|checks
operator|.
name|check
argument_list|(
name|globalStore
argument_list|,
operator|new
name|MountedNodeStore
argument_list|(
name|mount
argument_list|,
name|mountedStore
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|doNotFailOnNodeNotCoveredByMount
parameter_list|()
block|{
name|NodeStoreChecksService
name|checks
init|=
operator|new
name|NodeStoreChecksService
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|FailOnTreeNameChecker
argument_list|(
literal|"not-covered"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|checks
operator|.
name|check
argument_list|(
name|globalStore
argument_list|,
operator|new
name|MountedNodeStore
argument_list|(
name|mount
argument_list|,
name|mountedStore
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|FailOnTreeNameChecker
implements|implements
name|MountedNodeStoreChecker
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
name|FailOnTreeNameChecker
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|checkNotNull
argument_list|(
name|name
argument_list|,
literal|"name shold not be null"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|createContext
parameter_list|(
name|NodeStore
name|globalStore
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|check
parameter_list|(
name|MountedNodeStore
name|mountedStore
parameter_list|,
name|Tree
name|tree
parameter_list|,
name|ErrorHolder
name|errorHolder
parameter_list|,
name|Void
name|context
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|tree
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|errorHolder
operator|.
name|report
argument_list|(
name|mountedStore
argument_list|,
name|tree
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"test failure"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

