begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|internal
operator|.
name|SecurityProviderBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
operator|.
name|principal
operator|.
name|ExternalPrincipalConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|CompositePrincipalConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalConfiguration
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|TestSecurityProvider
block|{
specifier|private
name|TestSecurityProvider
parameter_list|()
block|{}
specifier|public
specifier|static
name|SecurityProvider
name|newTestSecurityProvider
parameter_list|(
annotation|@
name|Nonnull
name|ConfigurationParameters
name|configuration
parameter_list|,
annotation|@
name|Nonnull
name|ExternalPrincipalConfiguration
name|externalPrincipalConfiguration
parameter_list|)
block|{
name|SecurityProvider
name|delegate
init|=
operator|new
name|SecurityProviderBuilder
argument_list|()
operator|.
name|with
argument_list|(
name|configuration
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|PrincipalConfiguration
name|principalConfiguration
init|=
name|delegate
operator|.
name|getConfiguration
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|principalConfiguration
operator|instanceof
name|CompositePrincipalConfiguration
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
else|else
block|{
name|externalPrincipalConfiguration
operator|.
name|setSecurityProvider
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|CompositePrincipalConfiguration
name|composite
init|=
operator|(
name|CompositePrincipalConfiguration
operator|)
name|principalConfiguration
decl_stmt|;
name|PrincipalConfiguration
name|defConfig
init|=
name|composite
operator|.
name|getDefaultConfig
argument_list|()
decl_stmt|;
name|composite
operator|.
name|addConfiguration
argument_list|(
name|externalPrincipalConfiguration
argument_list|)
expr_stmt|;
name|composite
operator|.
name|addConfiguration
argument_list|(
name|defConfig
argument_list|)
expr_stmt|;
block|}
return|return
name|delegate
return|;
block|}
block|}
end_class

end_unit

