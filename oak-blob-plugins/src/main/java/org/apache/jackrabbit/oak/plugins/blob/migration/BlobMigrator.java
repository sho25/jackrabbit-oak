begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|migration
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobStoreBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|split
operator|.
name|SplitBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|BlobMigrator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlobMigrator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MERGE_LIMIT
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MERGE_TIMEOUT
init|=
literal|30
decl_stmt|;
specifier|private
specifier|final
name|SplitBlobStore
name|blobStore
decl_stmt|;
specifier|private
specifier|final
name|NodeStore
name|nodeStore
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|stopMigration
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|DepthFirstNodeIterator
name|nodeIterator
decl_stmt|;
specifier|private
name|NodeBuilder
name|rootBuilder
decl_stmt|;
specifier|private
name|long
name|lastCommit
decl_stmt|;
specifier|private
name|int
name|migratedNodes
decl_stmt|;
specifier|private
specifier|volatile
name|String
name|lastPath
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|totalMigratedNodes
decl_stmt|;
specifier|public
name|BlobMigrator
parameter_list|(
name|SplitBlobStore
name|blobStore
parameter_list|,
name|NodeStore
name|nodeStore
parameter_list|)
block|{
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
name|this
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
block|}
specifier|public
name|boolean
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|totalMigratedNodes
operator|=
literal|0
expr_stmt|;
name|refreshAndReset
argument_list|(
name|nodeStore
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|migrate
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|migrate
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|nodeIterator
operator|==
literal|null
condition|)
block|{
name|refreshAndReset
argument_list|(
name|nodeStore
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|do
block|{
while|while
condition|(
name|nodeIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|lastPath
operator|=
name|nodeIterator
operator|.
name|getPath
argument_list|()
expr_stmt|;
if|if
condition|(
name|stopMigration
operator|.
name|getAndSet
argument_list|(
literal|false
argument_list|)
condition|)
block|{
if|if
condition|(
name|migratedNodes
operator|>
literal|0
condition|)
block|{
name|tryCommit
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|migrateNode
argument_list|(
name|rootBuilder
argument_list|,
name|nodeIterator
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeToCommit
argument_list|()
condition|)
block|{
name|tryCommit
argument_list|()
expr_stmt|;
block|}
block|}
comment|// at this point we iterated over the whole repository
comment|// the last thing to do is to check if we don't have
comment|// any nodes waiting to be migrated. if the operation
comment|// fails we have to start from the beginning
block|}
do|while
condition|(
name|migratedNodes
operator|>
literal|0
operator|&&
operator|!
name|tryCommit
argument_list|()
condition|)
do|;
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|tryCommit
parameter_list|()
block|{
try|try
block|{
name|NodeState
name|newRoot
init|=
name|nodeStore
operator|.
name|merge
argument_list|(
name|rootBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|totalMigratedNodes
operator|+=
name|migratedNodes
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} nodes merged succesfully. Nodes migrated in this session: {}"
argument_list|,
name|migratedNodes
argument_list|,
name|totalMigratedNodes
argument_list|)
expr_stmt|;
name|lastCommit
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|migratedNodes
operator|=
literal|0
expr_stmt|;
name|rootBuilder
operator|=
name|newRoot
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeIterator
operator|=
name|nodeIterator
operator|.
name|switchRoot
argument_list|(
name|newRoot
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't commit. Resetting the migrator"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|refreshAndReset
argument_list|(
name|nodeStore
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|boolean
name|timeToCommit
parameter_list|()
block|{
name|long
name|changesMerged
init|=
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastCommit
operator|)
operator|/
literal|1000
decl_stmt|;
if|if
condition|(
name|migratedNodes
operator|>=
name|MERGE_LIMIT
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Migrated nodes count: {}. Merging changes."
argument_list|,
name|migratedNodes
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|migratedNodes
operator|>
literal|0
operator|&&
name|changesMerged
operator|>=
name|MERGE_TIMEOUT
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Changes have been merged {}s ago. Merging {} nodes."
argument_list|,
name|changesMerged
argument_list|,
name|migratedNodes
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|stopMigration
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getLastProcessedPath
parameter_list|()
block|{
return|return
name|lastPath
return|;
block|}
specifier|public
name|int
name|getTotalMigratedNodes
parameter_list|()
block|{
return|return
name|totalMigratedNodes
return|;
block|}
specifier|private
name|void
name|refreshAndReset
parameter_list|(
name|NodeState
name|rootState
parameter_list|)
block|{
name|rootBuilder
operator|=
name|rootState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeIterator
operator|=
operator|new
name|DepthFirstNodeIterator
argument_list|(
name|rootState
argument_list|)
expr_stmt|;
name|lastPath
operator|=
literal|null
expr_stmt|;
name|lastCommit
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|migratedNodes
operator|=
literal|0
expr_stmt|;
block|}
specifier|private
name|void
name|migrateNode
parameter_list|(
name|NodeBuilder
name|rootBuilder
parameter_list|,
name|DepthFirstNodeIterator
name|iterator
parameter_list|)
throws|throws
name|IOException
block|{
name|ChildNodeEntry
name|node
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|NodeState
name|state
init|=
name|node
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyState
name|property
range|:
name|state
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|PropertyState
name|newProperty
decl_stmt|;
if|if
condition|(
name|property
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BINARY
condition|)
block|{
name|newProperty
operator|=
name|migrateProperty
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BINARIES
condition|)
block|{
name|newProperty
operator|=
name|migrateMultiProperty
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newProperty
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|newProperty
operator|!=
literal|null
condition|)
block|{
name|NodeBuilder
name|builder
init|=
name|iterator
operator|.
name|getBuilder
argument_list|(
name|rootBuilder
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|.
name|exists
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|newProperty
argument_list|)
expr_stmt|;
name|migratedNodes
operator|++
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Migrated property {}/{}"
argument_list|,
name|lastPath
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Can't migrate blobs for a non-existing node: {}"
argument_list|,
name|lastPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|PropertyState
name|migrateProperty
parameter_list|(
name|PropertyState
name|propertyState
parameter_list|)
throws|throws
name|IOException
block|{
name|Blob
name|oldBlob
init|=
name|propertyState
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
decl_stmt|;
name|String
name|blobId
init|=
name|getIdentity
argument_list|(
name|oldBlob
argument_list|)
decl_stmt|;
if|if
condition|(
name|blobStore
operator|.
name|isMigrated
argument_list|(
name|blobId
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|newBlobId
init|=
name|blobStore
operator|.
name|writeBlob
argument_list|(
name|oldBlob
operator|.
name|getNewStream
argument_list|()
argument_list|)
decl_stmt|;
name|Blob
name|newBlob
init|=
operator|new
name|BlobStoreBlob
argument_list|(
name|blobStore
argument_list|,
name|newBlobId
argument_list|)
decl_stmt|;
name|PropertyBuilder
argument_list|<
name|Blob
argument_list|>
name|builder
init|=
operator|new
name|PropertyBuilder
argument_list|<
name|Blob
argument_list|>
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
decl_stmt|;
name|builder
operator|.
name|assignFrom
argument_list|(
name|propertyState
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setValue
argument_list|(
name|newBlob
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|getPropertyState
argument_list|()
return|;
block|}
specifier|private
name|PropertyState
name|migrateMultiProperty
parameter_list|(
name|PropertyState
name|propertyState
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterable
argument_list|<
name|Blob
argument_list|>
name|oldBlobs
init|=
name|propertyState
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARIES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Blob
argument_list|>
name|newBlobs
init|=
operator|new
name|ArrayList
argument_list|<
name|Blob
argument_list|>
argument_list|()
decl_stmt|;
name|PropertyBuilder
argument_list|<
name|Blob
argument_list|>
name|builder
init|=
operator|new
name|PropertyBuilder
argument_list|<
name|Blob
argument_list|>
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
decl_stmt|;
name|builder
operator|.
name|assignFrom
argument_list|(
name|propertyState
argument_list|)
expr_stmt|;
name|boolean
name|blobUpdated
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Blob
name|oldBlob
range|:
name|oldBlobs
control|)
block|{
name|String
name|blobId
init|=
name|getIdentity
argument_list|(
name|oldBlob
argument_list|)
decl_stmt|;
if|if
condition|(
name|blobStore
operator|.
name|isMigrated
argument_list|(
name|blobId
argument_list|)
condition|)
block|{
name|newBlobs
operator|.
name|add
argument_list|(
operator|new
name|BlobStoreBlob
argument_list|(
name|blobStore
argument_list|,
name|blobId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|newBlobId
init|=
name|blobStore
operator|.
name|writeBlob
argument_list|(
name|oldBlob
operator|.
name|getNewStream
argument_list|()
argument_list|)
decl_stmt|;
name|Blob
name|newBlob
init|=
operator|new
name|BlobStoreBlob
argument_list|(
name|blobStore
argument_list|,
name|newBlobId
argument_list|)
decl_stmt|;
name|newBlobs
operator|.
name|add
argument_list|(
name|newBlob
argument_list|)
expr_stmt|;
name|blobUpdated
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|blobUpdated
condition|)
block|{
name|builder
operator|.
name|setValues
argument_list|(
name|newBlobs
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|getPropertyState
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|String
name|getIdentity
parameter_list|(
name|Blob
name|blob
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|id
init|=
name|blob
operator|.
name|getContentIdentity
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|id
operator|=
name|DigestUtils
operator|.
name|shaHex
argument_list|(
name|blob
operator|.
name|getNewStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
block|}
end_class

end_unit

