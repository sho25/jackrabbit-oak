begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_class
specifier|public
class|class
name|AbstractTreePermissionTest
block|{
specifier|private
name|Tree
name|tree
decl_stmt|;
specifier|private
name|PrincipalBasedPermissionProvider
name|pp
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
block|{
name|tree
operator|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
expr_stmt|;
name|pp
operator|=
name|mock
argument_list|(
name|PrincipalBasedPermissionProvider
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|private
name|AbstractTreePermission
name|createAbstractTreePermission
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|,
annotation|@
name|NotNull
name|TreeType
name|type
parameter_list|,
annotation|@
name|NotNull
name|PrincipalBasedPermissionProvider
name|pp
parameter_list|)
block|{
return|return
operator|new
name|AbstractTreePermission
argument_list|(
name|tree
argument_list|,
name|type
argument_list|)
block|{
annotation|@
name|Override
name|PrincipalBasedPermissionProvider
name|getPermissionProvider
parameter_list|()
block|{
return|return
name|pp
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTree
parameter_list|()
block|{
name|AbstractTreePermission
name|atp
init|=
name|createAbstractTreePermission
argument_list|(
name|tree
argument_list|,
name|TreeType
operator|.
name|DEFAULT
argument_list|,
name|pp
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tree
argument_list|,
name|atp
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetType
parameter_list|()
block|{
name|AbstractTreePermission
name|atp
init|=
name|createAbstractTreePermission
argument_list|(
name|tree
argument_list|,
name|TreeType
operator|.
name|INTERNAL
argument_list|,
name|pp
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|TreeType
operator|.
name|INTERNAL
argument_list|,
name|atp
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChildPermission
parameter_list|()
block|{
name|NodeState
name|childState
init|=
name|mock
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
decl_stmt|;
name|AbstractTreePermission
name|atp
init|=
name|createAbstractTreePermission
argument_list|(
name|tree
argument_list|,
name|TreeType
operator|.
name|HIDDEN
argument_list|,
name|pp
argument_list|)
decl_stmt|;
name|atp
operator|.
name|getChildPermission
argument_list|(
literal|"childName"
argument_list|,
name|childState
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pp
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getTreePermission
argument_list|(
literal|"childName"
argument_list|,
name|childState
argument_list|,
name|atp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanRead
parameter_list|()
block|{
name|AbstractTreePermission
name|atp
init|=
name|createAbstractTreePermission
argument_list|(
name|tree
argument_list|,
name|TreeType
operator|.
name|DEFAULT
argument_list|,
name|pp
argument_list|)
decl_stmt|;
name|atp
operator|.
name|canRead
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|pp
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanReadAcType
parameter_list|()
block|{
name|AbstractTreePermission
name|atp
init|=
name|createAbstractTreePermission
argument_list|(
name|tree
argument_list|,
name|TreeType
operator|.
name|ACCESS_CONTROL
argument_list|,
name|pp
argument_list|)
decl_stmt|;
name|atp
operator|.
name|canRead
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|pp
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanReadWithProperty
parameter_list|()
block|{
name|PropertyState
name|ps
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|AbstractTreePermission
name|atp
init|=
name|createAbstractTreePermission
argument_list|(
name|tree
argument_list|,
name|TreeType
operator|.
name|VERSION
argument_list|,
name|pp
argument_list|)
decl_stmt|;
name|atp
operator|.
name|canRead
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pp
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
name|ps
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanReadWithPropertyAcType
parameter_list|()
block|{
name|PropertyState
name|ps
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|AbstractTreePermission
name|atp
init|=
name|createAbstractTreePermission
argument_list|(
name|tree
argument_list|,
name|TreeType
operator|.
name|ACCESS_CONTROL
argument_list|,
name|pp
argument_list|)
decl_stmt|;
name|atp
operator|.
name|canRead
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pp
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
name|ps
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanReadAll
parameter_list|()
block|{
name|AbstractTreePermission
name|atp
init|=
name|createAbstractTreePermission
argument_list|(
name|tree
argument_list|,
name|TreeType
operator|.
name|DEFAULT
argument_list|,
name|pp
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|atp
operator|.
name|canReadAll
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanReadProperties
parameter_list|()
block|{
name|AbstractTreePermission
name|atp
init|=
name|createAbstractTreePermission
argument_list|(
name|tree
argument_list|,
name|TreeType
operator|.
name|DEFAULT
argument_list|,
name|pp
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|atp
operator|.
name|canReadProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGranted
parameter_list|()
block|{
name|AbstractTreePermission
name|atp
init|=
name|createAbstractTreePermission
argument_list|(
name|tree
argument_list|,
name|TreeType
operator|.
name|ACCESS_CONTROL
argument_list|,
name|pp
argument_list|)
decl_stmt|;
name|atp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pp
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedWithProperty
parameter_list|()
block|{
name|PropertyState
name|ps
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|AbstractTreePermission
name|atp
init|=
name|createAbstractTreePermission
argument_list|(
name|tree
argument_list|,
name|TreeType
operator|.
name|VERSION
argument_list|,
name|pp
argument_list|)
decl_stmt|;
name|atp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|SET_PROPERTY
operator||
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|,
name|ps
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pp
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
name|ps
argument_list|,
name|Permissions
operator|.
name|SET_PROPERTY
operator||
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|SET_PROPERTY
operator||
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

