begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|j2ee
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_comment
comment|/**  * The JNDI config hold information about JNDI connection details.  *  * It supports the following properties and init parameters:  *<pre>  * +-------------------+--------------------+  * | Property Name     | Init-Param Name    |  * +-------------------+--------------------+  * | jndi.enable       | {provider spec.}   |  * | java.naming.*     | java.naming.*      |  * +-------------------+--------------------+  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|JNDIConfig
extends|extends
name|AbstractConfig
block|{
specifier|private
name|boolean
name|jndiEnabled
decl_stmt|;
specifier|private
name|String
name|jndiName
decl_stmt|;
specifier|private
specifier|final
name|BootstrapConfig
name|parentConfig
decl_stmt|;
specifier|private
name|Properties
name|jndiEnv
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
specifier|public
name|JNDIConfig
parameter_list|(
name|BootstrapConfig
name|parentConfig
parameter_list|)
block|{
name|this
operator|.
name|parentConfig
operator|=
name|parentConfig
expr_stmt|;
block|}
specifier|public
name|String
name|getJndiName
parameter_list|()
block|{
return|return
name|jndiName
return|;
block|}
specifier|public
name|void
name|setJndiName
parameter_list|(
name|String
name|jndiName
parameter_list|)
block|{
name|this
operator|.
name|jndiName
operator|=
name|jndiName
expr_stmt|;
block|}
specifier|public
name|boolean
name|enabled
parameter_list|()
block|{
return|return
name|jndiEnabled
return|;
block|}
specifier|public
name|String
name|getJndiEnabled
parameter_list|()
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|jndiEnabled
argument_list|)
return|;
block|}
specifier|public
name|void
name|setJndiEnabled
parameter_list|(
name|String
name|jndiEnabled
parameter_list|)
block|{
name|this
operator|.
name|jndiEnabled
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|jndiEnabled
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Properties
name|getJndiEnv
parameter_list|()
block|{
return|return
name|jndiEnv
return|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|Properties
name|props
parameter_list|)
throws|throws
name|ServletException
block|{
name|super
operator|.
name|init
argument_list|(
name|props
argument_list|)
expr_stmt|;
comment|// add all props whose name starts with 'java.namming.' to the env
name|Iterator
name|iter
init|=
name|props
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"java.naming."
argument_list|)
condition|)
block|{
name|jndiEnv
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|init
parameter_list|(
name|ServletConfig
name|ctx
parameter_list|)
throws|throws
name|ServletException
block|{
name|super
operator|.
name|init
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
comment|// add all params whose name starts with 'java.namming.' to the env
name|Enumeration
name|names
init|=
name|ctx
operator|.
name|getInitParameterNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|names
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"java.naming."
argument_list|)
condition|)
block|{
name|jndiEnv
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|ctx
operator|.
name|getInitParameter
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// enable jndi if url is specified
name|jndiEnabled
operator|=
name|jndiEnv
operator|.
name|containsKey
argument_list|(
literal|"java.naming.provider.url"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
block|{
if|if
condition|(
name|jndiName
operator|==
literal|null
condition|)
block|{
name|jndiName
operator|=
name|parentConfig
operator|.
name|getRepositoryName
argument_list|()
expr_stmt|;
block|}
name|valid
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

