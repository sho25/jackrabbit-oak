begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|util
operator|.
name|ReaderAtEnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CRC32
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMapWithExpectedSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|TarConstants
operator|.
name|GRAPH_MAGIC
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|GraphLoader
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GraphLoader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|FOOTER_SIZE
init|=
literal|16
decl_stmt|;
specifier|private
name|GraphLoader
parameter_list|()
block|{     }
comment|/**      * Loads the optional pre-compiled graph entry from the given tar file.      *      * @return the graph or {@code null} if one was not found      * @throws IOException if the tar file could not be read      */
specifier|public
specifier|static
name|ByteBuffer
name|loadGraph
parameter_list|(
name|ReaderAtEnd
name|readerAtEnd
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBuffer
name|meta
init|=
name|readerAtEnd
operator|.
name|readAtEnd
argument_list|(
name|FOOTER_SIZE
argument_list|,
name|FOOTER_SIZE
argument_list|)
decl_stmt|;
name|int
name|crc32
init|=
name|meta
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|meta
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|int
name|bytes
init|=
name|meta
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|int
name|magic
init|=
name|meta
operator|.
name|getInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|magic
operator|!=
name|GRAPH_MAGIC
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid graph magic number"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid number of entries"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|bytes
operator|<
literal|4
operator|+
name|count
operator|*
literal|34
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid entry size"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|ByteBuffer
name|graph
init|=
name|readerAtEnd
operator|.
name|readAtEnd
argument_list|(
name|bytes
argument_list|,
name|bytes
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|bytes
operator|-
name|FOOTER_SIZE
index|]
decl_stmt|;
name|graph
operator|.
name|mark
argument_list|()
expr_stmt|;
name|graph
operator|.
name|get
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|graph
operator|.
name|reset
argument_list|()
expr_stmt|;
name|CRC32
name|checksum
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|crc32
operator|!=
operator|(
name|int
operator|)
name|checksum
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid graph checksum in tar file"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|graph
return|;
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|parseGraph
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
name|int
name|nEntries
init|=
name|buffer
operator|.
name|getInt
argument_list|(
name|buffer
operator|.
name|limit
argument_list|()
operator|-
literal|12
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|graph
init|=
name|newHashMapWithExpectedSize
argument_list|(
name|nEntries
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nEntries
condition|;
name|i
operator|++
control|)
block|{
name|long
name|msb
init|=
name|buffer
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|long
name|lsb
init|=
name|buffer
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|int
name|nVertices
init|=
name|buffer
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|UUID
argument_list|>
name|vertices
init|=
name|newArrayListWithCapacity
argument_list|(
name|nVertices
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|nVertices
condition|;
name|j
operator|++
control|)
block|{
name|long
name|vMsb
init|=
name|buffer
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|long
name|vLsb
init|=
name|buffer
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|vertices
operator|.
name|add
argument_list|(
operator|new
name|UUID
argument_list|(
name|vMsb
argument_list|,
name|vLsb
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|graph
operator|.
name|put
argument_list|(
operator|new
name|UUID
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
argument_list|,
name|vertices
argument_list|)
expr_stmt|;
block|}
return|return
name|graph
return|;
block|}
block|}
end_class

end_unit

