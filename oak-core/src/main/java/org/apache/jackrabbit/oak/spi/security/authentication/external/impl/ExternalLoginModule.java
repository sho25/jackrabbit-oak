begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|AbstractLoginModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|DefaultSyncHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityProviderManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalUser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * ExternalLoginModule implements a LoginModule that uses and external identity provider for login.  */
end_comment

begin_class
specifier|public
class|class
name|ExternalLoginModule
extends|extends
name|AbstractLoginModule
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExternalLoginModule
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SyncMode
name|DEFAULT_SYNC_MODE
init|=
name|SyncMode
operator|.
name|DEFAULT_SYNC
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PARAM_SYNC_HANDLER
init|=
literal|"syncHandler"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_SYNC_HANDLER
init|=
name|DefaultSyncHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|/**      * Name of the parameter that configures the name of the external identity provider.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_IDP_NAME
init|=
literal|"idp.name"
decl_stmt|;
comment|/**      * Name of the parameter that configures the name of the synchronization handler.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_SYNC_HANDLER_NAME
init|=
literal|"sync.handlerName"
decl_stmt|;
comment|/**      * Name of the parameter that configures the synchronization mode.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_SYNC_MODE
init|=
literal|"sync.mode"
decl_stmt|;
comment|/**      * internal configuration when invoked from a factory rather than jaas      */
specifier|private
name|ConfigurationParameters
name|osgiConfig
decl_stmt|;
comment|/**      * The external identity provider as specified by the {@link #PARAM_IDP_NAME}      */
specifier|private
name|ExternalIdentityProvider
name|idp
decl_stmt|;
comment|/**      * The external user as resolved in the login call.      */
specifier|private
name|ExternalUser
name|externalUser
decl_stmt|;
comment|/**      * Default constructor for the OSGIi LoginModuleFactory case and the default non-OSGi JAAS case.      */
specifier|public
name|ExternalLoginModule
parameter_list|()
block|{     }
comment|/**      * Creates a new ExternalLoginModule with the given OSGi config.      * @param osgiConfig the config      */
specifier|public
name|ExternalLoginModule
parameter_list|(
name|ConfigurationParameters
name|osgiConfig
parameter_list|)
block|{
name|this
operator|.
name|osgiConfig
operator|=
name|osgiConfig
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Subject
name|subject
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|ss
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|opts
parameter_list|)
block|{
name|super
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
name|callbackHandler
argument_list|,
name|ss
argument_list|,
name|opts
argument_list|)
expr_stmt|;
comment|// merge options with osgi options if needed
if|if
condition|(
name|osgiConfig
operator|!=
literal|null
condition|)
block|{
name|options
operator|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|osgiConfig
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
name|String
name|idpName
init|=
name|options
operator|.
name|getConfigValue
argument_list|(
name|PARAM_IDP_NAME
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|idpName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"External login module needs IPD name. Will not be used for login."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ExternalIdentityProviderManager
name|idpMgr
init|=
name|getSecurityProvider
argument_list|()
operator|.
name|getConfiguration
argument_list|(
name|ExternalIdentityProviderManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|idp
operator|=
name|idpMgr
operator|.
name|getProvider
argument_list|(
name|idpName
argument_list|)
expr_stmt|;
if|if
condition|(
name|idp
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"No IDP found with name {}. Will not be used for login."
argument_list|,
name|idpName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|login
parameter_list|()
throws|throws
name|LoginException
block|{
if|if
condition|(
name|idp
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Credentials
name|credentials
init|=
name|getCredentials
argument_list|()
decl_stmt|;
if|if
condition|(
name|credentials
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No credentials found for external login module. ignoring."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
try|try
block|{
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|authenticate
argument_list|(
name|credentials
argument_list|)
decl_stmt|;
if|if
condition|(
name|externalUser
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Adding Credentials to shared state."
argument_list|)
expr_stmt|;
comment|//noinspection unchecked
name|sharedState
operator|.
name|put
argument_list|(
name|SHARED_KEY_CREDENTIALS
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Adding login name to shared state."
argument_list|)
expr_stmt|;
comment|//noinspection unchecked
name|sharedState
operator|.
name|put
argument_list|(
name|SHARED_KEY_LOGIN_NAME
argument_list|,
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ExternalIdentityException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error while authenticating credentials {} with {}: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|credentials
block|,
name|idp
operator|.
name|getName
argument_list|()
block|,
name|e
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * {@inheritDoc}      *      * @return An immutable set containing only the {@link SimpleCredentials} class.      */
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|Class
argument_list|>
name|getSupportedCredentials
parameter_list|()
block|{
comment|// todo: maybe delegate getSupportedCredentials to IDP
name|Class
name|scClass
init|=
name|SimpleCredentials
operator|.
name|class
decl_stmt|;
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|scClass
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|commit
parameter_list|()
throws|throws
name|LoginException
block|{
if|if
condition|(
name|externalUser
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|SyncHandler
name|handler
init|=
name|getSyncHandler
argument_list|()
decl_stmt|;
name|Root
name|root
init|=
name|getRoot
argument_list|()
decl_stmt|;
name|UserManager
name|userManager
init|=
name|getUserManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
operator|||
name|userManager
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"Cannot synchronize user."
argument_list|)
throw|;
block|}
name|Object
name|smValue
init|=
name|options
operator|.
name|getConfigValue
argument_list|(
name|PARAM_SYNC_MODE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SyncMode
name|syncMode
decl_stmt|;
if|if
condition|(
name|smValue
operator|==
literal|null
condition|)
block|{
name|syncMode
operator|=
name|DEFAULT_SYNC_MODE
expr_stmt|;
block|}
else|else
block|{
name|syncMode
operator|=
name|SyncMode
operator|.
name|fromObject
argument_list|(
name|smValue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|externalUser
operator|!=
literal|null
operator|&&
name|handler
operator|.
name|initialize
argument_list|(
name|userManager
argument_list|,
name|root
argument_list|,
name|syncMode
argument_list|,
name|options
argument_list|)
condition|)
block|{
name|handler
operator|.
name|sync
argument_list|(
name|externalUser
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to initialize sync handler."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SyncException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"User synchronization failed: "
operator|+
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"User synchronization failed: "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Nonnull
specifier|protected
name|SyncHandler
name|getSyncHandler
parameter_list|()
throws|throws
name|SyncException
block|{
name|Object
name|syncHandler
init|=
name|options
operator|.
name|getConfigValue
argument_list|(
name|PARAM_SYNC_HANDLER
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|syncHandler
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DefaultSyncHandler
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|syncHandler
operator|instanceof
name|SyncHandler
condition|)
block|{
return|return
operator|(
name|SyncHandler
operator|)
name|syncHandler
return|;
block|}
else|else
block|{
try|try
block|{
name|Object
name|sh
init|=
name|Class
operator|.
name|forName
argument_list|(
name|syncHandler
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|sh
operator|instanceof
name|SyncHandler
condition|)
block|{
return|return
operator|(
name|SyncHandler
operator|)
name|sh
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|SyncException
argument_list|(
literal|"Invalid SyncHandler configuration: "
operator|+
name|sh
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SyncException
argument_list|(
literal|"Error while getting SyncHandler:"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|clearState
parameter_list|()
block|{
name|super
operator|.
name|clearState
argument_list|()
expr_stmt|;
name|idp
operator|=
literal|null
expr_stmt|;
name|externalUser
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

