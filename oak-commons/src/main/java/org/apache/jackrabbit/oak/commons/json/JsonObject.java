begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Simple JSON Object representation.  *   * It optionally supports respecting the order of properties, and the order children.  */
end_comment

begin_class
specifier|public
class|class
name|JsonObject
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|JsonObject
argument_list|>
name|children
decl_stmt|;
comment|/**      * Create a Json object that doesn't respect the order.      */
specifier|public
name|JsonObject
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a Json object.      *       * @param respectOrder whether the object should respect the order      */
specifier|public
name|JsonObject
parameter_list|(
name|boolean
name|respectOrder
parameter_list|)
block|{
name|props
operator|=
name|map
argument_list|(
name|respectOrder
argument_list|)
expr_stmt|;
name|children
operator|=
name|map
argument_list|(
name|respectOrder
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|(
name|boolean
name|respectOrder
parameter_list|)
block|{
return|return
name|respectOrder
condition|?
operator|new
name|LinkedHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
else|:
operator|new
name|HashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
return|;
block|}
comment|/**      * Build a Json object from a String.      *       * @param json the json string      * @param respectOrder whether the object should respect the child order      * @return the json object      */
specifier|public
specifier|static
name|JsonObject
name|fromJson
parameter_list|(
name|String
name|json
parameter_list|,
name|boolean
name|respectOrder
parameter_list|)
block|{
name|JsopTokenizer
name|tokenizer
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|tokenizer
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|create
argument_list|(
name|tokenizer
argument_list|,
name|respectOrder
argument_list|)
return|;
block|}
finally|finally
block|{
name|tokenizer
operator|.
name|read
argument_list|(
name|JsopReader
operator|.
name|END
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Reads a JSON object from the given tokenizer. The opening '{' of the      * object should already have been consumed from the tokenizer before      * this method is called.      *      * @param t tokenizer      * @param respectOrder whether the order should be respected      * @return JSON object      */
specifier|public
specifier|static
name|JsonObject
name|create
parameter_list|(
name|JsopTokenizer
name|t
parameter_list|,
name|boolean
name|respectOrder
parameter_list|)
block|{
name|JsonObject
name|obj
init|=
operator|new
name|JsonObject
argument_list|(
name|respectOrder
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|t
operator|.
name|matches
argument_list|(
literal|'}'
argument_list|)
condition|)
block|{
do|do
block|{
name|String
name|key
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|'{'
argument_list|)
condition|)
block|{
name|obj
operator|.
name|children
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|create
argument_list|(
name|t
argument_list|,
name|respectOrder
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|obj
operator|.
name|props
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|t
operator|.
name|readRawValue
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
condition|)
do|;
name|t
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
return|return
name|obj
return|;
block|}
comment|/**      * Reads a JSON object from the given tokenizer. The opening '{' of the      * object should already have been consumed from the tokenizer before      * this method is called.      *      * @param t tokenizer      * @return JSON object      */
specifier|public
specifier|static
name|JsonObject
name|create
parameter_list|(
name|JsopTokenizer
name|t
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|t
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Write the object to a builder.      *       * @param buf the target      */
specifier|public
name|void
name|toJson
parameter_list|(
name|JsopBuilder
name|buf
parameter_list|)
block|{
name|toJson
argument_list|(
name|buf
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the (mutable) map of properties.      *       * @return the property map      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|props
return|;
block|}
comment|/**      * Get the (mutable) map of children.      *       * @return the children map      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|JsonObject
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|children
return|;
block|}
comment|/**      * Pretty-print the object.      *       * @return the pretty-printed string representation      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|JsopBuilder
name|w
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|toJson
argument_list|(
name|w
argument_list|)
expr_stmt|;
return|return
name|JsopBuilder
operator|.
name|prettyPrint
argument_list|(
name|w
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|toJson
parameter_list|(
name|JsopBuilder
name|buf
parameter_list|,
name|JsonObject
name|obj
parameter_list|)
block|{
name|buf
operator|.
name|object
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|obj
operator|.
name|props
operator|.
name|keySet
argument_list|()
control|)
block|{
name|buf
operator|.
name|key
argument_list|(
name|name
argument_list|)
operator|.
name|encodedValue
argument_list|(
name|obj
operator|.
name|props
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|name
range|:
name|obj
operator|.
name|children
operator|.
name|keySet
argument_list|()
control|)
block|{
name|buf
operator|.
name|key
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|toJson
argument_list|(
name|buf
argument_list|,
name|obj
operator|.
name|children
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

