begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|PeekingIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|TreeTraverser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|abstract
class|class
name|CacheInvalidator
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CacheInvalidator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|abstract
name|InvalidationResult
name|invalidateCache
parameter_list|()
function_decl|;
specifier|public
specifier|static
name|CacheInvalidator
name|createHierarchicalInvalidator
parameter_list|(
name|MongoDocumentStore
name|documentStore
parameter_list|)
block|{
return|return
operator|new
name|HierarchicalInvalidator
argument_list|(
name|documentStore
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|CacheInvalidator
name|createLinearInvalidator
parameter_list|(
name|MongoDocumentStore
name|documentStore
parameter_list|)
block|{
return|return
operator|new
name|LinearInvalidator
argument_list|(
name|documentStore
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|CacheInvalidator
name|createSimpleInvalidator
parameter_list|(
name|MongoDocumentStore
name|documentStore
parameter_list|)
block|{
return|return
operator|new
name|SimpleInvalidator
argument_list|(
name|documentStore
argument_list|)
return|;
block|}
specifier|static
class|class
name|InvalidationResult
block|{
name|int
name|invalidationCount
decl_stmt|;
name|int
name|upToDateCount
decl_stmt|;
name|int
name|cacheSize
decl_stmt|;
name|long
name|timeTaken
decl_stmt|;
name|int
name|queryCount
decl_stmt|;
name|int
name|cacheEntriesProcessedCount
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"InvalidationResult{"
operator|+
literal|"invalidationCount="
operator|+
name|invalidationCount
operator|+
literal|", upToDateCount="
operator|+
name|upToDateCount
operator|+
literal|", cacheSize="
operator|+
name|cacheSize
operator|+
literal|", timeTaken="
operator|+
name|timeTaken
operator|+
literal|", queryCount="
operator|+
name|queryCount
operator|+
literal|", cacheEntriesProcessedCount="
operator|+
name|cacheEntriesProcessedCount
operator|+
literal|'}'
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|SimpleInvalidator
extends|extends
name|CacheInvalidator
block|{
specifier|private
specifier|final
name|MongoDocumentStore
name|documentStore
decl_stmt|;
specifier|private
name|SimpleInvalidator
parameter_list|(
name|MongoDocumentStore
name|documentStore
parameter_list|)
block|{
name|this
operator|.
name|documentStore
operator|=
name|documentStore
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|InvalidationResult
name|invalidateCache
parameter_list|()
block|{
name|InvalidationResult
name|result
init|=
operator|new
name|InvalidationResult
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NodeDocument
argument_list|>
name|cacheMap
init|=
name|documentStore
operator|.
name|getCache
argument_list|()
decl_stmt|;
name|result
operator|.
name|cacheSize
operator|=
name|cacheMap
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|cacheMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|documentStore
operator|.
name|invalidateCache
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|LinearInvalidator
extends|extends
name|CacheInvalidator
block|{
specifier|private
specifier|final
name|DBCollection
name|nodes
decl_stmt|;
specifier|private
specifier|final
name|MongoDocumentStore
name|documentStore
decl_stmt|;
specifier|public
name|LinearInvalidator
parameter_list|(
name|MongoDocumentStore
name|documentStore
parameter_list|)
block|{
name|this
operator|.
name|documentStore
operator|=
name|documentStore
expr_stmt|;
name|this
operator|.
name|nodes
operator|=
name|documentStore
operator|.
name|getDBCollection
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|InvalidationResult
name|invalidateCache
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|NodeDocument
argument_list|>
name|cacheMap
init|=
name|documentStore
operator|.
name|getCache
argument_list|()
decl_stmt|;
specifier|final
name|InvalidationResult
name|result
init|=
operator|new
name|InvalidationResult
argument_list|()
decl_stmt|;
name|result
operator|.
name|cacheSize
operator|=
name|cacheMap
operator|.
name|size
argument_list|()
expr_stmt|;
name|QueryBuilder
name|query
init|=
name|QueryBuilder
operator|.
name|start
argument_list|(
name|Document
operator|.
name|ID
argument_list|)
operator|.
name|in
argument_list|(
name|cacheMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
comment|// Fetch only the lastRev map and id
specifier|final
name|BasicDBObject
name|keys
init|=
operator|new
name|BasicDBObject
argument_list|(
name|Document
operator|.
name|ID
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|keys
operator|.
name|put
argument_list|(
name|Document
operator|.
name|MOD_COUNT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Fetch lastRev for each such node
name|DBCursor
name|cursor
init|=
name|nodes
operator|.
name|find
argument_list|(
name|query
operator|.
name|get
argument_list|()
argument_list|,
name|keys
argument_list|)
decl_stmt|;
name|result
operator|.
name|queryCount
operator|++
expr_stmt|;
for|for
control|(
name|DBObject
name|obj
range|:
name|cursor
control|)
block|{
name|result
operator|.
name|cacheEntriesProcessedCount
operator|++
expr_stmt|;
name|String
name|id
init|=
operator|(
name|String
operator|)
name|obj
operator|.
name|get
argument_list|(
name|Document
operator|.
name|ID
argument_list|)
decl_stmt|;
name|Number
name|modCount
init|=
operator|(
name|Number
operator|)
name|obj
operator|.
name|get
argument_list|(
name|Document
operator|.
name|MOD_COUNT
argument_list|)
decl_stmt|;
name|NodeDocument
name|cachedDoc
init|=
name|documentStore
operator|.
name|getIfCached
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachedDoc
operator|!=
literal|null
operator|&&
operator|!
name|Objects
operator|.
name|equal
argument_list|(
name|cachedDoc
operator|.
name|getModCount
argument_list|()
argument_list|,
name|modCount
argument_list|)
condition|)
block|{
name|documentStore
operator|.
name|invalidateCache
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|result
operator|.
name|invalidationCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|upToDateCount
operator|++
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|HierarchicalInvalidator
extends|extends
name|CacheInvalidator
block|{
specifier|private
specifier|static
specifier|final
name|TreeTraverser
argument_list|<
name|TreeNode
argument_list|>
name|TRAVERSER
init|=
operator|new
name|TreeTraverser
argument_list|<
name|TreeNode
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|TreeNode
argument_list|>
name|children
parameter_list|(
name|TreeNode
name|root
parameter_list|)
block|{
return|return
name|root
operator|.
name|children
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|DBCollection
name|nodes
decl_stmt|;
specifier|private
specifier|final
name|MongoDocumentStore
name|documentStore
decl_stmt|;
specifier|public
name|HierarchicalInvalidator
parameter_list|(
name|MongoDocumentStore
name|documentStore
parameter_list|)
block|{
name|this
operator|.
name|documentStore
operator|=
name|documentStore
expr_stmt|;
name|this
operator|.
name|nodes
operator|=
name|documentStore
operator|.
name|getDBCollection
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|InvalidationResult
name|invalidateCache
parameter_list|()
block|{
specifier|final
name|InvalidationResult
name|result
init|=
operator|new
name|InvalidationResult
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NodeDocument
argument_list|>
name|cacheMap
init|=
name|documentStore
operator|.
name|getCache
argument_list|()
decl_stmt|;
name|TreeNode
name|root
init|=
name|constructTreeFromPaths
argument_list|(
name|cacheMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
comment|// Invalidation stats
name|result
operator|.
name|cacheSize
operator|=
name|cacheMap
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// Time at which the check is started. All NodeDocuments which
comment|// are found to be up-to-date would be marked touched at this time
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|TreeNode
argument_list|>
name|treeItr
init|=
name|TRAVERSER
operator|.
name|breadthFirstTraversal
argument_list|(
name|root
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|PeekingIterator
argument_list|<
name|TreeNode
argument_list|>
name|pitr
init|=
name|Iterators
operator|.
name|peekingIterator
argument_list|(
name|treeItr
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|TreeNode
argument_list|>
name|sameLevelNodes
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
comment|// Fetch only the lastRev map and id
specifier|final
name|BasicDBObject
name|keys
init|=
operator|new
name|BasicDBObject
argument_list|(
name|Document
operator|.
name|ID
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|keys
operator|.
name|put
argument_list|(
name|Document
operator|.
name|MOD_COUNT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|pitr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|TreeNode
name|tn
init|=
name|pitr
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Root node would already have been processed
comment|// Allows us to save on the extra query for /
if|if
condition|(
name|tn
operator|.
name|isRoot
argument_list|()
condition|)
block|{
name|tn
operator|.
name|markUptodate
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Collect nodes at same level in tree if
comment|// they are not up-to-date.
if|if
condition|(
name|tn
operator|.
name|isUptodate
argument_list|(
name|startTime
argument_list|)
condition|)
block|{
name|result
operator|.
name|upToDateCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|sameLevelNodes
operator|.
name|put
argument_list|(
name|tn
operator|.
name|getId
argument_list|()
argument_list|,
name|tn
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|hasMore
init|=
name|pitr
operator|.
name|hasNext
argument_list|()
decl_stmt|;
comment|// Change in level or last element
if|if
condition|(
operator|!
name|sameLevelNodes
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
operator|(
name|hasMore
operator|&&
name|tn
operator|.
name|level
argument_list|()
operator|!=
name|pitr
operator|.
name|peek
argument_list|()
operator|.
name|level
argument_list|()
operator|)
operator|||
operator|!
name|hasMore
operator|)
condition|)
block|{
name|QueryBuilder
name|query
init|=
name|QueryBuilder
operator|.
name|start
argument_list|(
name|Document
operator|.
name|ID
argument_list|)
operator|.
name|in
argument_list|(
name|sameLevelNodes
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
comment|// Fetch lastRev and modCount for each such nodes
name|DBCursor
name|cursor
init|=
name|nodes
operator|.
name|find
argument_list|(
name|query
operator|.
name|get
argument_list|()
argument_list|,
name|keys
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking for changed nodes at level {} with {} paths"
argument_list|,
name|tn
operator|.
name|level
argument_list|()
argument_list|,
name|sameLevelNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|queryCount
operator|++
expr_stmt|;
for|for
control|(
name|DBObject
name|obj
range|:
name|cursor
control|)
block|{
name|result
operator|.
name|cacheEntriesProcessedCount
operator|++
expr_stmt|;
name|Number
name|latestModCount
init|=
operator|(
name|Number
operator|)
name|obj
operator|.
name|get
argument_list|(
name|Document
operator|.
name|MOD_COUNT
argument_list|)
decl_stmt|;
name|String
name|id
init|=
operator|(
name|String
operator|)
name|obj
operator|.
name|get
argument_list|(
name|Document
operator|.
name|ID
argument_list|)
decl_stmt|;
specifier|final
name|TreeNode
name|tn2
init|=
name|sameLevelNodes
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|NodeDocument
name|cachedDoc
init|=
name|tn2
operator|.
name|getDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|cachedDoc
operator|!=
literal|null
condition|)
block|{
name|boolean
name|noChangeInModCount
init|=
name|Objects
operator|.
name|equal
argument_list|(
name|latestModCount
argument_list|,
name|cachedDoc
operator|.
name|getModCount
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|noChangeInModCount
condition|)
block|{
name|result
operator|.
name|upToDateCount
operator|++
expr_stmt|;
name|tn2
operator|.
name|markUptodate
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|invalidationCount
operator|++
expr_stmt|;
name|tn2
operator|.
name|invalidate
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Remove the processed nodes
name|sameLevelNodes
operator|.
name|remove
argument_list|(
name|tn2
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// NodeDocument present in cache but not in database
comment|// Remove such nodes from cache
if|if
condition|(
operator|!
name|sameLevelNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|TreeNode
name|leftOverNodes
range|:
name|sameLevelNodes
operator|.
name|values
argument_list|()
control|)
block|{
name|leftOverNodes
operator|.
name|invalidate
argument_list|()
expr_stmt|;
block|}
block|}
name|sameLevelNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|result
operator|.
name|timeTaken
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cache invalidation details - {}"
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// TODO collect the list of ids which are invalidated such that entries for only those
comment|// ids are removed from the Document Children Cache
return|return
name|result
return|;
block|}
specifier|private
name|TreeNode
name|constructTreeFromPaths
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|)
block|{
name|TreeNode
name|root
init|=
operator|new
name|TreeNode
argument_list|(
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|TreeNode
name|current
init|=
name|root
decl_stmt|;
name|String
name|path
init|=
name|Utils
operator|.
name|getPathFromId
argument_list|(
name|id
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|current
operator|=
name|current
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|root
return|;
block|}
specifier|private
class|class
name|TreeNode
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|TreeNode
name|parent
decl_stmt|;
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TreeNode
argument_list|>
name|children
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TreeNode
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|TreeNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TreeNode
parameter_list|(
name|TreeNode
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TreeNode
name|child
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|TreeNode
name|child
init|=
name|children
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
name|child
operator|=
operator|new
name|TreeNode
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|children
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
return|return
name|child
return|;
block|}
specifier|public
name|Iterable
argument_list|<
name|TreeNode
argument_list|>
name|children
parameter_list|()
block|{
return|return
name|children
operator|.
name|values
argument_list|()
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|public
name|int
name|level
parameter_list|()
block|{
return|return
name|Utils
operator|.
name|pathDepth
argument_list|(
name|getPath
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|TreeNode
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
specifier|public
name|boolean
name|isRoot
parameter_list|()
block|{
return|return
name|name
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
if|if
condition|(
name|isRoot
argument_list|()
condition|)
block|{
return|return
literal|"/"
return|;
block|}
else|else
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buildPath
argument_list|(
name|sb
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|invalidate
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Change detected for {}. Invalidating the cached entry"
argument_list|,
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|documentStore
operator|.
name|invalidateCache
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NodeDocument
name|getDocument
parameter_list|()
block|{
return|return
name|documentStore
operator|.
name|getIfCached
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isUptodate
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|NodeDocument
name|doc
init|=
name|documentStore
operator|.
name|getIfCached
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
return|return
name|doc
operator|.
name|isUpToDate
argument_list|(
name|time
argument_list|)
return|;
block|}
else|else
block|{
comment|// If doc is not present in cache then its already
comment|// up-to-date i.e. no further consistency check required
comment|// for this document
return|return
literal|true
return|;
block|}
block|}
specifier|public
name|void
name|markUptodate
parameter_list|(
name|long
name|cacheCheckTime
parameter_list|)
block|{
name|NodeDocument
name|doc
init|=
name|getDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|markUptodate
argument_list|(
name|cacheCheckTime
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|private
name|void
name|markUptodate
parameter_list|(
name|long
name|cacheCheckTime
parameter_list|,
name|NodeDocument
name|upToDateRoot
parameter_list|)
block|{
for|for
control|(
name|TreeNode
name|tn
range|:
name|children
operator|.
name|values
argument_list|()
control|)
block|{
name|tn
operator|.
name|markUptodate
argument_list|(
name|cacheCheckTime
argument_list|,
name|upToDateRoot
argument_list|)
expr_stmt|;
block|}
comment|// Update the parent after child
name|markUptodate
argument_list|(
name|getId
argument_list|()
argument_list|,
name|cacheCheckTime
argument_list|,
name|upToDateRoot
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|markUptodate
parameter_list|(
name|String
name|key
parameter_list|,
name|long
name|time
parameter_list|,
name|NodeDocument
name|upToDateRoot
parameter_list|)
block|{
name|NodeDocument
name|doc
init|=
name|documentStore
operator|.
name|getIfCached
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Only mark the cachedDoc up-to-date if
comment|// 1. it got created i.e. cached document creation
comment|//    time is greater or same as the time of the root node on which markUptodate
comment|//    is invoked. As in typical cache population child node would be added
comment|//    later than the parent.
comment|//    If the creation time is less then it means that parent got replaced/updated later
comment|//    and hence its _lastRev property would not truly reflect the state of child nodes
comment|//    present in cache
comment|// 2. OR Check if both documents have been marked up-to-date in last cycle. As in that case
comment|//    previous cycle would have done the required checks
if|if
condition|(
name|doc
operator|.
name|getCreated
argument_list|()
operator|>=
name|upToDateRoot
operator|.
name|getCreated
argument_list|()
operator|||
name|doc
operator|.
name|getLastCheckTime
argument_list|()
operator|==
name|upToDateRoot
operator|.
name|getLastCheckTime
argument_list|()
condition|)
block|{
name|doc
operator|.
name|markUpToDate
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|buildPath
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isRoot
argument_list|()
condition|)
block|{
name|getParent
argument_list|()
operator|.
name|buildPath
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

