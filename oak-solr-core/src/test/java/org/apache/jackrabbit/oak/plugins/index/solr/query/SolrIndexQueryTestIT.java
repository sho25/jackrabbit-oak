begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|query
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|configuration
operator|.
name|DefaultSolrConfigurationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|index
operator|.
name|SolrIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|server
operator|.
name|DefaultSolrServerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|AbstractQueryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_comment
comment|/**  * General query extensive testcase for {@link SolrQueryIndex}  */
end_comment

begin_class
specifier|public
class|class
name|SolrIndexQueryTestIT
extends|extends
name|AbstractQueryTest
block|{
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|createTestIndexNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|index
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|solrIndexNode
init|=
name|createTestIndexNode
argument_list|(
name|index
argument_list|,
name|SolrQueryIndex
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|solrIndexNode
operator|.
name|setProperty
argument_list|(
literal|"pathRestrictions"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|solrIndexNode
operator|.
name|setProperty
argument_list|(
literal|"propertyRestrictions"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|solrIndexNode
operator|.
name|setProperty
argument_list|(
literal|"primaryTypes"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|solrIndexNode
operator|.
name|setProperty
argument_list|(
literal|"commitPolicy"
argument_list|,
literal|"hard"
argument_list|)
expr_stmt|;
name|Tree
name|server
init|=
name|solrIndexNode
operator|.
name|addChild
argument_list|(
literal|"server"
argument_list|)
decl_stmt|;
name|server
operator|.
name|setProperty
argument_list|(
literal|"solrServerType"
argument_list|,
literal|"embedded"
argument_list|)
expr_stmt|;
name|server
operator|.
name|setProperty
argument_list|(
literal|"solrHomePath"
argument_list|,
literal|"target/"
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|()
block|{
try|try
block|{
name|DefaultSolrServerProvider
name|solrServerProvider
init|=
operator|new
name|DefaultSolrServerProvider
argument_list|()
decl_stmt|;
name|DefaultSolrConfigurationProvider
name|oakSolrConfigurationProvider
init|=
operator|new
name|DefaultSolrConfigurationProvider
argument_list|()
decl_stmt|;
return|return
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|SolrQueryIndexProvider
argument_list|(
name|solrServerProvider
argument_list|,
name|oakSolrConfigurationProvider
argument_list|)
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|SolrIndexEditorProvider
argument_list|(
name|solrServerProvider
argument_list|,
name|oakSolrConfigurationProvider
argument_list|)
argument_list|)
operator|.
name|createContentRepository
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|sql1
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"sql1.txt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sql2
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"sql2.txt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sql2FullText
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"sql2-fulltext.txt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"OAK-420"
argument_list|)
specifier|public
name|void
name|sql2Measure
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"sql2_measure.txt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|descendantTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|result
init|=
name|executeQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where isdescendantnode('/test')"
argument_list|,
literal|"JCR-SQL2"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/a"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/a/c"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/b"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/b/d"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|descendantTest2
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
name|asList
argument_list|(
literal|"Hello"
argument_list|,
literal|"World"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|result
init|=
name|executeQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where isdescendantnode('/test') and name='World'"
argument_list|,
literal|"JCR-SQL2"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/a/c"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ischildnodeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|parents
init|=
name|tree
operator|.
name|addChild
argument_list|(
literal|"parents"
argument_list|)
decl_stmt|;
name|parents
operator|.
name|addChild
argument_list|(
literal|"p0"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|parents
operator|.
name|addChild
argument_list|(
literal|"p1"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|parents
operator|.
name|addChild
argument_list|(
literal|"p2"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|Tree
name|children
init|=
name|tree
operator|.
name|addChild
argument_list|(
literal|"children"
argument_list|)
decl_stmt|;
name|children
operator|.
name|addChild
argument_list|(
literal|"c1"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|children
operator|.
name|addChild
argument_list|(
literal|"c2"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|children
operator|.
name|addChild
argument_list|(
literal|"c3"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|children
operator|.
name|addChild
argument_list|(
literal|"c4"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|result
init|=
name|executeQuery
argument_list|(
literal|"select p.[jcr:path], p2.[jcr:path] from [nt:base] as p inner join [nt:base] as p2 on ischildnode(p2, p) where p.[jcr:path] = '/'"
argument_list|,
literal|"JCR-SQL2"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/, /children"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/, /jcr:system"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/, /oak:index"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/, /parents"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ischildnodeTest2
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|tree
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"jcr:resource"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"resource"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|executeQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] as b where ischildnode(b, '/test')"
argument_list|,
literal|"JCR-SQL2"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|strings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/jcr:resource"
argument_list|,
name|strings
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|strings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/resource"
argument_list|,
name|strings
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|strings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNativeSolrQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nativeQueryString
init|=
literal|"select [jcr:path] from [nt:base] where native('solr', 'name:(Hello OR World)')"
decl_stmt|;
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|tree
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"World"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|executeQuery
argument_list|(
name|nativeQueryString
argument_list|,
literal|"JCR-SQL2"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|strings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/a"
argument_list|,
name|strings
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|strings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/b"
argument_list|,
name|strings
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|strings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNativeSolrFunctionQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nativeQueryString
init|=
literal|"select [jcr:path] from [nt:base] where native('solr', 'path_child:\\/test  _val_:\"recip(rord(name),1,2,3)\"')"
decl_stmt|;
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|tree
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"World"
argument_list|)
expr_stmt|;
name|tree
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|executeQuery
argument_list|(
name|nativeQueryString
argument_list|,
literal|"JCR-SQL2"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|strings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/a"
argument_list|,
name|strings
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|strings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/b"
argument_list|,
name|strings
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|strings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNativeSolrLocalParams
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nativeQueryString
init|=
literal|"select [jcr:path] from [nt:base] where native('solr', '_query_:\"{!dismax qf=catch_all q.op=OR}hello world\"')"
decl_stmt|;
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|tree
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"World"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|executeQuery
argument_list|(
name|nativeQueryString
argument_list|,
literal|"JCR-SQL2"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|strings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/a"
argument_list|,
name|strings
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|strings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/b"
argument_list|,
name|strings
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|strings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNativeMLTQuery
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: OAK-1819
name|assumeTrue
argument_list|(
operator|!
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.version"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"1.8"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|nativeQueryString
init|=
literal|"select [jcr:path] from [nt:base] where native('solr', 'mlt?q=name:World&mlt.fl=name&mlt.mindf=0&mlt.mintf=0')"
decl_stmt|;
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|tree
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"Hello World, today weather is nice"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"Cheers World, today weather is quite nice"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"Halo Welt, today sky is cloudy"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|executeQuery
argument_list|(
name|nativeQueryString
argument_list|,
literal|"JCR-SQL2"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|strings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/a"
argument_list|,
name|strings
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|strings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/c"
argument_list|,
name|strings
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|strings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNativeMLTQueryWithStream
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: OAK-1819
name|assumeTrue
argument_list|(
operator|!
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.version"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"1.8"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|nativeQueryString
init|=
literal|"select [jcr:path] from [nt:base] where native('solr', 'mlt?stream.body=world is nice today&mlt.fl=name&mlt.mindf=0&mlt.mintf=0')"
decl_stmt|;
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|tree
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"Hello World, today weather is nice"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"Cheers World, today weather is quite nice"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"Halo Welt, today sky is cloudy"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|executeQuery
argument_list|(
name|nativeQueryString
argument_list|,
literal|"JCR-SQL2"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|strings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/a"
argument_list|,
name|strings
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|strings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/c"
argument_list|,
name|strings
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|strings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRepSimilarXPathQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|query
init|=
literal|"//element(*, nt:base)[rep:similar(., '/test/a')]"
decl_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"the quick brown fox jumped over the lazy white dog"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"I am a dog"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"dogs don't hurt"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"white men can't jump"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"e"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"the fox is brown"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"f"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"a quickest dog jumped over the quick white dog"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"g"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"hello world"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"h"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"over the lazy top"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|result
init|=
name|executeQuery
argument_list|(
name|query
argument_list|,
literal|"xpath"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|list
init|=
literal|""
decl_stmt|;
while|while
condition|(
name|result
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|p
init|=
name|result
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|startsWith
argument_list|(
literal|"/oak:index"
argument_list|)
condition|)
block|{
comment|// OAK-3728
comment|// /oak:index nodes can match, because they have an info
comment|// we ignore those
continue|continue;
block|}
name|list
operator|+=
name|p
operator|+
literal|" "
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"/test/b "
operator|+
literal|"/test/d "
operator|+
literal|"/test/e "
operator|+
literal|"/test/f "
operator|+
literal|"/test/h "
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nativeSolr
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"native_solr.txt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTokenizeCN
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"containsCN"
argument_list|)
decl_stmt|;
name|Tree
name|one
init|=
name|t
operator|.
name|addChild
argument_list|(
literal|"one"
argument_list|)
decl_stmt|;
name|one
operator|.
name|setProperty
argument_list|(
literal|"t"
argument_list|,
literal|"美女衬衫"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[jcr:contains(., '美女')]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|one
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompositeRepExcerpt
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|sqlQuery
init|=
literal|"select [jcr:path], [jcr:score], [rep:excerpt] from [nt:base] as a "
operator|+
literal|"where (contains([jcr:content/*], 'square') or contains([jcr:content/jcr:title], 'square')"
operator|+
literal|" or contains([jcr:content/jcr:description], 'square')) and isdescendantnode(a, '/test') "
operator|+
literal|"order by [jcr:score] desc"
decl_stmt|;
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|tree
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Tree
name|child
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|)
decl_stmt|;
name|Tree
name|a
init|=
name|child
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"Hello World, today square is nice"
argument_list|)
expr_stmt|;
name|Tree
name|b
init|=
name|child
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"jcr:description"
argument_list|,
literal|"Cheers World, today weather is squary nice"
argument_list|)
expr_stmt|;
name|Tree
name|c
init|=
name|child
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|c
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"Halo Welt, today sky is square"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|executeQuery
argument_list|(
name|sqlQuery
argument_list|,
literal|"JCR-SQL2"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|strings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|strings
operator|.
name|next
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"/test/child,"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|strings
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|contains
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|h
init|=
literal|"Hello"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|w
init|=
literal|"World"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
name|asList
argument_list|(
name|h
argument_list|,
name|w
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// query 'hello'
name|StringBuffer
name|stmt
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|"/jcr:root//*[jcr:contains(., '"
argument_list|)
operator|.
name|append
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|"')]"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|stmt
operator|.
name|toString
argument_list|()
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// query 'world'
name|stmt
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|"/jcr:root//*[jcr:contains(., '"
argument_list|)
operator|.
name|append
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|"')]"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|stmt
operator|.
name|toString
argument_list|()
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"depends on chosen text_general tokenizer"
argument_list|)
specifier|public
name|void
name|containsDash
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"hello-wor"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"hello-world"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root//*[jcr:contains(., 'hello-wor*')]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root//*[jcr:contains(., '*hello-wor*')]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multiPhraseQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"dc:format"
argument_list|,
literal|"type:application/pdf"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root//*[jcr:contains(@dc:format, 'type:appli*')]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|containsPath
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"/parent/child/node"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[jcr:contains(., '/parent/child')]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|containsPathNum
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Tree
name|a
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"/segment1/segment2/segment3"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[jcr:contains(., '/segment1/segment2')]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * OAK-1208 property existence constraints break queries      */
annotation|@
name|Test
specifier|public
name|void
name|testOAK1208
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"containsWithMultipleOr"
argument_list|)
decl_stmt|;
name|Tree
name|one
init|=
name|t
operator|.
name|addChild
argument_list|(
literal|"one"
argument_list|)
decl_stmt|;
name|one
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"dam/smartcollection"
argument_list|)
expr_stmt|;
name|one
operator|.
name|setProperty
argument_list|(
literal|"t"
argument_list|,
literal|"media"
argument_list|)
expr_stmt|;
name|Tree
name|two
init|=
name|t
operator|.
name|addChild
argument_list|(
literal|"two"
argument_list|)
decl_stmt|;
name|two
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"dam/collection"
argument_list|)
expr_stmt|;
name|two
operator|.
name|setProperty
argument_list|(
literal|"t"
argument_list|,
literal|"media"
argument_list|)
expr_stmt|;
name|Tree
name|three
init|=
name|t
operator|.
name|addChild
argument_list|(
literal|"three"
argument_list|)
decl_stmt|;
name|three
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"dam/hits"
argument_list|)
expr_stmt|;
name|three
operator|.
name|setProperty
argument_list|(
literal|"t"
argument_list|,
literal|"media"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[jcr:contains(., 'media') and (@p = 'dam/smartcollection' or @p = 'dam/collection') ]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|one
operator|.
name|getPath
argument_list|()
argument_list|,
name|two
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSortingOnPath
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|result
init|=
name|executeQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where isdescendantnode('/test') order by [jcr:path] asc"
argument_list|,
literal|"JCR-SQL2"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/a"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/a/c"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/b"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/b/d"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSortingOnProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Tree
name|a
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|a
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"car"
argument_list|)
expr_stmt|;
name|Tree
name|b
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"tar"
argument_list|)
expr_stmt|;
name|b
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"jar"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|result
init|=
name|executeQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where isdescendantnode('/test') order by [foo] asc"
argument_list|,
literal|"JCR-SQL2"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/a"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/a/c"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/b/d"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/b"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrderByJcrScore
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|index
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/oak:index/"
operator|+
name|TEST_INDEX_NAME
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|index
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
literal|"rows"
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
literal|"reindex"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|content
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
name|Tree
name|a
init|=
name|content
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"type"
argument_list|,
literal|"doc doc doc"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|statement
init|=
literal|"select [jcr:path], [jcr:score], [rep:excerpt] "
operator|+
literal|"from [nt:unstructured] as a "
operator|+
literal|"where contains(*, 'doc') "
operator|+
literal|"and isdescendantnode(a, '/content') "
operator|+
literal|"order by [jcr:score] desc"
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|results
init|=
name|executeQuery
argument_list|(
name|statement
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|,
literal|true
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/content/a"
argument_list|,
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrderByMVProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|index
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/oak:index/"
operator|+
name|TEST_INDEX_NAME
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|index
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
literal|"rows"
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
literal|"reindex"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|content
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
name|Tree
name|a
init|=
name|content
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"type"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"z"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"a doc"
argument_list|)
expr_stmt|;
name|Tree
name|aContent
init|=
name|a
operator|.
name|addChild
argument_list|(
literal|"jcr:content"
argument_list|)
decl_stmt|;
name|aContent
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|aContent
operator|.
name|setProperty
argument_list|(
literal|"type"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|Tree
name|b
init|=
name|content
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"type"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"b"
argument_list|,
literal|"y"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"b doc"
argument_list|)
expr_stmt|;
name|Tree
name|bContent
init|=
name|b
operator|.
name|addChild
argument_list|(
literal|"jcr:content"
argument_list|)
decl_stmt|;
name|bContent
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|bContent
operator|.
name|setProperty
argument_list|(
literal|"type"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|c
init|=
name|content
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|c
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|c
operator|.
name|setProperty
argument_list|(
literal|"type"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"c"
argument_list|,
literal|"x"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|c
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"c doc"
argument_list|)
expr_stmt|;
name|Tree
name|cContent
init|=
name|c
operator|.
name|addChild
argument_list|(
literal|"jcr:content"
argument_list|)
decl_stmt|;
name|cContent
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|cContent
operator|.
name|setProperty
argument_list|(
literal|"type"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|statement
init|=
literal|"select [jcr:path], [jcr:score] "
operator|+
literal|"from [nt:unstructured] as a "
operator|+
literal|"where contains(*, 'doc') "
operator|+
literal|"and isdescendantnode(a, '/content') "
operator|+
literal|"order by [type] desc"
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|results
init|=
name|executeQuery
argument_list|(
name|statement
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|,
literal|true
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/content/c"
argument_list|,
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/content/b"
argument_list|,
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/content/a"
argument_list|,
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|statement
operator|=
literal|"select [jcr:path], [jcr:score] "
operator|+
literal|"from [nt:unstructured] as a "
operator|+
literal|"where contains(*, 'doc') "
operator|+
literal|"and isdescendantnode(a, '/content') "
operator|+
literal|"order by [type] asc"
expr_stmt|;
name|results
operator|=
name|executeQuery
argument_list|(
name|statement
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|,
literal|true
argument_list|)
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/content/a"
argument_list|,
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/content/b"
argument_list|,
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/content/c"
argument_list|,
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCollapsedJcrContentNodeDescandants
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|index
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/oak:index/"
operator|+
name|TEST_INDEX_NAME
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|index
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
literal|"collapseJcrContentNodes"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
literal|"reindex"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Tree
name|content
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
name|Tree
name|content1
init|=
name|content
operator|.
name|addChild
argument_list|(
literal|"sample1"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"jcr:content"
argument_list|)
decl_stmt|;
name|content1
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|content1
operator|.
name|addChild
argument_list|(
literal|"text"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|Tree
name|content2
init|=
name|content
operator|.
name|addChild
argument_list|(
literal|"sample2"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"jcr:content"
argument_list|)
decl_stmt|;
name|content2
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|content2
operator|.
name|addChild
argument_list|(
literal|"text"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|xpath
init|=
literal|"/jcr:root/test/content//element(*, nt:base)[jcr:contains(., 'bar')]"
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|result
init|=
name|executeQuery
argument_list|(
name|xpath
argument_list|,
name|XPATH
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/content/sample1/jcr:content"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/content/sample2/jcr:content"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

