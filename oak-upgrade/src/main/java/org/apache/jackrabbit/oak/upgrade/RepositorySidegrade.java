begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|migration
operator|.
name|FilteringNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|nodestate
operator|.
name|NameFilteringNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|migration
operator|.
name|NodeStateCopier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|migration
operator|.
name|report
operator|.
name|LoggingReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|migration
operator|.
name|report
operator|.
name|ReportingNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|TypePredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CompositeEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ApplyDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|RepositoryUpgrade
operator|.
name|LoggingCompositeHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|checkpoint
operator|.
name|CheckpointRetriever
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|cli
operator|.
name|node
operator|.
name|SegmentTarFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|nodestate
operator|.
name|MetadataExposingNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|version
operator|.
name|VersionCopyConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|version
operator|.
name|VersionHistoryUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|version
operator|.
name|VersionableEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|copyOf
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|union
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SYSTEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|migration
operator|.
name|NodeStateCopier
operator|.
name|copyProperties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionConstants
operator|.
name|NT_REP_PERMISSION_STORE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionConstants
operator|.
name|REP_PERMISSION_STORE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|RepositoryUpgrade
operator|.
name|DEFAULT_EXCLUDE_PATHS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|RepositoryUpgrade
operator|.
name|DEFAULT_INCLUDE_PATHS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|RepositoryUpgrade
operator|.
name|DEFAULT_MERGE_PATHS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|RepositoryUpgrade
operator|.
name|calculateEffectiveIncludePaths
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|RepositoryUpgrade
operator|.
name|createIndexEditorProvider
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|RepositoryUpgrade
operator|.
name|createTypeEditorProvider
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|version
operator|.
name|VersionCopier
operator|.
name|copyVersionStorage
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|version
operator|.
name|VersionHistoryUtil
operator|.
name|getVersionStorage
import|;
end_import

begin_class
specifier|public
class|class
name|RepositorySidegrade
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RepositorySidegrade
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|int
name|LOG_NODE_COPY
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.upgrade.logNodeCopy"
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WORKSPACE_NAME_PROP
init|=
literal|"oak.upgrade.workspaceName"
decl_stmt|;
comment|/**      * Target node store.      */
specifier|private
specifier|final
name|NodeStore
name|target
decl_stmt|;
specifier|private
specifier|final
name|FileStore
name|targetFileStore
decl_stmt|;
specifier|private
specifier|final
name|NodeStore
name|source
decl_stmt|;
comment|/**      * Paths to include during the copy process. Defaults to the root path "/".      */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|includePaths
init|=
name|DEFAULT_INCLUDE_PATHS
decl_stmt|;
comment|/**      * Paths to exclude during the copy process. Empty by default.      */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|excludePaths
init|=
name|DEFAULT_EXCLUDE_PATHS
decl_stmt|;
comment|/**      * Paths to merge during the copy process. Empty by default.      */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|mergePaths
init|=
name|DEFAULT_MERGE_PATHS
decl_stmt|;
specifier|private
name|boolean
name|skipCheckpoints
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|forceCheckpoints
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|filterLongNames
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|verify
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|onlyVerify
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|migrateDocumentMetadata
init|=
literal|false
decl_stmt|;
specifier|private
name|List
argument_list|<
name|CommitHook
argument_list|>
name|customCommitHooks
init|=
literal|null
decl_stmt|;
name|VersionCopyConfiguration
name|versionCopyConfiguration
init|=
operator|new
name|VersionCopyConfiguration
argument_list|()
decl_stmt|;
comment|/**      * Configures the version storage copy. Be default all versions are copied.      * One may disable it completely by setting {@code null} here or limit it to      * a selected date range: {@code<minDate, now()>}.      *       * @param minDate      *            minimum date of the versions to copy or {@code null} to      *            disable the storage version copying completely. Default value:      *            {@code 1970-01-01 00:00:00}.      */
specifier|public
name|void
name|setCopyVersions
parameter_list|(
name|Calendar
name|minDate
parameter_list|)
block|{
name|versionCopyConfiguration
operator|.
name|setCopyVersions
argument_list|(
name|minDate
argument_list|)
expr_stmt|;
block|}
comment|/**      * Configures copying of the orphaned version histories (eg. ones that are      * not referenced by the existing nodes). By default all orphaned version      * histories are copied. One may disable it completely by setting      * {@code null} here or limit it to a selected date range:      * {@code<minDate, now()>}.<br>      *<br>      * Please notice, that this option is overriden by the      * {@link #setCopyVersions(Calendar)}. You can't copy orphaned versions      * older than set in {@link #setCopyVersions(Calendar)} and if you set      * {@code null} there, this option will be ignored.      *       * @param minDate      *            minimum date of the orphaned versions to copy or {@code null}      *            to not copy them at all. Default value:      *            {@code 1970-01-01 00:00:00}.      */
specifier|public
name|void
name|setCopyOrphanedVersions
parameter_list|(
name|Calendar
name|minDate
parameter_list|)
block|{
name|versionCopyConfiguration
operator|.
name|setCopyOrphanedVersions
argument_list|(
name|minDate
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a tool for copying the full contents of the source repository      * to the given target repository. Any existing content in the target      * repository will be overwritten.      *      * @param source source node store      * @param target target node store      */
specifier|public
name|RepositorySidegrade
parameter_list|(
name|NodeStore
name|source
parameter_list|,
name|NodeStore
name|target
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
name|FileStore
name|fs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|target
operator|instanceof
name|SegmentTarFactory
operator|.
name|NodeStoreWithFileStore
condition|)
block|{
name|fs
operator|=
operator|(
operator|(
name|SegmentTarFactory
operator|.
name|NodeStoreWithFileStore
operator|)
name|target
operator|)
operator|.
name|getFileStore
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|targetFileStore
operator|=
name|fs
expr_stmt|;
block|}
comment|/**      * Returns the list of custom CommitHooks to be applied before the final      * type validation, reference and indexing hooks.      *      * @return the list of custom CommitHooks      */
specifier|public
name|List
argument_list|<
name|CommitHook
argument_list|>
name|getCustomCommitHooks
parameter_list|()
block|{
return|return
name|customCommitHooks
return|;
block|}
comment|/**      * Sets the list of custom CommitHooks to be applied before the final      * type validation, reference and indexing hooks.      *      * @param customCommitHooks the list of custom CommitHooks      */
specifier|public
name|void
name|setCustomCommitHooks
parameter_list|(
name|List
argument_list|<
name|CommitHook
argument_list|>
name|customCommitHooks
parameter_list|)
block|{
name|this
operator|.
name|customCommitHooks
operator|=
name|customCommitHooks
expr_stmt|;
block|}
comment|/**      * Sets the paths that should be included when the source repository      * is copied to the target repository.      *      * @param includes Paths to be included in the copy.      */
specifier|public
name|void
name|setIncludes
parameter_list|(
annotation|@
name|NotNull
name|String
modifier|...
name|includes
parameter_list|)
block|{
name|this
operator|.
name|includePaths
operator|=
name|copyOf
argument_list|(
name|checkNotNull
argument_list|(
name|includes
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the paths that should be excluded when the source repository      * is copied to the target repository.      *      * @param excludes Paths to be excluded from the copy.      */
specifier|public
name|void
name|setExcludes
parameter_list|(
annotation|@
name|NotNull
name|String
modifier|...
name|excludes
parameter_list|)
block|{
name|this
operator|.
name|excludePaths
operator|=
name|copyOf
argument_list|(
name|checkNotNull
argument_list|(
name|excludes
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the paths that should be merged when the source repository      * is copied to the target repository.      *      * @param merges Paths to be merged during copy.      */
specifier|public
name|void
name|setMerges
parameter_list|(
annotation|@
name|NotNull
name|String
modifier|...
name|merges
parameter_list|)
block|{
name|this
operator|.
name|mergePaths
operator|=
name|copyOf
argument_list|(
name|checkNotNull
argument_list|(
name|merges
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFilterLongNames
parameter_list|(
name|boolean
name|filterLongNames
parameter_list|)
block|{
name|this
operator|.
name|filterLongNames
operator|=
name|filterLongNames
expr_stmt|;
block|}
specifier|public
name|void
name|setVerify
parameter_list|(
name|boolean
name|verify
parameter_list|)
block|{
name|this
operator|.
name|verify
operator|=
name|verify
expr_stmt|;
block|}
specifier|public
name|void
name|setOnlyVerify
parameter_list|(
name|boolean
name|onlyVerify
parameter_list|)
block|{
name|this
operator|.
name|onlyVerify
operator|=
name|onlyVerify
expr_stmt|;
block|}
specifier|public
name|void
name|setSkipCheckpoints
parameter_list|(
name|boolean
name|skipCheckpoints
parameter_list|)
block|{
name|this
operator|.
name|skipCheckpoints
operator|=
name|skipCheckpoints
expr_stmt|;
block|}
specifier|public
name|void
name|setForceCheckpoints
parameter_list|(
name|boolean
name|forceCheckpoints
parameter_list|)
block|{
name|this
operator|.
name|forceCheckpoints
operator|=
name|forceCheckpoints
expr_stmt|;
block|}
specifier|public
name|void
name|setMigrateDocumentMetadata
parameter_list|(
name|boolean
name|migrateDocumentMetadata
parameter_list|)
block|{
name|this
operator|.
name|migrateDocumentMetadata
operator|=
name|migrateDocumentMetadata
expr_stmt|;
block|}
comment|/**      * Copies the full content from the source to the target repository.      *<p>      * The source repository<strong>must not be modified</strong> while      * the copy operation is running to avoid an inconsistent copy.      *<p>      * Note that both the source and the target repository must be closed      * during the copy operation as this method requires exclusive access      * to the repositories.      *      * @throws RepositoryException if the copy operation fails      */
specifier|public
name|void
name|copy
parameter_list|()
throws|throws
name|RepositoryException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|onlyVerify
condition|)
block|{
if|if
condition|(
name|VersionHistoryUtil
operator|.
name|getVersionStorage
argument_list|(
name|target
operator|.
name|getRoot
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|versionCopyConfiguration
operator|.
name|skipOrphanedVersionsCopy
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The version storage on destination already exists. Orphaned version histories will be skipped."
argument_list|)
expr_stmt|;
name|versionCopyConfiguration
operator|.
name|setCopyOrphanedVersions
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|copyState
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|verify
operator|||
name|onlyVerify
condition|)
block|{
name|verify
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Failed to copy content"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|removeCheckpointReferences
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
throws|throws
name|CommitFailedException
block|{
comment|// removing references to the checkpoints,
comment|// which don't exist in the new repository
name|builder
operator|.
name|setChildNode
argument_list|(
literal|":async"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|copyState
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|RepositoryException
throws|,
name|IOException
block|{
name|boolean
name|migrateCheckpoints
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|isCompleteMigration
argument_list|()
operator|&&
operator|!
name|forceCheckpoints
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Checkpoints won't be migrated because of the specified paths"
argument_list|)
expr_stmt|;
name|migrateCheckpoints
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|versionCopyConfiguration
operator|.
name|isCopyAll
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Checkpoints won't be migrated because of the specified version settings"
argument_list|)
expr_stmt|;
name|migrateCheckpoints
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|skipCheckpoints
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Checkpoints won't be migrated because of the --skip-checkpoints options"
argument_list|)
expr_stmt|;
name|migrateCheckpoints
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|targetExists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Checkpoints won't be migrated because the destination repository exists"
argument_list|)
expr_stmt|;
name|migrateCheckpoints
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|migrateCheckpoints
condition|)
block|{
name|migrateCheckpoints
operator|=
name|migrateWithCheckpoints
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|migrateCheckpoints
condition|)
block|{
name|migrateWithoutCheckpoints
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|migrateWithCheckpoints
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|CheckpointRetriever
operator|.
name|Checkpoint
argument_list|>
name|checkpoints
init|=
name|CheckpointRetriever
operator|.
name|getCheckpoints
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkpoints
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nameToRevision
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|checkpointSegmentToDoc
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|NodeState
name|initialRoot
init|=
name|target
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|NodeState
name|targetRoot
init|=
name|initialRoot
decl_stmt|;
name|NodeState
name|previousRoot
init|=
name|initialRoot
decl_stmt|;
for|for
control|(
name|CheckpointRetriever
operator|.
name|Checkpoint
name|checkpoint
range|:
name|checkpoints
control|)
block|{
name|NodeState
name|checkpointRoot
init|=
name|source
operator|.
name|retrieve
argument_list|(
name|checkpoint
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|checkpointInfo
init|=
name|source
operator|.
name|checkpointInfo
argument_list|(
name|checkpoint
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|tracePaths
decl_stmt|;
name|boolean
name|showDiff
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|previousRoot
operator|==
name|initialRoot
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Migrating first checkpoint: {}"
argument_list|,
name|checkpoint
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tracePaths
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Applying diff to {}"
argument_list|,
name|checkpoint
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|showDiff
operator|=
literal|true
expr_stmt|;
name|tracePaths
operator|=
literal|false
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Checkpoint expiry time: {}, metadata: {}"
argument_list|,
name|checkpoint
operator|.
name|getExpiryTime
argument_list|()
argument_list|,
name|checkpointInfo
argument_list|)
expr_stmt|;
name|targetRoot
operator|=
name|copyDiffToTarget
argument_list|(
name|previousRoot
argument_list|,
name|checkpointRoot
argument_list|,
name|targetRoot
argument_list|,
name|tracePaths
argument_list|,
name|showDiff
argument_list|)
expr_stmt|;
name|previousRoot
operator|=
name|checkpointRoot
expr_stmt|;
name|String
name|newCheckpointName
init|=
name|target
operator|.
name|checkpoint
argument_list|(
name|checkpoint
operator|.
name|getExpiryTime
argument_list|()
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|checkpointInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkpointInfo
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
name|nameToRevision
operator|.
name|put
argument_list|(
name|checkpointInfo
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|newCheckpointName
argument_list|)
expr_stmt|;
block|}
name|checkpointSegmentToDoc
operator|.
name|put
argument_list|(
name|checkpoint
operator|.
name|getName
argument_list|()
argument_list|,
name|newCheckpointName
argument_list|)
expr_stmt|;
block|}
name|NodeState
name|sourceRoot
init|=
name|source
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|boolean
name|tracePaths
decl_stmt|;
name|boolean
name|showDiff
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|previousRoot
operator|==
name|initialRoot
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No checkpoints found; migrating head"
argument_list|)
expr_stmt|;
name|tracePaths
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Applying diff to head"
argument_list|)
expr_stmt|;
name|tracePaths
operator|=
literal|false
expr_stmt|;
name|showDiff
operator|=
literal|true
expr_stmt|;
block|}
name|targetRoot
operator|=
name|copyDiffToTarget
argument_list|(
name|previousRoot
argument_list|,
name|sourceRoot
argument_list|,
name|targetRoot
argument_list|,
name|tracePaths
argument_list|,
name|showDiff
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Rewriting checkpoint names in /:async {}"
argument_list|,
name|nameToRevision
argument_list|)
expr_stmt|;
name|NodeBuilder
name|targetBuilder
init|=
name|targetRoot
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|async
init|=
name|targetBuilder
operator|.
name|getChildNode
argument_list|(
literal|":async"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|nameToRevision
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|async
operator|.
name|setProperty
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|PropertyState
name|temp
init|=
name|async
operator|.
name|getProperty
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|"-temp"
argument_list|)
decl_stmt|;
if|if
condition|(
name|temp
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|tempValues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|temp
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sToD
range|:
name|checkpointSegmentToDoc
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|tempValues
operator|.
name|contains
argument_list|(
name|sToD
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|tempValues
operator|.
name|set
argument_list|(
name|tempValues
operator|.
name|indexOf
argument_list|(
name|sToD
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|sToD
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|async
operator|.
name|setProperty
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|"-temp"
argument_list|,
name|tempValues
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
block|}
name|target
operator|.
name|merge
argument_list|(
name|targetBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|NodeState
name|copyDiffToTarget
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|NodeState
name|targetRoot
parameter_list|,
name|boolean
name|tracePaths
parameter_list|,
name|boolean
name|showDiff
parameter_list|)
throws|throws
name|IOException
throws|,
name|CommitFailedException
block|{
name|NodeBuilder
name|targetBuilder
init|=
name|targetRoot
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetFileStore
operator|==
literal|null
condition|)
block|{
name|NodeState
name|currentRoot
init|=
name|wrapNodeState
argument_list|(
name|after
argument_list|,
name|tracePaths
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|NodeState
name|baseRoot
init|=
name|wrapNodeState
argument_list|(
name|before
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|currentRoot
operator|.
name|compareAgainstBaseState
argument_list|(
name|baseRoot
argument_list|,
operator|new
name|ApplyDiff
argument_list|(
name|targetBuilder
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|NodeState
name|currentRoot
init|=
name|wrapNodeState
argument_list|(
name|after
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|NodeState
name|baseRoot
init|=
name|wrapNodeState
argument_list|(
name|before
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SegmentNodeState
name|state
init|=
name|PersistingDiff
operator|.
name|applyDiffOnNodeState
argument_list|(
name|targetFileStore
argument_list|,
name|baseRoot
argument_list|,
name|currentRoot
argument_list|,
name|targetRoot
argument_list|)
decl_stmt|;
name|state
operator|.
name|compareAgainstBaseState
argument_list|(
name|targetRoot
argument_list|,
operator|new
name|ApplyDiff
argument_list|(
name|targetBuilder
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|target
operator|.
name|merge
argument_list|(
name|targetBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
return|;
block|}
specifier|private
name|void
name|migrateWithoutCheckpoints
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|RepositoryException
block|{
specifier|final
name|List
argument_list|<
name|CommitHook
argument_list|>
name|hooks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|customCommitHooks
operator|!=
literal|null
condition|)
block|{
name|hooks
operator|.
name|addAll
argument_list|(
name|customCommitHooks
argument_list|)
expr_stmt|;
block|}
name|NodeState
name|sourceRoot
init|=
name|wrapNodeState
argument_list|(
name|source
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|NodeBuilder
name|targetRoot
init|=
name|target
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|copyWorkspace
argument_list|(
name|sourceRoot
argument_list|,
name|targetRoot
argument_list|)
expr_stmt|;
name|removeCheckpointReferences
argument_list|(
name|targetRoot
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|versionCopyConfiguration
operator|.
name|isCopyAll
argument_list|()
condition|)
block|{
name|NodeBuilder
name|versionStorage
init|=
name|VersionHistoryUtil
operator|.
name|getVersionStorage
argument_list|(
name|targetRoot
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|versionStorage
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// it's possible that this is a new repository and the version storage
comment|// hasn't been created/copied yet
name|versionStorage
operator|=
name|VersionHistoryUtil
operator|.
name|createVersionStorage
argument_list|(
name|targetRoot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|versionCopyConfiguration
operator|.
name|skipOrphanedVersionsCopy
argument_list|()
condition|)
block|{
name|copyVersionStorage
argument_list|(
name|targetRoot
argument_list|,
name|getVersionStorage
argument_list|(
name|sourceRoot
argument_list|)
argument_list|,
name|versionStorage
argument_list|,
name|versionCopyConfiguration
argument_list|)
expr_stmt|;
block|}
name|hooks
operator|.
name|add
argument_list|(
operator|new
name|EditorHook
argument_list|(
operator|new
name|VersionableEditor
operator|.
name|Provider
argument_list|(
name|sourceRoot
argument_list|,
name|getWorkspaceName
argument_list|()
argument_list|,
name|versionCopyConfiguration
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// type validation, reference and indexing hooks
name|hooks
operator|.
name|add
argument_list|(
operator|new
name|EditorHook
argument_list|(
operator|new
name|CompositeEditorProvider
argument_list|(
name|createTypeEditorProvider
argument_list|()
argument_list|,
name|createIndexEditorProvider
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|target
operator|.
name|merge
argument_list|(
name|targetRoot
argument_list|,
operator|new
name|LoggingCompositeHook
argument_list|(
name|hooks
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|removeVersions
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|removeVersions
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|NodeState
name|root
init|=
name|target
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|NodeState
name|wrappedRoot
init|=
name|FilteringNodeState
operator|.
name|wrap
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|root
argument_list|,
name|includePaths
argument_list|,
name|excludePaths
argument_list|,
name|FilteringNodeState
operator|.
name|NONE
argument_list|,
name|FilteringNodeState
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|versionablesToStrip
init|=
name|VersionHistoryUtil
operator|.
name|getVersionableNodes
argument_list|(
name|wrappedRoot
argument_list|,
operator|new
name|TypePredicate
argument_list|(
name|root
argument_list|,
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
argument_list|)
argument_list|,
name|versionCopyConfiguration
operator|.
name|getVersionsMinDate
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|versionablesToStrip
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing version histories for included paths"
argument_list|)
expr_stmt|;
name|NodeBuilder
name|newRoot
init|=
name|VersionHistoryUtil
operator|.
name|removeVersions
argument_list|(
name|root
argument_list|,
name|versionablesToStrip
argument_list|)
decl_stmt|;
name|target
operator|.
name|merge
argument_list|(
name|newRoot
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isCompleteMigration
parameter_list|()
block|{
return|return
name|includePaths
operator|.
name|equals
argument_list|(
name|DEFAULT_INCLUDE_PATHS
argument_list|)
operator|&&
name|excludePaths
operator|.
name|equals
argument_list|(
name|DEFAULT_EXCLUDE_PATHS
argument_list|)
operator|&&
name|mergePaths
operator|.
name|equals
argument_list|(
name|DEFAULT_MERGE_PATHS
argument_list|)
return|;
block|}
specifier|private
name|void
name|copyWorkspace
parameter_list|(
name|NodeState
name|sourceRoot
parameter_list|,
name|NodeBuilder
name|targetRoot
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|includes
init|=
name|calculateEffectiveIncludePaths
argument_list|(
name|includePaths
argument_list|,
name|sourceRoot
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|excludes
decl_stmt|;
if|if
condition|(
name|versionCopyConfiguration
operator|.
name|isCopyAll
argument_list|()
condition|)
block|{
name|excludes
operator|=
name|copyOf
argument_list|(
name|this
operator|.
name|excludePaths
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|excludes
operator|=
name|union
argument_list|(
name|copyOf
argument_list|(
name|this
operator|.
name|excludePaths
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"/jcr:system/jcr:versionStorage"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|merges
init|=
name|union
argument_list|(
name|copyOf
argument_list|(
name|this
operator|.
name|mergePaths
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"/jcr:system"
argument_list|)
argument_list|)
decl_stmt|;
name|NodeStateCopier
operator|.
name|builder
argument_list|()
operator|.
name|include
argument_list|(
name|includes
argument_list|)
operator|.
name|exclude
argument_list|(
name|excludes
argument_list|)
operator|.
name|merge
argument_list|(
name|merges
argument_list|)
operator|.
name|copy
argument_list|(
name|sourceRoot
argument_list|,
name|targetRoot
argument_list|)
expr_stmt|;
if|if
condition|(
name|includePaths
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|copyProperties
argument_list|(
name|sourceRoot
argument_list|,
name|targetRoot
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getWorkspaceName
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|definedName
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|WORKSPACE_NAME_PROP
argument_list|)
decl_stmt|;
name|String
name|detectedName
init|=
name|deriveWorkspaceName
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|definedName
argument_list|)
condition|)
block|{
return|return
name|definedName
return|;
block|}
elseif|else
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|detectedName
argument_list|)
condition|)
block|{
return|return
name|detectedName
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Can't detect the workspace name. Please use the system property "
operator|+
name|WORKSPACE_NAME_PROP
operator|+
literal|" to set it manually."
argument_list|)
throw|;
block|}
block|}
comment|/**      * This method tries to derive the workspace name from the source repository. It uses the      * fact that the /jcr:system/rep:permissionStore usually contains just one child      * named after the workspace.      *      * @return the workspace name or null if it can't be derived      */
specifier|private
name|String
name|deriveWorkspaceName
parameter_list|()
block|{
name|NodeState
name|permissionStore
init|=
name|source
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|JCR_SYSTEM
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|REP_PERMISSION_STORE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nameCandidates
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|e
range|:
name|permissionStore
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|String
name|primaryType
init|=
name|e
operator|.
name|getNodeState
argument_list|()
operator|.
name|getName
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|NT_REP_PERMISSION_STORE
operator|.
name|equals
argument_list|(
name|primaryType
argument_list|)
condition|)
block|{
name|nameCandidates
operator|.
name|add
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nameCandidates
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|nameCandidates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|void
name|verify
parameter_list|()
block|{
specifier|final
name|NodeState
name|sourceRoot
init|=
name|source
operator|.
name|getRoot
argument_list|()
decl_stmt|;
specifier|final
name|NodeState
name|targetRoot
init|=
name|target
operator|.
name|getRoot
argument_list|()
decl_stmt|;
specifier|final
name|NodeState
name|reportingSource
init|=
name|ReportingNodeState
operator|.
name|wrap
argument_list|(
name|sourceRoot
argument_list|,
operator|new
name|LoggingReporter
argument_list|(
name|LOG
argument_list|,
literal|"Verifying"
argument_list|,
name|LOG_NODE_COPY
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying whether repositories are identical"
argument_list|)
expr_stmt|;
if|if
condition|(
name|targetRoot
operator|.
name|compareAgainstBaseState
argument_list|(
name|reportingSource
argument_list|,
operator|new
name|LoggingEqualsDiff
argument_list|(
name|LOG
argument_list|,
literal|"/"
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Verification result: both repositories are identical"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Verification result: repositories are not identical"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|NodeState
name|wrapNodeState
parameter_list|(
name|NodeState
name|source
parameter_list|,
name|boolean
name|tracePaths
parameter_list|,
name|boolean
name|filterPaths
parameter_list|)
block|{
name|NodeState
name|wrapped
init|=
name|source
decl_stmt|;
if|if
condition|(
name|migrateDocumentMetadata
condition|)
block|{
name|wrapped
operator|=
name|MetadataExposingNodeState
operator|.
name|wrap
argument_list|(
name|wrapped
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isCompleteMigration
argument_list|()
operator|&&
name|filterPaths
condition|)
block|{
name|wrapped
operator|=
name|FilteringNodeState
operator|.
name|wrap
argument_list|(
literal|"/"
argument_list|,
name|wrapped
argument_list|,
name|includePaths
argument_list|,
name|excludePaths
argument_list|,
name|FilteringNodeState
operator|.
name|NONE
argument_list|,
name|FilteringNodeState
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tracePaths
condition|)
block|{
name|wrapped
operator|=
name|ReportingNodeState
operator|.
name|wrap
argument_list|(
name|wrapped
argument_list|,
operator|new
name|LoggingReporter
argument_list|(
name|LOG
argument_list|,
literal|"Copying"
argument_list|,
name|LOG_NODE_COPY
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filterLongNames
condition|)
block|{
name|wrapped
operator|=
name|NameFilteringNodeState
operator|.
name|wrapRoot
argument_list|(
name|wrapped
argument_list|)
expr_stmt|;
block|}
return|return
name|wrapped
return|;
block|}
specifier|private
name|boolean
name|targetExists
parameter_list|()
block|{
return|return
name|target
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNodeEntries
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
return|;
block|}
block|}
end_class

end_unit

