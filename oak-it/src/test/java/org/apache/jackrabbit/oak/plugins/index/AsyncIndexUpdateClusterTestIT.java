begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|ASYNC_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|MISSING_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|concurrent
operator|.
name|ExecutorCloser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|LeaseCheckMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|MemoryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_class
specifier|public
class|class
name|AsyncIndexUpdateClusterTestIT
block|{
specifier|private
name|DocumentNodeStore
name|ns1
decl_stmt|;
specifier|private
name|DocumentNodeStore
name|ns2
decl_stmt|;
specifier|private
name|MemoryDocumentStore
name|ds
decl_stmt|;
specifier|private
name|MemoryBlobStore
name|bs
decl_stmt|;
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
specifier|private
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|illegalReindex
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|ns1
operator|=
name|create
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ns2
operator|=
name|create
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
block|{
name|shutdown
argument_list|()
expr_stmt|;
name|ns1
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|ns2
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Reindexing should not happen"
argument_list|,
name|illegalReindex
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|shutdown
parameter_list|()
block|{
try|try
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|missingCheckpointDueToEventualConsistency
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexStatusListener
name|l
init|=
operator|new
name|IndexStatusListener
argument_list|()
decl_stmt|;
name|AsyncIndexUpdate
name|async1
init|=
name|createAsync
argument_list|(
name|ns1
argument_list|,
name|l
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|async1
argument_list|)
expr_stmt|;
name|AsyncIndexUpdate
name|async2
init|=
name|createAsync
argument_list|(
name|ns2
argument_list|,
name|l
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|async2
argument_list|)
expr_stmt|;
comment|// Phase 1 - Base setup - Index definition creation and
comment|// performing initial indexing
comment|// Create index definition on NS1
name|NodeBuilder
name|b1
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|b1
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|merge
argument_list|(
name|b1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// Trigger indexing on NS1
name|async1
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// make sure initial index is visible on both cluster nodes
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|ns2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|l
operator|.
name|initDone
argument_list|()
expr_stmt|;
name|ScheduledExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
operator|new
name|ExecutorCloser
argument_list|(
name|executorService
argument_list|)
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|async1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|async2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|scheduleWithFixedDelay
argument_list|(
operator|new
name|PropertyMutator
argument_list|(
name|ns1
argument_list|,
literal|"node1"
argument_list|)
argument_list|,
literal|500
argument_list|,
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|scheduleWithFixedDelay
argument_list|(
operator|new
name|PropertyMutator
argument_list|(
name|ns2
argument_list|,
literal|"node2"
argument_list|)
argument_list|,
literal|500
argument_list|,
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
operator|&&
operator|!
name|illegalReindex
operator|.
name|get
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|AsyncIndexUpdate
name|createAsync
parameter_list|(
name|DocumentNodeStore
name|ns
parameter_list|,
specifier|final
name|IndexStatusListener
name|l
parameter_list|)
block|{
name|IndexEditorProvider
name|p
init|=
operator|new
name|TestEditorProvider
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
argument_list|,
name|l
argument_list|)
decl_stmt|;
name|AsyncIndexUpdate
name|aiu
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|ns
argument_list|,
name|p
argument_list|)
block|{
specifier|protected
name|boolean
name|updateIndex
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|String
name|beforeCheckpoint
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|String
name|afterCheckpoint
parameter_list|,
name|String
name|afterTime
parameter_list|,
name|AsyncUpdateCallback
name|callback
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|MISSING_NODE
operator|==
name|before
condition|)
block|{
name|l
operator|.
name|reindexing
argument_list|()
expr_stmt|;
block|}
return|return
name|super
operator|.
name|updateIndex
argument_list|(
name|before
argument_list|,
name|beforeCheckpoint
argument_list|,
name|after
argument_list|,
name|afterCheckpoint
argument_list|,
name|afterTime
argument_list|,
name|callback
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|aiu
operator|.
name|setCloseTimeOut
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|aiu
return|;
block|}
specifier|private
specifier|static
name|void
name|createIndexDefinition
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|IndexUtils
operator|.
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|DocumentNodeStore
name|create
parameter_list|(
name|int
name|clusterId
parameter_list|)
block|{
name|DocumentMK
operator|.
name|Builder
name|builder
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|ds
operator|==
literal|null
condition|)
block|{
name|ds
operator|=
operator|new
name|MemoryDocumentStore
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bs
operator|==
literal|null
condition|)
block|{
name|bs
operator|=
operator|new
name|MemoryBlobStore
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|setDocumentStore
argument_list|(
name|ds
argument_list|)
operator|.
name|setBlobStore
argument_list|(
name|bs
argument_list|)
expr_stmt|;
name|DocumentNodeStore
name|store
init|=
name|builder
operator|.
name|setClusterId
argument_list|(
operator|++
name|clusterId
argument_list|)
operator|.
name|setLeaseCheckMode
argument_list|(
name|LeaseCheckMode
operator|.
name|DISABLED
argument_list|)
operator|.
name|open
argument_list|()
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
return|return
name|store
return|;
block|}
specifier|private
class|class
name|PropertyMutator
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|NodeStore
name|nodeStore
decl_stmt|;
specifier|private
specifier|final
name|String
name|nodeName
decl_stmt|;
specifier|public
name|PropertyMutator
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|,
name|String
name|nodeName
parameter_list|)
block|{
name|this
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|this
operator|.
name|nodeName
operator|=
name|nodeName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|NodeBuilder
name|b
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b
operator|.
name|child
argument_list|(
name|nodeName
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|nodeStore
operator|.
name|merge
argument_list|(
name|b
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|IndexStatusListener
block|{
name|boolean
name|reindexOk
init|=
literal|true
decl_stmt|;
specifier|public
name|void
name|reindexing
parameter_list|()
block|{
if|if
condition|(
operator|!
name|reindexOk
condition|)
block|{
name|illegalReindex
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|initDone
parameter_list|()
block|{
name|reindexOk
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|waitRandomly
parameter_list|()
block|{
try|try
block|{
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|TestEditorProvider
implements|implements
name|IndexEditorProvider
block|{
specifier|private
specifier|final
name|IndexEditorProvider
name|delegate
decl_stmt|;
specifier|private
specifier|final
name|IndexStatusListener
name|listener
decl_stmt|;
specifier|private
name|TestEditorProvider
parameter_list|(
name|IndexEditorProvider
name|delegate
parameter_list|,
name|IndexStatusListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|getIndexEditor
parameter_list|(
annotation|@
name|NotNull
name|String
name|type
parameter_list|,
annotation|@
name|NotNull
name|NodeBuilder
name|definition
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|root
parameter_list|,
annotation|@
name|NotNull
name|IndexUpdateCallback
name|callback
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Editor
name|e
init|=
name|delegate
operator|.
name|getIndexEditor
argument_list|(
name|type
argument_list|,
name|definition
argument_list|,
name|root
argument_list|,
name|callback
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|e
operator|=
operator|new
name|TestEditor
argument_list|(
name|e
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
return|return
name|e
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TestEditor
implements|implements
name|Editor
block|{
specifier|private
specifier|final
name|Editor
name|editor
decl_stmt|;
specifier|private
specifier|final
name|TestEditor
name|parent
decl_stmt|;
specifier|private
specifier|final
name|IndexStatusListener
name|listener
decl_stmt|;
name|TestEditor
parameter_list|(
name|Editor
name|editor
parameter_list|,
name|IndexStatusListener
name|listener
parameter_list|)
block|{
name|this
argument_list|(
name|editor
argument_list|,
name|listener
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|TestEditor
parameter_list|(
name|Editor
name|editor
parameter_list|,
name|IndexStatusListener
name|listener
parameter_list|,
name|TestEditor
name|parent
parameter_list|)
block|{
name|this
operator|.
name|editor
operator|=
name|editor
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|enter
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|MISSING_NODE
operator|==
name|before
operator|&&
name|parent
operator|==
literal|null
condition|)
block|{
name|listener
operator|.
name|reindexing
argument_list|()
expr_stmt|;
block|}
name|editor
operator|.
name|enter
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|leave
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|listener
operator|.
name|waitRandomly
argument_list|()
expr_stmt|;
name|editor
operator|.
name|leave
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|editor
operator|.
name|propertyAdded
argument_list|(
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|editor
operator|.
name|propertyChanged
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|editor
operator|.
name|propertyDeleted
argument_list|(
name|before
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
name|createChildEditor
argument_list|(
name|editor
operator|.
name|childNodeAdded
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
name|createChildEditor
argument_list|(
name|editor
operator|.
name|childNodeChanged
argument_list|(
name|name
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
name|createChildEditor
argument_list|(
name|editor
operator|.
name|childNodeDeleted
argument_list|(
name|name
argument_list|,
name|before
argument_list|)
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|private
name|TestEditor
name|createChildEditor
parameter_list|(
name|Editor
name|editor
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|editor
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|TestEditor
argument_list|(
name|editor
argument_list|,
name|listener
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

