begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Reads and writes privilege definitions from and to the repository content  * without applying any validation.  */
end_comment

begin_class
specifier|public
class|class
name|PrivilegeDefinitionStore
implements|implements
name|PrivilegeConstants
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PrivilegeDefinitionStore
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The internal names of all built-in privileges that are not aggregates.      */
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|NON_AGGR_PRIVILEGES
init|=
operator|new
name|String
index|[]
block|{
name|REP_READ_NODES
block|,
name|REP_READ_PROPERTIES
block|,
name|REP_ADD_PROPERTIES
block|,
name|REP_ALTER_PROPERTIES
block|,
name|REP_REMOVE_PROPERTIES
block|,
name|JCR_ADD_CHILD_NODES
block|,
name|JCR_REMOVE_CHILD_NODES
block|,
name|JCR_REMOVE_NODE
block|,
name|JCR_READ_ACCESS_CONTROL
block|,
name|JCR_MODIFY_ACCESS_CONTROL
block|,
name|JCR_NODE_TYPE_MANAGEMENT
block|,
name|JCR_VERSION_MANAGEMENT
block|,
name|JCR_LOCK_MANAGEMENT
block|,
name|JCR_LIFECYCLE_MANAGEMENT
block|,
name|JCR_RETENTION_MANAGEMENT
block|,
name|JCR_WORKSPACE_MANAGEMENT
block|,
name|JCR_NODE_TYPE_DEFINITION_MANAGEMENT
block|,
name|JCR_NAMESPACE_MANAGEMENT
block|,
name|REP_PRIVILEGE_MANAGEMENT
block|,
name|REP_USER_MANAGEMENT
block|}
decl_stmt|;
comment|/**      * The internal names and aggregation definition of all built-in privileges      * that are aggregates (except for jcr:all).      */
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|AGGREGATE_PRIVILEGES
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|,
operator|new
name|String
index|[]
block|{
name|REP_READ_NODES
block|,
name|REP_READ_PROPERTIES
block|}
argument_list|,
name|JCR_MODIFY_PROPERTIES
argument_list|,
operator|new
name|String
index|[]
block|{
name|REP_ADD_PROPERTIES
block|,
name|REP_ALTER_PROPERTIES
block|,
name|REP_REMOVE_PROPERTIES
block|}
argument_list|,
name|JCR_WRITE
argument_list|,
operator|new
name|String
index|[]
block|{
name|JCR_MODIFY_PROPERTIES
block|,
name|JCR_ADD_CHILD_NODES
block|,
name|JCR_REMOVE_CHILD_NODES
block|,
name|JCR_REMOVE_NODE
block|}
argument_list|,
name|REP_WRITE
argument_list|,
operator|new
name|String
index|[]
block|{
name|JCR_WRITE
block|,
name|JCR_NODE_TYPE_MANAGEMENT
block|}
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Root
name|root
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|PrivilegeBits
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|bitsToNames
init|=
operator|new
name|HashMap
argument_list|<
name|PrivilegeBits
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|PrivilegeBits
name|next
decl_stmt|;
specifier|public
name|PrivilegeDefinitionStore
parameter_list|(
name|Root
name|root
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|Tree
name|privilegesTree
init|=
name|getPrivilegesTree
argument_list|()
decl_stmt|;
if|if
condition|(
name|privilegesTree
operator|!=
literal|null
operator|&&
name|privilegesTree
operator|.
name|hasProperty
argument_list|(
name|REP_NEXT
argument_list|)
condition|)
block|{
name|next
operator|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|privilegesTree
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|next
operator|=
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|REP_USER_MANAGEMENT
argument_list|)
operator|.
name|nextBits
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Returns the root tree for all privilege definitions stored in the content      * repository.      *      * @return The privileges root.      */
annotation|@
name|CheckForNull
name|Tree
name|getPrivilegesTree
parameter_list|()
block|{
return|return
name|root
operator|.
name|getTree
argument_list|(
name|PRIVILEGES_PATH
argument_list|)
return|;
block|}
comment|/**      * @param privilegeNames      * @return      */
annotation|@
name|Nonnull
specifier|public
name|PrivilegeBits
name|getBits
parameter_list|(
annotation|@
name|Nonnull
name|String
modifier|...
name|privilegeNames
parameter_list|)
block|{
if|if
condition|(
name|privilegeNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|PrivilegeBits
operator|.
name|EMPTY
return|;
block|}
name|Tree
name|privilegesTree
init|=
name|getPrivilegesTree
argument_list|()
decl_stmt|;
if|if
condition|(
name|privilegesTree
operator|==
literal|null
condition|)
block|{
return|return
name|PrivilegeBits
operator|.
name|EMPTY
return|;
block|}
name|PrivilegeBits
name|bits
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|privilegeName
range|:
name|privilegeNames
control|)
block|{
name|Tree
name|defTree
init|=
name|privilegesTree
operator|.
name|getChild
argument_list|(
name|privilegeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|defTree
operator|!=
literal|null
condition|)
block|{
name|bits
operator|.
name|add
argument_list|(
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|defTree
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bits
operator|.
name|unmodifiable
argument_list|()
return|;
block|}
comment|/**      * Resolve the given privilege bits to a set of privilege names.      *      * @param privilegeBits An instance of privilege bits.      * @return The names of the registed privileges associated with the given      *         bits. Any bits that don't have a corresponding privilege definition will      *         be ignored.      */
annotation|@
name|Nonnull
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getPrivilegeNames
parameter_list|(
name|PrivilegeBits
name|privilegeBits
parameter_list|)
block|{
if|if
condition|(
name|privilegeBits
operator|==
literal|null
operator|||
name|privilegeBits
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|bitsToNames
operator|.
name|containsKey
argument_list|(
name|privilegeBits
argument_list|)
condition|)
block|{
comment|// matches all built-in aggregates and single built-in privileges
return|return
name|bitsToNames
operator|.
name|get
argument_list|(
name|privilegeBits
argument_list|)
return|;
block|}
else|else
block|{
name|Tree
name|privilegesTree
init|=
name|getPrivilegesTree
argument_list|()
decl_stmt|;
if|if
condition|(
name|privilegesTree
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
if|if
condition|(
name|bitsToNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Tree
name|child
range|:
name|privilegesTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|bitsToNames
operator|.
name|put
argument_list|(
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|child
argument_list|)
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|privilegeNames
decl_stmt|;
if|if
condition|(
name|bitsToNames
operator|.
name|containsKey
argument_list|(
name|privilegeBits
argument_list|)
condition|)
block|{
name|privilegeNames
operator|=
name|bitsToNames
operator|.
name|get
argument_list|(
name|privilegeBits
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|privilegeNames
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|aggregates
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|privilegesTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|PrivilegeBits
name|bits
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|privilegeBits
operator|.
name|includes
argument_list|(
name|bits
argument_list|)
condition|)
block|{
name|privilegeNames
operator|.
name|add
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|hasProperty
argument_list|(
name|REP_AGGREGATES
argument_list|)
condition|)
block|{
name|aggregates
operator|.
name|addAll
argument_list|(
name|readDefinition
argument_list|(
name|child
argument_list|)
operator|.
name|getDeclaredAggregateNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|privilegeNames
operator|.
name|removeAll
argument_list|(
name|aggregates
argument_list|)
expr_stmt|;
name|bitsToNames
operator|.
name|put
argument_list|(
name|privilegeBits
operator|.
name|unmodifiable
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|privilegeNames
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|privilegeNames
return|;
block|}
block|}
comment|/**      * Read all registered privilege definitions from the content.      *      * @return All privilege definitions stored in the content.      */
annotation|@
name|Nonnull
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|PrivilegeDefinition
argument_list|>
name|readDefinitions
parameter_list|()
block|{
name|Tree
name|privilegesTree
init|=
name|getPrivilegesTree
argument_list|()
decl_stmt|;
if|if
condition|(
name|privilegesTree
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PrivilegeDefinition
argument_list|>
name|definitions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PrivilegeDefinition
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|privilegesTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|PrivilegeDefinition
name|def
init|=
name|readDefinition
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|definitions
operator|.
name|put
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
return|return
name|definitions
return|;
block|}
block|}
comment|/**      * Retrieve the privilege definition with the specified {@code privilegeName}.      *      * @param privilegeName The name of a registered privilege definition.      * @return The privilege definition with the specified name or {@code null}      *         if the name doesn't refer to a registered privilege.      */
annotation|@
name|CheckForNull
specifier|public
name|PrivilegeDefinition
name|readDefinition
parameter_list|(
name|String
name|privilegeName
parameter_list|)
block|{
name|Tree
name|privilegesTree
init|=
name|getPrivilegesTree
argument_list|()
decl_stmt|;
if|if
condition|(
name|privilegesTree
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|Tree
name|definitionTree
init|=
name|privilegesTree
operator|.
name|getChild
argument_list|(
name|privilegeName
argument_list|)
decl_stmt|;
return|return
operator|(
name|definitionTree
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|readDefinition
argument_list|(
name|definitionTree
argument_list|)
return|;
block|}
block|}
comment|/**      * @param definitionTree      * @return      */
annotation|@
name|Nonnull
specifier|static
name|PrivilegeDefinition
name|readDefinition
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|definitionTree
parameter_list|)
block|{
name|String
name|name
init|=
name|definitionTree
operator|.
name|getName
argument_list|()
decl_stmt|;
name|boolean
name|isAbstract
init|=
name|TreeUtil
operator|.
name|getBoolean
argument_list|(
name|definitionTree
argument_list|,
name|REP_IS_ABSTRACT
argument_list|)
decl_stmt|;
name|String
index|[]
name|declAggrNames
init|=
name|TreeUtil
operator|.
name|getStrings
argument_list|(
name|definitionTree
argument_list|,
name|REP_AGGREGATES
argument_list|)
decl_stmt|;
return|return
operator|new
name|PrivilegeDefinitionImpl
argument_list|(
name|name
argument_list|,
name|isAbstract
argument_list|,
name|declAggrNames
argument_list|)
return|;
block|}
comment|/**      * Write the given privilege definition to the repository content.      *      * @param definition The new privilege definition.      * @throws RepositoryException If the definition can't be written.      */
specifier|public
name|void
name|writeDefinition
parameter_list|(
name|PrivilegeDefinition
name|definition
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|writeDefinitions
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|definition
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create the built-in privilege definitions during repository setup.      *      * @throws RepositoryException If an error occurs.      */
name|void
name|writeBuiltInDefinitions
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|writeDefinitions
argument_list|(
name|getBuiltInDefinitions
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------------< private>---
comment|/**      * @param definitions      * @throws RepositoryException      */
specifier|private
name|void
name|writeDefinitions
parameter_list|(
name|Iterable
argument_list|<
name|PrivilegeDefinition
argument_list|>
name|definitions
parameter_list|)
throws|throws
name|RepositoryException
block|{
try|try
block|{
comment|// make sure the privileges path is defined
name|Tree
name|privilegesTree
init|=
name|getPrivilegesTree
argument_list|()
decl_stmt|;
if|if
condition|(
name|privilegesTree
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Privilege store does not exist."
argument_list|)
throw|;
block|}
name|NodeUtil
name|privilegesNode
init|=
operator|new
name|NodeUtil
argument_list|(
name|getPrivilegesTree
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PrivilegeDefinition
name|definition
range|:
name|definitions
control|)
block|{
if|if
condition|(
name|privilegesNode
operator|.
name|hasChild
argument_list|(
name|definition
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Privilege definition with name '"
operator|+
name|definition
operator|.
name|getName
argument_list|()
operator|+
literal|"' already exists."
argument_list|)
throw|;
block|}
name|writePrivilegeNode
argument_list|(
name|privilegesNode
argument_list|,
name|definition
argument_list|)
expr_stmt|;
block|}
comment|/*             update the property storing the next privilege bits with the             privileges root tree. this is a cheap way to detect collisions that             may arise from concurrent registration of custom privileges.             */
name|next
operator|.
name|writeTo
argument_list|(
name|privilegesTree
argument_list|)
expr_stmt|;
comment|// delegate validation to the commit validation (see above)
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|Throwable
name|t
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|RepositoryException
condition|)
block|{
throw|throw
operator|(
name|RepositoryException
operator|)
name|t
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|writePrivilegeNode
parameter_list|(
name|NodeUtil
name|privilegesNode
parameter_list|,
name|PrivilegeDefinition
name|definition
parameter_list|)
block|{
name|String
name|name
init|=
name|definition
operator|.
name|getName
argument_list|()
decl_stmt|;
name|NodeUtil
name|privNode
init|=
name|privilegesNode
operator|.
name|addChild
argument_list|(
name|name
argument_list|,
name|NT_REP_PRIVILEGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|definition
operator|.
name|isAbstract
argument_list|()
condition|)
block|{
name|privNode
operator|.
name|setBoolean
argument_list|(
name|REP_IS_ABSTRACT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|declAggrNames
init|=
name|definition
operator|.
name|getDeclaredAggregateNames
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|definition
operator|.
name|getDeclaredAggregateNames
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|boolean
name|isAggregate
init|=
name|declAggrNames
operator|.
name|length
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|isAggregate
condition|)
block|{
name|privNode
operator|.
name|setNames
argument_list|(
name|REP_AGGREGATES
argument_list|,
name|declAggrNames
argument_list|)
expr_stmt|;
block|}
name|PrivilegeBits
name|bits
decl_stmt|;
if|if
condition|(
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|bits
operator|=
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isAggregate
condition|)
block|{
name|bits
operator|=
name|getBits
argument_list|(
name|declAggrNames
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bits
operator|=
name|next
expr_stmt|;
name|next
operator|=
name|bits
operator|.
name|nextBits
argument_list|()
expr_stmt|;
block|}
name|bits
operator|.
name|writeTo
argument_list|(
name|privNode
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Collection
argument_list|<
name|PrivilegeDefinition
argument_list|>
name|getBuiltInDefinitions
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PrivilegeDefinition
argument_list|>
name|definitions
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|PrivilegeDefinition
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|privilegeName
range|:
name|NON_AGGR_PRIVILEGES
control|)
block|{
name|PrivilegeDefinition
name|def
init|=
operator|new
name|PrivilegeDefinitionImpl
argument_list|(
name|privilegeName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|definitions
operator|.
name|put
argument_list|(
name|privilegeName
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|privilegeName
range|:
name|AGGREGATE_PRIVILEGES
operator|.
name|keySet
argument_list|()
control|)
block|{
name|PrivilegeDefinition
name|def
init|=
operator|new
name|PrivilegeDefinitionImpl
argument_list|(
name|privilegeName
argument_list|,
literal|false
argument_list|,
name|AGGREGATE_PRIVILEGES
operator|.
name|get
argument_list|(
name|privilegeName
argument_list|)
argument_list|)
decl_stmt|;
name|definitions
operator|.
name|put
argument_list|(
name|privilegeName
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
name|PrivilegeDefinition
name|all
init|=
operator|new
name|PrivilegeDefinitionImpl
argument_list|(
name|JCR_ALL
argument_list|,
literal|false
argument_list|,
name|definitions
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|definitions
operator|.
name|put
argument_list|(
name|JCR_ALL
argument_list|,
name|all
argument_list|)
expr_stmt|;
return|return
name|definitions
operator|.
name|values
argument_list|()
return|;
block|}
block|}
end_class

end_unit

