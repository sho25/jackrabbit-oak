begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * Represents the index metadata file content as present in index-details.txt  */
end_comment

begin_class
specifier|final
class|class
name|IndexMeta
implements|implements
name|Comparable
argument_list|<
name|IndexMeta
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DIR_PREFIX
init|=
literal|"dir."
decl_stmt|;
specifier|final
name|String
name|indexPath
decl_stmt|;
specifier|final
name|long
name|creationTime
decl_stmt|;
specifier|final
name|int
name|metaFormatVersion
init|=
literal|1
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
decl_stmt|;
specifier|public
name|IndexMeta
parameter_list|(
name|String
name|indexPath
parameter_list|)
block|{
name|this
argument_list|(
name|indexPath
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IndexMeta
parameter_list|(
name|String
name|indexPath
parameter_list|,
name|long
name|creationTime
parameter_list|)
block|{
name|this
argument_list|(
name|indexPath
argument_list|,
name|creationTime
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IndexMeta
parameter_list|(
name|String
name|indexPath
parameter_list|,
name|long
name|creationTime
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|this
operator|.
name|indexPath
operator|=
name|indexPath
expr_stmt|;
name|this
operator|.
name|creationTime
operator|=
name|creationTime
expr_stmt|;
name|this
operator|.
name|properties
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IndexMeta
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|Properties
name|p
init|=
name|loadFromFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|this
operator|.
name|indexPath
operator|=
name|checkNotNull
argument_list|(
name|p
operator|.
name|getProperty
argument_list|(
literal|"indexPath"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|creationTime
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|checkNotNull
argument_list|(
name|p
operator|.
name|getProperty
argument_list|(
literal|"creationTime"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|properties
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|Maps
operator|.
name|fromProperties
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDirectoryMapping
parameter_list|(
name|String
name|jcrDirName
parameter_list|,
name|String
name|fsDirName
parameter_list|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|keyFromFSDirName
argument_list|(
name|fsDirName
argument_list|)
argument_list|,
name|jcrDirName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CheckForNull
specifier|public
name|String
name|getJcrNameFromFSName
parameter_list|(
name|String
name|fsDirName
parameter_list|)
block|{
name|String
name|nameKey
init|=
name|keyFromFSDirName
argument_list|(
name|fsDirName
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|nameKey
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|e
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns the file system name for the given JCR name which      * represents a directory on the file system      */
annotation|@
name|CheckForNull
specifier|public
name|String
name|getFSNameFromJCRName
parameter_list|(
name|String
name|jcrDirName
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|DIR_PREFIX
argument_list|)
operator|&&
name|jcrDirName
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
name|DIR_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|writeTo
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|p
operator|.
name|putAll
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
literal|"metaFormatVersion"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|metaFormatVersion
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
literal|"indexPath"
argument_list|,
name|indexPath
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
literal|"creationTime"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|creationTime
argument_list|)
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|os
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|store
argument_list|(
name|os
argument_list|,
literal|"Index metadata"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|IndexMeta
name|o
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|creationTime
argument_list|,
name|o
operator|.
name|creationTime
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s, %tc"
argument_list|,
name|indexPath
argument_list|,
name|creationTime
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|keyFromFSDirName
parameter_list|(
name|String
name|fsDirName
parameter_list|)
block|{
return|return
name|DIR_PREFIX
operator|+
name|fsDirName
return|;
block|}
specifier|private
specifier|static
name|Properties
name|loadFromFile
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|FileUtils
operator|.
name|openInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|p
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
finally|finally
block|{
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

