begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|AuthenticationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|DefaultWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|InternalSecurityProviderTest
block|{
specifier|private
specifier|static
specifier|final
name|ConfigurationParameters
name|PARAMS
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
specifier|private
name|InternalSecurityProvider
name|securityProvider
init|=
operator|new
name|InternalSecurityProvider
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testDefaultWhiteboard
parameter_list|()
block|{
name|assertNull
argument_list|(
name|securityProvider
operator|.
name|getWhiteboard
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetWhiteboard
parameter_list|()
block|{
name|Whiteboard
name|wb
init|=
operator|new
name|DefaultWhiteboard
argument_list|()
decl_stmt|;
name|securityProvider
operator|.
name|setWhiteboard
argument_list|(
name|wb
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|wb
argument_list|,
name|securityProvider
operator|.
name|getWhiteboard
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultPrincipalConfiguration
parameter_list|()
block|{
name|PrincipalConfiguration
name|defaultConfig
init|=
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|defaultConfig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPrincipalConfiguration
parameter_list|()
block|{
name|PrincipalConfiguration
name|pc
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|pc
operator|.
name|getParameters
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PARAMS
argument_list|)
expr_stmt|;
name|securityProvider
operator|.
name|setPrincipalConfiguration
argument_list|(
name|pc
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|pc
argument_list|,
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SecurityConfiguration
name|sc
range|:
name|securityProvider
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
if|if
condition|(
name|sc
operator|instanceof
name|PrincipalConfiguration
condition|)
block|{
name|assertSame
argument_list|(
name|pc
argument_list|,
name|sc
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|contains
argument_list|(
name|securityProvider
operator|.
name|getConfigurations
argument_list|()
argument_list|,
name|pc
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PARAMS
argument_list|,
name|securityProvider
operator|.
name|getParameters
argument_list|(
name|PrincipalConfiguration
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultUserConfiguration
parameter_list|()
block|{
name|assertNull
argument_list|(
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetUserConfiguration
parameter_list|()
block|{
name|UserConfiguration
name|uc
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|uc
operator|.
name|getParameters
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PARAMS
argument_list|)
expr_stmt|;
name|securityProvider
operator|.
name|setUserConfiguration
argument_list|(
name|uc
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|uc
argument_list|,
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SecurityConfiguration
name|sc
range|:
name|securityProvider
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
if|if
condition|(
name|sc
operator|instanceof
name|UserConfiguration
condition|)
block|{
name|assertSame
argument_list|(
name|uc
argument_list|,
name|sc
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|PARAMS
argument_list|,
name|securityProvider
operator|.
name|getParameters
argument_list|(
name|UserConfiguration
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultAuthenticationConfiguration
parameter_list|()
block|{
name|assertNull
argument_list|(
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|AuthenticationConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetAuthenticationConfiguration
parameter_list|()
block|{
name|AuthenticationConfiguration
name|ac
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|AuthenticationConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ac
operator|.
name|getParameters
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PARAMS
argument_list|)
expr_stmt|;
name|securityProvider
operator|.
name|setAuthenticationConfiguration
argument_list|(
name|ac
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ac
argument_list|,
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|AuthenticationConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SecurityConfiguration
name|sc
range|:
name|securityProvider
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
if|if
condition|(
name|sc
operator|instanceof
name|AuthenticationConfiguration
condition|)
block|{
name|assertSame
argument_list|(
name|ac
argument_list|,
name|sc
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|PARAMS
argument_list|,
name|securityProvider
operator|.
name|getParameters
argument_list|(
name|AuthenticationConfiguration
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultAuthorizationConfiguration
parameter_list|()
block|{
name|assertNull
argument_list|(
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetAuthorizationConfiguration
parameter_list|()
block|{
name|AuthorizationConfiguration
name|ac
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ac
operator|.
name|getParameters
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PARAMS
argument_list|)
expr_stmt|;
name|securityProvider
operator|.
name|setAuthorizationConfiguration
argument_list|(
name|ac
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ac
argument_list|,
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SecurityConfiguration
name|sc
range|:
name|securityProvider
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
if|if
condition|(
name|sc
operator|instanceof
name|AuthorizationConfiguration
condition|)
block|{
name|assertSame
argument_list|(
name|ac
argument_list|,
name|sc
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|PARAMS
argument_list|,
name|securityProvider
operator|.
name|getParameters
argument_list|(
name|AuthorizationConfiguration
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultPrivilegeConfiguration
parameter_list|()
block|{
name|assertNull
argument_list|(
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|PrivilegeConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPrivilegeConfiguration
parameter_list|()
block|{
name|PrivilegeConfiguration
name|pc
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|PrivilegeConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|pc
operator|.
name|getParameters
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PARAMS
argument_list|)
expr_stmt|;
name|securityProvider
operator|.
name|setPrivilegeConfiguration
argument_list|(
name|pc
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|pc
argument_list|,
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|PrivilegeConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SecurityConfiguration
name|sc
range|:
name|securityProvider
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
if|if
condition|(
name|sc
operator|instanceof
name|PrivilegeConfiguration
condition|)
block|{
name|assertSame
argument_list|(
name|pc
argument_list|,
name|sc
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|PARAMS
argument_list|,
name|securityProvider
operator|.
name|getParameters
argument_list|(
name|PrivilegeConfiguration
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultTokenConfiguration
parameter_list|()
block|{
name|assertNull
argument_list|(
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|TokenConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetTokenConfiguration
parameter_list|()
block|{
name|TokenConfiguration
name|tc
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|TokenConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|tc
operator|.
name|getParameters
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PARAMS
argument_list|)
expr_stmt|;
name|securityProvider
operator|.
name|setTokenConfiguration
argument_list|(
name|tc
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|tc
argument_list|,
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|TokenConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SecurityConfiguration
name|sc
range|:
name|securityProvider
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
if|if
condition|(
name|sc
operator|instanceof
name|TokenConfiguration
condition|)
block|{
name|assertSame
argument_list|(
name|tc
argument_list|,
name|sc
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|PARAMS
argument_list|,
name|securityProvider
operator|.
name|getParameters
argument_list|(
name|TokenConfiguration
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetUnknownConfiguration
parameter_list|()
block|{
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|SecurityConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetParametersForNull
parameter_list|()
block|{
name|assertSame
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|securityProvider
operator|.
name|getParameters
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetParametersForUnknown
parameter_list|()
block|{
name|assertSame
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|securityProvider
operator|.
name|getParameters
argument_list|(
literal|"unknownName"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

