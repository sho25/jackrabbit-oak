begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|min
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BINARIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BINARY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|memory
operator|.
name|MemoryStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_class
specifier|public
class|class
name|RecordTest
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|FileStore
name|store
decl_stmt|;
specifier|private
name|SegmentWriter
name|writer
decl_stmt|;
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|0xcafefaceL
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|store
operator|=
name|fileStoreBuilder
argument_list|(
name|folder
operator|.
name|getRoot
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|writer
operator|=
name|store
operator|.
name|getWriter
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStreamRecord
parameter_list|()
throws|throws
name|IOException
block|{
name|checkRandomStreamRecord
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|checkRandomStreamRecord
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkRandomStreamRecord
argument_list|(
literal|0x79
argument_list|)
expr_stmt|;
name|checkRandomStreamRecord
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|checkRandomStreamRecord
argument_list|(
literal|0x4079
argument_list|)
expr_stmt|;
name|checkRandomStreamRecord
argument_list|(
literal|0x4080
argument_list|)
expr_stmt|;
name|checkRandomStreamRecord
argument_list|(
name|SegmentStream
operator|.
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|checkRandomStreamRecord
argument_list|(
name|SegmentStream
operator|.
name|BLOCK_SIZE
operator|+
literal|1
argument_list|)
expr_stmt|;
name|checkRandomStreamRecord
argument_list|(
name|Segment
operator|.
name|MAX_SEGMENT_SIZE
argument_list|)
expr_stmt|;
name|checkRandomStreamRecord
argument_list|(
name|Segment
operator|.
name|MAX_SEGMENT_SIZE
operator|+
literal|1
argument_list|)
expr_stmt|;
name|checkRandomStreamRecord
argument_list|(
name|Segment
operator|.
name|MAX_SEGMENT_SIZE
operator|*
literal|2
argument_list|)
expr_stmt|;
name|checkRandomStreamRecord
argument_list|(
name|Segment
operator|.
name|MAX_SEGMENT_SIZE
operator|*
literal|2
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkRandomStreamRecord
parameter_list|(
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|source
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|Blob
name|value
init|=
operator|new
name|SegmentBlob
argument_list|(
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|writer
operator|.
name|writeStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|source
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|InputStream
name|stream
init|=
name|value
operator|.
name|getNewStream
argument_list|()
decl_stmt|;
name|checkBlob
argument_list|(
name|source
argument_list|,
name|value
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkBlob
argument_list|(
name|source
argument_list|,
name|value
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkBlob
argument_list|(
name|source
argument_list|,
name|value
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|checkBlob
argument_list|(
name|source
argument_list|,
name|value
argument_list|,
literal|16387
argument_list|)
expr_stmt|;
name|checkBlob
argument_list|(
name|source
argument_list|,
name|value
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|checkBlob
parameter_list|(
name|byte
index|[]
name|expected
parameter_list|,
name|Blob
name|actual
parameter_list|,
name|int
name|skip
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|InputStream
name|stream
init|=
name|actual
operator|.
name|getNewStream
argument_list|()
init|)
block|{
name|stream
operator|.
name|skip
argument_list|(
name|skip
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|349
index|]
decl_stmt|;
comment|// prime number
name|int
name|offset
init|=
name|min
argument_list|(
name|skip
argument_list|,
name|expected
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
name|stream
operator|.
name|read
argument_list|(
name|b
argument_list|)
init|;
name|n
operator|!=
operator|-
literal|1
condition|;
name|n
operator|=
name|stream
operator|.
name|read
argument_list|(
name|b
argument_list|)
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|b
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|offset
operator|+=
name|n
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|offset
argument_list|,
name|expected
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|stream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyNode
parameter_list|()
throws|throws
name|IOException
block|{
name|NodeState
name|before
init|=
name|EMPTY_NODE
decl_stmt|;
name|NodeState
name|after
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|writer
argument_list|,
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|writer
operator|.
name|writeNode
argument_list|(
name|before
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleNode
parameter_list|()
throws|throws
name|IOException
block|{
name|NodeState
name|before
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|123
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"baz"
argument_list|,
name|Math
operator|.
name|PI
argument_list|)
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|after
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|writer
argument_list|,
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|writer
operator|.
name|writeNode
argument_list|(
name|before
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeepNode
parameter_list|()
throws|throws
name|IOException
block|{
name|NodeBuilder
name|root
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|root
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|=
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|after
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|writer
argument_list|,
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|writer
operator|.
name|writeNode
argument_list|(
name|before
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testManyMapDeletes
parameter_list|()
throws|throws
name|IOException
block|{
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"test"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|NodeState
name|before
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|writer
argument_list|,
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|writer
operator|.
name|writeNode
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|before
argument_list|)
expr_stmt|;
name|builder
operator|=
name|before
operator|.
name|builder
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|900
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"test"
operator|+
name|i
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|NodeState
name|after
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|writer
argument_list|,
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|writer
operator|.
name|writeNode
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiValuedBinaryPropertyAcrossSegments
parameter_list|()
throws|throws
name|IOException
block|{
comment|// biggest possible inlined value record
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|Segment
operator|.
name|MEDIUM_LIMIT
operator|-
literal|1
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// create enough copies of the value to fill a full segment
name|List
argument_list|<
name|Blob
argument_list|>
name|blobs
init|=
name|newArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
name|blobs
operator|.
name|size
argument_list|()
operator|*
name|data
operator|.
name|length
operator|<
name|Segment
operator|.
name|MAX_SEGMENT_SIZE
condition|)
block|{
name|blobs
operator|.
name|add
argument_list|(
operator|new
name|SegmentBlob
argument_list|(
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|writer
operator|.
name|writeStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// write a simple node that'll now be stored in a separate segment
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"test"
argument_list|,
name|blobs
argument_list|,
name|BINARIES
argument_list|)
expr_stmt|;
name|NodeState
name|state
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|writer
argument_list|,
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|writer
operator|.
name|writeNode
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// all the blobs should still be accessible, even if they're
comment|// referenced from another segment
for|for
control|(
name|Blob
name|blob
range|:
name|state
operator|.
name|getProperty
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getValue
argument_list|(
name|BINARIES
argument_list|)
control|)
block|{
try|try
block|{
name|blob
operator|.
name|getNewStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"OAK-1374"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBinaryPropertyFromExternalSegmentStore
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommitFailedException
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|Segment
operator|.
name|MEDIUM_LIMIT
operator|+
literal|1
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|SegmentNodeStore
name|extStore
init|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
operator|new
name|MemoryStore
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|NodeBuilder
name|extRootBuilder
init|=
name|extStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Blob
name|extBlob
init|=
name|extRootBuilder
operator|.
name|createBlob
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|extRootBuilder
operator|.
name|setProperty
argument_list|(
literal|"binary"
argument_list|,
name|extBlob
argument_list|,
name|BINARY
argument_list|)
expr_stmt|;
name|extStore
operator|.
name|merge
argument_list|(
name|extRootBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|PropertyState
name|extPropertyState
init|=
name|extStore
operator|.
name|getRoot
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"binary"
argument_list|)
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|extPropertyState
argument_list|)
expr_stmt|;
name|NodeState
name|state
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|writer
argument_list|,
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|writer
operator|.
name|writeNode
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|InputStream
name|is
init|=
name|state
operator|.
name|getProperty
argument_list|(
literal|"binary"
argument_list|)
operator|.
name|getValue
argument_list|(
name|BINARY
argument_list|)
operator|.
name|getNewStream
argument_list|()
decl_stmt|;
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SegmentNotFoundException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"OAK-4307 SegmentWriter saves references to external blobs"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringPrimaryType
parameter_list|()
throws|throws
name|IOException
block|{
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"foo"
argument_list|,
name|STRING
argument_list|)
expr_stmt|;
name|NodeState
name|state
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|writer
argument_list|,
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|writer
operator|.
name|writeNode
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|state
operator|.
name|getProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringMixinTypes
parameter_list|()
throws|throws
name|IOException
block|{
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"jcr:mixinTypes"
argument_list|,
name|singletonList
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
expr_stmt|;
name|NodeState
name|state
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|writer
argument_list|,
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|writer
operator|.
name|writeNode
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|state
operator|.
name|getProperty
argument_list|(
literal|"jcr:mixinTypes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

