begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|TestPermissionProvider
operator|.
name|NAME_ACCESSIBLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|TestPermissionProvider
operator|.
name|NAME_NON_ACCESSIBLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|TestPermissionProvider
operator|.
name|NAME_NON_EXISTING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|SecureNodeBuilderTest
block|{
specifier|private
specifier|final
name|NodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|TestPermissionProvider
name|permissionProvider
init|=
operator|new
name|TestPermissionProvider
argument_list|()
decl_stmt|;
specifier|private
name|SecureNodeBuilder
name|secureNodeBuilder
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|rootBuilder
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|rootBuilder
operator|.
name|child
argument_list|(
name|NAME_ACCESSIBLE
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|rootBuilder
operator|.
name|child
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|rootBuilder
argument_list|,
operator|new
name|EmptyHook
argument_list|()
argument_list|,
operator|new
name|CommitInfo
argument_list|(
literal|"id"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|rootBuilder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|secureNodeBuilder
operator|=
operator|new
name|SecureNodeBuilder
argument_list|(
name|rootBuilder
argument_list|,
operator|new
name|LazyValue
argument_list|<
name|PermissionProvider
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|PermissionProvider
name|createValue
parameter_list|()
block|{
return|return
name|permissionProvider
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChildNodeNonExisting
parameter_list|()
block|{
name|NodeBuilder
name|child
init|=
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|child
operator|instanceof
name|SecureNodeBuilder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChildNode
parameter_list|()
block|{
name|NodeBuilder
name|child
init|=
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_ACCESSIBLE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|child
operator|instanceof
name|SecureNodeBuilder
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|child
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChildNodeNonAccessible
parameter_list|()
block|{
name|NodeBuilder
name|child
init|=
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|child
operator|instanceof
name|SecureNodeBuilder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExists
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|secureNodeBuilder
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExistsNonExisting
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExistsAccessible
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_ACCESSIBLE
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExistsNonAccessible
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBaseState
parameter_list|()
block|{
name|NodeState
name|ns
init|=
name|secureNodeBuilder
operator|.
name|getBaseState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|ns
operator|instanceof
name|SecureNodeState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBaseStateNonExisting
parameter_list|()
block|{
name|NodeState
name|ns
init|=
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
operator|.
name|getBaseState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|ns
operator|instanceof
name|SecureNodeState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBaseStateNonAccessible
parameter_list|()
block|{
name|NodeState
name|ns
init|=
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
operator|.
name|getBaseState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|ns
operator|instanceof
name|SecureNodeState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNodeState
parameter_list|()
block|{
name|NodeState
name|ns
init|=
name|secureNodeBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|ns
operator|instanceof
name|SecureNodeState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNodeStateNonExisting
parameter_list|()
block|{
name|NodeState
name|ns
init|=
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|ns
operator|instanceof
name|SecureNodeState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNodeStateNonAccessible
parameter_list|()
block|{
name|NodeState
name|ns
init|=
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|ns
operator|instanceof
name|SecureNodeState
argument_list|)
expr_stmt|;
block|}
comment|/**      * Illustrating usage of {@link SecureNodeBuilder#baseChanged()} as it is      * currently present with {@link MutableRoot#commit()}, {@link MutableRoot#rebase()}      * and {@link MutableRoot#refresh()}: baseChanged is call<strong>before</strong>      * the permission provider is refreshed, which depending on the implementation      * may lead to a stale {@code TreePermission} being obtained with the non-lazy      * refresh as described in OAK-5355.      *      * @see<a href"https://issues.apache.org/jira/browse/OAK-5355">OAK-5355</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testBaseChanged
parameter_list|()
block|{
name|secureNodeBuilder
operator|.
name|baseChanged
argument_list|()
expr_stmt|;
comment|// change the behavior of the permission provider to assure that subsequent
comment|// calls are always reading the most up to date information
try|try
block|{
name|permissionProvider
operator|.
name|denyAll
operator|=
literal|true
expr_stmt|;
name|assertFalse
argument_list|(
name|secureNodeBuilder
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|secureNodeBuilder
operator|.
name|hasChildNode
argument_list|(
name|NAME_ACCESSIBLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|secureNodeBuilder
operator|.
name|hasProperty
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|secureNodeBuilder
operator|.
name|isNew
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|secureNodeBuilder
operator|.
name|getBaseState
argument_list|()
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|secureNodeBuilder
operator|.
name|getNodeState
argument_list|()
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|permissionProvider
operator|.
name|denyAll
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasProperty
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|secureNodeBuilder
operator|.
name|hasProperty
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_ACCESSIBLE
argument_list|)
operator|.
name|hasProperty
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
operator|.
name|hasProperty
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
operator|.
name|hasProperty
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPropertyNonAccessible
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|secureNodeBuilder
operator|.
name|hasProperty
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_ACCESSIBLE
argument_list|)
operator|.
name|hasProperty
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
operator|.
name|hasProperty
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
operator|.
name|hasProperty
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPropertyNonExisting
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|secureNodeBuilder
operator|.
name|hasProperty
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_ACCESSIBLE
argument_list|)
operator|.
name|hasProperty
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
operator|.
name|hasProperty
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
operator|.
name|hasProperty
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProperty
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|secureNodeBuilder
operator|.
name|getProperty
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_ACCESSIBLE
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPropertyNonAccessible
parameter_list|()
block|{
name|assertNull
argument_list|(
name|secureNodeBuilder
operator|.
name|getProperty
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_ACCESSIBLE
argument_list|)
operator|.
name|getProperty
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
operator|.
name|getProperty
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
operator|.
name|getProperty
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPropertyNonExisting
parameter_list|()
block|{
name|assertNull
argument_list|(
name|secureNodeBuilder
operator|.
name|getProperty
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_ACCESSIBLE
argument_list|)
operator|.
name|getProperty
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
operator|.
name|getProperty
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
operator|.
name|getProperty
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPropertyCount
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|secureNodeBuilder
operator|.
name|getPropertyCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_ACCESSIBLE
argument_list|)
operator|.
name|getPropertyCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
operator|.
name|getPropertyCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
operator|.
name|getPropertyCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPropertyCountCanReadProperties
parameter_list|()
block|{
try|try
block|{
name|permissionProvider
operator|.
name|canReadProperties
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|secureNodeBuilder
operator|.
name|getPropertyCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_ACCESSIBLE
argument_list|)
operator|.
name|getPropertyCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
operator|.
name|getPropertyCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
operator|.
name|getPropertyCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|permissionProvider
operator|.
name|canReadProperties
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProperties
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|secureNodeBuilder
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_ACCESSIBLE
argument_list|)
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPropertiesCanReadProperties
parameter_list|()
block|{
try|try
block|{
name|permissionProvider
operator|.
name|canReadProperties
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|secureNodeBuilder
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_ACCESSIBLE
argument_list|)
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|secureNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|permissionProvider
operator|.
name|canReadProperties
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPropertiesAfterSet
parameter_list|()
block|{
name|secureNodeBuilder
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"another"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"v"
argument_list|,
literal|"v2"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|secureNodeBuilder
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPropertiesAfterRemoval
parameter_list|()
block|{
name|secureNodeBuilder
operator|.
name|removeProperty
argument_list|(
literal|"prop"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|secureNodeBuilder
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBoolean
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|secureNodeBuilder
operator|.
name|getBoolean
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|secureNodeBuilder
operator|.
name|getBoolean
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|secureNodeBuilder
operator|.
name|getBoolean
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBooleanTypeBoolean
parameter_list|()
block|{
name|secureNodeBuilder
operator|.
name|setProperty
argument_list|(
literal|"boolean"
argument_list|,
literal|true
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|secureNodeBuilder
operator|.
name|getBoolean
argument_list|(
literal|"boolean"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBooleanTypeBooleans
parameter_list|()
block|{
name|secureNodeBuilder
operator|.
name|setProperty
argument_list|(
literal|"booleans"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|,
name|Type
operator|.
name|BOOLEANS
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|secureNodeBuilder
operator|.
name|getBoolean
argument_list|(
literal|"booleans"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|secureNodeBuilder
operator|.
name|getString
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|secureNodeBuilder
operator|.
name|getString
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|secureNodeBuilder
operator|.
name|getString
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetStringTypeStrings
parameter_list|()
block|{
name|secureNodeBuilder
operator|.
name|setProperty
argument_list|(
literal|"strings"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|secureNodeBuilder
operator|.
name|getString
argument_list|(
literal|"strings"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetStringTypeLong
parameter_list|()
block|{
name|secureNodeBuilder
operator|.
name|setProperty
argument_list|(
literal|"long"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|secureNodeBuilder
operator|.
name|getString
argument_list|(
literal|"long"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetName
parameter_list|()
block|{
name|assertNull
argument_list|(
name|secureNodeBuilder
operator|.
name|getName
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|secureNodeBuilder
operator|.
name|getName
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|secureNodeBuilder
operator|.
name|getName
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNameTypeNames
parameter_list|()
block|{
name|secureNodeBuilder
operator|.
name|setProperty
argument_list|(
literal|"names"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|secureNodeBuilder
operator|.
name|getName
argument_list|(
literal|"names"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNameTypeName
parameter_list|()
block|{
name|secureNodeBuilder
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|secureNodeBuilder
operator|.
name|getName
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNames
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|secureNodeBuilder
operator|.
name|getNames
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|secureNodeBuilder
operator|.
name|getNames
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|secureNodeBuilder
operator|.
name|getNames
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNamesTypeNames
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|names
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|secureNodeBuilder
operator|.
name|setProperty
argument_list|(
literal|"names"
argument_list|,
name|names
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|names
argument_list|,
name|secureNodeBuilder
operator|.
name|getNames
argument_list|(
literal|"names"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNamesTypeName
parameter_list|()
block|{
name|secureNodeBuilder
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|secureNodeBuilder
operator|.
name|getNames
argument_list|(
literal|"name"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetProperty
parameter_list|()
block|{
name|secureNodeBuilder
operator|.
name|setProperty
argument_list|(
literal|"another"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|secureNodeBuilder
operator|.
name|hasProperty
argument_list|(
literal|"another"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPropertyReturnsSame
parameter_list|()
block|{
name|assertSame
argument_list|(
name|secureNodeBuilder
argument_list|,
name|secureNodeBuilder
operator|.
name|setProperty
argument_list|(
literal|"another"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPropertyModifiedNonAccessible
parameter_list|()
block|{
name|secureNodeBuilder
operator|.
name|setProperty
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|,
literal|"anothervalue"
argument_list|)
expr_stmt|;
comment|// modified property must exist irrespective of permission eval
name|assertTrue
argument_list|(
name|secureNodeBuilder
operator|.
name|hasProperty
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPropertyNewNonAccessible
parameter_list|()
block|{
name|String
name|name
init|=
name|NAME_NON_ACCESSIBLE
operator|+
literal|"-new"
decl_stmt|;
name|secureNodeBuilder
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
comment|// new property must exist irrespective of permission eval
name|assertTrue
argument_list|(
name|secureNodeBuilder
operator|.
name|hasProperty
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveProperty
parameter_list|()
block|{
name|secureNodeBuilder
operator|.
name|removeProperty
argument_list|(
literal|"prop"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|secureNodeBuilder
operator|.
name|hasProperty
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovePropertyNonAccessible
parameter_list|()
block|{
name|secureNodeBuilder
operator|.
name|removeProperty
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
expr_stmt|;
comment|// verify that property has not been removed
try|try
block|{
name|permissionProvider
operator|.
name|canReadProperties
operator|=
literal|true
expr_stmt|;
name|assertTrue
argument_list|(
name|secureNodeBuilder
operator|.
name|hasProperty
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|permissionProvider
operator|.
name|canReadProperties
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovePropertyReturnsSame
parameter_list|()
block|{
name|assertSame
argument_list|(
name|secureNodeBuilder
argument_list|,
name|secureNodeBuilder
operator|.
name|removeProperty
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasChildNode
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|secureNodeBuilder
operator|.
name|hasChildNode
argument_list|(
name|NAME_ACCESSIBLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasChildNodeNonAccessible
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|secureNodeBuilder
operator|.
name|hasChildNode
argument_list|(
name|NAME_NON_ACCESSIBLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasChildNodeNonExisting
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|secureNodeBuilder
operator|.
name|hasChildNode
argument_list|(
name|NAME_NON_EXISTING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChildNodeCount
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|secureNodeBuilder
operator|.
name|getChildNodeCount
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChildNodeCountCanReadAll
parameter_list|()
block|{
try|try
block|{
name|permissionProvider
operator|.
name|canReadAll
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|secureNodeBuilder
operator|.
name|getChildNodeCount
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|permissionProvider
operator|.
name|canReadAll
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

