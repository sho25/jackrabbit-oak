begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|command
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|BaseMongoTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Commit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Instruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|AddNodeInstructionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|CommitImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|RemoveNodeInstructionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|scenario
operator|.
name|SimpleNodeScenario
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"javadoc"
argument_list|)
specifier|public
class|class
name|NodeExistsCommandMongoTest
extends|extends
name|BaseMongoTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|simple
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleNodeScenario
name|scenario
init|=
operator|new
name|SimpleNodeScenario
argument_list|(
name|mongoConnection
argument_list|)
decl_stmt|;
name|Long
name|revisionId
init|=
name|scenario
operator|.
name|create
argument_list|()
decl_stmt|;
name|NodeExistsCommandMongo
name|command
init|=
operator|new
name|NodeExistsCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/a"
argument_list|,
name|revisionId
argument_list|)
decl_stmt|;
name|boolean
name|exists
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|exists
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|NodeExistsCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/a/b"
argument_list|,
name|revisionId
argument_list|)
expr_stmt|;
name|exists
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|exists
argument_list|)
expr_stmt|;
name|revisionId
operator|=
name|scenario
operator|.
name|delete_A
argument_list|()
expr_stmt|;
name|command
operator|=
operator|new
name|NodeExistsCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/a"
argument_list|,
name|revisionId
argument_list|)
expr_stmt|;
name|exists
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|exists
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|NodeExistsCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/a/b"
argument_list|,
name|revisionId
argument_list|)
expr_stmt|;
name|exists
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|exists
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|withoutRevisionId
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleNodeScenario
name|scenario
init|=
operator|new
name|SimpleNodeScenario
argument_list|(
name|mongoConnection
argument_list|)
decl_stmt|;
name|scenario
operator|.
name|create
argument_list|()
expr_stmt|;
name|NodeExistsCommandMongo
name|command
init|=
operator|new
name|NodeExistsCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/a"
argument_list|,
literal|null
comment|/* revisionId */
argument_list|)
decl_stmt|;
name|boolean
name|exists
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|exists
argument_list|)
expr_stmt|;
name|scenario
operator|.
name|delete_A
argument_list|()
expr_stmt|;
name|command
operator|=
operator|new
name|NodeExistsCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/a"
argument_list|,
literal|null
comment|/* revisionId */
argument_list|)
expr_stmt|;
name|exists
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|exists
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|withInvalidRevisionId
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleNodeScenario
name|scenario
init|=
operator|new
name|SimpleNodeScenario
argument_list|(
name|mongoConnection
argument_list|)
decl_stmt|;
name|scenario
operator|.
name|create
argument_list|()
expr_stmt|;
name|NodeExistsCommandMongo
name|command
init|=
operator|new
name|NodeExistsCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/a"
argument_list|,
literal|123456789L
argument_list|)
decl_stmt|;
try|try
block|{
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected: Invalid revision id exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{         }
block|}
annotation|@
name|Test
specifier|public
name|void
name|parentDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleNodeScenario
name|scenario
init|=
operator|new
name|SimpleNodeScenario
argument_list|(
name|mongoConnection
argument_list|)
decl_stmt|;
name|scenario
operator|.
name|create
argument_list|()
expr_stmt|;
name|NodeExistsCommandMongo
name|command
init|=
operator|new
name|NodeExistsCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/a/b"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|exists
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|exists
argument_list|)
expr_stmt|;
name|scenario
operator|.
name|delete_A
argument_list|()
expr_stmt|;
name|command
operator|=
operator|new
name|NodeExistsCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/a/b"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|exists
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|exists
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|grandParentDelete
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add a->b->c->d.
name|List
argument_list|<
name|Instruction
argument_list|>
name|instructions
init|=
operator|new
name|LinkedList
argument_list|<
name|Instruction
argument_list|>
argument_list|()
decl_stmt|;
name|instructions
operator|.
name|add
argument_list|(
operator|new
name|AddNodeInstructionImpl
argument_list|(
literal|"/"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|instructions
operator|.
name|add
argument_list|(
operator|new
name|AddNodeInstructionImpl
argument_list|(
literal|"/a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|instructions
operator|.
name|add
argument_list|(
operator|new
name|AddNodeInstructionImpl
argument_list|(
literal|"/a/b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|instructions
operator|.
name|add
argument_list|(
operator|new
name|AddNodeInstructionImpl
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|Commit
name|commit
init|=
operator|new
name|CommitImpl
argument_list|(
literal|"/"
argument_list|,
literal|"TODO"
argument_list|,
literal|"Add nodes"
argument_list|,
name|instructions
argument_list|)
decl_stmt|;
name|CommitCommandMongo
name|command
init|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit
argument_list|)
decl_stmt|;
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// Remove b.
name|instructions
operator|=
operator|new
name|LinkedList
argument_list|<
name|Instruction
argument_list|>
argument_list|()
expr_stmt|;
name|instructions
operator|.
name|add
argument_list|(
operator|new
name|RemoveNodeInstructionImpl
argument_list|(
literal|"/a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|commit
operator|=
operator|new
name|CommitImpl
argument_list|(
literal|"/a"
argument_list|,
literal|"-b"
argument_list|,
literal|"Delete /b"
argument_list|,
name|instructions
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit
argument_list|)
expr_stmt|;
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// Check for d.
name|NodeExistsCommandMongo
name|existsCommand
init|=
operator|new
name|NodeExistsCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/a/b/c/d"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|exists
init|=
name|existsCommand
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|exists
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|existsInHeadRevision
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Instruction
argument_list|>
name|instructions
init|=
operator|new
name|LinkedList
argument_list|<
name|Instruction
argument_list|>
argument_list|()
decl_stmt|;
comment|// Add /a
name|instructions
operator|.
name|add
argument_list|(
operator|new
name|AddNodeInstructionImpl
argument_list|(
literal|"/"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|Commit
name|commit1
init|=
operator|new
name|CommitImpl
argument_list|(
literal|"/"
argument_list|,
literal|"+a : {}"
argument_list|,
literal|"Add node a"
argument_list|,
name|instructions
argument_list|)
decl_stmt|;
name|CommitCommandMongo
name|command
init|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit1
argument_list|)
decl_stmt|;
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// Add /a/b
name|instructions
operator|=
operator|new
name|LinkedList
argument_list|<
name|Instruction
argument_list|>
argument_list|()
expr_stmt|;
name|instructions
operator|.
name|add
argument_list|(
operator|new
name|AddNodeInstructionImpl
argument_list|(
literal|"/a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|Commit
name|commit2
init|=
operator|new
name|CommitImpl
argument_list|(
literal|"/a"
argument_list|,
literal|"+b : {}"
argument_list|,
literal|"Add node a/b"
argument_list|,
name|instructions
argument_list|)
decl_stmt|;
name|command
operator|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit2
argument_list|)
expr_stmt|;
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// Verify /a is visible in the head revision
name|NodeExistsCommandMongo
name|command2
init|=
operator|new
name|NodeExistsCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/a"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|exists
init|=
name|command2
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The node a is not found in the head revision!"
argument_list|,
name|exists
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|existsInOldRevNotInNewRev
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleNodeScenario
name|scenario
init|=
operator|new
name|SimpleNodeScenario
argument_list|(
name|mongoConnection
argument_list|)
decl_stmt|;
name|Long
name|rev1
init|=
name|scenario
operator|.
name|create
argument_list|()
decl_stmt|;
name|Long
name|rev2
init|=
name|scenario
operator|.
name|delete_A
argument_list|()
decl_stmt|;
name|NodeExistsCommandMongo
name|command
init|=
operator|new
name|NodeExistsCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/a"
argument_list|,
name|rev1
argument_list|)
decl_stmt|;
name|boolean
name|exists
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|exists
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|NodeExistsCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/a"
argument_list|,
name|rev2
argument_list|)
expr_stmt|;
name|exists
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|exists
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|siblingDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleNodeScenario
name|scenario
init|=
operator|new
name|SimpleNodeScenario
argument_list|(
name|mongoConnection
argument_list|)
decl_stmt|;
name|scenario
operator|.
name|create
argument_list|()
expr_stmt|;
name|scenario
operator|.
name|delete_B
argument_list|()
expr_stmt|;
name|NodeExistsCommandMongo
name|command
init|=
operator|new
name|NodeExistsCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/a/b"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|exists
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|exists
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|NodeExistsCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/a/c"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|exists
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|exists
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

