begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|ExerciseUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: User Management  * =============================================================================  *  * Title: Authorizable ID  * -----------------------------------------------------------------------------  *  * Goal:  * Understand what the ID of an authorizable stands for, how it is reflected  * in the API. Furthermore this exercises aims to make you familiar with  * some implementation details wrt the ID.  *  * Exercises:  *  * - {@link #getById()}  *   Use this test again to become familiar with the authorizable lookup by ID  *   and the nature of the authorizable ID.  *  * - {@link #testIdConflict()}  *   This test illustrates how the user management implementation deals with  *   conflicting IDs upon user/group creation.  *   Fix the test without changing the params of the createUser/createGroup calls.  *  *  * Advanced Exercises:  * -----------------------------------------------------------------------------  *  * - {@link #testIdWithManualCreation()}  *   This exercise aims to create a new user manually using the Oak API (which  *   doesn't apply the checks for protected items).  *   Use this test to understand how authorizable uniqueness is enforced in the  *   repository by fixing the test case  *  *   Question: Can you list all properties with a uniqueness constraint enforced upon?  *   Question: Can you explain how this is enforced and what is the part that defines this uniqueness?  *  *  * Related Exercises:  * -----------------------------------------------------------------------------  *  * - {@link L5_UuidTest}  *  *</pre>  *  * @see org.apache.jackrabbit.api.security.user.UserManager  * @see org.apache.jackrabbit.api.security.user.Authorizable#getID()  */
end_comment

begin_class
specifier|public
class|class
name|L4_AuthorizableIdTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
name|User
name|testUser
decl_stmt|;
specifier|private
name|Group
name|testGroup
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|testUser
operator|=
name|ExerciseUtility
operator|.
name|createTestUser
argument_list|(
name|getUserManager
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|testGroup
operator|=
name|ExerciseUtility
operator|.
name|createTestGroup
argument_list|(
name|getUserManager
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|testUser
operator|!=
literal|null
condition|)
block|{
name|testUser
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|testGroup
operator|!=
literal|null
condition|)
block|{
name|testGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetByID
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// EXERCISE fix the test-case
name|UserManager
name|uMgr
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|Group
name|g
init|=
name|uMgr
operator|.
name|getAuthorizable
argument_list|(
name|testUser
operator|.
name|getID
argument_list|()
argument_list|,
name|Group
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|g
argument_list|,
name|uMgr
operator|.
name|getAuthorizable
argument_list|(
name|testGroup
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|g
argument_list|,
name|uMgr
operator|.
name|getAuthorizable
argument_list|(
name|testGroup
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIdConflict
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|CommitFailedException
block|{
comment|// EXERCISE: fix this test without changing the ID-parameter of the 2 create-calls.
name|User
name|conflictUser
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createUser
argument_list|(
name|testUser
operator|.
name|getID
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Group
name|conflictGroup
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createGroup
argument_list|(
name|testUser
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIdWithManualCreation
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|CommitFailedException
block|{
name|Tree
name|userTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|testUser
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Tree
name|authorizableFolder
init|=
name|userTree
operator|.
name|getParent
argument_list|()
decl_stmt|;
comment|// EXERCISE: fix the test
try|try
block|{
name|String
name|id
init|=
name|TreeUtil
operator|.
name|getString
argument_list|(
name|userTree
argument_list|,
name|UserConstants
operator|.
name|REP_AUTHORIZABLE_ID
argument_list|)
decl_stmt|;
name|Tree
name|anotherUser
init|=
name|authorizableFolder
operator|.
name|addChild
argument_list|(
literal|"nodeName"
argument_list|)
decl_stmt|;
name|anotherUser
operator|.
name|setProperty
argument_list|(
name|userTree
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
expr_stmt|;
name|anotherUser
operator|.
name|setProperty
argument_list|(
name|userTree
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_UUID
argument_list|)
argument_list|)
expr_stmt|;
name|anotherUser
operator|.
name|setProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PRINCIPAL_NAME
argument_list|,
name|TreeUtil
operator|.
name|getString
argument_list|(
name|userTree
argument_list|,
name|UserConstants
operator|.
name|REP_PRINCIPAL_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|anotherUser
operator|.
name|setProperty
argument_list|(
name|UserConstants
operator|.
name|REP_AUTHORIZABLE_ID
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|User
name|another
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|id
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|another
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|another
operator|.
name|equals
argument_list|(
name|testUser
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|t
init|=
name|authorizableFolder
operator|.
name|getChild
argument_list|(
literal|"nodeName"
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|exists
argument_list|()
condition|)
block|{
name|t
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

