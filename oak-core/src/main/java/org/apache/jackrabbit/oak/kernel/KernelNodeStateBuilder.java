begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|CoreValueUtil
import|;
end_import

begin_comment
comment|/**  * FIXME document  */
end_comment

begin_class
specifier|public
class|class
name|KernelNodeStateBuilder
implements|implements
name|NodeStateBuilder
block|{
specifier|private
specifier|final
name|MicroKernel
name|kernel
decl_stmt|;
specifier|private
specifier|final
name|CoreValueFactory
name|valueFactory
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
name|String
name|revision
decl_stmt|;
specifier|public
name|KernelNodeStateBuilder
parameter_list|(
name|MicroKernel
name|kernel
parameter_list|,
name|CoreValueFactory
name|valueFactory
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|revision
parameter_list|)
block|{
name|this
operator|.
name|kernel
operator|=
name|kernel
expr_stmt|;
name|this
operator|.
name|valueFactory
operator|=
name|valueFactory
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|revision
operator|=
name|revision
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getNodeState
parameter_list|()
block|{
name|assertNotStale
argument_list|()
expr_stmt|;
return|return
operator|new
name|KernelNodeState
argument_list|(
name|kernel
argument_list|,
name|valueFactory
argument_list|,
name|path
argument_list|,
name|revision
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeStateBuilder
name|getChildBuilder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|targetPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
decl_stmt|;
return|return
name|kernel
operator|.
name|nodeExists
argument_list|(
name|targetPath
argument_list|,
name|revision
argument_list|)
condition|?
operator|new
name|KernelNodeStateBuilder
argument_list|(
name|kernel
argument_list|,
name|valueFactory
argument_list|,
name|targetPath
argument_list|,
name|revision
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeStateBuilder
name|addNode
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|nodeState
parameter_list|)
block|{
name|String
name|targetPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|StringBuilder
name|jsop
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buildJsop
argument_list|(
name|targetPath
argument_list|,
name|nodeState
argument_list|,
name|jsop
argument_list|)
expr_stmt|;
name|revision
operator|=
name|kernel
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
name|jsop
operator|.
name|toString
argument_list|()
argument_list|,
name|revision
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
operator|new
name|KernelNodeStateBuilder
argument_list|(
name|kernel
argument_list|,
name|valueFactory
argument_list|,
name|targetPath
argument_list|,
name|revision
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeStateBuilder
name|addNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|targetPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|kernel
operator|.
name|nodeExists
argument_list|(
name|targetPath
argument_list|,
name|revision
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|revision
operator|=
name|kernel
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"+\""
operator|+
name|targetPath
operator|+
literal|"\":{}"
argument_list|,
name|revision
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
operator|new
name|KernelNodeStateBuilder
argument_list|(
name|kernel
argument_list|,
name|valueFactory
argument_list|,
name|targetPath
argument_list|,
name|revision
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|targetPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|kernel
operator|.
name|nodeExists
argument_list|(
name|targetPath
argument_list|,
name|revision
argument_list|)
condition|)
block|{
name|revision
operator|=
name|kernel
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"-\""
operator|+
name|targetPath
operator|+
literal|'"'
argument_list|,
name|revision
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
name|PropertyState
name|property
parameter_list|)
block|{
name|String
name|targetPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|property
operator|.
name|isArray
argument_list|()
condition|?
name|CoreValueUtil
operator|.
name|toJsonArray
argument_list|(
name|property
operator|.
name|getValues
argument_list|()
argument_list|)
else|:
name|CoreValueUtil
operator|.
name|toJsonValue
argument_list|(
name|property
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|revision
operator|=
name|kernel
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"^\""
operator|+
name|targetPath
operator|+
literal|"\":"
operator|+
name|value
argument_list|,
name|revision
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|targetPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|revision
operator|=
name|kernel
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"^\""
operator|+
name|targetPath
operator|+
literal|"\":null"
argument_list|,
name|revision
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|moveTo
parameter_list|(
name|NodeStateBuilder
name|destParent
parameter_list|,
name|String
name|destName
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|destParent
operator|instanceof
name|KernelNodeStateBuilder
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Alien builder for destParent"
argument_list|)
throw|;
block|}
if|if
condition|(
name|destParent
operator|.
name|getChildBuilder
argument_list|(
name|destName
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|KernelNodeStateBuilder
name|destParentBuilder
init|=
operator|(
name|KernelNodeStateBuilder
operator|)
name|destParent
decl_stmt|;
name|String
name|destParentPath
init|=
name|destParentBuilder
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|targetPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|destParentPath
argument_list|,
name|destName
argument_list|)
decl_stmt|;
name|revision
operator|=
name|kernel
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|">\""
operator|+
name|path
operator|+
literal|"\":\""
operator|+
name|targetPath
operator|+
literal|'"'
argument_list|,
name|revision
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|copyTo
parameter_list|(
name|NodeStateBuilder
name|destParent
parameter_list|,
name|String
name|destName
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|destParent
operator|instanceof
name|KernelNodeStateBuilder
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Alien builder for destParent"
argument_list|)
throw|;
block|}
if|if
condition|(
name|destParent
operator|.
name|getChildBuilder
argument_list|(
name|destName
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|KernelNodeStateBuilder
name|destParentBuilder
init|=
operator|(
name|KernelNodeStateBuilder
operator|)
name|destParent
decl_stmt|;
name|String
name|destParentPath
init|=
name|destParentBuilder
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|targetPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|destParentPath
argument_list|,
name|destName
argument_list|)
decl_stmt|;
name|revision
operator|=
name|kernel
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"*\""
operator|+
name|path
operator|+
literal|"\":\""
operator|+
name|targetPath
operator|+
literal|'"'
argument_list|,
name|revision
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|//------------------------------------------------------------< internal>---
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
name|boolean
name|apply
parameter_list|()
block|{
name|assertNotStale
argument_list|()
expr_stmt|;
try|try
block|{
name|kernel
operator|.
name|merge
argument_list|(
name|revision
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|revision
operator|=
literal|null
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// TODO log
return|return
literal|false
return|;
block|}
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
name|void
name|assertNotStale
parameter_list|()
block|{
if|if
condition|(
name|revision
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"This branch has been merged already"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|buildJsop
parameter_list|(
name|String
name|path
parameter_list|,
name|NodeState
name|nodeState
parameter_list|,
name|StringBuilder
name|jsop
parameter_list|)
block|{
name|jsop
operator|.
name|append
argument_list|(
literal|"+\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":{}"
argument_list|)
expr_stmt|;
for|for
control|(
name|PropertyState
name|property
range|:
name|nodeState
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|String
name|targetPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|property
operator|.
name|isArray
argument_list|()
condition|?
name|CoreValueUtil
operator|.
name|toJsonArray
argument_list|(
name|property
operator|.
name|getValues
argument_list|()
argument_list|)
else|:
name|CoreValueUtil
operator|.
name|toJsonValue
argument_list|(
name|property
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|jsop
operator|.
name|append
argument_list|(
literal|"^\""
argument_list|)
operator|.
name|append
argument_list|(
name|targetPath
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":"
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ChildNodeEntry
name|child
range|:
name|nodeState
operator|.
name|getChildNodeEntries
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
control|)
block|{
name|String
name|targetPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|child
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|buildJsop
argument_list|(
name|targetPath
argument_list|,
name|child
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|jsop
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

