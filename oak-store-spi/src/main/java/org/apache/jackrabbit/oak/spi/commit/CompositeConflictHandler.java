begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newLinkedList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ThreeWayConflictHandler
operator|.
name|Resolution
operator|.
name|IGNORED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ConflictType
operator|.
name|ADD_EXISTING_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ConflictType
operator|.
name|ADD_EXISTING_PROPERTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ConflictType
operator|.
name|CHANGE_CHANGED_PROPERTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ConflictType
operator|.
name|CHANGE_DELETED_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ConflictType
operator|.
name|CHANGE_DELETED_PROPERTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ConflictType
operator|.
name|DELETE_CHANGED_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ConflictType
operator|.
name|DELETE_CHANGED_PROPERTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ConflictType
operator|.
name|DELETE_DELETED_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ConflictType
operator|.
name|DELETE_DELETED_PROPERTY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * A {@code CompositeConflictHandler} delegates conflict handling  * to multiple backing handlers. The backing handlers are invoked in  * the inverse order they have been installed until a handler returning  * a valid resolution (i.e. not {@code IGNORED)} is found. If for a certain  * conflict none of the backing handlers returns a valid resolution  * this implementation throws an {@code IllegalStateException}.  */
end_comment

begin_class
specifier|public
class|class
name|CompositeConflictHandler
implements|implements
name|ThreeWayConflictHandler
block|{
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|ThreeWayConflictHandler
argument_list|>
name|handlers
decl_stmt|;
comment|/**      * Create a new {@code CompositeConflictHandler} with an initial set of      * backing handler. Use {@link #addHandler(PartialConflictHandler)} to add additional      * handlers.      * @param handlers  the backing handlers      */
specifier|public
name|CompositeConflictHandler
parameter_list|(
annotation|@
name|Nonnull
name|Iterable
argument_list|<
name|ThreeWayConflictHandler
argument_list|>
name|handlers
parameter_list|)
block|{
name|this
operator|.
name|handlers
operator|=
name|newLinkedList
argument_list|(
name|checkNotNull
argument_list|(
name|handlers
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new {@code CompositeConflictHandler} with no backing handlers.      * backing handler. Use {@link #addHandler(PartialConflictHandler)} to add handlers.      */
specifier|public
name|CompositeConflictHandler
parameter_list|()
block|{
name|this
operator|.
name|handlers
operator|=
name|newLinkedList
argument_list|()
expr_stmt|;
block|}
comment|/**      * Add a new backing conflict handler. The new handler takes precedence      * over all currently installed handlers.      * @param handler      * @return this      */
specifier|public
name|CompositeConflictHandler
name|addHandler
parameter_list|(
name|ThreeWayConflictHandler
name|handler
parameter_list|)
block|{
name|handlers
operator|.
name|addFirst
argument_list|(
name|handler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Resolution
name|addExistingProperty
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|PropertyState
name|ours
parameter_list|,
name|PropertyState
name|theirs
parameter_list|)
block|{
for|for
control|(
name|ThreeWayConflictHandler
name|handler
range|:
name|handlers
control|)
block|{
name|Resolution
name|resolution
init|=
name|handler
operator|.
name|addExistingProperty
argument_list|(
name|parent
argument_list|,
name|ours
argument_list|,
name|theirs
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolution
operator|!=
name|IGNORED
condition|)
block|{
return|return
name|resolution
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No conflict handler for "
operator|+
name|ADD_EXISTING_PROPERTY
operator|+
literal|" conflict"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Resolution
name|changeDeletedProperty
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|PropertyState
name|ours
parameter_list|,
name|PropertyState
name|base
parameter_list|)
block|{
for|for
control|(
name|ThreeWayConflictHandler
name|handler
range|:
name|handlers
control|)
block|{
name|Resolution
name|resolution
init|=
name|handler
operator|.
name|changeDeletedProperty
argument_list|(
name|parent
argument_list|,
name|ours
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolution
operator|!=
name|IGNORED
condition|)
block|{
return|return
name|resolution
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No conflict handler for "
operator|+
name|CHANGE_DELETED_PROPERTY
operator|+
literal|" conflict"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Resolution
name|changeChangedProperty
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|PropertyState
name|ours
parameter_list|,
name|PropertyState
name|theirs
parameter_list|,
name|PropertyState
name|base
parameter_list|)
block|{
for|for
control|(
name|ThreeWayConflictHandler
name|handler
range|:
name|handlers
control|)
block|{
name|Resolution
name|resolution
init|=
name|handler
operator|.
name|changeChangedProperty
argument_list|(
name|parent
argument_list|,
name|ours
argument_list|,
name|theirs
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolution
operator|!=
name|IGNORED
condition|)
block|{
return|return
name|resolution
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No conflict handler for "
operator|+
name|CHANGE_CHANGED_PROPERTY
operator|+
literal|" conflict"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Resolution
name|deleteDeletedProperty
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|PropertyState
name|base
parameter_list|)
block|{
for|for
control|(
name|ThreeWayConflictHandler
name|handler
range|:
name|handlers
control|)
block|{
name|Resolution
name|resolution
init|=
name|handler
operator|.
name|deleteDeletedProperty
argument_list|(
name|parent
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolution
operator|!=
name|IGNORED
condition|)
block|{
return|return
name|resolution
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No conflict handler for "
operator|+
name|DELETE_DELETED_PROPERTY
operator|+
literal|" conflict"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Resolution
name|deleteChangedProperty
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|PropertyState
name|theirs
parameter_list|,
name|PropertyState
name|base
parameter_list|)
block|{
for|for
control|(
name|ThreeWayConflictHandler
name|handler
range|:
name|handlers
control|)
block|{
name|Resolution
name|resolution
init|=
name|handler
operator|.
name|deleteChangedProperty
argument_list|(
name|parent
argument_list|,
name|theirs
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolution
operator|!=
name|IGNORED
condition|)
block|{
return|return
name|resolution
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No conflict handler for "
operator|+
name|DELETE_CHANGED_PROPERTY
operator|+
literal|" conflict"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Resolution
name|addExistingNode
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|ours
parameter_list|,
name|NodeState
name|theirs
parameter_list|)
block|{
for|for
control|(
name|ThreeWayConflictHandler
name|handler
range|:
name|handlers
control|)
block|{
name|Resolution
name|resolution
init|=
name|handler
operator|.
name|addExistingNode
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|ours
argument_list|,
name|theirs
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolution
operator|!=
name|IGNORED
condition|)
block|{
return|return
name|resolution
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No conflict handler for "
operator|+
name|ADD_EXISTING_NODE
operator|+
literal|" conflict"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Resolution
name|changeDeletedNode
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|ours
parameter_list|,
name|NodeState
name|base
parameter_list|)
block|{
for|for
control|(
name|ThreeWayConflictHandler
name|handler
range|:
name|handlers
control|)
block|{
name|Resolution
name|resolution
init|=
name|handler
operator|.
name|changeDeletedNode
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|ours
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolution
operator|!=
name|IGNORED
condition|)
block|{
return|return
name|resolution
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No conflict handler for "
operator|+
name|CHANGE_DELETED_NODE
operator|+
literal|" conflict"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Resolution
name|deleteChangedNode
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|theirs
parameter_list|,
name|NodeState
name|base
parameter_list|)
block|{
for|for
control|(
name|ThreeWayConflictHandler
name|handler
range|:
name|handlers
control|)
block|{
name|Resolution
name|resolution
init|=
name|handler
operator|.
name|deleteChangedNode
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|theirs
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolution
operator|!=
name|IGNORED
condition|)
block|{
return|return
name|resolution
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No conflict handler for "
operator|+
name|DELETE_CHANGED_NODE
operator|+
literal|" conflict"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Resolution
name|deleteDeletedNode
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|base
parameter_list|)
block|{
for|for
control|(
name|ThreeWayConflictHandler
name|handler
range|:
name|handlers
control|)
block|{
name|Resolution
name|resolution
init|=
name|handler
operator|.
name|deleteDeletedNode
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolution
operator|!=
name|IGNORED
condition|)
block|{
return|return
name|resolution
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No conflict handler for "
operator|+
name|DELETE_DELETED_NODE
operator|+
literal|" conflict"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

