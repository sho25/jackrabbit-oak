begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
operator|.
name|authorization
operator|.
name|principalbased
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrincipalAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
operator|.
name|ReadDeepTreeTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
operator|.
name|MountInfoProviderService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|OakRepositoryFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|RepositoryFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|composite
operator|.
name|CompositeAuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|internal
operator|.
name|SecurityProviderBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|internal
operator|.
name|SecurityProviderHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|FilterProviderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|PrincipalBasedAuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|testing
operator|.
name|mock
operator|.
name|osgi
operator|.
name|context
operator|.
name|OsgiContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
operator|.
name|JCR_ALL
import|;
end_import

begin_class
specifier|public
class|class
name|PrinicipalBasedReadTest
extends|extends
name|ReadDeepTreeTest
block|{
specifier|private
specifier|final
name|int
name|numberOfACEs
decl_stmt|;
specifier|private
specifier|final
name|int
name|subjectSize
decl_stmt|;
specifier|private
name|Subject
name|subject
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|entriesForEachPrincipal
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|testDefault
decl_stmt|;
specifier|private
specifier|final
name|String
name|compositionType
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|useAggregationFilter
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|nodePaths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|PrinicipalBasedReadTest
parameter_list|(
name|int
name|itemsToRead
parameter_list|,
name|int
name|numberOfACEs
parameter_list|,
name|int
name|subjectSize
parameter_list|,
name|boolean
name|entriesForEachPrincipal
parameter_list|,
name|boolean
name|testDefault
parameter_list|,
annotation|@
name|NotNull
name|String
name|compositionType
parameter_list|,
name|boolean
name|useAggregationFilter
parameter_list|,
name|boolean
name|doReport
parameter_list|)
block|{
name|super
argument_list|(
literal|false
argument_list|,
name|itemsToRead
argument_list|,
name|doReport
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|numberOfACEs
operator|=
name|numberOfACEs
expr_stmt|;
name|this
operator|.
name|subjectSize
operator|=
name|subjectSize
expr_stmt|;
name|this
operator|.
name|entriesForEachPrincipal
operator|=
name|entriesForEachPrincipal
expr_stmt|;
name|this
operator|.
name|testDefault
operator|=
name|testDefault
expr_stmt|;
name|this
operator|.
name|compositionType
operator|=
name|compositionType
expr_stmt|;
name|this
operator|.
name|useAggregationFilter
operator|=
name|useAggregationFilter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|beforeSuite
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|beforeSuite
argument_list|()
expr_stmt|;
comment|// populate subject
name|subject
operator|=
operator|new
name|Subject
argument_list|()
expr_stmt|;
name|UserManager
name|userManager
init|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|adminSession
operator|)
operator|.
name|getUserManager
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subjectSize
condition|;
name|i
operator|++
control|)
block|{
name|User
name|user
init|=
name|userManager
operator|.
name|createSystemUser
argument_list|(
literal|"system_"
operator|+
name|i
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|adminSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|JackrabbitAccessControlManager
name|acMgr
init|=
operator|(
name|JackrabbitAccessControlManager
operator|)
name|adminSession
operator|.
name|getAccessControlManager
argument_list|()
decl_stmt|;
comment|// grant read at the root
name|Principal
name|principal
init|=
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Privilege
index|[]
name|readPrivs
init|=
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
name|addEntry
argument_list|(
name|acMgr
argument_list|,
name|principal
argument_list|,
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|readPrivs
argument_list|,
name|testDefault
argument_list|)
expr_stmt|;
comment|// for AND-composite-evaluation with principal-based: also need to grant on default model (see repository setup below)
if|if
condition|(
operator|!
name|testDefault
operator|&&
name|CompositeAuthorizationConfiguration
operator|.
name|CompositionType
operator|.
name|AND
operator|==
name|CompositeAuthorizationConfiguration
operator|.
name|CompositionType
operator|.
name|valueOf
argument_list|(
name|compositionType
argument_list|)
condition|)
block|{
name|addEntry
argument_list|(
name|acMgr
argument_list|,
name|principal
argument_list|,
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|readPrivs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// create additional ACEs according to benchmark configuration
name|List
argument_list|<
name|Privilege
argument_list|>
name|allPrivileges
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|JCR_ALL
argument_list|)
operator|.
name|getAggregatePrivileges
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|entriesForEachPrincipal
condition|)
block|{
name|createForRotatingPrincipal
argument_list|(
name|acMgr
argument_list|,
name|allPrivileges
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createForEachPrincipal
argument_list|(
name|acMgr
argument_list|,
name|allPrivileges
argument_list|)
expr_stmt|;
block|}
name|adminSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|visitingNode
parameter_list|(
name|Node
name|node
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|super
operator|.
name|visitingNode
argument_list|(
name|node
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|node
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|contains
argument_list|(
name|AccessControlConstants
operator|.
name|REP_POLICY
argument_list|)
condition|)
block|{
name|nodePaths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createForRotatingPrincipal
parameter_list|(
annotation|@
name|NotNull
name|JackrabbitAccessControlManager
name|acMgr
parameter_list|,
annotation|@
name|NotNull
name|List
argument_list|<
name|Privilege
argument_list|>
name|allPrivileges
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|Principal
argument_list|>
name|principalIterator
init|=
name|Iterators
operator|.
name|cycle
argument_list|(
name|subject
operator|.
name|getPrincipals
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|cnt
operator|<
name|numberOfACEs
condition|)
block|{
if|if
condition|(
operator|!
name|principalIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot setup ACE. no principals available."
argument_list|)
throw|;
block|}
if|if
condition|(
name|addEntry
argument_list|(
name|acMgr
argument_list|,
name|principalIterator
operator|.
name|next
argument_list|()
argument_list|,
name|getRandom
argument_list|(
name|nodePaths
argument_list|)
argument_list|,
name|getRandomPrivileges
argument_list|(
name|allPrivileges
argument_list|)
argument_list|,
name|testDefault
argument_list|)
condition|)
block|{
name|cnt
operator|++
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|createForEachPrincipal
parameter_list|(
annotation|@
name|NotNull
name|JackrabbitAccessControlManager
name|acMgr
parameter_list|,
annotation|@
name|NotNull
name|List
argument_list|<
name|Privilege
argument_list|>
name|allPrivileges
parameter_list|)
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|Principal
name|principal
range|:
name|subject
operator|.
name|getPrincipals
argument_list|()
control|)
block|{
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|cnt
operator|<
name|numberOfACEs
condition|)
block|{
if|if
condition|(
name|addEntry
argument_list|(
name|acMgr
argument_list|,
name|principal
argument_list|,
name|getRandom
argument_list|(
name|nodePaths
argument_list|)
argument_list|,
name|getRandomPrivileges
argument_list|(
name|allPrivileges
argument_list|)
argument_list|,
name|testDefault
argument_list|)
condition|)
block|{
name|cnt
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|NotNull
specifier|static
name|String
name|getRandom
parameter_list|(
annotation|@
name|NotNull
name|List
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|)
block|{
name|int
name|index
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|paths
operator|.
name|size
argument_list|()
operator|*
name|Math
operator|.
name|random
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|paths
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|private
specifier|static
name|Privilege
index|[]
name|getRandomPrivileges
parameter_list|(
annotation|@
name|NotNull
name|List
argument_list|<
name|Privilege
argument_list|>
name|allPrivileges
parameter_list|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|allPrivileges
argument_list|)
expr_stmt|;
return|return
name|allPrivileges
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|addEntry
parameter_list|(
annotation|@
name|NotNull
name|JackrabbitAccessControlManager
name|acMgr
parameter_list|,
annotation|@
name|NotNull
name|Principal
name|principal
parameter_list|,
annotation|@
name|NotNull
name|String
name|path
parameter_list|,
annotation|@
name|NotNull
name|Privilege
index|[]
name|privileges
parameter_list|,
name|boolean
name|useDefault
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|boolean
name|added
init|=
literal|false
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|useDefault
condition|)
block|{
name|acl
operator|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|acl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No policy to setup ACE."
argument_list|)
throw|;
block|}
name|added
operator|=
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|principal
argument_list|,
name|privileges
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|JackrabbitAccessControlPolicy
name|policy
range|:
name|Iterables
operator|.
name|concat
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|principal
argument_list|)
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|principal
argument_list|)
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
name|policy
operator|instanceof
name|PrincipalAccessControlList
condition|)
block|{
name|acl
operator|=
operator|(
name|PrincipalAccessControlList
operator|)
name|policy
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|acl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No principal policy to setup ACE."
argument_list|)
throw|;
block|}
name|added
operator|=
operator|(
operator|(
name|PrincipalAccessControlList
operator|)
name|acl
operator|)
operator|.
name|addEntry
argument_list|(
name|path
argument_list|,
name|privileges
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|added
condition|)
block|{
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|,
name|acl
argument_list|)
expr_stmt|;
block|}
return|return
name|added
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|afterSuite
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|UserManager
name|userManager
init|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|adminSession
operator|)
operator|.
name|getUserManager
argument_list|()
decl_stmt|;
for|for
control|(
name|Principal
name|p
range|:
name|subject
operator|.
name|getPrincipals
argument_list|()
control|)
block|{
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|adminSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|afterSuite
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|protected
name|Session
name|getTestSession
parameter_list|()
block|{
return|return
name|loginSubject
argument_list|(
name|subject
argument_list|)
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|protected
name|Repository
index|[]
name|createRepository
parameter_list|(
name|RepositoryFixture
name|fixture
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|fixture
operator|instanceof
name|OakRepositoryFixture
condition|)
block|{
return|return
operator|(
operator|(
name|OakRepositoryFixture
operator|)
name|fixture
operator|)
operator|.
name|setUpCluster
argument_list|(
literal|1
argument_list|,
name|oak
lambda|->
operator|new
name|Jcr
argument_list|(
name|oak
argument_list|)
operator|.
name|with
argument_list|(
name|createSecurityProvider
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Fixture "
operator|+
name|fixture
operator|+
literal|" not supported for this benchmark."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|protected
name|String
name|getImportFileName
parameter_list|()
block|{
return|return
literal|"deepTree.xml"
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|protected
name|String
name|getTestNodeName
parameter_list|()
block|{
return|return
literal|"PrinicipalBasedReadTest"
return|;
block|}
specifier|private
name|SecurityProvider
name|createSecurityProvider
parameter_list|()
block|{
name|SecurityProvider
name|delegate
init|=
name|SecurityProviderBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|CompositeAuthorizationConfiguration
name|authorizationConfiguration
init|=
operator|(
name|CompositeAuthorizationConfiguration
operator|)
name|delegate
operator|.
name|getConfiguration
argument_list|(
operator|(
name|AuthorizationConfiguration
operator|.
name|class
operator|)
argument_list|)
decl_stmt|;
name|authorizationConfiguration
operator|.
name|withCompositionType
argument_list|(
name|compositionType
argument_list|)
expr_stmt|;
name|AuthorizationConfiguration
name|defaultAuthorization
init|=
name|checkNotNull
argument_list|(
name|authorizationConfiguration
operator|.
name|getDefaultConfig
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|testDefault
condition|)
block|{
name|authorizationConfiguration
operator|.
name|addConfiguration
argument_list|(
name|defaultAuthorization
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PrincipalBasedAuthorizationConfiguration
name|pbConfiguration
init|=
operator|new
name|PrincipalBasedAuthorizationConfiguration
argument_list|()
decl_stmt|;
comment|// NOTE: this sets up a ANDing-composite with prinipal-based and default
comment|//       if 'stop-evaluation' is configured the latter will be called for principal-based evaluation
name|SecurityProviderHelper
operator|.
name|updateConfig
argument_list|(
name|delegate
argument_list|,
name|pbConfiguration
argument_list|,
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|OsgiContextImpl
name|context
init|=
operator|new
name|OsgiContextImpl
argument_list|()
decl_stmt|;
comment|// register the filter provider to get it's activate method invoked
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"path"
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|UserConstants
operator|.
name|DEFAULT_USER_PATH
argument_list|,
name|UserConstants
operator|.
name|DEFAULT_SYSTEM_RELATIVE_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|context
operator|.
name|registerInjectActivateService
argument_list|(
operator|new
name|FilterProviderImpl
argument_list|()
argument_list|,
name|props
argument_list|)
expr_stmt|;
comment|// register mountinfo-provider
name|context
operator|.
name|registerInjectActivateService
argument_list|(
operator|new
name|MountInfoProviderService
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|useAggregationFilter
condition|)
block|{
comment|// TODO: register 'AggregationFilter' if 'stop-evaluation' option is set
block|}
comment|// register the authorization configuration to have filterprovider bound to it.
name|context
operator|.
name|registerInjectActivateService
argument_list|(
name|pbConfiguration
argument_list|)
expr_stmt|;
block|}
return|return
name|delegate
return|;
block|}
block|}
end_class

end_unit

