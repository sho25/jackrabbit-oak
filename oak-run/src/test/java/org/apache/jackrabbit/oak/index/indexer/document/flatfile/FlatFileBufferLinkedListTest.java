begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|flatfile
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|NodeStateEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|flatfile
operator|.
name|FlatFileBufferLinkedList
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|FlatFileBufferLinkedListTest
block|{
specifier|private
name|FlatFileBufferLinkedList
name|list
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|NodeStateEntry
name|TEST_NODE_STATE_ENTRY
init|=
operator|new
name|NodeStateEntry
argument_list|(
name|EMPTY_NODE
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|list
operator|=
operator|new
name|FlatFileBufferLinkedList
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|add
parameter_list|()
block|{
try|try
block|{
name|list
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Adding null must throw IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|//ignore
block|}
name|list
operator|.
name|add
argument_list|(
name|TEST_NODE_STATE_ENTRY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|remove
parameter_list|()
block|{
try|try
block|{
name|list
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail to remove from an empty list"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
comment|//ignore
block|}
name|list
operator|.
name|add
argument_list|(
name|TEST_NODE_STATE_ENTRY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should get item on removal"
argument_list|,
name|TEST_NODE_STATE_ENTRY
argument_list|,
name|list
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|iterator
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"empty list must be 0-sized"
argument_list|,
literal|0
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|TEST_NODE_STATE_ENTRY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"single entry list must be 1-sized"
argument_list|,
literal|1
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"single entry list must be 1-sized on separate iterators"
argument_list|,
literal|1
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|TEST_NODE_STATE_ENTRY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2 entries in list must be 2-sized"
argument_list|,
literal|2
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2 entries in list must be 2-sized on separate iterators"
argument_list|,
literal|2
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|NodeIterator
name|iter2
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|NodeIterator
name|iter1
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|iter2
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2 entries in list must be 1-sized after consuming an item"
argument_list|,
literal|1
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|iter2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2 entries in list must be 2-sized even if some other iterator consumed an item"
argument_list|,
literal|2
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|iter1
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|TEST_NODE_STATE_ENTRY
argument_list|)
expr_stmt|;
name|iter1
operator|=
name|list
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|iter2
operator|=
name|list
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|iter1
operator|.
name|next
argument_list|()
expr_stmt|;
comment|//move iter to point at node being removed below
name|iter2
operator|.
name|next
argument_list|()
expr_stmt|;
name|iter2
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// move iter beyond node being removed - this should remain valid
name|list
operator|.
name|remove
argument_list|()
expr_stmt|;
try|try
block|{
name|iter1
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Iterator state once removed from list can't be traversed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
comment|//ignore
block|}
name|assertEquals
argument_list|(
name|TEST_NODE_STATE_ENTRY
argument_list|,
name|iter2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|//this should work
name|assertEquals
argument_list|(
literal|"2 entries in list must be 1-sized after removal of an iterm"
argument_list|,
literal|2
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|size
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"empty list must be 0-sized"
argument_list|,
literal|0
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|TEST_NODE_STATE_ENTRY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"single entry list must be 1-sized"
argument_list|,
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"single entry list must be 1-sized on separate iterators"
argument_list|,
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|TEST_NODE_STATE_ENTRY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2 entries in list must be 2-sized"
argument_list|,
literal|2
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2 entries in list must be 2-sized on separate iterators"
argument_list|,
literal|2
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2 entries in list must be 1-sized after removing an item"
argument_list|,
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isEmpty
parameter_list|()
block|{
name|assertTrue
argument_list|(
literal|"Empty list should be empty"
argument_list|,
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|TEST_NODE_STATE_ENTRY
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Non-empty list should be non-empty"
argument_list|,
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Empty list due to removal should be empty"
argument_list|,
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|memUsage
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Empty list must be estimate 0"
argument_list|,
literal|0
argument_list|,
name|list
operator|.
name|estimatedMemoryUsage
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|NodeStateEntry
argument_list|(
name|EMPTY_NODE
argument_list|,
literal|"/"
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|list
operator|.
name|estimatedMemoryUsage
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|NodeStateEntry
argument_list|(
name|EMPTY_NODE
argument_list|,
literal|"/"
argument_list|,
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|list
operator|.
name|estimatedMemoryUsage
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|list
operator|.
name|estimatedMemoryUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|memLimit
parameter_list|()
block|{
name|list
operator|=
operator|new
name|FlatFileBufferLinkedList
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|NodeStateEntry
name|e10Bytes
init|=
operator|new
name|NodeStateEntry
argument_list|(
name|EMPTY_NODE
argument_list|,
literal|"/"
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|NodeStateEntry
name|e1Byte
init|=
operator|new
name|NodeStateEntry
argument_list|(
name|EMPTY_NODE
argument_list|,
literal|"/"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|e10Bytes
argument_list|)
expr_stmt|;
comment|//this should succeed
name|list
operator|.
name|remove
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|e1Byte
argument_list|)
expr_stmt|;
try|try
block|{
name|list
operator|.
name|add
argument_list|(
name|e10Bytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
comment|//ignore
block|}
name|assertEquals
argument_list|(
literal|"Addition beyond mem limit shouldn't get added"
argument_list|,
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Addition beyond mem limit shouldn't show up in usage"
argument_list|,
literal|1
argument_list|,
name|list
operator|.
name|estimatedMemoryUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|basics
parameter_list|()
block|{
name|list
operator|.
name|add
argument_list|(
name|TEST_NODE_STATE_ENTRY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Adding an item should change size"
argument_list|,
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Adding an item should be available"
argument_list|,
name|list
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

