begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|MembershipWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|DefaultEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
operator|.
name|CONSTRAINT
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
class|class
name|GroupEditor
extends|extends
name|DefaultEditor
block|{
comment|/**      * default logger      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GroupEditor
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// todo: OAK-1480 wrong default. must be retrieved from configuration.
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|ROOTS
init|=
block|{
literal|"home"
block|,
literal|"groups"
block|}
decl_stmt|;
specifier|private
name|State
name|state
decl_stmt|;
specifier|private
name|EditorGroup
name|currentGroup
decl_stmt|;
specifier|private
specifier|final
name|MembershipWriter
name|writer
init|=
operator|new
name|MembershipWriter
argument_list|()
decl_stmt|;
name|GroupEditor
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
operator|new
name|State
argument_list|(
name|builder
argument_list|)
expr_stmt|;
comment|// writer.setMembershipSizeThreshold(10); // uncomment to test different split sizes
block|}
specifier|private
name|boolean
name|descend
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|state
operator|.
name|depth
operator|<
name|ROOTS
operator|.
name|length
operator|&&
operator|!
name|name
operator|.
name|equals
argument_list|(
name|ROOTS
index|[
name|state
operator|.
name|depth
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|state
operator|=
name|state
operator|.
name|push
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|ascend
parameter_list|()
block|{
name|state
operator|=
name|state
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|leave
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|currentGroup
operator|!=
literal|null
operator|&&
name|currentGroup
operator|.
name|path
operator|.
name|equals
argument_list|(
name|state
operator|.
name|path
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"scanned group {}, {} members"
argument_list|,
name|currentGroup
operator|.
name|path
argument_list|,
name|currentGroup
operator|.
name|members
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setMembers
argument_list|(
name|state
operator|.
name|builder
argument_list|,
name|currentGroup
operator|.
name|members
argument_list|)
expr_stmt|;
name|currentGroup
operator|=
literal|null
expr_stmt|;
block|}
name|ascend
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
operator|!
name|descend
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|nt
init|=
name|after
operator|.
name|getName
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|nt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|CONSTRAINT
argument_list|,
literal|34
argument_list|,
name|JCR_PRIMARYTYPE
operator|+
literal|" missing at "
operator|+
name|state
operator|.
name|path
argument_list|)
throw|;
block|}
if|if
condition|(
name|UserConstants
operator|.
name|NT_REP_GROUP
operator|.
name|equals
argument_list|(
name|nt
argument_list|)
condition|)
block|{
if|if
condition|(
name|currentGroup
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"rep:Group within rep:Group not supported during upgrade. current group: {}, overwriting group: {}"
argument_list|,
name|currentGroup
operator|.
name|path
argument_list|,
name|state
operator|.
name|path
argument_list|)
expr_stmt|;
block|}
name|currentGroup
operator|=
operator|new
name|EditorGroup
argument_list|(
name|state
operator|.
name|path
argument_list|)
expr_stmt|;
name|currentGroup
operator|.
name|addMembers
argument_list|(
name|after
operator|.
name|getProperty
argument_list|(
name|UserConstants
operator|.
name|REP_MEMBERS
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|UserConstants
operator|.
name|NT_REP_MEMBERS
operator|.
name|equals
argument_list|(
name|nt
argument_list|)
condition|)
block|{
if|if
condition|(
name|currentGroup
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"rep:Members detected outside of a rep:Group. ignoring {}"
argument_list|,
name|state
operator|.
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentGroup
operator|.
name|addMembers
argument_list|(
name|after
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"changed node during upgrade copy not expected: "
operator|+
name|state
operator|.
name|path
operator|+
literal|"/"
operator|+
name|name
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"deleted node during upgrade copy not expected: "
operator|+
name|state
operator|.
name|path
operator|+
literal|"/"
operator|+
name|name
argument_list|)
throw|;
block|}
specifier|private
specifier|static
class|class
name|State
block|{
specifier|private
specifier|final
name|State
name|parent
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|NodeBuilder
name|builder
decl_stmt|;
specifier|private
specifier|final
name|int
name|depth
decl_stmt|;
specifier|private
name|State
parameter_list|(
name|State
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|parent
operator|.
name|path
operator|+
literal|"/"
operator|+
name|name
expr_stmt|;
name|this
operator|.
name|builder
operator|=
name|parent
operator|.
name|builder
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|depth
operator|=
name|parent
operator|.
name|depth
operator|+
literal|1
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"{} --> {}"
argument_list|,
name|depth
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|private
name|State
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|path
operator|=
literal|""
expr_stmt|;
name|this
operator|.
name|builder
operator|=
name|builder
expr_stmt|;
name|this
operator|.
name|depth
operator|=
literal|0
expr_stmt|;
block|}
specifier|private
name|State
name|push
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|State
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|private
name|State
name|pop
parameter_list|()
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"{}<-- {}"
argument_list|,
name|depth
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
name|parent
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|EditorGroup
block|{
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|members
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|EditorGroup
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
specifier|private
name|void
name|addMembers
parameter_list|(
name|PropertyState
name|repMembers
parameter_list|)
block|{
if|if
condition|(
name|repMembers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|ref
range|:
name|repMembers
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|WEAKREFERENCES
argument_list|)
control|)
block|{
name|members
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addMembers
parameter_list|(
name|NodeState
name|node
parameter_list|)
block|{
for|for
control|(
name|PropertyState
name|prop
range|:
name|node
operator|.
name|getProperties
argument_list|()
control|)
block|{
if|if
condition|(
name|prop
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|WEAKREFERENCE
condition|)
block|{
name|members
operator|.
name|add
argument_list|(
name|prop
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|WEAKREFERENCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

