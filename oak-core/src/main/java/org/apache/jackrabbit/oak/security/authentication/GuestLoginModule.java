begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|GuestCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|spi
operator|.
name|LoginModule
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * The {@code GuestLoginModule} is intended to provide backwards compatibility  * with the login handling present in the JCR reference implementation located  * in jackrabbit-core. While the specification claims that {@link javax.jcr.Repository#login}  * with {@code null} Credentials implies that the authentication process is  * handled externally, the default implementation jackrabbit-core treated it  * as 'anonymous' login such as covered by using {@link GuestCredentials}.<p/>  *  * This {@code LoginModule} implementation performs the following tasks upon  * {@link #login()}.  *  *<ol>  *<li>Try to retrieve JCR credentials from the {@link CallbackHandler} using  *     the {@link CredentialsCallback}</li>  *<li>In case no credentials could be obtained it pushes a new instance of  *     {@link GuestCredentials} to the shared stated. Subsequent login module  *     in the authentication process may retrieve the {@link GuestCredentials}  *     instead of failing to obtain any credentials.</li>  *</ol>  *  * Note however that this implementation does not populate the subject during  * {@link #commit() phase 2} of the authentication process. This responsibility  * is delegated to a subsequent login module implementation that may or may not  * use the {@code GuestCredentials} this module added to the share state.<p/>  *  * The authentication configuration using this {@code LoginModule} could for  * example look as follows:  *  *<pre>  *  *    jackrabbit.oak {  *            org.apache.jackrabbit.oak.security.authentication.GuestLoginModule  optional;  *            org.apache.jackrabbit.oak.security.authentication.LoginModuleImpl required;  *    };  *  *</pre>  *  * In this case calling {@link javax.jcr.Repository#login()} would be equivalent  * to {@link javax.jcr.Repository#login(javax.jcr.Credentials) repository.login(new GuestCredentials()}.  */
end_comment

begin_class
specifier|public
class|class
name|GuestLoginModule
implements|implements
name|LoginModule
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GuestLoginModule
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CallbackHandler
name|callbackHandler
decl_stmt|;
specifier|private
name|Map
name|sharedState
decl_stmt|;
comment|//--------------------------------------------------------< LoginModule>---
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Subject
name|subject
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|sharedState
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|options
parameter_list|)
block|{
name|this
operator|.
name|callbackHandler
operator|=
name|callbackHandler
expr_stmt|;
name|this
operator|.
name|sharedState
operator|=
name|sharedState
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|login
parameter_list|()
throws|throws
name|LoginException
block|{
if|if
condition|(
name|callbackHandler
operator|!=
literal|null
condition|)
block|{
name|CredentialsCallback
name|ccb
init|=
operator|new
name|CredentialsCallback
argument_list|()
decl_stmt|;
try|try
block|{
name|callbackHandler
operator|.
name|handle
argument_list|(
operator|new
name|Callback
index|[]
block|{
name|ccb
block|}
argument_list|)
expr_stmt|;
name|Credentials
name|credentials
init|=
name|ccb
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
if|if
condition|(
name|credentials
operator|==
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Credentials
argument_list|>
name|sharedCredentials
decl_stmt|;
name|Object
name|sharedObj
init|=
name|sharedState
operator|.
name|get
argument_list|(
name|LoginModuleImpl
operator|.
name|SHARED_KEY_CREDENTIALS
argument_list|)
decl_stmt|;
if|if
condition|(
name|sharedObj
operator|==
literal|null
operator|||
operator|!
operator|(
name|sharedObj
operator|instanceof
name|Set
operator|)
condition|)
block|{
name|sharedCredentials
operator|=
operator|new
name|HashSet
argument_list|<
name|Credentials
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sharedCredentials
operator|=
operator|(
name|Set
operator|)
name|sharedObj
expr_stmt|;
block|}
name|sharedCredentials
operator|.
name|add
argument_list|(
operator|new
name|GuestCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|sharedState
operator|.
name|put
argument_list|(
name|LoginModuleImpl
operator|.
name|SHARED_KEY_CREDENTIALS
argument_list|,
name|sharedCredentials
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Login: Failed to retrieve Credentials from CallbackHandler"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedCallbackException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Login: Failed to retrieve Credentials from CallbackHandler"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ignore this login module
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|commit
parameter_list|()
throws|throws
name|LoginException
block|{
comment|// not populating the subject as this login module delegates this
comment|// responsibility to a subsequent login module.
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|abort
parameter_list|()
throws|throws
name|LoginException
block|{
comment|// nothing to do
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|logout
parameter_list|()
throws|throws
name|LoginException
block|{
comment|// nothing to do.
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

