begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_comment
comment|/**  * ReadStatus... TODO  */
end_comment

begin_class
specifier|public
class|class
name|ReadStatus
block|{
specifier|public
specifier|static
specifier|final
name|ReadStatus
name|ALLOW_THIS
init|=
operator|new
name|ReadStatus
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ReadStatus
name|ALLOW_CHILDREN
init|=
operator|new
name|ReadStatus
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ReadStatus
name|ALLOW_NODES
init|=
operator|new
name|ReadStatus
argument_list|(
literal|3
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ReadStatus
name|ALLOW_PROPERTIES
init|=
operator|new
name|ReadStatus
argument_list|(
literal|4
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ReadStatus
name|ALLOW_THIS_PROPERTIES
init|=
operator|new
name|ReadStatus
argument_list|(
literal|5
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ReadStatus
name|ALLOW_CHILDITEMS
init|=
operator|new
name|ReadStatus
argument_list|(
literal|6
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ReadStatus
name|ALLOW_ALL
init|=
operator|new
name|ReadStatus
argument_list|(
literal|7
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ReadStatus
name|DENY_THIS
init|=
operator|new
name|ReadStatus
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ReadStatus
name|DENY_CHILDREN
init|=
operator|new
name|ReadStatus
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ReadStatus
name|DENY_NODES
init|=
operator|new
name|ReadStatus
argument_list|(
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ReadStatus
name|DENY_PROPERTIES
init|=
operator|new
name|ReadStatus
argument_list|(
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ReadStatus
name|DENY_THIS_PROPERTIES
init|=
operator|new
name|ReadStatus
argument_list|(
literal|5
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ReadStatus
name|DENY_CHILDITEMS
init|=
operator|new
name|ReadStatus
argument_list|(
literal|6
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ReadStatus
name|DENY_ALL
init|=
operator|new
name|ReadStatus
argument_list|(
literal|7
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|status
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isAllow
decl_stmt|;
specifier|private
name|ReadStatus
parameter_list|(
name|int
name|status
parameter_list|,
name|boolean
name|isAllow
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|isAllow
operator|=
name|isAllow
expr_stmt|;
block|}
annotation|@
name|CheckForNull
specifier|public
specifier|static
name|ReadStatus
name|getInstance
parameter_list|(
name|PrivilegeBits
name|pb
parameter_list|,
name|boolean
name|isAllow
parameter_list|)
block|{
if|if
condition|(
name|pb
operator|.
name|includesRead
argument_list|(
name|Permissions
operator|.
name|READ
argument_list|)
condition|)
block|{
return|return
operator|(
name|isAllow
operator|)
condition|?
name|ReadStatus
operator|.
name|ALLOW_ALL
else|:
name|ReadStatus
operator|.
name|DENY_ALL
return|;
block|}
elseif|else
if|if
condition|(
name|pb
operator|.
name|includesRead
argument_list|(
name|Permissions
operator|.
name|READ_NODE
argument_list|)
condition|)
block|{
return|return
operator|(
name|isAllow
operator|)
condition|?
name|ReadStatus
operator|.
name|ALLOW_NODES
else|:
name|ReadStatus
operator|.
name|DENY_NODES
return|;
block|}
elseif|else
if|if
condition|(
name|pb
operator|.
name|includesRead
argument_list|(
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
condition|)
block|{
return|return
operator|(
name|isAllow
operator|)
condition|?
name|ReadStatus
operator|.
name|ALLOW_PROPERTIES
else|:
name|ReadStatus
operator|.
name|DENY_PROPERTIES
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|CheckForNull
specifier|public
specifier|static
name|ReadStatus
name|getChildStatus
parameter_list|(
annotation|@
name|Nullable
name|ReadStatus
name|parentStatus
parameter_list|)
block|{
if|if
condition|(
name|parentStatus
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// TODO
switch|switch
condition|(
name|parentStatus
operator|.
name|status
condition|)
block|{
case|case
literal|1
case|:
return|return
literal|null
return|;
comment|// recalculate for child items
case|case
literal|2
case|:
case|case
literal|3
case|:
return|return
operator|(
name|parentStatus
operator|.
name|isAllow
operator|)
condition|?
name|ALLOW_THIS
else|:
name|DENY_THIS
return|;
case|case
literal|4
case|:
case|case
literal|5
case|:
return|return
literal|null
return|;
comment|// recalculate for properties of child node
case|case
literal|6
case|:
case|case
literal|7
case|:
return|return
operator|(
name|parentStatus
operator|.
name|isAllow
operator|)
condition|?
name|ALLOW_ALL
else|:
name|DENY_ALL
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid status"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|includes
parameter_list|(
name|ReadStatus
name|status
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|status
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|isAllow
operator|==
name|status
operator|.
name|isAllow
operator|&&
name|Permissions
operator|.
name|includes
argument_list|(
name|this
operator|.
name|status
argument_list|,
name|status
operator|.
name|status
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|isAllow
parameter_list|()
block|{
return|return
name|isAllow
return|;
block|}
specifier|public
name|boolean
name|isAll
parameter_list|()
block|{
return|return
name|status
operator|==
literal|7
return|;
block|}
specifier|public
name|boolean
name|appliesToThis
parameter_list|()
block|{
return|return
name|status
operator|==
literal|1
return|;
block|}
specifier|public
name|int
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
comment|//-------------------------------------------------------------< Object>---
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ReadStatus : "
operator|+
operator|(
name|isAllow
condition|?
literal|"allow "
else|:
literal|"deny "
operator|)
operator|+
name|status
return|;
block|}
block|}
end_class

end_unit

