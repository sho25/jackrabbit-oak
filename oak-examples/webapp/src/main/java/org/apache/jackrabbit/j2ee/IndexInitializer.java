begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|j2ee
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|JcrUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|AuthInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FulltextIndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|IndexFormatVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|AuthInfoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|AdminPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_comment
comment|/**  * IndexInitializer configures the repository with required fulltext index  *  */
end_comment

begin_class
specifier|public
class|class
name|IndexInitializer
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Repository
name|repository
decl_stmt|;
specifier|public
name|IndexInitializer
parameter_list|(
name|Repository
name|repository
parameter_list|)
block|{
name|this
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
block|}
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|s
init|=
name|createAdministrativeSession
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|s
operator|.
name|nodeExists
argument_list|(
literal|"/oak:index/lucene"
argument_list|)
condition|)
block|{
name|createFullTextIndex
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|createFullTextIndex
parameter_list|(
name|Session
name|s
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|indexPath
init|=
literal|"/oak:index/lucene"
decl_stmt|;
name|Node
name|lucene
init|=
name|JcrUtils
operator|.
name|getOrCreateByPath
argument_list|(
name|indexPath
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|,
literal|"oak:QueryIndexDefinition"
argument_list|,
name|s
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|lucene
operator|.
name|setProperty
argument_list|(
literal|"async"
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|lucene
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|TYPE_PROPERTY_NAME
argument_list|,
literal|"lucene"
argument_list|)
expr_stmt|;
name|lucene
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|EVALUATE_PATH_RESTRICTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|lucene
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|INDEX_PATH
argument_list|,
name|indexPath
argument_list|)
expr_stmt|;
name|lucene
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|COMPAT_MODE
argument_list|,
name|IndexFormatVersion
operator|.
name|V2
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|indexRules
init|=
name|lucene
operator|.
name|addNode
argument_list|(
name|FulltextIndexConstants
operator|.
name|INDEX_RULES
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|Node
name|ntBaseRule
init|=
name|indexRules
operator|.
name|addNode
argument_list|(
name|JcrConstants
operator|.
name|NT_BASE
argument_list|)
decl_stmt|;
comment|//Fulltext index only includes property of type String and Binary
name|ntBaseRule
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|INCLUDE_PROPERTY_TYPES
argument_list|,
operator|new
name|String
index|[]
block|{
name|PropertyType
operator|.
name|TYPENAME_BINARY
block|,
name|PropertyType
operator|.
name|TYPENAME_STRING
block|}
argument_list|)
expr_stmt|;
name|Node
name|propNode
init|=
name|ntBaseRule
operator|.
name|addNode
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_NODE
argument_list|)
decl_stmt|;
name|Node
name|allPropNode
init|=
name|propNode
operator|.
name|addNode
argument_list|(
literal|"allProps"
argument_list|)
decl_stmt|;
name|allPropNode
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|allPropNode
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_NODE_SCOPE_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|allPropNode
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_NAME
argument_list|,
name|FulltextIndexConstants
operator|.
name|REGEX_ALL_PROPS
argument_list|)
expr_stmt|;
name|allPropNode
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_IS_REGEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|allPropNode
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_USE_IN_SPELLCHECK
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//Create aggregates for nt:file
name|Node
name|aggNode
init|=
name|lucene
operator|.
name|addNode
argument_list|(
name|FulltextIndexConstants
operator|.
name|AGGREGATES
argument_list|)
decl_stmt|;
name|Node
name|aggFile
init|=
name|aggNode
operator|.
name|addNode
argument_list|(
name|JcrConstants
operator|.
name|NT_FILE
argument_list|)
decl_stmt|;
name|aggFile
operator|.
name|addNode
argument_list|(
literal|"include0"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|AGG_PATH
argument_list|,
name|JcrConstants
operator|.
name|JCR_CONTENT
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Created fulltext index definition at {}"
argument_list|,
name|indexPath
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Session
name|createAdministrativeSession
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|//Admin ID here can be any string and need not match the actual admin userId
specifier|final
name|String
name|adminId
init|=
literal|"admin"
decl_stmt|;
name|Principal
name|admin
init|=
operator|new
name|AdminPrincipal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|adminId
return|;
block|}
block|}
decl_stmt|;
name|AuthInfo
name|authInfo
init|=
operator|new
name|AuthInfoImpl
argument_list|(
name|adminId
argument_list|,
literal|null
argument_list|,
name|singleton
argument_list|(
name|admin
argument_list|)
argument_list|)
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|(
literal|true
argument_list|,
name|singleton
argument_list|(
name|admin
argument_list|)
argument_list|,
name|singleton
argument_list|(
name|authInfo
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|adminSession
decl_stmt|;
try|try
block|{
name|adminSession
operator|=
name|Subject
operator|.
name|doAsPrivileged
argument_list|(
name|subject
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Session
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Session
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|repository
operator|.
name|login
argument_list|()
return|;
block|}
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"failed to retrieve admin session."
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|adminSession
return|;
block|}
block|}
end_class

end_unit

