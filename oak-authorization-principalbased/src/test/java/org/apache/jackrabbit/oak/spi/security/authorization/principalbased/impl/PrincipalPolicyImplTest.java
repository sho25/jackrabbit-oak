begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|PrincipalPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|Restriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionDefinitionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBitsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFormatException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|REP_GLOB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|REP_ITEM_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|REP_NODE_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_EFFECTIVE_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_PRIVILEGES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_RESTRICTIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_ALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_NAMESPACE_MANAGEMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|PrincipalPolicyImplTest
extends|extends
name|AbstractPrincipalBasedTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_OAK_PATH
init|=
literal|"/oak:test"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|POLICY_OAK_PATH
init|=
name|SUPPORTED_PATH
operator|+
literal|"/oak:testPath"
decl_stmt|;
specifier|private
name|Principal
name|principal
decl_stmt|;
specifier|private
name|String
name|testJcrPath
decl_stmt|;
specifier|private
name|String
name|policyJcrPath
decl_stmt|;
specifier|private
name|PrincipalPolicyImpl
name|emptyPolicy
decl_stmt|;
specifier|private
name|PrincipalPolicyImpl
name|policy
decl_stmt|;
specifier|private
name|PrivilegeBitsProvider
name|privilegeBitsProvider
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|testJcrPath
operator|=
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrPath
argument_list|(
name|TEST_OAK_PATH
argument_list|)
expr_stmt|;
name|policyJcrPath
operator|=
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrPath
argument_list|(
name|POLICY_OAK_PATH
argument_list|)
expr_stmt|;
name|principal
operator|=
operator|new
name|PrincipalImpl
argument_list|(
literal|"principalName"
argument_list|)
expr_stmt|;
name|emptyPolicy
operator|=
name|createPolicy
argument_list|(
name|POLICY_OAK_PATH
argument_list|)
expr_stmt|;
name|policy
operator|=
name|createPolicy
argument_list|(
name|POLICY_OAK_PATH
argument_list|)
expr_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
literal|null
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_NODE_TYPE_DEFINITION_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|privilegeBitsProvider
operator|=
operator|new
name|PrivilegeBitsProvider
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
specifier|private
name|PrincipalPolicyImpl
name|createPolicy
parameter_list|(
annotation|@
name|NotNull
name|String
name|oakPath
parameter_list|)
block|{
return|return
operator|new
name|PrincipalPolicyImpl
argument_list|(
name|principal
argument_list|,
name|oakPath
argument_list|,
name|getMgrProvider
argument_list|(
name|root
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Tree
name|createEntryTree
parameter_list|(
annotation|@
name|NotNull
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
name|entry
parameter_list|)
block|{
name|Tree
name|t
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|PropertyState
name|path
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|,
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|entry
operator|.
name|getOakPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|t
operator|.
name|getProperty
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|PropertyState
name|privs
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|REP_PRIVILEGES
argument_list|,
name|privilegeBitsProvider
operator|.
name|getPrivilegeNames
argument_list|(
name|entry
operator|.
name|getPrivilegeBits
argument_list|()
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|t
operator|.
name|getProperty
argument_list|(
name|REP_PRIVILEGES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|privs
argument_list|)
expr_stmt|;
name|Iterable
name|props
init|=
name|Iterables
operator|.
name|transform
argument_list|(
name|entry
operator|.
name|getRestrictions
argument_list|()
argument_list|,
operator|(
name|Function
argument_list|<
name|Restriction
argument_list|,
name|PropertyState
argument_list|>
operator|)
name|restriction
lambda|->
name|restriction
operator|.
name|getProperty
argument_list|()
argument_list|)
decl_stmt|;
name|Tree
name|rTree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rTree
operator|.
name|getProperties
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|t
operator|.
name|getChild
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rTree
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
specifier|private
name|Tree
name|createEntryTree
parameter_list|(
annotation|@
name|NotNull
name|String
name|oakPath
parameter_list|,
annotation|@
name|NotNull
name|String
modifier|...
name|privilegeNames
parameter_list|)
block|{
name|Tree
name|t
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|PropertyState
name|path
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|,
name|oakPath
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|t
operator|.
name|getProperty
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|PropertyState
name|privs
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|REP_PRIVILEGES
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|privilegeNames
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|t
operator|.
name|getProperty
argument_list|(
name|REP_PRIVILEGES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|privs
argument_list|)
expr_stmt|;
name|Tree
name|rTree
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
operator|.
name|getProperties
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|t
operator|.
name|getChild
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rTree
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|createGlobRestriction
parameter_list|(
annotation|@
name|NotNull
name|String
name|value
parameter_list|)
throws|throws
name|ValueFormatException
block|{
return|return
name|ImmutableMap
operator|.
name|of
argument_list|(
name|getJcrName
argument_list|(
name|REP_GLOB
argument_list|)
argument_list|,
name|getValueFactory
argument_list|(
name|root
argument_list|)
operator|.
name|createValue
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|createRestrictions
parameter_list|(
annotation|@
name|NotNull
name|String
name|oakName
parameter_list|,
annotation|@
name|NotNull
name|String
name|value
parameter_list|)
throws|throws
name|ValueFormatException
block|{
return|return
name|ImmutableMap
operator|.
name|of
argument_list|(
name|getJcrName
argument_list|(
name|oakName
argument_list|)
argument_list|,
name|getValueFactory
argument_list|(
name|root
argument_list|)
operator|.
name|createValue
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Value
index|[]
argument_list|>
name|createMvRestrictions
parameter_list|(
annotation|@
name|NotNull
name|String
name|oakName
parameter_list|,
name|int
name|propertyType
parameter_list|,
annotation|@
name|NotNull
name|String
modifier|...
name|values
parameter_list|)
throws|throws
name|ValueFormatException
block|{
name|ValueFactory
name|vf
init|=
name|getValueFactory
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|Value
index|[]
name|vs
init|=
operator|new
name|Value
index|[
name|values
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|vs
index|[
name|i
index|]
operator|=
name|vf
operator|.
name|createValue
argument_list|(
name|values
index|[
name|i
index|]
argument_list|,
name|propertyType
argument_list|)
expr_stmt|;
block|}
return|return
name|ImmutableMap
operator|.
name|of
argument_list|(
name|getJcrName
argument_list|(
name|oakName
argument_list|)
argument_list|,
name|vs
argument_list|)
return|;
block|}
specifier|private
name|String
name|getJcrName
parameter_list|(
annotation|@
name|NotNull
name|String
name|oakName
parameter_list|)
block|{
return|return
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrName
argument_list|(
name|oakName
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInitialSize
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|emptyPolicy
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSize
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|policy
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitiallyIsEmpty
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|emptyPolicy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsEmpty
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|policy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPath
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|policyJcrPath
argument_list|,
name|policy
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetOakPath
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|POLICY_OAK_PATH
argument_list|,
name|policy
operator|.
name|getOakPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNamePathMapper
parameter_list|()
block|{
name|assertSame
argument_list|(
name|getMgrProvider
argument_list|(
name|root
argument_list|)
operator|.
name|getNamePathMapper
argument_list|()
argument_list|,
name|policy
operator|.
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipal
parameter_list|()
block|{
name|assertSame
argument_list|(
name|principal
argument_list|,
name|policy
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|emptyPolicy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|emptyPolicy
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntryTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|emptyPolicy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|emptyPolicy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|emptyPolicy
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntriesForSamePath
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|emptyPolicy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|emptyPolicy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_NODE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
argument_list|>
name|entries
init|=
name|emptyPolicy
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegeBitsProvider
name|bitsProvider
init|=
operator|new
name|PrivilegeBitsProvider
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testJcrPath
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEffectivePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrivilegeBits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_NODE
argument_list|)
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPrivilegeBits
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntriesWithRestrictionsForSamePath
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|emptyPolicy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|emptyPolicy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|createMvRestrictions
argument_list|(
name|REP_ITEM_NAMES
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|,
literal|"removable"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PrivilegeBitsProvider
name|bitsProvider
init|=
operator|new
name|PrivilegeBitsProvider
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
argument_list|>
name|entries
init|=
name|emptyPolicy
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
name|entry
init|=
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testJcrPath
argument_list|,
name|entry
operator|.
name|getEffectivePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|,
name|entry
operator|.
name|getPrivilegeBits
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entry
operator|.
name|getRestrictions
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|=
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testJcrPath
argument_list|,
name|entry
operator|.
name|getEffectivePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
argument_list|,
name|entry
operator|.
name|getPrivilegeBits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entry
operator|.
name|getRestrictions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REP_ITEM_NAMES
argument_list|,
name|entry
operator|.
name|getRestrictions
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getDefinition
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntriesWithMultipleRestrictionsForSamePath
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|emptyPolicy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"/any*/glob"
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|emptyPolicy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|createMvRestrictions
argument_list|(
name|REP_ITEM_NAMES
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|,
literal|"removable"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PrivilegeBitsProvider
name|bitsProvider
init|=
operator|new
name|PrivilegeBitsProvider
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
argument_list|>
name|entries
init|=
name|emptyPolicy
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
name|entry
init|=
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testJcrPath
argument_list|,
name|entry
operator|.
name|getEffectivePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|,
name|entry
operator|.
name|getPrivilegeBits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entry
operator|.
name|getRestrictions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REP_GLOB
argument_list|,
name|entry
operator|.
name|getRestrictions
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getDefinition
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|=
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testJcrPath
argument_list|,
name|entry
operator|.
name|getEffectivePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
argument_list|,
name|entry
operator|.
name|getPrivilegeBits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
argument_list|,
name|entry
operator|.
name|getPrivilegeBits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entry
operator|.
name|getRestrictions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REP_ITEM_NAMES
argument_list|,
name|entry
operator|.
name|getRestrictions
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getDefinition
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntryWithRestrictions
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Value
index|[]
argument_list|>
name|mvRestrictions
init|=
name|createMvRestrictions
argument_list|(
name|AccessControlConstants
operator|.
name|REP_ITEM_NAMES
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|,
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrName
argument_list|(
literal|"oak:test"
argument_list|)
argument_list|,
literal|"abc"
argument_list|)
decl_stmt|;
name|int
name|expectedSize
init|=
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
decl_stmt|;
name|assertTrue
argument_list|(
name|policy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_WRITE
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|mvRestrictions
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|policy
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntryWithRestrictionsTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
init|=
name|createGlobRestriction
argument_list|(
literal|"*/some*glob"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|policy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|,
name|restrictions
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|policy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|,
name|restrictions
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddEntryMissingMandatoryRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionProvider
name|restrictionProvider
init|=
name|mock
argument_list|(
name|RestrictionProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|restrictionProvider
operator|.
name|getSupportedRestrictions
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|RestrictionDefinitionImpl
argument_list|(
literal|"oak:mandatory"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|MgrProvider
name|mp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|MgrProvider
operator|.
name|class
argument_list|)
operator|.
name|getRestrictionProvider
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|restrictionProvider
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mp
operator|.
name|getNamePathMapper
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
name|plc
init|=
operator|new
name|PrincipalPolicyImpl
argument_list|(
name|principal
argument_list|,
name|POLICY_OAK_PATH
argument_list|,
name|mp
argument_list|)
decl_stmt|;
name|String
name|jcrName
init|=
name|namePathMapper
operator|.
name|getJcrName
argument_list|(
literal|"oak:mandatory"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Value
index|[]
argument_list|>
name|mvRestrictions
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|jcrName
argument_list|,
operator|new
name|Value
index|[]
block|{
name|getValueFactory
argument_list|(
name|root
argument_list|)
operator|.
name|createValue
argument_list|(
literal|1
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|plc
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_VERSION_MANAGEMENT
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|mvRestrictions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddEntryMissingMandatoryMVRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionProvider
name|restrictionProvider
init|=
name|mock
argument_list|(
name|RestrictionProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|restrictionProvider
operator|.
name|getSupportedRestrictions
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|RestrictionDefinitionImpl
argument_list|(
literal|"oak:mandatory"
argument_list|,
name|Type
operator|.
name|LONGS
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|MgrProvider
name|mp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|MgrProvider
operator|.
name|class
argument_list|)
operator|.
name|getRestrictionProvider
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|restrictionProvider
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mp
operator|.
name|getNamePathMapper
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
name|plc
init|=
operator|new
name|PrincipalPolicyImpl
argument_list|(
name|principal
argument_list|,
name|POLICY_OAK_PATH
argument_list|,
name|mp
argument_list|)
decl_stmt|;
name|String
name|jcrName
init|=
name|namePathMapper
operator|.
name|getJcrName
argument_list|(
literal|"oak:mandatory"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|svRestrictions
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|jcrName
argument_list|,
name|getValueFactory
argument_list|(
name|root
argument_list|)
operator|.
name|createValue
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|plc
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_VERSION_MANAGEMENT
argument_list|)
argument_list|,
name|svRestrictions
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddEntryMandatoryRestrictionWithOakName
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionProvider
name|restrictionProvider
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|RestrictionProvider
operator|.
name|class
argument_list|)
operator|.
name|getSupportedRestrictions
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|RestrictionDefinitionImpl
argument_list|(
literal|"oak:mandatory"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|MgrProvider
name|mp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|MgrProvider
operator|.
name|class
argument_list|)
operator|.
name|getRestrictionProvider
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|restrictionProvider
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mp
operator|.
name|getNamePathMapper
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
name|plc
init|=
operator|new
name|PrincipalPolicyImpl
argument_list|(
name|principal
argument_list|,
name|POLICY_OAK_PATH
argument_list|,
name|mp
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|svRestrictions
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"oak:mandatory"
argument_list|,
name|getValueFactory
argument_list|(
name|root
argument_list|)
operator|.
name|createValue
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|plc
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_VERSION_MANAGEMENT
argument_list|)
argument_list|,
name|svRestrictions
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntryMandatoryRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionDefinition
name|def
init|=
operator|new
name|RestrictionDefinitionImpl
argument_list|(
literal|"mandatory"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Restriction
name|r
init|=
name|mock
argument_list|(
name|Restriction
operator|.
name|class
argument_list|)
decl_stmt|;
name|RestrictionProvider
name|restrictionProvider
init|=
name|mock
argument_list|(
name|RestrictionProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|restrictionProvider
operator|.
name|getSupportedRestrictions
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|def
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|restrictionProvider
operator|.
name|createRestriction
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|Value
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|MgrProvider
name|mp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|MgrProvider
operator|.
name|class
argument_list|)
operator|.
name|getRestrictionProvider
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|restrictionProvider
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mp
operator|.
name|getNamePathMapper
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mp
operator|.
name|getPrivilegeManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getPrivilegeManager
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mp
operator|.
name|getPrivilegeBitsProvider
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|PrivilegeBitsProvider
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
name|plc
init|=
operator|new
name|PrincipalPolicyImpl
argument_list|(
name|principal
argument_list|,
name|POLICY_OAK_PATH
argument_list|,
name|mp
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|svRestrictions
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"mandatory"
argument_list|,
name|getValueFactory
argument_list|(
name|root
argument_list|)
operator|.
name|createValue
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|plc
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_VERSION_MANAGEMENT
argument_list|)
argument_list|,
name|svRestrictions
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|plc
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRestrictions
argument_list|()
operator|.
name|contains
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntryForRepositoryLevel
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|emptyPolicy
operator|.
name|addEntry
argument_list|(
literal|null
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_WORKSPACE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|emptyPolicy
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddEntryEmptyPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|policy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddEntryUnknownPrivilege
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
name|privilege
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|Privilege
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"unknown"
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
operator|new
name|Privilege
index|[]
block|{
name|privilege
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddEntryAbstractPrivilege
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
name|privilege
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|Privilege
operator|.
name|class
argument_list|)
operator|.
name|isAbstract
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|privilege
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"abstract"
argument_list|)
expr_stmt|;
name|PrivilegeManager
name|privilegeManager
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PrivilegeManager
operator|.
name|class
argument_list|)
operator|.
name|getPrivilege
argument_list|(
literal|"abstract"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|privilege
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|MgrProvider
name|mp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|MgrProvider
operator|.
name|class
argument_list|)
operator|.
name|getPrivilegeManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|privilegeManager
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mp
operator|.
name|getNamePathMapper
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mp
operator|.
name|getRestrictionProvider
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|RestrictionProvider
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
name|policy
init|=
operator|new
name|PrincipalPolicyImpl
argument_list|(
name|principal
argument_list|,
name|POLICY_OAK_PATH
argument_list|,
name|mp
argument_list|)
decl_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
operator|new
name|Privilege
index|[]
block|{
name|privilege
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddAccessControlEntryDifferentPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|policy
operator|.
name|addEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_ALL
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddDenyingAccessControlEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|policy
operator|.
name|addEntry
argument_list|(
name|principal
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|)
argument_list|,
literal|false
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddAccessControlEntryMissingNodePath
parameter_list|()
throws|throws
name|Exception
block|{
name|policy
operator|.
name|addEntry
argument_list|(
name|principal
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_USER_MANAGEMENT
argument_list|)
argument_list|,
literal|true
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|AccessControlConstants
operator|.
name|REP_NT_NAMES
argument_list|,
operator|new
name|Value
index|[]
block|{
name|getValueFactory
argument_list|(
name|root
argument_list|)
operator|.
name|createValue
argument_list|(
name|NodeTypeConstants
operator|.
name|NT_REP_SYSTEM
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddAccessControlEntryMissingNodePath2
parameter_list|()
throws|throws
name|Exception
block|{
name|policy
operator|.
name|addEntry
argument_list|(
name|principal
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddAccessControlEntryWithEmptyNodePathRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|ValueFactory
name|vf
init|=
name|getValueFactory
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|emptyPolicy
operator|.
name|addEntry
argument_list|(
name|principal
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_ADD_PROPERTIES
argument_list|)
argument_list|,
literal|true
argument_list|,
name|createRestrictions
argument_list|(
name|REP_NODE_PATH
argument_list|,
literal|""
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
argument_list|>
name|entries
init|=
name|emptyPolicy
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
name|entry
init|=
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|entry
operator|.
name|getOakPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// effective-path restriction must be filtered out
name|assertNull
argument_list|(
name|entry
operator|.
name|getRestrictions
argument_list|(
name|getJcrName
argument_list|(
name|REP_NODE_PATH
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddAccessControlEntryWithNodePathRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|ValueFactory
name|vf
init|=
name|getValueFactory
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|emptyPolicy
operator|.
name|addEntry
argument_list|(
name|principal
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_ADD_PROPERTIES
argument_list|)
argument_list|,
literal|true
argument_list|,
name|createRestrictions
argument_list|(
name|REP_NODE_PATH
argument_list|,
name|testJcrPath
argument_list|)
argument_list|,
name|createMvRestrictions
argument_list|(
name|AccessControlConstants
operator|.
name|REP_ITEM_NAMES
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|,
literal|"itemName"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
argument_list|>
name|entries
init|=
name|emptyPolicy
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
name|entry
init|=
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TEST_OAK_PATH
argument_list|,
name|entry
operator|.
name|getOakPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// effective-path restriction must be filtered out
name|assertNull
argument_list|(
name|entry
operator|.
name|getRestrictions
argument_list|(
name|getJcrName
argument_list|(
name|REP_NODE_PATH
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddAccessControlEntryWithRestrictions
parameter_list|()
throws|throws
name|Exception
block|{
name|ValueFactory
name|vf
init|=
name|getValueFactory
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restr
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|getJcrName
argument_list|(
name|REP_NODE_PATH
argument_list|)
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
name|testJcrPath
argument_list|)
argument_list|,
name|getJcrName
argument_list|(
name|REP_GLOB
argument_list|)
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|"string"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|emptyPolicy
operator|.
name|addEntry
argument_list|(
name|principal
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_USER_MANAGEMENT
argument_list|)
argument_list|,
literal|true
argument_list|,
name|restr
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
argument_list|>
name|entries
init|=
name|emptyPolicy
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
name|entry
init|=
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TEST_OAK_PATH
argument_list|,
name|entry
operator|.
name|getOakPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// effective-path restriction must be filtered out
name|assertNull
argument_list|(
name|entry
operator|.
name|getRestrictions
argument_list|(
name|getJcrName
argument_list|(
name|REP_NODE_PATH
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|entry
operator|.
name|getRestrictions
argument_list|(
name|getJcrName
argument_list|(
name|REP_GLOB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addEntryTree
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|emptyPolicy
operator|.
name|addEntry
argument_list|(
name|createEntryTree
argument_list|(
name|TEST_OAK_PATH
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_WRITE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
name|entry
init|=
name|emptyPolicy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testJcrPath
argument_list|,
name|entry
operator|.
name|getEffectivePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_OAK_PATH
argument_list|,
name|entry
operator|.
name|getOakPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|privilegeBitsProvider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_WRITE
argument_list|)
argument_list|,
name|entry
operator|.
name|getPrivilegeBits
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addEntryTreeRepositoryLevel
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|emptyPolicy
operator|.
name|addEntry
argument_list|(
name|createEntryTree
argument_list|(
literal|""
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_WRITE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
name|entry
init|=
name|emptyPolicy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|entry
operator|.
name|getEffectivePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entry
operator|.
name|getOakPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addEntryTreeJcrAll
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|emptyPolicy
operator|.
name|addEntry
argument_list|(
name|createEntryTree
argument_list|(
name|TEST_OAK_PATH
argument_list|,
name|JCR_ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
name|entry
init|=
name|emptyPolicy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|privilegesFromNames
argument_list|(
name|JCR_ALL
argument_list|)
argument_list|,
name|entry
operator|.
name|getPrivileges
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addEntryTreeExistingEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|policy
operator|.
name|addEntry
argument_list|(
name|createEntryTree
argument_list|(
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveEntry
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|AccessControlEntry
name|entry
range|:
name|policy
operator|.
name|getAccessControlEntries
argument_list|()
control|)
block|{
name|assertFalse
argument_list|(
name|policy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|policy
operator|.
name|removeAccessControlEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
name|assertTrue
argument_list|(
name|policy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRemoveEntryTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlEntry
name|entry
init|=
name|policy
operator|.
name|getAccessControlEntries
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|policy
operator|.
name|removeAccessControlEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|policy
operator|.
name|removeAccessControlEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRemoveEntryInvalidEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|policy
operator|.
name|removeAccessControlEntry
argument_list|(
name|invalidEntry
argument_list|(
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrderBefore
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPolicy
operator|.
name|Entry
name|entryA
init|=
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PrincipalPolicy
operator|.
name|Entry
name|entryB
init|=
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|policy
operator|.
name|orderBefore
argument_list|(
name|entryB
argument_list|,
name|entryA
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AccessControlEntry
index|[]
block|{
name|entryB
block|,
name|entryA
block|}
argument_list|,
name|policy
operator|.
name|getAccessControlEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrderBeforeDestNull
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPolicy
operator|.
name|Entry
name|entry
init|=
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|policy
operator|.
name|orderBefore
argument_list|(
name|entry
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
argument_list|,
name|policy
operator|.
name|getAccessControlEntries
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrderBeforeSame
parameter_list|()
throws|throws
name|Exception
block|{
name|policy
operator|.
name|orderBefore
argument_list|(
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testOrderBeforeNonExistingSrc
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPolicy
operator|.
name|Entry
name|entry
init|=
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|policy
operator|.
name|removeAccessControlEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|policy
operator|.
name|orderBefore
argument_list|(
name|entry
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testOrderBeforeNonExistingDest
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPolicy
operator|.
name|Entry
name|entry
init|=
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|policy
operator|.
name|removeAccessControlEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|policy
operator|.
name|orderBefore
argument_list|(
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testOrderBeforeInvalidSrc
parameter_list|()
throws|throws
name|Exception
block|{
name|policy
operator|.
name|orderBefore
argument_list|(
name|invalidEntry
argument_list|(
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testOrderBeforeInvalidDest
parameter_list|()
throws|throws
name|Exception
block|{
name|policy
operator|.
name|orderBefore
argument_list|(
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|invalidEntry
argument_list|(
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
decl_stmt|;
name|emptyPolicy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
name|entry
init|=
name|emptyPolicy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TEST_OAK_PATH
argument_list|,
name|entry
operator|.
name|getOakPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testJcrPath
argument_list|,
name|entry
operator|.
name|getEffectivePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|privs
argument_list|,
name|entry
operator|.
name|getPrivileges
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|privilegeBitsProvider
operator|.
name|getBits
argument_list|(
name|JCR_ALL
argument_list|)
argument_list|,
name|entry
operator|.
name|getPrivilegeBits
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|principal
argument_list|,
name|entry
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entry
operator|.
name|isAllow
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEntryRepositoryLevel
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromNames
argument_list|(
name|JCR_NAMESPACE_MANAGEMENT
argument_list|)
decl_stmt|;
name|emptyPolicy
operator|.
name|addEntry
argument_list|(
literal|null
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
name|entry
init|=
name|emptyPolicy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|entry
operator|.
name|getOakPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|entry
operator|.
name|getEffectivePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|privs
argument_list|,
name|entry
operator|.
name|getPrivileges
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|privilegeBitsProvider
operator|.
name|getBits
argument_list|(
name|JCR_NAMESPACE_MANAGEMENT
argument_list|)
argument_list|,
name|entry
operator|.
name|getPrivilegeBits
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|principal
argument_list|,
name|entry
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entry
operator|.
name|isAllow
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEntryHashCode
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
name|entryA
init|=
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
name|entryB
init|=
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|entryA
operator|.
name|hashCode
argument_list|()
argument_list|,
name|entryB
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// same entry -> same hash
name|assertEquals
argument_list|(
name|entryA
operator|.
name|hashCode
argument_list|()
argument_list|,
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// equivalent entry on different policy -> same hash
name|emptyPolicy
operator|.
name|addEntry
argument_list|(
name|entryB
operator|.
name|getEffectivePath
argument_list|()
argument_list|,
name|entryB
operator|.
name|getPrivileges
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entryB
operator|.
name|hashCode
argument_list|()
argument_list|,
name|emptyPolicy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// different restrictions -> different hash
name|emptyPolicy
operator|.
name|addEntry
argument_list|(
name|entryA
operator|.
name|getEffectivePath
argument_list|()
argument_list|,
name|entryA
operator|.
name|getPrivileges
argument_list|()
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|entryA
operator|.
name|hashCode
argument_list|()
argument_list|,
name|emptyPolicy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEntryEquals
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
name|entryA
init|=
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
name|entryB
init|=
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|entryA
argument_list|,
name|entryB
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|entryB
argument_list|,
name|entryA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entryA
argument_list|,
name|entryA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entryA
argument_list|,
name|policy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// equivalent entry on different policy -> same hash
name|emptyPolicy
operator|.
name|addEntry
argument_list|(
name|entryB
operator|.
name|getEffectivePath
argument_list|()
argument_list|,
name|entryB
operator|.
name|getPrivileges
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entryB
argument_list|,
name|emptyPolicy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// different restrictions -> different hash
name|emptyPolicy
operator|.
name|addEntry
argument_list|(
name|entryA
operator|.
name|getEffectivePath
argument_list|()
argument_list|,
name|entryA
operator|.
name|getPrivileges
argument_list|()
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|entryA
argument_list|,
name|emptyPolicy
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|PrincipalPolicy
operator|.
name|Entry
name|invalidEntry
parameter_list|(
annotation|@
name|NotNull
name|PrincipalPolicy
operator|.
name|Entry
name|entry
parameter_list|)
block|{
return|return
operator|new
name|PrincipalPolicy
operator|.
name|Entry
argument_list|()
block|{
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|String
name|getEffectivePath
parameter_list|()
block|{
return|return
name|entry
operator|.
name|getEffectivePath
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAllow
parameter_list|()
block|{
return|return
name|entry
operator|.
name|isAllow
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getRestrictionNames
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|entry
operator|.
name|getRestrictionNames
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Value
name|getRestriction
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|ValueFormatException
throws|,
name|RepositoryException
block|{
return|return
name|entry
operator|.
name|getRestriction
argument_list|(
name|s
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Value
index|[]
name|getRestrictions
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|entry
operator|.
name|getRestrictions
argument_list|(
name|s
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Principal
name|getPrincipal
parameter_list|()
block|{
return|return
name|entry
operator|.
name|getPrincipal
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getPrivileges
parameter_list|()
block|{
return|return
name|entry
operator|.
name|getPrivileges
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

