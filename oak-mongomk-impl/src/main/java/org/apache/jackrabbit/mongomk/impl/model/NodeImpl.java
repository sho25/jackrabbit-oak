begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|RangeIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link Node}.  *  * @author<a href="mailto:pmarx@adobe.com>Philipp Marx</a>  */
end_comment

begin_class
specifier|public
class|class
name|NodeImpl
implements|implements
name|Node
block|{
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Node
argument_list|>
name|EMPTY
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|private
name|long
name|childCount
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Node
argument_list|>
name|children
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|path
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
decl_stmt|;
specifier|private
name|String
name|revisionId
decl_stmt|;
comment|/**      * Constructs a new {@code NodeImpl}.      */
specifier|public
name|NodeImpl
parameter_list|()
block|{     }
comment|/**      * Constructs a new {@code NodeImpl}.      *      * @param path The path.      */
specifier|public
name|NodeImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
argument_list|(
name|path
argument_list|,
operator|(
name|Set
argument_list|<
name|Node
argument_list|>
operator|)
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a new {@code NodeImpl}.      *      * @param path The path.      * @param children The children.      */
specifier|public
name|NodeImpl
parameter_list|(
name|String
name|path
parameter_list|,
name|Node
index|[]
name|children
parameter_list|)
block|{
name|this
argument_list|(
name|path
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Node
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|children
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a new {@code NodeImpl}.      *      * @param path The path.      * @param children The children.      * @param properties The properties.      */
specifier|public
name|NodeImpl
parameter_list|(
name|String
name|path
parameter_list|,
name|Set
argument_list|<
name|Node
argument_list|>
name|children
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|setChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds the given {@link Node} as child.      *      * @param child The {@code node} to add.      */
specifier|public
name|void
name|addChild
parameter_list|(
name|Node
name|child
parameter_list|)
block|{
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
name|children
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Node
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|children
operator|.
name|put
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildCount
parameter_list|()
block|{
return|return
name|childCount
return|;
block|}
comment|/**      * Sets the child count.      *      * @param childCount The child count.      */
specifier|public
name|void
name|setChildCount
parameter_list|(
name|long
name|childCount
parameter_list|)
block|{
name|this
operator|.
name|childCount
operator|=
name|childCount
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Node
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|this
operator|.
name|children
operator|!=
literal|null
condition|?
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Node
argument_list|>
argument_list|(
name|this
operator|.
name|children
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**      * Sets the children.      *      * @param children The children or null.      */
specifier|public
name|void
name|setChildren
parameter_list|(
name|Set
argument_list|<
name|Node
argument_list|>
name|children
parameter_list|)
block|{
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|children
operator|=
literal|null
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|children
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Node
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Node
name|child
range|:
name|children
control|)
block|{
name|this
operator|.
name|children
operator|.
name|put
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Iterator
argument_list|<
name|Node
argument_list|>
name|getChildEntries
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|<
literal|0
operator|||
name|count
operator|<
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
return|return
name|EMPTY
operator|.
name|iterator
argument_list|()
return|;
block|}
if|if
condition|(
name|offset
operator|==
literal|0
operator|&&
name|count
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|children
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
if|if
condition|(
name|offset
operator|>=
name|children
operator|.
name|size
argument_list|()
operator|||
name|count
operator|==
literal|0
condition|)
block|{
return|return
name|EMPTY
operator|.
name|iterator
argument_list|()
return|;
block|}
if|if
condition|(
name|count
operator|==
operator|-
literal|1
operator|||
operator|(
name|offset
operator|+
name|count
operator|)
operator|>
name|children
operator|.
name|size
argument_list|()
condition|)
block|{
name|count
operator|=
name|children
operator|.
name|size
argument_list|()
operator|-
name|offset
expr_stmt|;
block|}
return|return
operator|new
name|RangeIterator
argument_list|<
name|Node
argument_list|>
argument_list|(
name|children
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
name|offset
argument_list|,
name|count
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Node
argument_list|>
name|getDescendants
parameter_list|(
name|boolean
name|includeThis
parameter_list|)
block|{
name|Set
argument_list|<
name|Node
argument_list|>
name|descendants
init|=
operator|new
name|HashSet
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeThis
condition|)
block|{
name|descendants
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|getDescendantsRecursive
argument_list|(
name|this
argument_list|,
name|descendants
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|descendants
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
comment|/**      * Sets the path of this node which will automatically set the name of the node as well.      *      * @param path The path.      */
specifier|public
name|void
name|setPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|name
operator|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|this
operator|.
name|properties
operator|!=
literal|null
condition|?
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|this
operator|.
name|properties
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**      * Sets the properties of this node.      *      * @param properties The properties.      */
specifier|public
name|void
name|setProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRevisionId
parameter_list|()
block|{
return|return
name|revisionId
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRevisionId
parameter_list|(
name|String
name|revisionId
parameter_list|)
block|{
name|this
operator|.
name|revisionId
operator|=
name|revisionId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
operator|(
operator|(
name|this
operator|.
name|children
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|children
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
operator|(
operator|(
name|this
operator|.
name|name
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|name
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
operator|(
operator|(
name|this
operator|.
name|path
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|path
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
operator|(
operator|(
name|this
operator|.
name|properties
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|properties
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
operator|(
operator|(
name|this
operator|.
name|revisionId
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|revisionId
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|NodeImpl
name|other
init|=
operator|(
name|NodeImpl
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|children
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|children
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|this
operator|.
name|children
operator|.
name|equals
argument_list|(
name|other
operator|.
name|children
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|name
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|this
operator|.
name|name
operator|.
name|equals
argument_list|(
name|other
operator|.
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|path
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|path
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|this
operator|.
name|path
operator|.
name|equals
argument_list|(
name|other
operator|.
name|path
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|properties
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|properties
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|this
operator|.
name|properties
operator|.
name|equals
argument_list|(
name|other
operator|.
name|properties
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|revisionId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|revisionId
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|this
operator|.
name|revisionId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|revisionId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"NodeImpl ["
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"name="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|path
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"path="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|this
operator|.
name|path
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|revisionId
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"revisionId="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|this
operator|.
name|revisionId
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|properties
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"properties="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|this
operator|.
name|properties
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|children
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"children="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|this
operator|.
name|children
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|getDescendantsRecursive
parameter_list|(
name|Node
name|node
parameter_list|,
name|Set
argument_list|<
name|Node
argument_list|>
name|descendants
parameter_list|)
block|{
name|Set
argument_list|<
name|Node
argument_list|>
name|children
init|=
name|node
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Node
name|child
range|:
name|children
control|)
block|{
name|descendants
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|this
operator|.
name|getDescendantsRecursive
argument_list|(
name|child
argument_list|,
name|descendants
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

