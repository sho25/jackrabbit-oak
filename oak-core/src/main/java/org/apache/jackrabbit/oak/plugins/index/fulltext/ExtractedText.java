begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|fulltext
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|ExtractedText
block|{
specifier|public
enum|enum
name|ExtractionResult
block|{
comment|/**          * Indicates that text extraction was successful and some text          * was extracted          */
name|SUCCESS
block|,
comment|/**          * Indicates that no text was extracted. This can happen if the          * mimeType for the binary is part of exclusion list          */
name|EMPTY
block|,
comment|/**          * Indicates that text extraction resulted in an error.          * The {@link ExtractedText#getExtractedText()} might contain          * more details          */
name|ERROR
block|}
specifier|public
specifier|static
specifier|final
name|ExtractedText
name|ERROR
init|=
operator|new
name|ExtractedText
argument_list|(
name|ExtractionResult
operator|.
name|ERROR
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ExtractedText
name|EMPTY
init|=
operator|new
name|ExtractedText
argument_list|(
name|ExtractionResult
operator|.
name|EMPTY
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ExtractionResult
name|extractionResult
decl_stmt|;
specifier|private
specifier|final
name|CharSequence
name|extractedText
decl_stmt|;
specifier|public
name|ExtractedText
parameter_list|(
annotation|@
name|Nonnull
name|ExtractionResult
name|extractionResult
parameter_list|)
block|{
name|this
argument_list|(
name|extractionResult
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ExtractedText
parameter_list|(
annotation|@
name|Nonnull
name|ExtractionResult
name|extractionResult
parameter_list|,
name|CharSequence
name|extractedText
parameter_list|)
block|{
name|this
operator|.
name|extractionResult
operator|=
name|extractionResult
expr_stmt|;
name|this
operator|.
name|extractedText
operator|=
name|extractedText
expr_stmt|;
name|checkState
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Nonnull
specifier|public
name|ExtractionResult
name|getExtractionResult
parameter_list|()
block|{
return|return
name|extractionResult
return|;
block|}
annotation|@
name|CheckForNull
specifier|public
name|CharSequence
name|getExtractedText
parameter_list|()
block|{
return|return
name|extractedText
return|;
block|}
specifier|private
name|void
name|checkState
parameter_list|()
block|{
if|if
condition|(
name|extractionResult
operator|==
name|ExtractionResult
operator|.
name|SUCCESS
condition|)
block|{
name|checkNotNull
argument_list|(
name|extractedText
argument_list|,
literal|"extractedText must not be null for SUCCESS"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

