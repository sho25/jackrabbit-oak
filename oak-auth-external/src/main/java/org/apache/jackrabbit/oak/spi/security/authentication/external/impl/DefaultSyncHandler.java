begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|value
operator|.
name|ValueFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalUser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * {@code DefaultSyncHandler} implements an sync handler that synchronizes users and groups from an external identity  * provider with the repository users.  *<p/>  * Please refer to {@link DefaultSyncConfig} for configuration options.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
comment|// note that the metatype information is generated from DefaultSyncConfig
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|DefaultSyncHandler
implements|implements
name|SyncHandler
block|{
comment|/**      * logger instance      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultSyncHandler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * internal configuration      */
specifier|private
name|DefaultSyncConfig
name|config
decl_stmt|;
comment|/**      * Default constructor for OSGi      */
specifier|public
name|DefaultSyncHandler
parameter_list|()
block|{     }
comment|/**      * Constructor for non-OSGi cases.      *      * @param config the configuration      */
specifier|public
name|DefaultSyncHandler
parameter_list|(
name|DefaultSyncConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
annotation|@
name|Activate
specifier|private
name|void
name|activate
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|ConfigurationParameters
name|cfg
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|config
operator|=
name|DefaultSyncConfig
operator|.
name|of
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|config
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|SyncContext
name|createContext
parameter_list|(
annotation|@
name|Nonnull
name|ExternalIdentityProvider
name|idp
parameter_list|,
annotation|@
name|Nonnull
name|UserManager
name|userManager
parameter_list|,
annotation|@
name|Nonnull
name|Root
name|root
parameter_list|)
throws|throws
name|SyncException
block|{
return|return
operator|new
name|ContextImpl
argument_list|(
name|idp
argument_list|,
name|userManager
argument_list|,
name|root
argument_list|)
return|;
block|}
specifier|private
class|class
name|ContextImpl
implements|implements
name|SyncContext
block|{
specifier|private
specifier|final
name|ExternalIdentityProvider
name|idp
decl_stmt|;
specifier|private
specifier|final
name|UserManager
name|userManager
decl_stmt|;
specifier|private
specifier|final
name|Root
name|root
decl_stmt|;
specifier|private
specifier|final
name|ValueFactory
name|valueFactory
decl_stmt|;
specifier|private
name|ContextImpl
parameter_list|(
name|ExternalIdentityProvider
name|idp
parameter_list|,
name|UserManager
name|userManager
parameter_list|,
name|Root
name|root
parameter_list|)
block|{
name|this
operator|.
name|idp
operator|=
name|idp
expr_stmt|;
name|this
operator|.
name|userManager
operator|=
name|userManager
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|valueFactory
operator|=
operator|new
name|ValueFactoryImpl
argument_list|(
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// nothing to do
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|sync
parameter_list|(
annotation|@
name|Nonnull
name|ExternalIdentity
name|identity
parameter_list|)
throws|throws
name|SyncException
block|{
try|try
block|{
if|if
condition|(
name|identity
operator|instanceof
name|ExternalUser
condition|)
block|{
name|User
name|user
init|=
name|getUser
argument_list|(
name|identity
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|createUser
argument_list|(
operator|(
name|ExternalUser
operator|)
name|identity
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updateUser
argument_list|(
operator|(
name|ExternalUser
operator|)
name|identity
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|identity
operator|instanceof
name|ExternalGroup
condition|)
block|{
comment|// todo
return|return
literal|false
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"identity must be user or group but was: "
operator|+
name|identity
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SyncException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExternalIdentityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SyncException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|CheckForNull
specifier|private
name|User
name|getUser
parameter_list|(
annotation|@
name|Nonnull
name|ExternalIdentity
name|externalUser
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Authorizable
name|authorizable
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|authorizable
operator|==
literal|null
condition|)
block|{
name|authorizable
operator|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalUser
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|authorizable
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|authorizable
operator|instanceof
name|User
condition|)
block|{
return|return
operator|(
name|User
operator|)
name|authorizable
return|;
block|}
else|else
block|{
comment|// TODO: deal with colliding authorizable that is group.
name|log
operator|.
name|warn
argument_list|(
literal|"unexpected authorizable: {}"
argument_list|,
name|authorizable
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|CheckForNull
specifier|private
name|User
name|createUser
parameter_list|(
name|ExternalUser
name|externalUser
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|SyncException
throws|,
name|ExternalIdentityException
block|{
name|String
name|password
init|=
name|externalUser
operator|.
name|getPassword
argument_list|()
decl_stmt|;
comment|// todo: make configurable
name|Principal
name|principal
init|=
operator|new
name|PrincipalImpl
argument_list|(
name|externalUser
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|userManager
operator|.
name|createUser
argument_list|(
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|,
name|password
argument_list|,
name|principal
argument_list|,
name|concatPaths
argument_list|(
name|config
operator|.
name|user
argument_list|()
operator|.
name|getPathPrefix
argument_list|()
argument_list|,
name|externalUser
operator|.
name|getIntermediatePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|syncAuthorizable
argument_list|(
name|externalUser
argument_list|,
name|user
argument_list|)
expr_stmt|;
return|return
name|user
return|;
block|}
annotation|@
name|CheckForNull
specifier|private
name|Group
name|createGroup
parameter_list|(
name|ExternalGroup
name|externalGroup
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|SyncException
throws|,
name|ExternalIdentityException
block|{
name|Principal
name|principal
init|=
operator|new
name|PrincipalImpl
argument_list|(
name|externalGroup
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
decl_stmt|;
name|Group
name|group
init|=
name|userManager
operator|.
name|createGroup
argument_list|(
name|externalGroup
operator|.
name|getId
argument_list|()
argument_list|,
name|principal
argument_list|,
name|concatPaths
argument_list|(
name|config
operator|.
name|user
argument_list|()
operator|.
name|getPathPrefix
argument_list|()
argument_list|,
name|externalGroup
operator|.
name|getIntermediatePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|syncAuthorizable
argument_list|(
name|externalGroup
argument_list|,
name|group
argument_list|)
expr_stmt|;
return|return
name|group
return|;
block|}
specifier|private
name|void
name|updateUser
parameter_list|(
name|ExternalUser
name|externalUser
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|SyncException
throws|,
name|ExternalIdentityException
block|{
name|syncAuthorizable
argument_list|(
name|externalUser
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|syncAuthorizable
parameter_list|(
name|ExternalIdentity
name|externalUser
parameter_list|,
name|Authorizable
name|authorizable
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|SyncException
throws|,
name|ExternalIdentityException
block|{
for|for
control|(
name|ExternalIdentityRef
name|externalGroupRef
range|:
name|externalUser
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|ExternalIdentity
name|id
init|=
name|idp
operator|.
name|getIdentity
argument_list|(
name|externalGroupRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|instanceof
name|ExternalGroup
condition|)
block|{
name|ExternalGroup
name|externalGroup
init|=
operator|(
name|ExternalGroup
operator|)
name|id
decl_stmt|;
name|String
name|groupId
init|=
name|externalGroup
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Group
name|group
decl_stmt|;
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
name|group
operator|=
name|createGroup
argument_list|(
name|externalGroup
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|group
operator|=
operator|(
name|a
operator|.
name|isGroup
argument_list|()
operator|)
condition|?
operator|(
name|Group
operator|)
name|a
else|:
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|group
operator|.
name|addMember
argument_list|(
name|authorizable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No such group "
operator|+
name|groupId
operator|+
literal|"; Ignoring group membership."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|properties
init|=
name|externalUser
operator|.
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Object
name|prop
init|=
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|instanceof
name|Collection
condition|)
block|{
name|Value
index|[]
name|values
init|=
name|createValues
argument_list|(
operator|(
name|Collection
operator|)
name|prop
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|authorizable
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Value
name|value
init|=
name|createValue
argument_list|(
name|prop
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|authorizable
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|CheckForNull
specifier|private
name|Value
name|createValue
parameter_list|(
name|Object
name|propValue
parameter_list|)
throws|throws
name|ValueFormatException
block|{
name|int
name|type
init|=
name|getType
argument_list|(
name|propValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|PropertyType
operator|.
name|UNDEFINED
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|valueFactory
operator|.
name|createValue
argument_list|(
name|propValue
operator|.
name|toString
argument_list|()
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
annotation|@
name|CheckForNull
specifier|private
name|Value
index|[]
name|createValues
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|propValues
parameter_list|)
throws|throws
name|ValueFormatException
block|{
name|List
argument_list|<
name|Value
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Value
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|propValues
control|)
block|{
name|Value
name|v
init|=
name|createValue
argument_list|(
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|values
operator|.
name|toArray
argument_list|(
operator|new
name|Value
index|[
name|values
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|int
name|getType
parameter_list|(
name|Object
name|propValue
parameter_list|)
block|{
comment|// TODO: add proper type detection
if|if
condition|(
name|propValue
operator|==
literal|null
condition|)
block|{
return|return
name|PropertyType
operator|.
name|UNDEFINED
return|;
block|}
else|else
block|{
return|return
name|PropertyType
operator|.
name|STRING
return|;
block|}
block|}
block|}
comment|/**      * Robust relative path concatenation.      * @param paths relative paths      * @return the concatenated path      */
specifier|private
specifier|static
name|String
name|concatPaths
parameter_list|(
name|String
modifier|...
name|paths
parameter_list|)
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|i0
init|=
literal|0
decl_stmt|;
name|int
name|i1
init|=
name|path
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i0
operator|<
name|i1
operator|&&
name|path
operator|.
name|charAt
argument_list|(
name|i0
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|i0
operator|++
expr_stmt|;
block|}
while|while
condition|(
name|i1
operator|>
name|i0
operator|&&
name|path
operator|.
name|charAt
argument_list|(
name|i1
operator|-
literal|1
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|i1
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|i1
operator|>
name|i0
condition|)
block|{
if|if
condition|(
name|result
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
name|path
operator|.
name|substring
argument_list|(
name|i0
argument_list|,
name|i1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

