begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|LineIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|AbstractDataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|AbstractDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_comment
comment|/**  * A DelegatingDataStore can avoid performing expensive file system access by making  * use of pre computed data related to files in DataStore.  *<p>  * During repository migration actual blob content is not accessed and instead  * only the blob length and blob references are accessed. DelegatingDataStore can be  * configured with a mapping file which would be used to determine the length of given  * blob reference.  *<p>  * Mapping file format  *<pre>{@code  *     #< length>|< identifier>  *     4432|dd10bca036f3134352c63e534d4568a3d2ac2fdc  *     32167|dd10bca036f3134567c63e534d4568a3d2ac2fdc  * }</pre>  *<p>  * The Configuration:  *<pre>{@code  *<DataStore class="org.apache.jackrabbit.oak.upgrade.blob.LengthCachingDataStore">  *<param name="mappingFilePath" value="/path/to/mapping/file" />  *<param name="delegateClass" value="org.apache.jackrabbit.core.data.FileDataStore" />  *</DataStore>  * }</pre>  */
end_comment

begin_class
specifier|public
class|class
name|LengthCachingDataStore
extends|extends
name|AbstractDataStore
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LengthCachingDataStore
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Separator used while writing length and identifier to the mapping file      */
specifier|public
specifier|static
specifier|final
name|char
name|SEPARATOR
init|=
literal|'|'
decl_stmt|;
comment|//TODO For now using an in memory map. For very large repositories
comment|//this might consume lots of memory. For such case we would need to switch to
comment|//some off heap map
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|existingMappings
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|newMappings
init|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
specifier|private
name|String
name|mappingFilePath
init|=
literal|"datastore-list.txt"
decl_stmt|;
specifier|private
name|String
name|delegateClass
decl_stmt|;
specifier|private
name|String
name|delegateConfigFilePath
decl_stmt|;
specifier|private
name|DataStore
name|delegate
decl_stmt|;
specifier|private
name|boolean
name|readOnly
init|=
literal|true
decl_stmt|;
specifier|private
name|File
name|mappingFile
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|String
name|homeDir
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|initializeDelegate
argument_list|(
name|homeDir
argument_list|)
expr_stmt|;
name|initializeMappingData
argument_list|(
name|homeDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|DataRecord
name|getRecordIfStored
parameter_list|(
name|DataIdentifier
name|dataIdentifier
parameter_list|)
throws|throws
name|DataStoreException
block|{
if|if
condition|(
name|existingMappings
operator|.
name|containsKey
argument_list|(
name|dataIdentifier
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|DelegateDataRecord
argument_list|(
name|this
argument_list|,
name|dataIdentifier
argument_list|,
name|existingMappings
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|newMappings
operator|.
name|containsKey
argument_list|(
name|dataIdentifier
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|DelegateDataRecord
argument_list|(
name|this
argument_list|,
name|dataIdentifier
argument_list|,
name|newMappings
argument_list|)
return|;
block|}
name|DataRecord
name|result
init|=
name|getDelegate
argument_list|()
operator|.
name|getRecordIfStored
argument_list|(
name|dataIdentifier
argument_list|)
decl_stmt|;
name|addNewMapping
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataRecord
name|getRecordFromReference
parameter_list|(
name|String
name|reference
parameter_list|)
throws|throws
name|DataStoreException
block|{
comment|//Override the getRecordFromReference so that reference handling does not
comment|//trigger a call to FS
if|if
condition|(
name|reference
operator|!=
literal|null
condition|)
block|{
name|int
name|colon
init|=
name|reference
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|colon
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|getRecordIfStored
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|reference
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|colon
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataRecord
name|addRecord
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|checkIfReadOnly
argument_list|()
expr_stmt|;
name|DataRecord
name|result
init|=
name|getDelegate
argument_list|()
operator|.
name|addRecord
argument_list|(
name|inputStream
argument_list|)
decl_stmt|;
name|addNewMapping
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateModifiedDateOnAccess
parameter_list|(
name|long
name|before
parameter_list|)
block|{
name|checkIfReadOnly
argument_list|()
expr_stmt|;
name|getDelegate
argument_list|()
operator|.
name|updateModifiedDateOnAccess
argument_list|(
name|before
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|deleteAllOlderThan
parameter_list|(
name|long
name|min
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|checkIfReadOnly
argument_list|()
expr_stmt|;
return|return
name|getDelegate
argument_list|()
operator|.
name|deleteAllOlderThan
argument_list|(
name|min
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|DataIdentifier
argument_list|>
name|getAllIdentifiers
parameter_list|()
throws|throws
name|DataStoreException
block|{
return|return
name|getDelegate
argument_list|()
operator|.
name|getAllIdentifiers
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMinRecordLength
parameter_list|()
block|{
return|return
name|getDelegate
argument_list|()
operator|.
name|getMinRecordLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|existingMappings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|saveNewMappingsToFile
argument_list|()
expr_stmt|;
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
name|delegate
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearInUse
parameter_list|()
block|{
name|getDelegate
argument_list|()
operator|.
name|clearInUse
argument_list|()
expr_stmt|;
block|}
name|File
name|getMappingFile
parameter_list|()
block|{
return|return
name|mappingFile
return|;
block|}
comment|//~---------------------------------< Setters>
specifier|public
name|void
name|setMappingFilePath
parameter_list|(
name|String
name|mappingFilePath
parameter_list|)
block|{
name|this
operator|.
name|mappingFilePath
operator|=
name|mappingFilePath
expr_stmt|;
block|}
specifier|public
name|void
name|setReadOnly
parameter_list|(
name|boolean
name|readOnly
parameter_list|)
block|{
name|this
operator|.
name|readOnly
operator|=
name|readOnly
expr_stmt|;
block|}
specifier|public
name|void
name|setDelegateClass
parameter_list|(
name|String
name|delegateClass
parameter_list|)
block|{
name|this
operator|.
name|delegateClass
operator|=
name|delegateClass
expr_stmt|;
block|}
specifier|public
name|void
name|setDelegateConfigFilePath
parameter_list|(
name|String
name|delegateConfigFilePath
parameter_list|)
block|{
name|this
operator|.
name|delegateConfigFilePath
operator|=
name|delegateConfigFilePath
expr_stmt|;
block|}
comment|//~---------------------------------< DelegateDataRecord>
specifier|private
class|class
name|DelegateDataRecord
extends|extends
name|AbstractDataRecord
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|mapping
decl_stmt|;
specifier|private
name|DataRecord
name|delegateRecord
decl_stmt|;
specifier|public
name|DelegateDataRecord
parameter_list|(
name|AbstractDataStore
name|store
parameter_list|,
name|DataIdentifier
name|identifier
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|recordSizeMapping
parameter_list|)
block|{
name|super
argument_list|(
name|store
argument_list|,
name|identifier
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapping
operator|=
name|recordSizeMapping
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|Long
name|size
init|=
name|mapping
operator|.
name|get
argument_list|(
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No size mapping found for {}. Checking with delegate"
argument_list|,
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|getDelegateRecord
argument_list|()
operator|.
name|getLength
argument_list|()
return|;
block|}
return|return
name|size
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getStream
parameter_list|()
throws|throws
name|DataStoreException
block|{
return|return
name|getDelegateRecord
argument_list|()
operator|.
name|getStream
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLastModified
parameter_list|()
block|{
try|try
block|{
return|return
name|getDelegateRecord
argument_list|()
operator|.
name|getLastModified
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|DataRecord
name|getDelegateRecord
parameter_list|()
throws|throws
name|DataStoreException
block|{
comment|//Lazily load the delegateRecord to avoid FS access
if|if
condition|(
name|delegateRecord
operator|==
literal|null
condition|)
block|{
name|delegateRecord
operator|=
name|getDelegate
argument_list|()
operator|.
name|getRecord
argument_list|(
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|delegateRecord
return|;
block|}
block|}
comment|//~---------------------------------< internal>
specifier|private
name|void
name|checkIfReadOnly
parameter_list|()
block|{
name|checkState
argument_list|(
operator|!
name|readOnly
argument_list|,
literal|"Read only DataStore in use"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|DataStore
name|getDelegate
parameter_list|()
block|{
return|return
name|checkNotNull
argument_list|(
name|delegate
argument_list|,
literal|"Delegate DataStore not configured"
argument_list|)
return|;
block|}
specifier|private
name|void
name|addNewMapping
parameter_list|(
name|DataRecord
name|dr
parameter_list|)
throws|throws
name|DataStoreException
block|{
if|if
condition|(
name|dr
operator|!=
literal|null
condition|)
block|{
name|newMappings
operator|.
name|put
argument_list|(
name|dr
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|dr
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initializeMappingData
parameter_list|(
name|String
name|homeDir
parameter_list|)
block|{
name|mappingFile
operator|=
operator|new
name|File
argument_list|(
name|FilenameUtils
operator|.
name|concat
argument_list|(
name|homeDir
argument_list|,
name|mappingFilePath
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappingFile
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|existingMappings
operator|=
name|loadMappingData
argument_list|(
name|mappingFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to read mapping data from "
operator|+
name|mappingFile
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Mapping file {} not found. Would create a new one."
argument_list|,
name|mappingFile
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initializeDelegate
parameter_list|(
name|String
name|homeDir
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkNotNull
argument_list|(
name|delegateClass
argument_list|,
literal|"No delegate DataStore class defined via 'delegateClass' property"
argument_list|)
expr_stmt|;
try|try
block|{
name|delegate
operator|=
operator|(
name|DataStore
operator|)
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|delegateClass
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Cannot load delegate class "
operator|+
name|delegateClass
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Cannot load delegate class "
operator|+
name|delegateClass
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Cannot load delegate class "
operator|+
name|delegateClass
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Using {} as the delegating DataStore"
argument_list|,
name|delegateClass
argument_list|)
expr_stmt|;
if|if
condition|(
name|delegateConfigFilePath
operator|!=
literal|null
condition|)
block|{
name|File
name|configFile
init|=
operator|new
name|File
argument_list|(
name|delegateConfigFilePath
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|configFile
operator|.
name|exists
argument_list|()
argument_list|,
literal|"Delegate DataStore config file %s does not exist"
argument_list|,
name|configFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|is
operator|=
name|Files
operator|.
name|asByteSource
argument_list|(
name|configFile
argument_list|)
operator|.
name|openStream
argument_list|()
expr_stmt|;
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|PropertiesUtil
operator|.
name|populate
argument_list|(
name|delegate
argument_list|,
name|propsToMap
argument_list|(
name|props
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Configured the delegating DataStore via {}"
argument_list|,
name|configFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Error reading from config file "
operator|+
name|configFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
name|delegate
operator|.
name|init
argument_list|(
name|homeDir
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|saveNewMappingsToFile
parameter_list|()
block|{
if|if
condition|(
operator|!
name|newMappings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|BufferedWriter
name|w
init|=
literal|null
decl_stmt|;
try|try
block|{
name|w
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|mappingFile
argument_list|,
literal|true
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|e
range|:
name|newMappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|w
operator|.
name|write
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|newLine
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Added {} new entries to the mapping file {}"
argument_list|,
name|newMappings
operator|.
name|size
argument_list|()
argument_list|,
name|mappingFile
argument_list|)
expr_stmt|;
name|newMappings
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error occurred while writing mapping data to {}"
argument_list|,
name|mappingFile
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|loadMappingData
parameter_list|(
name|File
name|mappingFile
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|mapping
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Reading mapping data from {}"
argument_list|,
name|mappingFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|LineIterator
name|itr
init|=
operator|new
name|LineIterator
argument_list|(
name|Files
operator|.
name|newReader
argument_list|(
name|mappingFile
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|itr
operator|.
name|nextLine
argument_list|()
decl_stmt|;
name|int
name|indexOfBar
init|=
name|line
operator|.
name|indexOf
argument_list|(
name|SEPARATOR
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|indexOfBar
operator|>
literal|0
argument_list|,
literal|"Malformed entry found [%s]"
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|String
name|length
init|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|indexOfBar
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|line
operator|.
name|substring
argument_list|(
name|indexOfBar
operator|+
literal|1
argument_list|)
decl_stmt|;
name|mapping
operator|.
name|put
argument_list|(
name|id
operator|.
name|trim
argument_list|()
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Total {} mapping entries found"
argument_list|,
name|mapping
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LineIterator
operator|.
name|closeQuietly
argument_list|(
name|itr
argument_list|)
expr_stmt|;
block|}
return|return
name|mapping
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propsToMap
parameter_list|(
name|Properties
name|p
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|keyName
range|:
name|p
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|keyName
argument_list|,
name|p
operator|.
name|getProperty
argument_list|(
name|keyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

