begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|ImmutableRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|ImmutableTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBitsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Permission provider implementation that aggregates a list of different  * provider implementations. Note, that the implementations *must* implement  * the {@link org.apache.jackrabbit.oak.spi.security.authorization.permission.AggregatedPermissionProvider}  * interface.  */
end_comment

begin_class
specifier|public
class|class
name|CompositePermissionProvider
implements|implements
name|PermissionProvider
block|{
specifier|private
specifier|final
name|Root
name|root
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|AggregatedPermissionProvider
argument_list|>
name|pps
decl_stmt|;
specifier|private
specifier|final
name|CompositeRepositoryPermission
name|repositoryPermission
decl_stmt|;
specifier|private
name|ImmutableRoot
name|immutableRoot
decl_stmt|;
specifier|private
name|PrivilegeBitsProvider
name|pbp
decl_stmt|;
specifier|public
name|CompositePermissionProvider
parameter_list|(
annotation|@
name|Nonnull
name|Root
name|root
parameter_list|,
annotation|@
name|Nonnull
name|List
argument_list|<
name|AggregatedPermissionProvider
argument_list|>
name|pps
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|pps
operator|=
name|pps
expr_stmt|;
name|repositoryPermission
operator|=
operator|new
name|CompositeRepositoryPermission
argument_list|()
expr_stmt|;
name|immutableRoot
operator|=
operator|(
name|root
operator|instanceof
name|ImmutableRoot
operator|)
condition|?
operator|(
name|ImmutableRoot
operator|)
name|root
else|:
operator|new
name|ImmutableRoot
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|pbp
operator|=
operator|new
name|PrivilegeBitsProvider
argument_list|(
name|immutableRoot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|()
block|{
name|immutableRoot
operator|=
operator|(
name|root
operator|instanceof
name|ImmutableRoot
operator|)
condition|?
operator|(
name|ImmutableRoot
operator|)
name|root
else|:
operator|new
name|ImmutableRoot
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|pbp
operator|=
operator|new
name|PrivilegeBitsProvider
argument_list|(
name|immutableRoot
argument_list|)
expr_stmt|;
for|for
control|(
name|PermissionProvider
name|pp
range|:
name|pps
control|)
block|{
name|pp
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getPrivileges
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|)
block|{
return|return
name|pbp
operator|.
name|getPrivilegeNames
argument_list|(
name|getPrivilegeBits
argument_list|(
name|tree
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPrivileges
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nonnull
name|String
modifier|...
name|privilegeNames
parameter_list|)
block|{
return|return
name|getPrivilegeBits
argument_list|(
name|tree
argument_list|)
operator|.
name|includes
argument_list|(
name|pbp
operator|.
name|getBits
argument_list|(
name|privilegeNames
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RepositoryPermission
name|getRepositoryPermission
parameter_list|()
block|{
return|return
name|repositoryPermission
return|;
block|}
annotation|@
name|Override
specifier|public
name|TreePermission
name|getTreePermission
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nonnull
name|TreePermission
name|parentPermission
parameter_list|)
block|{
name|ImmutableTree
name|immTree
init|=
operator|(
name|tree
operator|instanceof
name|ImmutableTree
operator|)
condition|?
operator|(
name|ImmutableTree
operator|)
name|tree
else|:
name|immutableRoot
operator|.
name|getTree
argument_list|(
name|tree
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tree
operator|.
name|isRoot
argument_list|()
condition|)
block|{
return|return
operator|new
name|CompositeTreePermission
argument_list|(
name|immTree
argument_list|,
operator|new
name|CompositeTreePermission
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
operator|(
name|parentPermission
operator|instanceof
name|CompositeTreePermission
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal parent permission instance. Expected CompositeTreePermission."
argument_list|)
throw|;
block|}
return|return
operator|new
name|CompositeTreePermission
argument_list|(
name|immTree
argument_list|,
operator|(
name|CompositeTreePermission
operator|)
name|parentPermission
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
specifier|final
annotation|@
name|Nonnull
name|Tree
name|parent
parameter_list|,
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|,
specifier|final
name|long
name|permissions
parameter_list|)
block|{
if|if
condition|(
name|Permissions
operator|.
name|isAggregate
argument_list|(
name|permissions
argument_list|)
condition|)
block|{
for|for
control|(
specifier|final
name|long
name|permission
range|:
name|Permissions
operator|.
name|aggregates
argument_list|(
name|permissions
argument_list|)
control|)
block|{
name|Iterable
argument_list|<
name|AggregatedPermissionProvider
argument_list|>
name|providers
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|pps
argument_list|,
operator|new
name|Predicate
argument_list|<
name|AggregatedPermissionProvider
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|AggregatedPermissionProvider
name|pp
parameter_list|)
block|{
return|return
name|pp
operator|!=
literal|null
operator|&&
name|pp
operator|.
name|handles
argument_list|(
name|parent
argument_list|,
name|permission
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|grantsPermission
argument_list|(
name|parent
argument_list|,
name|property
argument_list|,
name|permission
argument_list|,
name|providers
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
name|Iterable
argument_list|<
name|AggregatedPermissionProvider
argument_list|>
name|providers
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|pps
argument_list|,
operator|new
name|Predicate
argument_list|<
name|AggregatedPermissionProvider
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|AggregatedPermissionProvider
name|pp
parameter_list|)
block|{
return|return
name|pp
operator|!=
literal|null
operator|&&
name|pp
operator|.
name|handles
argument_list|(
name|parent
argument_list|,
name|permissions
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|grantsPermission
argument_list|(
name|parent
argument_list|,
name|property
argument_list|,
name|permissions
argument_list|,
name|providers
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
specifier|final
annotation|@
name|Nonnull
name|String
name|oakPath
parameter_list|,
specifier|final
annotation|@
name|Nonnull
name|String
name|jcrActions
parameter_list|)
block|{
name|String
index|[]
name|actions
init|=
name|Text
operator|.
name|explode
argument_list|(
name|jcrActions
argument_list|,
literal|','
argument_list|,
literal|false
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|actions
operator|.
name|length
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|true
return|;
case|case
literal|1
case|:
name|Iterable
argument_list|<
name|AggregatedPermissionProvider
argument_list|>
name|providers
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|pps
argument_list|,
operator|new
name|Predicate
argument_list|<
name|AggregatedPermissionProvider
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|AggregatedPermissionProvider
name|pp
parameter_list|)
block|{
return|return
name|pp
operator|!=
literal|null
operator|&&
name|pp
operator|.
name|handles
argument_list|(
name|oakPath
argument_list|,
name|jcrActions
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|grantsAction
argument_list|(
name|oakPath
argument_list|,
name|actions
index|[
literal|0
index|]
argument_list|,
name|providers
argument_list|)
return|;
default|default:
for|for
control|(
specifier|final
name|String
name|action
range|:
name|actions
control|)
block|{
name|providers
operator|=
name|Iterables
operator|.
name|filter
argument_list|(
name|pps
argument_list|,
operator|new
name|Predicate
argument_list|<
name|AggregatedPermissionProvider
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|AggregatedPermissionProvider
name|pp
parameter_list|)
block|{
return|return
name|pp
operator|!=
literal|null
operator|&&
name|pp
operator|.
name|handles
argument_list|(
name|oakPath
argument_list|,
name|action
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|grantsAction
argument_list|(
name|oakPath
argument_list|,
name|action
argument_list|,
name|providers
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
comment|//--------------------------------------------------------------------------
specifier|private
name|PrivilegeBits
name|getPrivilegeBits
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|Tree
name|tree
parameter_list|)
block|{
name|PrivilegeBits
name|sufficient
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|PrivilegeBits
name|required
init|=
literal|null
decl_stmt|;
name|Iterable
argument_list|<
name|AggregatedPermissionProvider
argument_list|>
name|providers
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|pps
argument_list|,
operator|new
name|Predicate
argument_list|<
name|AggregatedPermissionProvider
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|AggregatedPermissionProvider
name|pp
parameter_list|)
block|{
return|return
name|pp
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|tree
operator|==
literal|null
operator|)
condition|?
name|pp
operator|.
name|handlesRepositoryPermissions
argument_list|()
else|:
name|pp
operator|.
name|handles
argument_list|(
name|tree
argument_list|)
operator|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|AggregatedPermissionProvider
name|pp
range|:
name|providers
control|)
block|{
name|PrivilegeBits
name|privs
init|=
name|pbp
operator|.
name|getBits
argument_list|(
name|pp
operator|.
name|getPrivileges
argument_list|(
name|tree
argument_list|)
argument_list|)
decl_stmt|;
name|ControlFlag
name|flag
init|=
name|pp
operator|.
name|getFlag
argument_list|()
decl_stmt|;
if|if
condition|(
name|ControlFlag
operator|.
name|SUFFICIENT
operator|==
name|flag
condition|)
block|{
name|sufficient
operator|.
name|add
argument_list|(
name|privs
argument_list|)
expr_stmt|;
if|if
condition|(
name|required
operator|!=
literal|null
condition|)
block|{
name|sufficient
operator|.
name|retain
argument_list|(
name|required
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ControlFlag
operator|.
name|REQUISITE
operator|==
name|flag
condition|)
block|{
if|if
condition|(
name|required
operator|==
literal|null
condition|)
block|{
name|required
operator|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|required
operator|.
name|add
argument_list|(
name|privs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|required
operator|.
name|retain
argument_list|(
name|privs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|required
operator|!=
literal|null
condition|)
block|{
name|sufficient
operator|.
name|add
argument_list|(
name|required
argument_list|)
expr_stmt|;
block|}
return|return
name|sufficient
return|;
block|}
specifier|private
specifier|static
name|boolean
name|grantsPermission
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|Tree
name|parent
parameter_list|,
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|,
specifier|final
name|long
name|permission
parameter_list|,
annotation|@
name|Nonnull
name|Iterable
argument_list|<
name|AggregatedPermissionProvider
argument_list|>
name|providers
parameter_list|)
block|{
name|Iterator
argument_list|<
name|AggregatedPermissionProvider
argument_list|>
name|it
init|=
name|providers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|AggregatedPermissionProvider
name|pp
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|isGranted
init|=
name|pp
operator|.
name|isGranted
argument_list|(
name|parent
argument_list|,
name|property
argument_list|,
name|permission
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
operator|||
name|evalComplete
argument_list|(
name|isGranted
argument_list|,
name|pp
operator|.
name|getFlag
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|isGranted
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|boolean
name|grantsAction
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|oakPath
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|String
name|action
parameter_list|,
annotation|@
name|Nonnull
name|Iterable
argument_list|<
name|AggregatedPermissionProvider
argument_list|>
name|providers
parameter_list|)
block|{
name|Iterator
argument_list|<
name|AggregatedPermissionProvider
argument_list|>
name|it
init|=
name|providers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|AggregatedPermissionProvider
name|pp
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|isGranted
init|=
name|pp
operator|.
name|isGranted
argument_list|(
name|oakPath
argument_list|,
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
operator|||
name|evalComplete
argument_list|(
name|isGranted
argument_list|,
name|pp
operator|.
name|getFlag
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|isGranted
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|boolean
name|grantsRepoPermission
parameter_list|(
name|long
name|permission
parameter_list|,
annotation|@
name|Nonnull
name|Iterable
argument_list|<
name|AggregatedPermissionProvider
argument_list|>
name|providers
parameter_list|)
block|{
name|Iterator
argument_list|<
name|AggregatedPermissionProvider
argument_list|>
name|it
init|=
name|providers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|AggregatedPermissionProvider
name|pp
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|isGranted
init|=
name|pp
operator|.
name|getRepositoryPermission
argument_list|()
operator|.
name|isGranted
argument_list|(
name|permission
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
operator|||
name|evalComplete
argument_list|(
name|isGranted
argument_list|,
name|pp
operator|.
name|getFlag
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|isGranted
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|boolean
name|evalComplete
parameter_list|(
name|boolean
name|isGranted
parameter_list|,
name|ControlFlag
name|flag
parameter_list|)
block|{
switch|switch
condition|(
name|flag
condition|)
block|{
case|case
name|SUFFICIENT
case|:
if|if
condition|(
name|isGranted
condition|)
block|{
return|return
literal|true
return|;
block|}
break|break;
case|case
name|REQUISITE
case|:
if|if
condition|(
operator|!
name|isGranted
condition|)
block|{
return|return
literal|true
return|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported PermissionProvider Control Flag "
operator|+
name|flag
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
comment|//--------------------------------------------------------------------------
specifier|private
specifier|final
class|class
name|CompositeTreePermission
implements|implements
name|TreePermission
block|{
specifier|private
specifier|final
name|ImmutableTree
name|tree
decl_stmt|;
specifier|private
specifier|final
name|CompositeTreePermission
name|parentPermission
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|AggregatedPermissionProvider
argument_list|,
name|TreePermission
argument_list|>
name|map
decl_stmt|;
specifier|private
name|Boolean
name|canRead
decl_stmt|;
specifier|private
name|CompositeTreePermission
parameter_list|()
block|{
name|tree
operator|=
literal|null
expr_stmt|;
name|parentPermission
operator|=
literal|null
expr_stmt|;
name|map
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|()
expr_stmt|;
block|}
specifier|private
name|CompositeTreePermission
parameter_list|(
specifier|final
annotation|@
name|Nonnull
name|ImmutableTree
name|tree
parameter_list|,
annotation|@
name|Nonnull
name|CompositeTreePermission
name|parentPermission
parameter_list|)
block|{
name|this
operator|.
name|tree
operator|=
name|tree
expr_stmt|;
name|this
operator|.
name|parentPermission
operator|=
name|parentPermission
expr_stmt|;
name|map
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|AggregatedPermissionProvider
argument_list|,
name|TreePermission
argument_list|>
argument_list|(
name|pps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|AggregatedPermissionProvider
name|provider
range|:
name|pps
control|)
block|{
name|TreePermission
name|tp
init|=
name|provider
operator|.
name|getTreePermission
argument_list|(
name|tree
argument_list|,
name|getParentPermission
argument_list|(
name|provider
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|provider
argument_list|,
name|tp
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TreePermission
name|getChildPermission
parameter_list|(
name|String
name|childName
parameter_list|,
name|NodeState
name|childState
parameter_list|)
block|{
name|ImmutableTree
name|childTree
init|=
operator|new
name|ImmutableTree
argument_list|(
name|tree
argument_list|,
name|childName
argument_list|,
name|childState
argument_list|)
decl_stmt|;
return|return
operator|new
name|CompositeTreePermission
argument_list|(
name|childTree
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRead
parameter_list|()
block|{
if|if
condition|(
name|canRead
operator|==
literal|null
condition|)
block|{
name|canRead
operator|=
literal|false
expr_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|AggregatedPermissionProvider
argument_list|,
name|TreePermission
argument_list|>
argument_list|>
name|it
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|AggregatedPermissionProvider
argument_list|,
name|TreePermission
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|TreePermission
name|tp
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|handles
argument_list|(
name|tp
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
condition|)
block|{
name|boolean
name|isGranted
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|canRead
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
operator|||
name|evalComplete
argument_list|(
name|isGranted
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getFlag
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|canRead
operator|=
name|isGranted
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|canRead
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRead
parameter_list|(
annotation|@
name|Nonnull
name|PropertyState
name|property
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|AggregatedPermissionProvider
argument_list|,
name|TreePermission
argument_list|>
argument_list|>
name|it
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|AggregatedPermissionProvider
argument_list|,
name|TreePermission
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|TreePermission
name|tp
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|handles
argument_list|(
name|tp
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
condition|)
block|{
name|boolean
name|isGranted
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|canRead
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
operator|||
name|evalComplete
argument_list|(
name|isGranted
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getFlag
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|isGranted
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canReadAll
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canReadProperties
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
name|long
name|permissions
parameter_list|)
block|{
if|if
condition|(
name|Permissions
operator|.
name|isAggregate
argument_list|(
name|permissions
argument_list|)
condition|)
block|{
for|for
control|(
name|long
name|permission
range|:
name|Permissions
operator|.
name|aggregates
argument_list|(
name|permissions
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|grantsPermission
argument_list|(
name|permission
argument_list|,
literal|null
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|grantsPermission
argument_list|(
name|permissions
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
name|long
name|permissions
parameter_list|,
annotation|@
name|Nonnull
name|PropertyState
name|property
parameter_list|)
block|{
if|if
condition|(
name|Permissions
operator|.
name|isAggregate
argument_list|(
name|permissions
argument_list|)
condition|)
block|{
for|for
control|(
name|long
name|permission
range|:
name|Permissions
operator|.
name|aggregates
argument_list|(
name|permissions
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|grantsPermission
argument_list|(
name|permission
argument_list|,
name|property
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|grantsPermission
argument_list|(
name|permissions
argument_list|,
name|property
argument_list|)
return|;
block|}
block|}
specifier|private
name|boolean
name|grantsPermission
parameter_list|(
name|long
name|permission
parameter_list|,
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|AggregatedPermissionProvider
argument_list|,
name|TreePermission
argument_list|>
argument_list|>
name|it
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|AggregatedPermissionProvider
argument_list|,
name|TreePermission
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|handles
argument_list|(
name|this
argument_list|,
name|permission
argument_list|)
condition|)
block|{
name|TreePermission
name|tp
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|boolean
name|isGranted
init|=
operator|(
name|property
operator|==
literal|null
operator|)
condition|?
name|tp
operator|.
name|isGranted
argument_list|(
name|permission
argument_list|)
else|:
name|tp
operator|.
name|isGranted
argument_list|(
name|permission
argument_list|,
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
operator|||
name|evalComplete
argument_list|(
name|isGranted
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getFlag
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|isGranted
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|TreePermission
name|getParentPermission
parameter_list|(
name|AggregatedPermissionProvider
name|provider
parameter_list|)
block|{
name|TreePermission
name|parent
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parentPermission
operator|!=
literal|null
condition|)
block|{
name|parent
operator|=
name|parentPermission
operator|.
name|map
operator|.
name|get
argument_list|(
name|provider
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|parent
operator|==
literal|null
operator|)
condition|?
name|TreePermission
operator|.
name|EMPTY
else|:
name|parent
return|;
block|}
block|}
specifier|private
class|class
name|CompositeRepositoryPermission
implements|implements
name|RepositoryPermission
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
name|long
name|repositoryPermissions
parameter_list|)
block|{
name|Iterable
argument_list|<
name|AggregatedPermissionProvider
argument_list|>
name|providers
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|pps
argument_list|,
operator|new
name|Predicate
argument_list|<
name|AggregatedPermissionProvider
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|AggregatedPermissionProvider
name|provider
parameter_list|)
block|{
return|return
name|provider
operator|!=
literal|null
operator|&&
name|provider
operator|.
name|handlesRepositoryPermissions
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|Permissions
operator|.
name|isAggregate
argument_list|(
name|repositoryPermissions
argument_list|)
condition|)
block|{
for|for
control|(
name|long
name|permission
range|:
name|Permissions
operator|.
name|aggregates
argument_list|(
name|repositoryPermissions
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|grantsRepoPermission
argument_list|(
name|permission
argument_list|,
name|providers
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|grantsRepoPermission
argument_list|(
name|repositoryPermissions
argument_list|,
name|providers
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

