begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|byteCountToDisplaySize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordType
operator|.
name|NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
operator|.
name|Utils
operator|.
name|openReadOnlyFileStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Queues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordUsageAnalyser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_comment
comment|/**  * Print debugging information about a segment store.  */
end_comment

begin_class
specifier|public
class|class
name|DebugStore
implements|implements
name|Runnable
block|{
comment|/**      * Create a builder for the {@link DebugStore} command.      *      * @return an instance of {@link Builder}.      */
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|/**      * Collect options for the {@link DebugStore} command.      */
specifier|public
specifier|static
class|class
name|Builder
block|{
specifier|private
name|File
name|path
decl_stmt|;
specifier|private
name|Builder
parameter_list|()
block|{
comment|// Prevent external instantiation
block|}
comment|/**          * The path to an existing segment store. This parameter is required.          *          * @param path the path to an existing segment store.          * @return this builder.          */
specifier|public
name|Builder
name|withPath
parameter_list|(
name|File
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Create an executable version of the {@link DebugStore} command.          *          * @return an instance of {@link Runnable}.          */
specifier|public
name|Runnable
name|build
parameter_list|()
block|{
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
operator|new
name|DebugStore
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|final
name|File
name|path
decl_stmt|;
specifier|private
name|DebugStore
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|builder
operator|.
name|path
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
init|(
name|FileStore
name|store
init|=
name|openReadOnlyFileStore
argument_list|(
name|path
argument_list|)
init|)
block|{
name|debugFileStore
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|debugFileStore
parameter_list|(
name|FileStore
name|store
parameter_list|)
block|{
name|Map
argument_list|<
name|SegmentId
argument_list|,
name|List
argument_list|<
name|SegmentId
argument_list|>
argument_list|>
name|idmap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|int
name|dataCount
init|=
literal|0
decl_stmt|;
name|long
name|dataSize
init|=
literal|0
decl_stmt|;
name|int
name|bulkCount
init|=
literal|0
decl_stmt|;
name|long
name|bulkSize
init|=
literal|0
decl_stmt|;
name|RecordUsageAnalyser
name|analyser
init|=
operator|new
name|RecordUsageAnalyser
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SegmentId
name|id
range|:
name|store
operator|.
name|getSegmentIds
argument_list|()
control|)
block|{
if|if
condition|(
name|id
operator|.
name|isDataSegmentId
argument_list|()
condition|)
block|{
name|Segment
name|segment
init|=
name|id
operator|.
name|getSegment
argument_list|()
decl_stmt|;
name|dataCount
operator|++
expr_stmt|;
name|dataSize
operator|+=
name|segment
operator|.
name|size
argument_list|()
expr_stmt|;
name|idmap
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|segment
operator|.
name|getReferencedIds
argument_list|()
argument_list|)
expr_stmt|;
name|analyseSegment
argument_list|(
name|segment
argument_list|,
name|analyser
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|.
name|isBulkSegmentId
argument_list|()
condition|)
block|{
name|bulkCount
operator|++
expr_stmt|;
name|bulkSize
operator|+=
name|id
operator|.
name|getSegment
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|idmap
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|Collections
operator|.
expr|<
name|SegmentId
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total size:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%s in %6d data segments%n"
argument_list|,
name|byteCountToDisplaySize
argument_list|(
name|dataSize
argument_list|)
argument_list|,
name|dataCount
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%s in %6d bulk segments%n"
argument_list|,
name|byteCountToDisplaySize
argument_list|(
name|bulkSize
argument_list|)
argument_list|,
name|bulkCount
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|analyser
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|SegmentId
argument_list|>
name|garbage
init|=
name|newHashSet
argument_list|(
name|idmap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Queue
argument_list|<
name|SegmentId
argument_list|>
name|queue
init|=
name|Queues
operator|.
name|newArrayDeque
argument_list|()
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|store
operator|.
name|getRevisions
argument_list|()
operator|.
name|getHead
argument_list|()
operator|.
name|getSegmentId
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SegmentId
name|id
init|=
name|queue
operator|.
name|remove
argument_list|()
decl_stmt|;
if|if
condition|(
name|garbage
operator|.
name|remove
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|queue
operator|.
name|addAll
argument_list|(
name|idmap
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|dataCount
operator|=
literal|0
expr_stmt|;
name|dataSize
operator|=
literal|0
expr_stmt|;
name|bulkCount
operator|=
literal|0
expr_stmt|;
name|bulkSize
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|SegmentId
name|id
range|:
name|garbage
control|)
block|{
if|if
condition|(
name|id
operator|.
name|isDataSegmentId
argument_list|()
condition|)
block|{
name|dataCount
operator|++
expr_stmt|;
name|dataSize
operator|+=
name|id
operator|.
name|getSegment
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|.
name|isBulkSegmentId
argument_list|()
condition|)
block|{
name|bulkCount
operator|++
expr_stmt|;
name|bulkSize
operator|+=
name|id
operator|.
name|getSegment
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%nAvailable for garbage collection:%n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%s in %6d data segments%n"
argument_list|,
name|byteCountToDisplaySize
argument_list|(
name|dataSize
argument_list|)
argument_list|,
name|dataCount
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%s in %6d bulk segments%n"
argument_list|,
name|byteCountToDisplaySize
argument_list|(
name|bulkSize
argument_list|)
argument_list|,
name|bulkCount
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|analyseSegment
parameter_list|(
name|Segment
name|segment
parameter_list|,
name|RecordUsageAnalyser
name|analyser
parameter_list|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|segment
operator|.
name|getRootCount
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
if|if
condition|(
name|segment
operator|.
name|getRootType
argument_list|(
name|k
argument_list|)
operator|==
name|NODE
condition|)
block|{
name|RecordId
name|nodeId
init|=
operator|new
name|RecordId
argument_list|(
name|segment
operator|.
name|getSegmentId
argument_list|()
argument_list|,
name|segment
operator|.
name|getRootOffset
argument_list|(
name|k
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|analyser
operator|.
name|analyseNode
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|format
argument_list|(
literal|"Error while processing node at %s"
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

