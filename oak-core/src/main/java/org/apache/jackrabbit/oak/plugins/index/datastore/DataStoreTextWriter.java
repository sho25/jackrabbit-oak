begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|datastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|SoftReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|DataStoreBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|InMemoryDataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|TextWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|fulltext
operator|.
name|ExtractedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|fulltext
operator|.
name|ExtractedText
operator|.
name|ExtractionResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|fulltext
operator|.
name|PreExtractedTextProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_comment
comment|/**  * TextWriter implementation which just stores the extracted text  * as files using the same layout as used by FileDataStore  */
end_comment

begin_class
specifier|public
class|class
name|DataStoreTextWriter
implements|implements
name|TextWriter
implements|,
name|Closeable
implements|,
name|PreExtractedTextProvider
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_BLOB_FILE
init|=
literal|"blobs_error.txt"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EMPTY_BLOB_FILE
init|=
literal|"blobs_empty.txt"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DataStoreTextWriter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|File
name|directory
decl_stmt|;
specifier|private
specifier|final
name|SetHolder
name|emptyBlobsHolder
decl_stmt|;
specifier|private
specifier|final
name|SetHolder
name|errorBlobsHolder
decl_stmt|;
specifier|private
name|boolean
name|closed
decl_stmt|;
comment|/**      * Flag indicating that blobId passed is one from DataStoreBlobStore      * As those blobId's have the length encoded which would need to be      * stripped of      */
specifier|private
name|boolean
name|dataStoreBlobId
init|=
literal|true
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|readOnlyMode
decl_stmt|;
specifier|public
name|DataStoreTextWriter
parameter_list|(
name|File
name|directory
parameter_list|,
name|boolean
name|readOnlyMode
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|directory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|checkArgument
argument_list|(
name|directory
operator|.
name|mkdirs
argument_list|()
argument_list|,
literal|"Cannot create directory %s"
argument_list|,
name|directory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
name|this
operator|.
name|readOnlyMode
operator|=
name|readOnlyMode
expr_stmt|;
name|this
operator|.
name|emptyBlobsHolder
operator|=
operator|new
name|SetHolder
argument_list|(
name|createLoader
argument_list|(
name|EMPTY_BLOB_FILE
argument_list|)
argument_list|,
name|readOnlyMode
argument_list|)
expr_stmt|;
name|this
operator|.
name|errorBlobsHolder
operator|=
operator|new
name|SetHolder
argument_list|(
name|createLoader
argument_list|(
name|ERROR_BLOB_FILE
argument_list|)
argument_list|,
name|readOnlyMode
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|readOnlyMode
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Using {} to store the extracted text content. Empty count {}, Error count {}"
argument_list|,
name|directory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|getEmptyBlobs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|getErrorBlobs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Using extracted store from {}"
argument_list|,
name|directory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ExtractedText
name|getText
parameter_list|(
name|String
name|propertyPath
parameter_list|,
name|Blob
name|blob
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|blobId
init|=
name|blob
operator|.
name|getContentIdentity
argument_list|()
decl_stmt|;
if|if
condition|(
name|blobId
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No id found for blob at path {}"
argument_list|,
name|propertyPath
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|blobId
operator|=
name|stripLength
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
comment|//Check for ref being non null to ensure its not an inlined binary
if|if
condition|(
name|InMemoryDataRecord
operator|.
name|isInstance
argument_list|(
name|blobId
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Pre extraction is not supported for in memory records. Path {}, BlobId {}"
argument_list|,
name|propertyPath
argument_list|,
name|blobId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|ExtractedText
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getEmptyBlobs
argument_list|()
operator|.
name|contains
argument_list|(
name|blobId
argument_list|)
condition|)
block|{
name|result
operator|=
name|ExtractedText
operator|.
name|EMPTY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getErrorBlobs
argument_list|()
operator|.
name|contains
argument_list|(
name|blobId
argument_list|)
condition|)
block|{
name|result
operator|=
name|ExtractedText
operator|.
name|ERROR
expr_stmt|;
block|}
else|else
block|{
name|File
name|textFile
init|=
name|getFile
argument_list|(
name|blobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|textFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|text
init|=
name|Files
operator|.
name|toString
argument_list|(
name|textFile
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|ExtractedText
argument_list|(
name|ExtractionResult
operator|.
name|SUCCESS
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|extractionResult
init|=
name|result
operator|!=
literal|null
condition|?
name|result
operator|.
name|getExtractionResult
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|null
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Extraction result for [{}] at path [{}] is [{}]"
argument_list|,
name|blobId
argument_list|,
name|propertyPath
argument_list|,
name|extractionResult
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
annotation|@
name|Nonnull
name|String
name|blobId
parameter_list|,
annotation|@
name|Nonnull
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|checkIfReadOnlyModeEnabled
argument_list|()
expr_stmt|;
name|checkNotNull
argument_list|(
name|blobId
argument_list|,
literal|"BlobId cannot be null"
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|text
argument_list|,
literal|"Text passed for [%s] was null"
argument_list|,
name|blobId
argument_list|)
expr_stmt|;
name|File
name|textFile
init|=
name|getFile
argument_list|(
name|stripLength
argument_list|(
name|blobId
argument_list|)
argument_list|)
decl_stmt|;
name|ensureParentExists
argument_list|(
name|textFile
argument_list|)
expr_stmt|;
comment|//TODO should we compress
name|Files
operator|.
name|write
argument_list|(
name|text
argument_list|,
name|textFile
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|markEmpty
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{
name|checkIfReadOnlyModeEnabled
argument_list|()
expr_stmt|;
name|getEmptyBlobs
argument_list|()
operator|.
name|add
argument_list|(
name|stripLength
argument_list|(
name|blobId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|markError
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{
name|checkIfReadOnlyModeEnabled
argument_list|()
expr_stmt|;
name|getErrorBlobs
argument_list|()
operator|.
name|add
argument_list|(
name|stripLength
argument_list|(
name|blobId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|isProcessed
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{
name|blobId
operator|=
name|stripLength
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
if|if
condition|(
name|getEmptyBlobs
argument_list|()
operator|.
name|contains
argument_list|(
name|blobId
argument_list|)
operator|||
name|getErrorBlobs
argument_list|()
operator|.
name|contains
argument_list|(
name|blobId
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|File
name|textFile
init|=
name|getFile
argument_list|(
name|blobId
argument_list|)
decl_stmt|;
return|return
name|textFile
operator|.
name|exists
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
operator|||
name|readOnlyMode
condition|)
block|{
return|return;
block|}
name|writeToFile
argument_list|(
name|EMPTY_BLOB_FILE
argument_list|,
name|getEmptyBlobs
argument_list|()
argument_list|)
expr_stmt|;
name|writeToFile
argument_list|(
name|ERROR_BLOB_FILE
argument_list|,
name|getErrorBlobs
argument_list|()
argument_list|)
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"FileDataStore based text provider"
return|;
block|}
name|SetHolder
name|getEmptyBlobsHolder
parameter_list|()
block|{
return|return
name|emptyBlobsHolder
return|;
block|}
name|SetHolder
name|getErrorBlobsHolder
parameter_list|()
block|{
return|return
name|errorBlobsHolder
return|;
block|}
comment|/**      * Returns the identified file. This method implements the pattern      * used to avoid problems with too many files in a single directory.      *<p/>      * No sanity checks are performed on the given identifier.      *      * @param identifier file name      * @return identified file      */
specifier|private
name|File
name|getFile
parameter_list|(
name|String
name|identifier
parameter_list|)
block|{
name|File
name|file
init|=
name|directory
decl_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|,
name|identifier
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|,
name|identifier
operator|.
name|substring
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|,
name|identifier
operator|.
name|substring
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|File
argument_list|(
name|file
argument_list|,
name|identifier
argument_list|)
return|;
block|}
specifier|private
name|String
name|stripLength
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{
if|if
condition|(
name|dataStoreBlobId
condition|)
block|{
return|return
name|DataStoreBlobStore
operator|.
name|BlobId
operator|.
name|of
argument_list|(
name|blobId
argument_list|)
operator|.
name|getBlobId
argument_list|()
return|;
block|}
return|return
name|blobId
return|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getEmptyBlobs
parameter_list|()
block|{
return|return
name|emptyBlobsHolder
operator|.
name|get
argument_list|()
return|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getErrorBlobs
parameter_list|()
block|{
return|return
name|errorBlobsHolder
operator|.
name|get
argument_list|()
return|;
block|}
specifier|private
name|void
name|checkIfReadOnlyModeEnabled
parameter_list|()
block|{
name|checkState
argument_list|(
operator|!
name|readOnlyMode
argument_list|,
literal|"Read only mode enabled"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Callable
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|createLoader
parameter_list|(
specifier|final
name|String
name|fileName
parameter_list|)
block|{
specifier|final
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
return|return
operator|new
name|Callable
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|loadFromFile
argument_list|(
name|file
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Loading state from "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|loadFromFile
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|Files
operator|.
name|readLines
argument_list|(
name|file
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|writeToFile
parameter_list|(
name|String
name|fileName
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|blobIds
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|blobIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|BufferedWriter
name|bw
init|=
name|Files
operator|.
name|newWriter
argument_list|(
name|file
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|blobIds
control|)
block|{
name|bw
operator|.
name|write
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|bw
operator|.
name|newLine
argument_list|()
expr_stmt|;
block|}
name|bw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|ensureParentExists
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|File
name|parent
init|=
name|file
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * While running in read only mode the PreExtractedTextProvider      * would only be used while reindexing. So as to avoid holding memory      * SoftReference would be used      */
specifier|static
class|class
name|SetHolder
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|state
decl_stmt|;
specifier|private
name|SoftReference
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|stateRef
decl_stmt|;
specifier|private
specifier|final
name|Callable
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|loader
decl_stmt|;
specifier|private
name|int
name|loadCount
decl_stmt|;
specifier|public
name|SetHolder
parameter_list|(
name|Callable
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|loader
parameter_list|,
name|boolean
name|softRef
parameter_list|)
block|{
name|this
operator|.
name|loader
operator|=
name|loader
expr_stmt|;
if|if
condition|(
name|softRef
condition|)
block|{
name|this
operator|.
name|state
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|state
operator|=
name|load
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|get
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
name|state
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
if|if
condition|(
name|stateRef
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|stateRef
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|load
argument_list|()
expr_stmt|;
name|stateRef
operator|=
operator|new
name|SoftReference
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|int
name|getLoadCount
parameter_list|()
block|{
return|return
name|loadCount
return|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|load
parameter_list|()
block|{
try|try
block|{
name|loadCount
operator|++
expr_stmt|;
return|return
name|loader
operator|.
name|call
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error occurred while loading the state via {}"
argument_list|,
name|loader
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Sets
operator|.
name|newHashSet
argument_list|()
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

