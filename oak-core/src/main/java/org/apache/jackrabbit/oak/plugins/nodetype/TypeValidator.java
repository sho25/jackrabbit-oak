begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|ReadOnlyTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|DefaultValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRINGS
import|;
end_import

begin_comment
comment|/**  * Validator implementation that check JCR node type constraints.  *  * TODO: check protected properties and the structure they enforce. some of  *       those checks may have to go into separate validator classes. This class  *       should only perform checks based on node type information. E.g. it  *       cannot and should not check whether the value of the protected jcr:uuid  *       is unique.  */
end_comment

begin_class
class|class
name|TypeValidator
extends|extends
name|DefaultValidator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TypeValidator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ReadOnlyNodeTypeManager
name|ntm
decl_stmt|;
specifier|private
specifier|final
name|ReadOnlyTree
name|parent
decl_stmt|;
specifier|private
specifier|final
name|NamePathMapper
name|mapper
decl_stmt|;
specifier|private
name|EffectiveNodeType
name|parentType
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
name|EffectiveNodeType
name|getParentType
parameter_list|()
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|parentType
operator|==
literal|null
condition|)
block|{
name|parentType
operator|=
name|ntm
operator|.
name|getEffectiveNodeType
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
return|return
name|parentType
return|;
block|}
specifier|public
name|TypeValidator
parameter_list|(
name|ReadOnlyNodeTypeManager
name|ntm
parameter_list|,
name|ReadOnlyTree
name|parent
parameter_list|,
name|NamePathMapper
name|mapper
parameter_list|)
block|{
name|this
operator|.
name|ntm
operator|=
name|ntm
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|mapper
operator|=
name|mapper
expr_stmt|;
block|}
comment|//----------------------------------------------------------< Validator>---
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|isHidden
argument_list|(
name|after
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
block|{
name|checkPrimaryAndMixinTypes
argument_list|(
name|after
argument_list|)
expr_stmt|;
name|getParentType
argument_list|()
operator|.
name|checkSetProperty
argument_list|(
name|after
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"Cannot add property '"
operator|+
name|after
operator|.
name|getName
argument_list|()
operator|+
literal|"' at "
operator|+
name|parent
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"Cannot add property '"
operator|+
name|after
operator|.
name|getName
argument_list|()
operator|+
literal|"' at "
operator|+
name|parent
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|isHidden
argument_list|(
name|after
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
block|{
name|checkPrimaryAndMixinTypes
argument_list|(
name|after
argument_list|)
expr_stmt|;
name|getParentType
argument_list|()
operator|.
name|checkSetProperty
argument_list|(
name|after
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"Cannot set property '"
operator|+
name|after
operator|.
name|getName
argument_list|()
operator|+
literal|"' at "
operator|+
name|parent
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"Cannot set property '"
operator|+
name|after
operator|.
name|getName
argument_list|()
operator|+
literal|"' at "
operator|+
name|parent
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|isHidden
argument_list|(
name|before
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
block|{
name|getParentType
argument_list|()
operator|.
name|checkRemoveProperty
argument_list|(
name|before
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"Cannot remove property '"
operator|+
name|before
operator|.
name|getName
argument_list|()
operator|+
literal|"' at "
operator|+
name|parent
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"Cannot remove property '"
operator|+
name|before
operator|.
name|getName
argument_list|()
operator|+
literal|"' at "
operator|+
name|parent
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
try|try
block|{
name|getParentType
argument_list|()
operator|.
name|checkAddChildNode
argument_list|(
name|name
argument_list|,
name|getNodeType
argument_list|(
name|after
argument_list|)
argument_list|)
expr_stmt|;
name|ReadOnlyTree
name|addedTree
init|=
operator|new
name|ReadOnlyTree
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|after
argument_list|)
decl_stmt|;
name|EffectiveNodeType
name|addedType
init|=
name|ntm
operator|.
name|getEffectiveNodeType
argument_list|(
name|addedTree
argument_list|)
decl_stmt|;
name|addedType
operator|.
name|checkMandatoryItems
argument_list|(
name|addedTree
argument_list|)
expr_stmt|;
return|return
operator|new
name|TypeValidator
argument_list|(
name|ntm
argument_list|,
operator|new
name|ReadOnlyTree
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|after
argument_list|)
argument_list|,
name|mapper
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"Cannot add node '"
operator|+
name|name
operator|+
literal|"' at "
operator|+
name|parent
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"Cannot add node '"
operator|+
name|name
operator|+
literal|"' at "
operator|+
name|parent
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
operator|new
name|TypeValidator
argument_list|(
name|ntm
argument_list|,
operator|new
name|ReadOnlyTree
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|after
argument_list|)
argument_list|,
name|mapper
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
try|try
block|{
name|getParentType
argument_list|()
operator|.
name|checkRemoveNode
argument_list|(
name|name
argument_list|,
name|getNodeType
argument_list|(
name|before
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"Cannot remove node '"
operator|+
name|name
operator|+
literal|"' at "
operator|+
name|parent
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"Cannot add node '"
operator|+
name|name
operator|+
literal|"' at "
operator|+
name|parent
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
name|void
name|checkPrimaryAndMixinTypes
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|boolean
name|primaryType
init|=
name|JCR_PRIMARYTYPE
operator|.
name|equals
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|mixinType
init|=
name|JCR_MIXINTYPES
operator|.
name|equals
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|primaryType
operator|||
name|mixinType
condition|)
block|{
for|for
control|(
name|String
name|ntName
range|:
name|after
operator|.
name|getValue
argument_list|(
name|STRINGS
argument_list|)
control|)
block|{
name|NodeType
name|nt
init|=
name|ntm
operator|.
name|getNodeType
argument_list|(
name|ntName
argument_list|)
decl_stmt|;
if|if
condition|(
name|nt
operator|.
name|isAbstract
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
literal|"Can't create node with abstract type: "
operator|+
name|ntName
argument_list|)
throw|;
block|}
if|if
condition|(
name|primaryType
operator|&&
name|nt
operator|.
name|isMixin
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
literal|"Can't assign mixin for primary type: "
operator|+
name|ntName
argument_list|)
throw|;
block|}
if|if
condition|(
name|mixinType
operator|&&
operator|!
name|nt
operator|.
name|isMixin
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
literal|"Can't assign primary type for mixin: "
operator|+
name|ntName
argument_list|)
throw|;
block|}
block|}
block|}
block|}
annotation|@
name|CheckForNull
specifier|private
name|NodeType
name|getNodeType
parameter_list|(
name|NodeState
name|state
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|PropertyState
name|type
init|=
name|state
operator|.
name|getProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|||
name|type
operator|.
name|count
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// TODO: review again
return|return
literal|null
return|;
block|}
else|else
block|{
name|String
name|ntName
init|=
name|type
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|ntm
operator|.
name|getNodeType
argument_list|(
name|ntName
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isHidden
parameter_list|(
name|PropertyState
name|state
parameter_list|)
block|{
return|return
name|NodeStateUtils
operator|.
name|isHidden
argument_list|(
name|state
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

