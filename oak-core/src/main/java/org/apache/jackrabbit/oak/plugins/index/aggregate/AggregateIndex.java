begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|aggregate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
operator|.
name|FulltextQueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * A virtual full-text that can aggregate nodes based on aggregate definitions.  * Internally, it uses another full-text index.  */
end_comment

begin_class
specifier|public
class|class
name|AggregateIndex
implements|implements
name|FulltextQueryIndex
block|{
specifier|private
specifier|final
name|FulltextQueryIndex
name|baseIndex
decl_stmt|;
specifier|public
name|AggregateIndex
parameter_list|(
name|FulltextQueryIndex
name|baseIndex
parameter_list|)
block|{
name|this
operator|.
name|baseIndex
operator|=
name|baseIndex
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getCost
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
comment|// TODO dummy implementation
if|if
condition|(
name|baseIndex
operator|==
literal|null
condition|)
block|{
return|return
name|Double
operator|.
name|POSITIVE_INFINITY
return|;
block|}
return|return
name|baseIndex
operator|.
name|getCost
argument_list|(
name|filter
argument_list|,
name|rootState
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cursor
name|query
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
comment|// TODO dummy implementation
return|return
name|baseIndex
operator|.
name|query
argument_list|(
name|filter
argument_list|,
name|rootState
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPlan
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
comment|// TODO dummy implementation
if|if
condition|(
name|baseIndex
operator|==
literal|null
condition|)
block|{
return|return
literal|"no plan"
return|;
block|}
return|return
literal|"aggregate "
operator|+
name|baseIndex
operator|.
name|getPlan
argument_list|(
name|filter
argument_list|,
name|rootState
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIndexName
parameter_list|()
block|{
comment|// TODO dummy implementation
if|if
condition|(
name|baseIndex
operator|==
literal|null
condition|)
block|{
return|return
literal|"aggregat"
return|;
block|}
return|return
literal|"aggregate."
operator|+
name|baseIndex
operator|.
name|getIndexName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

