begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_comment
comment|/**  * An instance of this class encapsulates the shutdown logic of the {@link FileStore}.  *<p>  * A shutdown is initiated by calling {@link #shutDown} and completed at the point  * where the returned {@link ShutDownCloser} has been {@link ShutDownCloser#close() closed}.  *  * Code that needs to protect itself from running after a shutdown has been initiated can  * use the {@link #keepAlive()}, {@link #tryKeepAlive()} and {@link #isShutDown}:  *  *<pre>      try (ShutDownCloser ignored = shutDown.keepAlive()) {         // protected code here      }  *</pre>  */
end_comment

begin_class
class|class
name|ShutDown
block|{
comment|/**      * An {@link AutoCloseable} whose {@link #close()} doesn't throw an exception.      */
interface|interface
name|ShutDownCloser
extends|extends
name|AutoCloseable
block|{
annotation|@
name|Override
name|void
name|close
parameter_list|()
function_decl|;
block|}
specifier|private
specifier|volatile
name|boolean
name|isShutDown
decl_stmt|;
specifier|private
name|boolean
name|shutDown
decl_stmt|;
specifier|private
specifier|final
name|ReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
comment|/**      * Keep the store from being shut down until the returned {@link ShutDownCloser}      * is {@link ShutDownCloser#close() closed}.      * @throws IllegalStateException if the store is already {@link #isShutDown() shut down}.      */
name|ShutDownCloser
name|keepAlive
parameter_list|()
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|shutDown
condition|)
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"already shut down"
argument_list|)
throw|;
block|}
return|return
parameter_list|()
lambda|->
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
return|;
block|}
comment|/**      * Try to keep the store from being shut down until the returned {@link ShutDownCloser}      * is {@link ShutDownCloser#close() closed}. Callers of this method need to call      * {@link #isShutDown()} before proceeding.      */
name|ShutDownCloser
name|tryKeepAlive
parameter_list|()
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
parameter_list|()
lambda|->
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
return|;
block|}
comment|/**      * Initiate a shutdown of the store. The shutdown is complete once the returned      * {@link ShutDownCloser} is {@link ShutDownCloser#close() closed}.      * @return      */
name|ShutDownCloser
name|shutDown
parameter_list|()
block|{
name|isShutDown
operator|=
literal|true
expr_stmt|;
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|shutDown
condition|)
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"already shut down"
argument_list|)
throw|;
block|}
return|return
parameter_list|()
lambda|->
block|{
name|shutDown
operator|=
literal|true
expr_stmt|;
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|;
block|}
comment|/**      * @return  {@code true} iff the store is shut down.      */
name|boolean
name|isShutDown
parameter_list|()
block|{
return|return
name|isShutDown
return|;
block|}
block|}
end_class

end_unit

