begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionParser
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|OptionsBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|OptionsBeanFactory
import|;
end_import

begin_class
specifier|public
class|class
name|IndexOptions
implements|implements
name|OptionsBean
block|{
specifier|public
specifier|static
specifier|final
name|OptionsBeanFactory
name|FACTORY
init|=
name|IndexOptions
operator|::
operator|new
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|File
argument_list|>
name|workDirOpt
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|File
argument_list|>
name|outputDirOpt
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|File
argument_list|>
name|indexImportDir
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|File
argument_list|>
name|preExtractedTextOpt
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|File
argument_list|>
name|indexDefinitionsOpt
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Void
argument_list|>
name|stats
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Void
argument_list|>
name|definitions
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Void
argument_list|>
name|dumpIndex
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Void
argument_list|>
name|reindex
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Void
argument_list|>
name|importIndex
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Void
argument_list|>
name|docTraversal
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Integer
argument_list|>
name|consistencyCheck
decl_stmt|;
specifier|private
name|OptionSet
name|options
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|OptionSpec
argument_list|>
name|actionOpts
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|indexPaths
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|checkpoint
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|operationNames
decl_stmt|;
specifier|public
name|IndexOptions
parameter_list|(
name|OptionParser
name|parser
parameter_list|)
block|{
name|workDirOpt
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"index-temp-dir"
argument_list|,
literal|"Directory used for storing temporary files"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|File
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
operator|new
name|File
argument_list|(
literal|"temp"
argument_list|)
argument_list|)
expr_stmt|;
name|outputDirOpt
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"index-out-dir"
argument_list|,
literal|"Directory used for output files"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|File
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
operator|new
name|File
argument_list|(
literal|"indexing-result"
argument_list|)
argument_list|)
expr_stmt|;
name|preExtractedTextOpt
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"pre-extracted-text-dir"
argument_list|,
literal|"Directory storing pre extracted text"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|File
operator|.
name|class
argument_list|)
expr_stmt|;
name|indexDefinitionsOpt
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"index-definitions-file"
argument_list|,
literal|"index definition file which "
operator|+
literal|"include new index definitions or changes to existing index definitions"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|File
operator|.
name|class
argument_list|)
expr_stmt|;
name|stats
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"index-info"
argument_list|,
literal|"Collects and dumps various statistics related to the indexes"
argument_list|)
expr_stmt|;
name|definitions
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"index-definitions"
argument_list|,
literal|"Collects and dumps index definitions"
argument_list|)
expr_stmt|;
name|indexPaths
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"index-paths"
argument_list|,
literal|"Comma separated list of index paths for which the "
operator|+
literal|"selected operations need to be performed"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|withValuesSeparatedBy
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|checkpoint
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"checkpoint"
argument_list|,
literal|"The checkpoint up to which the index is updated, when "
operator|+
literal|"indexing in read only mode. For testing purpose, it can be set to 'head' to indicate that the head "
operator|+
literal|"state should be used."
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|consistencyCheck
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"index-consistency-check"
argument_list|,
literal|"Performs consistency check "
operator|+
literal|"for indexes as specified by --index-paths (if this not set, all indexes are checked). Currently "
operator|+
literal|"only Lucene indexes are supported. Possible values 1 - Basic check, 2 - Full check (slower)"
argument_list|)
operator|.
name|withOptionalArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dumpIndex
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"index-dump"
argument_list|,
literal|"Dumps index content"
argument_list|)
expr_stmt|;
name|reindex
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"reindex"
argument_list|,
literal|"Reindex the indexes specified by --index-paths or --index-definitions-file"
argument_list|)
expr_stmt|;
name|importIndex
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"index-import"
argument_list|,
literal|"Imports index"
argument_list|)
expr_stmt|;
name|docTraversal
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"doc-traversal-mode"
argument_list|,
literal|"Use Document traversal mode for reindex in "
operator|+
literal|"DocumentNodeStore setups. This may provide better performance in some cases (experimental)"
argument_list|)
expr_stmt|;
name|indexImportDir
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"index-import-dir"
argument_list|,
literal|"Directory containing index files. This "
operator|+
literal|"is required when --index-import operation is selected"
argument_list|)
operator|.
name|requiredIf
argument_list|(
name|importIndex
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|File
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//Set of options which define action
name|actionOpts
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|stats
argument_list|,
name|definitions
argument_list|,
name|consistencyCheck
argument_list|,
name|dumpIndex
argument_list|,
name|reindex
argument_list|,
name|importIndex
argument_list|)
expr_stmt|;
name|operationNames
operator|=
name|collectionOperationNames
argument_list|(
name|actionOpts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|OptionSet
name|options
parameter_list|)
block|{
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|title
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"The index command supports the following operations. Most operations are read only.\n"
operator|+
literal|"BloStore related options must be provided, as operations access the binaries stored there.\n"
operator|+
literal|"If no explicit operation is selected, --index-info and --index-definitions operation are performed.\n"
operator|+
literal|"Use --index-paths to restrict the set of indexes on which the operation needs to be run."
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|order
parameter_list|()
block|{
return|return
literal|50
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|operationNames
parameter_list|()
block|{
return|return
name|operationNames
return|;
block|}
specifier|public
name|File
name|getWorkDir
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|workDir
init|=
name|workDirOpt
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|workDir
argument_list|)
expr_stmt|;
return|return
name|workDir
return|;
block|}
specifier|public
name|File
name|getOutDir
parameter_list|()
block|{
return|return
name|outputDirOpt
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
specifier|public
name|File
name|getPreExtractedTextDir
parameter_list|()
block|{
return|return
name|preExtractedTextOpt
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
specifier|public
name|File
name|getIndexDefinitionsFile
parameter_list|()
block|{
return|return
name|indexDefinitionsOpt
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
specifier|public
name|File
name|getIndexImportDir
parameter_list|()
block|{
return|return
name|indexImportDir
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|dumpStats
parameter_list|()
block|{
return|return
name|options
operator|.
name|has
argument_list|(
name|stats
argument_list|)
operator|||
operator|!
name|anyActionSelected
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|dumpDefinitions
parameter_list|()
block|{
return|return
name|options
operator|.
name|has
argument_list|(
name|definitions
argument_list|)
operator|||
operator|!
name|anyActionSelected
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|dumpIndex
parameter_list|()
block|{
return|return
name|options
operator|.
name|has
argument_list|(
name|dumpIndex
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|checkConsistency
parameter_list|()
block|{
return|return
name|options
operator|.
name|has
argument_list|(
name|consistencyCheck
argument_list|)
return|;
block|}
specifier|public
name|int
name|consistencyCheckLevel
parameter_list|()
block|{
return|return
name|consistencyCheck
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isReindex
parameter_list|()
block|{
return|return
name|options
operator|.
name|has
argument_list|(
name|reindex
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isImportIndex
parameter_list|()
block|{
return|return
name|options
operator|.
name|has
argument_list|(
name|importIndex
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isDocTraversalMode
parameter_list|()
block|{
return|return
name|options
operator|.
name|has
argument_list|(
name|docTraversal
argument_list|)
return|;
block|}
specifier|public
name|String
name|getCheckpoint
parameter_list|()
block|{
return|return
name|checkpoint
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getIndexPaths
parameter_list|()
block|{
return|return
name|options
operator|.
name|has
argument_list|(
name|indexPaths
argument_list|)
condition|?
name|trim
argument_list|(
name|indexPaths
operator|.
name|values
argument_list|(
name|options
argument_list|)
argument_list|)
else|:
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|anyActionSelected
parameter_list|()
block|{
for|for
control|(
name|OptionSpec
name|spec
range|:
name|actionOpts
control|)
block|{
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|spec
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|trim
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|v
range|:
name|values
control|)
block|{
name|v
operator|=
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|v
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|paths
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|collectionOperationNames
parameter_list|(
name|Set
argument_list|<
name|OptionSpec
argument_list|>
name|actionOpts
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|OptionSpec
name|spec
range|:
name|actionOpts
control|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|spec
operator|.
name|options
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

