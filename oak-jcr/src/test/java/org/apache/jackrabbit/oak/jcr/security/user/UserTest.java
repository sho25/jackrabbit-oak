begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|UnsupportedRepositoryOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|NotExecutableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for the {@link User} implementation.  */
end_comment

begin_class
specifier|public
class|class
name|UserTest
extends|extends
name|AbstractUserTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testIsUser
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Authorizable
name|authorizable
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|authorizable
operator|instanceof
name|User
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGroup
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|assertFalse
argument_list|(
name|user
operator|.
name|isGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetId
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|assertNotNull
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipal
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|assertNotNull
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPath
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|assertNotNull
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|getNode
argument_list|(
name|user
argument_list|,
name|superuser
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|,
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedRepositoryOperationException
name|e
parameter_list|)
block|{
comment|// ok.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsAdmin
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|assertFalse
argument_list|(
name|user
operator|.
name|isAdmin
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangePasswordNull
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
comment|// invalid 'null' pw string
try|try
block|{
name|user
operator|.
name|changePassword
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"invalid pw null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangePassword
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
try|try
block|{
name|String
name|hash
init|=
name|getNode
argument_list|(
name|user
argument_list|,
name|superuser
argument_list|)
operator|.
name|getProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PASSWORD
argument_list|)
operator|.
name|getString
argument_list|()
decl_stmt|;
name|user
operator|.
name|changePassword
argument_list|(
literal|"changed"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|hash
operator|.
name|equals
argument_list|(
name|getNode
argument_list|(
name|user
argument_list|,
name|superuser
argument_list|)
operator|.
name|getProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PASSWORD
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangePasswordWithInvalidOldPassword
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
try|try
block|{
name|user
operator|.
name|changePassword
argument_list|(
literal|"changed"
argument_list|,
literal|"wrongOldPw"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"old password didn't match -> changePassword(String,String) should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangePasswordWithOldPassword
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
try|try
block|{
name|String
name|hash
init|=
name|getNode
argument_list|(
name|user
argument_list|,
name|superuser
argument_list|)
operator|.
name|getProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PASSWORD
argument_list|)
operator|.
name|getString
argument_list|()
decl_stmt|;
name|user
operator|.
name|changePassword
argument_list|(
literal|"changed"
argument_list|,
name|testPw
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|hash
operator|.
name|equals
argument_list|(
name|getNode
argument_list|(
name|user
argument_list|,
name|superuser
argument_list|)
operator|.
name|getProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PASSWORD
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|user
operator|.
name|changePassword
argument_list|(
name|testPw
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoginAfterChangePassword
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|user
operator|.
name|changePassword
argument_list|(
literal|"changed"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// make sure the user can login with the new pw
name|Session
name|s
init|=
name|getHelper
argument_list|()
operator|.
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|,
literal|"changed"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoginAfterChangePassword2
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
try|try
block|{
name|user
operator|.
name|changePassword
argument_list|(
literal|"changed"
argument_list|,
name|testPw
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// make sure the user can login with the new pw
name|Session
name|s
init|=
name|getHelper
argument_list|()
operator|.
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|,
literal|"changed"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|user
operator|.
name|changePassword
argument_list|(
name|testPw
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoginWithOldPassword
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
try|try
block|{
name|user
operator|.
name|changePassword
argument_list|(
literal|"changed"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|s
init|=
name|getHelper
argument_list|()
operator|.
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|,
name|testPw
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"user pw has changed. login must fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoginWithOldPassword2
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
try|try
block|{
name|user
operator|.
name|changePassword
argument_list|(
literal|"changed"
argument_list|,
name|testPw
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|s
init|=
name|getHelper
argument_list|()
operator|.
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|,
name|testPw
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"superuser pw has changed. login must fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
comment|// success
block|}
finally|finally
block|{
name|user
operator|.
name|changePassword
argument_list|(
name|testPw
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnabledByDefault
parameter_list|()
throws|throws
name|Exception
block|{
comment|// by default a user isn't disabled
name|assertFalse
argument_list|(
name|user
operator|.
name|isDisabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|user
operator|.
name|getDisabledReason
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|reason
init|=
literal|"readonly user is disabled!"
decl_stmt|;
name|user
operator|.
name|disable
argument_list|(
name|reason
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|user
operator|.
name|isDisabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reason
argument_list|,
name|user
operator|.
name|getDisabledReason
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAccessDisabledUser
parameter_list|()
throws|throws
name|Exception
block|{
name|user
operator|.
name|disable
argument_list|(
literal|"readonly user is disabled!"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// user must still be retrievable from user manager
name|assertNotNull
argument_list|(
name|getUserManager
argument_list|(
name|superuser
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// ... and from principal manager as well
name|assertTrue
argument_list|(
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getPrincipalManager
argument_list|()
operator|.
name|hasPrincipal
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAccessPrincipalOfDisabledUser
parameter_list|()
throws|throws
name|Exception
block|{
name|user
operator|.
name|disable
argument_list|(
literal|"readonly user is disabled!"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Principal
name|principal
init|=
name|user
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getPrincipalManager
argument_list|()
operator|.
name|hasPrincipal
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|principal
argument_list|,
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getPrincipalManager
argument_list|()
operator|.
name|getPrincipal
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnableUser
parameter_list|()
throws|throws
name|Exception
block|{
name|user
operator|.
name|disable
argument_list|(
literal|"readonly user is disabled!"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// enable user again
name|user
operator|.
name|disable
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|user
operator|.
name|isDisabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|user
operator|.
name|getDisabledReason
argument_list|()
argument_list|)
expr_stmt|;
comment|// -> login must succeed again
name|getHelper
argument_list|()
operator|.
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|,
literal|"pw"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoginDisabledUser
parameter_list|()
throws|throws
name|Exception
block|{
name|user
operator|.
name|disable
argument_list|(
literal|"readonly user is disabled!"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// -> login must fail
try|try
block|{
name|Session
name|ss
init|=
name|getHelper
argument_list|()
operator|.
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|,
literal|"pw"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ss
operator|.
name|logout
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"A disabled user must not be allowed to login any more"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImpersonateDisabledUser
parameter_list|()
throws|throws
name|Exception
block|{
name|user
operator|.
name|disable
argument_list|(
literal|"readonly user is disabled!"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// -> impersonating this user must fail
try|try
block|{
name|Session
name|ss
init|=
name|superuser
operator|.
name|impersonate
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|ss
operator|.
name|logout
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"A disabled user cannot be impersonated any more."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoginWithGetCredentials
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
try|try
block|{
name|Credentials
name|creds
init|=
name|user
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
name|Session
name|s
init|=
name|getHelper
argument_list|()
operator|.
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
name|creds
argument_list|)
decl_stmt|;
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Login using credentials exposed on user must fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedRepositoryOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
end_class

end_unit

