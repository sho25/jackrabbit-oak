begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Revision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|StableRevisionComparator
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * A cache key implementation which consists of two {@link Revision}s.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|RevisionsKey
implements|implements
name|CacheValue
implements|,
name|Comparable
argument_list|<
name|RevisionsKey
argument_list|>
block|{
specifier|private
specifier|final
name|Revision
name|r1
decl_stmt|,
name|r2
decl_stmt|;
specifier|public
name|RevisionsKey
parameter_list|(
name|Revision
name|r1
parameter_list|,
name|Revision
name|r2
parameter_list|)
block|{
name|this
operator|.
name|r1
operator|=
name|checkNotNull
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|this
operator|.
name|r2
operator|=
name|checkNotNull
argument_list|(
name|r2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMemory
parameter_list|()
block|{
return|return
literal|88
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|RevisionsKey
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|RevisionsKey
name|other
init|=
operator|(
name|RevisionsKey
operator|)
name|obj
decl_stmt|;
return|return
name|r1
operator|.
name|equals
argument_list|(
name|other
operator|.
name|r1
argument_list|)
operator|&&
name|r2
operator|.
name|equals
argument_list|(
name|other
operator|.
name|r2
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|r1
operator|.
name|hashCode
argument_list|()
operator|^
name|r2
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|asString
argument_list|()
return|;
block|}
specifier|public
name|String
name|asString
parameter_list|()
block|{
return|return
name|r1
operator|+
literal|"/"
operator|+
name|r2
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
annotation|@
name|Nonnull
name|RevisionsKey
name|k
parameter_list|)
block|{
name|int
name|c
init|=
name|StableRevisionComparator
operator|.
name|INSTANCE
operator|.
name|compare
argument_list|(
name|r1
argument_list|,
name|k
operator|.
name|r1
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
block|{
return|return
name|c
return|;
block|}
return|return
name|StableRevisionComparator
operator|.
name|INSTANCE
operator|.
name|compare
argument_list|(
name|r2
argument_list|,
name|k
operator|.
name|r2
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RevisionsKey
name|fromString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|int
name|idx
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|s
argument_list|)
throw|;
block|}
return|return
operator|new
name|RevisionsKey
argument_list|(
name|Revision
operator|.
name|fromString
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
argument_list|)
argument_list|,
name|Revision
operator|.
name|fromString
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

