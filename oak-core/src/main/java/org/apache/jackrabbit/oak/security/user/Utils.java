begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|util
operator|.
name|UserUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_class
specifier|final
class|class
name|Utils
block|{
specifier|private
name|Utils
parameter_list|()
block|{}
comment|/**      * Create the tree at the specified relative path including all missing      * intermediate trees using the specified {@code primaryTypeName}. This      * method treats ".." parent element and "." as current element and      * resolves them accordingly; in case of a relative path containing parent      * elements this may lead to tree creating outside the tree structure      * defined by the given {@code Tree}.      *      * @param relativePath    A relative OAK path that may contain parent and      *                        current elements.      * @param primaryTypeName A oak name of a primary node type that is used      *                        to create the missing trees.      * @return The node util of the tree at the specified {@code relativePath}.      * @throws AccessDeniedException If the any intermediate tree does not exist      *                               and cannot be created.      */
annotation|@
name|NotNull
specifier|static
name|Tree
name|getOrAddTree
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|,
annotation|@
name|NotNull
name|String
name|relativePath
parameter_list|,
annotation|@
name|NotNull
name|String
name|primaryTypeName
parameter_list|)
throws|throws
name|AccessDeniedException
block|{
if|if
condition|(
name|PathUtils
operator|.
name|denotesCurrent
argument_list|(
name|relativePath
argument_list|)
condition|)
block|{
return|return
name|tree
return|;
block|}
elseif|else
if|if
condition|(
name|PathUtils
operator|.
name|denotesParent
argument_list|(
name|relativePath
argument_list|)
condition|)
block|{
return|return
name|tree
operator|.
name|getParent
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|relativePath
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|TreeUtil
operator|.
name|getOrAddChild
argument_list|(
name|tree
argument_list|,
name|relativePath
argument_list|,
name|primaryTypeName
argument_list|)
return|;
block|}
else|else
block|{
for|for
control|(
name|String
name|element
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|relativePath
argument_list|)
control|)
block|{
if|if
condition|(
name|PathUtils
operator|.
name|denotesParent
argument_list|(
name|element
argument_list|)
condition|)
block|{
name|tree
operator|=
name|tree
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|denotesCurrent
argument_list|(
name|element
argument_list|)
condition|)
block|{
name|tree
operator|=
name|TreeUtil
operator|.
name|getOrAddChild
argument_list|(
name|tree
argument_list|,
name|element
argument_list|,
name|primaryTypeName
argument_list|)
expr_stmt|;
block|}
comment|// else . -> skip to next element
block|}
return|return
name|tree
return|;
block|}
block|}
specifier|static
name|boolean
name|canHavePasswordExpired
parameter_list|(
annotation|@
name|NotNull
name|String
name|userId
parameter_list|,
annotation|@
name|NotNull
name|ConfigurationParameters
name|config
parameter_list|)
block|{
return|return
operator|!
name|UserUtil
operator|.
name|isAdmin
argument_list|(
name|config
argument_list|,
name|userId
argument_list|)
operator|||
name|config
operator|.
name|getConfigValue
argument_list|(
name|UserAuthentication
operator|.
name|PARAM_PASSWORD_EXPIRY_FOR_ADMIN
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|canHavePasswordExpired
parameter_list|(
annotation|@
name|NotNull
name|User
name|user
parameter_list|,
annotation|@
name|NotNull
name|ConfigurationParameters
name|config
parameter_list|)
block|{
return|return
operator|!
name|user
operator|.
name|isAdmin
argument_list|()
operator|||
name|config
operator|.
name|getConfigValue
argument_list|(
name|UserAuthentication
operator|.
name|PARAM_PASSWORD_EXPIRY_FOR_ADMIN
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
end_class

end_unit

