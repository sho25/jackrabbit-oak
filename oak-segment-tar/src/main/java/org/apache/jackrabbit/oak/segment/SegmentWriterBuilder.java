begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Suppliers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|WriterCacheManager
operator|.
name|Empty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|http
operator|.
name|HttpStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|memory
operator|.
name|MemoryStore
import|;
end_import

begin_comment
comment|/**  * Builder for building {@link SegmentWriter} instances.  * The returned instances are thread safe if {@link #withWriterPool()}  * was specified and<em>not</em> thread sage if {@link #withoutWriterPool()}  * was specified (default).  *<p>  *<em>Default:</em> calling one of the {@code build()} methods without previously  * calling one of the {@code with...()} methods returns a {@code SegmentWriter}  * as would the following chain of calls:  *<pre>      segmentWriterBuilder("name")         .with(LATEST_VERSION)         .withGeneration(0)         .withoutWriterPool()         .with(new WriterCacheManager.Default())         .build(store);  *</pre>  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|SegmentWriterBuilder
block|{
annotation|@
name|Nonnull
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
name|Supplier
argument_list|<
name|Integer
argument_list|>
name|generation
init|=
name|Suppliers
operator|.
name|ofInstance
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|pooled
init|=
literal|false
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
name|WriterCacheManager
name|cacheManager
init|=
operator|new
name|WriterCacheManager
operator|.
name|Default
argument_list|()
decl_stmt|;
specifier|private
name|SegmentWriterBuilder
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the {@code name} of this builder. This name will appear in the segment's      * meta data.      */
annotation|@
name|Nonnull
specifier|public
specifier|static
name|SegmentWriterBuilder
name|segmentWriterBuilder
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|SegmentWriterBuilder
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Specify the {@code generation} for the segment written by the returned      * segment writer.      *<p>      * If {@link #withoutWriterPool()} was specified all segments will be written      * at the generation that {@code generation.get()} returned at the time      * any of the {@code build()} methods is called.      * If {@link #withWriterPool()} was specified a segments will be written      * at the generation that {@code generation.get()} returns when a new segment      * is created by the returned writer.      */
annotation|@
name|Nonnull
specifier|public
name|SegmentWriterBuilder
name|withGeneration
parameter_list|(
annotation|@
name|Nonnull
name|Supplier
argument_list|<
name|Integer
argument_list|>
name|generation
parameter_list|)
block|{
name|this
operator|.
name|generation
operator|=
name|checkNotNull
argument_list|(
name|generation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Specify the {@code generation} for the segment written by the returned      * segment writer.      */
annotation|@
name|Nonnull
specifier|public
name|SegmentWriterBuilder
name|withGeneration
parameter_list|(
name|int
name|generation
parameter_list|)
block|{
name|this
operator|.
name|generation
operator|=
name|Suppliers
operator|.
name|ofInstance
argument_list|(
name|generation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Create a {@code SegmentWriter} backed by a {@link SegmentBufferWriterPool}.      * The returned instance is thread safe.      */
annotation|@
name|Nonnull
specifier|public
name|SegmentWriterBuilder
name|withWriterPool
parameter_list|()
block|{
name|this
operator|.
name|pooled
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Create a {@code SegmentWriter} backed by a {@link SegmentBufferWriter}.      * The returned instance is<em>not</em> thread safe.      */
annotation|@
name|Nonnull
specifier|public
name|SegmentWriterBuilder
name|withoutWriterPool
parameter_list|()
block|{
name|this
operator|.
name|pooled
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Specify the {@code cacheManager} used by the returned writer.      */
annotation|@
name|Nonnull
specifier|public
name|SegmentWriterBuilder
name|with
parameter_list|(
name|WriterCacheManager
name|cacheManager
parameter_list|)
block|{
name|this
operator|.
name|cacheManager
operator|=
name|checkNotNull
argument_list|(
name|cacheManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Specify that the returned writer should not use a cache.      * @see #with(WriterCacheManager)      */
annotation|@
name|Nonnull
specifier|public
name|SegmentWriterBuilder
name|withoutCache
parameter_list|()
block|{
name|this
operator|.
name|cacheManager
operator|=
name|Empty
operator|.
name|INSTANCE
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Build a {@code SegmentWriter} for a {@code FileStore}.      */
annotation|@
name|Nonnull
specifier|public
name|SegmentWriter
name|build
parameter_list|(
annotation|@
name|Nonnull
name|FileStore
name|store
parameter_list|)
block|{
return|return
operator|new
name|SegmentWriter
argument_list|(
name|checkNotNull
argument_list|(
name|store
argument_list|)
argument_list|,
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|cacheManager
argument_list|,
name|createWriter
argument_list|(
name|store
argument_list|,
name|pooled
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Build a {@code SegmentWriter} for a {@code MemoryStore}.      */
annotation|@
name|Nonnull
specifier|public
name|SegmentWriter
name|build
parameter_list|(
annotation|@
name|Nonnull
name|MemoryStore
name|store
parameter_list|)
block|{
return|return
operator|new
name|SegmentWriter
argument_list|(
name|checkNotNull
argument_list|(
name|store
argument_list|)
argument_list|,
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|cacheManager
argument_list|,
name|createWriter
argument_list|(
name|store
argument_list|,
name|pooled
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Build a {@code SegmentWriter} for a {@code HttpStore}.      */
annotation|@
name|Nonnull
specifier|public
name|SegmentWriter
name|build
parameter_list|(
annotation|@
name|Nonnull
name|HttpStore
name|store
parameter_list|)
block|{
return|return
operator|new
name|SegmentWriter
argument_list|(
name|checkNotNull
argument_list|(
name|store
argument_list|)
argument_list|,
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|cacheManager
argument_list|,
name|createWriter
argument_list|(
name|store
argument_list|,
name|pooled
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|WriteOperationHandler
name|createWriter
parameter_list|(
annotation|@
name|Nonnull
name|FileStore
name|store
parameter_list|,
name|boolean
name|pooled
parameter_list|)
block|{
if|if
condition|(
name|pooled
condition|)
block|{
return|return
operator|new
name|SegmentBufferWriterPool
argument_list|(
name|store
argument_list|,
name|store
operator|.
name|getTracker
argument_list|()
argument_list|,
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|name
argument_list|,
name|generation
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|SegmentBufferWriter
argument_list|(
name|store
argument_list|,
name|store
operator|.
name|getTracker
argument_list|()
argument_list|,
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|name
argument_list|,
name|generation
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Nonnull
specifier|private
name|WriteOperationHandler
name|createWriter
parameter_list|(
annotation|@
name|Nonnull
name|MemoryStore
name|store
parameter_list|,
name|boolean
name|pooled
parameter_list|)
block|{
if|if
condition|(
name|pooled
condition|)
block|{
return|return
operator|new
name|SegmentBufferWriterPool
argument_list|(
name|store
argument_list|,
name|store
operator|.
name|getTracker
argument_list|()
argument_list|,
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|name
argument_list|,
name|generation
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|SegmentBufferWriter
argument_list|(
name|store
argument_list|,
name|store
operator|.
name|getTracker
argument_list|()
argument_list|,
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|name
argument_list|,
name|generation
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Nonnull
specifier|private
name|WriteOperationHandler
name|createWriter
parameter_list|(
annotation|@
name|Nonnull
name|HttpStore
name|store
parameter_list|,
name|boolean
name|pooled
parameter_list|)
block|{
if|if
condition|(
name|pooled
condition|)
block|{
return|return
operator|new
name|SegmentBufferWriterPool
argument_list|(
name|store
argument_list|,
name|store
operator|.
name|getTracker
argument_list|()
argument_list|,
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|name
argument_list|,
name|generation
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|SegmentBufferWriter
argument_list|(
name|store
argument_list|,
name|store
operator|.
name|getTracker
argument_list|()
argument_list|,
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|name
argument_list|,
name|generation
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

