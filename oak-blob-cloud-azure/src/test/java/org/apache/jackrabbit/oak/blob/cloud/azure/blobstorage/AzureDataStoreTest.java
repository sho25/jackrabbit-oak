begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|azure
operator|.
name|blobstorage
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
operator|.
name|encodeHexString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|copyInputStreamToFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|NullOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|SharedBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|DigestOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_comment
comment|/**  * Test {@link AzureDataStore} with AzureDataStore and local cache on.  * It requires to pass azure config file via system property or system properties by prefixing with 'ds.'.  * See details @ {@link AzureDataStoreUtils}.  * For e.g. -Dconfig=/opt/cq/azure.properties. Sample azure properties located at  * src/test/resources/azure.properties  */
end_comment

begin_class
specifier|public
class|class
name|AzureDataStoreTest
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|Properties
name|props
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|testBuffer
init|=
literal|"test"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
name|AzureDataStore
name|ds
decl_stmt|;
specifier|private
name|AzureBlobStoreBackend
name|backend
decl_stmt|;
specifier|private
name|String
name|container
decl_stmt|;
name|Random
name|randomGen
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|assumptions
parameter_list|()
block|{
name|assumeTrue
argument_list|(
name|AzureDataStoreUtils
operator|.
name|isAzureConfigured
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
throws|,
name|RepositoryException
throws|,
name|URISyntaxException
throws|,
name|InvalidKeyException
throws|,
name|StorageException
block|{
name|props
operator|=
name|AzureDataStoreUtils
operator|.
name|getAzureConfig
argument_list|()
expr_stmt|;
name|container
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|randomGen
operator|.
name|nextInt
argument_list|(
literal|9999
argument_list|)
argument_list|)
operator|+
literal|"-"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|randomGen
operator|.
name|nextInt
argument_list|(
literal|9999
argument_list|)
argument_list|)
operator|+
literal|"-test"
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|AzureConstants
operator|.
name|AZURE_BLOB_CONTAINER_NAME
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|ds
operator|=
operator|new
name|AzureDataStore
argument_list|()
expr_stmt|;
name|ds
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|ds
operator|.
name|setCacheSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Turn caching off so we don't get weird test results due to caching
name|ds
operator|.
name|init
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|backend
operator|=
operator|(
name|AzureBlobStoreBackend
operator|)
name|ds
operator|.
name|getBackend
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|InvalidKeyException
throws|,
name|URISyntaxException
throws|,
name|StorageException
block|{
name|ds
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|AzureDataStoreUtils
operator|.
name|deleteContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{}
block|}
specifier|private
name|void
name|validateRecord
parameter_list|(
specifier|final
name|DataRecord
name|record
parameter_list|,
specifier|final
name|String
name|contents
parameter_list|,
specifier|final
name|DataRecord
name|rhs
parameter_list|)
throws|throws
name|DataStoreException
throws|,
name|IOException
block|{
name|validateRecord
argument_list|(
name|record
argument_list|,
name|contents
argument_list|,
name|rhs
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|rhs
operator|.
name|getLength
argument_list|()
argument_list|,
name|rhs
operator|.
name|getLastModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|validateRecord
parameter_list|(
specifier|final
name|DataRecord
name|record
parameter_list|,
specifier|final
name|String
name|contents
parameter_list|,
specifier|final
name|DataIdentifier
name|identifier
parameter_list|,
specifier|final
name|long
name|length
parameter_list|,
specifier|final
name|long
name|lastModified
parameter_list|)
throws|throws
name|DataStoreException
throws|,
name|IOException
block|{
name|validateRecord
argument_list|(
name|record
argument_list|,
name|contents
argument_list|,
name|identifier
argument_list|,
name|length
argument_list|,
name|lastModified
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|validateRecord
parameter_list|(
specifier|final
name|DataRecord
name|record
parameter_list|,
specifier|final
name|String
name|contents
parameter_list|,
specifier|final
name|DataIdentifier
name|identifier
parameter_list|,
specifier|final
name|long
name|length
parameter_list|,
specifier|final
name|long
name|lastModified
parameter_list|,
specifier|final
name|boolean
name|lastModifiedEquals
parameter_list|)
throws|throws
name|DataStoreException
throws|,
name|IOException
block|{
name|assertEquals
argument_list|(
name|record
operator|.
name|getLength
argument_list|()
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastModifiedEquals
condition|)
block|{
name|assertEquals
argument_list|(
name|record
operator|.
name|getLastModified
argument_list|()
argument_list|,
name|lastModified
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|record
operator|.
name|getLastModified
argument_list|()
operator|>
name|lastModified
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|record
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|identifier
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|copy
argument_list|(
name|record
operator|.
name|getStream
argument_list|()
argument_list|,
name|writer
argument_list|,
literal|"utf-8"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|contents
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|InputStream
name|randomStream
parameter_list|(
name|int
name|seed
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getIdForInputStream
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|IOException
block|{
name|MessageDigest
name|digest
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA-1"
argument_list|)
decl_stmt|;
name|OutputStream
name|output
init|=
operator|new
name|DigestOutputStream
argument_list|(
operator|new
name|NullOutputStream
argument_list|()
argument_list|,
name|digest
argument_list|)
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copyLarge
argument_list|(
name|in
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
return|return
name|encodeHexString
argument_list|(
name|digest
operator|.
name|digest
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateAndDeleteBlobHappyPath
parameter_list|()
throws|throws
name|DataStoreException
throws|,
name|IOException
block|{
specifier|final
name|DataRecord
name|uploadedRecord
init|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|testBuffer
argument_list|)
argument_list|)
decl_stmt|;
name|DataIdentifier
name|identifier
init|=
name|uploadedRecord
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|backend
operator|.
name|exists
argument_list|(
name|identifier
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|!=
name|uploadedRecord
operator|.
name|getLastModified
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testBuffer
operator|.
name|length
argument_list|,
name|uploadedRecord
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DataRecord
name|retrievedRecord
init|=
name|ds
operator|.
name|getRecord
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
name|validateRecord
argument_list|(
name|retrievedRecord
argument_list|,
operator|new
name|String
argument_list|(
name|testBuffer
argument_list|)
argument_list|,
name|uploadedRecord
argument_list|)
expr_stmt|;
name|ds
operator|.
name|deleteRecord
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|backend
operator|.
name|exists
argument_list|(
name|uploadedRecord
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateAndReUploadBlob
parameter_list|()
throws|throws
name|DataStoreException
throws|,
name|IOException
block|{
specifier|final
name|DataRecord
name|createdRecord
init|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|testBuffer
argument_list|)
argument_list|)
decl_stmt|;
name|DataIdentifier
name|identifier1
init|=
name|createdRecord
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|backend
operator|.
name|exists
argument_list|(
name|identifier1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|DataRecord
name|record1
init|=
name|ds
operator|.
name|getRecord
argument_list|(
name|identifier1
argument_list|)
decl_stmt|;
name|validateRecord
argument_list|(
name|record1
argument_list|,
operator|new
name|String
argument_list|(
name|testBuffer
argument_list|)
argument_list|,
name|createdRecord
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1001
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{ }
specifier|final
name|DataRecord
name|updatedRecord
init|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|testBuffer
argument_list|)
argument_list|)
decl_stmt|;
name|DataIdentifier
name|identifier2
init|=
name|updatedRecord
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|backend
operator|.
name|exists
argument_list|(
name|identifier2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|identifier1
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|identifier2
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|validateRecord
argument_list|(
name|record1
argument_list|,
operator|new
name|String
argument_list|(
name|testBuffer
argument_list|)
argument_list|,
name|createdRecord
argument_list|)
expr_stmt|;
name|ds
operator|.
name|deleteRecord
argument_list|(
name|identifier1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|backend
operator|.
name|exists
argument_list|(
name|createdRecord
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListBlobs
parameter_list|()
throws|throws
name|DataStoreException
throws|,
name|IOException
block|{
specifier|final
name|Set
argument_list|<
name|DataIdentifier
argument_list|>
name|identifiers
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|testStrings
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"test1"
argument_list|,
literal|"test2"
argument_list|,
literal|"test3"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|testStrings
control|)
block|{
name|identifiers
operator|.
name|add
argument_list|(
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|s
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|DataIdentifier
argument_list|>
name|iter
init|=
name|ds
operator|.
name|getAllIdentifiers
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DataIdentifier
name|identifier
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|identifiers
operator|.
name|contains
argument_list|(
name|identifier
argument_list|)
argument_list|)
expr_stmt|;
name|ds
operator|.
name|deleteRecord
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
block|}
block|}
comment|////
comment|// Backend Tests
comment|////
specifier|private
name|void
name|validateRecordData
parameter_list|(
specifier|final
name|SharedBackend
name|backend
parameter_list|,
specifier|final
name|DataIdentifier
name|identifier
parameter_list|,
name|int
name|expectedSize
parameter_list|,
specifier|final
name|InputStream
name|expected
parameter_list|)
throws|throws
name|IOException
throws|,
name|DataStoreException
block|{
name|byte
index|[]
name|blobData
init|=
operator|new
name|byte
index|[
name|expectedSize
index|]
decl_stmt|;
name|backend
operator|.
name|read
argument_list|(
name|identifier
argument_list|)
operator|.
name|read
argument_list|(
name|blobData
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expectedData
init|=
operator|new
name|byte
index|[
name|expectedSize
index|]
decl_stmt|;
name|expected
operator|.
name|read
argument_list|(
name|expectedData
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedSize
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expectedData
index|[
name|i
index|]
argument_list|,
name|blobData
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Write (Backend)
annotation|@
name|Test
specifier|public
name|void
name|testBackendWriteDifferentSizedRecords
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
throws|,
name|DataStoreException
block|{
comment|// Sizes are chosen as follows:
comment|// 0 - explicitly test zero-size file
comment|// 10 - very small file
comment|// 1000 - under 4K (a reasonably expected stream buffer size)
comment|// 4100 - over 4K but under 8K and 16K (other reasonably expected stream buffer sizes)
comment|// 16500 - over 8K and 16K but under 64K (another reasonably expected stream buffer size)
comment|// 66000 - over 64K but under 128K (probably the largest reasonably expected stream buffer size)
comment|// 132000 - over 128K
for|for
control|(
name|int
name|size
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|1000
argument_list|,
literal|4100
argument_list|,
literal|16500
argument_list|,
literal|66000
argument_list|,
literal|132000
argument_list|)
control|)
block|{
name|File
name|testFile
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|copyInputStreamToFile
argument_list|(
name|randomStream
argument_list|(
name|size
argument_list|,
name|size
argument_list|)
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|DataIdentifier
name|identifier
init|=
operator|new
name|DataIdentifier
argument_list|(
name|getIdForInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|backend
operator|.
name|write
argument_list|(
name|identifier
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|backend
operator|.
name|exists
argument_list|(
name|identifier
argument_list|)
argument_list|)
expr_stmt|;
name|validateRecordData
argument_list|(
name|backend
argument_list|,
name|identifier
argument_list|,
name|size
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
name|backend
operator|.
name|deleteRecord
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|backend
operator|.
name|exists
argument_list|(
name|identifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackendWriteRecordNullIdentifierThrowsNullPointerException
parameter_list|()
throws|throws
name|IOException
throws|,
name|DataStoreException
block|{
name|DataIdentifier
name|identifier
init|=
literal|null
decl_stmt|;
name|File
name|testFile
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|copyInputStreamToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
try|try
block|{
name|backend
operator|.
name|write
argument_list|(
name|identifier
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"identifier"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackendWriteRecordNullFileThrowsNullPointerException
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|File
name|testFile
init|=
literal|null
decl_stmt|;
name|DataIdentifier
name|identifier
init|=
operator|new
name|DataIdentifier
argument_list|(
literal|"fake"
argument_list|)
decl_stmt|;
try|try
block|{
name|backend
operator|.
name|write
argument_list|(
name|identifier
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"file"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackendWriteRecordFileNotFoundThrowsException
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
name|File
name|testFile
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|copyInputStreamToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|DataIdentifier
name|identifier
init|=
operator|new
name|DataIdentifier
argument_list|(
name|getIdForInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|testFile
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|backend
operator|.
name|write
argument_list|(
name|identifier
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|FileNotFoundException
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Read (Backend)
annotation|@
name|Test
specifier|public
name|void
name|testBackendReadRecordNullIdentifier
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|DataIdentifier
name|identifier
init|=
literal|null
decl_stmt|;
try|try
block|{
name|backend
operator|.
name|read
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
assert|assert
operator|(
literal|"identifier"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|)
assert|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackendReadRecordInvalidIdentifier
parameter_list|()
block|{
name|DataIdentifier
name|identifier
init|=
operator|new
name|DataIdentifier
argument_list|(
literal|"fake"
argument_list|)
decl_stmt|;
try|try
block|{
name|backend
operator|.
name|read
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
name|e
parameter_list|)
block|{ }
block|}
comment|// Delete (Backend)
annotation|@
name|Test
specifier|public
name|void
name|testBackendDeleteRecordNullIdentifier
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|DataIdentifier
name|identifier
init|=
literal|null
decl_stmt|;
try|try
block|{
name|backend
operator|.
name|deleteRecord
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
assert|assert
operator|(
literal|"identifier"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|)
assert|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackendDeleteRecordInvalidIdentifier
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|DataIdentifier
name|identifier
init|=
operator|new
name|DataIdentifier
argument_list|(
literal|"fake"
argument_list|)
decl_stmt|;
name|backend
operator|.
name|deleteRecord
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
comment|// We don't care if the identifier is invalid; this is a noop
block|}
comment|// Exists (Backend)
annotation|@
name|Test
specifier|public
name|void
name|testBackendNotCreatedRecordDoesNotExist
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|assertFalse
argument_list|(
name|backend
operator|.
name|exists
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
operator|(
literal|"fake"
operator|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackendRecordExistsNullIdentifierThrowsNullPointerException
parameter_list|()
throws|throws
name|DataStoreException
block|{
try|try
block|{
name|DataIdentifier
name|nullIdentifier
init|=
literal|null
decl_stmt|;
name|backend
operator|.
name|exists
argument_list|(
name|nullIdentifier
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{ }
block|}
comment|// GetAllIdentifiers (Backend)
annotation|@
name|Test
specifier|public
name|void
name|testBackendGetAllIdentifiersNoRecordsReturnsNone
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|Iterator
argument_list|<
name|DataIdentifier
argument_list|>
name|allIdentifiers
init|=
name|backend
operator|.
name|getAllIdentifiers
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|allIdentifiers
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackendGetAllIdentifiers
parameter_list|()
throws|throws
name|DataStoreException
throws|,
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
for|for
control|(
name|int
name|expectedRecCount
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
control|)
block|{
specifier|final
name|List
argument_list|<
name|DataIdentifier
argument_list|>
name|ids
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedRecCount
condition|;
name|i
operator|++
control|)
block|{
name|File
name|testfile
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|copyInputStreamToFile
argument_list|(
name|randomStream
argument_list|(
name|i
argument_list|,
literal|10
argument_list|)
argument_list|,
name|testfile
argument_list|)
expr_stmt|;
name|DataIdentifier
name|identifier
init|=
operator|new
name|DataIdentifier
argument_list|(
name|getIdForInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|testfile
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|backend
operator|.
name|write
argument_list|(
name|identifier
argument_list|,
name|testfile
argument_list|)
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
block|}
name|int
name|actualRecCount
init|=
name|Iterators
operator|.
name|size
argument_list|(
name|backend
operator|.
name|getAllIdentifiers
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DataIdentifier
name|identifier
range|:
name|ids
control|)
block|{
name|backend
operator|.
name|deleteRecord
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedRecCount
argument_list|,
name|actualRecCount
argument_list|)
expr_stmt|;
block|}
block|}
comment|// GetRecord (Backend)
annotation|@
name|Test
specifier|public
name|void
name|testBackendGetRecord
parameter_list|()
throws|throws
name|IOException
throws|,
name|DataStoreException
block|{
name|String
name|recordData
init|=
literal|"testData"
decl_stmt|;
name|DataRecord
name|record
init|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|recordData
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|DataRecord
name|retrievedRecord
init|=
name|backend
operator|.
name|getRecord
argument_list|(
name|record
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|validateRecord
argument_list|(
name|record
argument_list|,
name|recordData
argument_list|,
name|retrievedRecord
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackendGetRecordNullIdentifierThrowsNullPointerException
parameter_list|()
throws|throws
name|DataStoreException
block|{
try|try
block|{
name|DataIdentifier
name|identifier
init|=
literal|null
decl_stmt|;
name|backend
operator|.
name|getRecord
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"identifier"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackendGetRecordInvalidIdentifierThrowsDataStoreException
parameter_list|()
block|{
try|try
block|{
name|backend
operator|.
name|getRecord
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
literal|"invalid"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
name|e
parameter_list|)
block|{          }
block|}
comment|// GetAllRecords (Backend)
annotation|@
name|Test
specifier|public
name|void
name|testBackendGetAllRecordsReturnsAll
parameter_list|()
throws|throws
name|DataStoreException
throws|,
name|IOException
block|{
for|for
control|(
name|int
name|recCount
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
control|)
block|{
name|Map
argument_list|<
name|DataIdentifier
argument_list|,
name|String
argument_list|>
name|addedRecords
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|recCount
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|recCount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|data
init|=
name|String
operator|.
name|format
argument_list|(
literal|"testData%d"
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|DataRecord
name|record
init|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|addedRecords
operator|.
name|put
argument_list|(
name|record
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|DataRecord
argument_list|>
name|iter
init|=
name|backend
operator|.
name|getAllRecords
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DataIdentifier
argument_list|>
name|identifiers
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|int
name|actualCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DataRecord
name|record
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|identifiers
operator|.
name|add
argument_list|(
name|record
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|addedRecords
operator|.
name|containsKey
argument_list|(
name|record
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|record
operator|.
name|getStream
argument_list|()
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|addedRecords
operator|.
name|get
argument_list|(
name|record
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|actualCount
operator|++
expr_stmt|;
block|}
for|for
control|(
name|DataIdentifier
name|identifier
range|:
name|identifiers
control|)
block|{
name|ds
operator|.
name|deleteRecord
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|recCount
argument_list|,
name|actualCount
argument_list|)
expr_stmt|;
block|}
block|}
comment|// AddMetadataRecord (Backend)
annotation|@
name|Test
specifier|public
name|void
name|testBackendAddMetadataRecordsFromInputStream
parameter_list|()
throws|throws
name|DataStoreException
throws|,
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
for|for
control|(
name|boolean
name|fromInputStream
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
control|)
block|{
name|String
name|prefix
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s.META."
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|count
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|records
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|String
name|recordName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%sname.%d"
argument_list|,
name|prefix
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|String
name|data
init|=
name|String
operator|.
name|format
argument_list|(
literal|"testData%d"
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|records
operator|.
name|put
argument_list|(
name|recordName
argument_list|,
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromInputStream
condition|)
block|{
name|backend
operator|.
name|addMetadataRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|recordName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|File
name|testFile
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|copyInputStreamToFile
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|backend
operator|.
name|addMetadataRecord
argument_list|(
name|testFile
argument_list|,
name|recordName
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
name|backend
operator|.
name|getAllMetadataRecords
argument_list|(
name|prefix
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|records
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|DataRecord
name|record
init|=
name|backend
operator|.
name|getMetadataRecord
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|record
operator|.
name|getStream
argument_list|()
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|backend
operator|.
name|deleteMetadataRecord
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|backend
operator|.
name|getAllMetadataRecords
argument_list|(
name|prefix
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackendAddMetadataRecordFileNotFoundThrowsDataStoreException
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|testFile
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|copyInputStreamToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|delete
argument_list|()
expr_stmt|;
try|try
block|{
name|backend
operator|.
name|addMetadataRecord
argument_list|(
name|testFile
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|FileNotFoundException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackendAddMetadataRecordNullInputStreamThrowsNullPointerException
parameter_list|()
throws|throws
name|DataStoreException
block|{
try|try
block|{
name|backend
operator|.
name|addMetadataRecord
argument_list|(
operator|(
name|InputStream
operator|)
literal|null
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"input"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackendAddMetadataRecordNullFileThrowsNullPointerException
parameter_list|()
throws|throws
name|DataStoreException
block|{
try|try
block|{
name|backend
operator|.
name|addMetadataRecord
argument_list|(
operator|(
name|File
operator|)
literal|null
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"input"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackendAddMetadataRecordNullEmptyNameThrowsIllegalArgumentException
parameter_list|()
throws|throws
name|DataStoreException
throws|,
name|IOException
block|{
specifier|final
name|String
name|data
init|=
literal|"testData"
decl_stmt|;
for|for
control|(
name|boolean
name|fromInputStream
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|name
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|null
argument_list|,
literal|""
argument_list|)
control|)
block|{
try|try
block|{
if|if
condition|(
name|fromInputStream
condition|)
block|{
name|backend
operator|.
name|addMetadataRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|File
name|testFile
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|copyInputStreamToFile
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|backend
operator|.
name|addMetadataRecord
argument_list|(
name|testFile
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"name"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// GetMetadataRecord (Backend)
annotation|@
name|Test
specifier|public
name|void
name|testBackendGetMetadataRecordInvalidName
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|backend
operator|.
name|addMetadataRecord
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|"testRecord"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|backend
operator|.
name|getMetadataRecord
argument_list|(
literal|"invalid"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|)
control|)
block|{
try|try
block|{
name|backend
operator|.
name|getMetadataRecord
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect to throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
name|backend
operator|.
name|deleteMetadataRecord
argument_list|(
literal|"testRecord"
argument_list|)
expr_stmt|;
block|}
comment|// GetAllMetadataRecords (Backend)
annotation|@
name|Test
specifier|public
name|void
name|testBackendGetAllMetadataRecordsPrefixMatchesAll
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|backend
operator|.
name|getAllMetadataRecords
argument_list|(
literal|""
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|prefixAll
init|=
literal|"prefix1"
decl_stmt|;
name|String
name|prefixSome
init|=
literal|"prefix1.prefix2"
decl_stmt|;
name|String
name|prefixOne
init|=
literal|"prefix1.prefix3"
decl_stmt|;
name|String
name|prefixNone
init|=
literal|"prefix4"
decl_stmt|;
name|backend
operator|.
name|addMetadataRecord
argument_list|(
name|randomStream
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s.testRecord1"
argument_list|,
name|prefixAll
argument_list|)
argument_list|)
expr_stmt|;
name|backend
operator|.
name|addMetadataRecord
argument_list|(
name|randomStream
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s.testRecord2"
argument_list|,
name|prefixSome
argument_list|)
argument_list|)
expr_stmt|;
name|backend
operator|.
name|addMetadataRecord
argument_list|(
name|randomStream
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s.testRecord3"
argument_list|,
name|prefixSome
argument_list|)
argument_list|)
expr_stmt|;
name|backend
operator|.
name|addMetadataRecord
argument_list|(
name|randomStream
argument_list|(
literal|4
argument_list|,
literal|10
argument_list|)
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s.testRecord4"
argument_list|,
name|prefixOne
argument_list|)
argument_list|)
expr_stmt|;
name|backend
operator|.
name|addMetadataRecord
argument_list|(
name|randomStream
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|"prefix5.testRecord5"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|backend
operator|.
name|getAllMetadataRecords
argument_list|(
literal|""
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|backend
operator|.
name|getAllMetadataRecords
argument_list|(
name|prefixAll
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|backend
operator|.
name|getAllMetadataRecords
argument_list|(
name|prefixSome
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|backend
operator|.
name|getAllMetadataRecords
argument_list|(
name|prefixOne
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|backend
operator|.
name|getAllMetadataRecords
argument_list|(
name|prefixNone
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|backend
operator|.
name|deleteAllMetadataRecords
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|backend
operator|.
name|getAllMetadataRecords
argument_list|(
literal|""
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackendGetAllMetadataRecordsNullPrefixThrowsNullPointerException
parameter_list|()
block|{
try|try
block|{
name|backend
operator|.
name|getAllMetadataRecords
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"prefix"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// DeleteMetadataRecord (Backend)
annotation|@
name|Test
specifier|public
name|void
name|testBackendDeleteMetadataRecord
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|backend
operator|.
name|addMetadataRecord
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"invalid"
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|)
control|)
block|{
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
try|try
block|{
name|backend
operator|.
name|deleteMetadataRecord
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{ }
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|backend
operator|.
name|deleteMetadataRecord
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|backend
operator|.
name|deleteMetadataRecord
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// DeleteAllMetadataRecords (Backend)
annotation|@
name|Test
specifier|public
name|void
name|testBackendDeleteAllMetadataRecordsPrefixMatchesAll
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|String
name|prefixAll
init|=
literal|"prefix1"
decl_stmt|;
name|String
name|prefixSome
init|=
literal|"prefix1.prefix2"
decl_stmt|;
name|String
name|prefixOne
init|=
literal|"prefix1.prefix3"
decl_stmt|;
name|String
name|prefixNone
init|=
literal|"prefix4"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|prefixCounts
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|prefixCounts
operator|.
name|put
argument_list|(
name|prefixAll
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|prefixCounts
operator|.
name|put
argument_list|(
name|prefixSome
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|prefixCounts
operator|.
name|put
argument_list|(
name|prefixOne
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|prefixCounts
operator|.
name|put
argument_list|(
name|prefixNone
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|prefixCounts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|backend
operator|.
name|addMetadataRecord
argument_list|(
name|randomStream
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s.testRecord1"
argument_list|,
name|prefixAll
argument_list|)
argument_list|)
expr_stmt|;
name|backend
operator|.
name|addMetadataRecord
argument_list|(
name|randomStream
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s.testRecord2"
argument_list|,
name|prefixSome
argument_list|)
argument_list|)
expr_stmt|;
name|backend
operator|.
name|addMetadataRecord
argument_list|(
name|randomStream
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s.testRecord3"
argument_list|,
name|prefixSome
argument_list|)
argument_list|)
expr_stmt|;
name|backend
operator|.
name|addMetadataRecord
argument_list|(
name|randomStream
argument_list|(
literal|4
argument_list|,
literal|10
argument_list|)
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s.testRecord4"
argument_list|,
name|prefixOne
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|preCount
init|=
name|backend
operator|.
name|getAllMetadataRecords
argument_list|(
literal|""
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|backend
operator|.
name|deleteAllMetadataRecords
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|deletedCount
init|=
name|preCount
operator|-
name|backend
operator|.
name|getAllMetadataRecords
argument_list|(
literal|""
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|deletedCount
argument_list|)
expr_stmt|;
name|backend
operator|.
name|deleteAllMetadataRecords
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackendDeleteAllMetadataRecordsNoRecordsNoChange
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|backend
operator|.
name|getAllMetadataRecords
argument_list|(
literal|""
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|backend
operator|.
name|deleteAllMetadataRecords
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|backend
operator|.
name|getAllMetadataRecords
argument_list|(
literal|""
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackendDeleteAllMetadataRecordsNullPrefixThrowsNullPointerException
parameter_list|()
block|{
try|try
block|{
name|backend
operator|.
name|deleteAllMetadataRecords
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"prefix"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

