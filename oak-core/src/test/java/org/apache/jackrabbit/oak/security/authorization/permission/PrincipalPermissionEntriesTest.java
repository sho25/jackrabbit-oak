begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|PrincipalPermissionEntriesTest
block|{
specifier|private
specifier|final
name|PermissionEntry
name|permissionEntry
init|=
operator|new
name|PermissionEntry
argument_list|(
literal|"/path"
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeBits
operator|.
name|JCR_READ
argument_list|)
argument_list|,
name|RestrictionPattern
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testExpectedSize
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|inspectExpectedSize
argument_list|(
operator|new
name|PrincipalPermissionEntries
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|inspectExpectedSize
argument_list|(
operator|new
name|PrincipalPermissionEntries
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEntriesUponCreation
parameter_list|()
block|{
name|assertTrue
argument_list|(
operator|new
name|PrincipalPermissionEntries
argument_list|(
literal|1
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|PrincipalPermissionEntries
argument_list|()
operator|.
name|getEntries
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEntriesByPathUponCreation
parameter_list|()
block|{
name|assertNull
argument_list|(
operator|new
name|PrincipalPermissionEntries
argument_list|(
literal|1
argument_list|)
operator|.
name|getEntriesByPath
argument_list|(
literal|"/path"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|new
name|PrincipalPermissionEntries
argument_list|()
operator|.
name|getEntriesByPath
argument_list|(
literal|"/path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsFullyLoadedUponCreation
parameter_list|()
block|{
name|assertTrue
argument_list|(
operator|new
name|PrincipalPermissionEntries
argument_list|(
literal|0
argument_list|)
operator|.
name|isFullyLoaded
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|PrincipalPermissionEntries
argument_list|(
literal|1
argument_list|)
operator|.
name|isFullyLoaded
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|PrincipalPermissionEntries
argument_list|()
operator|.
name|isFullyLoaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetFullyLoaded
parameter_list|()
block|{
name|PrincipalPermissionEntries
name|ppe
init|=
operator|new
name|PrincipalPermissionEntries
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ppe
operator|.
name|setFullyLoaded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ppe
operator|.
name|isFullyLoaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetFullyLoadedNoExpectedSize
parameter_list|()
block|{
name|PrincipalPermissionEntries
name|ppe
init|=
operator|new
name|PrincipalPermissionEntries
argument_list|()
decl_stmt|;
name|ppe
operator|.
name|setFullyLoaded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ppe
operator|.
name|isFullyLoaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutAllEntriesSetsFullyLoadedIgnoresExpectedSize
parameter_list|()
block|{
name|PrincipalPermissionEntries
name|ppe
init|=
operator|new
name|PrincipalPermissionEntries
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ppe
operator|.
name|putAllEntries
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ppe
operator|.
name|isFullyLoaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutAllEntriesSetsFullyLoaded
parameter_list|()
block|{
name|PrincipalPermissionEntries
name|ppe
init|=
operator|new
name|PrincipalPermissionEntries
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ppe
operator|.
name|putAllEntries
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"/path"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|permissionEntry
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ppe
operator|.
name|isFullyLoaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutAllEntriesWithoutExpectedSizeSetsFullyLoaded
parameter_list|()
block|{
name|PrincipalPermissionEntries
name|ppe
init|=
operator|new
name|PrincipalPermissionEntries
argument_list|()
decl_stmt|;
name|ppe
operator|.
name|putAllEntries
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"/path"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|permissionEntry
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ppe
operator|.
name|isFullyLoaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutAllEntries
parameter_list|()
block|{
name|PrincipalPermissionEntries
name|ppe
init|=
operator|new
name|PrincipalPermissionEntries
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
argument_list|>
name|allEntries
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"/path"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|permissionEntry
argument_list|)
argument_list|)
decl_stmt|;
name|ppe
operator|.
name|putAllEntries
argument_list|(
name|allEntries
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allEntries
argument_list|,
name|ppe
operator|.
name|getEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutEntriesByPathSetsFullyLoaded
parameter_list|()
block|{
name|PrincipalPermissionEntries
name|ppe
init|=
operator|new
name|PrincipalPermissionEntries
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ppe
operator|.
name|putEntriesByPath
argument_list|(
literal|"/path"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|permissionEntry
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ppe
operator|.
name|isFullyLoaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutEntriesByPathExceedingExpectedSizeSetsFullyLoaded
parameter_list|()
block|{
name|PrincipalPermissionEntries
name|ppe
init|=
operator|new
name|PrincipalPermissionEntries
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
name|collection
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|permissionEntry
argument_list|)
decl_stmt|;
name|ppe
operator|.
name|putEntriesByPath
argument_list|(
literal|"/path"
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|ppe
operator|.
name|putEntriesByPath
argument_list|(
literal|"/path2"
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ppe
operator|.
name|isFullyLoaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutEntriesByPathNotReachingExpectedSize
parameter_list|()
block|{
name|PrincipalPermissionEntries
name|ppe
init|=
operator|new
name|PrincipalPermissionEntries
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ppe
operator|.
name|putEntriesByPath
argument_list|(
literal|"/path"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|permissionEntry
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ppe
operator|.
name|isFullyLoaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutEntriesByPath
parameter_list|()
block|{
name|PrincipalPermissionEntries
name|ppe
init|=
operator|new
name|PrincipalPermissionEntries
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ppe
operator|.
name|putEntriesByPath
argument_list|(
literal|"/path"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|permissionEntry
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ppe
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ppe
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutEmptyEntriesByPath
parameter_list|()
block|{
name|PrincipalPermissionEntries
name|ppe
init|=
operator|new
name|PrincipalPermissionEntries
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ppe
operator|.
name|putEntriesByPath
argument_list|(
literal|"/path"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ppe
operator|.
name|isFullyLoaded
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ppe
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ppe
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRememberNotAccessControlled
parameter_list|()
block|{
name|PrincipalPermissionEntries
name|ppe
init|=
operator|new
name|PrincipalPermissionEntries
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ppe
operator|.
name|rememberNotAccessControlled
argument_list|(
literal|"/path"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ppe
operator|.
name|isFullyLoaded
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ppe
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ppe
operator|.
name|getEntries
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
name|c
init|=
name|ppe
operator|.
name|getEntriesByPath
argument_list|(
literal|"/path"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEntriesByPath
parameter_list|()
block|{
name|PrincipalPermissionEntries
name|ppe
init|=
operator|new
name|PrincipalPermissionEntries
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
name|collection
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|permissionEntry
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
argument_list|>
name|allEntries
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"/path"
argument_list|,
name|collection
argument_list|,
literal|"/path2"
argument_list|,
name|collection
argument_list|)
decl_stmt|;
name|ppe
operator|.
name|putAllEntries
argument_list|(
name|allEntries
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collection
argument_list|,
name|ppe
operator|.
name|getEntriesByPath
argument_list|(
literal|"/path"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collection
argument_list|,
name|ppe
operator|.
name|getEntriesByPath
argument_list|(
literal|"/path2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ppe
operator|.
name|getEntriesByPath
argument_list|(
literal|"/nonExisting"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInitialSize
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|new
name|PrincipalPermissionEntries
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|new
name|PrincipalPermissionEntries
argument_list|(
literal|1
argument_list|)
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSize
parameter_list|()
block|{
name|PrincipalPermissionEntries
name|ppe
init|=
operator|new
name|PrincipalPermissionEntries
argument_list|()
decl_stmt|;
name|ppe
operator|.
name|putEntriesByPath
argument_list|(
literal|"/path"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|permissionEntry
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ppe
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|ppe
operator|.
name|rememberNotAccessControlled
argument_list|(
literal|"/path2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ppe
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyPathsWithMaxSize
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPermissionEntries
name|ppe
init|=
operator|new
name|PrincipalPermissionEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|inspectEmptyPathSize
argument_list|(
name|ppe
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1010
condition|;
name|i
operator|++
control|)
block|{
name|ppe
operator|.
name|rememberNotAccessControlled
argument_list|(
literal|"/path"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|inspectEmptyPathSize
argument_list|(
name|ppe
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|long
name|inspectExpectedSize
parameter_list|(
annotation|@
name|NotNull
name|PrincipalPermissionEntries
name|ppe
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|PrincipalPermissionEntries
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"expectedSize"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|long
operator|)
name|f
operator|.
name|get
argument_list|(
name|ppe
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|inspectEmptyPathSize
parameter_list|(
annotation|@
name|NotNull
name|PrincipalPermissionEntries
name|ppe
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|PrincipalPermissionEntries
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"emptyPaths"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|Map
operator|)
name|f
operator|.
name|get
argument_list|(
name|ppe
argument_list|)
operator|)
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

