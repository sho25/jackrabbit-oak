begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|ReadOnlyTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|TreeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|ReadOnlyNodeTypeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * {@code CommitHook} implementation that processes any modification made to  * access control content and updates persisted permission caches associated  * with access control related data stored in the repository.  */
end_comment

begin_class
specifier|public
class|class
name|PermissionHook
implements|implements
name|CommitHook
implements|,
name|AccessControlConstants
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PermissionHook
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|processCommit
parameter_list|(
specifier|final
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|after
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// TODO: retrieve workspace name
name|String
name|workspaceName
init|=
literal|"default"
decl_stmt|;
name|NodeBuilder
name|permissionRoot
init|=
name|getPermissionRoot
argument_list|(
name|rootBuilder
argument_list|,
name|workspaceName
argument_list|)
decl_stmt|;
name|ReadOnlyNodeTypeManager
name|ntMgr
init|=
name|ReadOnlyNodeTypeManager
operator|.
name|getInstance
argument_list|(
name|before
argument_list|)
decl_stmt|;
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
operator|new
name|Diff
argument_list|(
operator|new
name|Node
argument_list|(
name|rootBuilder
argument_list|)
argument_list|,
name|permissionRoot
argument_list|,
name|ntMgr
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|rootBuilder
operator|.
name|getNodeState
argument_list|()
return|;
block|}
specifier|private
name|NodeBuilder
name|getPermissionRoot
parameter_list|(
name|NodeBuilder
name|rootBuilder
parameter_list|,
name|String
name|workspaceName
parameter_list|)
block|{
name|NodeBuilder
name|store
init|=
name|rootBuilder
operator|.
name|child
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_SYSTEM
argument_list|)
operator|.
name|child
argument_list|(
name|REP_PERMISSION_STORE
argument_list|)
decl_stmt|;
name|NodeBuilder
name|permissionRoot
decl_stmt|;
if|if
condition|(
operator|!
name|store
operator|.
name|hasChildNode
argument_list|(
name|workspaceName
argument_list|)
condition|)
block|{
name|permissionRoot
operator|=
name|store
operator|.
name|child
argument_list|(
name|workspaceName
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_REP_PERMISSION_STORE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|permissionRoot
operator|=
name|store
operator|.
name|child
argument_list|(
name|workspaceName
argument_list|)
expr_stmt|;
block|}
return|return
name|permissionRoot
return|;
block|}
specifier|private
specifier|static
class|class
name|Diff
implements|implements
name|NodeStateDiff
block|{
specifier|private
specifier|final
name|ReadOnlyNodeTypeManager
name|ntMgr
decl_stmt|;
specifier|private
specifier|final
name|NodeBuilder
name|permissionRoot
decl_stmt|;
specifier|private
specifier|final
name|Node
name|parentAfter
decl_stmt|;
specifier|private
name|Diff
parameter_list|(
annotation|@
name|Nonnull
name|Node
name|node
parameter_list|,
name|NodeBuilder
name|permissionRoot
parameter_list|,
name|ReadOnlyNodeTypeManager
name|ntMgr
parameter_list|)
block|{
name|this
operator|.
name|ntMgr
operator|=
name|ntMgr
expr_stmt|;
name|this
operator|.
name|permissionRoot
operator|=
name|permissionRoot
expr_stmt|;
name|this
operator|.
name|parentAfter
operator|=
name|node
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
comment|// nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
if|if
condition|(
name|isACL
argument_list|(
name|parentAfter
argument_list|)
operator|&&
name|TreeImpl
operator|.
name|OAK_CHILD_ORDER
operator|.
name|equals
argument_list|(
name|before
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|updateEntries
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
comment|// nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
if|if
condition|(
name|isACE
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
condition|)
block|{
name|addEntry
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|NodeState
name|before
init|=
name|MemoryNodeState
operator|.
name|EMPTY_NODE
decl_stmt|;
name|Node
name|node
init|=
operator|new
name|Node
argument_list|(
name|parentAfter
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
operator|new
name|Diff
argument_list|(
name|node
argument_list|,
name|permissionRoot
argument_list|,
name|ntMgr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
if|if
condition|(
name|isACE
argument_list|(
name|name
argument_list|,
name|before
argument_list|)
operator|||
name|isACE
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
condition|)
block|{
name|updateEntry
argument_list|(
name|name
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Node
name|node
init|=
operator|new
name|Node
argument_list|(
name|parentAfter
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
operator|new
name|Diff
argument_list|(
name|node
argument_list|,
name|permissionRoot
argument_list|,
name|ntMgr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
if|if
condition|(
name|isACE
argument_list|(
name|name
argument_list|,
name|before
argument_list|)
condition|)
block|{
name|removeEntry
argument_list|(
name|name
argument_list|,
name|before
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Node
name|after
init|=
operator|new
name|Node
argument_list|(
name|parentAfter
operator|.
name|path
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|after
operator|.
name|builder
operator|.
name|getNodeState
argument_list|()
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
operator|new
name|Diff
argument_list|(
name|after
argument_list|,
name|permissionRoot
argument_list|,
name|ntMgr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//--------------------------------------------------------< private>---
specifier|private
name|boolean
name|isACL
parameter_list|(
name|Node
name|parent
parameter_list|)
block|{
try|try
block|{
return|return
name|ntMgr
operator|.
name|isNodeType
argument_list|(
name|getTree
argument_list|(
name|parent
operator|.
name|getName
argument_list|()
argument_list|,
name|parent
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|,
name|NT_REP_POLICY
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|boolean
name|isACE
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|nodeState
parameter_list|)
block|{
try|try
block|{
return|return
name|ntMgr
operator|.
name|isNodeType
argument_list|(
name|getTree
argument_list|(
name|name
argument_list|,
name|nodeState
argument_list|)
argument_list|,
name|NT_REP_ACE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getAccessControlledPath
parameter_list|(
name|Node
name|aclNode
parameter_list|)
block|{
return|return
name|Text
operator|.
name|getRelativeParent
argument_list|(
name|aclNode
operator|.
name|path
argument_list|,
literal|1
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Tree
name|getTree
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|nodeState
parameter_list|)
block|{
comment|// FIXME: this readonlytree is not properly connect to it's parent
return|return
operator|new
name|ReadOnlyTree
argument_list|(
literal|null
argument_list|,
name|name
argument_list|,
name|nodeState
argument_list|)
return|;
block|}
specifier|private
name|void
name|addEntry
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|String
name|accessControlledPath
init|=
name|getAccessControlledPath
argument_list|(
name|parentAfter
argument_list|)
decl_stmt|;
comment|// TODO
comment|//log.info("add entry:" + name);
block|}
specifier|private
name|void
name|removeEntry
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|String
name|accessControlledPath
init|=
name|getAccessControlledPath
argument_list|(
name|parentAfter
argument_list|)
decl_stmt|;
comment|// TODO
comment|//log.info("remove entry" + name);
block|}
specifier|private
name|void
name|updateEntry
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
name|String
name|accessControlledPath
init|=
name|getAccessControlledPath
argument_list|(
name|parentAfter
argument_list|)
decl_stmt|;
comment|// TODO
comment|//log.info("update"+ name);
block|}
specifier|private
name|void
name|updateEntries
parameter_list|()
block|{
name|String
name|accessControlledPath
init|=
name|getAccessControlledPath
argument_list|(
name|parentAfter
argument_list|)
decl_stmt|;
name|NodeState
name|aclState
init|=
name|parentAfter
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// TODO
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|Node
block|{
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|NodeBuilder
name|builder
decl_stmt|;
specifier|private
name|Node
parameter_list|(
name|NodeBuilder
name|rootBuilder
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
literal|"/"
expr_stmt|;
name|this
operator|.
name|builder
operator|=
name|rootBuilder
expr_stmt|;
block|}
specifier|private
name|Node
parameter_list|(
name|String
name|parentPath
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|parentPath
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|builder
operator|=
name|MemoryNodeState
operator|.
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Node
parameter_list|(
name|Node
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|builder
operator|=
name|parent
operator|.
name|builder
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|parent
operator|.
name|path
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getName
parameter_list|()
block|{
return|return
name|Text
operator|.
name|getName
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|private
name|NodeState
name|getNodeState
parameter_list|()
block|{
return|return
name|builder
operator|.
name|getNodeState
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

