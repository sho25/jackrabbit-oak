begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|PermissionCacheBuilderTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|EMPTY_CLASS_NAME
init|=
literal|"org.apache.jackrabbit.oak.security.authorization.permission.PermissionCacheBuilder$EmptyCache"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SIMPLE_CLASS_NAME
init|=
literal|"org.apache.jackrabbit.oak.security.authorization.permission.PermissionCacheBuilder$PathEntryMapCache"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CLASS_NAME
init|=
literal|"org.apache.jackrabbit.oak.security.authorization.permission.PermissionCacheBuilder$DefaultPermissionCache"
decl_stmt|;
specifier|private
name|PermissionStore
name|store
decl_stmt|;
specifier|private
name|PermissionCacheBuilder
name|permissionCacheBuilder
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
block|{
name|store
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|PermissionStore
operator|.
name|class
argument_list|)
expr_stmt|;
name|permissionCacheBuilder
operator|=
operator|new
name|PermissionCacheBuilder
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testBuildBeforeInitialized
parameter_list|()
block|{
name|permissionCacheBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildForEmptyPrincipals
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|permissionCacheBuilder
operator|.
name|init
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|permissionCacheBuilder
operator|.
name|init
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|PermissionCache
name|cache
init|=
name|permissionCacheBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|EMPTY_CLASS_NAME
argument_list|,
name|cache
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildNoExistingEntries
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|store
operator|.
name|getNumEntries
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NumEntries
operator|.
name|ZERO
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|load
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|PrincipalPermissionEntries
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|principalNames
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"noEntries"
argument_list|,
literal|"noEntries2"
argument_list|,
literal|"noEntries3"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|permissionCacheBuilder
operator|.
name|init
argument_list|(
name|principalNames
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|PermissionCache
name|cache
init|=
name|permissionCacheBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|EMPTY_CLASS_NAME
argument_list|,
name|cache
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildFewEntriesSamePath
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPermissionEntries
name|ppeA
init|=
operator|new
name|PrincipalPermissionEntries
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ppeA
operator|.
name|putEntriesByPath
argument_list|(
literal|"/path"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|PermissionEntry
argument_list|(
literal|"/path"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeBits
operator|.
name|REP_READ_NODES
argument_list|)
argument_list|,
name|RestrictionPattern
operator|.
name|EMPTY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PrincipalPermissionEntries
name|ppeB
init|=
operator|new
name|PrincipalPermissionEntries
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ppeB
operator|.
name|putEntriesByPath
argument_list|(
literal|"/path"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|PermissionEntry
argument_list|(
literal|"/path"
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeBits
operator|.
name|REP_READ_NODES
argument_list|)
argument_list|,
name|RestrictionPattern
operator|.
name|EMPTY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|load
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ppeA
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|load
argument_list|(
literal|"b"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ppeB
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|getNumEntries
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NumEntries
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|principalNames
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|permissionCacheBuilder
operator|.
name|init
argument_list|(
name|principalNames
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|PermissionCache
name|cache
init|=
name|permissionCacheBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|SIMPLE_CLASS_NAME
argument_list|,
name|cache
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildFewEntriesDifferentPaths
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPermissionEntries
name|ppeA
init|=
operator|new
name|PrincipalPermissionEntries
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ppeA
operator|.
name|putEntriesByPath
argument_list|(
literal|"/path"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|PermissionEntry
argument_list|(
literal|"/path"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeBits
operator|.
name|REP_READ_NODES
argument_list|)
argument_list|,
name|RestrictionPattern
operator|.
name|EMPTY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PrincipalPermissionEntries
name|ppeB
init|=
operator|new
name|PrincipalPermissionEntries
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ppeB
operator|.
name|putEntriesByPath
argument_list|(
literal|"/path"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|PermissionEntry
argument_list|(
literal|"/path"
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeBits
operator|.
name|REP_READ_NODES
argument_list|)
argument_list|,
name|RestrictionPattern
operator|.
name|EMPTY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|load
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ppeA
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|load
argument_list|(
literal|"b"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ppeB
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|getNumEntries
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NumEntries
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|principalNames
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|permissionCacheBuilder
operator|.
name|init
argument_list|(
name|principalNames
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|PermissionCache
name|cache
init|=
name|permissionCacheBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|SIMPLE_CLASS_NAME
argument_list|,
name|cache
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoEntriesNonExactCnt
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|store
operator|.
name|load
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|PrincipalPermissionEntries
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|load
argument_list|(
literal|"b"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|PrincipalPermissionEntries
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|getNumEntries
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NumEntries
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|principalNames
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|permissionCacheBuilder
operator|.
name|init
argument_list|(
name|principalNames
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|PermissionCache
name|cache
init|=
name|permissionCacheBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|EMPTY_CLASS_NAME
argument_list|,
name|cache
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildMaxEntriesReached
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPermissionEntries
name|ppeA
init|=
operator|new
name|PrincipalPermissionEntries
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ppeA
operator|.
name|putEntriesByPath
argument_list|(
literal|"/path1"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|PermissionEntry
argument_list|(
literal|"/path1"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeBits
operator|.
name|REP_READ_NODES
argument_list|)
argument_list|,
name|RestrictionPattern
operator|.
name|EMPTY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PrincipalPermissionEntries
name|ppeB
init|=
operator|new
name|PrincipalPermissionEntries
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ppeA
operator|.
name|putEntriesByPath
argument_list|(
literal|"/path2"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|PermissionEntry
argument_list|(
literal|"/path2"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeBits
operator|.
name|REP_READ_NODES
argument_list|)
argument_list|,
name|RestrictionPattern
operator|.
name|EMPTY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|load
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ppeA
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|load
argument_list|(
literal|"b"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ppeB
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|getNumEntries
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NumEntries
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|principalNames
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|long
name|maxSize
init|=
literal|1
decl_stmt|;
name|assertFalse
argument_list|(
name|permissionCacheBuilder
operator|.
name|init
argument_list|(
name|principalNames
argument_list|,
name|maxSize
argument_list|)
argument_list|)
expr_stmt|;
name|PermissionCache
name|cache
init|=
name|permissionCacheBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_CLASS_NAME
argument_list|,
name|cache
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

