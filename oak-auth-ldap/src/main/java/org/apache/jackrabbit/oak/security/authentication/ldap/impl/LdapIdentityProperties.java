begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|ldap
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * {@code LdapIdentityProperties} implements a case insensitive hash map that preserves the case of the keys but  * ignores the case during lookup.  */
end_comment

begin_class
specifier|public
class|class
name|LdapIdentityProperties
extends|extends
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|keyMapping
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|LdapIdentityProperties
parameter_list|(
name|int
name|initialCapacity
parameter_list|,
name|float
name|loadFactor
parameter_list|)
block|{
name|super
argument_list|(
name|initialCapacity
argument_list|,
name|loadFactor
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LdapIdentityProperties
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|super
argument_list|(
name|initialCapacity
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LdapIdentityProperties
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|LdapIdentityProperties
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|String
argument_list|,
name|?
argument_list|>
name|m
parameter_list|)
block|{
name|super
argument_list|(
name|m
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|m
operator|.
name|keySet
argument_list|()
control|)
block|{
name|keyMapping
operator|.
name|put
argument_list|(
name|convert
argument_list|(
name|key
argument_list|)
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|keyMapping
operator|.
name|put
argument_list|(
name|convert
argument_list|(
name|key
argument_list|)
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|keyMapping
operator|.
name|remove
argument_list|(
name|convert
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|String
name|realKey
init|=
name|keyMapping
operator|.
name|get
argument_list|(
name|convert
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|realKey
operator|==
literal|null
condition|?
literal|null
else|:
name|super
operator|.
name|get
argument_list|(
name|realKey
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|String
name|realKey
init|=
name|keyMapping
operator|.
name|get
argument_list|(
name|convert
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|realKey
operator|!=
literal|null
operator|&&
name|super
operator|.
name|containsKey
argument_list|(
name|realKey
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|String
argument_list|,
name|?
argument_list|>
name|m
parameter_list|)
block|{
name|super
operator|.
name|putAll
argument_list|(
name|m
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|m
operator|.
name|keySet
argument_list|()
control|)
block|{
name|keyMapping
operator|.
name|put
argument_list|(
name|convert
argument_list|(
name|key
argument_list|)
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keyMapping
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|convert
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|String
name|key
init|=
name|obj
operator|instanceof
name|String
condition|?
operator|(
name|String
operator|)
name|obj
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|obj
argument_list|)
decl_stmt|;
return|return
name|key
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
return|;
block|}
block|}
end_class

end_unit

