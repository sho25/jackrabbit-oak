begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
operator|.
name|Token
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * A parser for the JSON format accepting the following grammar:  *  *<pre>  * OBJECT    ::= { (PAIR (, PAIR)*)? }  * PAIR      ::= STRING : VALUE  * VALUE     ::= OBJECT | ARRAY | STRING | NUMBER | true | false | null  * ARRAY     ::= [ (VALUE (, VALUE)*)? ]  *</pre>  *  * Semantic actions are attached through a {@link JsonHandler} instance  * which is passed to the constructor. For each of the above productions  * the parser provides a corresponding method which take a {@link JsonTokenizer}  * for reading the JSON input. These methods call the respective call back on the  * {@code JsonHandler} for each of the constituents of the production.  *<p/>  * Note: In contrast to conventional parsers, this parser<em>does not</em>  * recursively decent into nested structures (OBJECT, ARRAY and PAIR, that is).  * Instead it calls the respective method on the {@code JsonHandler} which  * is can use this parser instance or any other parser to continue parsing.  *  * @see<a href="http://www.json.org/">json.org</a>  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|JsonParser
block|{
specifier|private
specifier|final
name|JsonHandler
name|jsonHandler
decl_stmt|;
specifier|public
name|JsonParser
parameter_list|(
name|JsonHandler
name|jsonHandler
parameter_list|)
block|{
name|this
operator|.
name|jsonHandler
operator|=
name|jsonHandler
expr_stmt|;
block|}
comment|/**      * Parses      *<pre>      * OBJECT ::= { (PAIR (, PAIR)*)? }      *</pre>      * Calls {@link JsonHandler#comma(Token)}      * @param tokenizer      * @throws ParseException      */
specifier|public
name|void
name|parseObject
parameter_list|(
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|tokenizer
operator|.
name|read
argument_list|(
name|Type
operator|.
name|BEGIN_OBJECT
argument_list|)
expr_stmt|;
if|if
condition|(
name|tryParsePair
argument_list|(
name|tokenizer
argument_list|)
condition|)
block|{
while|while
condition|(
name|tokenizer
operator|.
name|peek
argument_list|(
name|Type
operator|.
name|COMMA
argument_list|)
condition|)
block|{
name|jsonHandler
operator|.
name|comma
argument_list|(
name|tokenizer
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tryParsePair
argument_list|(
name|tokenizer
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
name|tokenizer
operator|.
name|pos
argument_list|()
argument_list|,
literal|"Expected pair, found: "
operator|+
name|tokenizer
operator|.
name|peek
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|tokenizer
operator|.
name|read
argument_list|(
name|Type
operator|.
name|END_OBJECT
argument_list|)
expr_stmt|;
block|}
comment|/**      * Parses      *<pre>      * PAIR ::= STRING: VALUE      *</pre>      * @param tokenizer      * @throws ParseException      */
specifier|public
name|void
name|parsePair
parameter_list|(
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|tokenizer
operator|.
name|peek
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
name|tokenizer
operator|.
name|pos
argument_list|()
argument_list|,
literal|"Expected string, found: "
operator|+
name|tokenizer
operator|.
name|peek
argument_list|()
argument_list|)
throw|;
block|}
name|Token
name|key
init|=
name|tokenizer
operator|.
name|read
argument_list|()
decl_stmt|;
name|tokenizer
operator|.
name|read
argument_list|(
name|Type
operator|.
name|COLON
argument_list|)
expr_stmt|;
name|parseValue
argument_list|(
name|key
argument_list|,
name|tokenizer
argument_list|)
expr_stmt|;
block|}
comment|/**      * Parses      *<pre>      * VALUE ::= OBJECT | ARRAY | STRING | NUMBER | true | false | null      *</pre>      * Calls one of {@link JsonHandler#object(JsonParser, Token, JsonTokenizer)},      * {@link JsonHandler#array(JsonParser, Token, JsonTokenizer)} and      * {@link JsonHandler#atom(Token, Token)}      * @param tokenizer      * @throws ParseException      */
specifier|public
name|void
name|parseValue
parameter_list|(
name|Token
name|key
parameter_list|,
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
switch|switch
condition|(
name|tokenizer
operator|.
name|peek
argument_list|()
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|BEGIN_OBJECT
case|:
name|jsonHandler
operator|.
name|object
argument_list|(
name|this
argument_list|,
name|key
argument_list|,
name|tokenizer
argument_list|)
expr_stmt|;
break|break;
case|case
name|BEGIN_ARRAY
case|:
name|jsonHandler
operator|.
name|array
argument_list|(
name|this
argument_list|,
name|key
argument_list|,
name|tokenizer
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
case|case
name|NUMBER
case|:
case|case
name|TRUE
case|:
case|case
name|FALSE
case|:
case|case
name|NULL
case|:
name|jsonHandler
operator|.
name|atom
argument_list|(
name|key
argument_list|,
name|tokenizer
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|ParseException
argument_list|(
name|tokenizer
operator|.
name|pos
argument_list|()
argument_list|,
literal|"Expected value, found: "
operator|+
name|tokenizer
operator|.
name|peek
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Parses      *<pre>      * ARRAY ::= [ (VALUE (, VALUE)*)? ]      *</pre>      * Calls {@link JsonHandler#comma(Token)}      * @param tokenizer      * @throws ParseException      */
specifier|public
name|void
name|parseArray
parameter_list|(
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|tokenizer
operator|.
name|read
argument_list|(
name|Type
operator|.
name|BEGIN_ARRAY
argument_list|)
expr_stmt|;
if|if
condition|(
name|tryParseValue
argument_list|(
name|tokenizer
argument_list|)
condition|)
block|{
while|while
condition|(
name|tokenizer
operator|.
name|peek
argument_list|(
name|Type
operator|.
name|COMMA
argument_list|)
condition|)
block|{
name|jsonHandler
operator|.
name|comma
argument_list|(
name|tokenizer
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tryParseValue
argument_list|(
name|tokenizer
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
name|tokenizer
operator|.
name|pos
argument_list|()
argument_list|,
literal|"Expected value, found: "
operator|+
name|tokenizer
operator|.
name|peek
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|tokenizer
operator|.
name|read
argument_list|(
name|Type
operator|.
name|END_ARRAY
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------< private>---
specifier|private
name|boolean
name|tryParsePair
parameter_list|(
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
if|if
condition|(
name|tokenizer
operator|.
name|peek
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
condition|)
block|{
name|jsonHandler
operator|.
name|pair
argument_list|(
name|this
argument_list|,
name|tokenizer
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|boolean
name|tryParseValue
parameter_list|(
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
if|if
condition|(
name|tokenizer
operator|.
name|peek
argument_list|(
name|Type
operator|.
name|END_ARRAY
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|parseValue
argument_list|(
literal|null
argument_list|,
name|tokenizer
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

