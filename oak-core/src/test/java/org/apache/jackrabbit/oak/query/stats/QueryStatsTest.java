begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|stats
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|QueryEngineSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|QueryStatsTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testEviction
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|QueryStatsMBeanImpl
name|bean
init|=
operator|new
name|QueryStatsMBeanImpl
argument_list|(
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10010
condition|;
name|i
operator|++
control|)
block|{
name|bean
operator|.
name|getQueryExecution
argument_list|(
literal|"old"
operator|+
name|i
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bean
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// remain around 5000
name|Thread
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|bean
operator|.
name|getQueryExecution
argument_list|(
literal|"slow"
operator|+
name|i
argument_list|,
literal|""
argument_list|)
operator|.
name|execute
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bean
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10010
condition|;
name|i
operator|++
control|)
block|{
name|bean
operator|.
name|getQueryExecution
argument_list|(
literal|"new"
operator|+
name|i
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|bean
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|json
init|=
name|bean
operator|.
name|asJson
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|json
operator|.
name|indexOf
argument_list|(
literal|"slow"
operator|+
name|i
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|json
operator|.
name|indexOf
argument_list|(
literal|"old"
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

