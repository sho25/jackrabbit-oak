begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
operator|.
name|concat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|NODE_ADDED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|NODE_MOVED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|NODE_REMOVED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|PROPERTY_ADDED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|PROPERTY_REMOVED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|AbstractTree
operator|.
name|OAK_CHILD_ORDER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|identifier
operator|.
name|IdentifierManager
operator|.
name|getIdentifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ForwardingIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|ImmutableTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|VisibleValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|MoveDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|MoveValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * TODO document  */
end_comment

begin_class
class|class
name|EventGenerator
extends|extends
name|ForwardingIterator
argument_list|<
name|Event
argument_list|>
implements|implements
name|MoveValidator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EventGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|userId
decl_stmt|;
specifier|private
specifier|final
name|String
name|message
decl_stmt|;
specifier|private
specifier|final
name|long
name|timestamp
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|external
decl_stmt|;
specifier|private
specifier|final
name|ImmutableTree
name|beforeTree
decl_stmt|;
specifier|private
specifier|final
name|ImmutableTree
name|afterTree
decl_stmt|;
specifier|private
specifier|final
name|EventFilter
name|filter
decl_stmt|;
specifier|private
specifier|final
name|NamePathMapper
name|namePathMapper
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Event
argument_list|>
name|events
init|=
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Iterator
argument_list|<
name|Event
argument_list|>
argument_list|>
name|childEvents
init|=
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|Event
argument_list|>
name|eventIterator
decl_stmt|;
name|EventGenerator
parameter_list|(
name|CommitInfo
name|info
parameter_list|,
name|ImmutableTree
name|beforeTree
parameter_list|,
name|ImmutableTree
name|afterTree
parameter_list|,
name|EventFilter
name|filter
parameter_list|,
name|NamePathMapper
name|namePathMapper
parameter_list|)
block|{
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|userId
operator|=
name|info
operator|.
name|getUserId
argument_list|()
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|info
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|info
operator|.
name|getDate
argument_list|()
expr_stmt|;
name|this
operator|.
name|external
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|userId
operator|=
name|CommitInfo
operator|.
name|OAK_UNKNOWN
expr_stmt|;
name|this
operator|.
name|message
operator|=
literal|null
expr_stmt|;
comment|// we can't tell exactly when external changes were committed,
comment|// so we just use a rough estimate like this
name|this
operator|.
name|timestamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|external
operator|=
literal|true
expr_stmt|;
block|}
name|this
operator|.
name|beforeTree
operator|=
name|beforeTree
expr_stmt|;
name|this
operator|.
name|afterTree
operator|=
name|afterTree
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|this
operator|.
name|namePathMapper
operator|=
name|namePathMapper
expr_stmt|;
block|}
name|EventGenerator
parameter_list|(
name|EventGenerator
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|userId
operator|=
name|parent
operator|.
name|userId
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|parent
operator|.
name|message
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|parent
operator|.
name|timestamp
expr_stmt|;
name|this
operator|.
name|external
operator|=
name|parent
operator|.
name|external
expr_stmt|;
name|this
operator|.
name|beforeTree
operator|=
name|parent
operator|.
name|beforeTree
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|afterTree
operator|=
name|parent
operator|.
name|afterTree
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|parent
operator|.
name|filter
expr_stmt|;
name|this
operator|.
name|namePathMapper
operator|=
name|parent
operator|.
name|namePathMapper
expr_stmt|;
block|}
comment|//------------------------------------------------------------< ForwardingIterator>---
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Event
argument_list|>
name|delegate
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|eventIterator
operator|==
literal|null
condition|)
block|{
name|SecureValidator
operator|.
name|compare
argument_list|(
name|beforeTree
argument_list|,
name|afterTree
argument_list|,
operator|new
name|VisibleValidator
argument_list|(
operator|new
name|MoveDetector
argument_list|(
name|this
argument_list|,
name|afterTree
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|eventIterator
operator|=
name|concat
argument_list|(
name|events
operator|.
name|iterator
argument_list|()
argument_list|,
name|concat
argument_list|(
name|childEvents
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|eventIterator
return|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error while extracting observation events"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Iterators
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
block|}
comment|//------------------------------------------------------------< Validator>---
annotation|@
name|Override
specifier|public
name|void
name|enter
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|leave
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|.
name|include
argument_list|(
name|PROPERTY_ADDED
argument_list|,
name|afterTree
argument_list|)
condition|)
block|{
name|events
operator|.
name|add
argument_list|(
name|createEvent
argument_list|(
name|PROPERTY_ADDED
argument_list|,
name|afterTree
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|.
name|include
argument_list|(
name|Event
operator|.
name|PROPERTY_CHANGED
argument_list|,
name|afterTree
argument_list|)
condition|)
block|{
name|events
operator|.
name|add
argument_list|(
name|createEvent
argument_list|(
name|Event
operator|.
name|PROPERTY_CHANGED
argument_list|,
name|afterTree
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|.
name|include
argument_list|(
name|PROPERTY_REMOVED
argument_list|,
name|afterTree
argument_list|)
condition|)
block|{
name|events
operator|.
name|add
argument_list|(
name|createEvent
argument_list|(
name|PROPERTY_REMOVED
argument_list|,
name|beforeTree
argument_list|,
name|before
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MoveValidator
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|.
name|include
argument_list|(
name|NODE_ADDED
argument_list|,
name|afterTree
argument_list|)
condition|)
block|{
name|events
operator|.
name|add
argument_list|(
name|createEvent
argument_list|(
name|NODE_ADDED
argument_list|,
name|afterTree
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filter
operator|.
name|includeChildren
argument_list|(
name|afterTree
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|childEvents
operator|.
name|add
argument_list|(
operator|new
name|EventGenerator
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|MoveValidator
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|.
name|include
argument_list|(
name|NODE_REMOVED
argument_list|,
name|beforeTree
argument_list|)
condition|)
block|{
name|events
operator|.
name|add
argument_list|(
name|createEvent
argument_list|(
name|NODE_REMOVED
argument_list|,
name|beforeTree
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filter
operator|.
name|includeChildren
argument_list|(
name|beforeTree
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|childEvents
operator|.
name|add
argument_list|(
operator|new
name|EventGenerator
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|MoveValidator
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|.
name|include
argument_list|(
name|NODE_MOVED
argument_list|,
name|afterTree
argument_list|)
condition|)
block|{
name|detectReorder
argument_list|(
name|name
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filter
operator|.
name|includeChildren
argument_list|(
name|afterTree
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|childEvents
operator|.
name|add
argument_list|(
operator|new
name|EventGenerator
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|detectReorder
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|PropertyState
name|afterOrder
init|=
name|after
operator|.
name|getProperty
argument_list|(
name|OAK_CHILD_ORDER
argument_list|)
decl_stmt|;
name|PropertyState
name|beforeOrder
init|=
name|before
operator|.
name|getProperty
argument_list|(
name|OAK_CHILD_ORDER
argument_list|)
decl_stmt|;
if|if
condition|(
name|afterOrder
operator|==
literal|null
operator|||
name|beforeOrder
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|afterNames
init|=
name|getNames
argument_list|(
name|afterOrder
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|beforeNames
init|=
name|getNames
argument_list|(
name|beforeOrder
argument_list|)
decl_stmt|;
name|afterNames
operator|.
name|retainAll
argument_list|(
name|beforeNames
argument_list|)
expr_stmt|;
name|beforeNames
operator|.
name|retainAll
argument_list|(
name|afterNames
argument_list|)
expr_stmt|;
comment|// Selection sort beforeNames into afterNames recording the swaps as we go
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|afterNames
operator|.
name|size
argument_list|()
condition|;
name|a
operator|++
control|)
block|{
name|String
name|afterName
init|=
name|afterNames
operator|.
name|get
argument_list|(
name|a
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|b
init|=
name|a
init|;
name|b
operator|<
name|beforeNames
operator|.
name|size
argument_list|()
condition|;
name|b
operator|++
control|)
block|{
name|String
name|beforeName
init|=
name|beforeNames
operator|.
name|get
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
name|b
operator|&&
name|beforeName
operator|.
name|equals
argument_list|(
name|afterName
argument_list|)
condition|)
block|{
name|beforeNames
operator|.
name|set
argument_list|(
name|b
argument_list|,
name|beforeNames
operator|.
name|get
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|beforeNames
operator|.
name|set
argument_list|(
name|a
argument_list|,
name|beforeName
argument_list|)
expr_stmt|;
name|events
operator|.
name|add
argument_list|(
name|createEvent
argument_list|(
name|NODE_MOVED
argument_list|,
name|afterTree
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
operator|.
name|getChild
argument_list|(
name|afterName
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"srcChildRelPath"
argument_list|,
name|beforeNames
operator|.
name|get
argument_list|(
name|a
argument_list|)
argument_list|,
literal|"destChildRelPath"
argument_list|,
name|beforeNames
operator|.
name|get
argument_list|(
name|a
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getNames
parameter_list|(
name|PropertyState
name|propertyState
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|propertyState
operator|.
name|count
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|propertyState
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|,
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|names
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|move
parameter_list|(
name|String
name|sourcePath
parameter_list|,
name|String
name|destPath
parameter_list|,
name|NodeState
name|moved
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|filter
operator|.
name|include
argument_list|(
name|NODE_MOVED
argument_list|,
name|afterTree
argument_list|)
condition|)
block|{
name|events
operator|.
name|add
argument_list|(
name|createEvent
argument_list|(
name|NODE_MOVED
argument_list|,
name|afterTree
operator|.
name|getChild
argument_list|(
name|getName
argument_list|(
name|destPath
argument_list|)
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"srcAbsPath"
argument_list|,
name|namePathMapper
operator|.
name|getJcrPath
argument_list|(
name|sourcePath
argument_list|)
argument_list|,
literal|"destAbsPath"
argument_list|,
name|namePathMapper
operator|.
name|getJcrPath
argument_list|(
name|destPath
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//------------------------------------------------------------< internal>---
specifier|private
name|Event
name|createEvent
parameter_list|(
name|int
name|eventType
parameter_list|,
name|Tree
name|tree
parameter_list|)
block|{
return|return
name|createEvent
argument_list|(
name|eventType
argument_list|,
name|tree
operator|.
name|getPath
argument_list|()
argument_list|,
name|getIdentifier
argument_list|(
name|tree
argument_list|)
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Event
name|createEvent
parameter_list|(
name|int
name|eventType
parameter_list|,
name|Tree
name|tree
parameter_list|,
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|info
parameter_list|)
block|{
return|return
name|createEvent
argument_list|(
name|eventType
argument_list|,
name|tree
operator|.
name|getPath
argument_list|()
argument_list|,
name|getIdentifier
argument_list|(
name|tree
argument_list|)
argument_list|,
name|info
argument_list|)
return|;
block|}
specifier|private
name|Event
name|createEvent
parameter_list|(
name|int
name|eventType
parameter_list|,
name|Tree
name|parent
parameter_list|,
name|PropertyState
name|property
parameter_list|)
block|{
name|String
name|path
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|parent
operator|.
name|getPath
argument_list|()
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|createEvent
argument_list|(
name|eventType
argument_list|,
name|path
argument_list|,
name|getIdentifier
argument_list|(
name|parent
argument_list|)
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Event
name|createEvent
parameter_list|(
name|int
name|eventType
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|info
parameter_list|)
block|{
return|return
operator|new
name|EventImpl
argument_list|(
name|eventType
argument_list|,
name|namePathMapper
operator|.
name|getJcrPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|userId
argument_list|,
name|id
argument_list|,
name|info
argument_list|,
name|timestamp
argument_list|,
name|message
argument_list|,
name|external
argument_list|)
return|;
block|}
block|}
end_class

end_unit

