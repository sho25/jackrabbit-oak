begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|server
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|ClientIpFilterTest
block|{
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"filters={0}, address={1}, matches={2}"
argument_list|)
specifier|public
specifier|static
name|Object
index|[]
name|parameters
parameter_list|()
block|{
return|return
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|null
block|,
literal|"127.0.0.1"
block|,
literal|true
block|}
block|,
block|{
literal|""
block|,
literal|"127.0.0.1"
block|,
literal|true
block|}
block|,
block|{
literal|"127.0.0.1"
block|,
literal|"127.0.0.1"
block|,
literal|true
block|}
block|,
block|{
literal|"127.0.0.2"
block|,
literal|"127.0.0.1"
block|,
literal|false
block|}
block|,
block|{
literal|"::1"
block|,
literal|"::1"
block|,
literal|true
block|}
block|,
block|{
literal|"::2"
block|,
literal|"::1"
block|,
literal|false
block|}
block|,
block|{
literal|"localhost"
block|,
literal|"127.0.0.1"
block|,
literal|true
block|}
block|,
block|{
literal|"127.0.0.1-127.0.0.2"
block|,
literal|"127.0.0.1"
block|,
literal|true
block|}
block|,
block|{
literal|"127.0.0.0-127.0.0.1"
block|,
literal|"127.0.0.1"
block|,
literal|true
block|}
block|,
block|{
literal|"127.0.0.0-127.0.0.2"
block|,
literal|"127.0.0.1"
block|,
literal|true
block|}
block|,
block|{
literal|"127.0.0.2-127.0.0.1"
block|,
literal|"127.0.0.1"
block|,
literal|false
block|}
block|,
block|{
literal|"127-128, 126.0.0.1, 127.0.0.0-127.255.255.255"
block|,
literal|"127.0.0.1"
block|,
literal|true
block|}
block|,
block|{
literal|"122-126, ::1, 126.0.0.1, 127.0.0.0-127.255.255.255"
block|,
literal|"127.0.0.1"
block|,
literal|true
block|}
block|,
block|{
literal|"126.0.0.1, ::2, 128.0.0.1-255.255.255.255, 128.0.0.0-127.255.255.255"
block|,
literal|"127.0.0.1"
block|,
literal|false
block|}
block|,
block|{
literal|"127-128, 0:0:0:0:0:0:0:1, 126.0.0.1, 127.0.0.0-127.255.255.255"
block|,
literal|"::1"
block|,
literal|true
block|}
block|,
block|{
literal|"122-126, ::1, 126.0.0.1, 127.0.0.0-127.255.255.255"
block|,
literal|"::1"
block|,
literal|true
block|}
block|,
block|{
literal|"126.0.0.1, ::2, 128.0.0.1-255.255.255.255, 128.0.0.0-127.255.255.255"
block|,
literal|"::1"
block|,
literal|false
block|}
block|,         }
return|;
block|}
specifier|private
specifier|final
name|String
name|addresses
decl_stmt|;
specifier|private
specifier|final
name|String
name|client
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|match
decl_stmt|;
specifier|public
name|ClientIpFilterTest
parameter_list|(
name|String
name|addresses
parameter_list|,
name|String
name|client
parameter_list|,
name|boolean
name|match
parameter_list|)
block|{
name|this
operator|.
name|addresses
operator|=
name|addresses
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|match
operator|=
name|match
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|match
argument_list|,
operator|new
name|ClientIpFilter
argument_list|(
name|parseFilters
argument_list|()
argument_list|)
operator|.
name|isAllowed
argument_list|(
name|createAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
index|[]
name|parseFilters
parameter_list|()
block|{
if|if
condition|(
name|addresses
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|addresses
operator|.
name|split
argument_list|(
literal|","
argument_list|)
return|;
block|}
specifier|private
name|InetSocketAddress
name|createAddress
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|InetSocketAddress
argument_list|(
name|InetAddress
operator|.
name|getByName
argument_list|(
name|client
argument_list|)
argument_list|,
literal|8080
argument_list|)
return|;
block|}
block|}
end_class

end_unit

