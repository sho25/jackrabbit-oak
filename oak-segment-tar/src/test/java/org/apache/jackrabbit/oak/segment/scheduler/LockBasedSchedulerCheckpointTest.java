begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|scheduler
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|memory
operator|.
name|MemoryStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|LockBasedSchedulerCheckpointTest
block|{
comment|/**      * OAK-3587 test simulates a timeout while trying to create a checkpoint,      * then releases the lock and tries again      */
annotation|@
name|Test
specifier|public
name|void
name|testShortWait
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryStore
name|ms
init|=
operator|new
name|MemoryStore
argument_list|()
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"oak.checkpoints.lockWaitTime"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
specifier|final
name|LockBasedScheduler
name|scheduler
init|=
name|LockBasedScheduler
operator|.
name|builder
argument_list|(
name|ms
operator|.
name|getRevisions
argument_list|()
argument_list|,
name|ms
operator|.
name|getReader
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Semaphore
name|semaphore
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|blocking
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|Callable
argument_list|<
name|Boolean
argument_list|>
name|block
init|=
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
block|{
while|while
condition|(
name|blocking
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|semaphore
operator|.
name|availablePermits
argument_list|()
operator|==
literal|0
condition|)
block|{
name|semaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|Thread
name|background
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Commit
name|commit
init|=
name|createBlockingCommit
argument_list|(
name|scheduler
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|block
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|schedule
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|}
decl_stmt|;
name|background
operator|.
name|start
argument_list|()
expr_stmt|;
name|semaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|String
name|cp0
init|=
name|scheduler
operator|.
name|checkpoint
argument_list|(
literal|10
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|retrieveCheckpoint
argument_list|(
name|scheduler
argument_list|,
name|cp0
argument_list|)
argument_list|)
expr_stmt|;
name|blocking
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|cp1
init|=
name|scheduler
operator|.
name|checkpoint
argument_list|(
literal|10
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|retrieveCheckpoint
argument_list|(
name|scheduler
argument_list|,
name|cp1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * OAK-3587 test simulates a wait less than configured      * {@code SegmentNodeStore#setCheckpointsLockWaitTime(int)} value so the      * checkpoint call must return a valid value      */
annotation|@
name|Test
specifier|public
name|void
name|testLongWait
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|blockTime
init|=
literal|1
decl_stmt|;
name|MemoryStore
name|ms
init|=
operator|new
name|MemoryStore
argument_list|()
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"oak.checkpoints.lockWaitTime"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
specifier|final
name|LockBasedScheduler
name|scheduler
init|=
name|LockBasedScheduler
operator|.
name|builder
argument_list|(
name|ms
operator|.
name|getRevisions
argument_list|()
argument_list|,
name|ms
operator|.
name|getReader
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Semaphore
name|semaphore
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Callable
argument_list|<
name|Boolean
argument_list|>
name|block
init|=
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
block|{
try|try
block|{
name|semaphore
operator|.
name|release
argument_list|()
expr_stmt|;
name|SECONDS
operator|.
name|sleep
argument_list|(
name|blockTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|Thread
name|background
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Commit
name|commit
init|=
name|createBlockingCommit
argument_list|(
name|scheduler
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|block
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|schedule
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|}
decl_stmt|;
name|background
operator|.
name|start
argument_list|()
expr_stmt|;
name|semaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|String
name|cp0
init|=
name|scheduler
operator|.
name|checkpoint
argument_list|(
literal|10
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|retrieveCheckpoint
argument_list|(
name|scheduler
argument_list|,
name|cp0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|NodeState
name|retrieveCheckpoint
parameter_list|(
specifier|final
name|Scheduler
name|scheduler
parameter_list|,
specifier|final
name|String
name|checkpoint
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|checkpoint
argument_list|)
expr_stmt|;
name|NodeState
name|cp
init|=
name|scheduler
operator|.
name|getHeadNodeState
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"checkpoints"
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|checkpoint
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cp
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|cp
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|NodeState
name|getRoot
parameter_list|(
name|Scheduler
name|scheduler
parameter_list|)
block|{
return|return
name|scheduler
operator|.
name|getHeadNodeState
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"root"
argument_list|)
return|;
block|}
specifier|private
name|Commit
name|createBlockingCommit
parameter_list|(
specifier|final
name|Scheduler
name|scheduler
parameter_list|,
specifier|final
name|String
name|property
parameter_list|,
name|String
name|value
parameter_list|,
specifier|final
name|Callable
argument_list|<
name|Boolean
argument_list|>
name|callable
parameter_list|)
block|{
name|NodeBuilder
name|a
init|=
name|getRoot
argument_list|(
name|scheduler
argument_list|)
operator|.
name|builder
argument_list|()
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
name|property
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Commit
name|blockingCommit
init|=
operator|new
name|Commit
argument_list|(
name|a
argument_list|,
operator|new
name|CommitHook
argument_list|()
block|{
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|NodeState
name|processCommit
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
try|try
block|{
name|callable
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
return|return
name|after
return|;
block|}
block|}
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
return|return
name|blockingCommit
return|;
block|}
block|}
end_class

end_unit

