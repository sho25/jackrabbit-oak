begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|blob
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBBlobStoreFriend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|RDBBlobStorePerformanceTest
extends|extends
name|RDBBlobStoreTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RDBBlobStorePerformanceTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|ENABLED
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|RDBBlobStorePerformanceTest
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|RDBBlobStorePerformanceTest
parameter_list|(
name|RDBBlobStoreFixture
name|bsf
parameter_list|)
block|{
name|super
argument_list|(
name|bsf
argument_list|)
expr_stmt|;
name|assumeTrue
argument_list|(
name|ENABLED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertSmallBlobs
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|size
init|=
literal|1500
decl_stmt|;
name|long
name|duration
init|=
literal|5000
decl_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|duration
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
name|int
name|errors
init|=
literal|0
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|end
condition|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|byte
index|[]
name|digest
init|=
name|super
operator|.
name|getDigest
argument_list|(
name|data
argument_list|)
decl_stmt|;
try|try
block|{
name|RDBBlobStoreFriend
operator|.
name|storeBlock
argument_list|(
name|super
operator|.
name|blobStore
argument_list|,
name|digest
argument_list|,
literal|0
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|cnt
operator|+=
literal|1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"insert failed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|errors
operator|+=
literal|1
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"inserted "
operator|+
name|cnt
operator|+
literal|" blocks of size "
operator|+
name|size
operator|+
literal|" into "
operator|+
name|super
operator|.
name|blobStoreName
operator|+
literal|" ("
operator|+
name|errors
operator|+
literal|" errors) in "
operator|+
name|duration
operator|+
literal|"ms ("
operator|+
operator|(
name|cnt
operator|*
literal|1000
operator|)
operator|/
name|duration
operator|+
literal|" blocks/s)"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

