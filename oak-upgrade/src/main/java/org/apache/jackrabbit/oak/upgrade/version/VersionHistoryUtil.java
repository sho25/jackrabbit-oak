begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|version
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|concat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SYSTEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_VERSIONSTORAGE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_class
specifier|public
class|class
name|VersionHistoryUtil
block|{
specifier|public
specifier|static
name|String
name|getVersionHistoryPath
parameter_list|(
name|String
name|versionableUuid
parameter_list|)
block|{
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|'/'
argument_list|)
operator|.
name|join
argument_list|(
name|concat
argument_list|(
name|singleton
argument_list|(
literal|""
argument_list|)
argument_list|,
name|getVersionHistoryPathSegments
argument_list|(
name|versionableUuid
argument_list|)
argument_list|,
name|singleton
argument_list|(
name|versionableUuid
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Constructs the version history path based on the versionable's UUID.      *      * @param root The root NodeState below which to look for the version.      * @param versionableUuid The String representation of the versionable's UUID.      * @return The NodeState corresponding to the version history, or {@code null}      *         if it does not exist.      */
specifier|static
name|NodeState
name|getVersionHistoryNodeState
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|String
name|versionableUuid
parameter_list|)
block|{
name|NodeState
name|historyParent
init|=
name|root
decl_stmt|;
for|for
control|(
name|String
name|segment
range|:
name|getVersionHistoryPathSegments
argument_list|(
name|versionableUuid
argument_list|)
control|)
block|{
name|historyParent
operator|=
name|historyParent
operator|.
name|getChildNode
argument_list|(
name|segment
argument_list|)
expr_stmt|;
block|}
return|return
name|historyParent
operator|.
name|getChildNode
argument_list|(
name|versionableUuid
argument_list|)
return|;
block|}
specifier|static
name|NodeBuilder
name|getVersionHistoryBuilder
parameter_list|(
name|NodeBuilder
name|root
parameter_list|,
name|String
name|versionableUuid
parameter_list|)
block|{
name|NodeBuilder
name|history
init|=
name|root
decl_stmt|;
for|for
control|(
name|String
name|segment
range|:
name|getVersionHistoryPathSegments
argument_list|(
name|versionableUuid
argument_list|)
control|)
block|{
name|history
operator|=
name|history
operator|.
name|getChildNode
argument_list|(
name|segment
argument_list|)
expr_stmt|;
block|}
return|return
name|history
operator|.
name|getChildNode
argument_list|(
name|versionableUuid
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getVersionHistoryPathSegments
parameter_list|(
name|String
name|versionableUuid
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|segments
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|segments
operator|.
name|add
argument_list|(
name|JCR_SYSTEM
argument_list|)
expr_stmt|;
name|segments
operator|.
name|add
argument_list|(
name|JCR_VERSIONSTORAGE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|segments
operator|.
name|add
argument_list|(
name|versionableUuid
operator|.
name|substring
argument_list|(
name|i
operator|*
literal|2
argument_list|,
name|i
operator|*
literal|2
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|segments
return|;
block|}
block|}
end_class

end_unit

