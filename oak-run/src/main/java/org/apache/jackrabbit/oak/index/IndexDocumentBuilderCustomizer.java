begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|DocumentBuilderCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|DocumentNodeStoreOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|ONE_GB
import|;
end_import

begin_class
class|class
name|IndexDocumentBuilderCustomizer
implements|implements
name|DocumentBuilderCustomizer
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PERSISTENT_CACHE_PROP
init|=
literal|"oak.documentMK.persCache"
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Options
name|opts
decl_stmt|;
specifier|private
specifier|final
name|DocumentNodeStoreOptions
name|docStoreOpts
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|readOnlyAccess
decl_stmt|;
name|IndexDocumentBuilderCustomizer
parameter_list|(
name|Options
name|opts
parameter_list|,
name|boolean
name|readOnlyAccess
parameter_list|)
block|{
name|this
operator|.
name|opts
operator|=
name|opts
expr_stmt|;
name|docStoreOpts
operator|=
name|opts
operator|.
name|getOptionBean
argument_list|(
name|DocumentNodeStoreOptions
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|readOnlyAccess
operator|=
name|readOnlyAccess
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|customize
parameter_list|(
name|DocumentMK
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|configurePersistentCache
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|configureCacheSize
argument_list|(
name|builder
argument_list|)
expr_stmt|;
if|if
condition|(
name|readOnlyAccess
condition|)
block|{
name|configureCacheForReadOnlyMode
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|configurePersistentCache
parameter_list|(
name|DocumentMK
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
name|PERSISTENT_CACHE_PROP
argument_list|)
operator|==
literal|null
condition|)
block|{
name|File
name|temp
init|=
name|opts
operator|.
name|getOptionBean
argument_list|(
name|IndexOptions
operator|.
name|class
argument_list|)
operator|.
name|getWorkDir
argument_list|()
decl_stmt|;
name|File
name|cache
init|=
operator|new
name|File
argument_list|(
name|temp
argument_list|,
literal|"cache"
argument_list|)
decl_stmt|;
name|String
name|cacheConfig
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s,size=4096,binary=0,-nodes,-children"
argument_list|,
name|cache
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setPersistentCache
argument_list|(
name|cacheConfig
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Persistent cache set to [{}]"
argument_list|,
name|cacheConfig
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|configureCacheForReadOnlyMode
parameter_list|(
name|DocumentMK
operator|.
name|Builder
name|builder
parameter_list|)
block|{
if|if
condition|(
operator|!
name|docStoreOpts
operator|.
name|isCacheDistributionDefined
argument_list|()
condition|)
block|{
name|builder
operator|.
name|memoryCacheDistribution
argument_list|(
literal|35
argument_list|,
literal|10
argument_list|,
literal|15
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|// usage of this DocumentNodeStore is single threaded. Reduce the
comment|// number of cache segments to a minimum. This allows for caching
comment|// bigger entries that would otherwise be evicted immediately
comment|//TODO Should not be done if later we implement multithreaded indexing
name|builder
operator|.
name|setCacheSegmentCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Configuring cache for single threaded access"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|configureCacheSize
parameter_list|(
name|DocumentMK
operator|.
name|Builder
name|builder
parameter_list|)
block|{
comment|//Set cache size to max 4GB or half of min memory
if|if
condition|(
name|docStoreOpts
operator|.
name|getCacheSize
argument_list|()
operator|==
literal|0
condition|)
block|{
name|long
name|maxMem
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|maxMemory
argument_list|()
decl_stmt|;
name|long
name|memToUse
init|=
name|Math
operator|.
name|min
argument_list|(
name|ONE_GB
operator|*
literal|4
argument_list|,
name|maxMem
operator|/
literal|2
argument_list|)
decl_stmt|;
name|builder
operator|.
name|memoryCacheSize
argument_list|(
name|memToUse
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Initializing cache size to {} ({})"
argument_list|,
name|memToUse
argument_list|,
name|IOUtils
operator|.
name|humanReadableByteCount
argument_list|(
name|memToUse
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

