begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|old
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * A cursor to navigate in a result list.  */
end_comment

begin_class
specifier|public
class|class
name|Cursor
implements|implements
name|Iterator
argument_list|<
name|String
argument_list|>
block|{
comment|// TODO a cursor should be based on a specific revision
specifier|private
name|BTreeLeaf
name|current
decl_stmt|;
specifier|private
name|int
name|pos
decl_stmt|;
specifier|private
name|String
name|currentValue
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|current
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|next
parameter_list|()
block|{
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
name|currentValue
operator|=
literal|null
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|key
init|=
name|current
operator|.
name|keys
index|[
name|pos
index|]
decl_stmt|;
name|currentValue
operator|=
name|current
operator|.
name|values
index|[
name|pos
index|]
expr_stmt|;
name|step
argument_list|()
expr_stmt|;
return|return
name|key
return|;
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|currentValue
return|;
block|}
name|void
name|step
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|pos
operator|++
expr_stmt|;
if|if
condition|(
name|pos
operator|<
name|current
operator|.
name|size
argument_list|()
condition|)
block|{
return|return;
block|}
name|pos
operator|=
literal|0
expr_stmt|;
name|current
operator|=
name|current
operator|.
name|nextLeaf
argument_list|()
expr_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
operator|||
name|pos
operator|<
name|current
operator|.
name|size
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
name|void
name|setCurrent
parameter_list|(
name|BTreeLeaf
name|current
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|this
operator|.
name|current
operator|=
name|current
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|pos
expr_stmt|;
block|}
comment|/**      * An iterator over a cursor.      */
specifier|public
specifier|static
class|class
name|RangeIterator
implements|implements
name|Iterator
argument_list|<
name|String
argument_list|>
block|{
specifier|private
specifier|final
name|Cursor
name|cursor
decl_stmt|;
specifier|private
specifier|final
name|String
name|maxKey
decl_stmt|;
specifier|private
name|String
name|value
decl_stmt|;
name|RangeIterator
parameter_list|(
name|Cursor
name|cursor
parameter_list|,
name|String
name|maxKey
parameter_list|)
block|{
name|this
operator|.
name|cursor
operator|=
name|cursor
expr_stmt|;
name|this
operator|.
name|maxKey
operator|=
name|maxKey
expr_stmt|;
name|step
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|step
parameter_list|()
block|{
name|value
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|cursor
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|k
init|=
name|cursor
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxKey
operator|==
literal|null
operator|||
name|k
operator|.
name|compareTo
argument_list|(
name|maxKey
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|value
operator|=
name|cursor
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|value
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|next
parameter_list|()
block|{
name|String
name|v
init|=
name|value
decl_stmt|;
name|step
argument_list|()
expr_stmt|;
return|return
name|v
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

