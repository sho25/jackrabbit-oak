begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|plan
package|;
end_package

begin_comment
comment|/**  * A class to iterate over all permutations of an array.  * The algorithm is from Applied Combinatorics, by Alan Tucker.  *  * @param<T> the element type  */
end_comment

begin_class
specifier|public
class|class
name|Permutations
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
specifier|final
name|T
index|[]
name|in
decl_stmt|;
specifier|private
specifier|final
name|T
index|[]
name|out
decl_stmt|;
specifier|private
specifier|final
name|int
name|n
decl_stmt|,
name|m
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|index
decl_stmt|;
specifier|private
name|boolean
name|hasNext
init|=
literal|true
decl_stmt|;
specifier|private
name|Permutations
parameter_list|(
name|T
index|[]
name|in
parameter_list|,
name|T
index|[]
name|out
parameter_list|,
name|int
name|m
parameter_list|)
block|{
name|this
operator|.
name|n
operator|=
name|in
operator|.
name|length
expr_stmt|;
name|this
operator|.
name|m
operator|=
name|m
expr_stmt|;
if|if
condition|(
name|n
operator|<
name|m
operator|||
name|m
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"n< m or m< 0"
argument_list|)
throw|;
block|}
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|index
operator|=
operator|new
name|int
index|[
name|n
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|index
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
comment|// The elements from m to n are always kept ascending right to left.
comment|// This keeps the dip in the interesting region.
name|reverseAfter
argument_list|(
name|m
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new permutations object.      *      * @param<T> the type      * @param in the source array      * @param out the target array      * @return the generated permutations object      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Permutations
argument_list|<
name|T
argument_list|>
name|create
parameter_list|(
name|T
index|[]
name|in
parameter_list|,
name|T
index|[]
name|out
parameter_list|)
block|{
return|return
operator|new
name|Permutations
argument_list|<
name|T
argument_list|>
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|in
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * Create a new permutations object.      *      * @param<T> the type      * @param in the source array      * @param out the target array      * @param m the number of output elements to generate      * @return the generated permutations object      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Permutations
argument_list|<
name|T
argument_list|>
name|create
parameter_list|(
name|T
index|[]
name|in
parameter_list|,
name|T
index|[]
name|out
parameter_list|,
name|int
name|m
parameter_list|)
block|{
return|return
operator|new
name|Permutations
argument_list|<
name|T
argument_list|>
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|m
argument_list|)
return|;
block|}
comment|/**      * Move the index forward a notch. The algorithm first finds the rightmost      * index that is less than its neighbor to the right. This is the dip point.      * The algorithm next finds the least element to the right of the dip that      * is greater than the dip. That element is switched with the dip. Finally,      * the list of elements to the right of the dip is reversed.      * For example, in a permutation of 5 items, the index may be {1, 2, 4, 3,      * 0}. The dip is 2 the rightmost element less than its neighbor on its      * right. The least element to the right of 2 that is greater than 2 is 3.      * These elements are swapped, yielding {1, 3, 4, 2, 0}, and the list right      * of the dip point is reversed, yielding {1, 3, 0, 2, 4}.      */
specifier|private
name|void
name|moveIndex
parameter_list|()
block|{
comment|// find the index of the first element that dips
name|int
name|i
init|=
name|rightmostDip
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
name|hasNext
operator|=
literal|false
expr_stmt|;
return|return;
block|}
comment|// find the least greater element to the right of the dip
name|int
name|leastToRightIndex
init|=
name|i
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|2
init|;
name|j
operator|<
name|n
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|index
index|[
name|j
index|]
operator|<
name|index
index|[
name|leastToRightIndex
index|]
operator|&&
name|index
index|[
name|j
index|]
operator|>
name|index
index|[
name|i
index|]
condition|)
block|{
name|leastToRightIndex
operator|=
name|j
expr_stmt|;
block|}
block|}
comment|// switch dip element with least greater element to its right
name|int
name|t
init|=
name|index
index|[
name|i
index|]
decl_stmt|;
name|index
index|[
name|i
index|]
operator|=
name|index
index|[
name|leastToRightIndex
index|]
expr_stmt|;
name|index
index|[
name|leastToRightIndex
index|]
operator|=
name|t
expr_stmt|;
if|if
condition|(
name|m
operator|-
literal|1
operator|>
name|i
condition|)
block|{
comment|// reverse the elements to the right of the dip
name|reverseAfter
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// reverse the elements to the right of m - 1
name|reverseAfter
argument_list|(
name|m
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get the index of the first element from the right that is less      * than its neighbor on the right.      *      * @return the index or -1 if non is found      */
specifier|private
name|int
name|rightmostDip
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
name|n
operator|-
literal|2
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|index
index|[
name|i
index|]
operator|<
name|index
index|[
name|i
operator|+
literal|1
index|]
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * Reverse the elements to the right of the specified index.      *      * @param i the index      */
specifier|private
name|void
name|reverseAfter
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|int
name|start
init|=
name|i
operator|+
literal|1
decl_stmt|;
name|int
name|end
init|=
name|n
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|start
operator|<
name|end
condition|)
block|{
name|int
name|t
init|=
name|index
index|[
name|start
index|]
decl_stmt|;
name|index
index|[
name|start
index|]
operator|=
name|index
index|[
name|end
index|]
expr_stmt|;
name|index
index|[
name|end
index|]
operator|=
name|t
expr_stmt|;
name|start
operator|++
expr_stmt|;
name|end
operator|--
expr_stmt|;
block|}
block|}
comment|/**      * Go to the next lineup, and if available, fill the target array.      *      * @return if a new lineup is available      */
specifier|public
name|boolean
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m
condition|;
name|i
operator|++
control|)
block|{
name|out
index|[
name|i
index|]
operator|=
name|in
index|[
name|index
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
name|moveIndex
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

