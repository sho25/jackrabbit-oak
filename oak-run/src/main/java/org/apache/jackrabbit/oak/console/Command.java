begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|console
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|script
operator|.
name|ScriptEngine
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|script
operator|.
name|ScriptEngineManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|AbstractNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StandardSystemProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_comment
comment|/**  * All available console commands.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|Command
implements|implements
name|Callable
argument_list|<
name|Object
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|SPACES
init|=
operator|new
name|char
index|[
literal|4
index|]
decl_stmt|;
static|static
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|SPACES
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|args
decl_stmt|;
specifier|protected
name|String
name|description
decl_stmt|;
specifier|protected
name|String
name|usage
decl_stmt|;
specifier|protected
name|ConsoleSession
name|session
decl_stmt|;
specifier|protected
name|InputStream
name|in
decl_stmt|;
specifier|protected
name|OutputStream
name|out
decl_stmt|;
annotation|@
name|Nonnull
specifier|public
specifier|static
name|List
argument_list|<
name|Command
argument_list|>
name|create
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Command
argument_list|>
name|commands
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|line
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
control|)
block|{
name|commands
operator|.
name|add
argument_list|(
name|parse
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|commands
return|;
block|}
annotation|@
name|Nonnull
specifier|private
specifier|static
name|Command
name|parse
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|line
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|line
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|c
argument_list|)
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|c
operator|=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
operator|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|NoOp
argument_list|()
return|;
block|}
name|Command
name|cmd
decl_stmt|;
try|try
block|{
name|cmd
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|Command
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"$"
operator|+
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|Command
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|cmd
operator|=
operator|new
name|Unknown
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cmd
operator|.
name|setArgs
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|i
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cmd
return|;
block|}
specifier|protected
specifier|final
name|void
name|setArgs
parameter_list|(
name|String
name|args
parameter_list|)
block|{
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|init
parameter_list|(
annotation|@
name|Nonnull
name|ConsoleSession
name|session
parameter_list|,
annotation|@
name|Nonnull
name|InputStream
name|in
parameter_list|,
annotation|@
name|Nonnull
name|OutputStream
name|out
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|execute
argument_list|()
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
specifier|abstract
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
function_decl|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
return|;
block|}
specifier|protected
name|void
name|println
parameter_list|(
name|Object
name|value
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|out
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"[null]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|println
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|println
parameter_list|(
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|write
argument_list|(
name|StandardSystemProperty
operator|.
name|LINE_SEPARATOR
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|Unknown
extends|extends
name|Command
block|{
specifier|private
specifier|final
name|String
name|cmd
decl_stmt|;
specifier|private
name|Unknown
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|this
operator|.
name|cmd
operator|=
name|cmd
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
name|println
argument_list|(
literal|"Unknown command: "
operator|+
name|cmd
operator|+
literal|" "
operator|+
name|args
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|NoOp
extends|extends
name|Command
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{         }
block|}
specifier|public
specifier|static
specifier|final
class|class
name|Help
extends|extends
name|Command
block|{
specifier|public
name|Help
parameter_list|()
block|{
name|this
operator|.
name|description
operator|=
literal|"List all available command."
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Command
argument_list|>
name|commands
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Command
argument_list|>
name|docCommands
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
decl_stmt|;
name|Class
index|[]
name|classes
init|=
name|Command
operator|.
name|class
operator|.
name|getDeclaredClasses
argument_list|()
decl_stmt|;
name|int
name|maxCmdLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Class
name|clazz
range|:
name|classes
control|)
block|{
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isPublic
argument_list|(
name|clazz
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|||
operator|!
name|Command
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Command
name|cmd
init|=
operator|(
name|Command
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|DocumentNodeStoreCommand
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|docCommands
operator|.
name|put
argument_list|(
name|cmd
operator|.
name|getName
argument_list|()
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commands
operator|.
name|put
argument_list|(
name|cmd
operator|.
name|getName
argument_list|()
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
block|}
name|maxCmdLength
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxCmdLength
argument_list|,
name|cmd
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|println
argument_list|(
literal|"Generic commands:"
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|printCommands
argument_list|(
name|commands
argument_list|,
name|maxCmdLength
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|println
argument_list|(
literal|"DocumentNodeStore specific commands:"
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|printCommands
argument_list|(
name|docCommands
argument_list|,
name|maxCmdLength
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|printCommands
parameter_list|(
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Command
argument_list|>
name|commands
parameter_list|,
name|int
name|maxCmdLength
parameter_list|,
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|c
range|:
name|commands
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Command
name|cmd
init|=
name|commands
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|SPACES
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|int
name|numSpaces
init|=
name|maxCmdLength
operator|-
name|c
operator|.
name|length
argument_list|()
operator|+
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSpaces
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|description
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|cmd
operator|.
name|description
argument_list|)
expr_stmt|;
block|}
name|println
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
specifier|final
class|class
name|Pwd
extends|extends
name|Command
block|{
specifier|public
name|Pwd
parameter_list|()
block|{
name|this
operator|.
name|description
operator|=
literal|"Print the full path of the current working node."
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
name|println
argument_list|(
name|session
operator|.
name|getWorkingPath
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
class|class
name|Exit
extends|extends
name|Command
block|{
specifier|public
name|Exit
parameter_list|()
block|{
name|this
operator|.
name|description
operator|=
literal|"Quit this console."
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
name|println
argument_list|(
literal|"Good bye."
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
class|class
name|Cd
extends|extends
name|Command
block|{
specifier|public
name|Cd
parameter_list|()
block|{
name|this
operator|.
name|description
operator|=
literal|"Change the current working directory to a specific node."
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isValid
argument_list|(
name|args
argument_list|)
condition|)
block|{
name|println
argument_list|(
literal|"Not a valid path: "
operator|+
name|args
argument_list|,
name|out
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|path
decl_stmt|;
if|if
condition|(
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|args
argument_list|)
condition|)
block|{
name|path
operator|=
name|args
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|session
operator|.
name|getWorkingPath
argument_list|()
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|elements
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|element
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
if|if
condition|(
name|PathUtils
operator|.
name|denotesParent
argument_list|(
name|element
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|elements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|elements
operator|.
name|remove
argument_list|(
name|elements
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|denotesCurrent
argument_list|(
name|element
argument_list|)
condition|)
block|{
name|elements
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
block|}
name|path
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
literal|"/"
argument_list|,
name|elements
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|elements
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|old
init|=
name|session
operator|.
name|setWorkingPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|session
operator|.
name|getWorkingNode
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|session
operator|.
name|setWorkingPath
argument_list|(
name|old
argument_list|)
expr_stmt|;
name|println
argument_list|(
literal|"No such node"
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
specifier|final
class|class
name|Ls
extends|extends
name|Command
block|{
specifier|public
name|Ls
parameter_list|()
block|{
name|this
operator|.
name|description
operator|=
literal|"List the names of the children of the current node."
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|name
range|:
name|session
operator|.
name|getWorkingNode
argument_list|()
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
name|println
argument_list|(
name|name
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
specifier|final
class|class
name|Pn
extends|extends
name|Command
block|{
specifier|public
name|Pn
parameter_list|()
block|{
name|this
operator|.
name|description
operator|=
literal|"Print the current node."
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
name|println
argument_list|(
name|AbstractNodeState
operator|.
name|toString
argument_list|(
name|session
operator|.
name|getWorkingNode
argument_list|()
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
class|class
name|Refresh
extends|extends
name|Command
block|{
specifier|public
name|Refresh
parameter_list|()
block|{
name|this
operator|.
name|description
operator|=
literal|"Control how the current session is refreshed."
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|.
name|contains
argument_list|(
literal|"auto"
argument_list|)
condition|)
block|{
name|session
operator|.
name|setAutoRefresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|println
argument_list|(
literal|"Enabled auto refresh"
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|contains
argument_list|(
literal|"manual"
argument_list|)
condition|)
block|{
name|session
operator|.
name|setAutoRefresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|println
argument_list|(
literal|"Disabled auto refresh"
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|session
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|println
argument_list|(
literal|"Session refreshed"
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|println
argument_list|(
literal|"Unrecognized arguments: "
operator|+
name|args
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
specifier|final
class|class
name|Checkpoint
extends|extends
name|Command
block|{
specifier|public
name|Checkpoint
parameter_list|()
block|{
name|this
operator|.
name|description
operator|=
literal|"Create a checkpoint."
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|time
init|=
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toSeconds
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|time
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|args
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|println
argument_list|(
literal|"Not a number: "
operator|+
name|args
argument_list|,
name|out
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Checkpoint created: "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|session
operator|.
name|checkpoint
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|" (expires: "
argument_list|)
expr_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
operator|(
name|int
operator|)
name|time
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|")."
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|msg
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
class|class
name|Retrieve
extends|extends
name|Command
block|{
specifier|public
name|Retrieve
parameter_list|()
block|{
name|this
operator|.
name|description
operator|=
literal|"Retrieve a snapshot of the given checkpoint"
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|session
operator|.
name|isAutoRefresh
argument_list|()
condition|)
block|{
name|session
operator|.
name|setAutoRefresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|println
argument_list|(
literal|"Auto refresh disabled."
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|retrieve
argument_list|(
name|args
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|println
argument_list|(
literal|"Root node is now at "
operator|+
name|args
operator|.
name|trim
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
class|class
name|Eval
extends|extends
name|Command
block|{
specifier|public
name|Eval
parameter_list|()
block|{
name|this
operator|.
name|description
operator|=
literal|"Evaluate a script."
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|langExtn
decl_stmt|;
name|Reader
name|scriptReader
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|int
name|indexOfSpace
init|=
name|args
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|langExtn
operator|=
name|args
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|indexOfSpace
argument_list|)
expr_stmt|;
name|scriptReader
operator|=
operator|new
name|StringReader
argument_list|(
name|args
operator|.
name|substring
argument_list|(
name|indexOfSpace
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|File
name|scriptFile
init|=
operator|new
name|File
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|scriptFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|println
argument_list|(
literal|"Script file not found: "
operator|+
name|args
argument_list|,
name|out
argument_list|)
expr_stmt|;
return|return;
block|}
name|langExtn
operator|=
name|FilenameUtils
operator|.
name|getExtension
argument_list|(
name|scriptFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|scriptReader
operator|=
operator|new
name|FileReader
argument_list|(
name|scriptFile
argument_list|)
expr_stmt|;
block|}
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|ScriptEngineManager
name|factory
init|=
operator|new
name|ScriptEngineManager
argument_list|()
decl_stmt|;
name|ScriptEngine
name|engine
init|=
name|factory
operator|.
name|getEngineByExtension
argument_list|(
name|langExtn
argument_list|)
decl_stmt|;
if|if
condition|(
name|engine
operator|==
literal|null
condition|)
block|{
name|println
argument_list|(
literal|"No script engine found for extension: "
operator|+
name|langExtn
argument_list|,
name|out
argument_list|)
expr_stmt|;
return|return;
block|}
name|engine
operator|.
name|put
argument_list|(
literal|"session"
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|engine
operator|.
name|put
argument_list|(
literal|"out"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|engine
operator|.
name|eval
argument_list|(
name|scriptReader
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
class|class
name|Exec
extends|extends
name|Command
block|{
specifier|public
name|Exec
parameter_list|()
block|{
name|this
operator|.
name|description
operator|=
literal|"Execute an operating system process."
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|Process
name|proc
init|=
operator|new
name|ProcessBuilder
argument_list|()
operator|.
name|command
argument_list|(
name|args
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|redirectErrorStream
argument_list|(
literal|true
argument_list|)
operator|.
name|start
argument_list|()
decl_stmt|;
name|IOPump
name|inPump
init|=
name|IOPump
operator|.
name|start
argument_list|(
name|in
argument_list|,
name|proc
operator|.
name|getOutputStream
argument_list|()
argument_list|)
decl_stmt|;
name|IOPump
name|outPump
init|=
name|IOPump
operator|.
name|start
argument_list|(
name|proc
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|proc
operator|.
name|waitFor
argument_list|()
expr_stmt|;
name|inPump
operator|.
name|join
argument_list|()
expr_stmt|;
name|outPump
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
comment|//-----------------------< DocumentNodeStore specific>---------------------
specifier|abstract
specifier|static
class|class
name|DocumentNodeStoreCommand
extends|extends
name|Command
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|session
operator|.
name|getStore
argument_list|()
operator|instanceof
name|DocumentNodeStore
condition|)
block|{
name|execute
argument_list|(
operator|(
name|DocumentNodeStore
operator|)
name|session
operator|.
name|getStore
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|println
argument_list|(
literal|"Can only execute command on a DocumentNodeStore"
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|abstract
name|void
name|execute
parameter_list|(
annotation|@
name|Nonnull
name|DocumentNodeStore
name|store
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|public
specifier|static
specifier|final
class|class
name|Pd
extends|extends
name|DocumentNodeStoreCommand
block|{
specifier|public
name|Pd
parameter_list|()
block|{
name|this
operator|.
name|description
operator|=
literal|"Print the current document."
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|execute
parameter_list|(
annotation|@
name|Nonnull
name|DocumentNodeStore
name|store
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|session
operator|.
name|getWorkingPath
argument_list|()
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|println
argument_list|(
literal|"[null]"
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|println
argument_list|(
name|doc
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|println
parameter_list|(
name|NodeDocument
name|doc
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|level
init|=
literal|1
decl_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|mapKeys
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|String
name|comma
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|doc
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|doc
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Map
condition|)
block|{
name|mapKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|writer
operator|.
name|write
argument_list|(
name|comma
argument_list|)
expr_stmt|;
name|comma
operator|=
literal|","
expr_stmt|;
name|println
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|printIndent
argument_list|(
name|level
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|printJson
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|key
range|:
name|mapKeys
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|comma
argument_list|)
expr_stmt|;
name|comma
operator|=
literal|","
expr_stmt|;
name|println
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|printIndent
argument_list|(
name|level
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|JSONObject
operator|.
name|escape
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|": {"
argument_list|)
expr_stmt|;
name|println
argument_list|(
operator|(
name|Map
operator|)
name|doc
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|level
operator|+
literal|1
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|printIndent
argument_list|(
name|level
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
name|println
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|println
parameter_list|(
name|Map
name|map
parameter_list|,
name|int
name|level
parameter_list|,
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|comma
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|obj
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|map
operator|.
name|get
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|comma
argument_list|)
expr_stmt|;
name|comma
operator|=
literal|","
expr_stmt|;
name|println
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|printIndent
argument_list|(
name|level
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|printJson
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|printJson
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|,
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|write
argument_list|(
name|JSONObject
operator|.
name|escape
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|jsonEscape
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|jsonEscape
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|String
name|escaped
init|=
name|JSONValue
operator|.
name|toJSONString
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|escaped
operator|.
name|replaceAll
argument_list|(
literal|"\\\\/"
argument_list|,
literal|"/"
argument_list|)
return|;
block|}
specifier|private
name|void
name|printIndent
parameter_list|(
name|int
name|level
parameter_list|,
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|level
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|SPACES
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
specifier|final
class|class
name|Lsd
extends|extends
name|DocumentNodeStoreCommand
block|{
specifier|public
name|Lsd
parameter_list|()
block|{
name|this
operator|.
name|description
operator|=
literal|"List the identifiers of the child documents at the current path."
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|execute
parameter_list|(
annotation|@
name|Nonnull
name|DocumentNodeStore
name|store
parameter_list|)
throws|throws
name|IOException
block|{
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|session
operator|.
name|getWorkingPath
argument_list|()
decl_stmt|;
name|String
name|fromKey
init|=
name|Utils
operator|.
name|getKeyLowerLimit
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|toKey
init|=
name|Utils
operator|.
name|getKeyUpperLimit
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|int
name|num
init|=
literal|0
decl_stmt|;
for|for
control|(
name|NodeDocument
name|doc
range|:
name|store
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|query
argument_list|(
name|NODES
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|doc
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|num
operator|++
expr_stmt|;
block|}
name|println
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"Found "
operator|+
name|num
operator|+
literal|" document"
argument_list|)
expr_stmt|;
if|if
condition|(
name|num
operator|!=
literal|1
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"s"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

