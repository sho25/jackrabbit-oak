begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentStoreException
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentStoreException
operator|.
name|Type
operator|.
name|GENERIC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentStoreException
operator|.
name|Type
operator|.
name|TRANSIENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|DocumentStoreExceptionTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|singleParamMessage
parameter_list|()
block|{
name|String
name|msg
init|=
literal|"foo"
decl_stmt|;
name|DocumentStoreException
name|dse
init|=
operator|new
name|DocumentStoreException
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|dse
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|dse
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GENERIC
argument_list|,
name|dse
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|singleParamMessageNull
parameter_list|()
block|{
name|DocumentStoreException
name|dse
init|=
operator|new
name|DocumentStoreException
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|dse
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|dse
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GENERIC
argument_list|,
name|dse
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|singleParamCause
parameter_list|()
block|{
name|String
name|msg
init|=
literal|"foo"
decl_stmt|;
name|Exception
name|cause
init|=
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|DocumentStoreException
name|dse
init|=
operator|new
name|DocumentStoreException
argument_list|(
name|cause
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|cause
argument_list|,
name|dse
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dse
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|IllegalArgumentException
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dse
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GENERIC
argument_list|,
name|dse
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|singleParamCauseNull
parameter_list|()
block|{
name|DocumentStoreException
name|dse
init|=
operator|new
name|DocumentStoreException
argument_list|(
operator|(
name|Throwable
operator|)
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|dse
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|dse
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GENERIC
argument_list|,
name|dse
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dualParamMessageCause
parameter_list|()
block|{
name|String
name|msg
init|=
literal|"foo"
decl_stmt|;
name|Exception
name|cause
init|=
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|DocumentStoreException
name|dse
init|=
operator|new
name|DocumentStoreException
argument_list|(
name|msg
argument_list|,
name|cause
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|cause
argument_list|,
name|dse
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|dse
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GENERIC
argument_list|,
name|dse
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dualParamMessageThrowableNull
parameter_list|()
block|{
name|String
name|msg
init|=
literal|"foo"
decl_stmt|;
name|DocumentStoreException
name|dse
init|=
operator|new
name|DocumentStoreException
argument_list|(
name|msg
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|dse
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|dse
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GENERIC
argument_list|,
name|dse
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|tripleParamMessageCauseType
parameter_list|()
block|{
name|String
name|msg
init|=
literal|"foo"
decl_stmt|;
name|Exception
name|cause
init|=
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|Type
name|type
init|=
name|TRANSIENT
decl_stmt|;
name|DocumentStoreException
name|dse
init|=
operator|new
name|DocumentStoreException
argument_list|(
name|msg
argument_list|,
name|cause
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|dse
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|cause
argument_list|,
name|dse
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|type
argument_list|,
name|dse
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|convertDocumentStoreException
parameter_list|()
block|{
name|Exception
name|cause
init|=
operator|new
name|DocumentStoreException
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|DocumentStoreException
name|dse
init|=
name|DocumentStoreException
operator|.
name|convert
argument_list|(
name|cause
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|cause
argument_list|,
name|dse
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|convertIOException
parameter_list|()
block|{
name|String
name|msg
init|=
literal|"foo"
decl_stmt|;
name|Exception
name|cause
init|=
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|DocumentStoreException
name|dse
init|=
name|DocumentStoreException
operator|.
name|convert
argument_list|(
name|cause
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|dse
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|cause
argument_list|,
name|dse
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GENERIC
argument_list|,
name|dse
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|convertIOExceptionWithMessage
parameter_list|()
block|{
name|String
name|msg
init|=
literal|"foo"
decl_stmt|;
name|Exception
name|cause
init|=
operator|new
name|IOException
argument_list|()
decl_stmt|;
name|DocumentStoreException
name|dse
init|=
name|DocumentStoreException
operator|.
name|convert
argument_list|(
name|cause
argument_list|,
name|msg
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|dse
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|cause
argument_list|,
name|dse
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GENERIC
argument_list|,
name|dse
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|convertIOExceptionWithIDs
parameter_list|()
block|{
name|String
name|msg
init|=
literal|"foo"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|,
literal|"three"
argument_list|)
decl_stmt|;
name|Exception
name|cause
init|=
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|DocumentStoreException
name|dse
init|=
name|DocumentStoreException
operator|.
name|convert
argument_list|(
name|cause
argument_list|,
name|ids
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dse
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|assertTrue
argument_list|(
name|dse
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertSame
argument_list|(
name|cause
argument_list|,
name|dse
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GENERIC
argument_list|,
name|dse
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|asDocumentStoreException
parameter_list|()
block|{
name|String
name|msg
init|=
literal|"foo"
decl_stmt|;
name|Exception
name|cause
init|=
operator|new
name|IOException
argument_list|()
decl_stmt|;
name|Type
name|type
init|=
name|TRANSIENT
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|,
literal|"three"
argument_list|)
decl_stmt|;
name|DocumentStoreException
name|dse
init|=
name|DocumentStoreException
operator|.
name|asDocumentStoreException
argument_list|(
name|msg
argument_list|,
name|cause
argument_list|,
name|type
argument_list|,
name|ids
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dse
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|assertTrue
argument_list|(
name|dse
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertSame
argument_list|(
name|cause
argument_list|,
name|dse
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|type
argument_list|,
name|dse
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

