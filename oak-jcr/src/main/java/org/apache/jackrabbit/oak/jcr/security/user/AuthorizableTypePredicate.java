begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|predicate
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * AuthorizableTypePredicate...  */
end_comment

begin_class
class|class
name|AuthorizableTypePredicate
implements|implements
name|Predicate
block|{
comment|/**      * logger instance      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AuthorizableTypePredicate
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|authorizableType
decl_stmt|;
name|AuthorizableTypePredicate
parameter_list|(
name|int
name|authorizableType
parameter_list|)
block|{
name|this
operator|.
name|authorizableType
operator|=
name|authorizableType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Authorizable
condition|)
block|{
name|Authorizable
name|a
init|=
operator|(
name|Authorizable
operator|)
name|object
decl_stmt|;
switch|switch
condition|(
name|authorizableType
condition|)
block|{
case|case
name|UserManager
operator|.
name|SEARCH_TYPE_AUTHORIZABLE
case|:
return|return
literal|true
return|;
case|case
name|UserManager
operator|.
name|SEARCH_TYPE_GROUP
case|:
return|return
name|a
operator|.
name|isGroup
argument_list|()
return|;
case|case
name|UserManager
operator|.
name|SEARCH_TYPE_USER
case|:
return|return
operator|!
name|a
operator|.
name|isGroup
argument_list|()
return|;
default|default:
name|log
operator|.
name|warn
argument_list|(
literal|"Illegal authorizable type "
operator|+
name|authorizableType
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

