begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_class
specifier|public
class|class
name|MountPermissionProviderTest
extends|extends
name|AbstractSecurityTest
implements|implements
name|AccessControlConstants
implements|,
name|PrivilegeConstants
implements|,
name|PermissionConstants
block|{
specifier|private
name|MountInfoProvider
name|mountInfoProvider
decl_stmt|;
specifier|private
name|String
name|testNode
init|=
literal|"MultiplexingProviderTest"
decl_stmt|;
specifier|private
name|String
name|testPath
init|=
literal|"/"
operator|+
name|testNode
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|mountInfoProvider
operator|=
name|Mounts
operator|.
name|newBuilder
argument_list|()
operator|.
name|mount
argument_list|(
literal|"testMount"
argument_list|,
name|testPath
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|exists
argument_list|()
condition|)
block|{
name|test
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|ConfigurationParameters
name|getSecurityConfigParameters
parameter_list|()
block|{
name|ConfigurationParameters
name|authConfig
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|AccessControlConstants
operator|.
name|PARAM_MOUNT_PROVIDER
argument_list|,
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|mountInfoProvider
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|AuthorizationConfiguration
operator|.
name|NAME
argument_list|,
name|authConfig
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multiplexingProvider
parameter_list|()
throws|throws
name|Exception
block|{
comment|// check init
name|Tree
name|permStore
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PERMISSIONS_STORE_PATH
argument_list|)
decl_stmt|;
name|String
name|wsName
init|=
name|adminSession
operator|.
name|getWorkspaceName
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|permStore
operator|.
name|hasChild
argument_list|(
name|wsName
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Mount
name|m
range|:
name|mountInfoProvider
operator|.
name|getNonDefaultMounts
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|permStore
operator|.
name|hasChild
argument_list|(
name|MountPermissionProvider
operator|.
name|getPermissionRootName
argument_list|(
name|m
argument_list|,
name|wsName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Tree
name|rootNode
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|rootNode
argument_list|,
name|testNode
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|Tree
name|content
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|test
argument_list|,
literal|"content"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Principal
name|p
init|=
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|setPrivileges
argument_list|(
name|p
argument_list|,
name|test
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|,
name|JCR_READ
argument_list|)
expr_stmt|;
name|setPrivileges
argument_list|(
name|p
argument_list|,
name|content
operator|.
name|getPath
argument_list|()
argument_list|,
literal|false
argument_list|,
name|JCR_READ
argument_list|)
expr_stmt|;
name|permStore
operator|=
name|root
operator|.
name|getTree
argument_list|(
name|PERMISSIONS_STORE_PATH
argument_list|)
expr_stmt|;
comment|// no entries in the default store
name|assertFalse
argument_list|(
name|permStore
operator|.
name|getChild
argument_list|(
name|wsName
argument_list|)
operator|.
name|hasChild
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Mount
name|m
range|:
name|mountInfoProvider
operator|.
name|getNonDefaultMounts
argument_list|()
control|)
block|{
name|Tree
name|mps
init|=
name|permStore
operator|.
name|getChild
argument_list|(
name|MountPermissionProvider
operator|.
name|getPermissionRootName
argument_list|(
name|m
argument_list|,
name|wsName
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|mps
operator|.
name|hasChild
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ContentSession
name|testSession
init|=
name|createTestSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Root
name|r
init|=
name|testSession
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|getTree
argument_list|(
name|test
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|getTree
argument_list|(
name|content
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|testSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|multiplexingProviderOpen
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|rootNode
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|rootNode
argument_list|,
name|testNode
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|Tree
name|content
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|test
argument_list|,
literal|"content"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Principal
name|p
init|=
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|setPrivileges
argument_list|(
name|p
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
name|JCR_READ
argument_list|)
expr_stmt|;
name|setPrivileges
argument_list|(
name|p
argument_list|,
name|test
operator|.
name|getPath
argument_list|()
argument_list|,
literal|false
argument_list|,
name|JCR_READ
argument_list|)
expr_stmt|;
name|setPrivileges
argument_list|(
name|p
argument_list|,
name|content
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|,
name|JCR_READ
argument_list|)
expr_stmt|;
name|ContentSession
name|testSession
init|=
name|createTestSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Root
name|r
init|=
name|testSession
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|test
operator|.
name|getPath
argument_list|()
argument_list|,
name|r
operator|.
name|getTree
argument_list|(
name|test
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|getTree
argument_list|(
name|content
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|testSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPermissionProviderName
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"oak.default"
argument_list|,
name|MountPermissionProvider
operator|.
name|getPermissionRootName
argument_list|(
name|mountInfoProvider
operator|.
name|getDefaultMount
argument_list|()
argument_list|,
literal|"oak.default"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"oak:mount-testMount-oak.default"
argument_list|,
name|MountPermissionProvider
operator|.
name|getPermissionRootName
argument_list|(
name|mountInfoProvider
operator|.
name|getMountByName
argument_list|(
literal|"testMount"
argument_list|)
argument_list|,
literal|"oak.default"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setPrivileges
parameter_list|(
name|Principal
name|principal
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|allow
parameter_list|,
name|String
modifier|...
name|privileges
parameter_list|)
throws|throws
name|Exception
block|{
name|AccessControlManager
name|acm
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acm
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|principal
argument_list|,
name|privilegesFromNames
argument_list|(
name|privileges
argument_list|)
argument_list|,
name|allow
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setPolicy
argument_list|(
name|path
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

