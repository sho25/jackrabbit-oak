begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * {@code NodeDelegate} serve as internal representations of {@code Node}s.  * The methods of this class do not throw checked exceptions. Instead clients  * are expected to inspect the return value and ensure that all preconditions  * hold before a method is invoked. Specifically the behaviour of all methods  * of this class but {@link #isStale()} is undefined if the instance is stale.  * An item is stale if the underlying items does not exist anymore.  */
end_comment

begin_class
specifier|public
class|class
name|NodeDelegate
extends|extends
name|ItemDelegate
block|{
specifier|private
specifier|final
name|SessionDelegate
name|sessionDelegate
decl_stmt|;
specifier|private
name|Tree
name|tree
decl_stmt|;
name|NodeDelegate
parameter_list|(
name|SessionDelegate
name|sessionDelegate
parameter_list|,
name|Tree
name|tree
parameter_list|)
block|{
name|this
operator|.
name|sessionDelegate
operator|=
name|sessionDelegate
expr_stmt|;
name|this
operator|.
name|tree
operator|=
name|tree
expr_stmt|;
block|}
comment|/**      * Get the name of this node      * @return oak name of the node      */
annotation|@
name|Override
name|String
name|getName
parameter_list|()
block|{
return|return
name|getTree
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**      * Get the path of this node      * @return oak path of the node      */
annotation|@
name|Override
name|String
name|getPath
parameter_list|()
block|{
return|return
literal|'/'
operator|+
name|getTree
argument_list|()
operator|.
name|getPath
argument_list|()
return|;
block|}
comment|/**      * Get the parent of this node      * @return  parent of this node or {@code null} it this is the root      */
annotation|@
name|Override
name|NodeDelegate
name|getParent
parameter_list|()
block|{
name|Tree
name|parent
init|=
name|getParentTree
argument_list|()
decl_stmt|;
return|return
name|parent
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|NodeDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|parent
argument_list|)
return|;
block|}
comment|/**      * Determine whether this node is stale      * @return  {@code true} iff stale      */
annotation|@
name|Override
name|boolean
name|isStale
parameter_list|()
block|{
return|return
name|getTree
argument_list|()
operator|==
literal|null
return|;
block|}
comment|/**      * Get the status of this node      * @return  {@link Status} of this node      */
annotation|@
name|Override
name|Status
name|getStatus
parameter_list|()
block|{
name|Tree
name|parent
init|=
name|getParentTree
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
name|Status
operator|.
name|EXISTING
return|;
comment|// FIXME: return correct status for root
block|}
else|else
block|{
return|return
name|parent
operator|.
name|getChildStatus
argument_list|(
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * Get the session which with this node is associated      * @return  {@link SessionDelegate} to which this node belongs      */
annotation|@
name|Override
name|SessionDelegate
name|getSessionDelegate
parameter_list|()
block|{
return|return
name|sessionDelegate
return|;
block|}
comment|/**      * Determine whether this is the root node      * @return  {@code true} iff this is the root node      */
name|boolean
name|isRoot
parameter_list|()
block|{
return|return
name|getParentTree
argument_list|()
operator|==
literal|null
return|;
block|}
comment|/**      * Get the number of properties of this node      * @return  number of properties of this node      */
name|long
name|getPropertyCount
parameter_list|()
block|{
return|return
name|getTree
argument_list|()
operator|.
name|getPropertyCount
argument_list|()
return|;
block|}
comment|/**      * Get a property      * @param relPath  oak path      * @return  property at the path given by {@code relPath} or {@code null} if      * no such property exists      */
name|PropertyDelegate
name|getProperty
parameter_list|(
name|String
name|relPath
parameter_list|)
block|{
name|Tree
name|parent
init|=
name|getTree
argument_list|(
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|relPath
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|name
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|relPath
argument_list|)
decl_stmt|;
name|PropertyState
name|propertyState
init|=
name|parent
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|propertyState
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|PropertyDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|parent
argument_list|,
name|propertyState
argument_list|)
return|;
block|}
comment|/**      * Get the properties of this node      * @return  properties of this node      */
name|Iterator
argument_list|<
name|PropertyDelegate
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|propertyDelegateIterator
argument_list|(
name|getTree
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Get the number of child nodes      * @return  number of child nodes of this node      */
name|long
name|getChildCount
parameter_list|()
block|{
return|return
name|getTree
argument_list|()
operator|.
name|getChildrenCount
argument_list|()
return|;
block|}
comment|/**      * Get child node      * @param relPath  oak path      * @return  node at the path given by {@code relPath} or {@code null} if      * no such node exists      */
name|NodeDelegate
name|getChild
parameter_list|(
name|String
name|relPath
parameter_list|)
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|(
name|relPath
argument_list|)
decl_stmt|;
return|return
name|tree
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|NodeDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|tree
argument_list|)
return|;
block|}
comment|/**      * Get child nodes      * @return  child nodes of this node      */
name|Iterator
argument_list|<
name|NodeDelegate
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|nodeDelegateIterator
argument_list|(
name|getTree
argument_list|()
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Set a property      * @param name  oak name      * @param value      * @return  the set property      */
name|PropertyDelegate
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|CoreValue
name|value
parameter_list|)
block|{
name|PropertyState
name|propertyState
init|=
name|getTree
argument_list|()
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
decl_stmt|;
return|return
operator|new
name|PropertyDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|getTree
argument_list|()
argument_list|,
name|propertyState
argument_list|)
return|;
block|}
comment|/**      * Set a multi valued property      * @param name  oak name      * @param value      * @return  the set property      */
name|PropertyDelegate
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|CoreValue
argument_list|>
name|value
parameter_list|)
block|{
name|PropertyState
name|propertyState
init|=
name|getTree
argument_list|()
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
decl_stmt|;
return|return
operator|new
name|PropertyDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|getTree
argument_list|()
argument_list|,
name|propertyState
argument_list|)
return|;
block|}
comment|/**      * Add a child node      * @param name  oak name      * @return  the added node or {@code null} if such a node already exists      */
name|NodeDelegate
name|addChild
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|()
decl_stmt|;
return|return
name|tree
operator|.
name|hasChild
argument_list|(
name|name
argument_list|)
condition|?
literal|null
else|:
operator|new
name|NodeDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|tree
operator|.
name|addChild
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Remove this node      */
name|void
name|remove
parameter_list|()
block|{
name|getParentTree
argument_list|()
operator|.
name|removeChild
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// -----------------------------------------------------------< private>---
specifier|private
name|Tree
name|getTree
parameter_list|(
name|String
name|relPath
parameter_list|)
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|relPath
argument_list|)
control|)
block|{
if|if
condition|(
name|tree
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|tree
operator|=
name|tree
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|tree
return|;
block|}
specifier|private
name|Tree
name|getParentTree
parameter_list|()
block|{
return|return
name|getTree
argument_list|()
operator|.
name|getParent
argument_list|()
return|;
block|}
specifier|private
specifier|synchronized
name|Tree
name|getTree
parameter_list|()
block|{
return|return
name|tree
operator|=
name|sessionDelegate
operator|.
name|getTree
argument_list|(
name|tree
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Iterator
argument_list|<
name|NodeDelegate
argument_list|>
name|nodeDelegateIterator
parameter_list|(
name|Iterator
argument_list|<
name|Tree
argument_list|>
name|childNodeStates
parameter_list|)
block|{
return|return
name|Iterators
operator|.
name|map
argument_list|(
name|childNodeStates
argument_list|,
operator|new
name|Function1
argument_list|<
name|Tree
argument_list|,
name|NodeDelegate
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NodeDelegate
name|apply
parameter_list|(
name|Tree
name|state
parameter_list|)
block|{
return|return
operator|new
name|NodeDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|state
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|Iterator
argument_list|<
name|PropertyDelegate
argument_list|>
name|propertyDelegateIterator
parameter_list|(
name|Iterator
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|properties
parameter_list|)
block|{
return|return
name|Iterators
operator|.
name|map
argument_list|(
name|properties
argument_list|,
operator|new
name|Function1
argument_list|<
name|PropertyState
argument_list|,
name|PropertyDelegate
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PropertyDelegate
name|apply
parameter_list|(
name|PropertyState
name|propertyState
parameter_list|)
block|{
return|return
operator|new
name|PropertyDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|tree
argument_list|,
name|propertyState
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

