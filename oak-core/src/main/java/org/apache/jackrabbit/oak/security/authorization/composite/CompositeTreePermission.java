begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|composite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|impl
operator|.
name|ImmutableTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|AggregatedPermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * {@code TreePermission} implementation that combines multiple {@code TreePermission}  * implementations.  */
end_comment

begin_class
specifier|final
class|class
name|CompositeTreePermission
implements|implements
name|TreePermission
block|{
specifier|private
specifier|final
name|ImmutableTree
name|tree
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|AggregatedPermissionProvider
argument_list|,
name|TreePermission
argument_list|>
name|map
decl_stmt|;
specifier|private
name|Boolean
name|canRead
decl_stmt|;
name|CompositeTreePermission
parameter_list|(
annotation|@
name|Nonnull
name|Iterable
argument_list|<
name|AggregatedPermissionProvider
argument_list|>
name|providers
parameter_list|)
block|{
name|tree
operator|=
literal|null
expr_stmt|;
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|AggregatedPermissionProvider
argument_list|,
name|TreePermission
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|AggregatedPermissionProvider
name|app
range|:
name|providers
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|app
argument_list|,
name|TreePermission
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
name|map
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|CompositeTreePermission
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|ImmutableTree
name|tree
parameter_list|,
annotation|@
name|Nonnull
name|CompositeTreePermission
name|parentPermission
parameter_list|)
block|{
name|this
operator|.
name|tree
operator|=
name|tree
expr_stmt|;
name|TreePermission
name|parent
decl_stmt|;
name|AggregatedPermissionProvider
name|provider
decl_stmt|;
name|int
name|size
init|=
name|parentPermission
operator|.
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|size
condition|)
block|{
case|case
literal|0
case|:
name|map
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|provider
operator|=
name|parentPermission
operator|.
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|parent
operator|=
name|getParentPermission
argument_list|(
name|parentPermission
argument_list|,
name|provider
argument_list|)
expr_stmt|;
if|if
condition|(
name|NO_RECOURSE
operator|!=
name|parent
condition|)
block|{
name|map
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|provider
argument_list|,
name|provider
operator|.
name|getTreePermission
argument_list|(
name|tree
argument_list|,
name|parent
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
name|map
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|AggregatedPermissionProvider
argument_list|,
name|TreePermission
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|AggregatedPermissionProvider
name|app
range|:
name|parentPermission
operator|.
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
name|parent
operator|=
name|getParentPermission
argument_list|(
name|parentPermission
argument_list|,
name|app
argument_list|)
expr_stmt|;
if|if
condition|(
name|NO_RECOURSE
operator|!=
name|parent
condition|)
block|{
name|TreePermission
name|tp
init|=
name|app
operator|.
name|getTreePermission
argument_list|(
name|tree
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|app
argument_list|,
name|tp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//-----------------------------------------------------< TreePermission>---
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|TreePermission
name|getChildPermission
parameter_list|(
annotation|@
name|Nonnull
name|String
name|childName
parameter_list|,
annotation|@
name|Nonnull
name|NodeState
name|childState
parameter_list|)
block|{
if|if
condition|(
name|tree
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
name|ImmutableTree
name|childTree
init|=
operator|new
name|ImmutableTree
argument_list|(
name|tree
argument_list|,
name|childName
argument_list|,
name|childState
argument_list|)
decl_stmt|;
return|return
operator|new
name|CompositeTreePermission
argument_list|(
name|childTree
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRead
parameter_list|()
block|{
if|if
condition|(
name|canRead
operator|==
literal|null
condition|)
block|{
name|canRead
operator|=
name|grantsRead
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|canRead
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRead
parameter_list|(
annotation|@
name|Nonnull
name|PropertyState
name|property
parameter_list|)
block|{
return|return
name|grantsRead
argument_list|(
name|property
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canReadAll
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canReadProperties
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
name|long
name|permissions
parameter_list|)
block|{
return|return
name|grantsPermission
argument_list|(
name|permissions
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
name|long
name|permissions
parameter_list|,
annotation|@
name|Nonnull
name|PropertyState
name|property
parameter_list|)
block|{
return|return
name|grantsPermission
argument_list|(
name|permissions
argument_list|,
name|property
argument_list|)
return|;
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
name|boolean
name|grantsPermission
parameter_list|(
name|long
name|permissions
parameter_list|,
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|)
block|{
name|boolean
name|isGranted
init|=
literal|false
decl_stmt|;
name|long
name|coveredPermissions
init|=
name|Permissions
operator|.
name|NO_PERMISSION
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|AggregatedPermissionProvider
argument_list|,
name|TreePermission
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TreePermission
name|tp
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|supported
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|supportedPermissions
argument_list|(
name|tp
argument_list|,
name|property
argument_list|,
name|permissions
argument_list|)
decl_stmt|;
if|if
condition|(
name|doEvaluate
argument_list|(
name|supported
argument_list|)
condition|)
block|{
name|isGranted
operator|=
operator|(
name|property
operator|==
literal|null
operator|)
condition|?
name|tp
operator|.
name|isGranted
argument_list|(
name|supported
argument_list|)
else|:
name|tp
operator|.
name|isGranted
argument_list|(
name|supported
argument_list|,
name|property
argument_list|)
expr_stmt|;
name|coveredPermissions
operator||=
name|supported
expr_stmt|;
if|if
condition|(
operator|!
name|isGranted
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
name|isGranted
operator|&&
name|coveredPermissions
operator|==
name|permissions
return|;
block|}
specifier|private
name|boolean
name|grantsRead
parameter_list|(
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|)
block|{
name|boolean
name|readable
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|AggregatedPermissionProvider
argument_list|,
name|TreePermission
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TreePermission
name|tp
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|supported
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|supportedPermissions
argument_list|(
name|tp
argument_list|,
name|property
argument_list|,
operator|(
name|property
operator|==
literal|null
operator|)
condition|?
name|Permissions
operator|.
name|READ_NODE
else|:
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|doEvaluate
argument_list|(
name|supported
argument_list|)
condition|)
block|{
name|readable
operator|=
operator|(
name|property
operator|==
literal|null
operator|)
condition|?
name|tp
operator|.
name|canRead
argument_list|()
else|:
name|tp
operator|.
name|canRead
argument_list|(
name|property
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|readable
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|readable
return|;
block|}
specifier|private
specifier|static
name|boolean
name|doEvaluate
parameter_list|(
name|long
name|supportedPermissions
parameter_list|)
block|{
return|return
name|CompositePermissionProvider
operator|.
name|doEvaluate
argument_list|(
name|supportedPermissions
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|private
specifier|static
name|TreePermission
name|getParentPermission
parameter_list|(
annotation|@
name|Nonnull
name|CompositeTreePermission
name|compositeParent
parameter_list|,
annotation|@
name|Nonnull
name|AggregatedPermissionProvider
name|provider
parameter_list|)
block|{
name|TreePermission
name|parent
init|=
name|compositeParent
operator|.
name|map
operator|.
name|get
argument_list|(
name|provider
argument_list|)
decl_stmt|;
return|return
operator|(
name|parent
operator|==
literal|null
operator|)
condition|?
name|TreePermission
operator|.
name|EMPTY
else|:
name|parent
return|;
block|}
block|}
end_class

end_unit

