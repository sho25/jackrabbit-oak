begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|text
operator|.
name|DateFormat
operator|.
name|getDateTimeInstance
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|humanReadableByteCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|JournalReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|ReadOnlyFileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|LocalJournalFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|TarPersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tooling
operator|.
name|ConsistencyChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tooling
operator|.
name|ConsistencyChecker
operator|.
name|ConsistencyCheckResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tooling
operator|.
name|ConsistencyChecker
operator|.
name|Revision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|monitor
operator|.
name|IOMonitorAdapter
import|;
end_import

begin_comment
comment|/**  * Perform a consistency check on an existing segment store.  */
end_comment

begin_class
specifier|public
class|class
name|Check
block|{
comment|/**      * Create a builder for the {@link Check} command.      *      * @return an instance of {@link Builder}.      */
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|/**      * Collect options for the {@link Check} command.      */
specifier|public
specifier|static
class|class
name|Builder
block|{
specifier|private
name|File
name|path
decl_stmt|;
specifier|private
name|boolean
name|mmap
decl_stmt|;
specifier|private
name|File
name|journal
decl_stmt|;
specifier|private
name|long
name|debugInterval
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
name|boolean
name|checkBinaries
decl_stmt|;
specifier|private
name|boolean
name|checkHead
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|checkpoints
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|filterPaths
decl_stmt|;
specifier|private
name|boolean
name|ioStatistics
decl_stmt|;
specifier|private
name|PrintWriter
name|outWriter
decl_stmt|;
specifier|private
name|PrintWriter
name|errWriter
decl_stmt|;
specifier|private
name|Builder
parameter_list|()
block|{
comment|// Prevent external instantiation.
block|}
comment|/**          * The path to an existing segment store. This parameter is required.          *          * @param path the path to an existing segment store.          * @return this builder.          */
specifier|public
name|Builder
name|withPath
parameter_list|(
name|File
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use memory mapped access or file access.          *          * @param mmap {@code true} for memory mapped access, {@code false} for          *             file access {@code null} to determine the access mode          *             from the system architecture: memory mapped on 64 bit          *             systems, file access on  32 bit systems.          * @return this builder.          */
specifier|public
name|Builder
name|withMmap
parameter_list|(
name|boolean
name|mmap
parameter_list|)
block|{
name|this
operator|.
name|mmap
operator|=
name|mmap
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The path to the journal of the segment store. This parameter is          * optional. If not provided, the journal in the default location is          * used.          *          * @param journal the path to the journal of the segment store.          * @return this builder.          */
specifier|public
name|Builder
name|withJournal
parameter_list|(
name|File
name|journal
parameter_list|)
block|{
name|this
operator|.
name|journal
operator|=
name|checkNotNull
argument_list|(
name|journal
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of seconds between successive debug print statements. This          * parameter is not required and defaults to an arbitrary large number.          *          * @param debugInterval number of seconds between successive debug print          *                      statements. It must be positive.          * @return this builder.          */
specifier|public
name|Builder
name|withDebugInterval
parameter_list|(
name|long
name|debugInterval
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|debugInterval
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|debugInterval
operator|=
name|debugInterval
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Instruct the command to scan the full content of binary properties.          * This parameter is not required and defaults to {@code false}.          *          * @param checkBinaries {@code true} if binary properties should be          *                      scanned, {@code false} otherwise.          * @return this builder.          */
specifier|public
name|Builder
name|withCheckBinaries
parameter_list|(
name|boolean
name|checkBinaries
parameter_list|)
block|{
name|this
operator|.
name|checkBinaries
operator|=
name|checkBinaries
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Instruct the command to check head state.          * This parameter is not required and defaults to {@code true}.          * @param checkHead if {@code true}, will check the head state.          * @return this builder.          */
specifier|public
name|Builder
name|withCheckHead
parameter_list|(
name|boolean
name|checkHead
parameter_list|)
block|{
name|this
operator|.
name|checkHead
operator|=
name|checkHead
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Instruct the command to check specified checkpoints.          * This parameter is not required and defaults to "/checkpoints",          * i.e. will check all checkpoints when not explicitly overridden.          *          * @param checkpoints   checkpoints to be checked          * @return this builder.          */
specifier|public
name|Builder
name|withCheckpoints
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|checkpoints
parameter_list|)
block|{
name|this
operator|.
name|checkpoints
operator|=
name|checkpoints
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Content paths to be checked. This parameter is not required and          * defaults to "/".          *          * @param filterPaths          *            paths to be checked          * @return this builder.          */
specifier|public
name|Builder
name|withFilterPaths
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|filterPaths
parameter_list|)
block|{
name|this
operator|.
name|filterPaths
operator|=
name|filterPaths
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Instruct the command to print statistics about I/O operations          * performed during the check. This parameter is not required and          * defaults to {@code false}.          *          * @param ioStatistics {@code true} if I/O statistics should be          *                     provided, {@code false} otherwise.          * @return this builder.          */
specifier|public
name|Builder
name|withIOStatistics
parameter_list|(
name|boolean
name|ioStatistics
parameter_list|)
block|{
name|this
operator|.
name|ioStatistics
operator|=
name|ioStatistics
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The text output stream writer used to print normal output.          * @param outWriter the output writer.          * @return this builder.          */
specifier|public
name|Builder
name|withOutWriter
parameter_list|(
name|PrintWriter
name|outWriter
parameter_list|)
block|{
name|this
operator|.
name|outWriter
operator|=
name|outWriter
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The text error stream writer used to print erroneous output.          * @param errWriter the error writer.          * @return this builder.          */
specifier|public
name|Builder
name|withErrWriter
parameter_list|(
name|PrintWriter
name|errWriter
parameter_list|)
block|{
name|this
operator|.
name|errWriter
operator|=
name|errWriter
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Create an executable version of the {@link Check} command.          *          * @return an instance of {@link Runnable}.          */
specifier|public
name|Check
name|build
parameter_list|()
block|{
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
operator|new
name|Check
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|StatisticsIOMonitor
extends|extends
name|IOMonitorAdapter
block|{
name|AtomicLong
name|ops
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicLong
name|bytes
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicLong
name|time
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|afterSegmentRead
parameter_list|(
name|File
name|file
parameter_list|,
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|,
name|int
name|length
parameter_list|,
name|long
name|elapsed
parameter_list|)
block|{
name|ops
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|bytes
operator|.
name|addAndGet
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|time
operator|.
name|addAndGet
argument_list|(
name|elapsed
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|File
name|path
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|mmap
decl_stmt|;
specifier|private
specifier|final
name|File
name|journal
decl_stmt|;
specifier|private
specifier|final
name|long
name|debugInterval
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|checkBinaries
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|checkHead
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|requestedCheckpoints
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|filterPaths
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|ioStatistics
decl_stmt|;
specifier|private
specifier|final
name|PrintWriter
name|out
decl_stmt|;
specifier|private
specifier|final
name|PrintWriter
name|err
decl_stmt|;
specifier|private
name|int
name|nodeCount
decl_stmt|;
specifier|private
name|int
name|propertyCount
decl_stmt|;
specifier|private
name|long
name|lastDebugEvent
decl_stmt|;
specifier|private
name|Check
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|builder
operator|.
name|path
expr_stmt|;
name|this
operator|.
name|mmap
operator|=
name|builder
operator|.
name|mmap
expr_stmt|;
name|this
operator|.
name|debugInterval
operator|=
name|builder
operator|.
name|debugInterval
expr_stmt|;
name|this
operator|.
name|checkHead
operator|=
name|builder
operator|.
name|checkHead
expr_stmt|;
name|this
operator|.
name|checkBinaries
operator|=
name|builder
operator|.
name|checkBinaries
expr_stmt|;
name|this
operator|.
name|requestedCheckpoints
operator|=
name|builder
operator|.
name|checkpoints
expr_stmt|;
name|this
operator|.
name|filterPaths
operator|=
name|builder
operator|.
name|filterPaths
expr_stmt|;
name|this
operator|.
name|ioStatistics
operator|=
name|builder
operator|.
name|ioStatistics
expr_stmt|;
name|this
operator|.
name|out
operator|=
name|builder
operator|.
name|outWriter
expr_stmt|;
name|this
operator|.
name|err
operator|=
name|builder
operator|.
name|errWriter
expr_stmt|;
name|this
operator|.
name|journal
operator|=
name|journalPath
argument_list|(
name|builder
operator|.
name|path
argument_list|,
name|builder
operator|.
name|journal
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|File
name|journalPath
parameter_list|(
name|File
name|segmentStore
parameter_list|,
name|File
name|journal
parameter_list|)
block|{
if|if
condition|(
name|journal
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
name|segmentStore
argument_list|,
literal|"journal.log"
argument_list|)
return|;
block|}
return|return
name|journal
return|;
block|}
specifier|public
name|int
name|run
parameter_list|()
block|{
name|StatisticsIOMonitor
name|ioMonitor
init|=
operator|new
name|StatisticsIOMonitor
argument_list|()
decl_stmt|;
name|FileStoreBuilder
name|builder
init|=
name|fileStoreBuilder
argument_list|(
name|path
argument_list|)
operator|.
name|withMemoryMapping
argument_list|(
name|mmap
argument_list|)
operator|.
name|withCustomPersistence
argument_list|(
operator|new
name|TarPersistence
argument_list|(
name|this
operator|.
name|path
argument_list|,
name|this
operator|.
name|journal
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ioStatistics
condition|)
block|{
name|builder
operator|.
name|withIOMonitor
argument_list|(
name|ioMonitor
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|ReadOnlyFileStore
name|store
init|=
name|builder
operator|.
name|buildReadOnly
argument_list|()
init|;
name|JournalReader
name|journal
operator|=
operator|new
name|JournalReader
argument_list|(
operator|new
name|LocalJournalFile
argument_list|(
name|this
operator|.
name|journal
argument_list|)
argument_list|)
init|)
block|{
name|run
argument_list|(
name|store
argument_list|,
name|journal
argument_list|)
expr_stmt|;
if|if
condition|(
name|ioStatistics
condition|)
block|{
name|print
argument_list|(
literal|"[I/O] Segment read: Number of operations: {0}"
argument_list|,
name|ioMonitor
operator|.
name|ops
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|print
argument_list|(
literal|"[I/O] Segment read: Total size: {0} ({1} bytes)"
argument_list|,
name|humanReadableByteCount
argument_list|(
name|ioMonitor
operator|.
name|bytes
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|ioMonitor
operator|.
name|bytes
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|print
argument_list|(
literal|"[I/O] Segment read: Total time: {0} ns"
argument_list|,
name|ioMonitor
operator|.
name|time
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
specifier|private
name|void
name|run
parameter_list|(
name|ReadOnlyFileStore
name|store
parameter_list|,
name|JournalReader
name|journal
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|checkpoints
init|=
name|requestedCheckpoints
decl_stmt|;
if|if
condition|(
name|requestedCheckpoints
operator|.
name|contains
argument_list|(
literal|"all"
argument_list|)
condition|)
block|{
name|checkpoints
operator|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|(
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|store
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|checkpoints
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ConsistencyCheckResult
name|result
init|=
name|newConsistencyChecker
argument_list|()
operator|.
name|checkConsistency
argument_list|(
name|store
argument_list|,
name|journal
argument_list|,
name|checkHead
argument_list|,
name|checkpoints
argument_list|,
name|filterPaths
argument_list|,
name|checkBinaries
argument_list|)
decl_stmt|;
name|print
argument_list|(
literal|"\nSearched through {0} revisions and {1} checkpoints"
argument_list|,
name|result
operator|.
name|getCheckedRevisionsCount
argument_list|()
argument_list|,
name|checkpoints
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAnyRevision
argument_list|(
name|result
argument_list|)
condition|)
block|{
if|if
condition|(
name|checkHead
condition|)
block|{
name|print
argument_list|(
literal|"\nHead"
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Revision
argument_list|>
name|e
range|:
name|result
operator|.
name|getHeadRevisions
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|printRevision
argument_list|(
literal|0
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|checkpoints
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|print
argument_list|(
literal|"\nCheckpoints"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|checkpoint
range|:
name|result
operator|.
name|getCheckpointRevisions
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|print
argument_list|(
literal|"- {0}"
argument_list|,
name|checkpoint
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Revision
argument_list|>
name|e
range|:
name|result
operator|.
name|getCheckpointRevisions
argument_list|()
operator|.
name|get
argument_list|(
name|checkpoint
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|printRevision
argument_list|(
literal|2
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|print
argument_list|(
literal|"\nOverall"
argument_list|)
expr_stmt|;
name|printOverallRevision
argument_list|(
name|result
operator|.
name|getOverallRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|print
argument_list|(
literal|"No good revision found"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ConsistencyChecker
name|newConsistencyChecker
parameter_list|()
block|{
return|return
operator|new
name|ConsistencyChecker
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onCheckRevision
parameter_list|(
name|String
name|revision
parameter_list|)
block|{
name|print
argument_list|(
literal|"\nChecking revision {0}"
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onCheckHead
parameter_list|()
block|{
name|print
argument_list|(
literal|"\nChecking head\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onCheckChekpoints
parameter_list|()
block|{
name|print
argument_list|(
literal|"\nChecking checkpoints"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onCheckCheckpoint
parameter_list|(
name|String
name|checkpoint
parameter_list|)
block|{
name|print
argument_list|(
literal|"\nChecking checkpoint {0}"
argument_list|,
name|checkpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onCheckpointNotFoundInRevision
parameter_list|(
name|String
name|checkpoint
parameter_list|)
block|{
name|printError
argument_list|(
literal|"Checkpoint {0} not found in this revision!"
argument_list|,
name|checkpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onCheckRevisionError
parameter_list|(
name|String
name|revision
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|printError
argument_list|(
literal|"Skipping invalid record id {0}: {1}"
argument_list|,
name|revision
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onConsistentPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|print
argument_list|(
literal|"Path {0} is consistent"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onPathNotFound
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|printError
argument_list|(
literal|"Path {0} not found"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onCheckTree
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|nodeCount
operator|=
literal|0
expr_stmt|;
name|propertyCount
operator|=
literal|0
expr_stmt|;
name|print
argument_list|(
literal|"Checking {0}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onCheckTreeEnd
parameter_list|()
block|{
name|print
argument_list|(
literal|"Checked {0} nodes and {1} properties"
argument_list|,
name|nodeCount
argument_list|,
name|propertyCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onCheckNode
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|debug
argument_list|(
literal|"Traversing {0}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|nodeCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onCheckProperty
parameter_list|()
block|{
name|propertyCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onCheckPropertyEnd
parameter_list|(
name|String
name|path
parameter_list|,
name|PropertyState
name|property
parameter_list|)
block|{
name|debug
argument_list|(
literal|"Checked {0}/{1}"
argument_list|,
name|path
argument_list|,
name|property
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onCheckNodeError
parameter_list|(
name|String
name|path
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|printError
argument_list|(
literal|"Error while traversing {0}: {1}"
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onCheckTreeError
parameter_list|(
name|String
name|path
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|printError
argument_list|(
literal|"Error while traversing {0}: {1}"
argument_list|,
name|path
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|private
name|void
name|print
parameter_list|(
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|arguments
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|arguments
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|printError
parameter_list|(
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|err
operator|.
name|println
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|debug
parameter_list|(
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|arg
parameter_list|)
block|{
if|if
condition|(
name|debug
argument_list|()
condition|)
block|{
name|print
argument_list|(
name|format
argument_list|,
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|debug
parameter_list|()
block|{
comment|// Avoid calling System.currentTimeMillis(), which is slow on some systems.
if|if
condition|(
name|debugInterval
operator|==
name|Long
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|debugInterval
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|long
name|t
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|t
operator|-
name|this
operator|.
name|lastDebugEvent
operator|)
operator|/
literal|1000
operator|>
name|debugInterval
condition|)
block|{
name|this
operator|.
name|lastDebugEvent
operator|=
name|t
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|hasAnyRevision
parameter_list|(
name|ConsistencyCheckResult
name|result
parameter_list|)
block|{
return|return
name|hasAnyHeadRevision
argument_list|(
name|result
argument_list|)
operator|||
name|hasAnyCheckpointRevision
argument_list|(
name|result
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|hasAnyHeadRevision
parameter_list|(
name|ConsistencyCheckResult
name|result
parameter_list|)
block|{
return|return
name|result
operator|.
name|getHeadRevisions
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|hasAnyCheckpointRevision
parameter_list|(
name|ConsistencyCheckResult
name|result
parameter_list|)
block|{
return|return
name|result
operator|.
name|getCheckpointRevisions
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|m
lambda|->
name|m
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|anyMatch
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
return|;
block|}
specifier|private
name|void
name|printRevision
parameter_list|(
name|int
name|indent
parameter_list|,
name|String
name|path
parameter_list|,
name|Revision
name|revision
parameter_list|)
block|{
name|Optional
argument_list|<
name|Revision
argument_list|>
name|r
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|revision
argument_list|)
decl_stmt|;
name|print
argument_list|(
literal|"{0}Latest good revision for path {1} is {2} from {3}"
argument_list|,
name|Strings
operator|.
name|repeat
argument_list|(
literal|" "
argument_list|,
name|indent
argument_list|)
argument_list|,
name|path
argument_list|,
name|r
operator|.
name|map
argument_list|(
name|Revision
operator|::
name|getRevision
argument_list|)
operator|.
name|orElse
argument_list|(
literal|"none"
argument_list|)
argument_list|,
name|r
operator|.
name|map
argument_list|(
name|Revision
operator|::
name|getTimestamp
argument_list|)
operator|.
name|map
argument_list|(
name|Check
operator|::
name|timestampToString
argument_list|)
operator|.
name|orElse
argument_list|(
literal|"unknown time"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|printOverallRevision
parameter_list|(
name|Revision
name|revision
parameter_list|)
block|{
name|Optional
argument_list|<
name|Revision
argument_list|>
name|r
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|revision
argument_list|)
decl_stmt|;
name|print
argument_list|(
literal|"Latest good revision for paths and checkpoints checked is {0} from {1}"
argument_list|,
name|r
operator|.
name|map
argument_list|(
name|Revision
operator|::
name|getRevision
argument_list|)
operator|.
name|orElse
argument_list|(
literal|"none"
argument_list|)
argument_list|,
name|r
operator|.
name|map
argument_list|(
name|Revision
operator|::
name|getTimestamp
argument_list|)
operator|.
name|map
argument_list|(
name|Check
operator|::
name|timestampToString
argument_list|)
operator|.
name|orElse
argument_list|(
literal|"unknown time"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|timestampToString
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
return|return
name|getDateTimeInstance
argument_list|()
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|timestamp
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

