begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|content
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteLoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|ContentRemoteRepositoryTest
block|{
specifier|private
name|ContentRemoteRepository
name|createRepository
parameter_list|()
block|{
return|return
name|createRepository
argument_list|(
name|mock
argument_list|(
name|ContentRepository
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|ContentRemoteRepository
name|createRepository
parameter_list|(
name|ContentRepository
name|repository
parameter_list|)
block|{
return|return
operator|new
name|ContentRemoteRepository
argument_list|(
name|repository
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateBasicCredentials
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|createRepository
argument_list|()
operator|.
name|createBasicCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|testCreateImpersonationCredentials
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|createRepository
argument_list|()
operator|.
name|createImpersonationCredentials
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"admin"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testLoginWithNullCredentials
parameter_list|()
throws|throws
name|Exception
block|{
name|createRepository
argument_list|()
operator|.
name|login
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testLoginWithInvalidCredentials
parameter_list|()
throws|throws
name|Exception
block|{
name|createRepository
argument_list|()
operator|.
name|login
argument_list|(
name|mock
argument_list|(
name|RemoteCredentials
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSuccessfulLoginWithBasicCredentials
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentRepository
name|repository
init|=
name|mock
argument_list|(
name|ContentRepository
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|repository
operator|.
name|login
argument_list|(
name|any
argument_list|(
name|Credentials
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|ContentSession
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ContentRemoteRepository
name|remoteRepository
init|=
name|createRepository
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|remoteRepository
operator|.
name|login
argument_list|(
name|remoteRepository
operator|.
name|createBasicCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RemoteLoginException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testUnsuccessfulLoginWithBasicCredentials
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentRepository
name|repository
init|=
name|mock
argument_list|(
name|ContentRepository
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|repository
operator|.
name|login
argument_list|(
name|any
argument_list|(
name|Credentials
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|LoginException
operator|.
name|class
argument_list|)
expr_stmt|;
name|ContentRemoteRepository
name|remoteRepository
init|=
name|createRepository
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|remoteRepository
operator|.
name|login
argument_list|(
name|remoteRepository
operator|.
name|createBasicCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

