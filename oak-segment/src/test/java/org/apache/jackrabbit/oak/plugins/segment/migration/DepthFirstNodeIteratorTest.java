begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|migration
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|memory
operator|.
name|MemoryStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|DepthFirstNodeIteratorTest
block|{
specifier|private
name|NodeStore
name|store
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|IOException
block|{
name|store
operator|=
name|SegmentNodeStore
operator|.
name|newSegmentNodeStore
argument_list|(
operator|new
name|MemoryStore
argument_list|()
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|NodeBuilder
name|rootBuilder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|countries
init|=
name|rootBuilder
operator|.
name|child
argument_list|(
literal|"countries"
argument_list|)
decl_stmt|;
name|countries
operator|.
name|child
argument_list|(
literal|"uk"
argument_list|)
operator|.
name|child
argument_list|(
literal|"cities"
argument_list|)
operator|.
name|child
argument_list|(
literal|"london"
argument_list|)
operator|.
name|child
argument_list|(
literal|"districts"
argument_list|)
operator|.
name|child
argument_list|(
literal|"frognal"
argument_list|)
expr_stmt|;
name|countries
operator|.
name|child
argument_list|(
literal|"germany"
argument_list|)
expr_stmt|;
name|countries
operator|.
name|child
argument_list|(
literal|"france"
argument_list|)
operator|.
name|child
argument_list|(
literal|"cities"
argument_list|)
operator|.
name|child
argument_list|(
literal|"paris"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|rootBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
comment|// The order of the returned nodes is not defined, that's why we have to
comment|// create 3 subtrees.
annotation|@
name|Test
specifier|public
name|void
name|testIterate
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|subtrees
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|subtrees
operator|.
name|put
argument_list|(
literal|"uk"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"cities"
block|,
literal|"london"
block|,
literal|"districts"
block|,
literal|"frognal"
block|}
argument_list|)
expr_stmt|;
name|subtrees
operator|.
name|put
argument_list|(
literal|"germany"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|subtrees
operator|.
name|put
argument_list|(
literal|"france"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"cities"
block|,
literal|"paris"
block|}
argument_list|)
expr_stmt|;
name|DepthFirstNodeIterator
name|iterator
init|=
operator|new
name|DepthFirstNodeIterator
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"countries"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|country
init|=
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|subtrees
operator|.
name|remove
argument_list|(
name|country
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|node
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|subtrees
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPath
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nameToPath
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|nameToPath
operator|.
name|put
argument_list|(
literal|"countries"
argument_list|,
literal|"/countries"
argument_list|)
expr_stmt|;
name|nameToPath
operator|.
name|put
argument_list|(
literal|"uk"
argument_list|,
literal|"/countries/uk"
argument_list|)
expr_stmt|;
name|nameToPath
operator|.
name|put
argument_list|(
literal|"frognal"
argument_list|,
literal|"/countries/uk/cities/london/districts/frognal"
argument_list|)
expr_stmt|;
name|nameToPath
operator|.
name|put
argument_list|(
literal|"paris"
argument_list|,
literal|"/countries/france/cities/paris"
argument_list|)
expr_stmt|;
name|DepthFirstNodeIterator
name|iterator
init|=
operator|new
name|DepthFirstNodeIterator
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|expectedPath
init|=
name|nameToPath
operator|.
name|remove
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedPath
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|assertEquals
argument_list|(
name|expectedPath
argument_list|,
name|iterator
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|nameToPath
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

