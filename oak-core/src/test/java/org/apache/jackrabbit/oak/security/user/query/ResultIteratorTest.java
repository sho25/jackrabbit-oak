begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_class
specifier|public
class|class
name|ResultIteratorTest
block|{
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|createWithNegativeOffset
parameter_list|()
block|{
name|ResultIterator
operator|.
name|create
argument_list|(
operator|-
literal|1
argument_list|,
name|ResultIterator
operator|.
name|MAX_ALL
argument_list|,
name|Iterators
operator|.
name|emptyIterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateWithoutLimitation
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"str"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|it
argument_list|,
name|ResultIterator
operator|.
name|create
argument_list|(
name|ResultIterator
operator|.
name|OFFSET_NONE
argument_list|,
name|ResultIterator
operator|.
name|MAX_ALL
argument_list|,
name|it
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateMaxZero
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|ResultIterator
operator|.
name|create
argument_list|(
name|ResultIterator
operator|.
name|OFFSET_NONE
argument_list|,
literal|0
argument_list|,
name|Iterators
operator|.
name|singletonIterator
argument_list|(
literal|"str"
argument_list|)
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateOffsetEqualsSize
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"str"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|ResultIterator
operator|.
name|create
argument_list|(
literal|1
argument_list|,
name|ResultIterator
operator|.
name|MAX_ALL
argument_list|,
name|Iterators
operator|.
name|singletonIterator
argument_list|(
literal|"str"
argument_list|)
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchElementException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNextNoElements
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|ResultIterator
operator|.
name|create
argument_list|(
literal|1
argument_list|,
name|ResultIterator
operator|.
name|MAX_ALL
argument_list|,
name|Iterators
operator|.
name|singletonIterator
argument_list|(
literal|"str"
argument_list|)
argument_list|)
decl_stmt|;
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNextWithOffset
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|ResultIterator
operator|.
name|create
argument_list|(
literal|1
argument_list|,
name|ResultIterator
operator|.
name|MAX_ALL
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"str"
argument_list|,
literal|"str2"
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"str2"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRemove
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|ResultIterator
operator|.
name|create
argument_list|(
name|ResultIterator
operator|.
name|OFFSET_NONE
argument_list|,
literal|1
argument_list|,
name|Iterators
operator|.
name|singletonIterator
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

