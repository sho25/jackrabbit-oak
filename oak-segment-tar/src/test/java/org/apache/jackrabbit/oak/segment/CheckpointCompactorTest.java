begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|DAYS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MultiBinaryPropertyState
operator|.
name|binaryPropertyFromBlob
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|DefaultSegmentWriterBuilder
operator|.
name|defaultSegmentWriterBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|GCGeneration
operator|.
name|newGCGeneration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Suppliers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|GCNodeWriteMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|InvalidFileStoreVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|cancel
operator|.
name|Canceller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|GCGeneration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|gc
operator|.
name|GCMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_class
specifier|public
class|class
name|CheckpointCompactorTest
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|FileStore
name|fileStore
decl_stmt|;
specifier|private
name|SegmentNodeStore
name|nodeStore
decl_stmt|;
specifier|private
name|CheckpointCompactor
name|compactor
decl_stmt|;
specifier|private
name|GCGeneration
name|compactedGeneration
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidFileStoreVersionException
block|{
name|fileStore
operator|=
name|fileStoreBuilder
argument_list|(
name|folder
operator|.
name|getRoot
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|nodeStore
operator|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|fileStore
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|compactedGeneration
operator|=
name|newGCGeneration
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|compactor
operator|=
name|createCompactor
argument_list|(
name|fileStore
argument_list|,
name|compactedGeneration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|fileStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompact
parameter_list|()
throws|throws
name|Exception
block|{
name|addTestContent
argument_list|(
literal|"cp1"
argument_list|,
name|nodeStore
argument_list|)
expr_stmt|;
name|String
name|cp1
init|=
name|nodeStore
operator|.
name|checkpoint
argument_list|(
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|addTestContent
argument_list|(
literal|"cp2"
argument_list|,
name|nodeStore
argument_list|)
expr_stmt|;
name|String
name|cp2
init|=
name|nodeStore
operator|.
name|checkpoint
argument_list|(
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|SegmentNodeState
name|uncompacted1
init|=
name|fileStore
operator|.
name|getHead
argument_list|()
decl_stmt|;
name|SegmentNodeState
name|compacted1
init|=
name|compactor
operator|.
name|compact
argument_list|(
name|EMPTY_NODE
argument_list|,
name|uncompacted1
argument_list|,
name|EMPTY_NODE
argument_list|,
name|Canceller
operator|.
name|newCanceller
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|compacted1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|uncompacted1
operator|==
name|compacted1
argument_list|)
expr_stmt|;
name|checkGeneration
argument_list|(
name|compacted1
argument_list|,
name|compactedGeneration
argument_list|)
expr_stmt|;
name|assertSameStableId
argument_list|(
name|uncompacted1
argument_list|,
name|compacted1
argument_list|)
expr_stmt|;
name|assertSameStableId
argument_list|(
name|getCheckpoint
argument_list|(
name|uncompacted1
argument_list|,
name|cp1
argument_list|)
argument_list|,
name|getCheckpoint
argument_list|(
name|compacted1
argument_list|,
name|cp1
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameStableId
argument_list|(
name|getCheckpoint
argument_list|(
name|uncompacted1
argument_list|,
name|cp2
argument_list|)
argument_list|,
name|getCheckpoint
argument_list|(
name|compacted1
argument_list|,
name|cp2
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameRecord
argument_list|(
name|getCheckpoint
argument_list|(
name|compacted1
argument_list|,
name|cp2
argument_list|)
argument_list|,
name|compacted1
operator|.
name|getChildNode
argument_list|(
literal|"root"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Simulate a 2nd compaction cycle
name|addTestContent
argument_list|(
literal|"cp3"
argument_list|,
name|nodeStore
argument_list|)
expr_stmt|;
name|String
name|cp3
init|=
name|nodeStore
operator|.
name|checkpoint
argument_list|(
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|addTestContent
argument_list|(
literal|"cp4"
argument_list|,
name|nodeStore
argument_list|)
expr_stmt|;
name|String
name|cp4
init|=
name|nodeStore
operator|.
name|checkpoint
argument_list|(
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|SegmentNodeState
name|uncompacted2
init|=
name|fileStore
operator|.
name|getHead
argument_list|()
decl_stmt|;
name|SegmentNodeState
name|compacted2
init|=
name|compactor
operator|.
name|compact
argument_list|(
name|uncompacted1
argument_list|,
name|uncompacted2
argument_list|,
name|compacted1
argument_list|,
name|Canceller
operator|.
name|newCanceller
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|compacted2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|uncompacted2
operator|==
name|compacted2
argument_list|)
expr_stmt|;
name|checkGeneration
argument_list|(
name|compacted2
argument_list|,
name|compactedGeneration
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileStore
operator|.
name|getRevisions
argument_list|()
operator|.
name|setHead
argument_list|(
name|uncompacted2
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|compacted2
operator|.
name|getRecordId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|uncompacted2
argument_list|,
name|compacted2
argument_list|)
expr_stmt|;
name|assertSameStableId
argument_list|(
name|uncompacted2
argument_list|,
name|compacted2
argument_list|)
expr_stmt|;
name|assertSameStableId
argument_list|(
name|getCheckpoint
argument_list|(
name|uncompacted2
argument_list|,
name|cp1
argument_list|)
argument_list|,
name|getCheckpoint
argument_list|(
name|compacted2
argument_list|,
name|cp1
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameStableId
argument_list|(
name|getCheckpoint
argument_list|(
name|uncompacted2
argument_list|,
name|cp2
argument_list|)
argument_list|,
name|getCheckpoint
argument_list|(
name|compacted2
argument_list|,
name|cp2
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameStableId
argument_list|(
name|getCheckpoint
argument_list|(
name|uncompacted2
argument_list|,
name|cp3
argument_list|)
argument_list|,
name|getCheckpoint
argument_list|(
name|compacted2
argument_list|,
name|cp3
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameStableId
argument_list|(
name|getCheckpoint
argument_list|(
name|uncompacted2
argument_list|,
name|cp4
argument_list|)
argument_list|,
name|getCheckpoint
argument_list|(
name|compacted2
argument_list|,
name|cp4
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameRecord
argument_list|(
name|getCheckpoint
argument_list|(
name|compacted1
argument_list|,
name|cp1
argument_list|)
argument_list|,
name|getCheckpoint
argument_list|(
name|compacted2
argument_list|,
name|cp1
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameRecord
argument_list|(
name|getCheckpoint
argument_list|(
name|compacted1
argument_list|,
name|cp2
argument_list|)
argument_list|,
name|getCheckpoint
argument_list|(
name|compacted2
argument_list|,
name|cp2
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameRecord
argument_list|(
name|getCheckpoint
argument_list|(
name|compacted2
argument_list|,
name|cp4
argument_list|)
argument_list|,
name|compacted2
operator|.
name|getChildNode
argument_list|(
literal|"root"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|checkGeneration
parameter_list|(
name|NodeState
name|node
parameter_list|,
name|GCGeneration
name|gcGeneration
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|SegmentNodeState
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|gcGeneration
argument_list|,
operator|(
operator|(
name|SegmentNodeState
operator|)
name|node
operator|)
operator|.
name|getRecordId
argument_list|()
operator|.
name|getSegmentId
argument_list|()
operator|.
name|getGcGeneration
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ChildNodeEntry
name|cne
range|:
name|node
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|checkGeneration
argument_list|(
name|cne
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|gcGeneration
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|NodeState
name|getCheckpoint
parameter_list|(
name|NodeState
name|superRoot
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|NodeState
name|checkpoint
init|=
name|superRoot
operator|.
name|getChildNode
argument_list|(
literal|"checkpoints"
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|checkpoint
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|checkpoint
return|;
block|}
specifier|private
specifier|static
name|void
name|assertSameStableId
parameter_list|(
name|NodeState
name|node1
parameter_list|,
name|NodeState
name|node2
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|node1
operator|instanceof
name|SegmentNodeState
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node2
operator|instanceof
name|SegmentNodeState
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Nodes should have the same stable ids"
argument_list|,
operator|(
operator|(
name|SegmentNodeState
operator|)
name|node1
operator|)
operator|.
name|getStableId
argument_list|()
argument_list|,
operator|(
operator|(
name|SegmentNodeState
operator|)
name|node2
operator|)
operator|.
name|getStableId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertSameRecord
parameter_list|(
name|NodeState
name|node1
parameter_list|,
name|NodeState
name|node2
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|node1
operator|instanceof
name|SegmentNodeState
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node2
operator|instanceof
name|SegmentNodeState
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Nodes should have been deduplicated"
argument_list|,
operator|(
operator|(
name|SegmentNodeState
operator|)
name|node1
operator|)
operator|.
name|getRecordId
argument_list|()
argument_list|,
operator|(
operator|(
name|SegmentNodeState
operator|)
name|node2
operator|)
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
specifier|private
specifier|static
name|CheckpointCompactor
name|createCompactor
parameter_list|(
annotation|@
name|Nonnull
name|FileStore
name|fileStore
parameter_list|,
annotation|@
name|Nonnull
name|GCGeneration
name|generation
parameter_list|)
block|{
name|SegmentWriter
name|writer
init|=
name|defaultSegmentWriterBuilder
argument_list|(
literal|"c"
argument_list|)
operator|.
name|withGeneration
argument_list|(
name|generation
argument_list|)
operator|.
name|build
argument_list|(
name|fileStore
argument_list|)
decl_stmt|;
return|return
operator|new
name|CheckpointCompactor
argument_list|(
name|GCMonitor
operator|.
name|EMPTY
argument_list|,
name|fileStore
operator|.
name|getReader
argument_list|()
argument_list|,
name|writer
argument_list|,
name|fileStore
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|GCNodeWriteMonitor
operator|.
name|EMPTY
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|addTestContent
parameter_list|(
annotation|@
name|Nonnull
name|String
name|parent
parameter_list|,
annotation|@
name|Nonnull
name|NodeStore
name|nodeStore
parameter_list|)
throws|throws
name|CommitFailedException
throws|,
name|IOException
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|parentBuilder
init|=
name|rootBuilder
operator|.
name|child
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|parentBuilder
operator|.
name|setChildNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"aa"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|parentBuilder
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"bb"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"bbb"
argument_list|)
expr_stmt|;
name|parentBuilder
operator|.
name|setChildNode
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"bin"
argument_list|,
name|createBlob
argument_list|(
name|nodeStore
argument_list|,
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|parentBuilder
operator|.
name|setChildNode
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|binaryPropertyFromBlob
argument_list|(
literal|"bins"
argument_list|,
name|createBlobs
argument_list|(
name|nodeStore
argument_list|,
literal|42
argument_list|,
literal|43
argument_list|,
literal|44
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|rootBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Blob
name|createBlob
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|nodeStore
operator|.
name|createBlob
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Blob
argument_list|>
name|createBlobs
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|,
name|int
modifier|...
name|sizes
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Blob
argument_list|>
name|blobs
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|size
range|:
name|sizes
control|)
block|{
name|blobs
operator|.
name|add
argument_list|(
name|createBlob
argument_list|(
name|nodeStore
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|blobs
return|;
block|}
block|}
end_class

end_unit

