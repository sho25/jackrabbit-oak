begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|old
operator|.
name|mk
operator|.
name|simple
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|old
operator|.
name|mk
operator|.
name|simple
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|old
operator|.
name|mk
operator|.
name|simple
operator|.
name|SimpleKernelImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_comment
comment|/**  * Test moving nodes.  */
end_comment

begin_class
specifier|public
class|class
name|NodeVersionTest
block|{
specifier|private
specifier|final
name|MicroKernel
name|mk
init|=
operator|new
name|SimpleKernelImpl
argument_list|(
literal|"mem:NodeVersionTest"
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|nodeVersion
parameter_list|()
block|{
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/:root/head/config"
argument_list|,
literal|"^ \"nodeVersion\": true"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \"test1\": { \"id\": 1 }"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \"test2\": { \"id\": 1 }"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|NodeImpl
name|n
init|=
name|NodeImpl
operator|.
name|parse
argument_list|(
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|head
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|vra
init|=
name|n
operator|.
name|getNodeVersion
argument_list|()
decl_stmt|;
name|String
name|v1a
init|=
name|n
operator|.
name|getNode
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|getNodeVersion
argument_list|()
decl_stmt|;
name|String
name|v2a
init|=
name|n
operator|.
name|getNode
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|getNodeVersion
argument_list|()
decl_stmt|;
comment|// changes the node version
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"^ \"test2/id\": 2"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|n
operator|=
name|NodeImpl
operator|.
name|parse
argument_list|(
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|head
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|vrb
init|=
name|n
operator|.
name|getNodeVersion
argument_list|()
decl_stmt|;
name|String
name|v1b
init|=
name|n
operator|.
name|getNode
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|getNodeVersion
argument_list|()
decl_stmt|;
name|String
name|v2b
init|=
name|n
operator|.
name|getNode
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|getNodeVersion
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|vra
operator|.
name|equals
argument_list|(
name|vrb
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|v1a
argument_list|,
name|v1b
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|v2a
operator|.
name|equals
argument_list|(
name|v2b
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

