begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|NODE_ADDED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|NODE_MOVED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|NODE_REMOVED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|PERSIST
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|PROPERTY_ADDED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|PROPERTY_CHANGED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|PROPERTY_REMOVED
import|;
end_import

begin_class
specifier|public
class|class
name|ConcurrentCreateNodesTest
extends|extends
name|AbstractTest
block|{
specifier|public
specifier|static
specifier|final
name|int
name|EVENT_TYPES
init|=
name|NODE_ADDED
operator||
name|NODE_REMOVED
operator||
name|NODE_MOVED
operator||
name|PROPERTY_ADDED
operator||
name|PROPERTY_REMOVED
operator||
name|PROPERTY_CHANGED
operator||
name|PERSIST
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|ROOT_NODE_NAME
init|=
literal|"test"
operator|+
name|TEST_ID
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|WORKER_COUNT
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"workerCount"
argument_list|,
literal|20
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|LISTENER_COUNT
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"listenerCount"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NODE_COUNT_LEVEL2
init|=
literal|50
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NODE_TYPE
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"nodeType"
argument_list|,
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|DISABLE_INDEX
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"disableIndex"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|VERBOSE
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"verbose"
argument_list|)
decl_stmt|;
specifier|private
name|Writer
name|writer
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|NODE_COUNT
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|beforeSuite
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|loginWriter
argument_list|()
decl_stmt|;
if|if
condition|(
name|DISABLE_INDEX
condition|)
block|{
name|disableNodeTypeIndex
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
name|Node
name|rootNode
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|rootNode
operator|.
name|hasNode
argument_list|(
name|ROOT_NODE_NAME
argument_list|)
condition|)
block|{
name|Node
name|root
init|=
name|rootNode
operator|.
name|getNode
argument_list|(
name|ROOT_NODE_NAME
argument_list|)
decl_stmt|;
name|root
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|rootNode
operator|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
name|ROOT_NODE_NAME
argument_list|,
name|NODE_TYPE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|WORKER_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|rootNode
operator|.
name|addNode
argument_list|(
literal|"node"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|WORKER_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|addBackgroundJob
argument_list|(
operator|new
name|Writer
argument_list|(
name|rootNode
operator|.
name|getPath
argument_list|()
operator|+
literal|"/node"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LISTENER_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|Session
name|s
init|=
name|loginWriter
argument_list|()
decl_stmt|;
name|s
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getObservationManager
argument_list|()
operator|.
name|addEventListener
argument_list|(
operator|new
name|Listener
argument_list|()
argument_list|,
name|EVENT_TYPES
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|writer
operator|=
operator|new
name|Writer
argument_list|(
name|rootNode
operator|.
name|getPath
argument_list|()
operator|+
literal|"/node"
operator|+
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|Writer
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|Session
name|session
init|=
name|loginWriter
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|private
name|Writer
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|int
name|numNodes
init|=
name|NODE_COUNT
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|session
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Node
name|root
init|=
name|session
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|root
operator|.
name|addNode
argument_list|(
literal|"node"
operator|+
name|count
operator|++
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NODE_COUNT_LEVEL2
condition|;
name|j
operator|++
control|)
block|{
name|node
operator|.
name|addNode
argument_list|(
literal|"node"
operator|+
name|j
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|NODE_COUNT
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|numNodes
operator|=
name|NODE_COUNT
operator|.
name|get
argument_list|()
operator|-
name|numNodes
expr_stmt|;
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
if|if
condition|(
name|this
operator|==
name|writer
operator|&&
name|VERBOSE
condition|)
block|{
name|long
name|perSecond
init|=
name|numNodes
operator|*
literal|1000
operator|/
name|time
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created "
operator|+
name|numNodes
operator|+
literal|" in "
operator|+
name|time
operator|+
literal|" ms. ("
operator|+
name|perSecond
operator|+
literal|" nodes/sec)"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
class|class
name|Listener
implements|implements
name|EventListener
block|{
annotation|@
name|Override
specifier|public
name|void
name|onEvent
parameter_list|(
name|EventIterator
name|events
parameter_list|)
block|{
try|try
block|{
while|while
condition|(
name|events
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|events
operator|.
name|nextEvent
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|runTest
parameter_list|()
throws|throws
name|Exception
block|{
name|writer
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|disableNodeTypeIndex
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
operator|!
name|session
operator|.
name|nodeExists
argument_list|(
literal|"/oak:index/nodetype"
argument_list|)
condition|)
block|{
return|return;
block|}
name|Node
name|ntIndex
init|=
name|session
operator|.
name|getNode
argument_list|(
literal|"/oak:index/nodetype"
argument_list|)
decl_stmt|;
name|ntIndex
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ntIndex
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|DECLARING_NODE_TYPES
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

