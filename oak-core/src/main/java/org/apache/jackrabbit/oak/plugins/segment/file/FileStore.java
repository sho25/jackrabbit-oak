begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newLinkedList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|humanReadableByteCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|compaction
operator|.
name|CompactionStrategy
operator|.
name|NO_COMPACTION
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobStoreBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|CompactionMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Compactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|RecordId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|compaction
operator|.
name|CompactionStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The storage implementation for tar files.  */
end_comment

begin_class
specifier|public
class|class
name|FileStore
implements|implements
name|SegmentStore
block|{
comment|/** Logger instance */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MB
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|FILE_NAME_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(data|bulk)((0|[1-9][0-9]*)[0-9]{4})([a-z])?.tar"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FILE_NAME_FORMAT
init|=
literal|"data%05d%s.tar"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JOURNAL_FILE_NAME
init|=
literal|"journal.log"
decl_stmt|;
specifier|static
specifier|final
name|boolean
name|MEMORY_MAPPING_DEFAULT
init|=
literal|"64"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"sun.arch.data.model"
argument_list|,
literal|"32"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SegmentTracker
name|tracker
decl_stmt|;
specifier|private
specifier|final
name|File
name|directory
decl_stmt|;
specifier|private
specifier|final
name|BlobStore
name|blobStore
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxFileSize
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|memoryMapping
decl_stmt|;
specifier|private
specifier|volatile
name|List
argument_list|<
name|TarReader
argument_list|>
name|readers
decl_stmt|;
specifier|private
name|int
name|writeNumber
decl_stmt|;
specifier|private
name|File
name|writeFile
decl_stmt|;
specifier|private
name|TarWriter
name|writer
decl_stmt|;
specifier|private
specifier|final
name|RandomAccessFile
name|journalFile
decl_stmt|;
specifier|private
specifier|final
name|FileLock
name|journalLock
decl_stmt|;
comment|/**      * The latest head state.      */
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|RecordId
argument_list|>
name|head
decl_stmt|;
comment|/**      * The persisted head of the root journal, used to determine whether the      * latest {@link #head} value should be written to the disk.      */
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|RecordId
argument_list|>
name|persistedHead
decl_stmt|;
comment|/**      * The background flush thread. Automatically flushes the TarMK state      * once every five seconds.      */
specifier|private
specifier|final
name|BackgroundThread
name|flushThread
decl_stmt|;
comment|/**      * The background compaction thread. Compacts the TarMK contents whenever      * triggered by the {@link #gc()} method.      */
specifier|private
specifier|final
name|BackgroundThread
name|compactionThread
decl_stmt|;
specifier|private
name|CompactionStrategy
name|compactionStrategy
init|=
name|NO_COMPACTION
decl_stmt|;
comment|/**      * Flag to request revision cleanup during the next flush.      */
specifier|private
specifier|final
name|AtomicBoolean
name|cleanupNeeded
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|/**      * List of old tar file generations that are waiting to be removed. They can      * not be removed immediately, because they first need to be closed, and the      * JVM needs to release the memory mapped file references.      */
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|File
argument_list|>
name|toBeRemoved
init|=
name|newLinkedList
argument_list|()
decl_stmt|;
comment|/**      * Version of the segment storage format.      */
specifier|private
specifier|final
name|SegmentVersion
name|version
init|=
name|SegmentVersion
operator|.
name|V_11
decl_stmt|;
comment|/**      * Create a new instance of a {@link Builder} for a file store.      * @param directory  directory where the tar files are stored      * @return a new {@link Builder} instance.      */
annotation|@
name|Nonnull
specifier|public
specifier|static
name|Builder
name|newFileStore
parameter_list|(
annotation|@
name|Nonnull
name|File
name|directory
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|(
name|checkNotNull
argument_list|(
name|directory
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Builder for creating {@link FileStore} instances.      */
specifier|public
specifier|static
class|class
name|Builder
block|{
specifier|private
specifier|final
name|File
name|directory
decl_stmt|;
specifier|private
name|BlobStore
name|blobStore
decl_stmt|;
comment|// null ->  store blobs inline
specifier|private
name|NodeState
name|root
init|=
name|EMPTY_NODE
decl_stmt|;
specifier|private
name|int
name|maxFileSize
init|=
literal|256
decl_stmt|;
specifier|private
name|int
name|cacheSize
decl_stmt|;
comment|// 0 -> DEFAULT_MEMORY_CACHE_SIZE
specifier|private
name|boolean
name|memoryMapping
decl_stmt|;
specifier|private
name|Builder
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
block|}
comment|/**          * Specify the {@link BlobStore}.          * @param blobStore          * @return this instance          */
annotation|@
name|Nonnull
specifier|public
name|Builder
name|withBlobStore
parameter_list|(
annotation|@
name|Nonnull
name|BlobStore
name|blobStore
parameter_list|)
block|{
name|this
operator|.
name|blobStore
operator|=
name|checkNotNull
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify the initial root node state for the file store          * @param root          * @return this instance          */
annotation|@
name|Nonnull
specifier|public
name|Builder
name|withRoot
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|root
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|checkNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximal size of the generated tar files in MB.          * @param maxFileSize          * @return this instance          */
annotation|@
name|Nonnull
specifier|public
name|Builder
name|withMaxFileSize
parameter_list|(
name|int
name|maxFileSize
parameter_list|)
block|{
name|this
operator|.
name|maxFileSize
operator|=
name|maxFileSize
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Size of the cache in MB.          * @param cacheSize          * @return this instance          */
annotation|@
name|Nonnull
specifier|public
name|Builder
name|withCacheSize
parameter_list|(
name|int
name|cacheSize
parameter_list|)
block|{
name|this
operator|.
name|cacheSize
operator|=
name|cacheSize
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Turn caching off          * @return this instance          */
annotation|@
name|Nonnull
specifier|public
name|Builder
name|withNoCache
parameter_list|()
block|{
name|this
operator|.
name|cacheSize
operator|=
operator|-
literal|1
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Turn memory mapping on or off          * @param memoryMapping          * @return this instance          */
annotation|@
name|Nonnull
specifier|public
name|Builder
name|withMemoryMapping
parameter_list|(
name|boolean
name|memoryMapping
parameter_list|)
block|{
name|this
operator|.
name|memoryMapping
operator|=
name|memoryMapping
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Create a new {@link FileStore} instance with the settings specified in this          * builder. If none of the {@code with} methods have been called before calling          * this method, a file store with the following default settings is returned:          *<ul>          *<li>blob store: inline</li>          *<li>root: empty node</li>          *<li>max file size: 256MB</li>          *<li>cache size: 256MB</li>          *<li>memory mapping: on for 64 bit JVMs off otherwise</li>          *</ul>          *          * @return a new file store instance          * @throws IOException          */
annotation|@
name|Nonnull
specifier|public
name|FileStore
name|create
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|FileStore
argument_list|(
name|blobStore
argument_list|,
name|directory
argument_list|,
name|root
argument_list|,
name|maxFileSize
argument_list|,
name|cacheSize
argument_list|,
name|memoryMapping
argument_list|)
return|;
block|}
block|}
annotation|@
name|Deprecated
specifier|public
name|FileStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|,
name|File
name|directory
parameter_list|,
name|int
name|maxFileSizeMB
parameter_list|,
name|boolean
name|memoryMapping
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|blobStore
argument_list|,
name|directory
argument_list|,
name|EMPTY_NODE
argument_list|,
name|maxFileSizeMB
argument_list|,
literal|0
argument_list|,
name|memoryMapping
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
specifier|public
name|FileStore
parameter_list|(
name|File
name|directory
parameter_list|,
name|int
name|maxFileSizeMB
parameter_list|,
name|boolean
name|memoryMapping
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|directory
argument_list|,
name|maxFileSizeMB
argument_list|,
name|memoryMapping
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
specifier|public
name|FileStore
parameter_list|(
name|File
name|directory
parameter_list|,
name|int
name|maxFileSizeMB
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|directory
argument_list|,
name|maxFileSizeMB
argument_list|,
name|MEMORY_MAPPING_DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
specifier|public
name|FileStore
parameter_list|(
name|File
name|directory
parameter_list|,
name|int
name|maxFileSizeMB
parameter_list|,
name|int
name|cacheSizeMB
parameter_list|,
name|boolean
name|memoryMapping
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|directory
argument_list|,
name|EMPTY_NODE
argument_list|,
name|maxFileSizeMB
argument_list|,
name|cacheSizeMB
argument_list|,
name|memoryMapping
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
name|FileStore
parameter_list|(
name|File
name|directory
parameter_list|,
name|NodeState
name|initial
parameter_list|,
name|int
name|maxFileSize
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|directory
argument_list|,
name|initial
argument_list|,
name|maxFileSize
argument_list|,
operator|-
literal|1
argument_list|,
name|MEMORY_MAPPING_DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
specifier|public
name|FileStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|,
specifier|final
name|File
name|directory
parameter_list|,
name|NodeState
name|initial
parameter_list|,
name|int
name|maxFileSizeMB
parameter_list|,
name|int
name|cacheSizeMB
parameter_list|,
name|boolean
name|memoryMapping
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|directory
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
name|cacheSizeMB
operator|<
literal|0
condition|)
block|{
name|this
operator|.
name|tracker
operator|=
operator|new
name|SegmentTracker
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cacheSizeMB
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|tracker
operator|=
operator|new
name|SegmentTracker
argument_list|(
name|this
argument_list|,
name|cacheSizeMB
argument_list|,
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|tracker
operator|=
operator|new
name|SegmentTracker
argument_list|(
name|this
argument_list|,
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
name|this
operator|.
name|maxFileSize
operator|=
name|maxFileSizeMB
operator|*
name|MB
expr_stmt|;
name|this
operator|.
name|memoryMapping
operator|=
name|memoryMapping
expr_stmt|;
name|journalFile
operator|=
operator|new
name|RandomAccessFile
argument_list|(
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|JOURNAL_FILE_NAME
argument_list|)
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
argument_list|>
name|map
init|=
name|collectFiles
argument_list|(
name|directory
argument_list|)
decl_stmt|;
name|this
operator|.
name|readers
operator|=
name|newArrayListWithCapacity
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
index|[]
name|indices
init|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|map
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|indices
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|indices
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|readers
operator|.
name|add
argument_list|(
name|TarReader
operator|.
name|open
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|indices
index|[
name|i
index|]
argument_list|)
argument_list|,
name|memoryMapping
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indices
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|writeNumber
operator|=
name|indices
index|[
name|indices
operator|.
name|length
operator|-
literal|1
index|]
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|writeNumber
operator|=
literal|0
expr_stmt|;
block|}
name|this
operator|.
name|writeFile
operator|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|FILE_NAME_FORMAT
argument_list|,
name|writeNumber
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|writer
operator|=
operator|new
name|TarWriter
argument_list|(
name|writeFile
argument_list|)
expr_stmt|;
name|RecordId
name|id
init|=
literal|null
decl_stmt|;
name|JournalReader
name|journalReader
init|=
operator|new
name|JournalReader
argument_list|(
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|JOURNAL_FILE_NAME
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|heads
init|=
name|journalReader
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|id
operator|==
literal|null
operator|&&
name|heads
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RecordId
name|last
init|=
name|RecordId
operator|.
name|fromString
argument_list|(
name|tracker
argument_list|,
name|heads
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|SegmentId
name|segmentId
init|=
name|last
operator|.
name|getSegmentId
argument_list|()
decl_stmt|;
if|if
condition|(
name|containsSegment
argument_list|(
name|segmentId
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|segmentId
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
condition|)
block|{
name|id
operator|=
name|last
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to access revision {}, rewinding..."
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|journalReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|journalFile
operator|.
name|seek
argument_list|(
name|journalFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|journalLock
operator|=
name|journalFile
operator|.
name|getChannel
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|head
operator|=
operator|new
name|AtomicReference
argument_list|<
name|RecordId
argument_list|>
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|persistedHead
operator|=
operator|new
name|AtomicReference
argument_list|<
name|RecordId
argument_list|>
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"root"
argument_list|,
name|initial
argument_list|)
expr_stmt|;
name|head
operator|=
operator|new
name|AtomicReference
argument_list|<
name|RecordId
argument_list|>
argument_list|(
name|tracker
operator|.
name|getWriter
argument_list|()
operator|.
name|writeNode
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
name|persistedHead
operator|=
operator|new
name|AtomicReference
argument_list|<
name|RecordId
argument_list|>
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|flushThread
operator|=
operator|new
name|BackgroundThread
argument_list|(
literal|"TarMK flush thread ["
operator|+
name|directory
operator|+
literal|"]"
argument_list|,
literal|5000
argument_list|,
comment|// 5s interval
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to flush the TarMK at"
operator|+
name|directory
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|compactionThread
operator|=
operator|new
name|BackgroundThread
argument_list|(
literal|"TarMK compaction thread ["
operator|+
name|directory
operator|+
literal|"]"
argument_list|,
operator|-
literal|1
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|maybeCompact
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"TarMK opened: {} (mmap={})"
argument_list|,
name|directory
argument_list|,
name|memoryMapping
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|maybeCompact
parameter_list|(
name|boolean
name|cleanup
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"TarMK compaction started"
argument_list|)
expr_stmt|;
name|Runtime
name|runtime
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
decl_stmt|;
name|long
name|avail
init|=
name|runtime
operator|.
name|totalMemory
argument_list|()
operator|-
name|runtime
operator|.
name|freeMemory
argument_list|()
decl_stmt|;
name|long
name|delta
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|compactionStrategy
operator|.
name|getCompactionMap
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|delta
operator|=
name|compactionStrategy
operator|.
name|getCompactionMap
argument_list|()
operator|.
name|getLastMergeWeight
argument_list|()
expr_stmt|;
block|}
name|long
name|needed
init|=
name|delta
operator|*
name|compactionStrategy
operator|.
name|getMemoryThreshold
argument_list|()
decl_stmt|;
if|if
condition|(
name|needed
operator|>=
name|avail
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Not enough available memory {}, needed {}, last merge delta {}, so skipping compaction for now"
argument_list|,
name|humanReadableByteCount
argument_list|(
name|avail
argument_list|)
argument_list|,
name|humanReadableByteCount
argument_list|(
name|needed
argument_list|)
argument_list|,
name|humanReadableByteCount
argument_list|(
name|delta
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cleanup
condition|)
block|{
name|cleanupNeeded
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|Stopwatch
name|watch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|compactionStrategy
operator|.
name|setCompactionStart
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|compacted
init|=
literal|false
decl_stmt|;
name|CompactionGainEstimate
name|estimate
init|=
name|estimateCompactionGain
argument_list|()
decl_stmt|;
name|long
name|gain
init|=
name|estimate
operator|.
name|estimateCompactionGain
argument_list|()
decl_stmt|;
if|if
condition|(
name|gain
operator|>=
literal|10
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Estimated compaction in {}, gain is {}% ({}/{}) or ({}/{}), so running compaction"
argument_list|,
name|watch
argument_list|,
name|gain
argument_list|,
name|estimate
operator|.
name|getReachableSize
argument_list|()
argument_list|,
name|estimate
operator|.
name|getTotalSize
argument_list|()
argument_list|,
name|humanReadableByteCount
argument_list|(
name|estimate
operator|.
name|getReachableSize
argument_list|()
argument_list|)
argument_list|,
name|humanReadableByteCount
argument_list|(
name|estimate
operator|.
name|getTotalSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|compactionStrategy
operator|.
name|isPaused
argument_list|()
condition|)
block|{
name|compact
argument_list|()
expr_stmt|;
name|compacted
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"TarMK compaction paused"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Estimated compaction in {}, gain is {}% ({}/{}) or ({}/{}), so skipping compaction for now"
argument_list|,
name|watch
argument_list|,
name|gain
argument_list|,
name|estimate
operator|.
name|getReachableSize
argument_list|()
argument_list|,
name|estimate
operator|.
name|getTotalSize
argument_list|()
argument_list|,
name|humanReadableByteCount
argument_list|(
name|estimate
operator|.
name|getReachableSize
argument_list|()
argument_list|)
argument_list|,
name|humanReadableByteCount
argument_list|(
name|estimate
operator|.
name|getTotalSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cleanup
condition|)
block|{
name|cleanupNeeded
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|compacted
return|;
block|}
specifier|static
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
argument_list|>
name|collectFiles
parameter_list|(
name|File
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
argument_list|>
name|dataFiles
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|File
argument_list|>
name|bulkFiles
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|directory
operator|.
name|listFiles
argument_list|()
control|)
block|{
name|Matcher
name|matcher
init|=
name|FILE_NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|Integer
name|index
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"data"
operator|.
name|equals
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
name|files
init|=
name|dataFiles
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
name|files
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
name|dataFiles
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
name|Character
name|generation
init|=
literal|'a'
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|generation
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|checkState
argument_list|(
name|files
operator|.
name|put
argument_list|(
name|generation
argument_list|,
name|file
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkState
argument_list|(
name|bulkFiles
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|file
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|bulkFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Upgrading TarMK file names in {}"
argument_list|,
name|directory
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dataFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// first put all the data segments at the end of the list
name|Integer
index|[]
name|indices
init|=
name|dataFiles
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|dataFiles
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|indices
argument_list|)
expr_stmt|;
name|int
name|position
init|=
name|Math
operator|.
name|max
argument_list|(
name|indices
index|[
name|indices
operator|.
name|length
operator|-
literal|1
index|]
operator|+
literal|1
argument_list|,
name|bulkFiles
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|index
range|:
name|indices
control|)
block|{
name|Map
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
name|files
init|=
name|dataFiles
operator|.
name|remove
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|Integer
name|newIndex
init|=
name|position
operator|++
decl_stmt|;
for|for
control|(
name|Character
name|generation
range|:
name|newHashSet
argument_list|(
name|files
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|File
name|file
init|=
name|files
operator|.
name|get
argument_list|(
name|generation
argument_list|)
decl_stmt|;
name|File
name|newFile
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|format
argument_list|(
name|FILE_NAME_FORMAT
argument_list|,
name|newIndex
argument_list|,
name|generation
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Renaming {} to {}"
argument_list|,
name|file
argument_list|,
name|newFile
argument_list|)
expr_stmt|;
name|file
operator|.
name|renameTo
argument_list|(
name|newFile
argument_list|)
expr_stmt|;
name|files
operator|.
name|put
argument_list|(
name|generation
argument_list|,
name|newFile
argument_list|)
expr_stmt|;
block|}
name|dataFiles
operator|.
name|put
argument_list|(
name|newIndex
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
block|}
comment|// then add all the bulk segments at the beginning of the list
name|Integer
index|[]
name|indices
init|=
name|bulkFiles
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|bulkFiles
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|indices
argument_list|)
expr_stmt|;
name|int
name|position
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|index
range|:
name|indices
control|)
block|{
name|File
name|file
init|=
name|bulkFiles
operator|.
name|remove
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|Integer
name|newIndex
init|=
name|position
operator|++
decl_stmt|;
name|File
name|newFile
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|format
argument_list|(
name|FILE_NAME_FORMAT
argument_list|,
name|newIndex
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Renaming {} to {}"
argument_list|,
name|file
argument_list|,
name|newFile
argument_list|)
expr_stmt|;
name|file
operator|.
name|renameTo
argument_list|(
name|newFile
argument_list|)
expr_stmt|;
name|dataFiles
operator|.
name|put
argument_list|(
name|newIndex
argument_list|,
name|singletonMap
argument_list|(
literal|'a'
argument_list|,
name|newFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dataFiles
return|;
block|}
specifier|public
specifier|synchronized
name|long
name|size
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|size
init|=
name|writeFile
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
name|size
operator|+=
name|reader
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
comment|/**      * Returns the number of segments in this TarMK instance.      *      * @return number of segments      */
specifier|private
specifier|synchronized
name|int
name|count
parameter_list|()
block|{
name|int
name|count
init|=
name|writer
operator|.
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
name|count
operator|+=
name|reader
operator|.
name|count
argument_list|()
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
name|CompactionGainEstimate
name|estimateCompactionGain
parameter_list|()
block|{
name|CompactionGainEstimate
name|estimate
init|=
operator|new
name|CompactionGainEstimate
argument_list|(
name|getHead
argument_list|()
argument_list|,
name|count
argument_list|()
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
name|reader
operator|.
name|accept
argument_list|(
name|estimate
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|estimate
return|;
block|}
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|persistedHead
init|)
block|{
name|RecordId
name|before
init|=
name|persistedHead
operator|.
name|get
argument_list|()
decl_stmt|;
name|RecordId
name|after
init|=
name|head
operator|.
name|get
argument_list|()
decl_stmt|;
name|boolean
name|cleanup
init|=
name|cleanupNeeded
operator|.
name|getAndSet
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|cleanup
operator|||
operator|!
name|after
operator|.
name|equals
argument_list|(
name|before
argument_list|)
condition|)
block|{
comment|// needs to happen outside the synchronization block below to
comment|// avoid a deadlock with another thread flushing the writer
name|tracker
operator|.
name|getWriter
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// needs to happen outside the synchronization block below to
comment|// prevent the flush from stopping concurrent reads and writes
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"TarMK journal update {} -> {}"
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|journalFile
operator|.
name|writeBytes
argument_list|(
name|after
operator|.
name|toString10
argument_list|()
operator|+
literal|" root\n"
argument_list|)
expr_stmt|;
name|journalFile
operator|.
name|getChannel
argument_list|()
operator|.
name|force
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|persistedHead
operator|.
name|set
argument_list|(
name|after
argument_list|)
expr_stmt|;
if|if
condition|(
name|cleanup
condition|)
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// remove all obsolete tar generations
name|Iterator
argument_list|<
name|File
argument_list|>
name|iterator
init|=
name|toBeRemoved
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|File
name|file
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"TarMK GC: Attempting to remove old file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
operator|||
name|file
operator|.
name|delete
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"TarMK GC: Removed old file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * Runs garbage collection on the segment level, which could write new      * generations of tar files. It checks which segments are still reachable,      * and throws away those that are not.      *<p>      * A new generation of a tar file is created (and segments are only      * discarded) if doing so releases more than 25% of the space in a tar file.      */
specifier|public
specifier|synchronized
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|Stopwatch
name|watch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|long
name|initialSize
init|=
name|size
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"TarMK revision cleanup started. Current repository size {}"
argument_list|,
name|humanReadableByteCount
argument_list|(
name|initialSize
argument_list|)
argument_list|)
expr_stmt|;
comment|// Suggest to the JVM that now would be a good time
comment|// to clear stale weak references in the SegmentTracker
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|UUID
argument_list|>
name|ids
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|SegmentId
name|id
range|:
name|tracker
operator|.
name|getReferencedSegmentIds
argument_list|()
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
operator|new
name|UUID
argument_list|(
name|id
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|cleanup
argument_list|(
name|ids
argument_list|)
expr_stmt|;
name|CompactionMap
name|cm
init|=
name|tracker
operator|.
name|getCompactionMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TarReader
argument_list|>
name|list
init|=
name|newArrayListWithCapacity
argument_list|(
name|readers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
name|TarReader
name|cleaned
init|=
name|reader
operator|.
name|cleanup
argument_list|(
name|ids
argument_list|,
name|cm
argument_list|)
decl_stmt|;
if|if
condition|(
name|cleaned
operator|==
name|reader
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|cleaned
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|cleaned
argument_list|)
expr_stmt|;
block|}
name|File
name|file
init|=
name|reader
operator|.
name|close
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"TarMK revision cleanup reclaiming {}"
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|toBeRemoved
operator|.
name|addLast
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
name|readers
operator|=
name|list
expr_stmt|;
name|long
name|finalSize
init|=
name|size
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"TarMK revision cleanup completed in {}. Post cleanup size is {} "
operator|+
literal|"and space reclaimed {}"
argument_list|,
name|watch
argument_list|,
name|humanReadableByteCount
argument_list|(
name|finalSize
argument_list|)
argument_list|,
name|humanReadableByteCount
argument_list|(
name|initialSize
operator|-
name|finalSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Copy every referenced record in data (non-bulk) segments. Bulk segments      * are fully kept (they are only removed in cleanup, if there is no      * reference to them).      */
specifier|public
name|void
name|compact
parameter_list|()
block|{
name|checkArgument
argument_list|(
operator|!
name|compactionStrategy
operator|.
name|equals
argument_list|(
name|NO_COMPACTION
argument_list|)
argument_list|,
literal|"You must set a compactionStrategy before calling compact"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"TarMK compaction running, strategy={}"
argument_list|,
name|compactionStrategy
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|SegmentWriter
name|writer
init|=
operator|new
name|SegmentWriter
argument_list|(
name|this
argument_list|,
name|tracker
argument_list|,
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Compactor
name|compactor
init|=
operator|new
name|Compactor
argument_list|(
name|writer
argument_list|,
name|compactionStrategy
operator|.
name|cloneBinaries
argument_list|()
argument_list|)
decl_stmt|;
name|SegmentNodeState
name|before
init|=
name|getHead
argument_list|()
decl_stmt|;
name|long
name|existing
init|=
name|before
operator|.
name|getChildNode
argument_list|(
name|SegmentNodeStore
operator|.
name|CHECKPOINTS
argument_list|)
operator|.
name|getChildNodeCount
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|>
literal|1
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"TarMK compaction found {} checkpoints, you might need to run checkpoint cleanup"
argument_list|,
name|existing
argument_list|)
expr_stmt|;
block|}
name|SegmentNodeState
name|after
init|=
name|compactor
operator|.
name|compact
argument_list|(
name|EMPTY_NODE
argument_list|,
name|before
argument_list|)
decl_stmt|;
name|Callable
argument_list|<
name|Boolean
argument_list|>
name|setHead
init|=
operator|new
name|SetHead
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|compactor
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|compactionStrategy
operator|.
name|compacted
argument_list|(
name|setHead
argument_list|)
condition|)
block|{
comment|// Some other concurrent changes have been made.
comment|// Rebase (and compact) those changes on top of the
comment|// compacted state before retrying to set the head.
name|SegmentNodeState
name|head
init|=
name|getHead
argument_list|()
decl_stmt|;
name|after
operator|=
name|compactor
operator|.
name|compact
argument_list|(
name|after
argument_list|,
name|head
argument_list|)
expr_stmt|;
name|setHead
operator|=
operator|new
name|SetHead
argument_list|(
name|head
argument_list|,
name|after
argument_list|,
name|compactor
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"TarMK compaction completed in {}ms"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error while running TarMK compaction"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|Iterable
argument_list|<
name|SegmentId
argument_list|>
name|getSegmentIds
parameter_list|()
block|{
name|List
argument_list|<
name|SegmentId
argument_list|>
name|ids
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|UUID
name|uuid
range|:
name|writer
operator|.
name|getUUIDs
argument_list|()
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|tracker
operator|.
name|getSegmentId
argument_list|(
name|uuid
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|uuid
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
for|for
control|(
name|UUID
name|uuid
range|:
name|reader
operator|.
name|getUUIDs
argument_list|()
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|tracker
operator|.
name|getSegmentId
argument_list|(
name|uuid
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|uuid
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ids
return|;
block|}
annotation|@
name|Override
specifier|public
name|SegmentTracker
name|getTracker
parameter_list|()
block|{
return|return
name|tracker
return|;
block|}
annotation|@
name|Override
specifier|public
name|SegmentNodeState
name|getHead
parameter_list|()
block|{
return|return
operator|new
name|SegmentNodeState
argument_list|(
name|head
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|setHead
parameter_list|(
name|SegmentNodeState
name|base
parameter_list|,
name|SegmentNodeState
name|head
parameter_list|)
block|{
name|RecordId
name|id
init|=
name|this
operator|.
name|head
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|id
operator|.
name|equals
argument_list|(
name|base
operator|.
name|getRecordId
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|head
operator|.
name|compareAndSet
argument_list|(
name|id
argument_list|,
name|head
operator|.
name|getRecordId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// avoid deadlocks by closing (and joining) the background
comment|// threads before acquiring the synchronization lock
name|compactionThread
operator|.
name|close
argument_list|()
expr_stmt|;
name|flushThread
operator|.
name|close
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|getWriter
argument_list|()
operator|.
name|dropCache
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|TarReader
argument_list|>
name|list
init|=
name|readers
decl_stmt|;
name|readers
operator|=
name|newArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|list
control|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|journalLock
operator|.
name|release
argument_list|()
expr_stmt|;
name|journalFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to close the TarMK at "
operator|+
name|directory
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
comment|// for any memory-mappings that are no longer used
name|log
operator|.
name|info
argument_list|(
literal|"TarMK closed: {}"
argument_list|,
name|directory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsSegment
parameter_list|(
name|SegmentId
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|.
name|getTracker
argument_list|()
operator|==
name|tracker
condition|)
block|{
return|return
literal|true
return|;
block|}
name|long
name|msb
init|=
name|id
operator|.
name|getMostSignificantBits
argument_list|()
decl_stmt|;
name|long
name|lsb
init|=
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
decl_stmt|;
return|return
name|containsSegment
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|containsSegment
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
block|{
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
if|if
condition|(
name|reader
operator|.
name|containsEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|writer
operator|.
name|containsEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|// the writer might have switched to a new file,
comment|// so we need to re-check the readers
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
if|if
condition|(
name|reader
operator|.
name|containsEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Segment
name|readSegment
parameter_list|(
name|SegmentId
name|id
parameter_list|)
block|{
name|long
name|msb
init|=
name|id
operator|.
name|getMostSignificantBits
argument_list|()
decl_stmt|;
name|long
name|lsb
init|=
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
decl_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
try|try
block|{
name|ByteBuffer
name|buffer
init|=
name|reader
operator|.
name|readEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Segment
argument_list|(
name|tracker
argument_list|,
name|id
argument_list|,
name|buffer
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to read from tar file "
operator|+
name|reader
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
name|ByteBuffer
name|buffer
init|=
name|writer
operator|.
name|readEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Segment
argument_list|(
name|tracker
argument_list|,
name|id
argument_list|,
name|buffer
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to read from tar file "
operator|+
name|writer
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// the writer might have switched to a new file,
comment|// so we need to re-check the readers
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
try|try
block|{
name|ByteBuffer
name|buffer
init|=
name|reader
operator|.
name|readEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Segment
argument_list|(
name|tracker
argument_list|,
name|id
argument_list|,
name|buffer
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to read from tar file "
operator|+
name|reader
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|SegmentNotFoundException
argument_list|(
name|id
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|writeSegment
parameter_list|(
name|SegmentId
name|id
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
try|try
block|{
name|long
name|size
init|=
name|writer
operator|.
name|writeEntry
argument_list|(
name|id
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|,
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|>=
name|maxFileSize
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|TarReader
argument_list|>
name|list
init|=
name|newArrayListWithCapacity
argument_list|(
literal|1
operator|+
name|readers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|TarReader
operator|.
name|open
argument_list|(
name|writeFile
argument_list|,
name|memoryMapping
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|readers
argument_list|)
expr_stmt|;
name|readers
operator|=
name|list
expr_stmt|;
name|writeNumber
operator|++
expr_stmt|;
name|writeFile
operator|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|FILE_NAME_FORMAT
argument_list|,
name|writeNumber
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|TarWriter
argument_list|(
name|writeFile
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Blob
name|readBlob
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{
if|if
condition|(
name|blobStore
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|BlobStoreBlob
argument_list|(
name|blobStore
argument_list|,
name|blobId
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Attempt to read external blob with blobId ["
operator|+
name|blobId
operator|+
literal|"] "
operator|+
literal|"without specifying BlobStore"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|BlobStore
name|getBlobStore
parameter_list|()
block|{
return|return
name|blobStore
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|gc
parameter_list|()
block|{
if|if
condition|(
name|compactionStrategy
operator|==
name|NO_COMPACTION
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Call to gc while compaction strategy set to {}. "
argument_list|,
name|NO_COMPACTION
argument_list|)
expr_stmt|;
block|}
name|compactionThread
operator|.
name|trigger
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|getTarReaderIndex
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|index
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
name|index
operator|.
name|put
argument_list|(
name|reader
operator|.
name|getFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|reader
operator|.
name|getUUIDs
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
specifier|public
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|getTarGraph
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
if|if
condition|(
name|fileName
operator|.
name|equals
argument_list|(
name|reader
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|graph
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|UUID
name|uuid
range|:
name|reader
operator|.
name|getUUIDs
argument_list|()
control|)
block|{
name|graph
operator|.
name|put
argument_list|(
name|uuid
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|graph
operator|.
name|putAll
argument_list|(
name|reader
operator|.
name|getGraph
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|graph
return|;
block|}
block|}
return|return
name|emptyMap
argument_list|()
return|;
block|}
specifier|public
name|FileStore
name|setCompactionStrategy
parameter_list|(
name|CompactionStrategy
name|strategy
parameter_list|)
block|{
name|this
operator|.
name|compactionStrategy
operator|=
name|strategy
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
specifier|synchronized
name|void
name|setRevision
parameter_list|(
name|String
name|rootRevision
parameter_list|)
block|{
name|RecordId
name|id
init|=
name|RecordId
operator|.
name|fromString
argument_list|(
name|tracker
argument_list|,
name|rootRevision
argument_list|)
decl_stmt|;
name|head
operator|.
name|set
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|persistedHead
operator|.
name|set
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**      * A read only {@link FileStore} implementation that supports      * going back to old revisions.      *<p>      * All write methods are no-ops.      */
specifier|public
specifier|static
class|class
name|ReadOnlyStore
extends|extends
name|FileStore
block|{
specifier|public
name|ReadOnlyStore
parameter_list|(
name|File
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|directory
argument_list|,
literal|266
argument_list|)
expr_stmt|;
name|super
operator|.
name|flushThread
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|compactionThread
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**          * Go to the specified {@code revision}          *          * @param revision          */
specifier|public
specifier|synchronized
name|void
name|setRevision
parameter_list|(
name|String
name|revision
parameter_list|)
block|{
name|super
operator|.
name|setRevision
argument_list|(
name|revision
argument_list|)
expr_stmt|;
block|}
comment|/**          * @return false          */
annotation|@
name|Override
specifier|public
name|boolean
name|setHead
parameter_list|(
name|SegmentNodeState
name|base
parameter_list|,
name|SegmentNodeState
name|head
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|/**          * no-op          */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|writeSegment
parameter_list|(
name|SegmentId
name|id
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
comment|// nop
block|}
comment|/**          * no-op          */
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
block|{
comment|/* nop */
block|}
comment|/**          * no-op          */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|cleanup
parameter_list|()
block|{
comment|/* nop */
block|}
comment|/**          * no-op          */
annotation|@
name|Override
specifier|public
name|void
name|gc
parameter_list|()
block|{
comment|/* nop */
block|}
block|}
specifier|private
class|class
name|SetHead
implements|implements
name|Callable
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|private
specifier|final
name|SegmentNodeState
name|before
decl_stmt|;
specifier|private
specifier|final
name|SegmentNodeState
name|after
decl_stmt|;
specifier|private
specifier|final
name|Compactor
name|compactor
decl_stmt|;
specifier|public
name|SetHead
parameter_list|(
name|SegmentNodeState
name|before
parameter_list|,
name|SegmentNodeState
name|after
parameter_list|,
name|Compactor
name|compactor
parameter_list|)
block|{
name|this
operator|.
name|before
operator|=
name|before
expr_stmt|;
name|this
operator|.
name|after
operator|=
name|after
expr_stmt|;
name|this
operator|.
name|compactor
operator|=
name|compactor
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
comment|// When used in conjunction with the SegmentNodeStore, this method
comment|// needs to be called inside the commitSemaphore as doing otherwise
comment|// might result in mixed segments. See OAK-2192.
if|if
condition|(
name|setHead
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
condition|)
block|{
name|CompactionMap
name|cm
init|=
name|compactor
operator|.
name|getCompactionMap
argument_list|()
decl_stmt|;
name|tracker
operator|.
name|setCompactionMap
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|compactionStrategy
operator|.
name|setCompactionMap
argument_list|(
name|cm
argument_list|)
expr_stmt|;
comment|// Drop the SegmentWriter caches and flush any existing state
comment|// in an attempt to prevent new references to old pre-compacted
comment|// content. TODO: There should be a cleaner way to do this.
name|tracker
operator|.
name|getWriter
argument_list|()
operator|.
name|dropCache
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|getWriter
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|clearSegmentIdTables
argument_list|(
name|compactionStrategy
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|public
name|SegmentVersion
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
block|}
end_class

end_unit

