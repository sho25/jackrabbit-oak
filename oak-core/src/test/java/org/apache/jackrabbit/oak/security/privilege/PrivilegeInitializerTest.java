begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|RootProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SYSTEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|REP_PRIVILEGES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|isNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|PrivilegeInitializerTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
name|PrivilegeInitializer
name|initializer
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|initializer
operator|=
operator|new
name|PrivilegeInitializer
argument_list|(
name|getRootProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testMissingJcrSystem
parameter_list|()
block|{
name|initializer
operator|.
name|initialize
argument_list|(
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlreadyInitialized
parameter_list|()
block|{
name|NodeBuilder
name|nb
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
operator|.
name|hasChildNode
argument_list|(
name|JCR_SYSTEM
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|nb
operator|.
name|getChildNode
argument_list|(
name|JCR_SYSTEM
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nb
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nb
operator|.
name|hasChildNode
argument_list|(
name|REP_PRIVILEGES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|initializer
operator|.
name|initialize
argument_list|(
name|nb
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|nb
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|child
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RuntimeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testPrivilegeRegistrationFails
parameter_list|()
block|{
try|try
block|{
name|NodeState
name|ns
init|=
name|mock
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeBuilder
name|nb
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
operator|.
name|hasChildNode
argument_list|(
name|JCR_SYSTEM
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|nb
operator|.
name|getChildNode
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nb
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nb
operator|.
name|child
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nb
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ns
argument_list|)
expr_stmt|;
name|Tree
name|t
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|t
operator|.
name|hasChild
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Root
name|r
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
operator|.
name|getTree
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|t
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|RootProvider
name|rp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|RootProvider
operator|.
name|class
argument_list|)
operator|.
name|createSystemRoot
argument_list|(
name|any
argument_list|(
name|NodeStore
operator|.
name|class
argument_list|)
argument_list|,
name|isNull
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|PrivilegeInitializer
name|pi
init|=
operator|new
name|PrivilegeInitializer
argument_list|(
name|rp
argument_list|)
decl_stmt|;
name|pi
operator|.
name|initialize
argument_list|(
name|nb
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|RepositoryException
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
end_class

end_unit

