begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|CacheObject
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractCommit
implements|implements
name|Commit
implements|,
name|CacheObject
block|{
comment|// id of root node associated with this commit
specifier|protected
name|Id
name|rootNodeId
decl_stmt|;
comment|// commit timestamp
specifier|protected
name|long
name|commitTS
decl_stmt|;
comment|// commit message
specifier|protected
name|String
name|msg
decl_stmt|;
comment|// changes
specifier|protected
name|String
name|changes
decl_stmt|;
comment|// id of parent commit
specifier|protected
name|Id
name|parentId
decl_stmt|;
comment|// id of branch root commit
specifier|protected
name|Id
name|branchRootId
decl_stmt|;
specifier|protected
name|AbstractCommit
parameter_list|()
block|{     }
specifier|protected
name|AbstractCommit
parameter_list|(
name|Commit
name|other
parameter_list|)
block|{
name|this
operator|.
name|parentId
operator|=
name|other
operator|.
name|getParentId
argument_list|()
expr_stmt|;
name|this
operator|.
name|rootNodeId
operator|=
name|other
operator|.
name|getRootNodeId
argument_list|()
expr_stmt|;
name|this
operator|.
name|msg
operator|=
name|other
operator|.
name|getMsg
argument_list|()
expr_stmt|;
name|this
operator|.
name|changes
operator|=
name|other
operator|.
name|getChanges
argument_list|()
expr_stmt|;
name|this
operator|.
name|commitTS
operator|=
name|other
operator|.
name|getCommitTS
argument_list|()
expr_stmt|;
name|this
operator|.
name|branchRootId
operator|=
name|other
operator|.
name|getBranchRootId
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Id
name|getParentId
parameter_list|()
block|{
return|return
name|parentId
return|;
block|}
specifier|public
name|Id
name|getRootNodeId
parameter_list|()
block|{
return|return
name|rootNodeId
return|;
block|}
specifier|public
name|long
name|getCommitTS
parameter_list|()
block|{
return|return
name|commitTS
return|;
block|}
specifier|public
name|String
name|getMsg
parameter_list|()
block|{
return|return
name|msg
return|;
block|}
specifier|public
name|String
name|getChanges
parameter_list|()
block|{
return|return
name|changes
return|;
block|}
specifier|public
name|Id
name|getBranchRootId
parameter_list|()
block|{
return|return
name|branchRootId
return|;
block|}
specifier|public
name|void
name|serialize
parameter_list|(
name|Binding
name|binding
parameter_list|)
throws|throws
name|Exception
block|{
name|binding
operator|.
name|write
argument_list|(
literal|"rootNodeId"
argument_list|,
name|rootNodeId
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|binding
operator|.
name|write
argument_list|(
literal|"commitTS"
argument_list|,
name|commitTS
argument_list|)
expr_stmt|;
name|binding
operator|.
name|write
argument_list|(
literal|"msg"
argument_list|,
name|msg
operator|==
literal|null
condition|?
literal|""
else|:
name|msg
argument_list|)
expr_stmt|;
name|binding
operator|.
name|write
argument_list|(
literal|"changes"
argument_list|,
name|changes
operator|==
literal|null
condition|?
literal|""
else|:
name|changes
argument_list|)
expr_stmt|;
name|binding
operator|.
name|write
argument_list|(
literal|"parentId"
argument_list|,
name|parentId
operator|==
literal|null
condition|?
literal|""
else|:
name|parentId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|binding
operator|.
name|write
argument_list|(
literal|"branchRootId"
argument_list|,
name|branchRootId
operator|==
literal|null
condition|?
literal|""
else|:
name|branchRootId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//-----------------------------------------------------< Object overrides>
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"rootNodeId: '"
argument_list|)
operator|.
name|append
argument_list|(
name|rootNodeId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"', "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"commitTS: "
argument_list|)
operator|.
name|append
argument_list|(
name|commitTS
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"msg: '"
argument_list|)
operator|.
name|append
argument_list|(
name|msg
operator|==
literal|null
condition|?
literal|""
else|:
name|msg
argument_list|)
operator|.
name|append
argument_list|(
literal|"', "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"changes: '"
argument_list|)
operator|.
name|append
argument_list|(
name|changes
operator|==
literal|null
condition|?
literal|""
else|:
name|changes
argument_list|)
operator|.
name|append
argument_list|(
literal|"', "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"parentId: '"
argument_list|)
operator|.
name|append
argument_list|(
name|parentId
operator|==
literal|null
condition|?
literal|""
else|:
name|parentId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"', "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"branchRootId: '"
argument_list|)
operator|.
name|append
argument_list|(
name|branchRootId
operator|==
literal|null
condition|?
literal|""
else|:
name|branchRootId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMemory
parameter_list|()
block|{
name|int
name|memory
init|=
literal|100
decl_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|memory
operator|+=
literal|2
operator|*
name|msg
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|changes
operator|!=
literal|null
condition|)
block|{
name|memory
operator|+=
literal|2
operator|*
name|changes
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
return|return
name|memory
return|;
block|}
block|}
end_class

end_unit

