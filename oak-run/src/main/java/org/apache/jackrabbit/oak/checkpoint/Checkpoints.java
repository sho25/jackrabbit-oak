begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|checkpoint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_comment
comment|/**  * A helper class to manage checkpoints on TarMK and DocumentMK.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|Checkpoints
block|{
specifier|public
specifier|static
name|Checkpoints
name|onSegmentTar
parameter_list|(
name|File
name|path
parameter_list|,
name|Closer
name|closer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|SegmentTarCheckpoints
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|closer
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Checkpoints
name|onDocumentMK
parameter_list|(
name|DocumentNodeStore
name|store
parameter_list|)
block|{
return|return
operator|new
name|DocumentCheckpoints
argument_list|(
name|store
argument_list|)
return|;
block|}
comment|/**      * @return a list of all checkpoints.      */
specifier|public
specifier|abstract
name|List
argument_list|<
name|CP
argument_list|>
name|list
parameter_list|()
function_decl|;
comment|/**      * Remove all checkpoints.      *      * @return the number of removed checkpoints or {@code -1} if the operation      *          did not succeed.      */
specifier|public
specifier|abstract
name|long
name|removeAll
parameter_list|()
function_decl|;
comment|/**      * Remove all unreferenced checkpoints.      *      * @return the number of removed checkpoints or {@code -1} if the operation      *          did not succeed.      */
specifier|public
specifier|abstract
name|long
name|removeUnreferenced
parameter_list|()
function_decl|;
comment|/**      * Removes the given checkpoint.      *      * @param cp a checkpoint string.      * @return {@code 1} if the checkpoint was successfully remove, {@code 0} if      *          there is no such checkpoint or {@code -1} if the operation did      *          not succeed.      */
specifier|public
specifier|abstract
name|int
name|remove
parameter_list|(
name|String
name|cp
parameter_list|)
function_decl|;
comment|/**      * Return checkpoint metadata      *      * @param cp a checkpoint string.      * @return checkpoints metadata map or null if checkpoint can't be found      */
specifier|public
specifier|abstract
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getInfo
parameter_list|(
name|String
name|cp
parameter_list|)
function_decl|;
comment|/**      * Set the property in the checkpoint metadata.      *      * @param cp a checkpoint string.      * @param name property name      * @param value new value of the property. the property will be removed if the value is {@code null}      * @return {@code 1} if the checkpoint was successfully remove, {@code 0} if      *          there is no such checkpoint or {@code -1} if the operation did      *          not succeed.      */
specifier|public
specifier|abstract
name|int
name|setInfoProperty
parameter_list|(
name|String
name|cp
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
function_decl|;
annotation|@
name|Nonnull
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getReferencedCheckpoints
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|cps
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyState
name|ps
range|:
name|root
operator|.
name|getChildNode
argument_list|(
literal|":async"
argument_list|)
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|ps
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|"async"
argument_list|)
operator|&&
name|ps
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
condition|)
block|{
name|String
name|ref
init|=
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Referenced checkpoint from /:async@"
operator|+
name|name
operator|+
literal|" is "
operator|+
name|ref
argument_list|)
expr_stmt|;
name|cps
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cps
return|;
block|}
specifier|public
specifier|static
specifier|final
class|class
name|CP
block|{
specifier|public
specifier|final
name|String
name|id
decl_stmt|;
specifier|public
specifier|final
name|long
name|created
decl_stmt|;
specifier|public
specifier|final
name|long
name|expires
decl_stmt|;
name|CP
parameter_list|(
name|String
name|id
parameter_list|,
name|long
name|created
parameter_list|,
name|long
name|expires
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|created
operator|=
name|created
expr_stmt|;
name|this
operator|.
name|expires
operator|=
name|expires
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

