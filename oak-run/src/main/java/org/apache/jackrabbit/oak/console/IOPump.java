begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|console
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteStreams
import|;
end_import

begin_comment
comment|/** * Copies bytes from the input to the output stream and closes both of them. */
end_comment

begin_class
specifier|final
class|class
name|IOPump
block|{
specifier|private
specifier|final
name|Thread
name|t
decl_stmt|;
specifier|private
name|IOPump
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|,
specifier|final
name|OutputStream
name|out
parameter_list|)
block|{
name|this
operator|.
name|t
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|ByteStreams
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
literal|"IO Pump Thread"
argument_list|)
expr_stmt|;
name|t
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|static
name|IOPump
name|start
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|OutputStream
name|out
parameter_list|)
block|{
name|IOPump
name|p
init|=
operator|new
name|IOPump
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|p
operator|.
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|p
return|;
block|}
name|void
name|join
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

