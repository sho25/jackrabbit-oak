begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_comment
comment|/**  * A mutable, thread-safe implementation of {@link SegmentReferences}.  */
end_comment

begin_class
class|class
name|MutableSegmentReferences
implements|implements
name|SegmentReferences
block|{
specifier|private
specifier|final
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|SegmentId
argument_list|>
name|ids
init|=
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|SegmentId
argument_list|,
name|Integer
argument_list|>
name|numbers
init|=
name|newHashMap
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|SegmentId
name|getSegmentId
parameter_list|(
name|int
name|reference
parameter_list|)
block|{
name|SegmentId
name|id
init|=
name|ids
operator|.
name|get
argument_list|(
name|reference
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
return|return
name|id
return|;
block|}
synchronized|synchronized
init|(
name|lock
init|)
block|{
return|return
name|ids
operator|.
name|get
argument_list|(
name|reference
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
comment|/**      * Generate a reference or return the existing reference for the provided      * segment ID.      *      * @param id an instance of {@link SegmentId}. It should not be {@code      *           null}.      * @return a reference to the provided segment ID. The reference number is      * strictly greater than zero.      */
name|int
name|addOrReference
parameter_list|(
name|SegmentId
name|id
parameter_list|)
block|{
name|Integer
name|number
init|=
name|numbers
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|number
operator|!=
literal|null
condition|)
block|{
return|return
name|number
return|;
block|}
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|number
operator|=
name|numbers
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|number
operator|!=
literal|null
condition|)
block|{
return|return
name|number
return|;
block|}
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|number
operator|=
name|ids
operator|.
name|size
argument_list|()
expr_stmt|;
name|numbers
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|number
argument_list|)
expr_stmt|;
return|return
name|number
return|;
block|}
block|}
comment|/**      * Return the number of references (segment IDs) accessible from this      * instance.      *      * @return the number of references (segment IDs) accessible from this      * instance.      */
name|int
name|size
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
return|return
name|numbers
operator|.
name|size
argument_list|()
return|;
block|}
block|}
comment|/**      * Check if a reference exists for a provided segment ID.      *      * @param id The segment ID to check for a reference.      * @return {@code true} if a reference exists for the provided segment ID,      * {@code false} otherwise.      */
name|boolean
name|contains
parameter_list|(
name|SegmentId
name|id
parameter_list|)
block|{
name|boolean
name|contains
init|=
name|numbers
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|contains
condition|)
block|{
return|return
literal|true
return|;
block|}
synchronized|synchronized
init|(
name|lock
init|)
block|{
return|return
name|numbers
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|SegmentId
argument_list|>
name|iterator
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
return|return
name|ids
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

