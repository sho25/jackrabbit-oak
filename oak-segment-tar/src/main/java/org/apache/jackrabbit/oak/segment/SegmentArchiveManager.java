begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|GCGeneration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|TarEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|binaries
operator|.
name|BinaryReferencesIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|binaries
operator|.
name|InvalidBinaryReferencesIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_comment
comment|/**  * SegmentArchiveManager provides a low-level access to the segment files (eg.  * stored in the .tar). It allows to perform a few FS-like operations (delete,  * rename, copy, etc.) and also opens the segment archives either for reading  * or reading and writing.  */
end_comment

begin_interface
specifier|public
interface|interface
name|SegmentArchiveManager
block|{
comment|/**      * List names of the available archives.      *      * @return archive list      */
annotation|@
name|Nonnull
name|List
argument_list|<
name|String
argument_list|>
name|listArchives
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Opens a given archive for reading.      *      * @param archiveName      * @return the archive reader or null if the archive doesn't exist      */
annotation|@
name|Nullable
name|SegmentArchiveReader
name|open
parameter_list|(
annotation|@
name|Nonnull
name|String
name|archiveName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Creates a new archive.      *      * @param archiveName      * @return the archive writer      */
annotation|@
name|Nonnull
name|SegmentArchiveWriter
name|create
parameter_list|(
annotation|@
name|Nonnull
name|String
name|archiveName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Deletes the archive if exists.      *      * @param archiveName      * @return true if the archive was removed, false otherwise      */
name|boolean
name|delete
parameter_list|(
annotation|@
name|Nonnull
name|String
name|archiveName
parameter_list|)
function_decl|;
comment|/**      * Renames the archive.      *      * @param from the existing archive      * @param to new name      * @return true if the archive was renamed, false otherwise      */
name|boolean
name|renameTo
parameter_list|(
annotation|@
name|Nonnull
name|String
name|from
parameter_list|,
annotation|@
name|Nonnull
name|String
name|to
parameter_list|)
function_decl|;
comment|/**      * Copies the archive with all the segments.      *      * @param from the existing archive      * @param to new name      */
name|void
name|copyFile
parameter_list|(
annotation|@
name|Nonnull
name|String
name|from
parameter_list|,
annotation|@
name|Nonnull
name|String
name|to
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Check if archive exists.      *      * @param archiveName archive to check      * @return true if archive exists, false otherwise      */
name|boolean
name|exists
parameter_list|(
annotation|@
name|Nonnull
name|String
name|archiveName
parameter_list|)
function_decl|;
comment|/**      * Finds all the segments included in the archive.      *      * @param archiveName archive to recover      * @param entries results will be put there, in the order of presence in the      *                archive      */
name|void
name|recoverEntries
parameter_list|(
annotation|@
name|Nonnull
name|String
name|archiveName
parameter_list|,
annotation|@
name|Nonnull
name|LinkedHashMap
argument_list|<
name|UUID
argument_list|,
name|byte
index|[]
argument_list|>
name|entries
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Allows to write in the new archive.      */
interface|interface
name|SegmentArchiveWriter
block|{
comment|/**          * Write the new segment to the archive.          *          * @param msb          * @param lsb          * @param data          * @param offset          * @param size          * @param generation          * @return the entry representing the new segment. Can be later used for the {@link #readSegment(TarEntry)} method.          */
annotation|@
name|Nonnull
name|TarEntry
name|writeSegment
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|,
annotation|@
name|Nonnull
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|size
parameter_list|,
annotation|@
name|Nonnull
name|GCGeneration
name|generation
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**          * Read the segment.          *          * @param tarEntry          * @return byte buffer containing the segment data or null if segment doesn't exist          */
annotation|@
name|Nullable
name|ByteBuffer
name|readSegment
parameter_list|(
annotation|@
name|Nonnull
name|TarEntry
name|tarEntry
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**          * Write the index data.          *          * @param data          */
name|void
name|writeIndex
parameter_list|(
annotation|@
name|Nonnull
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**          * Write the graph data.          *          * @param data          */
name|void
name|writeGraph
parameter_list|(
annotation|@
name|Nonnull
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**          * Write the binary references data.          *          * @param data          */
name|void
name|writeBinaryReferences
parameter_list|(
annotation|@
name|Nonnull
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**          * Get the current length of the archive.          *          * @return length of the archive, in bytes          */
name|long
name|getLength
parameter_list|()
function_decl|;
comment|/**          * Close the archive.          */
name|void
name|close
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**          * Check if the archive has been created (eg. something has been written).          *          * @return true if the archive has been created, false otherwise          */
name|boolean
name|isCreated
parameter_list|()
function_decl|;
comment|/**          * Flush all the data to the storage.          */
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**          * Get the name of the archive.          *          * @return archive name          */
annotation|@
name|Nonnull
name|String
name|getName
parameter_list|()
function_decl|;
block|}
interface|interface
name|SegmentArchiveReader
block|{
comment|/**          * Read the segment.          *          * @param msb          * @param lsb          * @return byte buffer containing the segment data or null if segment doesn't exist          */
annotation|@
name|Nullable
name|ByteBuffer
name|readSegment
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**          * Returns the index.          *          * @return segment index          */
annotation|@
name|Nonnull
name|Index
name|getIndex
parameter_list|()
function_decl|;
comment|/**          * Loads and returns the graph.          *          * @return the segment graph or null if the persisted graph doesn't exist.          */
annotation|@
name|Nullable
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|getGraph
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**          * Check if the persisted graph exists.          *          * @return true if the graph exists, false otherwise          */
name|boolean
name|hasGraph
parameter_list|()
function_decl|;
comment|/**          * Loads and returns the binary references.          *          * @return binary references          */
annotation|@
name|Nonnull
name|BinaryReferencesIndex
name|getBinaryReferences
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidBinaryReferencesIndexException
function_decl|;
comment|/**          * Get the current length of the archive.          *          * @return length of the archive, in bytes          */
name|long
name|length
parameter_list|()
function_decl|;
comment|/**          * Get the name of the archive.          *          * @return archive name          */
annotation|@
name|Nonnull
name|String
name|getName
parameter_list|()
function_decl|;
comment|/**          * Close the archive.          */
name|void
name|close
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**          * Returns the size of the entry          * @param size          * @return          */
name|int
name|getEntrySize
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
block|}
block|}
end_interface

end_unit

