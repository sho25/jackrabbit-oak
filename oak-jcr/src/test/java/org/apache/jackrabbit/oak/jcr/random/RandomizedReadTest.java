begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|random
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashBasedTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|RandomizedReadTest
extends|extends
name|AbstractRandomizedTest
block|{
specifier|private
specifier|static
specifier|final
name|int
name|depth
init|=
literal|4
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Table
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|tree
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
static|static
block|{
name|tree
operator|.
name|put
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|"/n1"
argument_list|)
expr_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|"/n2"
argument_list|)
expr_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|"/n1/n3"
argument_list|)
expr_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"/n1/n4"
argument_list|)
expr_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|"/n1/n5"
argument_list|)
expr_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|"/n1/n3/n6"
argument_list|)
expr_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|"/n1/n3/n7"
argument_list|)
expr_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|"/n1/n3/n8"
argument_list|)
expr_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|"/n1/n3/n9"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setupContent
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|JackrabbitSession
name|session
range|:
name|writeSessions
control|)
block|{
name|Node
name|root
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Node
name|n1
init|=
name|root
operator|.
name|addNode
argument_list|(
literal|"n1"
argument_list|)
decl_stmt|;
name|Node
name|n3
init|=
name|n1
operator|.
name|addNode
argument_list|(
literal|"n3"
argument_list|)
decl_stmt|;
name|n1
operator|.
name|addNode
argument_list|(
literal|"n4"
argument_list|)
expr_stmt|;
name|n1
operator|.
name|addNode
argument_list|(
literal|"n5"
argument_list|)
expr_stmt|;
name|n3
operator|.
name|addNode
argument_list|(
literal|"n6"
argument_list|)
expr_stmt|;
name|n3
operator|.
name|addNode
argument_list|(
literal|"n7"
argument_list|)
expr_stmt|;
name|n3
operator|.
name|addNode
argument_list|(
literal|"n8"
argument_list|)
expr_stmt|;
name|n3
operator|.
name|addNode
argument_list|(
literal|"n9"
argument_list|)
expr_stmt|;
name|root
operator|.
name|addNode
argument_list|(
literal|"n2"
argument_list|)
expr_stmt|;
name|Principal
name|principal
init|=
name|getTestPrincipal
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|AccessControlManager
name|acm
init|=
name|session
operator|.
name|getAccessControlManager
argument_list|()
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acm
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|principal
argument_list|,
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acm
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setPolicy
argument_list|(
literal|"/"
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|clearContent
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|JackrabbitSession
name|session
range|:
name|writeSessions
control|)
block|{
name|Node
name|root
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
literal|"n1"
argument_list|)
condition|)
block|{
name|root
operator|.
name|getNode
argument_list|(
literal|"n1"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
literal|"n2"
argument_list|)
condition|)
block|{
name|root
operator|.
name|getNode
argument_list|(
literal|"n2"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|AccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|session
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|acl
operator|!=
literal|null
condition|)
block|{
name|boolean
name|modified
init|=
literal|false
decl_stmt|;
for|for
control|(
name|AccessControlEntry
name|ace
range|:
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
control|)
block|{
if|if
condition|(
name|getTestPrincipal
argument_list|(
name|session
argument_list|)
operator|.
name|equals
argument_list|(
name|ace
operator|.
name|getPrincipal
argument_list|()
argument_list|)
condition|)
block|{
name|acl
operator|.
name|removeAccessControlEntry
argument_list|(
name|ace
argument_list|)
expr_stmt|;
name|modified
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|modified
condition|)
block|{
name|session
operator|.
name|getAccessControlManager
argument_list|()
operator|.
name|setPolicy
argument_list|(
literal|"/"
argument_list|,
name|acl
argument_list|)
expr_stmt|;
block|}
block|}
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadAcl
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|1
condition|;
name|j
operator|++
control|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|int
name|operations
init|=
literal|1000
decl_stmt|;
name|int
name|depthToApply
decl_stmt|;
name|int
name|index
decl_stmt|;
name|boolean
name|allow
decl_stmt|;
name|int
name|principalIndex
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operations
condition|;
name|i
operator|++
control|)
block|{
name|allow
operator|=
name|r
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
name|depthToApply
operator|=
name|r
operator|.
name|nextInt
argument_list|(
name|depth
argument_list|)
expr_stmt|;
name|principalIndex
operator|=
name|r
operator|.
name|nextInt
argument_list|(
name|ids
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|depthToApply
operator|>
literal|0
condition|)
block|{
name|index
operator|=
name|r
operator|.
name|nextInt
argument_list|(
name|depthToApply
operator|+
literal|1
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|getPath
argument_list|(
name|depthToApply
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|setupPermissions
argument_list|(
name|principalIndex
argument_list|,
name|path
argument_list|,
name|allow
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
expr_stmt|;
name|check
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|String
name|getPath
parameter_list|(
name|int
name|depth
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|depth
operator|==
literal|0
condition|)
block|{
return|return
literal|"/"
return|;
block|}
return|return
name|tree
operator|.
name|get
argument_list|(
name|depth
argument_list|,
name|index
argument_list|)
return|;
block|}
specifier|public
name|void
name|check
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|mustThrow
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|path
range|:
name|tree
operator|.
name|values
argument_list|()
control|)
block|{
name|mustThrow
operator|=
literal|false
expr_stmt|;
name|Session
name|s1
init|=
name|readSessions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|Node
name|n
init|=
name|s1
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|equals
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"did not resolved the same node"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|pnf
parameter_list|)
block|{
name|mustThrow
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|readSessions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|Node
name|n
init|=
name|readSessions
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|mustThrow
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"did not throw for path "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|path
operator|.
name|equals
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"did not resolved the same node"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|pnf
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mustThrow
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"did throw for path "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|setupPermissions
parameter_list|(
name|int
name|principalIndex
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|allow
parameter_list|,
name|String
modifier|...
name|privilegeNames
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|JackrabbitSession
name|session
range|:
name|writeSessions
control|)
block|{
name|Principal
name|principal
init|=
name|getPrincipal
argument_list|(
name|session
argument_list|,
name|principalIndex
argument_list|)
decl_stmt|;
name|AccessControlManager
name|acm
init|=
name|session
operator|.
name|getAccessControlManager
argument_list|()
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acm
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|principal
argument_list|,
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acm
argument_list|,
name|privilegeNames
argument_list|)
argument_list|,
name|allow
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setPolicy
argument_list|(
name|path
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

