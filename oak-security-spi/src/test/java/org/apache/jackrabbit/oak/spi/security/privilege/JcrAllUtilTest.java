begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|JcrAllUtil
operator|.
name|DYNAMIC_JCR_ALL_VALUE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|JcrAllUtilTest
implements|implements
name|PrivilegeConstants
block|{
specifier|private
specifier|static
specifier|final
name|Long
name|ALL
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PropertyState
name|ALL_PROPERTY
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|REP_BITS
argument_list|,
name|Longs
operator|.
name|asList
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|Type
operator|.
name|LONGS
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|PrivilegeBits
name|ALL_BITS
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|ALL_PROPERTY
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PropertyState
name|DYNAMIC_ALL_PROPERTY
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"anyName"
argument_list|,
name|Longs
operator|.
name|asList
argument_list|(
name|DYNAMIC_JCR_ALL_VALUE
argument_list|)
argument_list|,
name|Type
operator|.
name|LONGS
argument_list|)
decl_stmt|;
specifier|private
name|Tree
name|privTree
decl_stmt|;
specifier|private
name|Tree
name|jcrAllDefTree
decl_stmt|;
specifier|private
name|Root
name|root
decl_stmt|;
specifier|private
name|PrivilegeBitsProvider
name|bitsProvider
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
block|{
name|jcrAllDefTree
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|jcrAllDefTree
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|jcrAllDefTree
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|JCR_ALL
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|jcrAllDefTree
operator|.
name|getProperty
argument_list|(
name|REP_BITS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ALL_PROPERTY
argument_list|)
expr_stmt|;
name|privTree
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|privTree
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|privTree
operator|.
name|hasChild
argument_list|(
name|JCR_ALL
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|privTree
operator|.
name|getChild
argument_list|(
name|JCR_ALL
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jcrAllDefTree
argument_list|)
expr_stmt|;
name|root
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|PRIVILEGES_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|privTree
argument_list|)
expr_stmt|;
name|bitsProvider
operator|=
operator|new
name|PrivilegeBitsProvider
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInstanceBuiltin
parameter_list|()
block|{
name|PrivilegeBits
name|readBits
init|=
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|REP_READ_NODES
argument_list|)
decl_stmt|;
name|PropertyState
name|propState
init|=
name|readBits
operator|.
name|asPropertyState
argument_list|(
operator|(
literal|"anyName"
operator|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|readBits
argument_list|,
name|JcrAllUtil
operator|.
name|getPrivilegeBits
argument_list|(
name|propState
argument_list|,
name|bitsProvider
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAsPropertyStateBuiltin
parameter_list|()
block|{
name|PrivilegeBits
name|readBits
init|=
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|REP_READ_NODES
argument_list|)
decl_stmt|;
name|PropertyState
name|propertyState
init|=
name|JcrAllUtil
operator|.
name|asPropertyState
argument_list|(
literal|"anyName"
argument_list|,
name|readBits
argument_list|,
name|bitsProvider
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|readBits
operator|.
name|asPropertyState
argument_list|(
literal|"anyName"
argument_list|)
argument_list|,
name|propertyState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInstanceCombined
parameter_list|()
block|{
name|PrivilegeBits
name|bits
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|bits
operator|.
name|add
argument_list|(
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|REP_READ_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|bits
operator|.
name|add
argument_list|(
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|REP_WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyState
name|propState
init|=
name|bits
operator|.
name|asPropertyState
argument_list|(
literal|"anyName"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bits
operator|.
name|unmodifiable
argument_list|()
argument_list|,
name|JcrAllUtil
operator|.
name|getPrivilegeBits
argument_list|(
name|propState
argument_list|,
name|bitsProvider
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAsPropertyStateCombined
parameter_list|()
block|{
name|PrivilegeBits
name|bits
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|bits
operator|.
name|add
argument_list|(
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|REP_READ_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|bits
operator|.
name|add
argument_list|(
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|REP_WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyState
name|expected
init|=
name|bits
operator|.
name|asPropertyState
argument_list|(
literal|"anyName"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|JcrAllUtil
operator|.
name|asPropertyState
argument_list|(
literal|"anyName"
argument_list|,
name|bits
argument_list|,
name|bitsProvider
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInstanceDynamicAll
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|ALL_BITS
argument_list|,
name|JcrAllUtil
operator|.
name|getPrivilegeBits
argument_list|(
name|DYNAMIC_ALL_PROPERTY
argument_list|,
name|bitsProvider
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAsPropertyStateDynamicAll
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|DYNAMIC_ALL_PROPERTY
argument_list|,
name|JcrAllUtil
operator|.
name|asPropertyState
argument_list|(
literal|"anyName"
argument_list|,
name|ALL_BITS
argument_list|,
name|bitsProvider
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDenotesDynamicAllNullPropertyState
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|JcrAllUtil
operator|.
name|denotesDynamicJcrAll
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDenotesDynamicAllNotLongsPropertyState
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|JcrAllUtil
operator|.
name|denotesDynamicJcrAll
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"any"
argument_list|,
literal|"String"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|JcrAllUtil
operator|.
name|denotesDynamicJcrAll
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"any"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"mv"
argument_list|,
literal|"strings"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|JcrAllUtil
operator|.
name|denotesDynamicJcrAll
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"any"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDenotesDynamicAllMVLongPropertyState
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|JcrAllUtil
operator|.
name|denotesDynamicJcrAll
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"any"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Type
operator|.
name|LONGS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDenotesDynamicAllSingleLongPropertyState
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|JcrAllUtil
operator|.
name|denotesDynamicJcrAll
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"any"
argument_list|,
name|DYNAMIC_JCR_ALL_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDenotesDynamicAll
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|JcrAllUtil
operator|.
name|denotesDynamicJcrAll
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"any"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DYNAMIC_JCR_ALL_VALUE
argument_list|)
argument_list|,
name|Type
operator|.
name|LONGS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

