begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ImportUUIDBehavior
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ItemExistsException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ItemNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceRegistry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFormatException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|NamespaceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|GlobalNameMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapperImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|EffectiveNodeTypeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|NodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|PropInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedItemImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedNodeImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedPropertyImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ReferenceChangeTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *<code>SessionImporter</code> ...  */
end_comment

begin_class
specifier|public
class|class
name|SessionImporter
implements|implements
name|Importer
block|{
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SessionImporter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Session
name|session
decl_stmt|;
specifier|private
specifier|final
name|Node
name|importTargetNode
decl_stmt|;
specifier|private
specifier|final
name|Root
name|root
decl_stmt|;
specifier|private
specifier|final
name|int
name|uuidBehavior
decl_stmt|;
specifier|private
specifier|final
name|NamespaceHelper
name|namespaceHelper
decl_stmt|;
specifier|private
name|Stack
argument_list|<
name|Node
argument_list|>
name|parents
decl_stmt|;
comment|/**      * helper object that keeps track of remapped uuid's and imported reference      * properties that might need correcting depending on the uuid mappings      */
specifier|private
specifier|final
name|ReferenceChangeTracker
name|refTracker
decl_stmt|;
comment|//TODO clarify how to provide ProtectedItemImporters
specifier|private
specifier|final
name|List
argument_list|<
name|ProtectedItemImporter
argument_list|>
name|pItemImporters
init|=
operator|new
name|ArrayList
argument_list|<
name|ProtectedItemImporter
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|ProtectedItemImporter
argument_list|>
name|pItemImportersInitialized
init|=
operator|new
name|ArrayList
argument_list|<
name|ProtectedItemImporter
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Currently active importer for protected nodes.      */
specifier|private
name|ProtectedNodeImporter
name|pnImporter
init|=
literal|null
decl_stmt|;
comment|/**      * Creates a new<code>SessionImporter</code> instance.      *      * @param importTargetNode the target node      * @param session          session      * @param uuidBehavior     any of the constants declared by      *                         {@link javax.jcr.ImportUUIDBehavior}      */
specifier|public
name|SessionImporter
parameter_list|(
name|Node
name|importTargetNode
parameter_list|,
name|Root
name|root
parameter_list|,
name|Session
name|session
parameter_list|,
name|NamespaceHelper
name|helper
parameter_list|,
name|int
name|uuidBehavior
parameter_list|)
block|{
name|this
operator|.
name|importTargetNode
operator|=
name|importTargetNode
expr_stmt|;
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|namespaceHelper
operator|=
name|helper
expr_stmt|;
name|this
operator|.
name|uuidBehavior
operator|=
name|uuidBehavior
expr_stmt|;
name|refTracker
operator|=
operator|new
name|ReferenceChangeTracker
argument_list|()
expr_stmt|;
name|parents
operator|=
operator|new
name|Stack
argument_list|<
name|Node
argument_list|>
argument_list|()
expr_stmt|;
name|parents
operator|.
name|push
argument_list|(
name|importTargetNode
argument_list|)
expr_stmt|;
comment|//TODO clarify how to provide correct NamePathMapper
name|NamePathMapperImpl
name|namePathMapper
init|=
operator|new
name|NamePathMapperImpl
argument_list|(
operator|new
name|GlobalNameMapper
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getNamespaceMap
parameter_list|()
block|{
try|try
block|{
return|return
name|namespaceHelper
operator|.
name|getNamespaces
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"could not read namespace mappings"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|pItemImportersInitialized
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ProtectedItemImporter
name|importer
range|:
name|pItemImporters
control|)
block|{
if|if
condition|(
name|importer
operator|.
name|init
argument_list|(
name|session
argument_list|,
name|root
argument_list|,
name|namePathMapper
argument_list|,
literal|false
argument_list|,
name|uuidBehavior
argument_list|,
name|refTracker
argument_list|)
condition|)
block|{
name|pItemImportersInitialized
operator|.
name|add
argument_list|(
name|importer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * make sure the editing session is allowed create nodes with a      * specified node type (and ev. mixins),<br>      * NOTE: this check is not executed in a single place as the parent      * may change in case of      * {@link javax.jcr.ImportUUIDBehavior#IMPORT_UUID_COLLISION_REPLACE_EXISTING IMPORT_UUID_COLLISION_REPLACE_EXISTING}.      *      * @param parent   parent node      * @param nodeName the name      * @throws javax.jcr.RepositoryException if an error occurs      */
specifier|protected
name|void
name|checkPermission
parameter_list|(
name|Node
name|parent
parameter_list|,
name|String
name|nodeName
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|//TODO clarify how to check permissions (is it necessary at all?)
comment|//        if (!session.getAccessControlManager().isGranted(session.getQPath(parent.getPath()), nodeName, Permissions.NODE_TYPE_MANAGEMENT)) {
comment|//            throw new AccessDeniedException("Insufficient permission.");
comment|//        }
block|}
specifier|protected
name|Node
name|createNode
parameter_list|(
name|Node
name|parent
parameter_list|,
name|String
name|nodeName
parameter_list|,
name|String
name|nodeTypeName
parameter_list|,
name|String
index|[]
name|mixinNames
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|node
decl_stmt|;
comment|// add node
name|node
operator|=
name|parent
operator|.
name|addNode
argument_list|(
name|nodeName
argument_list|,
name|nodeTypeName
operator|==
literal|null
condition|?
name|namespaceHelper
operator|.
name|getJcrName
argument_list|(
name|NamespaceRegistry
operator|.
name|NAMESPACE_NT
argument_list|,
literal|"unstructured"
argument_list|)
else|:
name|nodeTypeName
argument_list|)
expr_stmt|;
comment|// add mixins
if|if
condition|(
name|mixinNames
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|mixinName
range|:
name|mixinNames
control|)
block|{
name|node
operator|.
name|addMixin
argument_list|(
name|mixinName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|node
return|;
block|}
specifier|protected
name|void
name|createProperty
parameter_list|(
name|Node
name|node
parameter_list|,
name|PropInfo
name|pInfo
parameter_list|,
name|PropertyDefinition
name|def
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// convert serialized values to Value objects
name|Value
index|[]
name|va
init|=
name|pInfo
operator|.
name|getValues
argument_list|(
name|pInfo
operator|.
name|getTargetType
argument_list|(
name|def
argument_list|)
argument_list|)
decl_stmt|;
comment|// multi- or single-valued property?
name|String
name|name
init|=
name|pInfo
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|type
init|=
name|pInfo
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|va
operator|.
name|length
operator|==
literal|1
operator|&&
operator|!
name|def
operator|.
name|isMultiple
argument_list|()
condition|)
block|{
name|Exception
name|e
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// set single-value
name|node
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|va
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ValueFormatException
name|vfe
parameter_list|)
block|{
name|e
operator|=
name|vfe
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConstraintViolationException
name|cve
parameter_list|)
block|{
name|e
operator|=
name|cve
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
comment|// setting single-value failed, try setting value array
comment|// as a last resort (in case there are ambiguous property
comment|// definitions)
name|node
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|va
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// can only be multi-valued (n == 0 || n> 1)
name|node
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|va
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
name|PropertyType
operator|.
name|REFERENCE
operator|||
name|type
operator|==
name|PropertyType
operator|.
name|WEAKREFERENCE
condition|)
block|{
comment|// store reference for later resolution
name|refTracker
operator|.
name|processedReference
argument_list|(
name|node
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Node
name|resolveUUIDConflict
parameter_list|(
name|Node
name|parent
parameter_list|,
name|String
name|conflictingId
parameter_list|,
name|NodeInfo
name|nodeInfo
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|node
decl_stmt|;
name|Node
name|conflicting
decl_stmt|;
try|try
block|{
name|conflicting
operator|=
name|session
operator|.
name|getNodeByIdentifier
argument_list|(
name|conflictingId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ItemNotFoundException
name|infe
parameter_list|)
block|{
comment|// conflicting node can't be read,
comment|// most likely due to lack of read permission
name|conflicting
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|uuidBehavior
operator|==
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
condition|)
block|{
comment|// create new with new uuid
name|checkPermission
argument_list|(
name|parent
argument_list|,
name|nodeInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|=
name|createNode
argument_list|(
name|parent
argument_list|,
name|nodeInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|nodeInfo
operator|.
name|getPrimaryTypeName
argument_list|()
argument_list|,
name|nodeInfo
operator|.
name|getMixinTypeNames
argument_list|()
argument_list|)
expr_stmt|;
comment|// remember uuid mapping
if|if
condition|(
name|node
operator|.
name|isNodeType
argument_list|(
name|JcrConstants
operator|.
name|MIX_REFERENCEABLE
argument_list|)
condition|)
block|{
name|refTracker
operator|.
name|put
argument_list|(
name|nodeInfo
operator|.
name|getUUID
argument_list|()
argument_list|,
name|node
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|uuidBehavior
operator|==
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_THROW
condition|)
block|{
comment|// if conflicting node is shareable, then clone it
name|String
name|msg
init|=
literal|"a node with uuid "
operator|+
name|nodeInfo
operator|.
name|getUUID
argument_list|()
operator|+
literal|" already exists!"
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ItemExistsException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|uuidBehavior
operator|==
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REMOVE_EXISTING
condition|)
block|{
if|if
condition|(
name|conflicting
operator|==
literal|null
condition|)
block|{
comment|// since the conflicting node can't be read,
comment|// we can't remove it
name|String
name|msg
init|=
literal|"node with uuid "
operator|+
name|conflictingId
operator|+
literal|" cannot be removed"
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|// make sure conflicting node is not importTargetNode or an ancestor thereof
if|if
condition|(
name|importTargetNode
operator|.
name|getPath
argument_list|()
operator|.
name|startsWith
argument_list|(
name|conflicting
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"cannot remove ancestor node"
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|// remove conflicting
name|conflicting
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// create new with given uuid
name|checkPermission
argument_list|(
name|parent
argument_list|,
name|nodeInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|=
name|createNode
argument_list|(
name|parent
argument_list|,
name|nodeInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|nodeInfo
operator|.
name|getPrimaryTypeName
argument_list|()
argument_list|,
name|nodeInfo
operator|.
name|getMixinTypeNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|uuidBehavior
operator|==
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REPLACE_EXISTING
condition|)
block|{
if|if
condition|(
name|conflicting
operator|==
literal|null
condition|)
block|{
comment|// since the conflicting node can't be read,
comment|// we can't replace it
name|String
name|msg
init|=
literal|"node with uuid "
operator|+
name|conflictingId
operator|+
literal|" cannot be replaced"
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|conflicting
operator|.
name|getDepth
argument_list|()
operator|==
literal|0
condition|)
block|{
name|String
name|msg
init|=
literal|"root node cannot be replaced"
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|// 'replace' current parent with parent of conflicting
name|parent
operator|=
name|conflicting
operator|.
name|getParent
argument_list|()
expr_stmt|;
comment|// replace child node
name|checkPermission
argument_list|(
name|parent
argument_list|,
name|nodeInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO ordering! (what happened to replace?)
name|conflicting
operator|.
name|remove
argument_list|()
expr_stmt|;
name|node
operator|=
name|createNode
argument_list|(
name|parent
argument_list|,
name|nodeInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|nodeInfo
operator|.
name|getPrimaryTypeName
argument_list|()
argument_list|,
name|nodeInfo
operator|.
name|getMixinTypeNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|msg
init|=
literal|"unknown uuidBehavior: "
operator|+
name|uuidBehavior
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
name|node
return|;
block|}
comment|//-------------------------------------------------------------< Importer>
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// nop
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|startNode
parameter_list|(
name|NodeInfo
name|nodeInfo
parameter_list|,
name|List
argument_list|<
name|PropInfo
argument_list|>
name|propInfos
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|parent
init|=
name|parents
operator|.
name|peek
argument_list|()
decl_stmt|;
comment|// process node
name|Node
name|node
init|=
literal|null
decl_stmt|;
name|String
name|id
init|=
name|nodeInfo
operator|.
name|getUUID
argument_list|()
decl_stmt|;
name|String
name|nodeName
init|=
name|nodeInfo
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|ntName
init|=
name|nodeInfo
operator|.
name|getPrimaryTypeName
argument_list|()
decl_stmt|;
name|String
index|[]
name|mixins
init|=
name|nodeInfo
operator|.
name|getMixinTypeNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Skipping node: "
operator|+
name|nodeName
argument_list|)
expr_stmt|;
comment|// parent node was skipped, skip this child node too
name|parents
operator|.
name|push
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// push null onto stack for skipped node
comment|// notify the p-i-importer
if|if
condition|(
name|pnImporter
operator|!=
literal|null
condition|)
block|{
name|pnImporter
operator|.
name|startChildInfo
argument_list|(
name|nodeInfo
argument_list|,
name|propInfos
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|parent
operator|.
name|getDefinition
argument_list|()
operator|.
name|isProtected
argument_list|()
condition|)
block|{
comment|// skip protected node
name|parents
operator|.
name|push
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Skipping protected node: "
operator|+
name|nodeName
argument_list|)
expr_stmt|;
if|if
condition|(
name|pnImporter
operator|!=
literal|null
condition|)
block|{
comment|// pnImporter was already started (current nodeInfo is a sibling)
comment|// notify it about this child node.
name|pnImporter
operator|.
name|startChildInfo
argument_list|(
name|nodeInfo
argument_list|,
name|propInfos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no importer defined yet:
comment|// test if there is a ProtectedNodeImporter among the configured
comment|// importers that can handle this.
comment|// if there is one, notify the ProtectedNodeImporter about the
comment|// start of a item tree that is protected by this parent. If it
comment|// potentially is able to deal with it, notify it about the child node.
for|for
control|(
name|ProtectedItemImporter
name|pni
range|:
name|pItemImporters
control|)
block|{
if|if
condition|(
name|pni
operator|instanceof
name|ProtectedNodeImporter
operator|&&
operator|(
operator|(
name|ProtectedNodeImporter
operator|)
name|pni
operator|)
operator|.
name|start
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|parent
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Protected node -> delegated to ProtectedNodeImporter"
argument_list|)
expr_stmt|;
name|pnImporter
operator|=
operator|(
name|ProtectedNodeImporter
operator|)
name|pni
expr_stmt|;
name|pnImporter
operator|.
name|startChildInfo
argument_list|(
name|nodeInfo
argument_list|,
name|propInfos
argument_list|)
expr_stmt|;
break|break;
block|}
comment|/* else: p-i-Importer isn't able to deal with the protected tree.                      try next. and if none can handle the passed parent the                      tree below will be skipped */
block|}
block|}
return|return;
block|}
if|if
condition|(
name|parent
operator|.
name|hasNode
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
comment|// a node with that name already exists...
name|Node
name|existing
init|=
name|parent
operator|.
name|getNode
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
name|NodeDefinition
name|def
init|=
name|existing
operator|.
name|getDefinition
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|def
operator|.
name|allowsSameNameSiblings
argument_list|()
condition|)
block|{
comment|// existing doesn't allow same-name siblings,
comment|// check for potential conflicts
if|if
condition|(
name|def
operator|.
name|isProtected
argument_list|()
operator|&&
name|existing
operator|.
name|isNodeType
argument_list|(
name|ntName
argument_list|)
condition|)
block|{
comment|/*                      use the existing node as parent for the possible subsequent                      import of a protected tree, that the protected node importer                      may or may not be able to deal with.                      -> upon the next 'startNode' the check for the parent being                         protected will notify the protected node importer.                      -> if the importer is able to deal with that node it needs                         to care of the complete subtree until it is notified                         during the 'endNode' call.                      -> if the import can't deal with that node or if that node                         is the a leaf in the tree to be imported 'end' will                         not have an effect on the importer, that was never started.                     */
name|log
operator|.
name|debug
argument_list|(
literal|"Skipping protected node: "
operator|+
name|existing
argument_list|)
expr_stmt|;
name|parents
operator|.
name|push
argument_list|(
name|existing
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|def
operator|.
name|isAutoCreated
argument_list|()
operator|&&
name|existing
operator|.
name|isNodeType
argument_list|(
name|ntName
argument_list|)
condition|)
block|{
comment|// this node has already been auto-created, no need to create it
name|node
operator|=
name|existing
expr_stmt|;
block|}
else|else
block|{
comment|// edge case: colliding node does have same uuid
comment|// (see http://issues.apache.org/jira/browse/JCR-1128)
if|if
condition|(
operator|!
operator|(
name|existing
operator|.
name|getIdentifier
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
operator|&&
operator|(
name|uuidBehavior
operator|==
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REMOVE_EXISTING
operator|||
name|uuidBehavior
operator|==
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REPLACE_EXISTING
operator|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|ItemExistsException
argument_list|(
literal|"Node with the same UUID exists:"
operator|+
name|existing
argument_list|)
throw|;
block|}
comment|// fall through
block|}
block|}
block|}
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
comment|// create node
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
comment|// no potential uuid conflict, always add new node
name|checkPermission
argument_list|(
name|parent
argument_list|,
name|nodeName
argument_list|)
expr_stmt|;
name|node
operator|=
name|createNode
argument_list|(
name|parent
argument_list|,
name|nodeName
argument_list|,
name|ntName
argument_list|,
name|mixins
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// potential uuid conflict
name|boolean
name|isConflicting
decl_stmt|;
try|try
block|{
comment|// the following is a fail-fast test whether
comment|// an item exists (regardless of access control)
name|session
operator|.
name|getNodeByIdentifier
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|isConflicting
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ItemNotFoundException
name|e
parameter_list|)
block|{
name|isConflicting
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Access Control Issues?"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|isConflicting
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isConflicting
condition|)
block|{
comment|// resolve uuid conflict
name|node
operator|=
name|resolveUUIDConflict
argument_list|(
name|parent
argument_list|,
name|id
argument_list|,
name|nodeInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
comment|// no new node has been created, so skip this node
name|parents
operator|.
name|push
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// push null onto stack for skipped node
name|log
operator|.
name|debug
argument_list|(
literal|"Skipping existing node "
operator|+
name|nodeInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
comment|// create new with given uuid
name|checkPermission
argument_list|(
name|parent
argument_list|,
name|nodeName
argument_list|)
expr_stmt|;
name|node
operator|=
name|createNode
argument_list|(
name|parent
argument_list|,
name|nodeName
argument_list|,
name|ntName
argument_list|,
name|mixins
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// process properties
for|for
control|(
name|PropInfo
name|pi
range|:
name|propInfos
control|)
block|{
comment|// find applicable definition
comment|//TODO find a proper way to get the EffectiveNodeTypeProvider
name|NodeTypeManager
name|nodeTypeManager
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeTypeManager
operator|instanceof
name|EffectiveNodeTypeProvider
condition|)
block|{
name|EffectiveNodeTypeProvider
name|entp
init|=
operator|(
name|EffectiveNodeTypeProvider
operator|)
name|nodeTypeManager
decl_stmt|;
comment|//TODO find better heuristics?
name|PropertyDefinition
name|def
init|=
name|pi
operator|.
name|getPropertyDef
argument_list|(
name|entp
operator|.
name|getEffectiveNodeType
argument_list|(
name|node
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|def
operator|.
name|isProtected
argument_list|()
condition|)
block|{
comment|// skip protected property
name|log
operator|.
name|debug
argument_list|(
literal|"Skipping protected property "
operator|+
name|pi
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// notify the ProtectedPropertyImporter.
for|for
control|(
name|ProtectedItemImporter
name|ppi
range|:
name|pItemImporters
control|)
block|{
if|if
condition|(
name|ppi
operator|instanceof
name|ProtectedPropertyImporter
operator|&&
operator|(
operator|(
name|ProtectedPropertyImporter
operator|)
name|ppi
operator|)
operator|.
name|handlePropInfo
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|pi
argument_list|,
name|def
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Protected property -> delegated to ProtectedPropertyImporter"
argument_list|)
expr_stmt|;
break|break;
block|}
comment|/* else: p-i-Importer isn't able to deal with this property.                              try next pp-importer */
block|}
block|}
else|else
block|{
comment|// regular property -> create the property
name|createProperty
argument_list|(
name|node
argument_list|,
name|pi
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"missing EffectiveNodeTypeProvider"
argument_list|)
expr_stmt|;
block|}
block|}
name|parents
operator|.
name|push
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|endNode
parameter_list|(
name|NodeInfo
name|nodeInfo
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|parent
init|=
name|parents
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|pnImporter
operator|!=
literal|null
condition|)
block|{
name|pnImporter
operator|.
name|endChildInfo
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|parent
operator|.
name|getDefinition
argument_list|()
operator|.
name|isProtected
argument_list|()
condition|)
block|{
if|if
condition|(
name|pnImporter
operator|!=
literal|null
condition|)
block|{
name|pnImporter
operator|.
name|end
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|parent
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// and reset the pnImporter field waiting for the next protected
comment|// parent -> selecting again from available importers
name|pnImporter
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|end
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|/**          * adjust references that refer to uuid's which have been mapped to          * newly generated uuid's on import          */
comment|// 1. let protected property/node importers handle protected ref-properties
comment|//    and (protected) properties underneath a protected parent node.
for|for
control|(
name|ProtectedItemImporter
name|ppi
range|:
name|pItemImporters
control|)
block|{
name|ppi
operator|.
name|processReferences
argument_list|()
expr_stmt|;
block|}
comment|// 2. regular non-protected properties.
name|Iterator
argument_list|<
name|Object
argument_list|>
name|iter
init|=
name|refTracker
operator|.
name|getProcessedReferences
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|ref
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ref
operator|instanceof
name|Property
operator|)
condition|)
block|{
continue|continue;
block|}
name|Property
name|prop
init|=
operator|(
name|Property
operator|)
name|ref
decl_stmt|;
comment|// being paranoid...
if|if
condition|(
name|prop
operator|.
name|getType
argument_list|()
operator|!=
name|PropertyType
operator|.
name|REFERENCE
operator|&&
name|prop
operator|.
name|getType
argument_list|()
operator|!=
name|PropertyType
operator|.
name|WEAKREFERENCE
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|prop
operator|.
name|isMultiple
argument_list|()
condition|)
block|{
name|Value
index|[]
name|values
init|=
name|prop
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|Value
index|[]
name|newVals
init|=
operator|new
name|Value
index|[
name|values
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Value
name|val
init|=
name|values
index|[
name|i
index|]
decl_stmt|;
name|String
name|original
init|=
name|val
operator|.
name|getString
argument_list|()
decl_stmt|;
name|String
name|adjusted
init|=
name|refTracker
operator|.
name|get
argument_list|(
name|original
argument_list|)
decl_stmt|;
if|if
condition|(
name|adjusted
operator|!=
literal|null
condition|)
block|{
name|newVals
index|[
name|i
index|]
operator|=
name|session
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|session
operator|.
name|getNodeByIdentifier
argument_list|(
name|adjusted
argument_list|)
argument_list|,
name|prop
operator|.
name|getType
argument_list|()
operator|!=
name|PropertyType
operator|.
name|REFERENCE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// reference doesn't need adjusting, just copy old value
name|newVals
index|[
name|i
index|]
operator|=
name|val
expr_stmt|;
block|}
block|}
name|prop
operator|.
name|setValue
argument_list|(
name|newVals
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Value
name|val
init|=
name|prop
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|original
init|=
name|val
operator|.
name|getString
argument_list|()
decl_stmt|;
name|String
name|adjusted
init|=
name|refTracker
operator|.
name|get
argument_list|(
name|original
argument_list|)
decl_stmt|;
if|if
condition|(
name|adjusted
operator|!=
literal|null
condition|)
block|{
name|prop
operator|.
name|setValue
argument_list|(
name|session
operator|.
name|getNodeByIdentifier
argument_list|(
name|adjusted
argument_list|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|refTracker
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

