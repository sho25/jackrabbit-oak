begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|IteratorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|PredicateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ProxyNodeState
import|;
end_import

begin_class
specifier|public
class|class
name|ModifiedNodeState
extends|extends
name|ProxyNodeState
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
name|properties
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|nodes
decl_stmt|;
specifier|public
name|ModifiedNodeState
parameter_list|(
name|NodeState
name|base
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
name|properties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|nodes
parameter_list|)
block|{
name|super
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
name|this
operator|.
name|nodes
operator|=
name|nodes
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyState
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|properties
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|properties
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPropertyCount
parameter_list|()
block|{
name|long
name|count
init|=
name|super
operator|.
name|getPropertyCount
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|super
operator|.
name|getProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
name|count
operator|--
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
name|count
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
if|if
condition|(
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|super
operator|.
name|getProperties
argument_list|()
return|;
comment|// shortcut
block|}
specifier|final
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|unmodified
init|=
name|super
operator|.
name|getProperties
argument_list|()
decl_stmt|;
specifier|final
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|modified
init|=
name|properties
operator|.
name|values
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterable
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Iterator
argument_list|<
name|PropertyState
argument_list|>
name|iterator
parameter_list|()
block|{
name|Iterator
argument_list|<
name|PropertyState
argument_list|>
name|a
init|=
name|IteratorUtils
operator|.
name|filteredIterator
argument_list|(
name|unmodified
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|UnmodifiedPropertyPredicate
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|PropertyState
argument_list|>
name|b
init|=
name|IteratorUtils
operator|.
name|filteredIterator
argument_list|(
name|modified
operator|.
name|iterator
argument_list|()
argument_list|,
name|PredicateUtils
operator|.
name|notNullPredicate
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|IteratorUtils
operator|.
name|chainedIterator
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|nodes
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|nodes
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|()
block|{
name|long
name|count
init|=
name|super
operator|.
name|getPropertyCount
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|entry
range|:
name|nodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|super
operator|.
name|getChildNode
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
name|count
operator|--
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
name|count
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|()
block|{
if|if
condition|(
name|nodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|super
operator|.
name|getChildNodeEntries
argument_list|()
return|;
comment|// shortcut
block|}
specifier|final
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|unmodified
init|=
name|super
operator|.
name|getChildNodeEntries
argument_list|()
decl_stmt|;
specifier|final
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|modified
init|=
name|MemoryChildNodeEntry
operator|.
name|iterable
argument_list|(
name|nodes
argument_list|)
decl_stmt|;
return|return
operator|new
name|Iterable
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|iterator
parameter_list|()
block|{
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|a
init|=
name|IteratorUtils
operator|.
name|filteredIterator
argument_list|(
name|unmodified
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|UnmodifiedChildNodePredicate
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|b
init|=
name|IteratorUtils
operator|.
name|filteredIterator
argument_list|(
name|modified
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|UndeletedChildNodePredicate
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|IteratorUtils
operator|.
name|chainedIterator
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|private
class|class
name|UnmodifiedPropertyPredicate
implements|implements
name|Predicate
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|PropertyState
condition|)
block|{
name|PropertyState
name|property
init|=
operator|(
operator|(
name|PropertyState
operator|)
name|object
operator|)
decl_stmt|;
return|return
operator|!
name|properties
operator|.
name|containsKey
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|private
class|class
name|UnmodifiedChildNodePredicate
implements|implements
name|Predicate
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|ChildNodeEntry
condition|)
block|{
name|ChildNodeEntry
name|entry
init|=
operator|(
operator|(
name|ChildNodeEntry
operator|)
name|object
operator|)
decl_stmt|;
return|return
operator|!
name|nodes
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|private
class|class
name|UndeletedChildNodePredicate
implements|implements
name|Predicate
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|ChildNodeEntry
condition|)
block|{
name|ChildNodeEntry
name|entry
init|=
operator|(
operator|(
name|ChildNodeEntry
operator|)
name|object
operator|)
decl_stmt|;
return|return
name|entry
operator|.
name|getNodeState
argument_list|()
operator|!=
literal|null
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

