begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|state
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|map
operator|.
name|AbstractReferenceMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|map
operator|.
name|ReferenceMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
operator|.
name|JsonValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
operator|.
name|JsonValue
operator|.
name|JsonAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|util
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|util
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|util
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|util
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ItemExistsException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ItemNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|util
operator|.
name|Unchecked
operator|.
name|cast
import|;
end_import

begin_comment
comment|/**  * A change tree records changes to a tree of nodes and properties.<p/>  *  * Internally a change tree is a tree of node deltas. A node delta describes whether  * a node has been added, removed, moved or whether its properties have been changed.  * A change tree contains a node delta for each touched node. A node is touched if it  * is modified or one of its child nodes is touched. A node is modified if it is  * transient or has modified properties. A node is transient if it is either added,  * removed or moved.<p/>  *  * A move operation is conceptually handled as a remove operation followed by an add  * operation of the respective sub tree.<p/>  */
end_comment

begin_class
specifier|public
class|class
name|ChangeTree
block|{
specifier|private
specifier|final
name|NodeDelta
name|root
decl_stmt|;
specifier|private
specifier|final
name|Predicate
argument_list|<
name|Path
argument_list|>
name|nodeExists
decl_stmt|;
specifier|private
specifier|final
name|Listener
name|listener
decl_stmt|;
comment|/** Keep Existing instances at least as long as referenced by a client */
specifier|private
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|Existing
argument_list|>
name|existing
init|=
name|cast
argument_list|(
operator|new
name|ReferenceMap
argument_list|(
name|AbstractReferenceMap
operator|.
name|HARD
argument_list|,
name|AbstractReferenceMap
operator|.
name|WEAK
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * Listener for modifications in the hierarchy      */
specifier|public
interface|interface
name|Listener
block|{
name|void
name|added
parameter_list|(
name|NodeDelta
name|nodeDelta
parameter_list|)
function_decl|;
name|void
name|removed
parameter_list|(
name|NodeDelta
name|nodeDelta
parameter_list|)
function_decl|;
name|void
name|moved
parameter_list|(
name|Path
name|source
parameter_list|,
name|NodeDelta
name|nodeDelta
parameter_list|)
function_decl|;
name|void
name|setValue
parameter_list|(
name|NodeDelta
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|JsonValue
name|value
parameter_list|)
function_decl|;
block|}
comment|/**      * Create a new change tree rooted at {@code rootPath}.      * @param rootPath  root path for this change tree      * @param listener  listener for changes in the hierarchy      * @param nodeExists  predicate which determines whether a path exists on the      *                    persistent layer.      */
specifier|public
name|ChangeTree
parameter_list|(
specifier|final
name|Path
name|rootPath
parameter_list|,
name|Listener
name|listener
parameter_list|,
name|Predicate
argument_list|<
name|Path
argument_list|>
name|nodeExists
parameter_list|)
block|{
name|this
operator|.
name|nodeExists
operator|=
name|nodeExists
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|root
operator|=
operator|new
name|Existing
argument_list|(
literal|null
argument_list|,
literal|""
argument_list|,
name|rootPath
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Path
name|getPath
parameter_list|()
block|{
return|return
name|rootPath
return|;
block|}
block|}
expr_stmt|;
block|}
comment|/**      * @return {@code true} iff {@code path} exists either transiently or on      * the persistence layer.      */
specifier|public
name|boolean
name|nodeExists
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|getNode
argument_list|(
name|path
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * @param path      * @return a {@code NodeDelta} instance for the given {@code path} or {@code null}      * if {@code path} does not exist transiently nor on the persistence layer.      */
specifier|public
name|NodeDelta
name|getNode
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|NodeDelta
name|delta
init|=
name|root
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|path
operator|.
name|getNames
argument_list|()
control|)
block|{
name|delta
operator|=
name|delta
operator|.
name|getNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|delta
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|delta
return|;
block|}
comment|/**      * @return  {@code true} iff this change tree has transient changes.      */
specifier|public
name|boolean
name|hasChanges
parameter_list|()
block|{
return|return
name|root
operator|.
name|hasChanges
argument_list|()
return|;
block|}
comment|/**      * {@code NodeDelta} instances record changes to a node. {@code NodeDelta}'s      * subclasses correspond to these changes:      *      *<ul>      *<li>{@link org.apache.jackrabbit.oak.jcr.state.ChangeTree.Added} represents a transiently      *      added node.</li>      *<li>{@link org.apache.jackrabbit.oak.jcr.state.ChangeTree.Removed} represents a transiently      *      removed node.</li>      *<li>{@link org.apache.jackrabbit.oak.jcr.state.ChangeTree.Existing} represents a node which      *      is otherwise touched. That is, which either has property modifications or a has a      *      child node which is touched.</li>      *</ul>      */
specifier|public
specifier|abstract
class|class
name|NodeDelta
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|NodeDelta
argument_list|>
name|childNodes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|NodeDelta
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|JsonValue
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|JsonValue
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|NodeDelta
name|parent
decl_stmt|;
specifier|protected
name|String
name|name
decl_stmt|;
name|NodeDelta
parameter_list|(
name|NodeDelta
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**          * @return the parent of this node          */
specifier|public
name|NodeDelta
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
comment|/**          * @return transient path to this node          */
specifier|public
name|Path
name|getPath
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getPath
argument_list|()
operator|.
name|concat
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**          * @return transient name of this node          */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**          * @return persistent path to this node or {@code null} if this node is not          * an {@link org.apache.jackrabbit.oak.jcr.state.ChangeTree.Existing existing} node.          */
specifier|public
name|Path
name|getPersistentPath
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**          * @return {@code true} iff this node has been transiently removed.          */
specifier|public
specifier|abstract
name|boolean
name|isRemoved
parameter_list|()
function_decl|;
comment|/**          * @return {@code true} iff this node has been transiently added.          */
specifier|public
specifier|abstract
name|boolean
name|isAdded
parameter_list|()
function_decl|;
comment|/**          * @return {@code true} iff this node has been transiently moved.          */
specifier|public
specifier|abstract
name|boolean
name|isMoved
parameter_list|()
function_decl|;
comment|/**          * @return {@code true} iff this node is transient.          */
specifier|public
specifier|abstract
name|boolean
name|isTransient
parameter_list|()
function_decl|;
comment|/**          * @return {@code true} iff this node has changes. A node has changes          * iff it either has changed properties or one of its child nodes has changes.          */
specifier|public
name|boolean
name|hasChanges
parameter_list|()
block|{
return|return
operator|!
name|properties
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|childNodes
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**          * @param name          * @return  {@code true} iff this node has a child node with the given {@code name}.          */
specifier|public
specifier|final
name|boolean
name|hasNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getNode
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**          * @param name          * @return  the child node with the given {@code name} or {@code null} if none.          */
specifier|public
specifier|abstract
name|NodeDelta
name|getNode
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
comment|/**          * @return  Iterator of all added nodes          */
specifier|public
name|Iterator
argument_list|<
name|NodeDelta
argument_list|>
name|getNodes
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|filter
argument_list|(
name|childNodes
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|NodeDelta
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|NodeDelta
name|delta
parameter_list|)
block|{
return|return
name|delta
operator|.
name|isTransient
argument_list|()
operator|&&
operator|!
name|delta
operator|.
name|isRemoved
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**          * @param name          * @return  {@code true} iff this node has a modified child node of the given {@code name}.          */
specifier|public
name|boolean
name|isNodeModified
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|NodeDelta
name|node
init|=
name|childNodes
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|node
operator|!=
literal|null
operator|&&
name|node
operator|.
name|isTransient
argument_list|()
return|;
block|}
comment|/**          * @param name          * @return {@code true} iff a property with the given name has been added,          * removed or modified.          */
specifier|public
name|boolean
name|hasProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|properties
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**          * @param name          * @return  the value of the property with the given {@code name}, JSON {@code null} if the          * property has been removed or {@code null} if if does not exist.          */
specifier|public
name|JsonValue
name|getPropertyValue
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|properties
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**          * @return  an iterator for all added and modified properties.          */
specifier|public
name|Iterator
argument_list|<
name|PropertyState
argument_list|>
name|getPropertyStates
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonValue
argument_list|>
argument_list|>
name|entries
init|=
name|Iterators
operator|.
name|filter
argument_list|(
name|properties
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonValue
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonValue
argument_list|>
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
name|JsonAtom
operator|.
name|NULL
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|Iterators
operator|.
name|map
argument_list|(
name|entries
argument_list|,
operator|new
name|Function1
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonValue
argument_list|>
argument_list|,
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PropertyState
name|apply
parameter_list|(
specifier|final
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonValue
argument_list|>
name|entry
parameter_list|)
block|{
return|return
name|TransientNodeState
operator|.
name|createPropertyState
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**          * Add a node with the given {@code name}.          * @param name          * @return  the added node          * @throws javax.jcr.ItemExistsException          */
specifier|public
name|NodeDelta
name|addNode
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ItemExistsException
block|{
if|if
condition|(
name|hasNode
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ItemExistsException
argument_list|(
name|name
argument_list|)
throw|;
block|}
name|NodeDelta
name|added
init|=
name|addChild
argument_list|(
operator|new
name|Added
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|notifyAdded
argument_list|(
name|added
argument_list|)
expr_stmt|;
return|return
name|added
return|;
block|}
comment|/**          * Remove the node with the given {@code name}.          * @param name          * @return  the removed node          * @throws javax.jcr.ItemNotFoundException          */
specifier|public
name|NodeDelta
name|removeNode
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ItemNotFoundException
block|{
name|NodeDelta
name|delta
init|=
name|getNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|delta
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ItemNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
block|}
name|NodeDelta
name|removed
init|=
name|delta
operator|.
name|remove
argument_list|()
decl_stmt|;
name|notifyRemoved
argument_list|(
name|removed
argument_list|)
expr_stmt|;
return|return
name|removed
return|;
block|}
comment|/**          * Move the node with the given {@code name} to {@code destination}.          * @param name          * @param destination          * @throws javax.jcr.ItemNotFoundException          * @throws javax.jcr.ItemExistsException          * @throws javax.jcr.PathNotFoundException          */
specifier|public
name|void
name|moveNode
parameter_list|(
name|String
name|name
parameter_list|,
name|Path
name|destination
parameter_list|)
throws|throws
name|ItemNotFoundException
throws|,
name|ItemExistsException
throws|,
name|PathNotFoundException
block|{
name|NodeDelta
name|source
init|=
name|getNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ItemNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
block|}
if|if
condition|(
name|nodeExists
argument_list|(
name|destination
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ItemExistsException
argument_list|(
name|destination
operator|.
name|toJcrPath
argument_list|()
argument_list|)
throw|;
block|}
name|Path
name|destParentPath
init|=
name|destination
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|nodeExists
argument_list|(
name|destParentPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
name|destParentPath
operator|.
name|toJcrPath
argument_list|()
argument_list|)
throw|;
block|}
name|Path
name|sourcePath
init|=
name|source
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|NodeDelta
name|moved
init|=
name|source
operator|.
name|moveTo
argument_list|(
name|destParentPath
argument_list|,
name|destination
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|notifyMoved
argument_list|(
name|sourcePath
argument_list|,
name|moved
argument_list|)
expr_stmt|;
block|}
comment|/**          * Set the property with the given {@code name} to {@code value} or remove the          * property if {@code value} is {@code null} or JSON {@code null}.          * @param name          * @param value          */
specifier|public
name|void
name|setValue
parameter_list|(
name|String
name|name
parameter_list|,
name|JsonValue
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|JsonAtom
operator|.
name|NULL
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|.
name|isNull
argument_list|()
operator|&&
name|properties
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
operator|&&
name|properties
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|!=
name|JsonAtom
operator|.
name|NULL
condition|)
block|{
name|properties
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|properties
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|touch
argument_list|()
expr_stmt|;
block|}
name|notifySetValue
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------< internal>---
name|void
name|touch
parameter_list|()
block|{ }
name|NodeDelta
name|remove
parameter_list|()
block|{
return|return
name|parent
operator|.
name|addChild
argument_list|(
operator|new
name|Removed
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
argument_list|)
return|;
block|}
name|NodeDelta
name|moveTo
parameter_list|(
name|Path
name|parentPath
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|remove
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|NodeDelta
name|parent
init|=
name|ChangeTree
operator|.
name|this
operator|.
name|getNode
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
return|return
name|parent
operator|.
name|addChild
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|final
name|void
name|clear
parameter_list|()
block|{
name|childNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|properties
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Iterable
argument_list|<
name|NodeDelta
argument_list|>
name|childNodes
parameter_list|()
block|{
return|return
name|childNodes
operator|.
name|values
argument_list|()
return|;
block|}
specifier|final
name|NodeDelta
name|getChild
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|childNodes
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|final
name|boolean
name|hasChild
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|childNodes
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|final
name|NodeDelta
name|addChild
parameter_list|(
name|NodeDelta
name|delta
parameter_list|)
block|{
name|childNodes
operator|.
name|put
argument_list|(
name|delta
operator|.
name|name
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|delta
operator|.
name|parent
operator|=
name|this
expr_stmt|;
name|touch
argument_list|()
expr_stmt|;
return|return
name|delta
return|;
block|}
specifier|private
name|void
name|notifyAdded
parameter_list|(
name|NodeDelta
name|added
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|added
argument_list|(
name|added
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|notifyRemoved
parameter_list|(
name|NodeDelta
name|removed
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|removed
argument_list|(
name|removed
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|notifyMoved
parameter_list|(
name|Path
name|sourcePath
parameter_list|,
name|NodeDelta
name|moved
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|moved
argument_list|(
name|sourcePath
argument_list|,
name|moved
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|notifySetValue
parameter_list|(
name|NodeDelta
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|JsonValue
name|value
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|setValue
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//------------------------------------------< private/internal>---
comment|/**      * @return A {@code Existing} instance for the given {@code parent} and {@code name}.      * Returns a previously allocated instance if not yet garbage collected.      *<em>Note:</em> returning fresh instances while previously allocated ones are still      * referenced in client code results in schizophrenia: same node multiple states.      */
specifier|private
name|Existing
name|existing
parameter_list|(
name|NodeDelta
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|Path
name|persistentPath
parameter_list|)
block|{
name|Existing
name|e
init|=
name|existing
operator|.
name|get
argument_list|(
name|persistentPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|e
operator|=
operator|new
name|Existing
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|persistentPath
argument_list|)
expr_stmt|;
name|existing
operator|.
name|put
argument_list|(
name|persistentPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|e
return|;
block|}
comment|/**      * Represents an existing node. That is, a node which exists on the persistence layer.      */
specifier|private
class|class
name|Existing
extends|extends
name|NodeDelta
block|{
specifier|private
specifier|final
name|Path
name|persistentPath
decl_stmt|;
specifier|private
name|boolean
name|isMoved
decl_stmt|;
name|Existing
parameter_list|(
name|NodeDelta
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|Path
name|persistentPath
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|persistentPath
operator|=
name|persistentPath
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getPersistentPath
parameter_list|()
block|{
return|return
name|persistentPath
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRemoved
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAdded
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMoved
parameter_list|()
block|{
return|return
name|isMoved
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTransient
parameter_list|()
block|{
return|return
operator|!
name|isMoved
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeDelta
name|getNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|NodeDelta
name|delta
init|=
name|getChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|delta
operator|==
literal|null
condition|)
block|{
name|Path
name|path
init|=
name|persistentPath
operator|.
name|concat
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|nodeExists
operator|.
name|evaluate
argument_list|(
name|path
argument_list|)
condition|?
name|existing
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|path
argument_list|)
else|:
literal|null
return|;
block|}
else|else
block|{
return|return
name|delta
operator|.
name|isRemoved
argument_list|()
condition|?
literal|null
else|:
name|delta
return|;
block|}
block|}
annotation|@
name|Override
name|void
name|touch
parameter_list|()
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|parent
operator|.
name|hasChild
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|parent
operator|.
name|addChild
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Existing["
operator|+
name|getPath
argument_list|()
operator|+
literal|']'
return|;
block|}
comment|//------------------------------------------< internal>---
annotation|@
name|Override
name|NodeDelta
name|moveTo
parameter_list|(
name|Path
name|parentPath
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|isMoved
operator|=
literal|true
expr_stmt|;
return|return
name|super
operator|.
name|moveTo
argument_list|(
name|parentPath
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
comment|/**      * Represents a transiently added node.      */
specifier|private
class|class
name|Added
extends|extends
name|NodeDelta
block|{
name|Added
parameter_list|(
name|NodeDelta
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRemoved
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAdded
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMoved
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTransient
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeDelta
name|getNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|NodeDelta
name|delta
init|=
name|getChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|delta
operator|==
literal|null
operator|||
name|delta
operator|.
name|isRemoved
argument_list|()
condition|?
literal|null
else|:
name|delta
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Added["
operator|+
name|getPath
argument_list|()
operator|+
literal|']'
return|;
block|}
block|}
comment|/**      * Represents a transiently removed node.      */
specifier|private
class|class
name|Removed
extends|extends
name|NodeDelta
block|{
name|Removed
parameter_list|(
name|NodeDelta
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRemoved
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAdded
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMoved
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTransient
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeDelta
name|getNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Removed"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|NodeDelta
name|addNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Removed"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|NodeDelta
name|removeNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Removed"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|moveNode
parameter_list|(
name|String
name|name
parameter_list|,
name|Path
name|destination
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Removed"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|String
name|name
parameter_list|,
name|JsonValue
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Removed"
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|NodeDelta
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Removed"
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|NodeDelta
name|moveTo
parameter_list|(
name|Path
name|parentPath
parameter_list|,
name|String
name|name
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Removed"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Removed["
operator|+
name|getPath
argument_list|()
operator|+
literal|']'
return|;
block|}
block|}
block|}
end_class

end_unit

