begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|simple
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|ExceptionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|DigestOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * An in-memory node, including all child nodes.  */
end_comment

begin_class
specifier|public
class|class
name|NodeImpl
implements|implements
name|Cache
operator|.
name|Value
block|{
comment|/**      * The child node count.      */
specifier|public
specifier|static
specifier|final
name|String
name|CHILDREN_COUNT
init|=
literal|":childNodeCount"
decl_stmt|;
comment|/**      * The total number of child nodes.      */
specifier|public
specifier|static
specifier|final
name|String
name|DESCENDANT_COUNT
init|=
literal|":size"
decl_stmt|;
comment|/**      * The total number of child nodes that are stored inline.      */
specifier|public
specifier|static
specifier|final
name|String
name|DESCENDANT_INLINE_COUNT
init|=
literal|":sizeInline"
decl_stmt|;
comment|/**      * The content hash.      */
specifier|public
specifier|static
specifier|final
name|String
name|HASH
init|=
literal|":hash"
decl_stmt|;
comment|/**      * The node version.      */
specifier|public
specifier|static
specifier|final
name|String
name|NODE_VERSION
init|=
literal|":nodeVersion"
decl_stmt|;
comment|/**      * Used when there are many child nodes.      * The id of an internal node.      */
specifier|static
specifier|final
name|String
name|CHILDREN
init|=
literal|":children"
decl_stmt|;
comment|/**      * Used when there are many child nodes.      */
specifier|static
specifier|final
name|String
name|NAMES
init|=
literal|":names"
decl_stmt|;
comment|/**      * Used when there are many child nodes.      * The number of child nodes for an internal node.      */
specifier|static
specifier|final
name|String
name|COUNT
init|=
literal|":childCount"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|NODE_NAME_AS_PROPERTY
init|=
literal|false
decl_stmt|;
comment|/**      * The node name.      */
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|":name"
decl_stmt|;
specifier|private
specifier|final
name|long
name|revId
decl_stmt|;
specifier|private
specifier|final
name|NodeMap
name|map
decl_stmt|;
specifier|private
name|String
index|[]
name|propertyValuePairs
decl_stmt|;
specifier|private
name|NodeList
name|childNodes
decl_stmt|;
specifier|private
name|String
name|path
decl_stmt|;
specifier|private
name|NodeId
name|id
decl_stmt|;
specifier|private
name|int
name|memory
decl_stmt|;
specifier|private
name|long
name|descendantCount
decl_stmt|;
specifier|private
name|int
name|descendantInlineCount
decl_stmt|;
specifier|private
name|long
name|totalChildNodeCount
decl_stmt|;
specifier|private
name|byte
index|[]
name|hash
decl_stmt|;
specifier|private
name|String
name|nodeVersion
decl_stmt|;
specifier|public
name|NodeImpl
parameter_list|(
name|NodeMap
name|map
parameter_list|,
name|long
name|revId
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
name|this
operator|.
name|revId
operator|=
name|revId
expr_stmt|;
block|}
name|NodeId
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|public
name|void
name|setId
parameter_list|(
name|NodeId
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|NodeImpl
name|createClone
parameter_list|(
name|long
name|revId
parameter_list|)
block|{
if|if
condition|(
name|revId
operator|==
name|this
operator|.
name|revId
condition|)
block|{
return|return
name|this
return|;
block|}
name|NodeImpl
name|clone
init|=
operator|new
name|NodeImpl
argument_list|(
name|map
argument_list|,
name|revId
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyValuePairs
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|s
init|=
operator|new
name|String
index|[
name|propertyValuePairs
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|propertyValuePairs
argument_list|,
literal|0
argument_list|,
name|s
argument_list|,
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|)
expr_stmt|;
name|clone
operator|.
name|propertyValuePairs
operator|=
name|s
expr_stmt|;
block|}
if|if
condition|(
name|childNodes
operator|!=
literal|null
condition|)
block|{
name|clone
operator|.
name|childNodes
operator|=
name|childNodes
operator|.
name|createClone
argument_list|(
name|map
argument_list|,
name|revId
argument_list|)
expr_stmt|;
name|clone
operator|.
name|descendantCount
operator|=
name|descendantCount
expr_stmt|;
name|clone
operator|.
name|descendantInlineCount
operator|=
name|descendantInlineCount
expr_stmt|;
block|}
return|return
name|clone
return|;
block|}
specifier|public
name|long
name|getDescendantCount
parameter_list|()
block|{
return|return
name|descendantCount
return|;
block|}
specifier|public
name|long
name|getDescendantInlineCount
parameter_list|()
block|{
return|return
name|descendantInlineCount
return|;
block|}
specifier|public
name|boolean
name|exists
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|childNodes
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|index
init|=
name|PathUtils
operator|.
name|getNextSlash
argument_list|(
name|path
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
return|return
name|childNodes
operator|.
name|containsKey
argument_list|(
name|path
argument_list|)
return|;
block|}
name|String
name|child
init|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|childNodes
operator|.
name|containsKey
argument_list|(
name|child
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|NodeImpl
name|n
init|=
name|getChildNode
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|n
operator|.
name|exists
argument_list|(
name|path
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|NodeImpl
name|getNode
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|childNodes
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|index
init|=
name|PathUtils
operator|.
name|getNextSlash
argument_list|(
name|path
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
return|return
name|getChildNode
argument_list|(
name|path
argument_list|)
return|;
block|}
name|String
name|child
init|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|NodeImpl
name|n
init|=
name|getChildNode
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|n
operator|.
name|getNode
argument_list|(
name|path
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|NodeImpl
name|getChildNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|NodeId
name|id
init|=
name|childNodes
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|id
operator|==
literal|null
condition|?
literal|null
else|:
name|id
operator|.
name|getNode
argument_list|(
name|map
argument_list|)
return|;
block|}
specifier|public
name|NodeImpl
name|cloneAndAddChildNode
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|before
parameter_list|,
name|String
name|position
parameter_list|,
name|NodeImpl
name|newNode
parameter_list|,
name|long
name|revId
parameter_list|)
block|{
name|int
name|index
init|=
name|PathUtils
operator|.
name|getNextSlash
argument_list|(
name|path
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|NodeImpl
name|clone
init|=
name|createClone
argument_list|(
name|revId
argument_list|)
decl_stmt|;
name|clone
operator|.
name|addChildNode
argument_list|(
name|path
argument_list|,
name|before
argument_list|,
name|position
argument_list|,
name|newNode
argument_list|)
expr_stmt|;
return|return
name|clone
return|;
block|}
name|String
name|child
init|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|childNodes
operator|==
literal|null
condition|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|get
argument_list|(
literal|"Node not found: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|NodeImpl
name|n
init|=
name|getChildNode
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|get
argument_list|(
literal|"Node not found: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|long
name|diffDescendant
init|=
operator|-
name|n
operator|.
name|descendantCount
decl_stmt|;
name|long
name|diffInline
init|=
operator|-
name|n
operator|.
name|descendantInlineCount
decl_stmt|;
name|NodeImpl
name|n2
init|=
name|n
operator|.
name|cloneAndAddChildNode
argument_list|(
name|path
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|,
name|before
argument_list|,
name|position
argument_list|,
name|newNode
argument_list|,
name|revId
argument_list|)
decl_stmt|;
name|NodeImpl
name|clone
init|=
name|setChild
argument_list|(
name|child
argument_list|,
name|n2
argument_list|,
name|revId
argument_list|)
decl_stmt|;
name|diffDescendant
operator|+=
name|n2
operator|.
name|descendantCount
expr_stmt|;
name|diffInline
operator|+=
name|n2
operator|.
name|descendantInlineCount
expr_stmt|;
name|clone
operator|.
name|descendantCount
operator|+=
name|diffDescendant
expr_stmt|;
name|clone
operator|.
name|descendantInlineCount
operator|+=
name|diffDescendant
expr_stmt|;
return|return
name|clone
return|;
block|}
specifier|public
name|NodeImpl
name|cloneAndRemoveChildNode
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revId
parameter_list|)
block|{
name|int
name|index
init|=
name|PathUtils
operator|.
name|getNextSlash
argument_list|(
name|path
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|NodeImpl
name|clone
init|=
name|createClone
argument_list|(
name|revId
argument_list|)
decl_stmt|;
name|clone
operator|.
name|removeChildNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|clone
return|;
block|}
name|String
name|child
init|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|NodeImpl
name|n
init|=
name|getChildNode
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|get
argument_list|(
literal|"Node not found: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|long
name|diffDescendant
init|=
operator|-
name|n
operator|.
name|descendantCount
decl_stmt|;
name|long
name|diffInline
init|=
operator|-
name|n
operator|.
name|descendantInlineCount
decl_stmt|;
name|NodeImpl
name|n2
init|=
name|n
operator|.
name|cloneAndRemoveChildNode
argument_list|(
name|path
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|,
name|revId
argument_list|)
decl_stmt|;
name|NodeImpl
name|clone
init|=
name|setChild
argument_list|(
name|child
argument_list|,
name|n2
argument_list|,
name|revId
argument_list|)
decl_stmt|;
name|diffDescendant
operator|+=
name|n2
operator|.
name|descendantCount
expr_stmt|;
name|diffInline
operator|+=
name|n2
operator|.
name|descendantInlineCount
expr_stmt|;
name|clone
operator|.
name|descendantCount
operator|+=
name|diffDescendant
expr_stmt|;
name|clone
operator|.
name|descendantInlineCount
operator|+=
name|diffInline
expr_stmt|;
return|return
name|clone
return|;
block|}
specifier|public
name|NodeImpl
name|cloneAndSetProperty
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|value
parameter_list|,
name|long
name|revId
parameter_list|)
block|{
name|int
name|index
init|=
name|PathUtils
operator|.
name|getNextSlash
argument_list|(
name|path
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|NodeImpl
name|clone
init|=
name|createClone
argument_list|(
name|revId
argument_list|)
decl_stmt|;
name|clone
operator|.
name|setProperty
argument_list|(
name|path
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|clone
return|;
block|}
name|String
name|child
init|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|NodeImpl
name|n
init|=
name|getChildNode
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|get
argument_list|(
literal|"Node not found: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|NodeImpl
name|n2
init|=
name|n
operator|.
name|cloneAndSetProperty
argument_list|(
name|path
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|,
name|value
argument_list|,
name|revId
argument_list|)
decl_stmt|;
name|NodeImpl
name|c
init|=
name|setChild
argument_list|(
name|child
argument_list|,
name|n2
argument_list|,
name|revId
argument_list|)
decl_stmt|;
return|return
name|c
return|;
block|}
specifier|public
name|boolean
name|hasProperty
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
return|return
name|propertyValuePairs
operator|!=
literal|null
operator|&&
name|search
argument_list|(
name|propertyName
argument_list|,
name|propertyValuePairs
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|/**      * Return the index of the key within the array of key-value pairs. If      * found, the method returns the index of the key, if not this method      * returns (- index - 2). See also Arrays.binarySearch.      *      * @param key the key      * @param pair the key-value pair      * @return the index      */
specifier|private
specifier|static
name|int
name|search
parameter_list|(
name|String
name|key
parameter_list|,
name|String
index|[]
name|pair
parameter_list|)
block|{
name|int
name|low
init|=
literal|0
decl_stmt|;
name|int
name|high
init|=
name|pair
operator|.
name|length
operator|/
literal|2
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|int
name|mid
init|=
operator|(
name|low
operator|+
name|high
operator|)
operator|>>
literal|1
decl_stmt|;
name|String
name|middle
init|=
name|pair
index|[
name|mid
operator|*
literal|2
index|]
decl_stmt|;
name|int
name|result
init|=
name|middle
operator|.
name|compareTo
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|<
literal|0
condition|)
block|{
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|>
literal|0
condition|)
block|{
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
return|return
name|mid
operator|*
literal|2
return|;
block|}
block|}
comment|// not found
return|return
operator|-
operator|(
name|low
operator|*
literal|2
operator|+
literal|2
operator|)
return|;
block|}
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
if|if
condition|(
name|propertyValuePairs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|index
init|=
name|search
argument_list|(
name|propertyName
argument_list|,
name|propertyValuePairs
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|propertyValuePairs
index|[
name|index
operator|+
literal|1
index|]
return|;
block|}
specifier|public
name|void
name|append
parameter_list|(
name|JsopWriter
name|json
parameter_list|,
name|int
name|depth
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|count
parameter_list|,
name|boolean
name|childNodeCount
parameter_list|)
block|{
name|json
operator|.
name|object
argument_list|()
expr_stmt|;
name|String
index|[]
name|pv
init|=
name|propertyValuePairs
decl_stmt|;
if|if
condition|(
name|pv
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|size
init|=
name|pv
operator|.
name|length
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|json
operator|.
name|key
argument_list|(
name|pv
index|[
name|i
index|]
argument_list|)
operator|.
name|encodedValue
argument_list|(
name|pv
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|map
operator|.
name|hash
condition|)
block|{
name|json
operator|.
name|key
argument_list|(
name|HASH
argument_list|)
operator|.
name|value
argument_list|(
name|StringUtils
operator|.
name|convertBytesToHex
argument_list|(
name|getHash
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|.
name|nodeVersion
condition|)
block|{
name|json
operator|.
name|key
argument_list|(
name|NODE_VERSION
argument_list|)
operator|.
name|value
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|childNodes
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|childNodeCount
condition|)
block|{
name|json
operator|.
name|key
argument_list|(
name|CHILDREN_COUNT
argument_list|)
operator|.
name|value
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|childNodeCount
condition|)
block|{
name|json
operator|.
name|key
argument_list|(
name|CHILDREN_COUNT
argument_list|)
operator|.
name|value
argument_list|(
name|childNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|descendantCount
operator|>
name|childNodes
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|map
operator|.
name|getDescendantCount
argument_list|()
condition|)
block|{
name|json
operator|.
name|key
argument_list|(
name|DESCENDANT_COUNT
argument_list|)
operator|.
name|value
argument_list|(
name|descendantCount
argument_list|)
expr_stmt|;
name|json
operator|.
name|key
argument_list|(
name|DESCENDANT_INLINE_COUNT
argument_list|)
operator|.
name|value
argument_list|(
name|descendantInlineCount
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|count
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|childNodes
operator|.
name|getNames
argument_list|(
name|offset
argument_list|,
name|count
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|s
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|json
operator|.
name|key
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|depth
operator|<=
literal|0
condition|)
block|{
name|json
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|getChildNode
argument_list|(
name|s
argument_list|)
operator|.
name|append
argument_list|(
name|json
argument_list|,
name|depth
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|count
argument_list|,
name|childNodeCount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|json
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|void
name|addChildNode
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeImpl
name|node
parameter_list|)
block|{
name|addChildNode
argument_list|(
name|name
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|void
name|addChildNode
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|before
parameter_list|,
name|String
name|position
parameter_list|,
name|NodeImpl
name|node
parameter_list|)
block|{
if|if
condition|(
name|childNodes
operator|==
literal|null
condition|)
block|{
name|childNodes
operator|=
operator|new
name|NodeListSmall
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childNodes
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|get
argument_list|(
literal|"Node already exists: "
operator|+
name|name
argument_list|)
throw|;
block|}
if|if
condition|(
name|NODE_NAME_AS_PROPERTY
condition|)
block|{
name|node
operator|.
name|setProperty
argument_list|(
name|NAME
argument_list|,
name|JsopBuilder
operator|.
name|encode
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|childNodes
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|map
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|descendantCount
operator|+=
name|node
operator|.
name|descendantCount
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|getId
argument_list|()
operator|.
name|isInline
argument_list|()
condition|)
block|{
name|descendantInlineCount
operator|+=
name|node
operator|.
name|descendantInlineCount
operator|+
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|before
operator|||
name|position
operator|!=
literal|null
condition|)
block|{
name|boolean
name|moveNext
init|=
literal|false
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|move
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|childNodes
operator|.
name|getNames
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// don't move new entry
block|}
elseif|else
if|if
condition|(
name|moveNext
condition|)
block|{
name|move
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|before
operator|&&
name|position
operator|==
literal|null
condition|)
block|{
name|move
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|moveNext
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|equals
argument_list|(
name|position
argument_list|)
condition|)
block|{
if|if
condition|(
name|before
condition|)
block|{
name|move
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|moveNext
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|m
range|:
name|move
control|)
block|{
name|childNodes
operator|.
name|add
argument_list|(
name|m
argument_list|,
name|childNodes
operator|.
name|remove
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|removeChildNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|childNodes
operator|==
literal|null
condition|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|get
argument_list|(
literal|"Node not found: "
operator|+
name|name
argument_list|)
throw|;
block|}
if|if
condition|(
name|childNodes
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|||
name|descendantCount
operator|<=
literal|1
condition|)
block|{
name|descendantCount
operator|=
literal|0
expr_stmt|;
name|descendantInlineCount
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|NodeImpl
name|n
init|=
name|childNodes
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|getNode
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|descendantCount
operator|-=
name|n
operator|.
name|descendantCount
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|n
operator|.
name|getId
argument_list|()
operator|.
name|isInline
argument_list|()
condition|)
block|{
name|descendantInlineCount
operator|-=
name|n
operator|.
name|descendantInlineCount
operator|+
literal|1
expr_stmt|;
block|}
block|}
name|childNodes
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|childNodes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|childNodes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|propertyValuePairs
operator|=
name|updatePair
argument_list|(
name|propertyValuePairs
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|updatePair
parameter_list|(
name|String
index|[]
name|pairs
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|pairs
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|String
index|[]
block|{
name|key
block|,
name|value
block|}
return|;
block|}
block|}
name|int
name|index
init|=
name|search
argument_list|(
name|key
argument_list|,
name|pairs
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|pairs
return|;
block|}
name|index
operator|=
operator|-
name|index
operator|-
literal|2
expr_stmt|;
name|String
index|[]
name|newPairs
init|=
operator|new
name|String
index|[
name|pairs
operator|.
name|length
operator|+
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|pairs
argument_list|,
literal|0
argument_list|,
name|newPairs
argument_list|,
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
name|int
name|len
init|=
name|newPairs
operator|.
name|length
operator|-
name|index
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|2
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|pairs
argument_list|,
name|index
argument_list|,
name|newPairs
argument_list|,
name|index
operator|+
literal|2
argument_list|,
name|len
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
name|pairs
operator|=
name|newPairs
expr_stmt|;
name|pairs
index|[
name|index
index|]
operator|=
name|StringCache
operator|.
name|cache
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|pairs
operator|.
name|length
operator|==
literal|2
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
index|[]
name|newPairs
init|=
operator|new
name|String
index|[
name|pairs
operator|.
name|length
operator|-
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|pairs
argument_list|,
literal|0
argument_list|,
name|newPairs
argument_list|,
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
name|int
name|len
init|=
name|newPairs
operator|.
name|length
operator|-
name|index
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|pairs
argument_list|,
name|index
operator|+
literal|2
argument_list|,
name|newPairs
argument_list|,
name|index
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
return|return
name|newPairs
return|;
block|}
name|pairs
index|[
name|index
operator|+
literal|1
index|]
operator|=
name|StringCache
operator|.
name|cache
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|pairs
return|;
block|}
specifier|public
specifier|static
name|NodeImpl
name|parse
parameter_list|(
name|String
name|json
parameter_list|)
block|{
name|JsopTokenizer
name|t
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|NodeMap
name|map
init|=
operator|new
name|NodeMap
argument_list|()
decl_stmt|;
return|return
name|NodeImpl
operator|.
name|parse
argument_list|(
name|map
argument_list|,
name|t
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|NodeImpl
name|parse
parameter_list|(
name|NodeMap
name|map
parameter_list|,
name|JsopReader
name|t
parameter_list|,
name|long
name|revId
parameter_list|)
block|{
return|return
name|parse
argument_list|(
name|map
argument_list|,
name|t
argument_list|,
name|revId
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|NodeImpl
name|parse
parameter_list|(
name|NodeMap
name|map
parameter_list|,
name|JsopReader
name|t
parameter_list|,
name|long
name|revId
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|NodeImpl
name|node
init|=
operator|new
name|NodeImpl
argument_list|(
name|map
argument_list|,
name|revId
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|t
operator|.
name|matches
argument_list|(
literal|'}'
argument_list|)
condition|)
block|{
do|do
block|{
name|String
name|key
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|'{'
argument_list|)
condition|)
block|{
name|String
name|childPath
init|=
name|path
operator|==
literal|null
operator|||
name|key
operator|==
literal|null
condition|?
literal|null
else|:
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|node
operator|.
name|addChildNode
argument_list|(
name|key
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|parse
argument_list|(
name|map
argument_list|,
name|t
argument_list|,
name|revId
argument_list|,
name|childPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|value
init|=
name|t
operator|.
name|readRawValue
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|key
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|':'
condition|)
block|{
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|CHILDREN_COUNT
argument_list|)
condition|)
block|{
name|node
operator|.
name|totalChildNodeCount
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|HASH
argument_list|)
condition|)
block|{
name|value
operator|=
name|JsopTokenizer
operator|.
name|decodeQuoted
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|node
operator|.
name|hash
operator|=
name|StringUtils
operator|.
name|convertHexToBytes
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|NODE_VERSION
argument_list|)
condition|)
block|{
name|value
operator|=
name|JsopTokenizer
operator|.
name|decodeQuoted
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|node
operator|.
name|nodeVersion
operator|=
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|DESCENDANT_COUNT
argument_list|)
condition|)
block|{
name|node
operator|.
name|descendantCount
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|node
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|node
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
condition|)
do|;
name|t
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
specifier|public
name|void
name|setPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
specifier|public
name|String
name|getChildNodeName
parameter_list|(
name|long
name|pos
parameter_list|)
block|{
if|if
condition|(
name|childNodes
operator|==
literal|null
operator|||
name|childNodes
operator|.
name|size
argument_list|()
operator|<=
name|pos
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|childNodes
operator|.
name|getName
argument_list|(
name|pos
argument_list|)
return|;
block|}
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getChildNodeNames
parameter_list|(
name|int
name|maxCount
parameter_list|)
block|{
if|if
condition|(
name|childNodes
operator|==
literal|null
operator|||
name|childNodes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
return|return
name|childNodes
operator|.
name|getNames
argument_list|(
literal|0
argument_list|,
name|maxCount
argument_list|)
return|;
block|}
specifier|public
name|int
name|getPropertyCount
parameter_list|()
block|{
return|return
name|propertyValuePairs
operator|==
literal|null
condition|?
literal|0
else|:
name|propertyValuePairs
operator|.
name|length
operator|/
literal|2
return|;
block|}
specifier|public
name|String
name|getProperty
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|propertyValuePairs
index|[
name|index
operator|+
name|index
index|]
return|;
block|}
specifier|public
name|String
name|getPropertyValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|propertyValuePairs
index|[
name|index
operator|+
name|index
operator|+
literal|1
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|s
init|=
name|asString
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|s
operator|+=
literal|"/* "
operator|+
name|path
operator|+
literal|" */"
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
specifier|public
name|byte
index|[]
name|getHash
parameter_list|()
block|{
if|if
condition|(
name|hash
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|MessageDigest
name|d
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA-1"
argument_list|)
decl_stmt|;
name|DigestOutputStream
name|out
init|=
operator|new
name|DigestOutputStream
argument_list|(
operator|new
name|OutputStream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|buff
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
block|{
comment|// ignore
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|buff
parameter_list|)
block|{
comment|// ignore
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
block|{
comment|// ignore
block|}
block|}
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|String
index|[]
name|pv
init|=
name|propertyValuePairs
decl_stmt|;
if|if
condition|(
name|pv
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|writeInt
argument_list|(
name|out
argument_list|,
name|pv
operator|.
name|length
operator|/
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|p
range|:
name|pv
control|)
block|{
name|IOUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|childNodes
operator|!=
literal|null
operator|&&
name|childNodes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|childNodes
operator|.
name|updateHash
argument_list|(
name|map
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|hash
operator|=
name|d
operator|.
name|digest
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|id
operator|.
name|setHash
argument_list|(
name|hash
argument_list|)
expr_stmt|;
block|}
return|return
name|hash
return|;
block|}
specifier|public
name|String
name|asString
parameter_list|()
block|{
comment|// TODO ALLOW_UNQUOTED_FIELD_NAMES to safe space
comment|// (check what Javascript supports and what are the keywords)
name|JsopWriter
name|json
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|json
operator|.
name|setLineLength
argument_list|(
literal|120
argument_list|)
expr_stmt|;
name|boolean
name|inline
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|!
name|id
operator|.
name|isInline
argument_list|()
condition|)
block|{
name|String
name|nodeId
init|=
name|map
operator|.
name|formatId
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeId
operator|!=
literal|null
condition|)
block|{
name|inline
operator|=
literal|false
expr_stmt|;
name|json
operator|.
name|encodedValue
argument_list|(
name|nodeId
argument_list|)
operator|.
name|tag
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
block|}
block|}
name|json
operator|.
name|object
argument_list|()
expr_stmt|;
name|String
index|[]
name|pv
init|=
name|propertyValuePairs
decl_stmt|;
if|if
condition|(
name|pv
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|size
init|=
name|pv
operator|.
name|length
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|json
operator|.
name|key
argument_list|(
name|pv
index|[
name|i
index|]
argument_list|)
operator|.
name|encodedValue
argument_list|(
name|pv
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|map
operator|.
name|getHash
argument_list|()
operator|&&
name|id
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|hash
init|=
name|getHash
argument_list|()
decl_stmt|;
name|json
operator|.
name|key
argument_list|(
name|HASH
argument_list|)
operator|.
name|value
argument_list|(
name|StringUtils
operator|.
name|convertBytesToHex
argument_list|(
name|hash
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|childNodes
operator|!=
literal|null
operator|&&
name|childNodes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|map
operator|.
name|getDescendantCount
argument_list|()
condition|)
block|{
if|if
condition|(
name|descendantCount
operator|>
name|childNodes
operator|.
name|size
argument_list|()
condition|)
block|{
name|json
operator|.
name|key
argument_list|(
name|DESCENDANT_COUNT
argument_list|)
operator|.
name|value
argument_list|(
name|descendantCount
argument_list|)
expr_stmt|;
block|}
block|}
name|childNodes
operator|.
name|append
argument_list|(
name|json
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
name|json
operator|.
name|endObject
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|inline
condition|)
block|{
name|json
operator|.
name|tag
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
block|}
return|return
name|json
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeImpl
name|fromString
parameter_list|(
name|NodeMap
name|map
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|JsopTokenizer
name|t
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|NodeImpl
name|node
init|=
operator|new
name|NodeImpl
argument_list|(
name|map
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|t
operator|.
name|matches
argument_list|(
literal|'{'
argument_list|)
condition|)
block|{
name|node
operator|.
name|id
operator|=
name|map
operator|.
name|parseId
argument_list|(
name|t
operator|.
name|readRawValue
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
block|}
name|boolean
name|descendantCountSet
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|t
operator|.
name|matches
argument_list|(
literal|'}'
argument_list|)
condition|)
block|{
do|do
block|{
name|String
name|key
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|value
init|=
name|t
operator|.
name|readRawValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|key
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|':'
condition|)
block|{
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|CHILDREN
argument_list|)
condition|)
block|{
name|node
operator|.
name|childNodes
operator|=
name|NodeListTrie
operator|.
name|read
argument_list|(
name|t
argument_list|,
name|map
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|DESCENDANT_COUNT
argument_list|)
condition|)
block|{
name|node
operator|.
name|descendantCount
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|descendantCountSet
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|HASH
argument_list|)
condition|)
block|{
name|node
operator|.
name|id
operator|.
name|setHash
argument_list|(
name|StringUtils
operator|.
name|convertHexToBytes
argument_list|(
name|JsopTokenizer
operator|.
name|decodeQuoted
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|node
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|map
operator|.
name|isId
argument_list|(
name|value
argument_list|)
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|childNodes
operator|==
literal|null
condition|)
block|{
name|node
operator|.
name|childNodes
operator|=
operator|new
name|NodeListSmall
argument_list|()
expr_stmt|;
block|}
name|NodeId
name|id
init|=
name|map
operator|.
name|parseId
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|node
operator|.
name|childNodes
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|descendantCountSet
condition|)
block|{
name|node
operator|.
name|descendantCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|.
name|isInline
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|descendantCountSet
condition|)
block|{
name|node
operator|.
name|descendantCount
operator|+=
name|id
operator|.
name|getNode
argument_list|(
name|map
argument_list|)
operator|.
name|descendantCount
expr_stmt|;
block|}
name|node
operator|.
name|descendantInlineCount
operator|+=
literal|1
operator|+
name|id
operator|.
name|getNode
argument_list|(
name|map
argument_list|)
operator|.
name|descendantInlineCount
expr_stmt|;
block|}
block|}
else|else
block|{
name|node
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
condition|)
do|;
name|t
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
name|NodeList
name|getNodeList
parameter_list|()
block|{
if|if
condition|(
name|childNodes
operator|==
literal|null
condition|)
block|{
name|childNodes
operator|=
operator|new
name|NodeListSmall
argument_list|()
expr_stmt|;
block|}
return|return
name|childNodes
return|;
block|}
name|void
name|setNodeList
parameter_list|(
name|NodeList
name|childNodes
parameter_list|)
block|{
name|this
operator|.
name|childNodes
operator|=
name|childNodes
expr_stmt|;
block|}
specifier|public
name|NodeImpl
name|setChild
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeImpl
name|child
parameter_list|,
name|long
name|revId
parameter_list|)
block|{
name|NodeImpl
name|result
init|=
name|createClone
argument_list|(
name|revId
argument_list|)
decl_stmt|;
name|NodeId
name|id
init|=
name|map
operator|.
name|addNode
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|childNodes
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|childNodes
operator|=
operator|new
name|NodeListSmall
argument_list|()
expr_stmt|;
name|result
operator|.
name|childNodes
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childNodes
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|result
operator|.
name|childNodes
operator|.
name|replace
argument_list|(
name|name
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|childNodes
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
name|void
name|visit
parameter_list|(
name|ChildVisitor
name|v
parameter_list|)
block|{
if|if
condition|(
name|childNodes
operator|!=
literal|null
condition|)
block|{
name|childNodes
operator|.
name|visit
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
interface|interface
name|ChildVisitor
block|{
name|void
name|accept
parameter_list|(
name|NodeId
name|childId
parameter_list|)
function_decl|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMemory
parameter_list|()
block|{
if|if
condition|(
name|memory
operator|==
literal|0
condition|)
block|{
name|String
index|[]
name|pv
init|=
name|propertyValuePairs
decl_stmt|;
if|if
condition|(
name|pv
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pv
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|memory
operator|+=
name|pv
index|[
name|i
index|]
operator|.
name|length
argument_list|()
operator|*
literal|2
expr_stmt|;
block|}
block|}
if|if
condition|(
name|childNodes
operator|!=
literal|null
condition|)
block|{
name|memory
operator|+=
name|childNodes
operator|.
name|getMemory
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|memory
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
name|Arrays
operator|.
name|hashCode
argument_list|(
name|propertyValuePairs
argument_list|)
decl_stmt|;
if|if
condition|(
name|childNodes
operator|!=
literal|null
condition|)
block|{
name|hash
operator|^=
name|childNodes
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|hash
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|other
operator|instanceof
name|NodeImpl
condition|)
block|{
name|NodeImpl
name|o
init|=
operator|(
name|NodeImpl
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|propertyValuePairs
argument_list|,
name|o
operator|.
name|propertyValuePairs
argument_list|)
condition|)
block|{
if|if
condition|(
name|childNodes
operator|==
literal|null
operator|||
name|o
operator|.
name|childNodes
operator|==
literal|null
condition|)
block|{
return|return
name|childNodes
operator|==
name|o
operator|.
name|childNodes
return|;
block|}
return|return
name|childNodes
operator|.
name|equals
argument_list|(
name|o
operator|.
name|childNodes
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|long
name|getTotalChildNodeCount
parameter_list|()
block|{
return|return
name|totalChildNodeCount
return|;
block|}
specifier|public
name|long
name|getChildNodeCount
parameter_list|()
block|{
return|return
name|childNodes
operator|==
literal|null
condition|?
literal|0
else|:
name|childNodes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|String
name|getNodeVersion
parameter_list|()
block|{
return|return
name|nodeVersion
return|;
block|}
block|}
end_class

end_unit

