begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|NumEntriesTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testZero
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|NumEntries
operator|.
name|ZERO
operator|.
name|isExact
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|NumEntries
operator|.
name|ZERO
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValueOfExactZero
parameter_list|()
block|{
name|assertSame
argument_list|(
name|NumEntries
operator|.
name|ZERO
argument_list|,
name|NumEntries
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValueOfNotExactZero
parameter_list|()
block|{
name|NumEntries
name|ne
init|=
name|NumEntries
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|NumEntries
operator|.
name|ZERO
argument_list|,
name|ne
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValueOfExact
parameter_list|()
block|{
name|NumEntries
name|ne
init|=
name|NumEntries
operator|.
name|valueOf
argument_list|(
literal|25
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ne
operator|.
name|isExact
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|ne
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValueOfNotExact
parameter_list|()
block|{
name|NumEntries
name|ne
init|=
name|NumEntries
operator|.
name|valueOf
argument_list|(
literal|25
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|ne
operator|.
name|isExact
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|ne
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|NumEntries
operator|.
name|ZERO
argument_list|,
name|NumEntries
operator|.
name|ZERO
argument_list|)
expr_stmt|;
name|NumEntries
name|ne1True
init|=
name|NumEntries
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|NumEntries
name|ne2True
init|=
name|NumEntries
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|NumEntries
name|ne1False
init|=
name|NumEntries
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ne1True
argument_list|,
name|ne1True
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|ne1False
argument_list|,
name|ne1True
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|ne2True
argument_list|,
name|ne1True
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ne1True
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ne1True
operator|.
name|equals
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCode
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|NumEntries
operator|.
name|ZERO
operator|.
name|hashCode
argument_list|()
argument_list|,
name|NumEntries
operator|.
name|ZERO
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|NumEntries
name|ne1True
init|=
name|NumEntries
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|NumEntries
name|ne1False
init|=
name|NumEntries
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ne1True
operator|.
name|hashCode
argument_list|()
argument_list|,
name|ne1True
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|ne1False
operator|.
name|hashCode
argument_list|()
argument_list|,
name|ne1True
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

