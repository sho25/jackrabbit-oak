begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tooling
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|text
operator|.
name|DateFormat
operator|.
name|getDateTimeInstance
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|humanReadableByteCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|InvalidFileStoreVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|JournalReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|ReadOnlyFileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|LocalJournalFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tooling
operator|.
name|ConsistencyCheckerTemplate
operator|.
name|ConsistencyCheckResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tooling
operator|.
name|ConsistencyCheckerTemplate
operator|.
name|Revision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|monitor
operator|.
name|IOMonitorAdapter
import|;
end_import

begin_comment
comment|/**  * Utility for checking the files of a  * {@link FileStore} for inconsistency and  * reporting that latest consistent revision.  */
end_comment

begin_class
specifier|public
class|class
name|ConsistencyChecker
implements|implements
name|Closeable
block|{
specifier|private
specifier|static
class|class
name|StatisticsIOMonitor
extends|extends
name|IOMonitorAdapter
block|{
specifier|private
specifier|final
name|AtomicLong
name|ioOperations
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|readBytes
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|readTime
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|afterSegmentRead
parameter_list|(
name|File
name|file
parameter_list|,
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|,
name|int
name|length
parameter_list|,
name|long
name|elapsed
parameter_list|)
block|{
name|ioOperations
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|readBytes
operator|.
name|addAndGet
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|readTime
operator|.
name|addAndGet
argument_list|(
name|elapsed
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|StatisticsIOMonitor
name|statisticsIOMonitor
init|=
operator|new
name|StatisticsIOMonitor
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ReadOnlyFileStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|long
name|debugInterval
decl_stmt|;
specifier|private
specifier|final
name|PrintWriter
name|outWriter
decl_stmt|;
specifier|private
specifier|final
name|PrintWriter
name|errWriter
decl_stmt|;
specifier|private
name|int
name|nodeCount
decl_stmt|;
specifier|private
name|int
name|propertyCount
decl_stmt|;
comment|/**      * Create a new consistency checker instance      *      * @param directory     directory containing the tar files      * @param debugInterval number of seconds between printing progress      *                      information to the console during the full traversal      *                      phase.      * @param ioStatistics  if {@code true} prints I/O statistics gathered while      *                      consistency check was performed      * @param outWriter     text output stream writer      * @param errWriter     text error stream writer      * @throws IOException      */
specifier|public
name|ConsistencyChecker
parameter_list|(
name|File
name|directory
parameter_list|,
name|long
name|debugInterval
parameter_list|,
name|boolean
name|ioStatistics
parameter_list|,
name|PrintWriter
name|outWriter
parameter_list|,
name|PrintWriter
name|errWriter
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidFileStoreVersionException
block|{
name|FileStoreBuilder
name|builder
init|=
name|fileStoreBuilder
argument_list|(
name|directory
argument_list|)
decl_stmt|;
if|if
condition|(
name|ioStatistics
condition|)
block|{
name|builder
operator|.
name|withIOMonitor
argument_list|(
name|statisticsIOMonitor
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|store
operator|=
name|builder
operator|.
name|buildReadOnly
argument_list|()
expr_stmt|;
name|this
operator|.
name|debugInterval
operator|=
name|debugInterval
expr_stmt|;
name|this
operator|.
name|outWriter
operator|=
name|outWriter
expr_stmt|;
name|this
operator|.
name|errWriter
operator|=
name|errWriter
expr_stmt|;
block|}
comment|/**      * Run a full traversal consistency check.      *      * @param directory       directory containing the tar files      * @param journalFileName name of the journal file containing the revision      *                        history      * @param checkBinaries   if {@code true} full content of binary properties      *                        will be scanned      * @param checkHead       if {@code true} will check the head      * @param checkpointsToCheck     collection of checkpoints to be checked      * @param filterPaths     collection of repository paths to be checked      * @param ioStatistics    if {@code true} prints I/O statistics gathered      *                        while consistency check was performed      */
specifier|public
name|void
name|checkConsistency
parameter_list|(
name|File
name|directory
parameter_list|,
name|String
name|journalFileName
parameter_list|,
name|boolean
name|checkBinaries
parameter_list|,
name|boolean
name|checkHead
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|checkpointsToCheck
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|filterPaths
parameter_list|,
name|boolean
name|ioStatistics
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|JournalReader
name|journal
init|=
operator|new
name|JournalReader
argument_list|(
operator|new
name|LocalJournalFile
argument_list|(
name|directory
argument_list|,
name|journalFileName
argument_list|)
argument_list|)
init|)
block|{
name|ConsistencyCheckerTemplate
name|template
init|=
operator|new
name|ConsistencyCheckerTemplate
argument_list|()
block|{
annotation|@
name|Override
name|void
name|onCheckRevision
parameter_list|(
name|String
name|revision
parameter_list|)
block|{
name|print
argument_list|(
literal|"\nChecking revision {0}"
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onCheckHead
parameter_list|()
block|{
name|print
argument_list|(
literal|"\nChecking head\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onCheckChekpoints
parameter_list|()
block|{
name|print
argument_list|(
literal|"\nChecking checkpoints"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onCheckCheckpoint
parameter_list|(
name|String
name|checkpoint
parameter_list|)
block|{
name|print
argument_list|(
literal|"\nChecking checkpoint {0}"
argument_list|,
name|checkpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onCheckpointNotFoundInRevision
parameter_list|(
name|String
name|checkpoint
parameter_list|)
block|{
name|printError
argument_list|(
literal|"Checkpoint {0} not found in this revision!"
argument_list|,
name|checkpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onCheckRevisionError
parameter_list|(
name|String
name|revision
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|printError
argument_list|(
literal|"Skipping invalid record id {0}: {1}"
argument_list|,
name|revision
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onConsistentPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|print
argument_list|(
literal|"Path {0} is consistent"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onPathNotFound
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|printError
argument_list|(
literal|"Path {0} not found"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onCheckTree
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|nodeCount
operator|=
literal|0
expr_stmt|;
name|propertyCount
operator|=
literal|0
expr_stmt|;
name|print
argument_list|(
literal|"Checking {0}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onCheckTreeEnd
parameter_list|()
block|{
name|print
argument_list|(
literal|"Checked {0} nodes and {1} properties"
argument_list|,
name|nodeCount
argument_list|,
name|propertyCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onCheckNode
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|debug
argument_list|(
literal|"Traversing {0}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|nodeCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onCheckProperty
parameter_list|()
block|{
name|propertyCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onCheckPropertyEnd
parameter_list|(
name|String
name|path
parameter_list|,
name|PropertyState
name|property
parameter_list|)
block|{
name|debug
argument_list|(
literal|"Checked {0}/{1}"
argument_list|,
name|path
argument_list|,
name|property
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onCheckNodeError
parameter_list|(
name|String
name|path
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|printError
argument_list|(
literal|"Error while traversing {0}: {1}"
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onCheckTreeError
parameter_list|(
name|String
name|path
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|printError
argument_list|(
literal|"Error while traversing {0}: {1}"
argument_list|,
name|path
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|checkpoints
init|=
name|checkpointsToCheck
decl_stmt|;
if|if
condition|(
name|checkpointsToCheck
operator|.
name|contains
argument_list|(
literal|"all"
argument_list|)
condition|)
block|{
name|checkpoints
operator|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|(
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|store
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|checkpoints
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ConsistencyCheckResult
name|result
init|=
name|template
operator|.
name|checkConsistency
argument_list|(
name|store
argument_list|,
name|journal
argument_list|,
name|checkHead
argument_list|,
name|checkpoints
argument_list|,
name|filterPaths
argument_list|,
name|checkBinaries
argument_list|)
decl_stmt|;
name|print
argument_list|(
literal|"\nSearched through {0} revisions and {1} checkpoints"
argument_list|,
name|result
operator|.
name|getCheckedRevisionsCount
argument_list|()
argument_list|,
name|checkpoints
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAnyRevision
argument_list|(
name|result
argument_list|)
condition|)
block|{
if|if
condition|(
name|checkHead
condition|)
block|{
name|print
argument_list|(
literal|"\nHead"
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Revision
argument_list|>
name|e
range|:
name|result
operator|.
name|getHeadRevisions
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|printRevision
argument_list|(
literal|0
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|checkpoints
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|print
argument_list|(
literal|"\nCheckpoints"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|checkpoint
range|:
name|result
operator|.
name|getCheckpointRevisions
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|print
argument_list|(
literal|"- {0}"
argument_list|,
name|checkpoint
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Revision
argument_list|>
name|e
range|:
name|result
operator|.
name|getCheckpointRevisions
argument_list|()
operator|.
name|get
argument_list|(
name|checkpoint
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|printRevision
argument_list|(
literal|2
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|print
argument_list|(
literal|"\nOverall"
argument_list|)
expr_stmt|;
name|printOverallRevision
argument_list|(
name|result
operator|.
name|getOverallRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|print
argument_list|(
literal|"No good revision found"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ioStatistics
condition|)
block|{
name|print
argument_list|(
literal|"[I/O] Segment read: Number of operations: {0}"
argument_list|,
name|statisticsIOMonitor
operator|.
name|ioOperations
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|print
argument_list|(
literal|"[I/O] Segment read: Total size: {0} ({1} bytes)"
argument_list|,
name|humanReadableByteCount
argument_list|(
name|statisticsIOMonitor
operator|.
name|readBytes
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|statisticsIOMonitor
operator|.
name|readBytes
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|print
argument_list|(
literal|"[I/O] Segment read: Total time: {0} ns"
argument_list|,
name|statisticsIOMonitor
operator|.
name|readTime
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|printRevision
parameter_list|(
name|int
name|indent
parameter_list|,
name|String
name|path
parameter_list|,
name|Revision
name|revision
parameter_list|)
block|{
name|Optional
argument_list|<
name|Revision
argument_list|>
name|r
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|revision
argument_list|)
decl_stmt|;
name|print
argument_list|(
literal|"{0}Latest good revision for path {1} is {2} from {3}"
argument_list|,
name|Strings
operator|.
name|repeat
argument_list|(
literal|" "
argument_list|,
name|indent
argument_list|)
argument_list|,
name|path
argument_list|,
name|r
operator|.
name|map
argument_list|(
name|Revision
operator|::
name|getRevision
argument_list|)
operator|.
name|orElse
argument_list|(
literal|"none"
argument_list|)
argument_list|,
name|r
operator|.
name|map
argument_list|(
name|Revision
operator|::
name|getTimestamp
argument_list|)
operator|.
name|map
argument_list|(
name|ConsistencyChecker
operator|::
name|timestampToString
argument_list|)
operator|.
name|orElse
argument_list|(
literal|"unknown time"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|printOverallRevision
parameter_list|(
name|Revision
name|revision
parameter_list|)
block|{
name|Optional
argument_list|<
name|Revision
argument_list|>
name|r
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|revision
argument_list|)
decl_stmt|;
name|print
argument_list|(
literal|"Latest good revision for paths and checkpoints checked is {0} from {1}"
argument_list|,
name|r
operator|.
name|map
argument_list|(
name|Revision
operator|::
name|getRevision
argument_list|)
operator|.
name|orElse
argument_list|(
literal|"none"
argument_list|)
argument_list|,
name|r
operator|.
name|map
argument_list|(
name|Revision
operator|::
name|getTimestamp
argument_list|)
operator|.
name|map
argument_list|(
name|ConsistencyChecker
operator|::
name|timestampToString
argument_list|)
operator|.
name|orElse
argument_list|(
literal|"unknown time"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|hasAnyRevision
parameter_list|(
name|ConsistencyCheckResult
name|result
parameter_list|)
block|{
return|return
name|hasAnyHeadRevision
argument_list|(
name|result
argument_list|)
operator|||
name|hasAnyCheckpointRevision
argument_list|(
name|result
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|hasAnyHeadRevision
parameter_list|(
name|ConsistencyCheckResult
name|result
parameter_list|)
block|{
return|return
name|result
operator|.
name|getHeadRevisions
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|hasAnyCheckpointRevision
parameter_list|(
name|ConsistencyCheckResult
name|result
parameter_list|)
block|{
return|return
name|result
operator|.
name|getCheckpointRevisions
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|m
lambda|->
name|m
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|anyMatch
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|print
parameter_list|(
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|arguments
parameter_list|)
block|{
name|outWriter
operator|.
name|println
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|arguments
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|printError
parameter_list|(
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|errWriter
operator|.
name|println
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|ts
decl_stmt|;
specifier|private
name|void
name|debug
parameter_list|(
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|arg
parameter_list|)
block|{
if|if
condition|(
name|debug
argument_list|()
condition|)
block|{
name|print
argument_list|(
name|format
argument_list|,
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|debug
parameter_list|()
block|{
comment|// Avoid calling System.currentTimeMillis(), which is slow on some systems.
if|if
condition|(
name|debugInterval
operator|==
name|Long
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|debugInterval
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|ts
operator|-
name|this
operator|.
name|ts
operator|)
operator|/
literal|1000
operator|>
name|debugInterval
condition|)
block|{
name|this
operator|.
name|ts
operator|=
name|ts
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|timestampToString
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
return|return
name|getDateTimeInstance
argument_list|()
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|timestamp
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

