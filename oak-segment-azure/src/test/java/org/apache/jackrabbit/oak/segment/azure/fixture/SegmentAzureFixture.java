begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|fixture
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|CloudStorageAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|NodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|AzurePersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|InvalidFileStoreVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|SegmentAzureFixture
extends|extends
name|NodeStoreFixture
block|{
specifier|private
specifier|static
specifier|final
name|String
name|AZURE_CONNECTION_STRING
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"oak.segment.azure.connection"
argument_list|,
literal|"DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|AZURE_CONTAINER
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"oak.segment.azure.container"
argument_list|,
literal|"oak"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|AZURE_ROOT_PATH
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"oak.segment.azure.rootPath"
argument_list|,
literal|"/oak"
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|NodeStore
argument_list|,
name|FileStore
argument_list|>
name|fileStoreMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|NodeStore
argument_list|,
name|CloudBlobContainer
argument_list|>
name|containerMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|NodeStore
name|createNodeStore
parameter_list|()
block|{
name|AzurePersistence
name|persistence
decl_stmt|;
name|CloudBlobContainer
name|container
decl_stmt|;
try|try
block|{
name|CloudStorageAccount
name|cloud
init|=
name|CloudStorageAccount
operator|.
name|parse
argument_list|(
name|AZURE_CONNECTION_STRING
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|containerName
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
name|containerName
operator|=
name|AZURE_CONTAINER
expr_stmt|;
block|}
else|else
block|{
name|containerName
operator|=
name|AZURE_CONTAINER
operator|+
literal|"_"
operator|+
name|i
expr_stmt|;
block|}
name|container
operator|=
name|cloud
operator|.
name|createCloudBlobClient
argument_list|()
operator|.
name|getContainerReference
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|container
operator|.
name|exists
argument_list|()
condition|)
block|{
name|container
operator|.
name|create
argument_list|()
expr_stmt|;
break|break;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|CloudBlobDirectory
name|directory
init|=
name|container
operator|.
name|getDirectoryReference
argument_list|(
name|AZURE_ROOT_PATH
argument_list|)
decl_stmt|;
name|persistence
operator|=
operator|new
name|AzurePersistence
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
decl||
name|URISyntaxException
decl||
name|InvalidKeyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|FileStore
name|fileStore
init|=
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
argument_list|(
name|Files
operator|.
name|createTempDir
argument_list|()
argument_list|)
operator|.
name|withCustomPersistence
argument_list|(
name|persistence
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|NodeStore
name|nodeStore
init|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|fileStore
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|fileStoreMap
operator|.
name|put
argument_list|(
name|nodeStore
argument_list|,
name|fileStore
argument_list|)
expr_stmt|;
name|containerMap
operator|.
name|put
argument_list|(
name|nodeStore
argument_list|,
name|container
argument_list|)
expr_stmt|;
return|return
name|nodeStore
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InvalidFileStoreVersionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|dispose
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|)
block|{
name|FileStore
name|fs
init|=
name|fileStoreMap
operator|.
name|remove
argument_list|(
name|nodeStore
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|CloudBlobContainer
name|container
init|=
name|containerMap
operator|.
name|remove
argument_list|(
name|nodeStore
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|deleteIfExists
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SegmentAzure"
return|;
block|}
block|}
end_class

end_unit

