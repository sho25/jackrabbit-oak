begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|AggregatedPermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
specifier|public
class|class
name|AggregationFilterImplTest
extends|extends
name|AbstractPrincipalBasedTest
block|{
specifier|private
name|AggregationFilterImpl
name|aggregationFilter
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Principal
argument_list|>
name|systemUserPrincipals
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Principal
argument_list|>
name|testUserPrincipals
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|aggregationFilter
operator|=
operator|new
name|AggregationFilterImpl
argument_list|()
expr_stmt|;
name|systemUserPrincipals
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|getTestSystemUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|testUserPrincipals
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStopPermissionProviderTrue
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|aggregationFilter
operator|.
name|stop
argument_list|(
name|createPermissionProvider
argument_list|(
name|root
argument_list|,
name|systemUserPrincipals
operator|.
name|toArray
argument_list|(
operator|new
name|Principal
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|,
name|systemUserPrincipals
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStopPermissionProviderFalse
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|aggregationFilter
operator|.
name|stop
argument_list|(
name|mock
argument_list|(
name|AggregatedPermissionProvider
operator|.
name|class
argument_list|)
argument_list|,
name|systemUserPrincipals
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|aggregationFilter
operator|.
name|stop
argument_list|(
name|mock
argument_list|(
name|AggregatedPermissionProvider
operator|.
name|class
argument_list|)
argument_list|,
name|testUserPrincipals
argument_list|)
argument_list|)
expr_stmt|;
name|PermissionProvider
name|pp
init|=
name|getConfig
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
name|adminSession
operator|.
name|getWorkspaceName
argument_list|()
argument_list|,
name|systemUserPrincipals
argument_list|)
decl_stmt|;
if|if
condition|(
name|pp
operator|instanceof
name|AggregatedPermissionProvider
condition|)
block|{
name|assertFalse
argument_list|(
name|aggregationFilter
operator|.
name|stop
argument_list|(
operator|(
name|AggregatedPermissionProvider
operator|)
name|pp
argument_list|,
name|systemUserPrincipals
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pp
operator|=
name|getConfig
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
name|adminSession
operator|.
name|getWorkspaceName
argument_list|()
argument_list|,
name|testUserPrincipals
argument_list|)
expr_stmt|;
if|if
condition|(
name|pp
operator|instanceof
name|AggregatedPermissionProvider
condition|)
block|{
name|assertFalse
argument_list|(
name|aggregationFilter
operator|.
name|stop
argument_list|(
operator|(
name|AggregatedPermissionProvider
operator|)
name|pp
argument_list|,
name|testUserPrincipals
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStopAcMgrPrincipalsTrue
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|aggregationFilter
operator|.
name|stop
argument_list|(
name|createAccessControlManager
argument_list|(
name|root
argument_list|)
argument_list|,
name|systemUserPrincipals
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStopAcMgrPrincipalsFalse
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|aggregationFilter
operator|.
name|stop
argument_list|(
name|mock
argument_list|(
name|JackrabbitAccessControlManager
operator|.
name|class
argument_list|)
argument_list|,
name|systemUserPrincipals
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|aggregationFilter
operator|.
name|stop
argument_list|(
name|mock
argument_list|(
name|JackrabbitAccessControlManager
operator|.
name|class
argument_list|)
argument_list|,
name|testUserPrincipals
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|aggregationFilter
operator|.
name|stop
argument_list|(
name|createAccessControlManager
argument_list|(
name|root
argument_list|)
argument_list|,
name|testUserPrincipals
argument_list|)
argument_list|)
expr_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|getConfig
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getAccessControlManager
argument_list|(
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|acMgr
operator|instanceof
name|JackrabbitAccessControlManager
condition|)
block|{
name|assertFalse
argument_list|(
name|aggregationFilter
operator|.
name|stop
argument_list|(
operator|(
name|JackrabbitAccessControlManager
operator|)
name|acMgr
argument_list|,
name|systemUserPrincipals
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStopAcMgrPrincipalsInvalid
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|aggregationFilter
operator|.
name|stop
argument_list|(
name|createAccessControlManager
argument_list|(
name|root
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|"invalid"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStopAcMgrPath
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|aggregationFilter
operator|.
name|stop
argument_list|(
name|createAccessControlManager
argument_list|(
name|root
argument_list|)
argument_list|,
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|aggregationFilter
operator|.
name|stop
argument_list|(
name|createAccessControlManager
argument_list|(
name|root
argument_list|)
argument_list|,
name|SUPPORTED_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|aggregationFilter
operator|.
name|stop
argument_list|(
name|getConfig
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getAccessControlManager
argument_list|(
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
argument_list|,
name|SUPPORTED_PATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

