begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|NodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Emulates behavior similar to an import of many nodes (batched).  *  * These tests are disabled by default due to their long running time. On the command line  * specify {@code -DPackageImportIT=true} to enable them.  */
end_comment

begin_class
specifier|public
class|class
name|PackageImportIT
extends|extends
name|AbstractRepositoryTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PackageImportIT
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|ENABLED
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|PackageImportIT
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|PackageImportIT
parameter_list|(
name|NodeStoreFixture
name|fixture
parameter_list|)
block|{
name|super
argument_list|(
name|fixture
argument_list|)
expr_stmt|;
name|assumeTrue
argument_list|(
name|ENABLED
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|TEST_NODE
init|=
literal|"import-test"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_PATH
init|=
literal|'/'
operator|+
name|TEST_NODE
decl_stmt|;
specifier|private
specifier|static
name|int
name|DURATION
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"import.duration"
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|BATCHSIZE
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"import.batchsize"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|NOTREFERENCEABLE
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"import.notreferenceable"
argument_list|)
decl_stmt|;
specifier|private
name|Node
name|testNode
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|Node
name|root
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|testNode
operator|=
name|root
operator|.
name|addNode
argument_list|(
name|TEST_NODE
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting test for{}. Duration: {}, batch size: {}, referenceable: {}, update.limit: {}."
argument_list|,
name|super
operator|.
name|fixture
argument_list|,
name|DURATION
argument_list|,
name|BATCHSIZE
argument_list|,
operator|!
name|NOTREFERENCEABLE
argument_list|,
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"update.limit"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|s
init|=
name|testNode
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|s
operator|.
name|removeItem
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
name|s
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImport
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|until
init|=
name|start
operator|+
name|DURATION
decl_stmt|;
name|long
name|total
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|until
condition|)
block|{
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|String
name|cname
init|=
name|String
operator|.
name|format
argument_list|(
literal|"fld-%x"
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|Node
name|container
init|=
name|testNode
operator|.
name|addNode
argument_list|(
name|cname
argument_list|,
name|JcrConstants
operator|.
name|NT_FOLDER
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCHSIZE
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|f
init|=
name|container
operator|.
name|addNode
argument_list|(
literal|"f"
operator|+
name|i
argument_list|,
name|JcrConstants
operator|.
name|NT_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|NOTREFERENCEABLE
condition|)
block|{
name|f
operator|.
name|addMixin
argument_list|(
name|JcrConstants
operator|.
name|MIX_REFERENCEABLE
argument_list|)
expr_stmt|;
block|}
name|Node
name|c
init|=
name|f
operator|.
name|addNode
argument_list|(
name|JcrConstants
operator|.
name|JCR_CONTENT
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|c
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
block|}
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|long
name|elapsed
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Saved {} nodes ({}) in {}ms ({})"
argument_list|,
name|BATCHSIZE
argument_list|,
name|NOTREFERENCEABLE
condition|?
literal|"not referenceable"
else|:
literal|"referenceable"
argument_list|,
name|elapsed
argument_list|,
name|super
operator|.
name|fixture
argument_list|)
expr_stmt|;
name|total
operator|+=
name|BATCHSIZE
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"A total of {} nodes were saved ({})."
argument_list|,
name|total
argument_list|,
name|super
operator|.
name|fixture
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

