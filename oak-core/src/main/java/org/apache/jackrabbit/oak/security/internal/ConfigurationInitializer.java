begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|RootProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|CompositeConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_class
specifier|final
class|class
name|ConfigurationInitializer
block|{
specifier|private
name|ConfigurationInitializer
parameter_list|()
block|{}
annotation|@
name|NotNull
specifier|static
parameter_list|<
name|T
extends|extends
name|SecurityConfiguration
parameter_list|>
name|T
name|initializeConfiguration
parameter_list|(
annotation|@
name|NotNull
name|T
name|configuration
parameter_list|,
annotation|@
name|NotNull
name|SecurityProvider
name|securityProvider
parameter_list|,
annotation|@
name|NotNull
name|RootProvider
name|rootProvider
parameter_list|,
annotation|@
name|NotNull
name|TreeProvider
name|treeProvider
parameter_list|)
block|{
return|return
name|initializeConfiguration
argument_list|(
name|configuration
argument_list|,
name|securityProvider
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|rootProvider
argument_list|,
name|treeProvider
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|static
parameter_list|<
name|T
extends|extends
name|SecurityConfiguration
parameter_list|>
name|T
name|initializeConfiguration
parameter_list|(
annotation|@
name|NotNull
name|T
name|configuration
parameter_list|,
annotation|@
name|NotNull
name|SecurityProvider
name|securityProvider
parameter_list|,
annotation|@
name|NotNull
name|ConfigurationParameters
name|parameters
parameter_list|,
annotation|@
name|NotNull
name|RootProvider
name|rootProvider
parameter_list|,
annotation|@
name|NotNull
name|TreeProvider
name|treeProvider
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|instanceof
name|ConfigurationBase
condition|)
block|{
name|ConfigurationBase
name|base
init|=
operator|(
name|ConfigurationBase
operator|)
name|configuration
decl_stmt|;
name|base
operator|.
name|setSecurityProvider
argument_list|(
name|securityProvider
argument_list|)
expr_stmt|;
name|base
operator|.
name|setRootProvider
argument_list|(
name|rootProvider
argument_list|)
expr_stmt|;
name|base
operator|.
name|setTreeProvider
argument_list|(
name|treeProvider
argument_list|)
expr_stmt|;
name|base
operator|.
name|setParameters
argument_list|(
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|base
operator|.
name|getParameters
argument_list|()
argument_list|,
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|configuration
return|;
block|}
specifier|static
parameter_list|<
name|T
extends|extends
name|SecurityConfiguration
parameter_list|>
name|void
name|initializeConfigurations
parameter_list|(
annotation|@
name|NotNull
name|CompositeConfiguration
argument_list|<
name|T
argument_list|>
name|configuration
parameter_list|,
annotation|@
name|NotNull
name|SecurityProvider
name|securityProvider
parameter_list|,
annotation|@
name|NotNull
name|ConfigurationParameters
name|parameters
parameter_list|,
annotation|@
name|NotNull
name|RootProvider
name|rootProvider
parameter_list|,
annotation|@
name|NotNull
name|TreeProvider
name|treeProvider
parameter_list|)
block|{
name|configuration
operator|.
name|setSecurityProvider
argument_list|(
name|securityProvider
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setRootProvider
argument_list|(
name|rootProvider
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setTreeProvider
argument_list|(
name|treeProvider
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|configs
init|=
name|configuration
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
for|for
control|(
name|T
name|config
range|:
name|configs
control|)
block|{
name|initializeConfiguration
argument_list|(
name|config
argument_list|,
name|securityProvider
argument_list|,
name|parameters
argument_list|,
name|rootProvider
argument_list|,
name|treeProvider
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

