begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ServiceLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SettableFuture
import|;
end_import

begin_import
import|import
name|de
operator|.
name|kalpatec
operator|.
name|pojosr
operator|.
name|framework
operator|.
name|launch
operator|.
name|BundleDescriptor
import|;
end_import

begin_import
import|import
name|de
operator|.
name|kalpatec
operator|.
name|pojosr
operator|.
name|framework
operator|.
name|launch
operator|.
name|ClasspathScanner
import|;
end_import

begin_import
import|import
name|de
operator|.
name|kalpatec
operator|.
name|pojosr
operator|.
name|framework
operator|.
name|launch
operator|.
name|PojoServiceRegistry
import|;
end_import

begin_import
import|import
name|de
operator|.
name|kalpatec
operator|.
name|pojosr
operator|.
name|framework
operator|.
name|launch
operator|.
name|PojoServiceRegistryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|OakOSGiRepositoryFactory
implements|implements
name|RepositoryFactory
block|{
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OakOSGiRepositoryFactory
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Name of the repository home parameter.      */
specifier|public
specifier|static
specifier|final
name|String
name|REPOSITORY_HOME
init|=
literal|"org.apache.jackrabbit.repository.home"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REPOSITORY_STARTUP_TIMEOUT
init|=
literal|"org.apache.jackrabbit.repository.startupTimeOut"
decl_stmt|;
comment|/**      * Default timeout for repository creation      */
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_TIMEOUT
init|=
operator|(
name|int
operator|)
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toSeconds
argument_list|(
literal|10
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Repository
name|getRepository
parameter_list|(
name|Map
name|parameters
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Map
name|config
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|config
operator|.
name|putAll
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
comment|//TODO Add support for passing config as map of PID -> Dictionary
comment|//as part of parameters and hook it up with Felix ConfigAdmin
comment|//Say via custom InMemory PersistenceManager or programatically
comment|//registering it with using ConfigAdmin API
comment|//For later part we would need to implement some sort of Start Level
comment|//support such that
comment|// 1. Some base bundles like ConfigAdmin get start first
comment|// 2. We register the user provided config
comment|// 3. Other bundles get started
comment|//TODO With OSGi Whiteboard we need to provide support for handling
comment|//execution and JMX support as so far they were provided by Sling bundles
comment|//in OSGi env
name|processConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|PojoServiceRegistry
name|registry
init|=
name|createServiceRegistry
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|preProcessRegistry
argument_list|(
name|registry
argument_list|)
expr_stmt|;
name|startBundles
argument_list|(
name|registry
argument_list|)
expr_stmt|;
name|postProcessRegistry
argument_list|(
name|registry
argument_list|)
expr_stmt|;
comment|//Future which would be used to notify when repository is ready
comment|// to be used
name|SettableFuture
argument_list|<
name|Repository
argument_list|>
name|repoFuture
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
comment|//Start the tracker for repository creation
operator|new
name|RepositoryTracker
argument_list|(
name|registry
argument_list|,
name|repoFuture
argument_list|)
expr_stmt|;
comment|//Now wait for repository to be created with given timeout
comment|//if repository creation takes more time. This is required to handle case
comment|// where OSGi runtime fails to start due to bugs (like cycles)
name|int
name|timeout
init|=
name|getTimeoutInSeconds
argument_list|(
name|config
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|repoFuture
operator|.
name|get
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Repository initialization was interrupted"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
try|try
block|{
name|shutdown
argument_list|(
name|registry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BundleException
name|be
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error occurred while shutting down the service registry (due to "
operator|+
literal|"startup timeout) backing the Repository "
argument_list|,
name|be
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Repository could not be started in "
operator|+
name|timeout
operator|+
literal|" seconds"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Enables pre processing of service registry by sub classes. This can be      * used to register services before any bundle gets started      *      * @param registry service registry      */
specifier|protected
name|void
name|preProcessRegistry
parameter_list|(
name|PojoServiceRegistry
name|registry
parameter_list|)
block|{      }
comment|/**      * Enables post processing of service registry e.g. registering new services etc      * by sub classes      *      * @param registry service registry      */
specifier|protected
name|void
name|postProcessRegistry
parameter_list|(
name|PojoServiceRegistry
name|registry
parameter_list|)
block|{      }
comment|/**      * @param descriptors      * @return the bundle descriptors      */
specifier|protected
name|List
argument_list|<
name|BundleDescriptor
argument_list|>
name|processDescriptors
parameter_list|(
name|List
argument_list|<
name|BundleDescriptor
argument_list|>
name|descriptors
parameter_list|)
block|{
comment|//If required sort the bundle descriptors such that configuration admin and file install bundle
comment|//gets started before SCR
name|Collections
operator|.
name|sort
argument_list|(
name|descriptors
argument_list|,
operator|new
name|BundleDescriptorComparator
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|descriptors
return|;
block|}
specifier|static
name|void
name|shutdown
parameter_list|(
name|PojoServiceRegistry
name|registry
parameter_list|)
throws|throws
name|BundleException
block|{
if|if
condition|(
name|registry
operator|!=
literal|null
condition|)
block|{
name|registry
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getBundle
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|int
name|getTimeoutInSeconds
parameter_list|(
name|Map
name|config
parameter_list|)
block|{
name|Integer
name|timeout
init|=
operator|(
name|Integer
operator|)
name|config
operator|.
name|get
argument_list|(
name|REPOSITORY_STARTUP_TIMEOUT
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeout
operator|==
literal|null
condition|)
block|{
name|timeout
operator|=
name|DEFAULT_TIMEOUT
expr_stmt|;
block|}
return|return
name|timeout
return|;
block|}
specifier|private
specifier|static
name|void
name|processConfig
parameter_list|(
name|Map
name|config
parameter_list|)
block|{
name|String
name|home
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|REPOSITORY_HOME
argument_list|)
decl_stmt|;
name|checkNotNull
argument_list|(
name|home
argument_list|,
literal|"Repository home not defined via [%s]"
argument_list|,
name|REPOSITORY_HOME
argument_list|)
expr_stmt|;
name|home
operator|=
name|FilenameUtils
operator|.
name|normalizeNoEndSeparator
argument_list|(
name|home
argument_list|)
expr_stmt|;
name|String
name|bundleDir
init|=
name|FilenameUtils
operator|.
name|concat
argument_list|(
name|home
argument_list|,
literal|"bundles"
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|FRAMEWORK_STORAGE
argument_list|,
name|bundleDir
argument_list|)
expr_stmt|;
comment|//FIXME Pojo SR currently reads this from system property instead of Framework Property
name|System
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|FRAMEWORK_STORAGE
argument_list|,
name|bundleDir
argument_list|)
expr_stmt|;
comment|//Directory used by Felix File Install to watch for configs
name|config
operator|.
name|put
argument_list|(
literal|"felix.fileinstall.dir"
argument_list|,
name|FilenameUtils
operator|.
name|concat
argument_list|(
name|home
argument_list|,
literal|"config"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Set log level for config to INFO LogService.LOG_INFO
name|config
operator|.
name|put
argument_list|(
literal|"felix.fileinstall.log.level"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
comment|//This ensures that configuration is registered in main thread
comment|//and not in a different thread
name|config
operator|.
name|put
argument_list|(
literal|"felix.fileinstall.noInitialDelay"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|//Directory used by Felix File Install to watch for configs
name|config
operator|.
name|put
argument_list|(
literal|"repository.home"
argument_list|,
name|FilenameUtils
operator|.
name|concat
argument_list|(
name|home
argument_list|,
literal|"repository"
argument_list|)
argument_list|)
expr_stmt|;
name|copyConfigToSystemProps
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|copyConfigToSystemProps
parameter_list|(
name|Map
name|config
parameter_list|)
block|{
comment|//TODO This is a temporary workaround as the current release version
comment|//of PojoSR reads value from System properties. Trunk version reads from
comment|//initial map. This should be removed when we move to version which has the fix
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|>
name|itr
init|=
name|config
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
name|e
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
operator|(
name|String
operator|)
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|PojoServiceRegistry
name|createServiceRegistry
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
try|try
block|{
name|ServiceLoader
argument_list|<
name|PojoServiceRegistryFactory
argument_list|>
name|loader
init|=
name|ServiceLoader
operator|.
name|load
argument_list|(
name|PojoServiceRegistryFactory
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|loader
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|newPojoServiceRegistry
argument_list|(
name|config
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|startBundles
parameter_list|(
name|PojoServiceRegistry
name|registry
parameter_list|)
block|{
try|try
block|{
name|List
argument_list|<
name|BundleDescriptor
argument_list|>
name|descriptors
init|=
operator|new
name|ClasspathScanner
argument_list|()
operator|.
name|scanForBundles
argument_list|()
decl_stmt|;
name|descriptors
operator|=
name|processDescriptors
argument_list|(
name|descriptors
argument_list|)
expr_stmt|;
name|registry
operator|.
name|startBundles
argument_list|(
name|descriptors
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|RepositoryTracker
extends|extends
name|ServiceTracker
block|{
specifier|private
specifier|final
name|SettableFuture
argument_list|<
name|Repository
argument_list|>
name|repoFuture
decl_stmt|;
specifier|private
specifier|final
name|PojoServiceRegistry
name|registry
decl_stmt|;
specifier|private
name|RepositoryProxy
name|proxy
decl_stmt|;
specifier|public
name|RepositoryTracker
parameter_list|(
name|PojoServiceRegistry
name|registry
parameter_list|,
name|SettableFuture
argument_list|<
name|Repository
argument_list|>
name|repoFuture
parameter_list|)
block|{
name|super
argument_list|(
name|registry
operator|.
name|getBundleContext
argument_list|()
argument_list|,
name|Repository
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|repoFuture
operator|=
name|repoFuture
expr_stmt|;
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
name|this
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|addingService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|)
block|{
name|Object
name|service
init|=
name|super
operator|.
name|addingService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy
operator|==
literal|null
condition|)
block|{
comment|//As its possible that future is accessed before the service
comment|//get registered with tracker. We also capture the initial reference
comment|//and use that for the first access case
name|repoFuture
operator|.
name|set
argument_list|(
name|createProxy
argument_list|(
operator|(
name|Repository
operator|)
name|service
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|service
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removedService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|,
name|Object
name|service
parameter_list|)
block|{
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
name|proxy
operator|.
name|clearInitialReference
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|PojoServiceRegistry
name|getRegistry
parameter_list|()
block|{
return|return
name|registry
return|;
block|}
specifier|private
name|Repository
name|createProxy
parameter_list|(
name|Repository
name|service
parameter_list|)
block|{
name|proxy
operator|=
operator|new
name|RepositoryProxy
argument_list|(
name|this
argument_list|,
name|service
argument_list|)
expr_stmt|;
return|return
operator|(
name|Repository
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Repository
operator|.
name|class
block|,
name|JackrabbitRepository
operator|.
name|class
block|}
argument_list|,
name|proxy
argument_list|)
return|;
block|}
block|}
comment|/**      * Due to the way SecurityConfiguration is managed in OSGi env its possible      * that repository gets created/shutdown few times. So need to have a proxy      * to access the latest service      */
specifier|private
specifier|static
class|class
name|RepositoryProxy
implements|implements
name|InvocationHandler
block|{
specifier|private
specifier|final
name|RepositoryTracker
name|tracker
decl_stmt|;
specifier|private
name|Repository
name|initialService
decl_stmt|;
specifier|private
name|RepositoryProxy
parameter_list|(
name|RepositoryTracker
name|tracker
parameter_list|,
name|Repository
name|initialService
parameter_list|)
block|{
name|this
operator|.
name|tracker
operator|=
name|tracker
expr_stmt|;
name|this
operator|.
name|initialService
operator|=
name|initialService
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|Object
name|obj
init|=
name|tracker
operator|.
name|getService
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
name|obj
operator|=
name|initialService
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|obj
argument_list|,
literal|"Repository service is not available"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"shutdown"
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|shutdown
argument_list|(
name|tracker
operator|.
name|getRegistry
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|method
operator|.
name|invoke
argument_list|(
name|obj
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|public
name|void
name|clearInitialReference
parameter_list|()
block|{
name|this
operator|.
name|initialService
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

