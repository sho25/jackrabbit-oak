begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|PathUtils
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|TraversingNodeDiffHandler
extends|extends
name|NodeStateDiff
block|{
specifier|protected
name|Stack
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|Stack
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|start
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|start
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|paths
operator|.
name|clear
argument_list|()
expr_stmt|;
name|paths
operator|.
name|push
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|getCurrentPath
parameter_list|()
block|{
return|return
name|paths
operator|.
name|peek
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|paths
operator|.
name|push
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|getCurrentPath
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|paths
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

