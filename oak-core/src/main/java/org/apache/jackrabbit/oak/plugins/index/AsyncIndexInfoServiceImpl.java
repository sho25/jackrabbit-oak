begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|IndexStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|ISO8601
import|;
end_import

begin_class
annotation|@
name|Component
annotation|@
name|Service
specifier|public
class|class
name|AsyncIndexInfoServiceImpl
implements|implements
name|AsyncIndexInfoService
block|{
annotation|@
name|Reference
argument_list|(
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_MULTIPLE
argument_list|,
name|policyOption
operator|=
name|ReferencePolicyOption
operator|.
name|GREEDY
argument_list|,
name|referenceInterface
operator|=
name|IndexStatsMBean
operator|.
name|class
argument_list|)
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|IndexStatsMBean
argument_list|>
name|statsMBeans
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|NodeStore
name|nodeStore
decl_stmt|;
specifier|public
name|AsyncIndexInfoServiceImpl
parameter_list|()
block|{      }
specifier|public
name|AsyncIndexInfoServiceImpl
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|)
block|{
name|this
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getAsyncLanes
parameter_list|()
block|{
return|return
name|getAsyncLanes
argument_list|(
name|nodeStore
operator|.
name|getRoot
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getAsyncLanes
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
name|NodeState
name|async
init|=
name|getAsyncState
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyState
name|ps
range|:
name|async
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|ps
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|AsyncIndexUpdate
operator|.
name|isAsyncLaneName
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|names
return|;
block|}
annotation|@
name|Override
specifier|public
name|AsyncIndexInfo
name|getInfo
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getInfo
argument_list|(
name|name
argument_list|,
name|nodeStore
operator|.
name|getRoot
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|AsyncIndexInfo
name|getInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|root
parameter_list|)
block|{
name|NodeState
name|async
init|=
name|getAsyncState
argument_list|(
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|async
operator|.
name|hasProperty
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|long
name|lastIndexedTo
init|=
name|getDateAsMillis
argument_list|(
name|async
operator|.
name|getProperty
argument_list|(
name|AsyncIndexUpdate
operator|.
name|lastIndexedTo
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|leaseEnd
init|=
operator|-
literal|1
decl_stmt|;
name|boolean
name|running
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|async
operator|.
name|hasProperty
argument_list|(
name|AsyncIndexUpdate
operator|.
name|leasify
argument_list|(
name|name
argument_list|)
argument_list|)
condition|)
block|{
name|running
operator|=
literal|true
expr_stmt|;
name|leaseEnd
operator|=
name|async
operator|.
name|getLong
argument_list|(
name|AsyncIndexUpdate
operator|.
name|leasify
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|IndexStatsMBean
name|mbean
init|=
name|statsMBeans
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
operator|new
name|AsyncIndexInfo
argument_list|(
name|name
argument_list|,
name|lastIndexedTo
argument_list|,
name|leaseEnd
argument_list|,
name|running
argument_list|,
name|mbean
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|NodeState
name|getAsyncState
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
return|return
name|root
operator|.
name|getChildNode
argument_list|(
name|AsyncIndexUpdate
operator|.
name|ASYNC
argument_list|)
return|;
block|}
specifier|protected
name|void
name|bindStatsMBeans
parameter_list|(
name|IndexStatsMBean
name|mBean
parameter_list|)
block|{
name|statsMBeans
operator|.
name|put
argument_list|(
name|mBean
operator|.
name|getName
argument_list|()
argument_list|,
name|mBean
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|unbindStatsMBeans
parameter_list|(
name|IndexStatsMBean
name|mBean
parameter_list|)
block|{
name|statsMBeans
operator|.
name|remove
argument_list|(
name|mBean
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|long
name|getDateAsMillis
parameter_list|(
name|PropertyState
name|ps
parameter_list|)
block|{
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|String
name|date
init|=
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|ISO8601
operator|.
name|parse
argument_list|(
name|date
argument_list|)
decl_stmt|;
return|return
name|cal
operator|.
name|getTimeInMillis
argument_list|()
return|;
block|}
block|}
end_class

end_unit

