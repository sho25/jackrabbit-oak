begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|migration
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|System
operator|.
name|nanoTime
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|management
operator|.
name|ManagementOperation
operator|.
name|done
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|management
operator|.
name|ManagementOperation
operator|.
name|newManagementOperation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|management
operator|.
name|ManagementOperation
operator|.
name|Status
operator|.
name|formatTime
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|registerMBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|SimpleType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|RepositoryManagementMBean
operator|.
name|StatusCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|AnnotatedStandardMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|management
operator|.
name|ManagementOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|split
operator|.
name|SplitBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Component
specifier|public
class|class
name|BlobMigration
extends|extends
name|AnnotatedStandardMBean
implements|implements
name|BlobMigrationMBean
block|{
specifier|public
specifier|static
specifier|final
name|String
name|OP_NAME
init|=
literal|"Blob migration"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlobMigrator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ManagementOperation
argument_list|<
name|String
argument_list|>
name|migrationOp
init|=
name|done
argument_list|(
name|OP_NAME
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|CompositeType
name|TYPE
decl_stmt|;
static|static
block|{
name|CompositeType
name|type
decl_stmt|;
try|try
block|{
name|type
operator|=
operator|new
name|CompositeType
argument_list|(
literal|"BlobMigrationStatus"
argument_list|,
literal|"Status of the blob migraiton"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"isRunning"
block|,
literal|"migratedNodes"
block|,
literal|"lastProcessedPath"
block|,
literal|"operationStatus"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Migration in progress"
block|,
literal|"Total number of migrated nodes"
block|,
literal|"Last processed path"
block|,
literal|"Status of the operation"
block|}
argument_list|,
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|BOOLEAN
block|,
name|SimpleType
operator|.
name|INTEGER
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|ManagementOperation
operator|.
name|Status
operator|.
name|ITEM_TYPES
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
name|type
operator|=
literal|null
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Can't create a CompositeType"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|TYPE
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Reference
argument_list|(
name|target
operator|=
literal|"(service.pid=org.apache.jackrabbit.oak.spi.blob.split.SplitBlobStore)"
argument_list|)
specifier|private
name|BlobStore
name|splitBlobStore
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|NodeStore
name|nodeStore
decl_stmt|;
specifier|private
name|Executor
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
specifier|private
name|BlobMigrator
name|migrator
decl_stmt|;
specifier|private
name|Registration
name|mbeanReg
decl_stmt|;
specifier|public
name|BlobMigration
parameter_list|()
block|{
name|super
argument_list|(
name|BlobMigrationMBean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Activate
specifier|private
name|void
name|activate
parameter_list|(
name|BundleContext
name|ctx
parameter_list|)
block|{
name|Whiteboard
name|wb
init|=
operator|new
name|OsgiWhiteboard
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|migrator
operator|=
operator|new
name|BlobMigrator
argument_list|(
operator|(
name|SplitBlobStore
operator|)
name|splitBlobStore
argument_list|,
name|nodeStore
argument_list|)
expr_stmt|;
name|mbeanReg
operator|=
name|registerMBean
argument_list|(
name|wb
argument_list|,
name|BlobMigrationMBean
operator|.
name|class
argument_list|,
name|this
argument_list|,
name|BlobMigrationMBean
operator|.
name|TYPE
argument_list|,
name|OP_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|private
name|void
name|deactivate
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|migrator
operator|!=
literal|null
condition|)
block|{
name|migrator
operator|.
name|stop
argument_list|()
expr_stmt|;
name|migrator
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|mbeanReg
operator|!=
literal|null
condition|)
block|{
name|mbeanReg
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|mbeanReg
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|startBlobMigration
parameter_list|(
specifier|final
name|boolean
name|resume
parameter_list|)
block|{
if|if
condition|(
name|migrationOp
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|migrationOp
operator|=
name|newManagementOperation
argument_list|(
name|OP_NAME
argument_list|,
operator|new
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|t0
init|=
name|nanoTime
argument_list|()
decl_stmt|;
name|boolean
name|finished
decl_stmt|;
if|if
condition|(
name|resume
condition|)
block|{
name|finished
operator|=
name|migrator
operator|.
name|migrate
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|finished
operator|=
name|migrator
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|String
name|duration
init|=
name|formatTime
argument_list|(
name|nanoTime
argument_list|()
operator|-
name|t0
argument_list|)
decl_stmt|;
if|if
condition|(
name|finished
condition|)
block|{
return|return
literal|"All blobs migrated in "
operator|+
name|duration
return|;
block|}
else|else
block|{
return|return
literal|"Migration stopped manually after "
operator|+
name|duration
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|migrationOp
argument_list|)
expr_stmt|;
return|return
literal|"Migration started"
return|;
block|}
else|else
block|{
return|return
literal|"Migration is already in progress"
return|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|stopBlobMigration
parameter_list|()
block|{
name|migrator
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return
literal|"Migration will be stopped"
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|CompositeData
name|getBlobMigrationStatus
parameter_list|()
throws|throws
name|OpenDataException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|status
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|status
operator|.
name|put
argument_list|(
literal|"isRunning"
argument_list|,
name|migrationOp
operator|.
name|getStatus
argument_list|()
operator|.
name|getCode
argument_list|()
operator|==
name|StatusCode
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|status
operator|.
name|put
argument_list|(
literal|"migratedNodes"
argument_list|,
name|migrator
operator|.
name|getTotalMigratedNodes
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|put
argument_list|(
literal|"lastProcessedPath"
argument_list|,
name|migrator
operator|.
name|getLastProcessedPath
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|put
argument_list|(
literal|"operationStatus"
argument_list|,
name|migrationOp
operator|.
name|getStatus
argument_list|()
operator|.
name|toCompositeData
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|CompositeDataSupport
argument_list|(
name|TYPE
argument_list|,
name|status
argument_list|)
return|;
block|}
block|}
end_class

end_unit

