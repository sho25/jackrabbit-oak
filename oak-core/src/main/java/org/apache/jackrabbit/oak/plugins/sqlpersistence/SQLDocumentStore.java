begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|sqlpersistence
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
operator|.
name|DocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
operator|.
name|Revision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
operator|.
name|StableRevisionComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
operator|.
name|UpdateOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|parser
operator|.
name|JSONParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|parser
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|SQLDocumentStore
implements|implements
name|DocumentStore
block|{
comment|/**      * Creates a {@linkplain SQLDocumentStore} instance using an embedded H2      * database.      */
specifier|public
name|SQLDocumentStore
parameter_list|()
block|{
try|try
block|{
name|File
name|dbDir
init|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|,
literal|"db"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dbDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|dbDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|String
name|jdbcurl
init|=
literal|"jdbc:h2:"
operator|+
name|dbDir
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|"/revs"
decl_stmt|;
name|initialize
argument_list|(
name|jdbcurl
argument_list|,
literal|"sa"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"initializing SQL document store"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * Creates a {@linkplain SQLDocumentStore} instance using the provided JDBC      * connection information.      */
specifier|public
name|SQLDocumentStore
parameter_list|(
name|String
name|jdbcurl
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
block|{
try|try
block|{
name|initialize
argument_list|(
name|jdbcurl
argument_list|,
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"initializing SQL document store"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|find
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|id
parameter_list|)
block|{
return|return
name|find
argument_list|(
name|collection
argument_list|,
name|id
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|find
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|id
parameter_list|,
name|int
name|maxCacheAge
parameter_list|)
block|{
comment|// TODO handle maxCacheAge
return|return
name|readDocument
argument_list|(
name|collection
argument_list|,
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|query
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|fromKey
parameter_list|,
name|String
name|toKey
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
return|return
name|query
argument_list|(
name|collection
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|query
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|fromKey
parameter_list|,
name|String
name|toKey
parameter_list|,
name|String
name|indexedProperty
parameter_list|,
name|long
name|startValue
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
return|return
name|internalQuery
argument_list|(
name|collection
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|,
name|indexedProperty
argument_list|,
name|startValue
argument_list|,
name|limit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|void
name|remove
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|delete
argument_list|(
name|collection
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|boolean
name|create
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|updateOps
parameter_list|)
block|{
return|return
name|internalCreate
argument_list|(
name|collection
argument_list|,
name|updateOps
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|void
name|update
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|,
name|UpdateOp
name|updateOp
parameter_list|)
block|{
name|internalUpdate
argument_list|(
name|collection
argument_list|,
name|keys
argument_list|,
name|updateOp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|createOrUpdate
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|UpdateOp
name|update
parameter_list|)
throws|throws
name|MicroKernelException
block|{
return|return
name|internalCreateOrUpdate
argument_list|(
name|collection
argument_list|,
name|update
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|findAndUpdate
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|UpdateOp
name|update
parameter_list|)
throws|throws
name|MicroKernelException
block|{
return|return
name|internalCreateOrUpdate
argument_list|(
name|collection
argument_list|,
name|update
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|invalidateCache
parameter_list|()
block|{
comment|// TODO
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|void
name|invalidateCache
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|id
parameter_list|)
block|{
comment|// TODO
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|connection
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|getIfCached
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|id
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|// implementation
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SQLDocumentStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Comparator
argument_list|<
name|Revision
argument_list|>
name|comparator
init|=
name|Collections
operator|.
name|reverseOrder
argument_list|(
operator|new
name|StableRevisionComparator
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
name|void
name|initialize
parameter_list|(
name|String
name|jdbcurl
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|Exception
block|{
name|connection
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|jdbcurl
argument_list|,
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Statement
name|stmt
init|=
name|connection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// statement below needed while this is tested as a drop-in for the
comment|// memory document store
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table if exists CLUSTERNODES"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table if exists NODES"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table if not exists CLUSTERNODES(ID varchar primary key, MODIFIED bigint, MODCOUNT bigint, DATA varchar)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table if not exists NODES(ID varchar primary key, MODIFIED bigint, MODCOUNT bigint, DATA varchar)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CheckForNull
specifier|private
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|boolean
name|internalCreate
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|updates
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|UpdateOp
name|update
range|:
name|updates
control|)
block|{
name|T
name|doc
init|=
name|collection
operator|.
name|newDocument
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|update
operator|.
name|increment
argument_list|(
literal|"_modCount"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MemoryDocumentStore
operator|.
name|applyChanges
argument_list|(
name|doc
argument_list|,
name|update
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|writeDocument
argument_list|(
name|collection
argument_list|,
name|doc
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// FIXME to be atomic
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|CheckForNull
specifier|private
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|internalCreateOrUpdate
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|UpdateOp
name|update
parameter_list|,
name|boolean
name|checkConditions
parameter_list|)
block|{
name|T
name|oldDoc
init|=
name|readDocument
argument_list|(
name|collection
argument_list|,
name|update
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|T
name|doc
init|=
name|collection
operator|.
name|newDocument
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDoc
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|update
operator|.
name|isNew
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Document does not exist: "
operator|+
name|update
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|oldDoc
operator|.
name|deepCopy
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkConditions
operator|&&
operator|!
name|MemoryDocumentStore
operator|.
name|checkConditions
argument_list|(
name|doc
argument_list|,
name|update
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|update
operator|.
name|increment
argument_list|(
literal|"_modCount"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MemoryDocumentStore
operator|.
name|applyChanges
argument_list|(
name|doc
argument_list|,
name|update
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|writeDocument
argument_list|(
name|collection
argument_list|,
name|doc
argument_list|,
name|oldDoc
operator|!=
literal|null
condition|?
operator|(
name|Long
operator|)
name|oldDoc
operator|.
name|get
argument_list|(
literal|"_modCount"
argument_list|)
else|:
literal|null
argument_list|,
name|oldDoc
operator|==
literal|null
argument_list|)
expr_stmt|;
name|doc
operator|.
name|seal
argument_list|()
expr_stmt|;
return|return
name|oldDoc
return|;
block|}
annotation|@
name|CheckForNull
specifier|private
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|void
name|internalUpdate
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|,
name|UpdateOp
name|update
parameter_list|)
block|{
name|String
name|tableName
init|=
name|getTable
argument_list|(
name|collection
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|String
name|in
init|=
name|dbRead
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|tableName
operator|+
literal|" "
operator|+
name|id
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|T
name|doc
init|=
name|fromString
argument_list|(
name|collection
argument_list|,
name|in
argument_list|)
decl_stmt|;
name|Long
name|oldmodcount
init|=
operator|(
name|Long
operator|)
name|doc
operator|.
name|get
argument_list|(
literal|"_modCount"
argument_list|)
decl_stmt|;
name|update
operator|.
name|increment
argument_list|(
literal|"_modCount"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MemoryDocumentStore
operator|.
name|applyChanges
argument_list|(
name|doc
argument_list|,
name|update
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|String
name|data
init|=
name|asString
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|Long
name|modified
init|=
operator|(
name|Long
operator|)
name|doc
operator|.
name|get
argument_list|(
literal|"_modified"
argument_list|)
decl_stmt|;
name|Long
name|modcount
init|=
operator|(
name|Long
operator|)
name|doc
operator|.
name|get
argument_list|(
literal|"_modCount"
argument_list|)
decl_stmt|;
name|dbUpdate
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|id
argument_list|,
name|modified
argument_list|,
name|modcount
argument_list|,
name|oldmodcount
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|internalQuery
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|fromKey
parameter_list|,
name|String
name|toKey
parameter_list|,
name|String
name|indexedProperty
parameter_list|,
name|long
name|startValue
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|String
name|tableName
init|=
name|getTable
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexedProperty
operator|!=
literal|null
operator|&&
operator|!
literal|"_modified"
operator|.
name|equals
argument_list|(
name|indexedProperty
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"indexed property "
operator|+
name|indexedProperty
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dbresult
init|=
name|dbQuery
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|,
name|indexedProperty
argument_list|,
name|startValue
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|data
range|:
name|dbresult
control|)
block|{
name|T
name|doc
init|=
name|fromString
argument_list|(
name|collection
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|doc
operator|.
name|seal
argument_list|()
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|String
name|getTable
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|)
block|{
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|CLUSTER_NODES
condition|)
block|{
return|return
literal|"CLUSTERNODES"
return|;
block|}
elseif|else
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
condition|)
block|{
return|return
literal|"NODES"
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown collection: "
operator|+
name|collection
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|String
name|asString
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
name|JSONObject
name|obj
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|doc
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|doc
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|obj
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|obj
operator|.
name|toJSONString
argument_list|()
return|;
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|fromString
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|ParseException
block|{
name|T
name|doc
init|=
name|collection
operator|.
name|newDocument
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|obj
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
operator|new
name|JSONParser
argument_list|()
operator|.
name|parse
argument_list|(
name|data
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|obj
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// ???
name|doc
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Boolean
operator|||
name|value
operator|instanceof
name|Long
operator|||
name|value
operator|instanceof
name|String
condition|)
block|{
name|doc
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|JSONObject
condition|)
block|{
name|doc
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|convertJsonObject
argument_list|(
operator|(
name|JSONObject
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unexpected type: "
operator|+
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|doc
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|Map
argument_list|<
name|Revision
argument_list|,
name|Object
argument_list|>
name|convertJsonObject
parameter_list|(
annotation|@
name|Nonnull
name|JSONObject
name|obj
parameter_list|)
block|{
name|Map
argument_list|<
name|Revision
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|Revision
argument_list|,
name|Object
argument_list|>
argument_list|(
name|comparator
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|obj
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
name|entries
control|)
block|{
comment|// not clear why every persisted map is a revision map
name|map
operator|.
name|put
argument_list|(
name|Revision
operator|.
name|fromString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
annotation|@
name|CheckForNull
specifier|private
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|readDocument
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|String
name|tableName
init|=
name|getTable
argument_list|(
name|collection
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|in
init|=
name|dbRead
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|id
argument_list|)
decl_stmt|;
return|return
name|in
operator|!=
literal|null
condition|?
name|fromString
argument_list|(
name|collection
argument_list|,
name|in
argument_list|)
else|:
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|void
name|delete
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|String
name|tableName
init|=
name|getTable
argument_list|(
name|collection
argument_list|)
decl_stmt|;
try|try
block|{
name|dbDelete
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|void
name|writeDocument
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|T
name|document
parameter_list|,
name|Long
name|oldmodcount
parameter_list|,
name|boolean
name|insert
parameter_list|)
block|{
name|String
name|tableName
init|=
name|getTable
argument_list|(
name|collection
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|data
init|=
name|asString
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|Long
name|modified
init|=
operator|(
name|Long
operator|)
name|document
operator|.
name|get
argument_list|(
literal|"_modified"
argument_list|)
decl_stmt|;
name|Long
name|modcount
init|=
operator|(
name|Long
operator|)
name|document
operator|.
name|get
argument_list|(
literal|"_modCount"
argument_list|)
decl_stmt|;
if|if
condition|(
name|insert
condition|)
block|{
name|dbInsert
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|document
operator|.
name|getId
argument_list|()
argument_list|,
name|modified
argument_list|,
name|modcount
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dbUpdate
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|document
operator|.
name|getId
argument_list|()
argument_list|,
name|modified
argument_list|,
name|modcount
argument_list|,
name|oldmodcount
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|// low level operations
annotation|@
name|CheckForNull
specifier|private
name|String
name|dbRead
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|SQLException
block|{
name|PreparedStatement
name|stmt
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"select DATA from "
operator|+
name|tableName
operator|+
literal|" where ID = ?"
argument_list|)
decl_stmt|;
try|try
block|{
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
return|return
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|dbQuery
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|minId
parameter_list|,
name|String
name|maxId
parameter_list|,
name|String
name|indexedProperty
parameter_list|,
name|long
name|startValue
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|t
init|=
literal|"select DATA from "
operator|+
name|tableName
operator|+
literal|" where ID> ? and ID< ?"
decl_stmt|;
if|if
condition|(
name|indexedProperty
operator|!=
literal|null
condition|)
block|{
name|t
operator|+=
literal|" and MODIFIED>= ?"
expr_stmt|;
block|}
name|PreparedStatement
name|stmt
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|minId
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|maxId
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexedProperty
operator|!=
literal|null
condition|)
block|{
name|stmt
operator|.
name|setLong
argument_list|(
literal|3
argument_list|,
name|startValue
argument_list|)
expr_stmt|;
block|}
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|data
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|dbUpdate
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|id
parameter_list|,
name|Long
name|modified
parameter_list|,
name|Long
name|modcount
parameter_list|,
name|Long
name|oldmodcount
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|t
init|=
literal|"update "
operator|+
name|tableName
operator|+
literal|" set MODIFIED = ?, MODCOUNT = ?, DATA = ? where ID = ?"
decl_stmt|;
if|if
condition|(
name|oldmodcount
operator|!=
literal|null
condition|)
block|{
name|t
operator|+=
literal|" and MODCOUNT = ?"
expr_stmt|;
block|}
name|PreparedStatement
name|stmt
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|t
argument_list|)
decl_stmt|;
try|try
block|{
name|stmt
operator|.
name|setObject
argument_list|(
literal|1
argument_list|,
name|modified
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
literal|2
argument_list|,
name|modcount
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|4
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldmodcount
operator|!=
literal|null
condition|)
block|{
name|stmt
operator|.
name|setObject
argument_list|(
literal|5
argument_list|,
name|oldmodcount
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
block|}
name|int
name|result
init|=
name|stmt
operator|.
name|executeUpdate
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|1
condition|)
block|{
name|String
name|message
init|=
literal|"update failed for key="
operator|+
name|id
operator|+
literal|", modCount="
operator|+
name|modcount
operator|+
literal|", oldmodcount="
operator|+
name|oldmodcount
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|dbInsert
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|id
parameter_list|,
name|Long
name|modified
parameter_list|,
name|Long
name|modcount
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|SQLException
block|{
name|PreparedStatement
name|stmt
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"insert into "
operator|+
name|tableName
operator|+
literal|" values(?, ?, ?, ?)"
argument_list|)
decl_stmt|;
try|try
block|{
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
literal|2
argument_list|,
name|modified
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setObject
argument_list|(
literal|3
argument_list|,
name|modcount
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|4
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|dbDelete
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|SQLException
block|{
name|PreparedStatement
name|stmt
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"delete from "
operator|+
name|tableName
operator|+
literal|" where ID = ?"
argument_list|)
decl_stmt|;
try|try
block|{
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

