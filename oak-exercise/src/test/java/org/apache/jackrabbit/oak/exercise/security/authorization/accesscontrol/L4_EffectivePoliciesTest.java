begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|ExerciseUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|NotExecutableException
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: Authorization (Access Control Management)  * =============================================================================  *  * Title: Effective Policies  * -----------------------------------------------------------------------------  *  * Goal:  * Undestand the meaning and nature of retrieving the effective policies for  * a given path or set of principals.  *  * Exercises:  *  * - {@link #testGetEffectivePolicies()}  *   This test create policies at the test root and its child node.  *   Fix the test such that the expected number of effective policies is correct.  *  * - {@link #testGetEffectivePoliciesAtNodeTypeRoot()}  *   Implementation specific test retrieve the effective policies for the  *   node type root node. Fix the test such that it passes.  *  *   Question: What is the expected result?  *   Question: If there are effective policies, can you explain why?  *   Question: Can you also describe the nature of the effective policies?  *  * - {@link #testGetEffectivePoliciesNewPolicy()}  *   Test case illustrating the nature of the effective policies.  *   Fix the case such that the assertion is correct.  *  * - {@link #testGetEffectivePoliciesByPrincipal()}  *   Test case illustrating the usage of  *   {@link org.apache.jackrabbit.api.security.JackrabbitAccessControlManager#getEffectivePolicies(java.util.Set)}  *   Fill in the expected number of effective policies and explain your expectations.  *  *  * Additional Exercises  * -----------------------------------------------------------------------------  *  * The following exercises use a test session with limited access rights to  * retrieve the effective policies.  *  * - {@link #testSessionGetEffectivePolicies()}  *   In this case the effective policies are retrieved with a test session that  *   has limited access. Insert the expected number of effective policies and  *   explain the result.  *  * - {@link #testSessionGetEffectivePoliciesWithoutPrivilege()}  *   Again the test session with limited access rights is used to retrieve the  *   effective policies. Fix the test-case and explain the results based on  *   the implementation you can find in {@link org.apache.jackrabbit.oak.security.authorization.accesscontrol.AccessControlManagerImpl}.  *  * - {@link #testSessionGetEffectivePoliciesByPrincipal()}  *   The test session with limited access is used to retrieve effective policies  *   by principal. Fix the test case and explain the expected result.  *  * - {@link #testSessionGetEffectivePoliciesByPrincipalWithoutPrivileges()}  *   The same test case again but the test session is not granted jcr:readAccessControl  *   privilege. Complete the test-case and explain the result.  *  * - For these additional tests:  *   Compare the results with what is exposed when using an admin session with  *   full access everywhere.  *  *   Question: What are the implications for usage/usability of effective policies in a productive environment?  *  *  * Advanced Exercise  * -----------------------------------------------------------------------------  *  * The JCR specification declares the methods to retrieve effective policies as  * 'besteffort'. Discuss the meaning of this and try to imagine implementations  * where fullfilling this (vague) API contract might not be feasible or not  * even be sensible.  *  *</pre>  *  * @see javax.jcr.security.AccessControlManager#getEffectivePolicies(String)  * @see org.apache.jackrabbit.api.security.JackrabbitAccessControlManager#getEffectivePolicies(java.util.Set)  */
end_comment

begin_class
specifier|public
class|class
name|L4_EffectivePoliciesTest
extends|extends
name|AbstractJCRTest
block|{
specifier|private
name|String
name|childPath
decl_stmt|;
specifier|private
name|JackrabbitAccessControlManager
name|acMgr
decl_stmt|;
specifier|private
name|JackrabbitAccessControlList
name|acl
decl_stmt|;
specifier|private
name|User
name|testUser
decl_stmt|;
specifier|private
name|Principal
name|testPrincipal
decl_stmt|;
specifier|private
name|Privilege
index|[]
name|testPrivileges
decl_stmt|;
specifier|private
name|Session
name|testSession
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Node
name|child
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|)
decl_stmt|;
name|childPath
operator|=
name|child
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|testUser
operator|=
name|ExerciseUtility
operator|.
name|createTestUser
argument_list|(
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
argument_list|)
expr_stmt|;
name|testPrincipal
operator|=
name|testUser
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|acMgr
operator|=
operator|(
name|JackrabbitAccessControlManager
operator|)
name|superuser
operator|.
name|getAccessControlManager
argument_list|()
expr_stmt|;
name|acl
operator|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|superuser
argument_list|,
name|testRoot
argument_list|)
expr_stmt|;
if|if
condition|(
name|acl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|()
throw|;
block|}
name|testPrivileges
operator|=
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|,
name|Privilege
operator|.
name|JCR_WRITE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|testSession
operator|!=
literal|null
operator|&&
name|testSession
operator|.
name|isLive
argument_list|()
condition|)
block|{
name|testSession
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|testUser
operator|!=
literal|null
condition|)
block|{
name|testUser
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|JackrabbitAccessControlList
name|setupPolicy
parameter_list|(
name|String
name|path
parameter_list|,
name|Privilege
index|[]
name|privileges
parameter_list|,
name|Principal
name|principal
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|JackrabbitAccessControlList
name|policy
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|!=
literal|null
condition|)
block|{
name|policy
operator|.
name|addEntry
argument_list|(
name|principal
argument_list|,
name|privileges
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|path
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|()
throw|;
block|}
return|return
name|policy
return|;
block|}
specifier|private
name|Session
name|getTestSession
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|superuser
operator|.
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
name|ExerciseUtility
operator|.
name|getTestCredentials
argument_list|(
name|testUser
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|testGetEffectivePolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|testRoot
argument_list|)
decl_stmt|;
name|int
name|expectedLength
init|=
operator|-
literal|1
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|setupPolicy
argument_list|(
name|testRoot
argument_list|,
name|testPrivileges
argument_list|,
name|testPrincipal
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|policies
operator|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|testRoot
argument_list|)
expr_stmt|;
name|expectedLength
operator|=
operator|-
literal|1
expr_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|policies
operator|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|childPath
argument_list|)
expr_stmt|;
name|expectedLength
operator|=
operator|-
literal|1
expr_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|setupPolicy
argument_list|(
name|childPath
argument_list|,
name|testPrivileges
argument_list|,
name|testPrincipal
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|policies
operator|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|childPath
argument_list|)
expr_stmt|;
name|expectedLength
operator|=
operator|-
literal|1
expr_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetEffectivePoliciesAtNodeTypeRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
decl_stmt|;
name|int
name|expectedLength
init|=
operator|-
literal|1
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// EXERCISE : if there are effective policies at this path, what type of policies to do you expect
comment|// EXERCISE : verify your expectation with an assertion
block|}
specifier|public
name|void
name|testGetEffectivePoliciesNewPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPolicy
argument_list|(
name|testRoot
argument_list|,
name|testPrivileges
argument_list|,
name|testPrincipal
argument_list|)
expr_stmt|;
comment|// EXERCISE fix the test such that the assert below passes. explain why this is needed.
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|testRoot
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetEffectivePoliciesByPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Principal
argument_list|>
name|principalSet
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|testPrincipal
argument_list|)
decl_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|principalSet
argument_list|)
decl_stmt|;
name|int
name|expectedLength
init|=
operator|-
literal|1
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|setupPolicy
argument_list|(
name|testRoot
argument_list|,
name|testPrivileges
argument_list|,
name|testPrincipal
argument_list|)
expr_stmt|;
name|setupPolicy
argument_list|(
name|childPath
argument_list|,
name|testPrivileges
argument_list|,
name|testPrincipal
argument_list|)
expr_stmt|;
name|expectedLength
operator|=
operator|-
literal|1
expr_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|principalSet
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|expectedLength
operator|=
operator|-
literal|1
expr_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|principalSet
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSessionGetEffectivePolicies
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant 'testUser' READ + WRITE privileges at the test root
name|setupPolicy
argument_list|(
name|testRoot
argument_list|,
name|testPrivileges
argument_list|,
name|testPrincipal
argument_list|)
expr_stmt|;
comment|// grant 'testUser' READ + READ_AC privileges at child path
name|Privilege
index|[]
name|privileges
init|=
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|,
name|Privilege
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
name|setupPolicy
argument_list|(
name|childPath
argument_list|,
name|privileges
argument_list|,
name|testPrincipal
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|testSession
operator|=
name|getTestSession
argument_list|()
expr_stmt|;
name|AccessControlManager
name|testAcMgr
init|=
name|testSession
operator|.
name|getAccessControlManager
argument_list|()
decl_stmt|;
name|AccessControlPolicy
index|[]
name|effective
init|=
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|childPath
argument_list|)
decl_stmt|;
name|int
name|expectedLength
init|=
operator|-
literal|1
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSessionGetEffectivePoliciesWithoutPrivilege
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant 'testUser' READ + WRITE privileges at the test path
name|setupPolicy
argument_list|(
name|testRoot
argument_list|,
name|testPrivileges
argument_list|,
name|testPrincipal
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|testSession
operator|=
name|getTestSession
argument_list|()
expr_stmt|;
name|AccessControlManager
name|testAcMgr
init|=
name|testSession
operator|.
name|getAccessControlManager
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|testRoot
argument_list|,
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
comment|// EXERCISE : complete or fix the test case
name|AccessControlPolicy
index|[]
name|effectivePolicies
init|=
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|path
argument_list|)
decl_stmt|;
block|}
block|}
specifier|public
name|void
name|testSessionGetEffectivePoliciesByPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|privileges
init|=
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|,
name|Privilege
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
name|setupPolicy
argument_list|(
name|testRoot
argument_list|,
name|privileges
argument_list|,
name|testPrincipal
argument_list|)
expr_stmt|;
name|setupPolicy
argument_list|(
name|childPath
argument_list|,
name|testPrivileges
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|testSession
operator|=
name|getTestSession
argument_list|()
expr_stmt|;
name|JackrabbitAccessControlManager
name|testAcMgr
init|=
operator|(
name|JackrabbitAccessControlManager
operator|)
name|testSession
operator|.
name|getAccessControlManager
argument_list|()
decl_stmt|;
name|AccessControlPolicy
index|[]
name|effective
init|=
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|testPrincipal
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|expectedLength
init|=
operator|-
literal|1
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// EXERCISE : explain the result
block|}
specifier|public
name|void
name|testSessionGetEffectivePoliciesByPrincipalWithoutPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPolicy
argument_list|(
name|testRoot
argument_list|,
name|testPrivileges
argument_list|,
name|testPrincipal
argument_list|)
expr_stmt|;
name|setupPolicy
argument_list|(
name|childPath
argument_list|,
name|testPrivileges
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|testSession
operator|=
name|getTestSession
argument_list|()
expr_stmt|;
name|JackrabbitAccessControlManager
name|testAcMgr
init|=
operator|(
name|JackrabbitAccessControlManager
operator|)
name|testSession
operator|.
name|getAccessControlManager
argument_list|()
decl_stmt|;
name|AccessControlPolicy
index|[]
name|effective
init|=
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|testPrincipal
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|expectedLength
init|=
operator|-
literal|1
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// EXERCISE : explain the result
block|}
block|}
end_class

end_unit

