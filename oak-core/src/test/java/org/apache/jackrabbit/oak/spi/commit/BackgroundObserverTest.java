begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
operator|.
name|newFixedThreadPool
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
operator|.
name|newSingleThreadExecutor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|FilteringAwareObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|FilteringObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_class
specifier|public
class|class
name|BackgroundObserverTest
block|{
specifier|private
specifier|static
specifier|final
name|CommitInfo
name|COMMIT_INFO
init|=
operator|new
name|CommitInfo
argument_list|(
literal|"no-session"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|CHANGE_COUNT
init|=
literal|1024
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Runnable
argument_list|>
name|assertions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
name|CountDownLatch
name|doneCounter
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Closeable
argument_list|>
name|closeables
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|/**      * Assert that each observer of many running concurrently sees the same      * linearly sequence of commits (i.e. sees the commits in the correct      * order).      */
annotation|@
name|Test
specifier|public
name|void
name|concurrentObservers
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Observer
name|observer
init|=
name|createCompositeObserver
argument_list|(
name|newFixedThreadPool
argument_list|(
literal|16
argument_list|)
argument_list|,
literal|128
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|CHANGE_COUNT
condition|;
name|k
operator|++
control|)
block|{
name|contentChanged
argument_list|(
name|observer
argument_list|,
name|k
argument_list|)
expr_stmt|;
block|}
name|done
argument_list|(
name|observer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|doneCounter
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Runnable
name|assertion
range|:
name|assertions
control|)
block|{
name|assertion
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|contentChanged
parameter_list|(
name|Observer
name|observer
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|NodeState
name|node
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|value
argument_list|)
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|observer
operator|.
name|contentChanged
argument_list|(
name|node
argument_list|,
name|COMMIT_INFO
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|done
parameter_list|(
name|Observer
name|observer
parameter_list|)
block|{
name|NodeState
name|node
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"done"
argument_list|,
literal|true
argument_list|)
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|observer
operator|.
name|contentChanged
argument_list|(
name|node
argument_list|,
name|COMMIT_INFO
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CompositeObserver
name|createCompositeObserver
parameter_list|(
name|ExecutorService
name|executor
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|CompositeObserver
name|observer
init|=
operator|new
name|CompositeObserver
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|count
condition|;
name|k
operator|++
control|)
block|{
name|observer
operator|.
name|addObserver
argument_list|(
name|createBackgroundObserver
argument_list|(
name|executor
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|doneCounter
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|count
argument_list|)
expr_stmt|;
return|return
name|observer
return|;
block|}
specifier|private
specifier|synchronized
name|void
name|done
parameter_list|(
name|List
argument_list|<
name|Runnable
argument_list|>
name|assertions
parameter_list|)
block|{
name|this
operator|.
name|assertions
operator|.
name|addAll
argument_list|(
name|assertions
argument_list|)
expr_stmt|;
name|doneCounter
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Observer
name|createBackgroundObserver
parameter_list|(
name|ExecutorService
name|executor
parameter_list|)
block|{
comment|// Ensure the observation revision queue is sufficiently large to hold
comment|// all revisions. Otherwise waiting for events might block since pending
comment|// events would only be released on a subsequent commit. See OAK-1491
name|int
name|queueLength
init|=
name|CHANGE_COUNT
operator|+
literal|1
decl_stmt|;
return|return
operator|new
name|BackgroundObserver
argument_list|(
operator|new
name|Observer
argument_list|()
block|{
comment|// Need synchronised list here to maintain correct memory barrier
comment|// when this is passed on to done(List<Runnable>)
specifier|final
name|List
argument_list|<
name|Runnable
argument_list|>
name|assertions
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
name|Lists
operator|.
expr|<
name|Runnable
operator|>
name|newArrayList
argument_list|()
argument_list|)
decl_stmt|;
specifier|volatile
name|NodeState
name|previous
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|contentChanged
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeState
name|root
parameter_list|,
annotation|@
name|Nonnull
name|CommitInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|root
operator|.
name|hasProperty
argument_list|(
literal|"done"
argument_list|)
condition|)
block|{
name|done
argument_list|(
name|assertions
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
comment|// Copy previous to avoid closing over it
specifier|final
name|NodeState
name|p
init|=
name|previous
decl_stmt|;
name|assertions
operator|.
name|add
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|getP
argument_list|(
name|p
argument_list|)
operator|+
literal|1
argument_list|,
operator|(
name|long
operator|)
name|getP
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|previous
operator|=
name|root
expr_stmt|;
block|}
specifier|private
name|Long
name|getP
parameter_list|(
name|NodeState
name|previous
parameter_list|)
block|{
return|return
name|previous
operator|.
name|getProperty
argument_list|(
literal|"p"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|,
name|queueLength
argument_list|)
return|;
block|}
class|class
name|MyFilter
implements|implements
name|Filter
block|{
specifier|private
name|boolean
name|excludeNext
decl_stmt|;
name|void
name|excludeNext
parameter_list|(
name|boolean
name|excludeNext
parameter_list|)
block|{
name|this
operator|.
name|excludeNext
operator|=
name|excludeNext
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|excludes
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
specifier|final
name|boolean
name|excludes
init|=
name|excludeNext
decl_stmt|;
name|excludeNext
operator|=
literal|false
expr_stmt|;
return|return
name|excludes
return|;
block|}
block|}
class|class
name|Recorder
implements|implements
name|FilteringAwareObserver
block|{
name|List
argument_list|<
name|Pair
argument_list|>
name|includedChanges
init|=
operator|new
name|LinkedList
argument_list|<
name|Pair
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|pause
decl_stmt|;
specifier|private
name|boolean
name|pausing
decl_stmt|;
specifier|public
name|Recorder
parameter_list|()
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|contentChanged
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
name|includedChanges
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
name|maybePause
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|maybePause
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
while|while
condition|(
name|pause
condition|)
block|{
name|pausing
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// should not happen
block|}
block|}
block|}
finally|finally
block|{
name|pausing
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|pause
parameter_list|()
block|{
name|this
operator|.
name|pause
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|unpause
parameter_list|()
block|{
name|this
operator|.
name|pause
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|waitForPausing
parameter_list|(
name|int
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|long
name|done
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|unit
operator|.
name|toMillis
argument_list|(
name|timeout
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
while|while
condition|(
operator|!
name|pausing
operator|&&
name|done
operator|>
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
block|{
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
return|return
name|pausing
return|;
block|}
block|}
specifier|public
name|boolean
name|waitForUnpausing
parameter_list|(
name|int
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|long
name|done
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|unit
operator|.
name|toMillis
argument_list|(
name|timeout
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
while|while
condition|(
name|pausing
operator|&&
name|done
operator|>
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
block|{
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
return|return
operator|!
name|pausing
return|;
block|}
block|}
block|}
class|class
name|Pair
block|{
specifier|private
specifier|final
name|NodeState
name|before
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|after
decl_stmt|;
name|Pair
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|this
operator|.
name|before
operator|=
name|before
expr_stmt|;
name|this
operator|.
name|after
operator|=
name|after
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Pair(before="
operator|+
name|before
operator|+
literal|", after="
operator|+
name|after
operator|+
literal|")"
return|;
block|}
block|}
class|class
name|NodeStateGenerator
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1232131
argument_list|)
decl_stmt|;
comment|// seed: repeatable tests
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeState
name|next
parameter_list|()
block|{
name|builder
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
name|NodeState
name|result
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|=
name|result
operator|.
name|builder
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
specifier|private
name|void
name|assertMatches
parameter_list|(
name|String
name|msg
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|>
name|expected
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|>
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"size mismatch. msg="
operator|+
name|msg
argument_list|,
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|actual
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertSame
argument_list|(
literal|"mismatch of before at pos="
operator|+
name|i
operator|+
literal|", msg="
operator|+
name|msg
argument_list|,
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|before
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|before
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"mismatch of after at pos="
operator|+
name|i
operator|+
literal|", msg="
operator|+
name|msg
argument_list|,
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|after
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|after
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|shutDown
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Closeable
name|closeable
range|:
name|closeables
control|)
block|{
try|try
block|{
name|closeable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExcludedAllCommits
parameter_list|()
throws|throws
name|Exception
block|{
name|MyFilter
name|filter
init|=
operator|new
name|MyFilter
argument_list|()
decl_stmt|;
name|Recorder
name|recorder
init|=
operator|new
name|Recorder
argument_list|()
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|FilteringObserver
name|fo
init|=
operator|new
name|FilteringObserver
argument_list|(
name|executor
argument_list|,
literal|5
argument_list|,
name|filter
argument_list|,
name|recorder
argument_list|)
decl_stmt|;
name|closeables
operator|.
name|add
argument_list|(
name|fo
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Pair
argument_list|>
name|expected
init|=
operator|new
name|LinkedList
argument_list|<
name|Pair
argument_list|>
argument_list|()
decl_stmt|;
name|NodeStateGenerator
name|generator
init|=
operator|new
name|NodeStateGenerator
argument_list|()
decl_stmt|;
name|NodeState
name|first
init|=
name|generator
operator|.
name|next
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|(
literal|null
argument_list|,
name|first
argument_list|)
argument_list|)
expr_stmt|;
name|fo
operator|.
name|contentChanged
argument_list|(
name|first
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100000
condition|;
name|i
operator|++
control|)
block|{
name|filter
operator|.
name|excludeNext
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fo
operator|.
name|contentChanged
argument_list|(
name|generator
operator|.
name|next
argument_list|()
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"testExcludedAllCommits"
argument_list|,
name|fo
operator|.
name|getBackgroundObserver
argument_list|()
operator|.
name|waitUntilStopped
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"testExcludedAllCommits"
argument_list|,
name|expected
argument_list|,
name|recorder
operator|.
name|includedChanges
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoExcludedCommits
parameter_list|()
throws|throws
name|Exception
block|{
name|MyFilter
name|filter
init|=
operator|new
name|MyFilter
argument_list|()
decl_stmt|;
name|Recorder
name|recorder
init|=
operator|new
name|Recorder
argument_list|()
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|FilteringObserver
name|fo
init|=
operator|new
name|FilteringObserver
argument_list|(
name|executor
argument_list|,
literal|10002
argument_list|,
name|filter
argument_list|,
name|recorder
argument_list|)
decl_stmt|;
name|closeables
operator|.
name|add
argument_list|(
name|fo
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Pair
argument_list|>
name|expected
init|=
operator|new
name|LinkedList
argument_list|<
name|Pair
argument_list|>
argument_list|()
decl_stmt|;
name|NodeStateGenerator
name|generator
init|=
operator|new
name|NodeStateGenerator
argument_list|()
decl_stmt|;
name|NodeState
name|first
init|=
name|generator
operator|.
name|next
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|(
literal|null
argument_list|,
name|first
argument_list|)
argument_list|)
expr_stmt|;
name|fo
operator|.
name|contentChanged
argument_list|(
name|first
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|NodeState
name|previous
init|=
name|first
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|filter
operator|.
name|excludeNext
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|NodeState
name|next
init|=
name|generator
operator|.
name|next
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|(
name|previous
argument_list|,
name|next
argument_list|)
argument_list|)
expr_stmt|;
name|previous
operator|=
name|next
expr_stmt|;
name|fo
operator|.
name|contentChanged
argument_list|(
name|next
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"testNoExcludedCommits"
argument_list|,
name|fo
operator|.
name|getBackgroundObserver
argument_list|()
operator|.
name|waitUntilStopped
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"testNoExcludedCommits"
argument_list|,
name|expected
argument_list|,
name|recorder
operator|.
name|includedChanges
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExcludeCommitsWithFullQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|MyFilter
name|filter
init|=
operator|new
name|MyFilter
argument_list|()
decl_stmt|;
name|Recorder
name|recorder
init|=
operator|new
name|Recorder
argument_list|()
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|FilteringObserver
name|fo
init|=
operator|new
name|FilteringObserver
argument_list|(
name|executor
argument_list|,
literal|2
argument_list|,
name|filter
argument_list|,
name|recorder
argument_list|)
decl_stmt|;
name|closeables
operator|.
name|add
argument_list|(
name|fo
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Pair
argument_list|>
name|expected
init|=
operator|new
name|LinkedList
argument_list|<
name|Pair
argument_list|>
argument_list|()
decl_stmt|;
name|NodeStateGenerator
name|generator
init|=
operator|new
name|NodeStateGenerator
argument_list|()
decl_stmt|;
name|recorder
operator|.
name|pause
argument_list|()
expr_stmt|;
comment|// the first one will directly go to the recorder
name|NodeState
name|firstIncluded
init|=
name|generator
operator|.
name|next
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|(
literal|null
argument_list|,
name|firstIncluded
argument_list|)
argument_list|)
expr_stmt|;
name|fo
operator|.
name|contentChanged
argument_list|(
name|firstIncluded
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"observer did not get called (yet?)"
argument_list|,
name|recorder
operator|.
name|waitForPausing
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// this one will be queued as #1
name|NodeState
name|secondIncluded
init|=
name|generator
operator|.
name|next
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|(
name|firstIncluded
argument_list|,
name|secondIncluded
argument_list|)
argument_list|)
expr_stmt|;
name|fo
operator|.
name|contentChanged
argument_list|(
name|secondIncluded
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// this one will be queued as #2
name|NodeState
name|thirdIncluded
init|=
name|generator
operator|.
name|next
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|(
name|secondIncluded
argument_list|,
name|thirdIncluded
argument_list|)
argument_list|)
expr_stmt|;
name|fo
operator|.
name|contentChanged
argument_list|(
name|thirdIncluded
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// this one will cause the queue to 'overflow' (full==true)
name|NodeState
name|forthQueueFull
init|=
name|generator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// not adding to expected, as this one ends up in the overflow element
name|fo
operator|.
name|contentChanged
argument_list|(
name|forthQueueFull
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|NodeState
name|next
decl_stmt|;
comment|// exclude when queue is full
name|filter
operator|.
name|excludeNext
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|next
operator|=
name|generator
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// if excluded==true and full, hence not adding to expected
name|fo
operator|.
name|contentChanged
argument_list|(
name|next
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// include after an exclude when queue was full
comment|// => this is not supported. when the queue
name|filter
operator|.
name|excludeNext
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|next
operator|=
name|generator
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// excluded==false BUT queue full, hence not adding to expected
name|fo
operator|.
name|contentChanged
argument_list|(
name|next
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// let recorder continue
name|recorder
operator|.
name|unpause
argument_list|()
expr_stmt|;
name|recorder
operator|.
name|waitForUnpausing
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// wait for 1 element to be dequeued at least
comment|// exclude when queue is no longer full
name|filter
operator|.
name|excludeNext
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|NodeState
name|seventhAfterQueueFull
init|=
name|generator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// with the introduction of the FilteringAwareObserver this
comment|// 'seventhAfterQueueFull' root will not be forwarded
comment|// to the BackgroundObserver - thus entirely filtered
name|fo
operator|.
name|contentChanged
argument_list|(
name|seventhAfterQueueFull
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// but with the introduction of FilteringAwareObserver the delivery
comment|// only happens with non-filtered items, so adding yet another one now
name|filter
operator|.
name|excludeNext
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|NodeState
name|last
init|=
name|generator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// while above the "seventhAfterQueueFull" DOES get filtered, the next contentChange
comment|// triggers the release of the 'queue full overflow element' (with commitInfo==null)
comment|// and that we must add as expected()
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|(
name|thirdIncluded
argument_list|,
name|seventhAfterQueueFull
argument_list|)
argument_list|)
expr_stmt|;
comment|// commitInfo == null
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|(
name|seventhAfterQueueFull
argument_list|,
name|last
argument_list|)
argument_list|)
expr_stmt|;
name|fo
operator|.
name|contentChanged
argument_list|(
name|last
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testExcludeCommitsWithFullQueue"
argument_list|,
name|fo
operator|.
name|getBackgroundObserver
argument_list|()
operator|.
name|waitUntilStopped
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"testExcludeCommitsWithFullQueue"
argument_list|,
name|expected
argument_list|,
name|recorder
operator|.
name|includedChanges
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExcludeSomeCommits
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|executor
init|=
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|doTestExcludeSomeCommits
argument_list|(
name|i
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|100
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|+=
literal|50
control|)
block|{
name|doTestExcludeSomeCommits
argument_list|(
name|i
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestExcludeSomeCommits
parameter_list|(
name|int
name|cnt
parameter_list|,
name|Executor
name|executor
parameter_list|)
throws|throws
name|Exception
block|{
name|MyFilter
name|filter
init|=
operator|new
name|MyFilter
argument_list|()
decl_stmt|;
name|Recorder
name|recorder
init|=
operator|new
name|Recorder
argument_list|()
decl_stmt|;
name|FilteringObserver
name|fo
init|=
operator|new
name|FilteringObserver
argument_list|(
name|executor
argument_list|,
name|cnt
operator|+
literal|2
argument_list|,
name|filter
argument_list|,
name|recorder
argument_list|)
decl_stmt|;
name|closeables
operator|.
name|add
argument_list|(
name|fo
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Pair
argument_list|>
name|expected
init|=
operator|new
name|LinkedList
argument_list|<
name|Pair
argument_list|>
argument_list|()
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|2343242
argument_list|)
decl_stmt|;
comment|// seed: repeatable tests
name|NodeStateGenerator
name|generator
init|=
operator|new
name|NodeStateGenerator
argument_list|()
decl_stmt|;
name|NodeState
name|first
init|=
name|generator
operator|.
name|next
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|(
literal|null
argument_list|,
name|first
argument_list|)
argument_list|)
expr_stmt|;
name|fo
operator|.
name|contentChanged
argument_list|(
name|first
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|NodeState
name|previous
init|=
name|first
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|excludeNext
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|90
decl_stmt|;
name|filter
operator|.
name|excludeNext
argument_list|(
name|excludeNext
argument_list|)
expr_stmt|;
name|NodeState
name|next
init|=
name|generator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|excludeNext
condition|)
block|{
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|(
name|previous
argument_list|,
name|next
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|previous
operator|=
name|next
expr_stmt|;
name|fo
operator|.
name|contentChanged
argument_list|(
name|next
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"cnt="
operator|+
name|cnt
argument_list|,
name|fo
operator|.
name|getBackgroundObserver
argument_list|()
operator|.
name|waitUntilStopped
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"cnt="
operator|+
name|cnt
argument_list|,
name|expected
argument_list|,
name|recorder
operator|.
name|includedChanges
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

