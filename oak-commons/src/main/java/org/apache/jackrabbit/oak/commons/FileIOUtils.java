begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closeables
operator|.
name|close
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
operator|.
name|newWriter
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|sort
operator|.
name|EscapeUtils
operator|.
name|escapeLineBreak
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|sort
operator|.
name|EscapeUtils
operator|.
name|unescapeLineBreaks
import|;
end_import

begin_comment
comment|/**  * Simple File utils  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|FileIOUtils
block|{
specifier|private
name|FileIOUtils
parameter_list|()
block|{     }
comment|/**      * Writes a string as a new line into the given buffered writer and optionally      * escapes the line for line breaks.      *      * @param writer to write the string      * @param str the string to write      * @param escape whether to escape string for line breaks      * @throws IOException      */
specifier|public
specifier|static
name|void
name|writeAsLine
parameter_list|(
name|BufferedWriter
name|writer
parameter_list|,
name|String
name|str
parameter_list|,
name|boolean
name|escape
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|escape
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|escapeLineBreak
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|newLine
argument_list|()
expr_stmt|;
block|}
comment|/**      * Writes string from the given iterator to the given file and optionally      * escape the written strings for line breaks.      *      * @param iterator the source of the strings      * @param f file to write to      * @param escape whether to escape for line breaks      * @return count      * @throws IOException      */
specifier|public
specifier|static
name|int
name|writeStrings
parameter_list|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|,
name|File
name|f
parameter_list|,
name|boolean
name|escape
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedWriter
name|writer
init|=
name|newWriter
argument_list|(
name|f
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|boolean
name|threw
init|=
literal|true
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|writeAsLine
argument_list|(
name|writer
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|,
name|escape
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|threw
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|writer
argument_list|,
name|threw
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|/**      * Reads strings from the given stream into a set and optionally unescaping for line breaks.      *      * @param stream the source of the strings      * @param unescape whether to unescape for line breaks      * @return set      * @throws IOException      */
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|readStringsAsSet
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|boolean
name|unescape
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|boolean
name|threw
init|=
literal|true
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|stream
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|unescape
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|unescapeLineBreaks
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|set
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
name|threw
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|reader
argument_list|,
name|threw
argument_list|)
expr_stmt|;
block|}
return|return
name|set
return|;
block|}
comment|/**      * Composing iterator which unescapes for line breaks and delegates to the given comparator.      * When using this it should be ensured that the data source has been correspondingly escaped.      *      * @param delegate the actual comparison iterator      * @return comparator aware of line breaks      */
specifier|public
specifier|static
name|Comparator
argument_list|<
name|String
argument_list|>
name|lineBreakAwareComparator
parameter_list|(
name|Comparator
argument_list|<
name|String
argument_list|>
name|delegate
parameter_list|)
block|{
return|return
operator|new
name|FileIOUtils
operator|.
name|TransformingComparator
argument_list|(
name|delegate
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
annotation|@
name|Nullable
name|String
name|input
parameter_list|)
block|{
return|return
name|unescapeLineBreaks
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * Decorates the given comparator and applies the function before delegating to the decorated      * comparator.      */
specifier|public
specifier|static
class|class
name|TransformingComparator
implements|implements
name|Comparator
argument_list|<
name|String
argument_list|>
block|{
specifier|private
name|Comparator
name|delegate
decl_stmt|;
specifier|private
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|func
decl_stmt|;
specifier|public
name|TransformingComparator
parameter_list|(
name|Comparator
name|delegate
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|func
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|func
operator|=
name|func
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|compare
argument_list|(
name|func
operator|.
name|apply
argument_list|(
name|s1
argument_list|)
argument_list|,
name|func
operator|.
name|apply
argument_list|(
name|s2
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

