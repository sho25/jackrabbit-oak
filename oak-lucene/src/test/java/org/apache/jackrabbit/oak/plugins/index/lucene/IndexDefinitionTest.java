begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexDefinition
operator|.
name|IndexingRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|TokenizerChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
operator|.
name|TYPENAME_LONG
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
operator|.
name|TYPENAME_STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_BASE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|ANALYZERS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|ANL_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|INCLUDE_PROPERTY_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|INCLUDE_PROPERTY_TYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|INDEX_DATA_CHILD_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|INDEX_RULES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|PROP_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|PROP_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|TIKA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|TestUtil
operator|.
name|registerTestNodeType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneIndexHelper
operator|.
name|newLuceneIndexDefinition
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneIndexHelper
operator|.
name|newLucenePropertyIndexDefinition
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
operator|.
name|createProperty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|InitialContent
operator|.
name|INITIAL_CONTENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|impl
operator|.
name|TreeConstants
operator|.
name|OAK_CHILD_ORDER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|IndexDefinitionTest
block|{
specifier|private
name|Codec
name|oakCodec
init|=
operator|new
name|OakCodec
argument_list|()
decl_stmt|;
specifier|private
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
specifier|private
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|defaultConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDefinition
name|idxDefn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|idxDefn
operator|.
name|saveDirListing
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fullTextEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDefinition
name|idxDefn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|IndexingRule
name|rule
init|=
name|idxDefn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|NT_BASE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"By default fulltext is enabled"
argument_list|,
name|idxDefn
operator|.
name|isFullTextEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"By default everything is indexed"
argument_list|,
name|rule
operator|.
name|isIndexed
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Property types need to be defined"
argument_list|,
name|rule
operator|.
name|includePropertyType
argument_list|(
name|PropertyType
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"For fulltext storage is enabled"
argument_list|,
name|rule
operator|.
name|getConfig
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|stored
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rule
operator|.
name|getConfig
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|skipTokenization
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule
operator|.
name|getConfig
argument_list|(
literal|"jcr:uuid"
argument_list|)
operator|.
name|skipTokenization
argument_list|(
literal|"jcr:uuid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|propertyTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|INCLUDE_PROPERTY_TYPES
argument_list|,
name|of
argument_list|(
name|TYPENAME_LONG
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|INCLUDE_PROPERTY_NAMES
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FULL_TEXT_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|IndexDefinition
name|idxDefn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|IndexingRule
name|rule
init|=
name|idxDefn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|NT_BASE
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|idxDefn
operator|.
name|isFullTextEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"If fulltext disabled then nothing stored"
argument_list|,
name|rule
operator|.
name|getConfig
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|stored
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule
operator|.
name|includePropertyType
argument_list|(
name|PropertyType
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rule
operator|.
name|includePropertyType
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule
operator|.
name|isIndexed
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule
operator|.
name|isIndexed
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rule
operator|.
name|isIndexed
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule
operator|.
name|getConfig
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|skipTokenization
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|propertyDefinition
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|child
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_DATE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|INCLUDE_PROPERTY_NAMES
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|IndexDefinition
name|idxDefn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|IndexingRule
name|rule
init|=
name|idxDefn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|NT_BASE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rule
operator|.
name|isIndexed
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule
operator|.
name|isIndexed
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|DATE
argument_list|,
name|rule
operator|.
name|getConfig
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|propertyDefinitionWithExcludes
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|child
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_DATE
argument_list|)
expr_stmt|;
name|IndexDefinition
name|idxDefn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|IndexingRule
name|rule
init|=
name|idxDefn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|NT_BASE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rule
operator|.
name|isIndexed
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule
operator|.
name|isIndexed
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|DATE
argument_list|,
name|rule
operator|.
name|getConfig
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|codecConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|defn
operator|.
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oakCodec
operator|.
name|getName
argument_list|()
argument_list|,
name|defn
operator|.
name|getCodec
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FULL_TEXT_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|defn
operator|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|defn
operator|.
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|Codec
name|simple
init|=
name|Codec
operator|.
name|getDefault
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|CODEC_NAME
argument_list|,
name|simple
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|defn
operator|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|defn
operator|.
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|simple
operator|.
name|getName
argument_list|()
argument_list|,
name|defn
operator|.
name|getCodec
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|relativePropertyConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|child
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|child
argument_list|(
literal|"foo1"
argument_list|)
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_DATE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|child
argument_list|(
literal|"foo2"
argument_list|)
operator|.
name|child
argument_list|(
literal|"bar2"
argument_list|)
operator|.
name|child
argument_list|(
literal|"baz"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_LONG
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|INCLUDE_PROPERTY_NAMES
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"foo1/bar"
argument_list|,
literal|"foo2/bar2/baz"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|IndexingRule
name|rule
init|=
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rule
operator|.
name|getConfig
argument_list|(
literal|"foo1/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|DATE
argument_list|,
name|rule
operator|.
name|getConfig
argument_list|(
literal|"foo1/bar"
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|LONG
argument_list|,
name|rule
operator|.
name|getConfig
argument_list|(
literal|"foo2/bar2/baz"
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule
operator|.
name|getConfig
argument_list|(
literal|"foo1/bar"
argument_list|)
operator|.
name|relative
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"foo2"
block|,
literal|"bar2"
block|}
argument_list|,
name|rule
operator|.
name|getConfig
argument_list|(
literal|"foo2/bar2/baz"
argument_list|)
operator|.
name|ancestors
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexRuleSanity
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|rules
operator|.
name|child
argument_list|(
literal|"nt:folder"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"nt:folder/properties/prop1"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|3.0
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_BOOLEAN
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:base"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IndexingRule
name|rule1
init|=
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rule1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0f
argument_list|,
name|rule1
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule1
operator|.
name|isIndexed
argument_list|(
literal|"prop1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rule1
operator|.
name|isIndexed
argument_list|(
literal|"prop2"
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyDefinition
name|pd
init|=
name|rule1
operator|.
name|getConfig
argument_list|(
literal|"prop1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3.0f
argument_list|,
name|pd
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|BOOLEAN
argument_list|,
name|pd
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexRuleInheritance
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|PROP_NAME
argument_list|,
literal|"testIndex"
argument_list|)
expr_stmt|;
name|rules
operator|.
name|child
argument_list|(
literal|"nt:hierarchyNode"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:base"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:hierarchyNode"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexRuleMixin
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|rules
operator|.
name|child
argument_list|(
literal|"mix:title"
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"mix:title/properties/jcr:title"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|3.0
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|,
literal|"mix:title"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexRuleMixinInheritance
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|rules
operator|.
name|child
argument_list|(
literal|"mix:mimeType"
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"mix:mimeType/properties/jcr:mimeType"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|3.0
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|,
literal|"mix:mimeType"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//nt:resource> mix:mimeType
name|assertNotNull
argument_list|(
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:resource"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexRuleInheritanceDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|PROP_NAME
argument_list|,
literal|"testIndex"
argument_list|)
expr_stmt|;
name|rules
operator|.
name|child
argument_list|(
literal|"nt:hierarchyNode"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|2.0
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|RULE_INHERITED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:base"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:hierarchyNode"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"nt:folder should not be index as rule is not inheritable"
argument_list|,
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexRuleInheritanceOrdering
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|rules
operator|.
name|setProperty
argument_list|(
name|OAK_CHILD_ORDER
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"nt:hierarchyNode"
argument_list|,
literal|"nt:base"
argument_list|)
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
name|rules
operator|.
name|child
argument_list|(
literal|"nt:hierarchyNode"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|rules
operator|.
name|child
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|3.0
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3.0
argument_list|,
name|getRule
argument_list|(
name|defn
argument_list|,
literal|"nt:base"
argument_list|)
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|getRule
argument_list|(
name|defn
argument_list|,
literal|"nt:hierarchyNode"
argument_list|)
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.0
argument_list|,
name|getRule
argument_list|(
name|defn
argument_list|,
literal|"nt:query"
argument_list|)
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexRuleInheritanceOrdering2
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|rules
operator|.
name|setProperty
argument_list|(
name|OAK_CHILD_ORDER
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"nt:base"
argument_list|,
literal|"nt:hierarchyNode"
argument_list|)
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
name|rules
operator|.
name|child
argument_list|(
literal|"nt:hierarchyNode"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|rules
operator|.
name|child
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|3.0
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
comment|//As nt:base is defined earlier it would supercede everything
name|assertEquals
argument_list|(
literal|3.0
argument_list|,
name|getRule
argument_list|(
name|defn
argument_list|,
literal|"nt:base"
argument_list|)
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.0
argument_list|,
name|getRule
argument_list|(
name|defn
argument_list|,
literal|"nt:hierarchyNode"
argument_list|)
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.0
argument_list|,
name|getRule
argument_list|(
name|defn
argument_list|,
literal|"nt:file"
argument_list|)
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexRuleWithPropertyRegEx
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|rules
operator|.
name|child
argument_list|(
literal|"nt:folder"
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"nt:folder/properties/prop1"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|3.0
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"nt:folder/properties/prop2"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"foo.*"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_IS_REGEX
argument_list|,
literal|true
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|4.0
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|IndexingRule
name|rule1
init|=
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rule1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule1
operator|.
name|isIndexed
argument_list|(
literal|"prop1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rule1
operator|.
name|isIndexed
argument_list|(
literal|"prop2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule1
operator|.
name|isIndexed
argument_list|(
literal|"fooProp"
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyDefinition
name|pd
init|=
name|rule1
operator|.
name|getConfig
argument_list|(
literal|"fooProp2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4.0f
argument_list|,
name|pd
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexRuleWithPropertyRegEx2
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|rules
operator|.
name|child
argument_list|(
literal|"nt:folder"
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"nt:folder/properties/prop1"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|".*"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_IS_REGEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"nt:folder/properties/prop2"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"metadata/.*"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_IS_REGEX
argument_list|,
literal|true
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|4.0
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|IndexingRule
name|rule1
init|=
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rule1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule1
operator|.
name|isIndexed
argument_list|(
literal|"prop1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule1
operator|.
name|isIndexed
argument_list|(
literal|"prop2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rule1
operator|.
name|isIndexed
argument_list|(
literal|"jcr:content/prop1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule1
operator|.
name|isIndexed
argument_list|(
literal|"metadata/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rule1
operator|.
name|isIndexed
argument_list|(
literal|"metadata/foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexRuleWithPropertyOrdering
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|rules
operator|.
name|child
argument_list|(
literal|"nt:folder"
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"nt:folder/properties/prop1"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"foo.*"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_IS_REGEX
argument_list|,
literal|true
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|3.0
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"nt:folder/properties/prop2"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|".*"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_IS_REGEX
argument_list|,
literal|true
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|4.0
argument_list|)
expr_stmt|;
name|rules
operator|.
name|child
argument_list|(
literal|"nt:folder"
argument_list|)
operator|.
name|child
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|setProperty
argument_list|(
name|OAK_CHILD_ORDER
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"prop2"
argument_list|,
literal|"prop1"
argument_list|)
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|IndexingRule
name|rule1
init|=
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rule1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule1
operator|.
name|isIndexed
argument_list|(
literal|"prop1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule1
operator|.
name|isIndexed
argument_list|(
literal|"fooProp"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.0f
argument_list|,
name|rule1
operator|.
name|getConfig
argument_list|(
literal|"bazProp2"
argument_list|)
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//As prop2 is ordered before prop1 its regEx is evaluated first
comment|//hence even with a specific regex of foo.* the defn used is from .*
name|assertEquals
argument_list|(
literal|4.0f
argument_list|,
name|rule1
operator|.
name|getConfig
argument_list|(
literal|"fooProp"
argument_list|)
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//Order it correctly to get expected result
name|rules
operator|.
name|child
argument_list|(
literal|"nt:folder"
argument_list|)
operator|.
name|child
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|setProperty
argument_list|(
name|OAK_CHILD_ORDER
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"prop1"
argument_list|,
literal|"prop2"
argument_list|)
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
name|defn
operator|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|rule1
operator|=
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.0f
argument_list|,
name|rule1
operator|.
name|getConfig
argument_list|(
literal|"fooProp"
argument_list|)
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|propertyConfigCaseInsensitive
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|rules
operator|.
name|child
argument_list|(
literal|"nt:folder"
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"nt:folder/properties/foo"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"Foo"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_PROPERTY_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"nt:folder/properties/bar"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"BAR"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_PROPERTY_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|IndexingRule
name|rule1
init|=
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rule1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule1
operator|.
name|isIndexed
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule1
operator|.
name|isIndexed
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule1
operator|.
name|isIndexed
argument_list|(
literal|"fOO"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule1
operator|.
name|isIndexed
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rule1
operator|.
name|isIndexed
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|skipTokenization
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|rules
operator|.
name|child
argument_list|(
literal|"nt:folder"
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"nt:folder/properties/prop2"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|".*"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_IS_REGEX
argument_list|,
literal|true
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|IndexingRule
name|rule
init|=
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|rule
operator|.
name|getConfig
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|skipTokenization
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule
operator|.
name|getConfig
argument_list|(
name|JcrConstants
operator|.
name|JCR_UUID
argument_list|)
operator|.
name|skipTokenization
argument_list|(
name|JcrConstants
operator|.
name|JCR_UUID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|versionFullTextIsV1
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defnb
init|=
name|newLuceneIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"lucene"
argument_list|,
name|of
argument_list|(
name|TYPENAME_STRING
argument_list|)
argument_list|)
decl_stmt|;
comment|//Simulate condition that index exists
name|defnb
operator|.
name|child
argument_list|(
name|INDEX_DATA_CHILD_NAME
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|IndexFormatVersion
operator|.
name|V1
argument_list|,
name|defn
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|versionDefnUpdateFulltextIsV1
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defnb
init|=
name|newLuceneIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"lucene"
argument_list|,
name|of
argument_list|(
name|TYPENAME_STRING
argument_list|)
argument_list|)
decl_stmt|;
comment|//Simulate condition that index exists
name|defnb
operator|.
name|child
argument_list|(
name|INDEX_DATA_CHILD_NAME
argument_list|)
expr_stmt|;
name|defnb
operator|=
name|defnb
operator|.
name|getNodeState
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|IndexDefinition
operator|.
name|updateDefinition
argument_list|(
name|defnb
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|IndexFormatVersion
operator|.
name|V1
argument_list|,
name|defn
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|versionPropertyIsV2
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defnb
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
argument_list|,
literal|"test"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|IndexFormatVersion
operator|.
name|V2
argument_list|,
name|defn
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|versionFreshIsCurrent
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defnb
init|=
name|newLuceneIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"lucene"
argument_list|,
name|of
argument_list|(
name|TYPENAME_STRING
argument_list|)
argument_list|)
decl_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|IndexFormatVersion
operator|.
name|getDefault
argument_list|()
argument_list|,
name|defn
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|versionFreshCompateMode
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defnb
init|=
name|newLuceneIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"lucene"
argument_list|,
name|of
argument_list|(
name|TYPENAME_STRING
argument_list|)
argument_list|)
decl_stmt|;
name|defnb
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|COMPAT_MODE
argument_list|,
name|IndexFormatVersion
operator|.
name|V1
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|IndexFormatVersion
operator|.
name|V1
argument_list|,
name|defn
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|formatUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defnb
init|=
name|newLuceneIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"lucene"
argument_list|,
name|of
argument_list|(
name|TYPENAME_STRING
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"Bar"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|defn
operator|.
name|isOfOldFormat
argument_list|()
argument_list|)
expr_stmt|;
name|NodeBuilder
name|updated
init|=
name|IndexDefinition
operator|.
name|updateDefinition
argument_list|(
name|defnb
operator|.
name|getNodeState
argument_list|()
operator|.
name|builder
argument_list|()
argument_list|)
decl_stmt|;
name|IndexDefinition
name|defn2
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|updated
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|defn2
operator|.
name|isOfOldFormat
argument_list|()
argument_list|)
expr_stmt|;
name|IndexingRule
name|rule
init|=
name|defn2
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:base"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rule
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rule
operator|.
name|getConfig
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|index
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rule
operator|.
name|getConfig
argument_list|(
literal|"Bar"
argument_list|)
operator|.
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|propertyRegExAndRelativeProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defnb
init|=
name|newLuceneIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"lucene"
argument_list|,
name|of
argument_list|(
name|TYPENAME_STRING
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|defn
operator|.
name|isOfOldFormat
argument_list|()
argument_list|)
expr_stmt|;
name|NodeBuilder
name|updated
init|=
name|IndexDefinition
operator|.
name|updateDefinition
argument_list|(
name|defnb
operator|.
name|getNodeState
argument_list|()
operator|.
name|builder
argument_list|()
argument_list|)
decl_stmt|;
name|IndexDefinition
name|defn2
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|updated
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|IndexingRule
name|rule
init|=
name|defn2
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:base"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rule
operator|.
name|getConfig
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Property regex used should not allow relative properties"
argument_list|,
name|rule
operator|.
name|getConfig
argument_list|(
literal|"foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fulltextEnabledAndAggregate
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defnb
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"lucene"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|defn
operator|.
name|isFullTextEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|NodeBuilder
name|aggregates
init|=
name|defnb
operator|.
name|child
argument_list|(
name|LuceneIndexConstants
operator|.
name|AGGREGATES
argument_list|)
decl_stmt|;
name|NodeBuilder
name|aggFolder
init|=
name|aggregates
operator|.
name|child
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|aggFolder
operator|.
name|child
argument_list|(
literal|"i1"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|AGG_PATH
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|defn
operator|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|defn
operator|.
name|isFullTextEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|costConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defnb
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"lucene"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|defn
operator|.
name|getCostPerEntry
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|defn
operator|.
name|getCostPerExecution
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IndexDefinition
operator|.
name|DEFAULT_ENTRY_COUNT
argument_list|,
name|defn
operator|.
name|getEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|defn
operator|.
name|isEntryCountDefined
argument_list|()
argument_list|)
expr_stmt|;
name|defnb
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|COST_PER_ENTRY
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|defnb
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|COST_PER_EXECUTION
argument_list|,
literal|3.0
argument_list|)
expr_stmt|;
name|defnb
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|ENTRY_COUNT_PROPERTY_NAME
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn2
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|defn2
operator|.
name|getCostPerEntry
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.0
argument_list|,
name|defn2
operator|.
name|getCostPerExecution
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|defn2
operator|.
name|getEntryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fulltextCost
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defnb
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"lucene"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|300
argument_list|,
name|defn
operator|.
name|getFulltextEntryCount
argument_list|(
literal|300
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IndexDefinition
operator|.
name|DEFAULT_ENTRY_COUNT
operator|+
literal|100
argument_list|,
name|defn
operator|.
name|getFulltextEntryCount
argument_list|(
name|IndexDefinition
operator|.
name|DEFAULT_ENTRY_COUNT
operator|+
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|//Once count is explicitly defined then it would influence the cost
name|defnb
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|ENTRY_COUNT_PROPERTY_NAME
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|defn
operator|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|defn
operator|.
name|getFulltextEntryCount
argument_list|(
literal|300
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|defn
operator|.
name|getFulltextEntryCount
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|customAnalyzer
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defnb
init|=
name|newLuceneIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"lucene"
argument_list|,
name|of
argument_list|(
name|TYPENAME_STRING
argument_list|)
argument_list|)
decl_stmt|;
comment|//Set this to -1 to avoid wrapping by LimitAnalyzer
name|defnb
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|MAX_FIELD_LENGTH
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|defnb
operator|.
name|child
argument_list|(
name|ANALYZERS
argument_list|)
operator|.
name|child
argument_list|(
name|ANL_DEFAULT
argument_list|)
operator|.
name|child
argument_list|(
name|LuceneIndexConstants
operator|.
name|ANL_TOKENIZER
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|ANL_NAME
argument_list|,
literal|"whitespace"
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TokenizerChain
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|defn
operator|.
name|getAnalyzer
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|customTikaConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defnb
init|=
name|newLuceneIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"lucene"
argument_list|,
name|of
argument_list|(
name|TYPENAME_STRING
argument_list|)
argument_list|)
decl_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|defn
operator|.
name|hasCustomTikaConfig
argument_list|()
argument_list|)
expr_stmt|;
name|defnb
operator|.
name|child
argument_list|(
name|LuceneIndexConstants
operator|.
name|TIKA
argument_list|)
operator|.
name|child
argument_list|(
name|LuceneIndexConstants
operator|.
name|TIKA_CONFIG
argument_list|)
operator|.
name|child
argument_list|(
name|JcrConstants
operator|.
name|JCR_CONTENT
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_DATA
argument_list|,
literal|"hello"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|defn
operator|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|defn
operator|.
name|hasCustomTikaConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|maxExtractLength
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|defnb
init|=
name|newLuceneIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"lucene"
argument_list|,
name|of
argument_list|(
name|TYPENAME_STRING
argument_list|)
argument_list|)
decl_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
name|IndexDefinition
operator|.
name|DEFAULT_MAX_EXTRACT_LENGTH
operator|*
name|IndexDefinition
operator|.
name|DEFAULT_MAX_FIELD_LENGTH
argument_list|,
name|defn
operator|.
name|getMaxExtractLength
argument_list|()
argument_list|)
expr_stmt|;
name|defnb
operator|.
name|child
argument_list|(
name|TIKA
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|TIKA_MAX_EXTRACT_LENGTH
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|defn
operator|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnb
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|defn
operator|.
name|getMaxExtractLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|nullCheckEnabledWithNtBase
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|child
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NULL_CHECK_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IndexDefinition
name|idxDefn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|nullCheckEnabledWithRegex
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|rules
operator|.
name|child
argument_list|(
name|TestUtil
operator|.
name|NT_TEST
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"oak:TestNode/properties/prop2"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|".*"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_IS_REGEX
argument_list|,
literal|true
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NULL_CHECK_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|=
name|registerTestNodeType
argument_list|(
name|builder
argument_list|)
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|IndexDefinition
name|idxDefn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nullCheckEnabledWithTestNode
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"oak:TestNode/properties/prop2"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NULL_CHECK_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|=
name|registerTestNodeType
argument_list|(
name|builder
argument_list|)
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|IndexDefinition
name|idxDefn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|idxDefn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|TestUtil
operator|.
name|NT_TEST
argument_list|)
operator|.
name|getNullCheckEnabledProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notNullCheckEnabledWithTestNode
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"oak:TestNode/properties/prop2"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NOT_NULL_CHECK_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|=
name|registerTestNodeType
argument_list|(
name|builder
argument_list|)
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|IndexDefinition
name|idxDefn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|idxDefn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|TestUtil
operator|.
name|NT_TEST
argument_list|)
operator|.
name|getNotNullCheckEnabledProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSuggestEnabledOnNamedProp
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"oak:TestNode/properties/prop2"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_USE_IN_SUGGEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|=
name|registerTestNodeType
argument_list|(
name|builder
argument_list|)
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|IndexDefinition
name|idxDefn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|idxDefn
operator|.
name|isSuggestEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSuggestEnabledOnRegexProp
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|rules
operator|.
name|child
argument_list|(
name|TestUtil
operator|.
name|NT_TEST
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"oak:TestNode/properties/prop2"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|".*"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_IS_REGEX
argument_list|,
literal|true
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_USE_IN_SUGGEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|=
name|registerTestNodeType
argument_list|(
name|builder
argument_list|)
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|IndexDefinition
name|idxDefn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|idxDefn
operator|.
name|isSuggestEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSuggestDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"oak:TestNode/properties/prop2"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|=
name|registerTestNodeType
argument_list|(
name|builder
argument_list|)
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|IndexDefinition
name|idxDefn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|idxDefn
operator|.
name|isSuggestEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|analyzedEnabledForBoostedField
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|rules
operator|.
name|child
argument_list|(
literal|"nt:folder"
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"nt:folder/properties/prop1"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|3.0
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE_SCOPE_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"nt:folder/properties/prop2"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE_SCOPE_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"nt:folder/properties/prop3"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_PROPERTY_INDEX
argument_list|,
literal|true
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE_SCOPE_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|IndexingRule
name|rule1
init|=
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rule1
argument_list|)
expr_stmt|;
name|PropertyDefinition
name|pd
init|=
name|rule1
operator|.
name|getConfig
argument_list|(
literal|"prop1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3.0f
argument_list|,
name|pd
operator|.
name|boost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Analyzed should be assumed to be true for boosted fields"
argument_list|,
name|pd
operator|.
name|analyzed
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rule1
operator|.
name|getConfig
argument_list|(
literal|"prop3"
argument_list|)
operator|.
name|analyzed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rule1
operator|.
name|getNodeScopeAnalyzedProps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeFullTextIndexed_Regex
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|rules
operator|.
name|child
argument_list|(
literal|"nt:folder"
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"nt:folder/properties/prop1"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|".*"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_IS_REGEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|IndexingRule
name|rule
init|=
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rule
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rule
operator|.
name|isNodeFullTextIndexed
argument_list|()
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"nt:folder/properties/prop1"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE_SCOPE_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|defn
operator|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|rule
operator|=
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule
operator|.
name|isNodeFullTextIndexed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule
operator|.
name|indexesAllNodesOfMatchingType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeFullTextIndexed_Simple
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|rules
operator|.
name|child
argument_list|(
literal|"nt:folder"
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"nt:folder/properties/prop1"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|IndexingRule
name|rule
init|=
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rule
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rule
operator|.
name|isNodeFullTextIndexed
argument_list|()
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"nt:folder/properties/prop1"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE_SCOPE_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|defn
operator|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|rule
operator|=
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule
operator|.
name|isNodeFullTextIndexed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule
operator|.
name|indexesAllNodesOfMatchingType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeFullTextIndexed_Aggregates
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|rules
operator|.
name|child
argument_list|(
literal|"nt:folder"
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"nt:folder/properties/prop1"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NodeBuilder
name|aggregates
init|=
name|builder
operator|.
name|child
argument_list|(
name|LuceneIndexConstants
operator|.
name|AGGREGATES
argument_list|)
decl_stmt|;
name|NodeBuilder
name|aggFolder
init|=
name|aggregates
operator|.
name|child
argument_list|(
literal|"nt:folder"
argument_list|)
decl_stmt|;
name|aggFolder
operator|.
name|child
argument_list|(
literal|"i1"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|AGG_PATH
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|IndexingRule
name|rule
init|=
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rule
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule
operator|.
name|isNodeFullTextIndexed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rule
operator|.
name|indexesAllNodesOfMatchingType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nonIndexPropShouldHaveAllOtherConfigDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|rules
operator|.
name|child
argument_list|(
literal|"nt:folder"
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|child
argument_list|(
name|rules
argument_list|,
literal|"nt:folder/properties/prop1"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_INDEX
argument_list|,
literal|false
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_USE_IN_SUGGEST
argument_list|,
literal|true
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_USE_IN_SPELLCHECK
argument_list|,
literal|true
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NULL_CHECK_ENABLED
argument_list|,
literal|true
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NOT_NULL_CHECK_ENABLED
argument_list|,
literal|true
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_USE_IN_EXCERPT
argument_list|,
literal|true
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE_SCOPE_INDEX
argument_list|,
literal|true
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ORDERED
argument_list|,
literal|true
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|IndexingRule
name|rule
init|=
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rule
argument_list|)
expr_stmt|;
name|PropertyDefinition
name|pd
init|=
name|rule
operator|.
name|getConfig
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
comment|//Assert that all other config is false if the index=false for any property
name|assertFalse
argument_list|(
name|pd
operator|.
name|index
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pd
operator|.
name|nodeScopeIndex
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pd
operator|.
name|useInSuggest
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pd
operator|.
name|useInSpellcheck
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pd
operator|.
name|nullCheckEnabled
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pd
operator|.
name|notNullCheckEnabled
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pd
operator|.
name|stored
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pd
operator|.
name|ordered
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pd
operator|.
name|analyzed
argument_list|)
expr_stmt|;
block|}
comment|//TODO indexesAllNodesOfMatchingType - with nullCheckEnabled
specifier|private
specifier|static
name|IndexingRule
name|getRule
parameter_list|(
name|IndexDefinition
name|defn
parameter_list|,
name|String
name|typeName
parameter_list|)
block|{
return|return
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
name|newTree
argument_list|(
name|newNode
argument_list|(
name|typeName
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Tree
name|newTree
parameter_list|(
name|NodeBuilder
name|nb
parameter_list|)
block|{
return|return
name|TreeFactory
operator|.
name|createReadOnlyTree
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|NodeBuilder
name|newNode
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
specifier|private
specifier|static
name|NodeBuilder
name|newNode
parameter_list|(
name|String
name|typeName
parameter_list|,
name|String
name|mixins
parameter_list|)
block|{
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|mixins
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

