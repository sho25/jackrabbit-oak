begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|LoggerContext
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|spi
operator|.
name|ILoggingEvent
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|core
operator|.
name|read
operator|.
name|ListAppender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Testcase which asserts on some std log statements. These statement  * are picked by tooling outside of Oak so act like a weak contract to  * honour.  */
end_comment

begin_class
specifier|public
class|class
name|OperationLoggerTest
extends|extends
name|AbstractJCRTest
block|{
specifier|private
specifier|final
name|String
index|[]
name|OPS_LOGGERS
init|=
block|{
literal|"org.apache.jackrabbit.oak.jcr.operations"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPS_QUERY
init|=
literal|"org.apache.jackrabbit.oak.jcr.operations.query"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPS_BINARY
init|=
literal|"org.apache.jackrabbit.oak.jcr.operations.binary"
decl_stmt|;
specifier|private
name|ListAppender
argument_list|<
name|ILoggingEvent
argument_list|>
name|logs
init|=
operator|new
name|ListAppender
argument_list|<
name|ILoggingEvent
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testQueryLogger
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|node1
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|)
decl_stmt|;
comment|//Log batch size is 100
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|200
condition|;
name|i
operator|++
control|)
block|{
name|node1
operator|.
name|addNode
argument_list|(
literal|"foo"
operator|+
name|i
argument_list|,
literal|"oak:Unstructured"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
block|}
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|start
argument_list|()
expr_stmt|;
name|String
name|stmt
init|=
literal|"select * from [nt:base] where foo = 'bar'"
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|stmt
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|r
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|Iterators
operator|.
name|size
argument_list|(
name|r
operator|.
name|getRows
argument_list|()
argument_list|)
expr_stmt|;
name|stop
argument_list|()
expr_stmt|;
name|boolean
name|queryStmtLog
init|=
literal|false
decl_stmt|;
name|boolean
name|queryIterationLog
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ILoggingEvent
name|e
range|:
name|logs
operator|.
name|list
control|)
block|{
if|if
condition|(
name|OPS_QUERY
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getLoggerName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Executed query"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|stmt
argument_list|,
name|e
operator|.
name|getArgumentArray
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getArgumentArray
argument_list|()
index|[
literal|1
index|]
operator|instanceof
name|Number
argument_list|)
expr_stmt|;
name|queryStmtLog
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Iterated over"
argument_list|)
condition|)
block|{
name|queryIterationLog
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|assertTrue
argument_list|(
literal|"Did not find query log"
argument_list|,
name|queryStmtLog
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not find query iteration log"
argument_list|,
name|queryIterationLog
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBinaryLogger
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|node1
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|)
decl_stmt|;
name|start
argument_list|()
expr_stmt|;
name|byte
index|[]
name|data
init|=
literal|"hello"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|Binary
name|b
init|=
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createBinary
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|node1
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|stop
argument_list|()
expr_stmt|;
name|boolean
name|binaryLog
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ILoggingEvent
name|e
range|:
name|logs
operator|.
name|list
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getLoggerName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|OPS_BINARY
argument_list|)
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Created binary property"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|data
operator|.
name|length
argument_list|)
argument_list|,
name|e
operator|.
name|getArgumentArray
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|binaryLog
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|assertTrue
argument_list|(
literal|"Did not find binary upload log"
argument_list|,
name|binaryLog
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|start
parameter_list|()
block|{
name|logs
operator|.
name|start
argument_list|()
expr_stmt|;
name|logs
operator|.
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|logger
range|:
name|OPS_LOGGERS
control|)
block|{
name|getLogger
argument_list|(
name|logger
argument_list|)
operator|.
name|addAppender
argument_list|(
name|logs
argument_list|)
expr_stmt|;
name|getLogger
argument_list|(
name|logger
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|stop
parameter_list|()
block|{
for|for
control|(
name|String
name|logger
range|:
name|OPS_LOGGERS
control|)
block|{
name|getLogger
argument_list|(
name|logger
argument_list|)
operator|.
name|detachAppender
argument_list|(
name|logs
argument_list|)
expr_stmt|;
name|getLogger
argument_list|(
name|logger
argument_list|)
operator|.
name|setLevel
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|logs
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|Logger
name|getLogger
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
operator|(
name|LoggerContext
operator|)
name|LoggerFactory
operator|.
name|getILoggerFactory
argument_list|()
operator|)
operator|.
name|getLogger
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

