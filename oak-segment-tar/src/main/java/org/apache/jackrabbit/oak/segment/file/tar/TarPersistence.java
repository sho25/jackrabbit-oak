begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|LocalGCJournalFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|LocalManifestFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|monitor
operator|.
name|FileStoreMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|monitor
operator|.
name|IOMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|GCJournalFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|JournalFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|ManifestFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|RepositoryLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentArchiveManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentNodeStorePersistence
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|OverlappingFileLockException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_class
specifier|public
class|class
name|TarPersistence
implements|implements
name|SegmentNodeStorePersistence
block|{
specifier|private
specifier|static
specifier|final
name|String
name|LOCK_FILE_NAME
init|=
literal|"repo.lock"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GC_JOURNAL
init|=
literal|"gc.log"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MANIFEST_FILE_NAME
init|=
literal|"manifest"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JOURNAL_FILE_NAME
init|=
literal|"journal.log"
decl_stmt|;
specifier|private
specifier|final
name|File
name|directory
decl_stmt|;
specifier|public
name|TarPersistence
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SegmentArchiveManager
name|createArchiveManager
parameter_list|(
name|boolean
name|memoryMapping
parameter_list|,
name|boolean
name|offHeapAccess
parameter_list|,
name|IOMonitor
name|ioMonitor
parameter_list|,
name|FileStoreMonitor
name|fileStoreMonitor
parameter_list|)
block|{
return|return
operator|new
name|SegmentTarManager
argument_list|(
name|directory
argument_list|,
name|fileStoreMonitor
argument_list|,
name|ioMonitor
argument_list|,
name|memoryMapping
argument_list|,
name|offHeapAccess
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|segmentFilesExist
parameter_list|()
block|{
name|Collection
argument_list|<
name|File
argument_list|>
name|entries
init|=
name|FileUtils
operator|.
name|listFiles
argument_list|(
name|directory
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tar"
block|}
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|!
name|entries
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|JournalFile
name|getJournalFile
parameter_list|()
block|{
return|return
operator|new
name|LocalJournalFile
argument_list|(
name|directory
argument_list|,
name|JOURNAL_FILE_NAME
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|GCJournalFile
name|getGCJournalFile
parameter_list|()
block|{
return|return
operator|new
name|LocalGCJournalFile
argument_list|(
name|directory
argument_list|,
name|GC_JOURNAL
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ManifestFile
name|getManifestFile
parameter_list|()
block|{
return|return
operator|new
name|LocalManifestFile
argument_list|(
name|directory
argument_list|,
name|MANIFEST_FILE_NAME
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RepositoryLock
name|lockRepository
parameter_list|()
throws|throws
name|IOException
block|{
name|RandomAccessFile
name|lockFile
init|=
operator|new
name|RandomAccessFile
argument_list|(
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|LOCK_FILE_NAME
argument_list|)
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
try|try
block|{
name|FileLock
name|lock
init|=
name|lockFile
operator|.
name|getChannel
argument_list|()
operator|.
name|lock
argument_list|()
decl_stmt|;
return|return
parameter_list|()
lambda|->
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
name|lockFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|;
block|}
catch|catch
parameter_list|(
name|OverlappingFileLockException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|directory
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" is in use by another store."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

