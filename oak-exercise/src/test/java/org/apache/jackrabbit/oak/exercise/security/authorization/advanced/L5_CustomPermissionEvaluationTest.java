begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|authorization
operator|.
name|advanced
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|GuestCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|authorization
operator|.
name|models
operator|.
name|predefined
operator|.
name|PredefinedAuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|AuthenticationConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|internal
operator|.
name|SecurityProviderBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: Advanced Authorization Topics  * =============================================================================  *  * Title: Writing Custom Authorization : Permission Evaluation  * -----------------------------------------------------------------------------  *  * Goal:  * Write a custom {@link org.apache.jackrabbit.oak.spi.security.authorization.permission.PermissionProvider}  * for a predefined requirement in order to become familiar with the details of  * the Oak permission evaluation.  *  * Exercises:  *  * Complete the implementation of {@link org.apache.jackrabbit.oak.exercise.security.authorization.models.predefined.PredefinedPermissionProvider}  * such that the tests pass.  *  *  * Advanced Exercise  * -----------------------------------------------------------------------------  *  * Currently the {@link org.apache.jackrabbit.oak.exercise.security.authorization.models.predefined.PredefinedPermissionProvider}  * doesn't implement {@link org.apache.jackrabbit.oak.spi.security.authorization.permission.AggregatedPermissionProvider} interface  * and can therefore not be used in a setup that combines multipe authorization models.  *  * As an advanced exercise modify the {@link org.apache.jackrabbit.oak.exercise.security.authorization.models.predefined.PredefinedPermissionProvider}  * to additionally implement {@link org.apache.jackrabbit.oak.spi.security.authorization.permission.AggregatedPermissionProvider}  * and deploy the {@link PredefinedAuthorizationConfiguration} in a setup with  * multiple authorization models.  *  * - Discuss the additional methods defined by {@link org.apache.jackrabbit.oak.spi.security.authorization.permission.AggregatedPermissionProvider}.  * - Clarify which type of 'Authorization Composition' your implementation should be used.  * - Observe the result of your combination and explain the results to effective permissions.  *  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|L5_CustomPermissionEvaluationTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|ACTION_NAMES
init|=
operator|new
name|String
index|[]
block|{
name|Session
operator|.
name|ACTION_READ
block|,
name|Session
operator|.
name|ACTION_ADD_NODE
block|,
name|Session
operator|.
name|ACTION_SET_PROPERTY
block|,
name|Session
operator|.
name|ACTION_REMOVE
block|}
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Tree
argument_list|>
name|trees
decl_stmt|;
specifier|private
name|PropertyState
name|prop
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|SecurityProvider
name|initSecurityProvider
parameter_list|()
block|{
name|AuthorizationConfiguration
name|ac
init|=
operator|new
name|PredefinedAuthorizationConfiguration
argument_list|()
decl_stmt|;
return|return
name|SecurityProviderBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|AuthenticationConfigurationImpl
argument_list|()
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
operator|new
name|PrivilegeConfigurationImpl
argument_list|()
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
operator|new
name|UserConfigurationImpl
argument_list|()
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|ac
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
operator|new
name|PrincipalConfigurationImpl
argument_list|()
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
operator|new
name|TokenConfigurationImpl
argument_list|()
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
operator|.
name|with
argument_list|(
name|getSecurityConfigParameters
argument_list|()
argument_list|)
operator|.
name|withRootProvider
argument_list|(
name|getRootProvider
argument_list|()
argument_list|)
operator|.
name|withTreeProvider
argument_list|(
name|getTreeProvider
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|prop
operator|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|Tree
name|testTree
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"contentA"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|Tree
name|aTree
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|testTree
argument_list|,
literal|"a"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|aTree
operator|.
name|setProperty
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|Tree
name|aaTree
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|aTree
argument_list|,
literal|"a"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|aaTree
operator|.
name|setProperty
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|Tree
name|bTree
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"contentB"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|bTree
operator|.
name|setProperty
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|Tree
name|bbTree
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|bTree
argument_list|,
literal|"b"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|bbTree
operator|.
name|setProperty
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|Tree
name|cTree
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"contentC"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|cTree
operator|.
name|setProperty
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|Tree
name|ccTree
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|cTree
argument_list|,
literal|"c"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|ccTree
operator|.
name|setProperty
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|trees
operator|=
name|ImmutableList
operator|.
expr|<
name|Tree
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|testTree
argument_list|)
operator|.
name|add
argument_list|(
name|aTree
argument_list|)
operator|.
name|add
argument_list|(
name|aaTree
argument_list|)
operator|.
name|add
argument_list|(
name|bTree
argument_list|)
operator|.
name|add
argument_list|(
name|bbTree
argument_list|)
operator|.
name|add
argument_list|(
name|cTree
argument_list|)
operator|.
name|add
argument_list|(
name|ccTree
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
specifier|private
name|PermissionProvider
name|getPermissionProvider
parameter_list|(
annotation|@
name|Nonnull
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
parameter_list|)
block|{
return|return
name|getConfig
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
name|adminSession
operator|.
name|getWorkspaceName
argument_list|()
argument_list|,
name|principals
argument_list|)
return|;
block|}
specifier|private
name|Iterable
argument_list|<
name|String
argument_list|>
name|getTreePaths
parameter_list|()
block|{
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|trees
argument_list|,
name|Tree
operator|::
name|getPath
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAdministratorHasFullAccessEverywhere
parameter_list|()
block|{
for|for
control|(
name|String
name|path
range|:
name|getTreePaths
argument_list|()
control|)
block|{
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|t
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|PermissionProvider
name|pp
init|=
name|getPermissionProvider
argument_list|(
name|adminSession
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getPrincipals
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Tree
name|t
range|:
name|trees
control|)
block|{
name|pp
operator|.
name|getPrivileges
argument_list|(
name|t
argument_list|)
operator|.
name|contains
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|t
argument_list|,
name|prop
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|treePath
init|=
name|t
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|allActions
init|=
name|Text
operator|.
name|implode
argument_list|(
name|ACTION_NAMES
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|treePath
argument_list|,
name|allActions
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|treePath
argument_list|,
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|allActions
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGuestHasNowherePermissions
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ContentSession
name|guest
init|=
name|login
argument_list|(
operator|new
name|GuestCredentials
argument_list|()
argument_list|)
init|)
block|{
name|Root
name|r
init|=
name|guest
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|getTreePaths
argument_list|()
control|)
block|{
name|Tree
name|t
init|=
name|r
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|t
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|PermissionProvider
name|pp
init|=
name|getPermissionProvider
argument_list|(
name|guest
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getPrincipals
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Tree
name|t
range|:
name|trees
control|)
block|{
name|pp
operator|.
name|getPrivileges
argument_list|(
name|t
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
for|for
control|(
name|long
name|permission
range|:
name|Permissions
operator|.
name|aggregates
argument_list|(
name|Permissions
operator|.
name|ALL
argument_list|)
control|)
block|{
name|assertFalse
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
name|permission
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|t
argument_list|,
name|prop
argument_list|,
name|permission
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|action
range|:
name|ACTION_NAMES
control|)
block|{
name|String
name|treePath
init|=
name|t
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|treePath
argument_list|,
name|action
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|treePath
argument_list|,
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|action
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// TODO: add more tests
block|}
end_class

end_unit

