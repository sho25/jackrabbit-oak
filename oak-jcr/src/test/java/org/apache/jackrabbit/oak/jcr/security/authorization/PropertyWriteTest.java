begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Specific tests for the individual property modification permissions:  * - add  * - modify  * - remove  *  * @since OAK 1.0  */
end_comment

begin_class
specifier|public
class|class
name|PropertyWriteTest
extends|extends
name|AbstractEvaluationTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testAddProperty
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant 'testUser' ADD_PROPERTIES privileges at 'path'
name|Privilege
index|[]
name|privileges
init|=
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"rep:addProperties"
block|}
argument_list|)
decl_stmt|;
name|allow
argument_list|(
name|path
argument_list|,
name|privileges
argument_list|)
expr_stmt|;
comment|/*          testuser must now have          - ADD_PROPERTIES permission          - no other write permission         */
name|assertHasPrivilege
argument_list|(
name|path
argument_list|,
name|Privilege
operator|.
name|JCR_MODIFY_PROPERTIES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertHasPrivilege
argument_list|(
name|path
argument_list|,
literal|"rep:addProperties"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertHasPrivilege
argument_list|(
name|path
argument_list|,
literal|"rep:removeProperties"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertHasPrivilege
argument_list|(
name|path
argument_list|,
literal|"rep:alterProperties"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// set_property action for non-existing property is translated to "add_properties" permission
name|String
name|propertyPath
init|=
name|path
operator|+
literal|"/newProperty"
decl_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|propertyPath
argument_list|,
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
comment|// creating the property must succeed
name|Node
name|testN
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|testN
operator|.
name|setProperty
argument_list|(
literal|"newProperty"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// now property exists -> 'set_property' actions is no longer granted
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|propertyPath
argument_list|,
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|propertyPath
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
comment|// modifying or removing the new property must fail
try|try
block|{
name|testN
operator|.
name|setProperty
argument_list|(
literal|"newProperty"
argument_list|,
literal|"modified"
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|testN
operator|.
name|getProperty
argument_list|(
literal|"newProperty"
argument_list|)
operator|.
name|setValue
argument_list|(
literal|"modified"
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|testN
operator|.
name|setProperty
argument_list|(
literal|"newProperty"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|testN
operator|.
name|getProperty
argument_list|(
literal|"newProperty"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModifyProperty
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant 'testUser' ALTER_PROPERTIES privileges at 'path'
name|Privilege
index|[]
name|privileges
init|=
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"rep:alterProperties"
block|}
argument_list|)
decl_stmt|;
name|allow
argument_list|(
name|path
argument_list|,
name|privileges
argument_list|)
expr_stmt|;
comment|/*          testuser must now have          - MODIFY_PROPERTY_PROPERTIES permission          - no other write permission         */
name|assertHasPrivilege
argument_list|(
name|path
argument_list|,
name|Privilege
operator|.
name|JCR_MODIFY_PROPERTIES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertHasPrivilege
argument_list|(
name|path
argument_list|,
literal|"rep:addProperties"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertHasPrivilege
argument_list|(
name|path
argument_list|,
literal|"rep:removeProperties"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertHasPrivilege
argument_list|(
name|path
argument_list|,
literal|"rep:alterProperties"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// set_property action for non-existing property is translated to
comment|// "add_properties" permission
name|String
name|propertyPath
init|=
name|path
operator|+
literal|"/newProperty"
decl_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|propertyPath
argument_list|,
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
comment|// creating a new property must fail
name|Node
name|testN
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|testN
operator|.
name|setProperty
argument_list|(
literal|"newProperty"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|superuser
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"newProperty"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// property exists -> 'set_property' actions is granted, 'remove' is denied
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|propertyPath
argument_list|,
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|propertyPath
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
comment|// modifying the new property must succeed
name|testN
operator|.
name|setProperty
argument_list|(
literal|"newProperty"
argument_list|,
literal|"modified"
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|testN
operator|.
name|getProperty
argument_list|(
literal|"newProperty"
argument_list|)
operator|.
name|setValue
argument_list|(
literal|"modified2"
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// removing the property must fail
try|try
block|{
name|testN
operator|.
name|setProperty
argument_list|(
literal|"newProperty"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|testN
operator|.
name|getProperty
argument_list|(
literal|"newProperty"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveProperty
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant 'testUser' REMOVE_PROPERTIES privileges at 'path'
name|Privilege
index|[]
name|privileges
init|=
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"rep:removeProperties"
block|}
argument_list|)
decl_stmt|;
name|allow
argument_list|(
name|path
argument_list|,
name|privileges
argument_list|)
expr_stmt|;
comment|/*          testuser must now have          - REMOVE_PROPERTY_PROPERTIES permission          - no other write permission         */
name|assertHasPrivilege
argument_list|(
name|path
argument_list|,
name|Privilege
operator|.
name|JCR_MODIFY_PROPERTIES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertHasPrivilege
argument_list|(
name|path
argument_list|,
literal|"rep:addProperties"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertHasPrivilege
argument_list|(
name|path
argument_list|,
literal|"rep:removeProperties"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertHasPrivilege
argument_list|(
name|path
argument_list|,
literal|"rep:alterProperties"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// set_property action for non-existing property is translated to
comment|// "add_properties" permission -> denied
name|String
name|propertyPath
init|=
name|path
operator|+
literal|"/newProperty"
decl_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|propertyPath
argument_list|,
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
comment|// creating a new property must fail
name|Node
name|testN
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|testN
operator|.
name|setProperty
argument_list|(
literal|"newProperty"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|superuser
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"newProperty"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// now property exists -> 'set_property' actions is denied, 'remove' is granted
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|propertyPath
argument_list|,
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|propertyPath
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
comment|// modifying the new property must fail
try|try
block|{
name|testN
operator|.
name|setProperty
argument_list|(
literal|"newProperty"
argument_list|,
literal|"modified"
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|testN
operator|.
name|getProperty
argument_list|(
literal|"newProperty"
argument_list|)
operator|.
name|setValue
argument_list|(
literal|"modified"
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
comment|// removing the property must succeed
name|testN
operator|.
name|getProperty
argument_list|(
literal|"newProperty"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveProperty2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant 'testUser' REMOVE_PROPERTIES privileges at 'path'
name|Privilege
index|[]
name|privileges
init|=
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"rep:removeProperties"
block|}
argument_list|)
decl_stmt|;
name|allow
argument_list|(
name|path
argument_list|,
name|privileges
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"newProperty"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// removing by setting to null must succeeed
name|testSession
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"newProperty"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

