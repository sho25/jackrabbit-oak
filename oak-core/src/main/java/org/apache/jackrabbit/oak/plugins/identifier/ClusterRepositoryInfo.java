begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|identifier
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_comment
comment|/**  * Utility class to manage a unique cluster/repository id for the cluster.  */
end_comment

begin_class
specifier|public
class|class
name|ClusterRepositoryInfo
block|{
specifier|public
specifier|static
specifier|final
name|String
name|CLUSTER_CONFIG_NODE
init|=
literal|":clusterConfig"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CLUSTER_ID_PROP
init|=
literal|":clusterId"
decl_stmt|;
comment|/**      * Adds a new uuid for the repository in the property /:clusterConfig/:clusterId if not available      *      * @param store the NodeStore instance      * @return the repository id      * @throws CommitFailedException      */
specifier|public
specifier|static
name|String
name|createId
parameter_list|(
name|NodeStore
name|store
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
name|createId
argument_list|(
name|store
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Adds a new uuid for the repository in the property /:clusterConfig/:clusterId Or      * update the id with the customId passed.      *      * @param store the NodeStore instance      * @param customId customId      * @return the repository id      * @throws CommitFailedException      */
specifier|public
specifier|static
name|String
name|createId
parameter_list|(
name|NodeStore
name|store
parameter_list|,
name|String
name|customId
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|root
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|root
operator|.
name|hasChildNode
argument_list|(
name|CLUSTER_CONFIG_NODE
argument_list|)
operator|||
operator|!
name|root
operator|.
name|getChildNode
argument_list|(
name|CLUSTER_CONFIG_NODE
argument_list|)
operator|.
name|hasProperty
argument_list|(
name|CLUSTER_ID_PROP
argument_list|)
condition|)
block|{
comment|// Set the customId if available
name|String
name|id
init|=
operator|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|customId
argument_list|)
condition|?
name|customId
else|:
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
decl_stmt|;
name|root
operator|.
name|child
argument_list|(
name|CLUSTER_CONFIG_NODE
argument_list|)
operator|.
name|setProperty
argument_list|(
name|CLUSTER_ID_PROP
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|root
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
else|else
block|{
name|String
name|currId
init|=
name|root
operator|.
name|getChildNode
argument_list|(
name|CLUSTER_CONFIG_NODE
argument_list|)
operator|.
name|getProperty
argument_list|(
name|CLUSTER_ID_PROP
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|customId
argument_list|)
operator|&&
operator|!
name|customId
operator|.
name|equals
argument_list|(
name|currId
argument_list|)
condition|)
block|{
name|root
operator|.
name|child
argument_list|(
name|CLUSTER_CONFIG_NODE
argument_list|)
operator|.
name|setProperty
argument_list|(
name|CLUSTER_ID_PROP
argument_list|,
name|customId
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|root
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|currId
operator|=
name|customId
expr_stmt|;
block|}
return|return
name|currId
return|;
block|}
block|}
comment|/**      * Retrieves the {# CLUSTER_ID_PROP}      *      * @param store the NodeStore instance      * @return the repository id      */
annotation|@
name|CheckForNull
specifier|public
specifier|static
name|String
name|getId
parameter_list|(
name|NodeStore
name|store
parameter_list|)
block|{
name|NodeState
name|state
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|CLUSTER_CONFIG_NODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|hasProperty
argument_list|(
name|CLUSTER_ID_PROP
argument_list|)
condition|)
block|{
return|return
name|state
operator|.
name|getProperty
argument_list|(
name|CLUSTER_ID_PROP
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

