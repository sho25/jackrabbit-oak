begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Tests for UpdateOp  */
end_comment

begin_class
specifier|public
class|class
name|UpdateOpTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|keyEquals
parameter_list|()
block|{
name|Revision
name|r1
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r2
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|UpdateOp
operator|.
name|Key
name|k1
init|=
operator|new
name|UpdateOp
operator|.
name|Key
argument_list|(
literal|"foo"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|UpdateOp
operator|.
name|Key
name|k2
init|=
operator|new
name|UpdateOp
operator|.
name|Key
argument_list|(
literal|"bar"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|k1
operator|.
name|equals
argument_list|(
name|k2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|k2
operator|.
name|equals
argument_list|(
name|k1
argument_list|)
argument_list|)
expr_stmt|;
name|UpdateOp
operator|.
name|Key
name|k3
init|=
operator|new
name|UpdateOp
operator|.
name|Key
argument_list|(
literal|"foo"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|k1
operator|.
name|equals
argument_list|(
name|k3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|k3
operator|.
name|equals
argument_list|(
name|k1
argument_list|)
argument_list|)
expr_stmt|;
name|UpdateOp
operator|.
name|Key
name|k4
init|=
operator|new
name|UpdateOp
operator|.
name|Key
argument_list|(
literal|"foo"
argument_list|,
name|r1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|k4
operator|.
name|equals
argument_list|(
name|k3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|k3
operator|.
name|equals
argument_list|(
name|k4
argument_list|)
argument_list|)
expr_stmt|;
name|UpdateOp
operator|.
name|Key
name|k5
init|=
operator|new
name|UpdateOp
operator|.
name|Key
argument_list|(
literal|"foo"
argument_list|,
name|r2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|k5
operator|.
name|equals
argument_list|(
name|k4
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|k4
operator|.
name|equals
argument_list|(
name|k5
argument_list|)
argument_list|)
expr_stmt|;
name|UpdateOp
operator|.
name|Key
name|k6
init|=
operator|new
name|UpdateOp
operator|.
name|Key
argument_list|(
literal|"foo"
argument_list|,
name|r1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|k6
operator|.
name|equals
argument_list|(
name|k4
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|k4
operator|.
name|equals
argument_list|(
name|k6
argument_list|)
argument_list|)
expr_stmt|;
name|UpdateOp
operator|.
name|Key
name|k7
init|=
operator|new
name|UpdateOp
operator|.
name|Key
argument_list|(
literal|"bar"
argument_list|,
name|r1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|k7
operator|.
name|equals
argument_list|(
name|k6
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|k6
operator|.
name|equals
argument_list|(
name|k7
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|combine
parameter_list|()
block|{
name|UpdateOp
name|op1
init|=
operator|new
name|UpdateOp
argument_list|(
literal|"id"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|op1
operator|.
name|set
argument_list|(
literal|"p"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|UpdateOp
name|op2
init|=
operator|new
name|UpdateOp
argument_list|(
literal|"id"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Revision
name|r
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|op2
operator|.
name|containsMapEntry
argument_list|(
literal|"e"
argument_list|,
name|r
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|UpdateOp
name|combined
init|=
name|UpdateOp
operator|.
name|combine
argument_list|(
literal|"id"
argument_list|,
name|newArrayList
argument_list|(
name|op1
argument_list|,
name|op2
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|combined
operator|.
name|hasChanges
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|combined
operator|.
name|getChanges
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|combined
operator|.
name|getConditions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|containsMapEntry
parameter_list|()
block|{
name|Revision
name|r
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
literal|"id"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|op
operator|.
name|containsMapEntry
argument_list|(
literal|"p"
argument_list|,
name|r
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected "
operator|+
name|IllegalStateException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|op
operator|=
operator|new
name|UpdateOp
argument_list|(
literal|"id"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|op
operator|.
name|containsMapEntry
argument_list|(
literal|"p"
argument_list|,
name|r
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|op
operator|.
name|getConditions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateOp
operator|.
name|Key
name|key
init|=
name|op
operator|.
name|getConditions
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|r
argument_list|,
name|key
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p"
argument_list|,
name|key
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateOp
operator|.
name|Condition
name|c
init|=
name|op
operator|.
name|getConditions
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|UpdateOp
operator|.
name|Condition
operator|.
name|EXISTS
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|op
operator|=
operator|new
name|UpdateOp
argument_list|(
literal|"id"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|op
operator|.
name|containsMapEntry
argument_list|(
literal|"p"
argument_list|,
name|r
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|op
operator|.
name|getConditions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|=
name|op
operator|.
name|getConditions
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|r
argument_list|,
name|key
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p"
argument_list|,
name|key
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|=
name|op
operator|.
name|getConditions
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UpdateOp
operator|.
name|Condition
operator|.
name|MISSING
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|copy
parameter_list|()
block|{
name|UpdateOp
name|op1
init|=
operator|new
name|UpdateOp
argument_list|(
literal|"id"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|op1
operator|.
name|set
argument_list|(
literal|"p"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|UpdateOp
name|op2
init|=
name|op1
operator|.
name|copy
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|op2
operator|.
name|hasChanges
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|op2
operator|.
name|getChanges
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|op2
operator|.
name|getConditions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|r
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|op1
operator|.
name|containsMapEntry
argument_list|(
literal|"e"
argument_list|,
name|r
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|op2
operator|=
name|op1
operator|.
name|copy
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|op2
operator|.
name|getConditions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|equalsTest
parameter_list|()
block|{
name|Revision
name|r
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
literal|"id"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|op
operator|.
name|equals
argument_list|(
literal|"p"
argument_list|,
name|r
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected "
operator|+
name|IllegalStateException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|op
operator|=
operator|new
name|UpdateOp
argument_list|(
literal|"id"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|op
operator|.
name|equals
argument_list|(
literal|"p"
argument_list|,
name|r
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|op
operator|.
name|getConditions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateOp
operator|.
name|Key
name|key
init|=
name|op
operator|.
name|getConditions
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|r
argument_list|,
name|key
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p"
argument_list|,
name|key
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateOp
operator|.
name|Condition
name|c
init|=
name|op
operator|.
name|getConditions
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|UpdateOp
operator|.
name|Condition
operator|.
name|Type
operator|.
name|EQUALS
argument_list|,
name|c
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v"
argument_list|,
name|c
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notEqualsTest
parameter_list|()
block|{
name|Revision
name|r
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
literal|"id"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|op
operator|.
name|notEquals
argument_list|(
literal|"p"
argument_list|,
name|r
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected "
operator|+
name|IllegalStateException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|op
operator|=
operator|new
name|UpdateOp
argument_list|(
literal|"id"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|op
operator|.
name|notEquals
argument_list|(
literal|"p"
argument_list|,
name|r
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|op
operator|.
name|getConditions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateOp
operator|.
name|Key
name|key
init|=
name|op
operator|.
name|getConditions
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|r
argument_list|,
name|key
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p"
argument_list|,
name|key
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateOp
operator|.
name|Condition
name|c
init|=
name|op
operator|.
name|getConditions
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|UpdateOp
operator|.
name|Condition
operator|.
name|Type
operator|.
name|NOTEQUALS
argument_list|,
name|c
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v"
argument_list|,
name|c
operator|.
name|value
argument_list|)
expr_stmt|;
name|op
operator|=
operator|new
name|UpdateOp
argument_list|(
literal|"id"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|op
operator|.
name|notEquals
argument_list|(
literal|"p"
argument_list|,
name|r
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|op
operator|.
name|getConditions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|=
name|op
operator|.
name|getConditions
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|r
argument_list|,
name|key
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p"
argument_list|,
name|key
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|=
name|op
operator|.
name|getConditions
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UpdateOp
operator|.
name|Condition
operator|.
name|Type
operator|.
name|NOTEQUALS
argument_list|,
name|c
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|c
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getChanges
parameter_list|()
block|{
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
literal|"id"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|op
operator|.
name|getChanges
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|op
operator|.
name|hasChanges
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|.
name|set
argument_list|(
literal|"p"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|op
operator|.
name|getChanges
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|op
operator|.
name|hasChanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shallowCopy
parameter_list|()
block|{
name|UpdateOp
name|op1
init|=
operator|new
name|UpdateOp
argument_list|(
literal|"id"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|op1
operator|.
name|set
argument_list|(
literal|"p"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|UpdateOp
name|op2
init|=
name|op1
operator|.
name|shallowCopy
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|op2
operator|.
name|hasChanges
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|op2
operator|.
name|getChanges
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|op2
operator|.
name|getConditions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|r
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|op1
operator|.
name|containsMapEntry
argument_list|(
literal|"e"
argument_list|,
name|r
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|op2
operator|=
name|op1
operator|.
name|shallowCopy
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|op2
operator|.
name|getConditions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

