begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|scalability
operator|.
name|util
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeDefinitionTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinitionTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|OnParentVersionAction
import|;
end_import

begin_comment
comment|/**  * Helper class for creating node types.  */
end_comment

begin_class
specifier|public
class|class
name|NodeTypeUtils
block|{
comment|/**      * Creates a node type with the given properties.      *      * @param session the session      * @param name the name      * @param properties the properties      * @param superTypes the super types      * @param childrenTypes the children types      * @param baseType the base type      * @param isMixin the is mixin      * @return the string      * @throws RepositoryException the repository exception      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|String
name|createNodeType
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|name
parameter_list|,
name|String
index|[]
name|properties
parameter_list|,
name|int
name|propTypes
index|[]
parameter_list|,
name|String
index|[]
name|superTypes
parameter_list|,
name|String
index|[]
name|childrenTypes
parameter_list|,
name|String
name|baseType
parameter_list|,
name|boolean
name|isMixin
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|NodeTypeManager
name|ntm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|NodeTypeTemplate
name|ntt
init|=
name|ntm
operator|.
name|createNodeTypeTemplate
argument_list|()
decl_stmt|;
if|if
condition|(
name|baseType
operator|!=
literal|null
condition|)
block|{
name|NodeTypeDefinition
name|ntd
init|=
name|ntm
operator|.
name|getNodeType
argument_list|(
name|baseType
argument_list|)
decl_stmt|;
name|ntt
operator|=
name|ntm
operator|.
name|createNodeTypeTemplate
argument_list|(
name|ntd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|superTypes
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|superTypes
operator|.
name|length
operator|!=
literal|0
operator|)
condition|)
block|{
name|ntt
operator|.
name|setDeclaredSuperTypeNames
argument_list|(
name|superTypes
argument_list|)
expr_stmt|;
block|}
name|ntt
operator|.
name|setOrderableChildNodes
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ntt
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<
name|properties
operator|.
name|length
condition|;
name|count
operator|++
control|)
block|{
name|ntt
operator|.
name|getPropertyDefinitionTemplates
argument_list|()
operator|.
name|add
argument_list|(
name|createPropertyDefTemplate
argument_list|(
name|ntm
argument_list|,
name|properties
index|[
name|count
index|]
argument_list|,
name|propTypes
index|[
name|count
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|childrenTypes
operator|!=
literal|null
condition|)
block|{
name|ntt
operator|.
name|getNodeDefinitionTemplates
argument_list|()
operator|.
name|add
argument_list|(
name|createNodeDefTemplate
argument_list|(
name|ntm
argument_list|,
name|childrenTypes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ntt
operator|.
name|setMixin
argument_list|(
name|isMixin
argument_list|)
expr_stmt|;
name|ntm
operator|.
name|registerNodeType
argument_list|(
name|ntt
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|ntt
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**      * Creates the property definition template.      *      * @param ntm the ntm      * @param prop the prop      * @return the property definition template      * @throws RepositoryException the repository exception      */
specifier|private
specifier|static
name|PropertyDefinitionTemplate
name|createPropertyDefTemplate
parameter_list|(
name|NodeTypeManager
name|ntm
parameter_list|,
name|String
name|prop
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|PropertyDefinitionTemplate
name|pdt
init|=
name|ntm
operator|.
name|createPropertyDefinitionTemplate
argument_list|()
decl_stmt|;
name|pdt
operator|.
name|setName
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|pdt
operator|.
name|setOnParentVersion
argument_list|(
name|OnParentVersionAction
operator|.
name|IGNORE
argument_list|)
expr_stmt|;
name|pdt
operator|.
name|setRequiredType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|pdt
operator|.
name|setValueConstraints
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|pdt
operator|.
name|setDefaultValues
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|pdt
operator|.
name|setFullTextSearchable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pdt
operator|.
name|setValueConstraints
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
name|pdt
return|;
block|}
comment|/**      * Creates the node definition template.      *      * @param ntm the ntm      * @param types the types      * @return the node definition template      * @throws RepositoryException the repository exception      */
specifier|private
specifier|static
name|NodeDefinitionTemplate
name|createNodeDefTemplate
parameter_list|(
name|NodeTypeManager
name|ntm
parameter_list|,
name|String
index|[]
name|types
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|NodeDefinitionTemplate
name|ndt
init|=
name|ntm
operator|.
name|createNodeDefinitionTemplate
argument_list|()
decl_stmt|;
name|ndt
operator|.
name|setOnParentVersion
argument_list|(
name|OnParentVersionAction
operator|.
name|IGNORE
argument_list|)
expr_stmt|;
name|ndt
operator|.
name|setRequiredPrimaryTypeNames
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|ndt
operator|.
name|setDefaultPrimaryTypeName
argument_list|(
name|types
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ndt
operator|.
name|setName
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
return|return
name|ndt
return|;
block|}
block|}
end_class

end_unit

