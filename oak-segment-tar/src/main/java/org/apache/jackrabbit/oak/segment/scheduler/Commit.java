begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|scheduler
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ConflictAnnotatingRebaseDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * A {@code Commit} instance represents a set of related changes, which when  * applied to a base node state result in a new node state.  */
end_comment

begin_class
specifier|public
class|class
name|Commit
block|{
specifier|static
specifier|final
name|String
name|ROOT
init|=
literal|"root"
decl_stmt|;
specifier|private
specifier|final
name|SegmentNodeBuilder
name|changes
decl_stmt|;
specifier|private
specifier|final
name|CommitHook
name|hook
decl_stmt|;
specifier|private
specifier|final
name|CommitInfo
name|info
decl_stmt|;
specifier|public
name|Commit
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|changes
parameter_list|,
annotation|@
name|Nonnull
name|CommitHook
name|hook
parameter_list|,
annotation|@
name|Nonnull
name|CommitInfo
name|info
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|changes
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|changes
operator|instanceof
name|SegmentNodeBuilder
argument_list|)
expr_stmt|;
name|this
operator|.
name|changes
operator|=
operator|(
name|SegmentNodeBuilder
operator|)
name|changes
expr_stmt|;
name|this
operator|.
name|hook
operator|=
name|checkNotNull
argument_list|(
name|hook
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|checkNotNull
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
comment|/**      * Apply the changes represented by this commit to the passed {@code base}      * node state.      *      * @param base      *            the base node state to apply this commit to      * @return the resulting state from applying this commit to {@code base}.      * @throws CommitFailedException      *             if the commit cannot be applied to {@code base}. (e.g.      *             because of a conflict.)      */
specifier|public
name|SegmentNodeState
name|apply
parameter_list|(
name|SegmentNodeState
name|base
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|SegmentNodeBuilder
name|builder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|SegmentNodeState
operator|.
name|fastEquals
argument_list|(
name|changes
operator|.
name|getBaseState
argument_list|()
argument_list|,
name|base
operator|.
name|getChildNode
argument_list|(
name|ROOT
argument_list|)
argument_list|)
condition|)
block|{
comment|// use a shortcut when there are no external changes
name|NodeState
name|before
init|=
name|changes
operator|.
name|getBaseState
argument_list|()
decl_stmt|;
name|NodeState
name|after
init|=
name|changes
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
name|ROOT
argument_list|,
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// there were some external changes, so do the full rebase
name|ConflictAnnotatingRebaseDiff
name|diff
init|=
operator|new
name|ConflictAnnotatingRebaseDiff
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
name|changes
operator|.
name|getNodeState
argument_list|()
operator|.
name|compareAgainstBaseState
argument_list|(
name|changes
operator|.
name|getBaseState
argument_list|()
argument_list|,
name|diff
argument_list|)
expr_stmt|;
comment|// apply commit hooks on the rebased changes
name|builder
operator|.
name|setChildNode
argument_list|(
name|ROOT
argument_list|,
name|hook
operator|.
name|processCommit
argument_list|(
name|builder
operator|.
name|getBaseState
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|ROOT
argument_list|)
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|ROOT
argument_list|)
argument_list|,
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|getNodeState
argument_list|()
return|;
block|}
comment|/**      * Does housekeeping work needed after applying the commit.      * @param merged      *            the current head node state, after applying the changes in the commit.      */
specifier|public
name|void
name|applied
parameter_list|(
name|SegmentNodeState
name|merged
parameter_list|)
block|{
name|changes
operator|.
name|reset
argument_list|(
name|merged
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks if the commit contains any changes. This is a shallow check, with      * the same semantics as      * {@link SegmentNodeState#fastEquals(NodeState, NodeState)}, which cannot      * guarantee against false negatives.      *       * @return {@code true}, if the commit has changes.      */
specifier|public
name|boolean
name|hasChanges
parameter_list|()
block|{
return|return
operator|!
name|SegmentNodeState
operator|.
name|fastEquals
argument_list|(
name|changes
operator|.
name|getBaseState
argument_list|()
argument_list|,
name|changes
operator|.
name|getNodeState
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|CommitInfo
name|info
parameter_list|()
block|{
return|return
name|info
return|;
block|}
block|}
end_class

end_unit

