begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_comment
comment|/**  * Utility methods for working with binary references.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|BinaryReferences
block|{
specifier|private
name|BinaryReferences
parameter_list|()
block|{}
comment|/**      * Creates a new instance of {@link BinaryReferenceConsumer} that ignores      * every binary reference it consumes.      *      * @return A new instance of {@link BinaryReferenceConsumer}.      */
specifier|public
specifier|static
name|BinaryReferenceConsumer
name|newDiscardBinaryReferenceConsumer
parameter_list|()
block|{
return|return
operator|new
name|BinaryReferenceConsumer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|consume
parameter_list|(
name|int
name|generation
parameter_list|,
name|UUID
name|segmentId
parameter_list|,
name|String
name|binaryReference
parameter_list|)
block|{
comment|// Discard the binary reference
block|}
block|}
return|;
block|}
comment|/**      * @param blobId      * @return  A new id for a binary reference from an inlined {@code blobId}.      */
annotation|@
name|Nonnull
specifier|public
specifier|static
name|String
name|newReference
parameter_list|(
annotation|@
name|Nonnull
name|String
name|blobId
parameter_list|)
block|{
return|return
literal|"I"
operator|+
name|blobId
return|;
block|}
comment|/**      * @param blobId      * @return  A new id for a binary reference from a record id identifying a      *          string record where the {@code blobId} is stored.      */
annotation|@
name|Nonnull
specifier|public
specifier|static
name|String
name|newReference
parameter_list|(
annotation|@
name|Nonnull
name|RecordId
name|blobId
parameter_list|)
block|{
return|return
literal|"R"
operator|+
name|blobId
operator|.
name|toString10
argument_list|()
return|;
block|}
comment|/**      * @param fileStore      * @return  A new reader for binary references for the passed {@code fileStore}.      * @see #newReference(String)      * @see #newReference(RecordId)      */
annotation|@
name|Nonnull
specifier|public
specifier|static
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newReferenceReader
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|FileStore
name|fileStore
parameter_list|)
block|{
return|return
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|reference
parameter_list|)
block|{
if|if
condition|(
name|reference
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'I'
condition|)
block|{
return|return
name|reference
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|fileStore
operator|.
name|getReader
argument_list|()
operator|.
name|readString
argument_list|(
name|RecordId
operator|.
name|fromString
argument_list|(
name|fileStore
argument_list|,
name|reference
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

