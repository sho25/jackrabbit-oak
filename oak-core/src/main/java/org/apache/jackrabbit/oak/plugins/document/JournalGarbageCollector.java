begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|SETTINGS
import|;
end_import

begin_comment
comment|/**  * The JournalGarbageCollector can clean up JournalEntries that are older than a  * particular age.  *<p>  * It would typically be invoked in conjunction with the VersionGarbageCollector  * but must not be confused with that one - 'journal' refers to the separate  * collection that contains changed paths per background writes used for  * observation.  */
end_comment

begin_class
specifier|public
class|class
name|JournalGarbageCollector
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JournalGarbageCollector
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * ID of the journalGC document in the settings collection.      */
specifier|private
specifier|static
specifier|final
name|String
name|JOURNAL_GC_ID
init|=
literal|"journalGC"
decl_stmt|;
comment|/**      * Key name of the entry that contains the timestamp of the journal tail.      */
specifier|private
specifier|static
specifier|final
name|String
name|TAIL_TIMESTAMP
init|=
literal|"tailTimestamp"
decl_stmt|;
specifier|private
specifier|final
name|DocumentNodeStore
name|ns
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|lastTailTimestampRefresh
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
specifier|private
name|Revision
name|tailRevision
decl_stmt|;
specifier|public
name|JournalGarbageCollector
parameter_list|(
name|DocumentNodeStore
name|nodeStore
parameter_list|)
block|{
name|this
operator|.
name|ns
operator|=
name|nodeStore
expr_stmt|;
name|this
operator|.
name|tailRevision
operator|=
operator|new
name|Revision
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|ns
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Deletes entries in the journal that are older than the given      * maxRevisionAge.      *      * @param maxRevisionAge entries older than this age will be removed      * @param unit           the {@linkplain TimeUnit} for maxRevisionAge      * @return the number of entries that have been removed      */
specifier|public
name|int
name|gc
parameter_list|(
name|long
name|maxRevisionAge
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|DocumentStore
name|ds
init|=
name|ns
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|Revision
name|keep
init|=
name|ns
operator|.
name|getCheckpoints
argument_list|()
operator|.
name|getOldestRevisionToKeep
argument_list|()
decl_stmt|;
name|long
name|maxRevisionAgeInMillis
init|=
name|unit
operator|.
name|toMillis
argument_list|(
name|maxRevisionAge
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|ns
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|gcOlderThan
init|=
name|now
operator|-
name|maxRevisionAgeInMillis
decl_stmt|;
if|if
condition|(
name|keep
operator|!=
literal|null
operator|&&
name|keep
operator|.
name|getTimestamp
argument_list|()
operator|<
name|gcOlderThan
condition|)
block|{
name|gcOlderThan
operator|=
name|keep
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"gc: Checkpoint {} is older than maxRevisionAge: {} min"
argument_list|,
name|keep
argument_list|,
name|unit
operator|.
name|toMinutes
argument_list|(
name|maxRevisionAge
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"gc: Journal garbage collection starts with maxAge: {} min."
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMinutes
argument_list|(
name|maxRevisionAgeInMillis
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Stopwatch
name|sw
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
comment|// update the tail timestamp in the journalGC document
comment|// of the settings collection
name|updateTailTimestamp
argument_list|(
name|gcOlderThan
argument_list|)
expr_stmt|;
name|int
name|numDeleted
init|=
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|JOURNAL
argument_list|,
name|JournalEntry
operator|.
name|MODIFIED
argument_list|,
literal|0
argument_list|,
name|gcOlderThan
argument_list|)
decl_stmt|;
name|sw
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|numDeleted
operator|>
literal|0
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"gc: Journal garbage collection took {}, deleted {} entries that were older than {} min."
argument_list|,
name|sw
argument_list|,
name|numDeleted
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMinutes
argument_list|(
name|now
operator|-
name|gcOlderThan
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|numDeleted
return|;
block|}
specifier|private
name|void
name|updateTailTimestamp
parameter_list|(
name|long
name|gcOlderThan
parameter_list|)
block|{
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|JOURNAL_GC_ID
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|op
operator|.
name|max
argument_list|(
name|TAIL_TIMESTAMP
argument_list|,
name|gcOlderThan
argument_list|)
expr_stmt|;
name|ns
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|createOrUpdate
argument_list|(
name|SETTINGS
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Revision
name|getTailRevision
parameter_list|()
block|{
name|refreshTailRevisionIfNecessary
argument_list|()
expr_stmt|;
return|return
name|tailRevision
return|;
block|}
specifier|private
name|void
name|refreshTailRevisionIfNecessary
parameter_list|()
block|{
comment|// refresh once a minute
name|long
name|now
init|=
name|ns
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastTailTimestampRefresh
operator|+
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
operator|>
name|now
condition|)
block|{
return|return;
block|}
name|lastTailTimestampRefresh
operator|=
name|now
expr_stmt|;
name|Document
name|doc
init|=
name|ns
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|find
argument_list|(
name|SETTINGS
argument_list|,
name|JOURNAL_GC_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
comment|// no gc yet
return|return;
block|}
name|Long
name|ts
init|=
name|Utils
operator|.
name|asLong
argument_list|(
operator|(
name|Number
operator|)
name|doc
operator|.
name|get
argument_list|(
name|TAIL_TIMESTAMP
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|!=
literal|null
condition|)
block|{
name|tailRevision
operator|=
name|Utils
operator|.
name|max
argument_list|(
name|tailRevision
argument_list|,
operator|new
name|Revision
argument_list|(
name|ts
argument_list|,
literal|0
argument_list|,
name|ns
operator|.
name|getClusterId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|asKeys
parameter_list|(
name|List
argument_list|<
name|JournalEntry
argument_list|>
name|deletionBatch
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|deletionBatch
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|JournalEntry
name|e
range|:
name|deletionBatch
control|)
block|{
name|keys
operator|.
name|add
argument_list|(
name|e
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|keys
return|;
block|}
block|}
end_class

end_unit

