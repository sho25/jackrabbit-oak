begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_comment
comment|/**  * This commit hook implementation validates the changes to be committed  * against all {@link Validator}s provided by the {@link ValidatorProvider}  * passed to the class' constructor.  */
end_comment

begin_class
specifier|public
class|class
name|ValidatingCommitHook
implements|implements
name|CommitHook
block|{
specifier|private
specifier|final
name|ValidatorProvider
name|validatorProvider
decl_stmt|;
comment|/**      * Create a new commit hook which validates the commit against all      * {@link Validator}s provided by {@code validatorProvider}.      * @param validatorProvider  validator provider      */
specifier|public
name|ValidatingCommitHook
parameter_list|(
name|ValidatorProvider
name|validatorProvider
parameter_list|)
block|{
name|this
operator|.
name|validatorProvider
operator|=
name|validatorProvider
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|beforeCommit
parameter_list|(
name|NodeStore
name|store
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Validator
name|rootValidator
init|=
name|validatorProvider
operator|.
name|getRootValidator
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
decl_stmt|;
name|validate
argument_list|(
name|store
argument_list|,
name|before
argument_list|,
name|after
argument_list|,
name|rootValidator
argument_list|)
expr_stmt|;
return|return
name|after
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterCommit
parameter_list|(
name|NodeStore
name|store
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
comment|// nothing to do here
block|}
comment|//------------------------------------------------------------< private>---
comment|/**      * Checked exceptions don't compose. So we need to hack around. See      *<ul>      *<li>http://markmail.org/message/ak67n5k7mr3vqylm</li>      *<li>http://markmail.org/message/7l26cofhyr3sk5pr</li>      *<li>http://markmail.org/message/nw7mg4cmgpeqq4i5</li>      *<li>http://markmail.org/message/bhocbruikljpuhu6</li>      *</ul>      */
specifier|private
specifier|static
class|class
name|BreakOutException
extends|extends
name|RuntimeException
block|{
specifier|public
name|BreakOutException
parameter_list|(
name|CommitFailedException
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|validate
parameter_list|(
specifier|final
name|NodeStore
name|store
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
specifier|final
name|Validator
name|validator
parameter_list|)
throws|throws
name|CommitFailedException
block|{
try|try
block|{
name|store
operator|.
name|compare
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
operator|new
name|NodeStateDiff
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
try|try
block|{
name|validator
operator|.
name|propertyAdded
argument_list|(
name|after
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BreakOutException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
try|try
block|{
name|validator
operator|.
name|propertyChanged
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BreakOutException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
try|try
block|{
name|validator
operator|.
name|propertyDeleted
argument_list|(
name|before
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BreakOutException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
try|try
block|{
name|Validator
name|childValidator
init|=
name|validator
operator|.
name|childNodeAdded
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
decl_stmt|;
if|if
condition|(
name|childValidator
operator|!=
literal|null
condition|)
block|{
name|validate
argument_list|(
name|after
argument_list|,
name|validator
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BreakOutException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
try|try
block|{
name|Validator
name|childValidator
init|=
name|validator
operator|.
name|childNodeChanged
argument_list|(
name|name
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
decl_stmt|;
if|if
condition|(
name|childValidator
operator|!=
literal|null
condition|)
block|{
name|validate
argument_list|(
name|store
argument_list|,
name|before
argument_list|,
name|after
argument_list|,
name|childValidator
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BreakOutException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
try|try
block|{
name|validator
operator|.
name|childNodeDeleted
argument_list|(
name|name
argument_list|,
name|before
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BreakOutException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BreakOutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|validate
parameter_list|(
name|NodeState
name|nodeState
parameter_list|,
name|Validator
name|validator
parameter_list|)
throws|throws
name|CommitFailedException
block|{
for|for
control|(
name|PropertyState
name|property
range|:
name|nodeState
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|validator
operator|.
name|propertyAdded
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ChildNodeEntry
name|child
range|:
name|nodeState
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|Validator
name|childValidator
init|=
name|validator
operator|.
name|childNodeAdded
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|,
name|child
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|validate
argument_list|(
name|child
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|childValidator
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

