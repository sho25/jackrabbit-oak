begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|nodetype
operator|.
name|NodeTypeIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|AbstractQueryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|OptionIndexTagTests
extends|extends
name|AbstractQueryTest
block|{
name|Whiteboard
name|wb
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|()
block|{
name|Oak
name|oak
init|=
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|NodeTypeIndexProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|PropertyIndexProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|oak
operator|.
name|createContentRepository
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|optionIndexTag
parameter_list|()
throws|throws
name|Exception
block|{
comment|// disable the counter index, so that traversal is normally not used
comment|// (only used if there is no index)
name|Tree
name|index
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/oak:index/counter"
argument_list|)
decl_stmt|;
name|index
operator|.
name|remove
argument_list|()
expr_stmt|;
name|index
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/oak:index/uuid"
argument_list|)
expr_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
literal|"tags"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|statement
decl_stmt|,
name|result
decl_stmt|;
name|statement
operator|=
literal|"explain select * from [mix:versionable] where [jcr:uuid] = 1 option(index tag x)"
expr_stmt|;
name|result
operator|=
name|executeQuery
argument_list|(
name|statement
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|result
argument_list|,
name|result
operator|.
name|indexOf
argument_list|(
literal|"/* property uuid"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|statement
operator|=
literal|"explain select * from [mix:versionable] where [jcr:uuid] = 1 option(index tag x, index name uuid)"
expr_stmt|;
name|result
operator|=
name|executeQuery
argument_list|(
name|statement
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|result
argument_list|,
name|result
operator|.
name|indexOf
argument_list|(
literal|"/* property uuid"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|statement
operator|=
literal|"explain select * from [mix:versionable] where [jcr:uuid] = 1 option(index tag y, index name uuid)"
expr_stmt|;
name|result
operator|=
name|executeQuery
argument_list|(
name|statement
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|result
argument_list|,
name|result
operator|.
name|indexOf
argument_list|(
literal|"/* property uuid"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|statement
operator|=
literal|"explain select * from [mix:versionable] where [jcr:uuid] = 1 option(index tag x, index name nodetype)"
expr_stmt|;
name|result
operator|=
name|executeQuery
argument_list|(
name|statement
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|result
argument_list|,
name|result
operator|.
name|indexOf
argument_list|(
literal|"/* property uuid"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|statement
operator|=
literal|"explain select * from [mix:versionable] where [jcr:uuid] = 1 option(index tag y, index name nodetype)"
expr_stmt|;
name|result
operator|=
name|executeQuery
argument_list|(
name|statement
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|result
argument_list|,
name|result
operator|.
name|indexOf
argument_list|(
literal|"/* nodeType "
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|statement
operator|=
literal|"explain select * from [mix:versionable] where [jcr:uuid] = 1 option(index name nodetype)"
expr_stmt|;
name|result
operator|=
name|executeQuery
argument_list|(
name|statement
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|result
argument_list|,
name|result
operator|.
name|indexOf
argument_list|(
literal|"/* nodeType "
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|statement
operator|=
literal|"explain select * from [mix:versionable] where [jcr:uuid] = 1 option(index tag y)"
expr_stmt|;
name|result
operator|=
name|executeQuery
argument_list|(
name|statement
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|result
argument_list|,
name|result
operator|.
name|indexOf
argument_list|(
literal|"/* traverse "
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|optionIndexName
parameter_list|()
throws|throws
name|Exception
block|{
comment|// disable the counter index, so that traversal is never used
name|Tree
name|index
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/oak:index/counter"
argument_list|)
decl_stmt|;
name|index
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|statement
decl_stmt|,
name|result
decl_stmt|;
name|statement
operator|=
literal|"explain select * from [mix:versionable] where [jcr:uuid] = 1 option(index name uuid)"
expr_stmt|;
name|result
operator|=
name|executeQuery
argument_list|(
name|statement
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|result
argument_list|,
name|result
operator|.
name|indexOf
argument_list|(
literal|"/* property uuid"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|statement
operator|=
literal|"explain select * from [mix:versionable] where [jcr:uuid] = 1 option(index name nodetype)"
expr_stmt|;
name|result
operator|=
name|executeQuery
argument_list|(
name|statement
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|result
argument_list|,
name|result
operator|.
name|indexOf
argument_list|(
literal|"/* nodeType "
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

