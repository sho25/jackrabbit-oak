begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|AbstractExternalAuthTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalUser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncedIdentity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|TestIdentityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|basic
operator|.
name|DefaultSyncConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|basic
operator|.
name|DefaultSyncContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|TestIdentityProvider
operator|.
name|ID_SECOND_USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
operator|.
name|ExternalIdentityConstants
operator|.
name|REP_EXTERNAL_PRINCIPAL_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|DynamicSyncContextTest
extends|extends
name|AbstractExternalAuthTest
block|{
specifier|private
name|Root
name|r
decl_stmt|;
specifier|private
name|UserManager
name|userManager
decl_stmt|;
specifier|private
name|ValueFactory
name|valueFactory
decl_stmt|;
specifier|private
name|DynamicSyncContext
name|syncContext
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|r
operator|=
name|getSystemRoot
argument_list|()
expr_stmt|;
name|userManager
operator|=
name|getUserManager
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|valueFactory
operator|=
name|getValueFactory
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|syncContext
operator|=
operator|new
name|DynamicSyncContext
argument_list|(
name|syncConfig
argument_list|,
name|idp
argument_list|,
name|userManager
argument_list|,
name|valueFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|syncContext
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|NotNull
specifier|protected
name|DefaultSyncConfig
name|createSyncConfig
parameter_list|()
block|{
name|DefaultSyncConfig
name|sc
init|=
name|super
operator|.
name|createSyncConfig
argument_list|()
decl_stmt|;
name|sc
operator|.
name|user
argument_list|()
operator|.
name|setDynamicMembership
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|sc
return|;
block|}
specifier|protected
name|void
name|sync
parameter_list|(
annotation|@
name|NotNull
name|ExternalIdentity
name|externalIdentity
parameter_list|,
annotation|@
name|NotNull
name|SyncResult
operator|.
name|Status
name|expectedStatus
parameter_list|)
throws|throws
name|Exception
block|{
name|SyncResult
name|result
init|=
name|syncContext
operator|.
name|sync
argument_list|(
name|externalIdentity
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|expectedStatus
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|assertDynamicMembership
parameter_list|(
annotation|@
name|NotNull
name|ExternalIdentity
name|externalIdentity
parameter_list|,
name|long
name|depth
parameter_list|)
throws|throws
name|Exception
block|{
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalIdentity
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|assertDynamicMembership
argument_list|(
name|a
argument_list|,
name|externalIdentity
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertDynamicMembership
parameter_list|(
annotation|@
name|NotNull
name|Authorizable
name|a
parameter_list|,
annotation|@
name|NotNull
name|ExternalIdentity
name|externalIdentity
parameter_list|,
name|long
name|depth
parameter_list|)
throws|throws
name|Exception
block|{
name|Value
index|[]
name|vs
init|=
name|a
operator|.
name|getProperty
argument_list|(
name|REP_EXTERNAL_PRINCIPAL_NAMES
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|pNames
init|=
name|Iterables
operator|.
name|transform
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|vs
argument_list|)
argument_list|,
name|input
lambda|->
block|{
try|try
block|{
return|return
name|input
operator|.
name|getString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|collectGroupPrincipals
argument_list|(
name|expected
argument_list|,
name|externalIdentity
operator|.
name|getDeclaredGroups
argument_list|()
argument_list|,
name|depth
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|pNames
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|collectGroupPrincipals
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|pNames
parameter_list|,
annotation|@
name|NotNull
name|Iterable
argument_list|<
name|ExternalIdentityRef
argument_list|>
name|declaredGroups
parameter_list|,
name|long
name|depth
parameter_list|)
throws|throws
name|ExternalIdentityException
block|{
if|if
condition|(
name|depth
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|ExternalIdentityRef
name|ref
range|:
name|declaredGroups
control|)
block|{
name|ExternalIdentity
name|ei
init|=
name|idp
operator|.
name|getIdentity
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|pNames
operator|.
name|add
argument_list|(
name|ei
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
expr_stmt|;
name|collectGroupPrincipals
argument_list|(
name|pNames
argument_list|,
name|ei
operator|.
name|getDeclaredGroups
argument_list|()
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assertSyncedMembership
parameter_list|(
annotation|@
name|NotNull
name|UserManager
name|userManager
parameter_list|,
annotation|@
name|NotNull
name|Authorizable
name|a
parameter_list|,
annotation|@
name|NotNull
name|ExternalIdentity
name|externalIdentity
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|ExternalIdentityRef
name|ref
range|:
name|externalIdentity
operator|.
name|getDeclaredGroups
argument_list|()
control|)
block|{
name|Group
name|gr
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|ref
operator|.
name|getId
argument_list|()
argument_list|,
name|Group
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|gr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|gr
operator|.
name|isMember
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSyncExternalIdentity
parameter_list|()
throws|throws
name|Exception
block|{
name|syncContext
operator|.
name|sync
argument_list|(
operator|new
name|TestIdentityProvider
operator|.
name|TestIdentity
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncExternalUser
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|USER_ID
argument_list|)
decl_stmt|;
name|sync
argument_list|(
name|externalUser
argument_list|,
name|SyncResult
operator|.
name|Status
operator|.
name|ADD
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|USER_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncExternalUserDepth0
parameter_list|()
throws|throws
name|Exception
block|{
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setMembershipNestingDepth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|USER_ID
argument_list|)
decl_stmt|;
name|sync
argument_list|(
name|externalUser
argument_list|,
name|SyncResult
operator|.
name|Status
operator|.
name|ADD
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|r
operator|.
name|getTree
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|USER_ID
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|PropertyState
name|extPrincipalNames
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|REP_EXTERNAL_PRINCIPAL_NAMES
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|extPrincipalNames
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|extPrincipalNames
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncExternalUserDepth1
parameter_list|()
throws|throws
name|Exception
block|{
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setMembershipNestingDepth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|USER_ID
argument_list|)
decl_stmt|;
name|sync
argument_list|(
name|externalUser
argument_list|,
name|SyncResult
operator|.
name|Status
operator|.
name|ADD
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|r
operator|.
name|getTree
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|USER_ID
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|PropertyState
name|extPrincipalNames
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|REP_EXTERNAL_PRINCIPAL_NAMES
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|extPrincipalNames
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|pNames
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|extPrincipalNames
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|ExternalIdentityRef
name|ref
range|:
name|externalUser
operator|.
name|getDeclaredGroups
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|pNames
operator|.
name|remove
argument_list|(
name|idp
operator|.
name|getIdentity
argument_list|(
name|ref
argument_list|)
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|pNames
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncExternalUserDepthInfinite
parameter_list|()
throws|throws
name|Exception
block|{
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setMembershipNestingDepth
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|USER_ID
argument_list|)
decl_stmt|;
name|sync
argument_list|(
name|externalUser
argument_list|,
name|SyncResult
operator|.
name|Status
operator|.
name|ADD
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|r
operator|.
name|getTree
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|USER_ID
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|PropertyState
name|extPrincipalNames
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|REP_EXTERNAL_PRINCIPAL_NAMES
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|extPrincipalNames
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|pNames
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|extPrincipalNames
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|collectGroupPrincipals
argument_list|(
name|expected
argument_list|,
name|externalUser
operator|.
name|getDeclaredGroups
argument_list|()
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|pNames
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncExternalUserExistingGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setMembershipNestingDepth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|USER_ID
argument_list|)
decl_stmt|;
name|DefaultSyncContext
name|ctx
init|=
operator|new
name|DefaultSyncContext
argument_list|(
name|syncConfig
argument_list|,
name|idp
argument_list|,
name|userManager
argument_list|,
name|valueFactory
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|sync
argument_list|(
name|externalUser
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|USER_ID
argument_list|)
decl_stmt|;
name|assertSyncedMembership
argument_list|(
name|userManager
argument_list|,
name|a
argument_list|,
name|externalUser
argument_list|)
expr_stmt|;
name|syncContext
operator|.
name|setForceUserSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setMembershipExpirationTime
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|syncContext
operator|.
name|sync
argument_list|(
name|externalUser
argument_list|)
expr_stmt|;
name|Tree
name|t
init|=
name|r
operator|.
name|getTree
argument_list|(
name|a
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|t
operator|.
name|hasProperty
argument_list|(
name|REP_EXTERNAL_PRINCIPAL_NAMES
argument_list|)
argument_list|)
expr_stmt|;
name|assertSyncedMembership
argument_list|(
name|userManager
argument_list|,
name|a
argument_list|,
name|externalUser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncExternalGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalGroup
name|gr
init|=
name|idp
operator|.
name|listGroups
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|syncContext
operator|.
name|sync
argument_list|(
name|gr
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|gr
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|hasPendingChanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncExternalGroupVerifyStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalGroup
name|gr
init|=
name|idp
operator|.
name|listGroups
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|SyncResult
name|result
init|=
name|syncContext
operator|.
name|sync
argument_list|(
name|gr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|NOP
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncContext
operator|.
name|sync
argument_list|(
name|gr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|NOP
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|syncContext
operator|.
name|setForceGroupSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncContext
operator|.
name|sync
argument_list|(
name|gr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|NOP
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncExternalGroupExisting
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create an external external group that already has been synced into the repo
name|ExternalGroup
name|externalGroup
init|=
name|idp
operator|.
name|listGroups
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|SyncContext
name|ctx
init|=
operator|new
name|DefaultSyncContext
argument_list|(
name|syncConfig
argument_list|,
name|idp
argument_list|,
name|userManager
argument_list|,
name|valueFactory
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|sync
argument_list|(
name|externalGroup
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// synchronizing using DynamicSyncContext must update the existing group
name|syncContext
operator|.
name|setForceGroupSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SyncResult
name|result
init|=
name|syncContext
operator|.
name|sync
argument_list|(
name|externalGroup
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|UPDATE
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncForeignExternalGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalGroup
name|foreign
init|=
operator|new
name|TestIdentityProvider
operator|.
name|ForeignExternalGroup
argument_list|()
decl_stmt|;
name|SyncResult
name|res
init|=
name|syncContext
operator|.
name|sync
argument_list|(
name|foreign
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|FOREIGN
argument_list|,
name|res
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// expect {@code SyncedIdentity} in accordance with {@code sync(String userId)},
comment|// where the authorizable is found to be linked to a different IDP.
name|SyncedIdentity
name|si
init|=
name|res
operator|.
name|getIdentity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|foreign
operator|.
name|getId
argument_list|()
argument_list|,
name|si
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ExternalIdentityRef
name|ref
init|=
name|si
operator|.
name|getExternalIdRef
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|foreign
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|si
operator|.
name|isGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|si
operator|.
name|lastSynced
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|hasPendingChanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncUserByIdUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentity
name|externalId
init|=
name|idp
operator|.
name|listUsers
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|createUser
argument_list|(
name|externalId
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
name|DefaultSyncContext
operator|.
name|REP_EXTERNAL_ID
argument_list|,
name|valueFactory
operator|.
name|createValue
argument_list|(
name|externalId
operator|.
name|getExternalId
argument_list|()
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|syncContext
operator|.
name|setForceUserSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SyncResult
name|result
init|=
name|syncContext
operator|.
name|sync
argument_list|(
name|externalId
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|UPDATE
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|t
init|=
name|r
operator|.
name|getTree
argument_list|(
name|a
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|hasProperty
argument_list|(
name|REP_EXTERNAL_PRINCIPAL_NAMES
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncUserIdExistingGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|USER_ID
argument_list|)
decl_stmt|;
name|DefaultSyncContext
name|ctx
init|=
operator|new
name|DefaultSyncContext
argument_list|(
name|syncConfig
argument_list|,
name|idp
argument_list|,
name|userManager
argument_list|,
name|valueFactory
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|sync
argument_list|(
name|externalUser
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
name|Authorizable
name|user
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ExternalIdentityRef
name|ref
range|:
name|externalUser
operator|.
name|getDeclaredGroups
argument_list|()
control|)
block|{
name|Group
name|gr
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|ref
operator|.
name|getId
argument_list|()
argument_list|,
name|Group
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|gr
operator|.
name|isMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|syncContext
operator|.
name|setForceUserSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|syncContext
operator|.
name|sync
argument_list|(
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|USER_ID
argument_list|)
decl_stmt|;
name|Tree
name|t
init|=
name|r
operator|.
name|getTree
argument_list|(
name|a
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|t
operator|.
name|hasProperty
argument_list|(
name|REP_EXTERNAL_PRINCIPAL_NAMES
argument_list|)
argument_list|)
expr_stmt|;
name|assertSyncedMembership
argument_list|(
name|userManager
argument_list|,
name|a
argument_list|,
name|externalUser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncMembershipWithNesting
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|nesting
init|=
literal|1
decl_stmt|;
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setMembershipNestingDepth
argument_list|(
name|nesting
argument_list|)
expr_stmt|;
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|USER_ID
argument_list|)
decl_stmt|;
name|sync
argument_list|(
name|externalUser
argument_list|,
name|SyncResult
operator|.
name|Status
operator|.
name|ADD
argument_list|)
expr_stmt|;
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertDynamicMembership
argument_list|(
name|externalUser
argument_list|,
name|nesting
argument_list|)
expr_stmt|;
comment|// verify that the membership is always reflected in the rep:externalPrincipalNames property
comment|// 1. membership nesting  = -1
name|nesting
operator|=
operator|-
literal|1
expr_stmt|;
name|syncContext
operator|.
name|syncMembership
argument_list|(
name|externalUser
argument_list|,
name|a
argument_list|,
name|nesting
argument_list|)
expr_stmt|;
name|assertDynamicMembership
argument_list|(
name|a
argument_list|,
name|externalUser
argument_list|,
name|nesting
argument_list|)
expr_stmt|;
comment|// 2. membership nesting is> 0
name|nesting
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
name|syncContext
operator|.
name|syncMembership
argument_list|(
name|externalUser
argument_list|,
name|a
argument_list|,
name|nesting
argument_list|)
expr_stmt|;
name|assertDynamicMembership
argument_list|(
name|a
argument_list|,
name|externalUser
argument_list|,
name|nesting
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncMembershipWithChangedGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|nesting
init|=
literal|1
decl_stmt|;
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setMembershipNestingDepth
argument_list|(
name|nesting
argument_list|)
expr_stmt|;
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|USER_ID
argument_list|)
decl_stmt|;
name|sync
argument_list|(
name|externalUser
argument_list|,
name|SyncResult
operator|.
name|Status
operator|.
name|ADD
argument_list|)
expr_stmt|;
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertDynamicMembership
argument_list|(
name|a
argument_list|,
name|externalUser
argument_list|,
name|nesting
argument_list|)
expr_stmt|;
comment|// sync user with modified membership => must be reflected
comment|// 1. empty set of declared groups
name|ExternalUser
name|mod
init|=
operator|new
name|TestUserWithGroupRefs
argument_list|(
name|externalUser
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|ExternalIdentityRef
operator|>
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|syncContext
operator|.
name|syncMembership
argument_list|(
name|mod
argument_list|,
name|a
argument_list|,
name|nesting
argument_list|)
expr_stmt|;
name|assertDynamicMembership
argument_list|(
name|a
argument_list|,
name|mod
argument_list|,
name|nesting
argument_list|)
expr_stmt|;
comment|// 2. set with different groups that defined on IDP
name|mod
operator|=
operator|new
name|TestUserWithGroupRefs
argument_list|(
name|externalUser
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|ExternalIdentityRef
operator|>
name|of
argument_list|(
name|idp
operator|.
name|getGroup
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|idp
operator|.
name|getGroup
argument_list|(
literal|"aa"
argument_list|)
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|idp
operator|.
name|getGroup
argument_list|(
literal|"secondGroup"
argument_list|)
operator|.
name|getExternalId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|syncContext
operator|.
name|syncMembership
argument_list|(
name|mod
argument_list|,
name|a
argument_list|,
name|nesting
argument_list|)
expr_stmt|;
name|assertDynamicMembership
argument_list|(
name|a
argument_list|,
name|mod
argument_list|,
name|nesting
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncMembershipWithChangedExistingGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|nesting
init|=
literal|1
decl_stmt|;
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setMembershipNestingDepth
argument_list|(
name|nesting
argument_list|)
expr_stmt|;
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|USER_ID
argument_list|)
decl_stmt|;
name|DefaultSyncContext
name|ctx
init|=
operator|new
name|DefaultSyncContext
argument_list|(
name|syncConfig
argument_list|,
name|idp
argument_list|,
name|userManager
argument_list|,
name|valueFactory
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|sync
argument_list|(
name|externalUser
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertSyncedMembership
argument_list|(
name|userManager
argument_list|,
name|a
argument_list|,
name|externalUser
argument_list|)
expr_stmt|;
comment|// sync user with modified membership => must be reflected
comment|// 1. empty set of declared groups
name|ExternalUser
name|mod
init|=
operator|new
name|TestUserWithGroupRefs
argument_list|(
name|externalUser
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|ExternalIdentityRef
operator|>
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|syncContext
operator|.
name|syncMembership
argument_list|(
name|mod
argument_list|,
name|a
argument_list|,
name|nesting
argument_list|)
expr_stmt|;
name|assertSyncedMembership
argument_list|(
name|userManager
argument_list|,
name|a
argument_list|,
name|mod
argument_list|)
expr_stmt|;
comment|// 2. set with different groups that defined on IDP
name|mod
operator|=
operator|new
name|TestUserWithGroupRefs
argument_list|(
name|externalUser
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|ExternalIdentityRef
operator|>
name|of
argument_list|(
name|idp
operator|.
name|getGroup
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|idp
operator|.
name|getGroup
argument_list|(
literal|"aa"
argument_list|)
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|idp
operator|.
name|getGroup
argument_list|(
literal|"secondGroup"
argument_list|)
operator|.
name|getExternalId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|syncContext
operator|.
name|syncMembership
argument_list|(
name|mod
argument_list|,
name|a
argument_list|,
name|nesting
argument_list|)
expr_stmt|;
name|assertSyncedMembership
argument_list|(
name|userManager
argument_list|,
name|a
argument_list|,
name|mod
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncMembershipForExternalGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalGroup
name|externalGroup
init|=
name|idp
operator|.
name|getGroup
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
comment|// a group that has declaredGroups
name|SyncContext
name|ctx
init|=
operator|new
name|DefaultSyncContext
argument_list|(
name|syncConfig
argument_list|,
name|idp
argument_list|,
name|userManager
argument_list|,
name|valueFactory
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|sync
argument_list|(
name|externalGroup
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Authorizable
name|gr
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalGroup
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|syncContext
operator|.
name|syncMembership
argument_list|(
name|externalGroup
argument_list|,
name|gr
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|gr
operator|.
name|hasProperty
argument_list|(
name|REP_EXTERNAL_PRINCIPAL_NAMES
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|hasPendingChanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncMembershipWithForeignGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|TestIdentityProvider
operator|.
name|TestUser
name|testuser
init|=
operator|(
name|TestIdentityProvider
operator|.
name|TestUser
operator|)
name|idp
operator|.
name|getUser
argument_list|(
name|ID_TEST_USER
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ExternalIdentityRef
argument_list|>
name|sameIdpGroups
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|testuser
operator|.
name|getDeclaredGroups
argument_list|()
argument_list|)
decl_stmt|;
name|TestIdentityProvider
operator|.
name|ForeignExternalGroup
name|foreignGroup
init|=
operator|new
name|TestIdentityProvider
operator|.
name|ForeignExternalGroup
argument_list|()
decl_stmt|;
name|testuser
operator|.
name|withGroups
argument_list|(
name|foreignGroup
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|sameIdpGroups
argument_list|,
name|testuser
operator|.
name|getDeclaredGroups
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sync
argument_list|(
name|testuser
argument_list|,
name|SyncResult
operator|.
name|Status
operator|.
name|ADD
argument_list|)
expr_stmt|;
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|ID_TEST_USER
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|hasProperty
argument_list|(
name|REP_EXTERNAL_PRINCIPAL_NAMES
argument_list|)
argument_list|)
expr_stmt|;
name|Value
index|[]
name|extPrincipalNames
init|=
name|a
operator|.
name|getProperty
argument_list|(
name|REP_EXTERNAL_PRINCIPAL_NAMES
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Iterables
operator|.
name|size
argument_list|(
name|sameIdpGroups
argument_list|)
argument_list|,
name|extPrincipalNames
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Value
name|v
range|:
name|extPrincipalNames
control|)
block|{
name|assertNotEquals
argument_list|(
name|foreignGroup
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|v
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncMembershipWithUserRef
parameter_list|()
throws|throws
name|Exception
block|{
name|TestIdentityProvider
operator|.
name|TestUser
name|testuser
init|=
operator|(
name|TestIdentityProvider
operator|.
name|TestUser
operator|)
name|idp
operator|.
name|getUser
argument_list|(
name|ID_TEST_USER
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ExternalIdentityRef
argument_list|>
name|groupRefs
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|testuser
operator|.
name|getDeclaredGroups
argument_list|()
argument_list|)
decl_stmt|;
name|ExternalUser
name|second
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|ID_SECOND_USER
argument_list|)
decl_stmt|;
name|testuser
operator|.
name|withGroups
argument_list|(
name|second
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|groupRefs
argument_list|,
name|testuser
operator|.
name|getDeclaredGroups
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sync
argument_list|(
name|testuser
argument_list|,
name|SyncResult
operator|.
name|Status
operator|.
name|ADD
argument_list|)
expr_stmt|;
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|ID_TEST_USER
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|hasProperty
argument_list|(
name|REP_EXTERNAL_PRINCIPAL_NAMES
argument_list|)
argument_list|)
expr_stmt|;
name|Value
index|[]
name|extPrincipalNames
init|=
name|a
operator|.
name|getProperty
argument_list|(
name|REP_EXTERNAL_PRINCIPAL_NAMES
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Iterables
operator|.
name|size
argument_list|(
name|groupRefs
argument_list|)
argument_list|,
name|extPrincipalNames
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Value
name|v
range|:
name|extPrincipalNames
control|)
block|{
name|assertNotEquals
argument_list|(
name|second
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|v
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAutoMembership
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|gr
init|=
name|userManager
operator|.
name|createGroup
argument_list|(
literal|"group"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|commit
argument_list|()
expr_stmt|;
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setAutoMembership
argument_list|(
name|gr
operator|.
name|getID
argument_list|()
argument_list|,
literal|"non-existing-group"
argument_list|)
expr_stmt|;
name|SyncResult
name|result
init|=
name|syncContext
operator|.
name|sync
argument_list|(
name|idp
operator|.
name|getUser
argument_list|(
name|USER_ID
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|ADD
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|User
name|u
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|USER_ID
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|gr
operator|.
name|isDeclaredMember
argument_list|(
name|u
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|gr
operator|.
name|isMember
argument_list|(
name|u
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|TestUserWithGroupRefs
extends|extends
name|TestIdentityProvider
operator|.
name|TestIdentity
implements|implements
name|ExternalUser
block|{
specifier|private
name|Iterable
argument_list|<
name|ExternalIdentityRef
argument_list|>
name|declaredGroupRefs
decl_stmt|;
specifier|private
name|TestUserWithGroupRefs
parameter_list|(
annotation|@
name|NotNull
name|ExternalUser
name|base
parameter_list|,
annotation|@
name|NotNull
name|Iterable
argument_list|<
name|ExternalIdentityRef
argument_list|>
name|declaredGroupRefs
parameter_list|)
block|{
name|super
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|this
operator|.
name|declaredGroupRefs
operator|=
name|declaredGroupRefs
expr_stmt|;
block|}
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|ExternalIdentityRef
argument_list|>
name|getDeclaredGroups
parameter_list|()
block|{
return|return
name|declaredGroupRefs
return|;
block|}
block|}
block|}
end_class

end_unit

