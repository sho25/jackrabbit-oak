begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBitsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AbstractAccessControlTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_comment
comment|/**  * PermissionHookTest... TODO  */
end_comment

begin_class
specifier|public
class|class
name|PermissionHookTest
extends|extends
name|AbstractAccessControlTest
implements|implements
name|AccessControlConstants
implements|,
name|PermissionConstants
block|{
specifier|private
name|String
name|testPath
init|=
literal|"/testPath"
decl_stmt|;
specifier|private
name|String
name|testPrincipalName
init|=
literal|"admin"
decl_stmt|;
comment|// TODO
specifier|private
name|PrivilegeBitsProvider
name|bitsProvider
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|NodeUtil
name|rootNode
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|namePathMapper
argument_list|)
decl_stmt|;
name|rootNode
operator|.
name|addChild
argument_list|(
literal|"testPath"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|testPath
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
name|testPrincipalName
argument_list|)
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|bitsProvider
operator|=
operator|new
name|PrivilegeBitsProvider
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|test
operator|!=
literal|null
condition|)
block|{
name|test
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Tree
name|getPrincipalRoot
parameter_list|(
name|String
name|principalName
parameter_list|)
block|{
return|return
name|root
operator|.
name|getTree
argument_list|(
name|PERMISSIONS_STORE_PATH
argument_list|)
operator|.
name|getChild
argument_list|(
name|adminSession
operator|.
name|getWorkspaceName
argument_list|()
argument_list|)
operator|.
name|getChild
argument_list|(
name|principalName
argument_list|)
return|;
block|}
specifier|private
name|Tree
name|getEntry
parameter_list|(
name|String
name|principalName
parameter_list|,
name|String
name|accessControlledPath
parameter_list|)
throws|throws
name|Exception
block|{
name|Tree
name|principalRoot
init|=
name|getPrincipalRoot
argument_list|(
name|principalName
argument_list|)
decl_stmt|;
for|for
control|(
name|Tree
name|entry
range|:
name|principalRoot
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|accessControlledPath
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
block|}
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"no such entry"
argument_list|)
throw|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDuplicateAce
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add duplicate policy on OAK-API
name|NodeUtil
name|policy
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|testPath
operator|+
literal|"/rep:policy"
argument_list|)
argument_list|)
decl_stmt|;
name|NodeUtil
name|ace
init|=
name|policy
operator|.
name|addChild
argument_list|(
literal|"duplicateAce"
argument_list|,
name|NT_REP_GRANT_ACE
argument_list|)
decl_stmt|;
name|ace
operator|.
name|setString
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|,
name|testPrincipalName
argument_list|)
expr_stmt|;
name|ace
operator|.
name|setStrings
argument_list|(
name|REP_PRIVILEGES
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|principalRoot
init|=
name|getPrincipalRoot
argument_list|(
name|testPrincipalName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|principalRoot
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|index
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|Tree
name|entry
range|:
name|principalRoot
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|,
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|entry
operator|.
name|getProperty
argument_list|(
name|REP_PRIVILEGE_BITS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPath
argument_list|,
name|entry
operator|.
name|getProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getProperty
argument_list|(
name|REP_INDEX
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|index
argument_list|)
expr_stmt|;
comment|// remove duplicate policy entry again
name|root
operator|.
name|getTree
argument_list|(
name|testPath
operator|+
literal|"/rep:policy/duplicateAce"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getPrincipalRoot
argument_list|(
name|testPrincipalName
argument_list|)
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModifyRestrictions
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|testAce
init|=
name|root
operator|.
name|getTree
argument_list|(
name|testPath
operator|+
literal|"/rep:policy"
argument_list|)
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|testPrincipalName
argument_list|,
name|testAce
operator|.
name|getProperty
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
comment|// add a new restriction node through the OAK API instead of access control manager
name|NodeUtil
name|node
init|=
operator|new
name|NodeUtil
argument_list|(
name|testAce
argument_list|)
decl_stmt|;
name|NodeUtil
name|restrictions
init|=
name|node
operator|.
name|addChild
argument_list|(
name|REP_RESTRICTIONS
argument_list|,
name|NT_REP_RESTRICTIONS
argument_list|)
decl_stmt|;
name|restrictions
operator|.
name|setString
argument_list|(
name|REP_GLOB
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|String
name|restritionsPath
init|=
name|restrictions
operator|.
name|getTree
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|principalRoot
init|=
name|getPrincipalRoot
argument_list|(
name|testPrincipalName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|principalRoot
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|principalRoot
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getProperty
argument_list|(
name|REP_GLOB
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
comment|// modify the restrictions node
name|Tree
name|restrictionsNode
init|=
name|root
operator|.
name|getTree
argument_list|(
name|restritionsPath
argument_list|)
decl_stmt|;
name|restrictionsNode
operator|.
name|setProperty
argument_list|(
name|REP_GLOB
argument_list|,
literal|"/*/jcr:content/*"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|principalRoot
operator|=
name|getPrincipalRoot
argument_list|(
name|testPrincipalName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|principalRoot
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/*/jcr:content/*"
argument_list|,
name|principalRoot
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getProperty
argument_list|(
name|REP_GLOB
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove the restriction again
name|root
operator|.
name|getTree
argument_list|(
name|restritionsPath
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|principalRoot
operator|=
name|getPrincipalRoot
argument_list|(
name|testPrincipalName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|principalRoot
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|principalRoot
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getProperty
argument_list|(
name|REP_GLOB
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"PermissionHook#propertyChange"
argument_list|)
comment|// TODO
annotation|@
name|Test
specifier|public
name|void
name|testReorderAce
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|entry
init|=
name|getEntry
argument_list|(
name|testPrincipalName
argument_list|,
name|testPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entry
operator|.
name|getProperty
argument_list|(
name|REP_INDEX
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|aclTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|testPath
operator|+
literal|"/rep:policy"
argument_list|)
decl_stmt|;
name|aclTree
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|orderBefore
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|entry
operator|=
name|getEntry
argument_list|(
name|testPrincipalName
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entry
operator|.
name|getProperty
argument_list|(
name|REP_INDEX
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"PermissionHook#propertyChange"
argument_list|)
comment|// TODO
annotation|@
name|Test
specifier|public
name|void
name|testReorderAndAddAce
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|entry
init|=
name|getEntry
argument_list|(
name|testPrincipalName
argument_list|,
name|testPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entry
operator|.
name|getProperty
argument_list|(
name|REP_INDEX
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|aclTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|testPath
operator|+
literal|"/rep:policy"
argument_list|)
decl_stmt|;
name|aclTree
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|orderBefore
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|NodeUtil
name|ace
init|=
operator|new
name|NodeUtil
argument_list|(
name|aclTree
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"denyEveryoneLockMgt"
argument_list|,
name|NT_REP_DENY_ACE
argument_list|)
decl_stmt|;
name|ace
operator|.
name|setString
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|,
name|EveryonePrincipal
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|ace
operator|.
name|setStrings
argument_list|(
name|REP_PRIVILEGES
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_LOCK_MANAGEMENT
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|entry
operator|=
name|getEntry
argument_list|(
name|testPrincipalName
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entry
operator|.
name|getProperty
argument_list|(
name|REP_INDEX
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

