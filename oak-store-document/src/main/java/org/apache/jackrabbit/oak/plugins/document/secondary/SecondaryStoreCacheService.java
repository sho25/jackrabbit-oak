begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|secondary
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|registerMBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|AbstractDocumentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStateCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeStateDiffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|BackgroundObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|BackgroundObserverMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|filter
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|metatype
operator|.
name|annotations
operator|.
name|AttributeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|metatype
operator|.
name|annotations
operator|.
name|Designate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|metatype
operator|.
name|annotations
operator|.
name|ObjectClassDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Component
annotation|@
name|Designate
argument_list|(
name|ocd
operator|=
name|SecondaryStoreCacheService
operator|.
name|Configuration
operator|.
name|class
argument_list|)
specifier|public
class|class
name|SecondaryStoreCacheService
block|{
annotation|@
name|ObjectClassDefinition
argument_list|(
name|name
operator|=
literal|"Apache Jackrabbit Oak DocumentNodeStateCache Provider"
argument_list|,
name|description
operator|=
literal|"Configures a DocumentNodeStateCache based on a secondary NodeStore"
argument_list|)
annotation_defn|@interface
name|Configuration
block|{
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Included Paths"
argument_list|,
name|description
operator|=
literal|"List of paths which are to be included in the secondary store"
argument_list|)
name|String
index|[]
name|includedPaths
argument_list|()
expr|default
block|{
literal|"/"
block|}
expr_stmt|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Async Observation"
argument_list|,
name|description
operator|=
literal|"Enable async observation processing"
argument_list|)
name|boolean
name|enableAsyncObserver
parameter_list|()
default|default
literal|true
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Observer queue size"
argument_list|,
name|description
operator|=
literal|"Observer queue size. Used if 'enableAsyncObserver' is set to true"
argument_list|)
name|int
name|observerQueueSize
parameter_list|()
default|default
name|BackgroundObserver
operator|.
name|DEFAULT_QUEUE_SIZE
function_decl|;
block|}
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Having a reference to BlobStore ensures that DocumentNodeStoreService does register a BlobStore      */
annotation|@
name|Reference
specifier|private
name|BlobStore
name|blobStore
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|target
operator|=
literal|"(role=secondary)"
argument_list|)
specifier|private
name|NodeStoreProvider
name|secondaryStoreProvider
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|Executor
name|executor
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|StatisticsProvider
name|statisticsProvider
decl_stmt|;
comment|/*      * Have an optional dependency on DocumentNodeStore such that we do not have hard dependency      * on it and DocumentNodeStore can make use of this service even after it has unregistered      */
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|)
specifier|private
specifier|volatile
name|DocumentNodeStore
name|documentNodeStore
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Registration
argument_list|>
name|oakRegs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|ServiceRegistration
argument_list|>
name|regs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
name|Whiteboard
name|whiteboard
decl_stmt|;
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
name|PathFilter
name|pathFilter
decl_stmt|;
specifier|private
specifier|final
name|MultiplexingNodeStateDiffer
name|differ
init|=
operator|new
name|MultiplexingNodeStateDiffer
argument_list|()
decl_stmt|;
annotation|@
name|Activate
specifier|private
name|void
name|activate
parameter_list|(
name|BundleContext
name|context
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|bundleContext
operator|=
name|context
expr_stmt|;
name|whiteboard
operator|=
operator|new
name|OsgiWhiteboard
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|String
index|[]
name|includedPaths
init|=
name|config
operator|.
name|includedPaths
argument_list|()
decl_stmt|;
comment|//TODO Support for exclude is not possible as once a NodeState is loaded from secondary
comment|//store it assumes that complete subtree is in same store. With exclude it would need to
comment|//check for each child access and route to primary
name|pathFilter
operator|=
operator|new
name|PathFilter
argument_list|(
name|asList
argument_list|(
name|includedPaths
argument_list|)
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|SecondaryStoreBuilder
name|builder
init|=
operator|new
name|SecondaryStoreBuilder
argument_list|(
name|secondaryStoreProvider
operator|.
name|getNodeStore
argument_list|()
argument_list|)
operator|.
name|differ
argument_list|(
name|differ
argument_list|)
operator|.
name|metaPropNames
argument_list|(
name|DocumentNodeStore
operator|.
name|META_PROP_NAMES
argument_list|)
operator|.
name|statisticsProvider
argument_list|(
name|statisticsProvider
argument_list|)
operator|.
name|pathFilter
argument_list|(
name|pathFilter
argument_list|)
decl_stmt|;
name|SecondaryStoreCache
name|cache
init|=
name|builder
operator|.
name|buildCache
argument_list|()
decl_stmt|;
name|SecondaryStoreObserver
name|observer
init|=
name|builder
operator|.
name|buildObserver
argument_list|(
name|cache
argument_list|)
decl_stmt|;
name|registerObserver
argument_list|(
name|observer
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|regs
operator|.
name|add
argument_list|(
name|bundleContext
operator|.
name|registerService
argument_list|(
name|DocumentNodeStateCache
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|cache
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|//TODO Need to see OSGi dynamics. Its possible that DocumentNodeStore works after the cache
comment|//gets deregistered but the SegmentNodeState instances might still be in use and that would cause
comment|//failure
block|}
annotation|@
name|Deactivate
specifier|private
name|void
name|deactivate
parameter_list|()
block|{
for|for
control|(
name|Registration
name|r
range|:
name|oakRegs
control|)
block|{
name|r
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|ServiceRegistration
name|r
range|:
name|regs
control|)
block|{
name|r
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
block|}
name|PathFilter
name|getPathFilter
parameter_list|()
block|{
return|return
name|pathFilter
return|;
block|}
specifier|protected
name|void
name|bindDocumentNodeStore
parameter_list|(
name|DocumentNodeStore
name|documentNodeStore
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Registering DocumentNodeStore as the differ"
argument_list|)
expr_stmt|;
name|differ
operator|.
name|setDelegate
argument_list|(
name|documentNodeStore
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|unbindDocumentNodeStore
parameter_list|(
name|DocumentNodeStore
name|documentNodeStore
parameter_list|)
block|{
name|differ
operator|.
name|setDelegate
argument_list|(
name|NodeStateDiffer
operator|.
name|DEFAULT_DIFFER
argument_list|)
expr_stmt|;
block|}
comment|//~----------------------------------------------------< internal>
specifier|private
name|void
name|registerObserver
parameter_list|(
name|Observer
name|observer
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|boolean
name|enableAsyncObserver
init|=
name|config
operator|.
name|enableAsyncObserver
argument_list|()
decl_stmt|;
name|int
name|queueSize
init|=
name|config
operator|.
name|observerQueueSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|enableAsyncObserver
condition|)
block|{
name|BackgroundObserver
name|bgObserver
init|=
operator|new
name|BackgroundObserver
argument_list|(
name|observer
argument_list|,
name|executor
argument_list|,
name|queueSize
argument_list|)
decl_stmt|;
name|oakRegs
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|BackgroundObserverMBean
operator|.
name|class
argument_list|,
name|bgObserver
operator|.
name|getMBean
argument_list|()
argument_list|,
name|BackgroundObserverMBean
operator|.
name|TYPE
argument_list|,
literal|"Secondary NodeStore observer stats"
argument_list|)
argument_list|)
expr_stmt|;
name|observer
operator|=
name|bgObserver
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Configuring the observer for secondary NodeStore as "
operator|+
literal|"Background Observer with queue size {}"
argument_list|,
name|queueSize
argument_list|)
expr_stmt|;
block|}
comment|//Ensure that our observer comes first in processing
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|regs
operator|.
name|add
argument_list|(
name|bundleContext
operator|.
name|registerService
argument_list|(
name|Observer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|observer
argument_list|,
name|props
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|MultiplexingNodeStateDiffer
implements|implements
name|NodeStateDiffer
block|{
specifier|private
specifier|volatile
name|NodeStateDiffer
name|delegate
init|=
name|NodeStateDiffer
operator|.
name|DEFAULT_DIFFER
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|compare
parameter_list|(
annotation|@
name|NotNull
name|AbstractDocumentNodeState
name|node
parameter_list|,
annotation|@
name|NotNull
name|AbstractDocumentNodeState
name|base
parameter_list|,
annotation|@
name|NotNull
name|NodeStateDiff
name|diff
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|compare
argument_list|(
name|node
argument_list|,
name|base
argument_list|,
name|diff
argument_list|)
return|;
block|}
specifier|public
name|void
name|setDelegate
parameter_list|(
name|NodeStateDiffer
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

