begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
operator|.
name|Token
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/*  * DIFFS     ::= DIFF*  * DIFF      ::= ADD | SET | REMOVE | MOVE | TEST | METADATA | EXTENSION  * ADD       ::= + STRING : (OBJECT | ATOM | ARRAY)  * SET       ::= ^ STRING : ATOM | ARRAY  * REMOVE    ::= - STRING  * MOVE      ::=> STRING : (STRING | { STRING : STRING })  * TEST      ::= = STRING : ATOM | ARRAY  * METADATA  ::= @ OBJECT  * EXTENSION ::= OP STRING ":" (OBJECT | ATOM | ARRAY)  */
end_comment

begin_class
specifier|public
class|class
name|JsopParser
block|{
specifier|private
specifier|final
name|JsopHandler
name|jsopHandler
decl_stmt|;
specifier|public
name|JsopParser
parameter_list|(
name|JsopHandler
name|jsopHandler
parameter_list|)
block|{
name|this
operator|.
name|jsopHandler
operator|=
name|jsopHandler
expr_stmt|;
block|}
comment|/* DIFFS    ::= DIFF* */
specifier|public
name|void
name|parseJsop
parameter_list|(
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
for|for
control|(
name|Token
name|token
init|=
name|tokenizer
operator|.
name|peek
argument_list|()
init|;
name|token
operator|.
name|type
argument_list|()
operator|!=
name|Type
operator|.
name|EOF
condition|;
name|token
operator|=
name|tokenizer
operator|.
name|peek
argument_list|()
control|)
block|{
name|parseDiff
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* DIFF    ::= ADD | SET | REMOVE | MOVE */
specifier|public
name|void
name|parseDiff
parameter_list|(
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|Token
name|token
init|=
name|tokenizer
operator|.
name|read
argument_list|(
name|Type
operator|.
name|UNKNOWN
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|token
operator|.
name|text
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|length
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
name|token
operator|.
name|pos
argument_list|()
argument_list|,
literal|"Expected one of +, -, ^ or>. Found: "
operator|+
name|token
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|text
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
condition|)
block|{
case|case
literal|'+'
case|:
name|parseAdd
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'-'
case|:
name|parseRemove
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'^'
case|:
name|parseSet
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'>'
case|:
name|parseMove
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'='
case|:
name|parseTest
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'@'
case|:
name|parseMetadata
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
break|break;
default|default:
name|parseExtension
argument_list|(
name|text
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|tokenizer
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* ADD      ::= + STRING : (OBJECT | ATOM | ARRAY) */
specifier|public
name|void
name|parseAdd
parameter_list|(
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|Token
name|path
init|=
name|tokenizer
operator|.
name|read
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|tokenizer
operator|.
name|read
argument_list|(
name|Type
operator|.
name|COLON
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|tokenizer
operator|.
name|peek
argument_list|()
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|BEGIN_OBJECT
case|:
name|jsopHandler
operator|.
name|add
argument_list|(
name|path
argument_list|,
name|tokenizer
argument_list|)
expr_stmt|;
break|break;
case|case
name|BEGIN_ARRAY
case|:
name|jsopHandler
operator|.
name|add
argument_list|(
name|path
argument_list|,
name|parseArray
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jsopHandler
operator|.
name|add
argument_list|(
name|path
argument_list|,
name|parseAtom
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* REMOVE   ::= - STRING */
specifier|public
name|void
name|parseRemove
parameter_list|(
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|jsopHandler
operator|.
name|remove
argument_list|(
name|tokenizer
operator|.
name|read
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* SET      ::= ^ STRING : ATOM | ARRAY*/
specifier|public
name|void
name|parseSet
parameter_list|(
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|Token
name|path
init|=
name|tokenizer
operator|.
name|read
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|tokenizer
operator|.
name|read
argument_list|(
name|Type
operator|.
name|COLON
argument_list|)
expr_stmt|;
name|Token
name|token
init|=
name|tokenizer
operator|.
name|peek
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|token
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|BEGIN_OBJECT
case|:
throw|throw
operator|new
name|ParseException
argument_list|(
name|token
operator|.
name|pos
argument_list|()
argument_list|,
literal|"Expected one of atom or array. Found: "
operator|+
name|token
argument_list|)
throw|;
case|case
name|BEGIN_ARRAY
case|:
name|jsopHandler
operator|.
name|set
argument_list|(
name|path
argument_list|,
name|parseArray
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jsopHandler
operator|.
name|set
argument_list|(
name|path
argument_list|,
name|parseAtom
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* MOVE     ::=> STRING : (STRING | { STRING : STRING }) */
specifier|public
name|void
name|parseMove
parameter_list|(
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|Token
name|path
init|=
name|tokenizer
operator|.
name|read
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|tokenizer
operator|.
name|read
argument_list|(
name|Type
operator|.
name|COLON
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenizer
operator|.
name|peek
argument_list|(
name|Type
operator|.
name|BEGIN_OBJECT
argument_list|)
condition|)
block|{
name|tokenizer
operator|.
name|read
argument_list|(
name|Type
operator|.
name|BEGIN_OBJECT
argument_list|)
expr_stmt|;
name|Token
name|position
init|=
name|tokenizer
operator|.
name|read
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|tokenizer
operator|.
name|read
argument_list|(
name|Type
operator|.
name|COLON
argument_list|)
expr_stmt|;
name|Token
name|target
init|=
name|tokenizer
operator|.
name|read
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|tokenizer
operator|.
name|read
argument_list|(
name|Type
operator|.
name|END_OBJECT
argument_list|)
expr_stmt|;
name|jsopHandler
operator|.
name|reorder
argument_list|(
name|path
argument_list|,
name|position
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jsopHandler
operator|.
name|move
argument_list|(
name|path
argument_list|,
name|tokenizer
operator|.
name|read
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* TEST     ::= = STRING : ATOM | ARRAY */
specifier|public
name|void
name|parseTest
parameter_list|(
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|Token
name|path
init|=
name|tokenizer
operator|.
name|read
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|tokenizer
operator|.
name|read
argument_list|(
name|Type
operator|.
name|COLON
argument_list|)
expr_stmt|;
name|Token
name|token
init|=
name|tokenizer
operator|.
name|peek
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|token
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|BEGIN_OBJECT
case|:
throw|throw
operator|new
name|ParseException
argument_list|(
name|token
operator|.
name|pos
argument_list|()
argument_list|,
literal|"Expected one of atom or array. Found: "
operator|+
name|token
argument_list|)
throw|;
case|case
name|BEGIN_ARRAY
case|:
name|jsopHandler
operator|.
name|test
argument_list|(
name|path
argument_list|,
name|parseArray
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jsopHandler
operator|.
name|test
argument_list|(
name|path
argument_list|,
name|parseAtom
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* METADATA ::= @ OBJECT */
specifier|public
name|void
name|parseMetadata
parameter_list|(
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|jsopHandler
operator|.
name|metaData
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
block|}
comment|/* EXTENSION ::= OP STRING ":" (OBJECT | ATOM | ARRAY) */
specifier|public
name|void
name|parseExtension
parameter_list|(
name|char
name|op
parameter_list|,
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|Token
name|path
init|=
name|tokenizer
operator|.
name|read
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|tokenizer
operator|.
name|read
argument_list|(
name|Type
operator|.
name|COLON
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|tokenizer
operator|.
name|peek
argument_list|()
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|BEGIN_OBJECT
case|:
name|jsopHandler
operator|.
name|extension
argument_list|(
name|op
argument_list|,
name|path
argument_list|,
name|tokenizer
argument_list|)
expr_stmt|;
break|break;
case|case
name|BEGIN_ARRAY
case|:
name|jsopHandler
operator|.
name|extension
argument_list|(
name|op
argument_list|,
name|parseArray
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jsopHandler
operator|.
name|extension
argument_list|(
name|op
argument_list|,
name|parseAtom
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//------------------------------------------< private>---
specifier|private
specifier|static
name|Token
name|parseAtom
parameter_list|(
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|Token
name|token
init|=
name|tokenizer
operator|.
name|peek
argument_list|()
decl_stmt|;
name|Type
name|type
init|=
name|token
operator|.
name|type
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|Type
operator|.
name|TRUE
operator|&&
name|type
operator|!=
name|Type
operator|.
name|FALSE
operator|&&
name|type
operator|!=
name|Type
operator|.
name|NULL
operator|&&
name|type
operator|!=
name|Type
operator|.
name|STRING
operator|&&
name|type
operator|!=
name|Type
operator|.
name|NUMBER
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
name|token
operator|.
name|pos
argument_list|()
argument_list|,
literal|"Expected one of atom. Found: "
operator|+
name|token
argument_list|)
throw|;
block|}
return|return
name|tokenizer
operator|.
name|read
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|Token
index|[]
name|parseArray
parameter_list|(
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Token
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|()
decl_stmt|;
operator|new
name|JsonParser
argument_list|(
operator|new
name|JsonHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|atom
parameter_list|(
name|Token
name|key
parameter_list|,
name|Token
name|value
parameter_list|)
block|{
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|parseArray
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
return|return
name|values
operator|.
name|toArray
argument_list|(
operator|new
name|Token
index|[
name|values
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

