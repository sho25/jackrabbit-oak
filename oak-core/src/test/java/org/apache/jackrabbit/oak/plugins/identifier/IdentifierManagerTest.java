begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|identifier
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|identifier
operator|.
name|IdentifierManager
operator|.
name|getIdentifier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|IdentifierManagerTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|UUID_Y
init|=
name|IdentifierManager
operator|.
name|generateUUID
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|UUID_Z1
init|=
name|IdentifierManager
operator|.
name|generateUUID
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ID_ROOT
init|=
literal|"/"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ID_X1
init|=
literal|"/x/x1"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ID_Y1
init|=
name|UUID_Y
operator|+
literal|"/y1"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ID_Z1
init|=
name|UUID_Z1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PATH_X1
init|=
literal|"/x/x1"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PATH_Y1
init|=
literal|"/y/y1"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PATH_Z1
init|=
literal|"/z/z1"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ID_INVALID
init|=
literal|"invalid"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ID_NON_EXISTING
init|=
name|IdentifierManager
operator|.
name|generateUUID
argument_list|()
decl_stmt|;
specifier|private
name|IdentifierManager
name|identifierManager
decl_stmt|;
specifier|private
name|Root
name|root
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|root
operator|=
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|createContentSession
argument_list|()
operator|.
name|getLatestRoot
argument_list|()
expr_stmt|;
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|x
init|=
name|tree
operator|.
name|addChild
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|Tree
name|y
init|=
name|tree
operator|.
name|addChild
argument_list|(
literal|"y"
argument_list|)
decl_stmt|;
name|y
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_UUID
argument_list|,
name|UUID_Y
argument_list|)
expr_stmt|;
name|Tree
name|z
init|=
name|tree
operator|.
name|addChild
argument_list|(
literal|"z"
argument_list|)
decl_stmt|;
name|x
operator|.
name|addChild
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|y
operator|.
name|addChild
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|z
operator|.
name|addChild
argument_list|(
literal|"z1"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_UUID
argument_list|,
name|UUID_Z1
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|identifierManager
operator|=
operator|new
name|IdentifierManager
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getIdentifierTest
parameter_list|()
block|{
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ID_ROOT
argument_list|,
name|getIdentifier
argument_list|(
name|rootTree
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|xx1
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PATH_X1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ID_X1
argument_list|,
name|getIdentifier
argument_list|(
name|xx1
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|yy1
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PATH_Y1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ID_Y1
argument_list|,
name|getIdentifier
argument_list|(
name|yy1
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|zz1
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PATH_Z1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ID_Z1
argument_list|,
name|getIdentifier
argument_list|(
name|zz1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getTreeTest
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|identifierManager
operator|.
name|getTree
argument_list|(
name|ID_ROOT
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PATH_X1
argument_list|,
name|identifierManager
operator|.
name|getTree
argument_list|(
name|ID_X1
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PATH_Y1
argument_list|,
name|identifierManager
operator|.
name|getTree
argument_list|(
name|ID_Y1
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PATH_Z1
argument_list|,
name|identifierManager
operator|.
name|getTree
argument_list|(
name|ID_Z1
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|identifierManager
operator|.
name|getTree
argument_list|(
name|ID_NON_EXISTING
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|identifierManager
operator|.
name|getTree
argument_list|(
name|ID_INVALID
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{ }
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPathTest
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|identifierManager
operator|.
name|getPath
argument_list|(
name|ID_ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PATH_X1
argument_list|,
name|identifierManager
operator|.
name|getPath
argument_list|(
name|ID_X1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PATH_Y1
argument_list|,
name|identifierManager
operator|.
name|getPath
argument_list|(
name|ID_Y1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PATH_Z1
argument_list|,
name|identifierManager
operator|.
name|getPath
argument_list|(
name|ID_Z1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|identifierManager
operator|.
name|getPath
argument_list|(
name|ID_NON_EXISTING
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|identifierManager
operator|.
name|getPath
argument_list|(
name|ID_INVALID
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{ }
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPathFromPropertyTest
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"/y"
argument_list|,
name|identifierManager
operator|.
name|getPath
argument_list|(
name|createReferenceProperty
argument_list|(
name|UUID_Y
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PATH_Z1
argument_list|,
name|identifierManager
operator|.
name|getPath
argument_list|(
name|createReferenceProperty
argument_list|(
name|UUID_Z1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|identifierManager
operator|.
name|getPath
argument_list|(
name|createReferenceProperty
argument_list|(
name|ID_NON_EXISTING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|identifierManager
operator|.
name|getPath
argument_list|(
name|createReferenceProperty
argument_list|(
name|ID_INVALID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|identifierManager
operator|.
name|getPath
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"any"
argument_list|,
literal|"any"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{ }
block|}
specifier|private
specifier|static
name|PropertyState
name|createReferenceProperty
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"ref"
argument_list|,
name|value
argument_list|,
name|Type
operator|.
name|REFERENCE
argument_list|)
return|;
block|}
block|}
end_class

end_unit

