begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|Aggregate
operator|.
name|NodeInclude
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|Aggregate
operator|.
name|NodeIncludeResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|Aggregate
operator|.
name|PropertyIncludeResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|toArray
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|INDEX_RULES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|InitialContent
operator|.
name|INITIAL_CONTENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|matchers
operator|.
name|JUnitMatchers
operator|.
name|hasItems
import|;
end_import

begin_class
specifier|public
class|class
name|AggregateTest
block|{
specifier|private
specifier|final
name|TestCollector
name|col
init|=
operator|new
name|TestCollector
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|SimpleMapper
name|mapper
init|=
operator|new
name|SimpleMapper
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
specifier|private
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|//~---------------------------------< Node Includes>
annotation|@
name|Test
specifier|public
name|void
name|oneLevelAll
parameter_list|()
throws|throws
name|Exception
block|{
name|Aggregate
name|ag
init|=
operator|new
name|Aggregate
argument_list|(
literal|"nt:base"
argument_list|,
name|of
argument_list|(
name|ni
argument_list|(
literal|"*"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|NodeBuilder
name|nb
init|=
name|newNode
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|ag
operator|.
name|collectAggregates
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|col
operator|.
name|getNodePaths
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|col
operator|.
name|getNodePaths
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|oneLevelNamed
parameter_list|()
throws|throws
name|Exception
block|{
name|Aggregate
name|ag
init|=
operator|new
name|Aggregate
argument_list|(
literal|"nt:base"
argument_list|,
name|of
argument_list|(
name|ni
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|NodeBuilder
name|nb
init|=
name|newNode
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|ag
operator|.
name|collectAggregates
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|col
operator|.
name|getNodePaths
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|col
operator|.
name|getNodePaths
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|oneLevelTyped
parameter_list|()
throws|throws
name|Exception
block|{
name|Aggregate
name|ag
init|=
operator|new
name|Aggregate
argument_list|(
literal|"nt:base"
argument_list|,
name|of
argument_list|(
name|ni
argument_list|(
literal|"nt:resource"
argument_list|,
literal|"*"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|NodeBuilder
name|nb
init|=
name|newNode
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"nt:resource"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|ag
operator|.
name|collectAggregates
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|col
operator|.
name|getNodePaths
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|col
operator|.
name|getNodePaths
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|oneLevelTypedMixin
parameter_list|()
throws|throws
name|Exception
block|{
name|Aggregate
name|ag
init|=
operator|new
name|Aggregate
argument_list|(
literal|"nt:base"
argument_list|,
name|of
argument_list|(
name|ni
argument_list|(
literal|"mix:title"
argument_list|,
literal|"*"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|NodeBuilder
name|nb
init|=
name|newNode
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"mix:title"
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|ag
operator|.
name|collectAggregates
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|col
operator|.
name|getNodePaths
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|col
operator|.
name|getNodePaths
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multiLevelAll
parameter_list|()
throws|throws
name|Exception
block|{
name|Aggregate
name|ag
init|=
operator|new
name|Aggregate
argument_list|(
literal|"nt:base"
argument_list|,
name|of
argument_list|(
name|ni
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|ni
argument_list|(
literal|"*/*"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|NodeBuilder
name|nb
init|=
name|newNode
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"d"
argument_list|)
operator|.
name|child
argument_list|(
literal|"e"
argument_list|)
operator|.
name|child
argument_list|(
literal|"f"
argument_list|)
expr_stmt|;
name|ag
operator|.
name|collectAggregates
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|col
operator|.
name|getNodePaths
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|col
operator|.
name|getNodePaths
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"a/c"
argument_list|,
literal|"d/e"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multiLevelNamed
parameter_list|()
throws|throws
name|Exception
block|{
name|Aggregate
name|ag
init|=
operator|new
name|Aggregate
argument_list|(
literal|"nt:base"
argument_list|,
name|of
argument_list|(
name|ni
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|ni
argument_list|(
literal|"d/e"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|NodeBuilder
name|nb
init|=
name|newNode
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"d"
argument_list|)
operator|.
name|child
argument_list|(
literal|"e"
argument_list|)
operator|.
name|child
argument_list|(
literal|"f"
argument_list|)
expr_stmt|;
name|ag
operator|.
name|collectAggregates
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|col
operator|.
name|getNodePaths
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|col
operator|.
name|getNodePaths
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"a"
argument_list|,
literal|"d/e"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multiLevelTyped
parameter_list|()
throws|throws
name|Exception
block|{
name|Aggregate
name|ag
init|=
operator|new
name|Aggregate
argument_list|(
literal|"nt:base"
argument_list|,
name|of
argument_list|(
name|ni
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|ni
argument_list|(
literal|"nt:resource"
argument_list|,
literal|"d/*/*"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|NodeBuilder
name|nb
init|=
name|newNode
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"d"
argument_list|)
operator|.
name|child
argument_list|(
literal|"e"
argument_list|)
operator|.
name|child
argument_list|(
literal|"f"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"nt:resource"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"d"
argument_list|)
operator|.
name|child
argument_list|(
literal|"e"
argument_list|)
operator|.
name|child
argument_list|(
literal|"f2"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"d"
argument_list|)
operator|.
name|child
argument_list|(
literal|"e2"
argument_list|)
operator|.
name|child
argument_list|(
literal|"f3"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"nt:resource"
argument_list|)
expr_stmt|;
name|ag
operator|.
name|collectAggregates
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|col
operator|.
name|getNodePaths
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|col
operator|.
name|getNodePaths
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"a"
argument_list|,
literal|"d/e/f"
argument_list|,
literal|"d/e2/f3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multiLevelNamedSubAll
parameter_list|()
throws|throws
name|Exception
block|{
name|Aggregate
name|ag
init|=
operator|new
name|Aggregate
argument_list|(
literal|"nt:base"
argument_list|,
name|of
argument_list|(
name|ni
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|ni
argument_list|(
literal|"d/*/*"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|NodeBuilder
name|nb
init|=
name|newNode
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"d"
argument_list|)
operator|.
name|child
argument_list|(
literal|"e"
argument_list|)
operator|.
name|child
argument_list|(
literal|"f"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"d"
argument_list|)
operator|.
name|child
argument_list|(
literal|"e"
argument_list|)
operator|.
name|child
argument_list|(
literal|"f2"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"d"
argument_list|)
operator|.
name|child
argument_list|(
literal|"e2"
argument_list|)
operator|.
name|child
argument_list|(
literal|"f3"
argument_list|)
expr_stmt|;
name|ag
operator|.
name|collectAggregates
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|col
operator|.
name|getNodePaths
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|col
operator|.
name|getNodePaths
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"a"
argument_list|,
literal|"d/e/f"
argument_list|,
literal|"d/e/f2"
argument_list|,
literal|"d/e2/f3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//~---------------------------------< Node include recursive>
annotation|@
name|Test
specifier|public
name|void
name|multiAggregateMapping
parameter_list|()
throws|throws
name|Exception
block|{
name|Aggregate
name|ag
init|=
operator|new
name|Aggregate
argument_list|(
literal|"nt:base"
argument_list|,
name|of
argument_list|(
name|ni
argument_list|(
literal|"*"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Aggregate
name|agFile
init|=
operator|new
name|Aggregate
argument_list|(
literal|"nt:file"
argument_list|,
name|of
argument_list|(
name|ni
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|ni
argument_list|(
literal|"*/*"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|mapper
operator|.
name|add
argument_list|(
literal|"nt:file"
argument_list|,
name|agFile
argument_list|)
expr_stmt|;
name|NodeBuilder
name|nb
init|=
name|newNode
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"nt:file"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b1"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b2"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|ag
operator|.
name|collectAggregates
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|col
operator|.
name|getNodePaths
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|col
operator|.
name|getNodePaths
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"b/b1"
argument_list|,
literal|"b/b1/b2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|recursionEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|Aggregate
name|agFile
init|=
operator|new
name|Aggregate
argument_list|(
literal|"nt:file"
argument_list|,
name|of
argument_list|(
name|ni
argument_list|(
literal|"*"
argument_list|)
argument_list|)
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|mapper
operator|.
name|add
argument_list|(
literal|"nt:file"
argument_list|,
name|agFile
argument_list|)
expr_stmt|;
name|NodeBuilder
name|nb
init|=
name|newNode
argument_list|(
literal|"nt:file"
argument_list|)
decl_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"nt:file"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b1"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b2"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|agFile
operator|.
name|collectAggregates
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|col
operator|.
name|getNodePaths
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|col
operator|.
name|getNodePaths
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"b/b1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|recursionEnabledWithLimitCheck
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|limit
init|=
literal|5
decl_stmt|;
name|Aggregate
name|agFile
init|=
operator|new
name|Aggregate
argument_list|(
literal|"nt:file"
argument_list|,
name|of
argument_list|(
name|ni
argument_list|(
literal|"*"
argument_list|)
argument_list|)
argument_list|,
name|limit
argument_list|)
decl_stmt|;
name|mapper
operator|.
name|add
argument_list|(
literal|"nt:file"
argument_list|,
name|agFile
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedPaths
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|NodeBuilder
name|nb
init|=
name|newNode
argument_list|(
literal|"nt:file"
argument_list|)
decl_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|String
name|path
init|=
literal|""
decl_stmt|;
name|NodeBuilder
name|fb
init|=
name|nb
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
operator|+
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
literal|"f "
operator|+
name|i
decl_stmt|;
name|path
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|fb
operator|=
name|fb
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|fb
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"nt:file"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|limit
condition|)
block|{
name|expectedPaths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
name|expectedPaths
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|agFile
operator|.
name|collectAggregates
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedPaths
operator|.
name|size
argument_list|()
argument_list|,
name|col
operator|.
name|getNodePaths
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|col
operator|.
name|getNodePaths
argument_list|()
argument_list|,
name|hasItems
argument_list|(
name|toArray
argument_list|(
name|expectedPaths
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|includeMatches
parameter_list|()
throws|throws
name|Exception
block|{
name|Aggregate
name|ag
init|=
operator|new
name|Aggregate
argument_list|(
literal|"nt:base"
argument_list|,
name|of
argument_list|(
name|ni
argument_list|(
literal|null
argument_list|,
literal|"*"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|ni
argument_list|(
literal|null
argument_list|,
literal|"*/*"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ag
operator|.
name|hasRelativeNodeInclude
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ag
operator|.
name|hasRelativeNodeInclude
argument_list|(
literal|"foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ag
operator|.
name|hasRelativeNodeInclude
argument_list|(
literal|"foo/bar/baz"
argument_list|)
argument_list|)
expr_stmt|;
name|Aggregate
name|ag2
init|=
operator|new
name|Aggregate
argument_list|(
literal|"nt:base"
argument_list|,
name|of
argument_list|(
name|ni
argument_list|(
literal|null
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|ni
argument_list|(
literal|null
argument_list|,
literal|"foo/*"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ag2
operator|.
name|hasRelativeNodeInclude
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ag2
operator|.
name|hasRelativeNodeInclude
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ag2
operator|.
name|hasRelativeNodeInclude
argument_list|(
literal|"foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ag2
operator|.
name|hasRelativeNodeInclude
argument_list|(
literal|"foo/bar/baz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReaggregate
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Enable relative include for all child nodes of nt:folder
comment|//So indexing would create fulltext field for each relative nodes
name|Aggregate
name|agFolder
init|=
operator|new
name|Aggregate
argument_list|(
literal|"nt:folder"
argument_list|,
name|of
argument_list|(
name|ni
argument_list|(
literal|"nt:file"
argument_list|,
literal|"*"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Aggregate
name|agFile
init|=
operator|new
name|Aggregate
argument_list|(
literal|"nt:file"
argument_list|,
name|of
argument_list|(
name|ni
argument_list|(
literal|null
argument_list|,
literal|"jcr:content"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|mapper
operator|.
name|add
argument_list|(
literal|"nt:file"
argument_list|,
name|agFile
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|add
argument_list|(
literal|"nt:folder"
argument_list|,
name|agFolder
argument_list|)
expr_stmt|;
name|NodeBuilder
name|nb
init|=
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|)
decl_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|nb
argument_list|,
literal|"b"
argument_list|,
literal|"hello world"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|nb
argument_list|,
literal|"c"
argument_list|,
literal|"hello world"
argument_list|)
expr_stmt|;
name|agFolder
operator|.
name|collectAggregates
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|col
operator|.
name|getNodePaths
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|col
operator|.
name|getNodePaths
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"b/jcr:content"
argument_list|,
literal|"c/jcr:content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|col
operator|.
name|nodeResults
operator|.
name|get
argument_list|(
literal|"b/jcr:content"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Check that a result is provided for relative node 'b'. Actual node provided
comment|//is b/jcr:content
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|col
operator|.
name|getRelativeNodeResults
argument_list|(
literal|"b/jcr:content"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReaggregateMixin
parameter_list|()
throws|throws
name|Exception
block|{
comment|//A variant of testReaggregation but using mixin
comment|//instead of normal nodetype. It abuses mix:title
comment|//and treat it like nt:file. Test check if reaggregation
comment|//works for mixins also
comment|//Enable relative include for all child nodes of nt:folder
comment|//So indexing would create fulltext field for each relative nodes
name|Aggregate
name|agFolder
init|=
operator|new
name|Aggregate
argument_list|(
literal|"nt:folder"
argument_list|,
name|of
argument_list|(
name|ni
argument_list|(
literal|"mix:title"
argument_list|,
literal|"*"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Aggregate
name|agFile
init|=
operator|new
name|Aggregate
argument_list|(
literal|"mix:title"
argument_list|,
name|of
argument_list|(
name|ni
argument_list|(
literal|null
argument_list|,
literal|"jcr:content"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|mapper
operator|.
name|add
argument_list|(
literal|"mix:title"
argument_list|,
name|agFile
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|add
argument_list|(
literal|"nt:folder"
argument_list|,
name|agFolder
argument_list|)
expr_stmt|;
name|NodeBuilder
name|nb
init|=
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|)
decl_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|createFileMixin
argument_list|(
name|nb
argument_list|,
literal|"b"
argument_list|,
literal|"hello world"
argument_list|)
expr_stmt|;
name|createFileMixin
argument_list|(
name|nb
argument_list|,
literal|"c"
argument_list|,
literal|"hello world"
argument_list|)
expr_stmt|;
name|agFolder
operator|.
name|collectAggregates
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|col
operator|.
name|getNodePaths
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|col
operator|.
name|getNodePaths
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"b/jcr:content"
argument_list|,
literal|"c/jcr:content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|col
operator|.
name|nodeResults
operator|.
name|get
argument_list|(
literal|"b/jcr:content"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Check that a result is provided for relative node 'b'. Actual node provided
comment|//is b/jcr:content
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|col
operator|.
name|getRelativeNodeResults
argument_list|(
literal|"b/jcr:content"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRelativeNodeInclude
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Enable relative include for all child nodes of nt:folder
comment|//So indexing would create fulltext field for each relative nodes
name|Aggregate
name|agContent
init|=
operator|new
name|Aggregate
argument_list|(
literal|"app:Page"
argument_list|,
name|of
argument_list|(
name|ni
argument_list|(
literal|null
argument_list|,
literal|"jcr:content"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|mapper
operator|.
name|add
argument_list|(
literal|"app:Page"
argument_list|,
name|agContent
argument_list|)
expr_stmt|;
name|NodeBuilder
name|nb
init|=
name|newNode
argument_list|(
literal|"app:Page"
argument_list|)
decl_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"jcr:content"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|agContent
operator|.
name|collectAggregates
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|col
operator|.
name|getNodePaths
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|col
operator|.
name|getNodePaths
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"jcr:content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|col
operator|.
name|nodeResults
operator|.
name|get
argument_list|(
literal|"jcr:content"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Check that a result is provided for relative node 'b'. Actual node provided
comment|//is b/jcr:content
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|col
operator|.
name|getRelativeNodeResults
argument_list|(
literal|"jcr:content"
argument_list|,
literal|"jcr:content"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|createFile
parameter_list|(
name|NodeBuilder
name|nb
parameter_list|,
name|String
name|fileName
parameter_list|,
name|String
name|content
parameter_list|)
block|{
name|nb
operator|.
name|child
argument_list|(
name|fileName
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"nt:file"
argument_list|)
operator|.
name|child
argument_list|(
literal|"jcr:content"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"jcr:data"
argument_list|,
name|content
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|createFileMixin
parameter_list|(
name|NodeBuilder
name|nb
parameter_list|,
name|String
name|fileName
parameter_list|,
name|String
name|content
parameter_list|)
block|{
comment|//Abusing mix:title as its registered by default
name|nb
operator|.
name|child
argument_list|(
name|fileName
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"mix:title"
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
operator|.
name|child
argument_list|(
literal|"jcr:content"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"jcr:data"
argument_list|,
name|content
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//~---------------------------------< Prop Includes>
annotation|@
name|Test
specifier|public
name|void
name|propOneLevelNamed
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|rules
operator|.
name|child
argument_list|(
literal|"nt:folder"
argument_list|)
expr_stmt|;
name|child
argument_list|(
name|rules
argument_list|,
literal|"nt:folder/properties/p1"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"a/p1"
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|Aggregate
name|ag
init|=
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
literal|"nt:folder"
argument_list|)
operator|.
name|getAggregate
argument_list|()
decl_stmt|;
name|NodeBuilder
name|nb
init|=
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|)
decl_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p1"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p2"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p2"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|ag
operator|.
name|collectAggregates
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|col
operator|.
name|getPropPaths
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|col
operator|.
name|getPropPaths
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"a/p1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|propOneLevelRegex
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|rules
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|rules
operator|.
name|child
argument_list|(
literal|"nt:folder"
argument_list|)
expr_stmt|;
name|child
argument_list|(
name|rules
argument_list|,
literal|"nt:folder/properties/p1"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"a/foo.*"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_IS_REGEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|Aggregate
name|ag
init|=
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
literal|"nt:folder"
argument_list|)
operator|.
name|getAggregate
argument_list|()
decl_stmt|;
name|NodeBuilder
name|nb
init|=
name|newNode
argument_list|(
literal|"nt:folder"
argument_list|)
decl_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo1"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo2"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"bar1"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p2"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|ag
operator|.
name|collectAggregates
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|col
operator|.
name|getPropPaths
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|col
operator|.
name|getPropPaths
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"a/foo1"
argument_list|,
literal|"a/foo2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//~---------------------------------< IndexingConfig>
annotation|@
name|Test
specifier|public
name|void
name|simpleAggregateConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|aggregates
init|=
name|builder
operator|.
name|child
argument_list|(
name|LuceneIndexConstants
operator|.
name|AGGREGATES
argument_list|)
decl_stmt|;
name|NodeBuilder
name|aggFolder
init|=
name|aggregates
operator|.
name|child
argument_list|(
literal|"nt:folder"
argument_list|)
decl_stmt|;
name|aggFolder
operator|.
name|child
argument_list|(
literal|"i1"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|AGG_PATH
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|Aggregate
name|agg
init|=
name|defn
operator|.
name|getAggregate
argument_list|(
literal|"nt:folder"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|agg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|agg
operator|.
name|getIncludes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|aggregateConfig2
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|aggregates
init|=
name|builder
operator|.
name|child
argument_list|(
name|LuceneIndexConstants
operator|.
name|AGGREGATES
argument_list|)
decl_stmt|;
name|NodeBuilder
name|aggFolder
init|=
name|aggregates
operator|.
name|child
argument_list|(
literal|"nt:folder"
argument_list|)
decl_stmt|;
name|aggFolder
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|AGG_RECURSIVE_LIMIT
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|aggFolder
operator|.
name|child
argument_list|(
literal|"i1"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|AGG_PATH
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|aggFolder
operator|.
name|child
argument_list|(
literal|"i1"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|AGG_PRIMARY_TYPE
argument_list|,
literal|"nt:file"
argument_list|)
expr_stmt|;
name|aggFolder
operator|.
name|child
argument_list|(
literal|"i1"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|AGG_RELATIVE_NODE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|Aggregate
name|agg
init|=
name|defn
operator|.
name|getAggregate
argument_list|(
literal|"nt:folder"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|agg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
argument_list|,
name|agg
operator|.
name|reAggregationLimit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|agg
operator|.
name|getIncludes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nt:file"
argument_list|,
operator|(
operator|(
name|NodeInclude
operator|)
name|agg
operator|.
name|getIncludes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|primaryType
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|NodeInclude
operator|)
name|agg
operator|.
name|getIncludes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|relativeNode
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|NodeBuilder
name|newNode
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
specifier|private
specifier|static
name|NodeBuilder
name|child
parameter_list|(
name|NodeBuilder
name|nb
parameter_list|,
name|String
name|path
parameter_list|)
block|{
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|checkNotNull
argument_list|(
name|path
argument_list|)
argument_list|)
control|)
block|{
name|nb
operator|=
name|nb
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|nb
return|;
block|}
specifier|private
name|Aggregate
operator|.
name|Include
name|ni
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
return|return
operator|new
name|NodeInclude
argument_list|(
name|mapper
argument_list|,
name|pattern
argument_list|)
return|;
block|}
specifier|private
name|Aggregate
operator|.
name|Include
name|ni
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|pattern
parameter_list|,
name|boolean
name|relativeNode
parameter_list|)
block|{
return|return
operator|new
name|NodeInclude
argument_list|(
name|mapper
argument_list|,
name|type
argument_list|,
name|pattern
argument_list|,
name|relativeNode
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|TestCollector
implements|implements
name|Aggregate
operator|.
name|ResultCollector
block|{
specifier|final
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|NodeIncludeResult
argument_list|>
name|nodeResults
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyIncludeResult
argument_list|>
name|propResults
init|=
name|newHashMap
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onResult
parameter_list|(
name|NodeIncludeResult
name|result
parameter_list|)
block|{
name|nodeResults
operator|.
name|put
argument_list|(
name|result
operator|.
name|nodePath
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onResult
parameter_list|(
name|PropertyIncludeResult
name|result
parameter_list|)
block|{
name|propResults
operator|.
name|put
argument_list|(
name|result
operator|.
name|propertyPath
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getNodePaths
parameter_list|()
block|{
return|return
name|nodeResults
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getPropPaths
parameter_list|()
block|{
return|return
name|propResults
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|nodeResults
operator|.
name|clear
argument_list|()
expr_stmt|;
name|propResults
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|NodeIncludeResult
argument_list|>
name|getRelativeNodeResults
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|rootIncludePath
parameter_list|)
block|{
name|List
argument_list|<
name|NodeIncludeResult
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeIncludeResult
name|nr
range|:
name|nodeResults
operator|.
name|get
argument_list|(
name|path
argument_list|)
control|)
block|{
if|if
condition|(
name|rootIncludePath
operator|.
name|equals
argument_list|(
name|nr
operator|.
name|rootIncludePath
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|nr
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|SimpleMapper
implements|implements
name|Aggregate
operator|.
name|AggregateMapper
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Aggregate
argument_list|>
name|mapping
init|=
name|newHashMap
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Aggregate
name|getAggregate
parameter_list|(
name|String
name|nodeTypeName
parameter_list|)
block|{
return|return
name|mapping
operator|.
name|get
argument_list|(
name|nodeTypeName
argument_list|)
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|String
name|type
parameter_list|,
name|Aggregate
name|agg
parameter_list|)
block|{
name|mapping
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|agg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

