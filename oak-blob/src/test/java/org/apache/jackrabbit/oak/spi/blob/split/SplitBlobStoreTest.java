begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|split
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|FileBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|split
operator|.
name|DefaultSplitBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|SplitBlobStoreTest
block|{
specifier|private
specifier|static
specifier|final
name|int
name|LENGTH
init|=
literal|1024
decl_stmt|;
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
name|File
name|repository
decl_stmt|;
specifier|private
name|BlobStore
name|oldBlobStore
decl_stmt|;
specifier|private
name|BlobStore
name|newBlobStore
decl_stmt|;
specifier|private
name|DefaultSplitBlobStore
name|splitBlobStore
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|oldBlobIds
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|newBlobIds
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|repository
operator|=
name|Files
operator|.
name|createTempDir
argument_list|()
expr_stmt|;
name|oldBlobStore
operator|=
operator|new
name|FileBlobStore
argument_list|(
name|repository
operator|.
name|getPath
argument_list|()
operator|+
literal|"/old"
argument_list|)
expr_stmt|;
name|newBlobStore
operator|=
operator|new
name|FileBlobStore
argument_list|(
name|repository
operator|.
name|getPath
argument_list|()
operator|+
literal|"/new"
argument_list|)
expr_stmt|;
name|splitBlobStore
operator|=
operator|new
name|DefaultSplitBlobStore
argument_list|(
name|repository
operator|.
name|getPath
argument_list|()
argument_list|,
name|oldBlobStore
argument_list|,
name|newBlobStore
argument_list|)
expr_stmt|;
name|oldBlobIds
operator|=
name|addBlobs
argument_list|(
name|oldBlobStore
argument_list|)
expr_stmt|;
name|newBlobIds
operator|=
name|addBlobs
argument_list|(
name|splitBlobStore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|IOException
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLength
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|id
range|:
name|oldBlobIds
control|)
block|{
name|assertEquals
argument_list|(
name|LENGTH
argument_list|,
name|splitBlobStore
operator|.
name|getBlobLength
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|id
range|:
name|newBlobIds
control|)
block|{
name|assertEquals
argument_list|(
name|LENGTH
argument_list|,
name|newBlobStore
operator|.
name|getBlobLength
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LENGTH
argument_list|,
name|splitBlobStore
operator|.
name|getBlobLength
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsMigrated
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|id
range|:
name|oldBlobIds
control|)
block|{
name|assertFalse
argument_list|(
name|splitBlobStore
operator|.
name|isMigrated
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|id
range|:
name|newBlobIds
control|)
block|{
name|assertTrue
argument_list|(
name|splitBlobStore
operator|.
name|isMigrated
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInputStream
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|id
range|:
name|oldBlobIds
control|)
block|{
name|assertStreamEquals
argument_list|(
name|oldBlobStore
operator|.
name|getInputStream
argument_list|(
name|id
argument_list|)
argument_list|,
name|splitBlobStore
operator|.
name|getInputStream
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|id
range|:
name|newBlobIds
control|)
block|{
name|assertStreamEquals
argument_list|(
name|newBlobStore
operator|.
name|getInputStream
argument_list|(
name|id
argument_list|)
argument_list|,
name|splitBlobStore
operator|.
name|getInputStream
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadByte
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|expected
init|=
operator|new
name|byte
index|[
name|LENGTH
index|]
decl_stmt|;
name|byte
index|[]
name|actual
init|=
operator|new
name|byte
index|[
name|LENGTH
index|]
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|oldBlobIds
control|)
block|{
name|oldBlobStore
operator|.
name|readBlob
argument_list|(
name|id
argument_list|,
literal|0
argument_list|,
name|expected
argument_list|,
literal|0
argument_list|,
name|LENGTH
argument_list|)
expr_stmt|;
name|splitBlobStore
operator|.
name|readBlob
argument_list|(
name|id
argument_list|,
literal|0
argument_list|,
name|actual
argument_list|,
literal|0
argument_list|,
name|LENGTH
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|id
range|:
name|newBlobIds
control|)
block|{
name|newBlobStore
operator|.
name|readBlob
argument_list|(
name|id
argument_list|,
literal|0
argument_list|,
name|expected
argument_list|,
literal|0
argument_list|,
name|LENGTH
argument_list|)
expr_stmt|;
name|splitBlobStore
operator|.
name|readBlob
argument_list|(
name|id
argument_list|,
literal|0
argument_list|,
name|actual
argument_list|,
literal|0
argument_list|,
name|LENGTH
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReferences
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|id
range|:
name|oldBlobIds
control|)
block|{
name|String
name|reference
init|=
name|splitBlobStore
operator|.
name|getReference
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|splitBlobStore
operator|.
name|getBlobId
argument_list|(
name|reference
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|id
range|:
name|newBlobIds
control|)
block|{
name|String
name|reference
init|=
name|splitBlobStore
operator|.
name|getReference
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|splitBlobStore
operator|.
name|getBlobId
argument_list|(
name|reference
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|addBlobs
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|LENGTH
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|InputStream
name|bis
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|blobStore
operator|.
name|writeBlob
argument_list|(
name|bis
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ids
return|;
block|}
specifier|private
specifier|static
name|void
name|assertStreamEquals
parameter_list|(
name|InputStream
name|expected
parameter_list|,
name|InputStream
name|actual
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|expectedByte
init|=
name|expected
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|actualByte
init|=
name|actual
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedByte
argument_list|,
name|actualByte
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedByte
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|assertArrayEquals
parameter_list|(
name|byte
index|[]
name|expected
parameter_list|,
name|byte
index|[]
name|actual
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|actual
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
index|[
name|i
index|]
argument_list|,
name|actual
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

