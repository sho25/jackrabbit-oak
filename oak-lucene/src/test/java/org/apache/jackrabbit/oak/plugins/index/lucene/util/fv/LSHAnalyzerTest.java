begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|fv
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|fv
operator|.
name|SimSearchUtils
operator|.
name|getSimQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Tests for {@link LSHAnalyzer}  */
end_comment

begin_class
specifier|public
class|class
name|LSHAnalyzerTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testTextFVIndexAndSearch
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fieldName
init|=
literal|"text"
decl_stmt|;
name|String
index|[]
name|texts
init|=
operator|new
name|String
index|[]
block|{
literal|"0.1,0.3,0.5,0.7,0.11,0.13,0.17,0.19,0.23,0.29"
block|,
literal|"0.1 0.3 0.5 0.7 0.11 0.13 0.17 0.19 0.23 0.29"
block|}
decl_stmt|;
for|for
control|(
name|String
name|text
range|:
name|texts
control|)
block|{
name|LSHAnalyzer
name|analyzer
init|=
operator|new
name|LSHAnalyzer
argument_list|()
decl_stmt|;
name|Directory
name|directory
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|directory
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|Version
operator|.
name|LUCENE_47
argument_list|,
name|analyzer
argument_list|)
argument_list|)
decl_stmt|;
name|DirectoryReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|fieldName
argument_list|,
name|text
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|reader
operator|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertSimQuery
argument_list|(
name|analyzer
argument_list|,
name|fieldName
argument_list|,
name|text
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBinaryFVIndexAndSearch
parameter_list|()
throws|throws
name|Exception
block|{
name|LSHAnalyzer
name|analyzer
init|=
operator|new
name|LSHAnalyzer
argument_list|()
decl_stmt|;
name|Directory
name|directory
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|directory
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|Version
operator|.
name|LUCENE_47
argument_list|,
name|analyzer
argument_list|)
argument_list|)
decl_stmt|;
name|DirectoryReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Double
argument_list|>
name|values
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|0.1d
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|0.3d
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|0.5d
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|0.7d
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|0.11d
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|0.13d
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|0.17d
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|0.19d
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|0.23d
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|0.29d
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|SimSearchUtils
operator|.
name|toByteArray
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|String
name|fvString
init|=
name|SimSearchUtils
operator|.
name|toDoubleString
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|String
name|fieldName
init|=
literal|"fvs"
decl_stmt|;
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|fieldName
argument_list|,
name|fvString
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|reader
operator|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertSimQuery
argument_list|(
name|analyzer
argument_list|,
name|fieldName
argument_list|,
name|fvString
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertSimQuery
parameter_list|(
name|LSHAnalyzer
name|analyzer
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
name|text
parameter_list|,
name|DirectoryReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|Query
name|booleanQuery
init|=
name|getSimQuery
argument_list|(
name|analyzer
argument_list|,
name|fieldName
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|booleanQuery
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

