begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|MongoConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|Clusterable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * abstract class that can be inherited by an IT who has to run tests against a cluster of  * DocumentMKs for having some utility methods available.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|DocumentClusterIT
block|{
name|List
argument_list|<
name|Repository
argument_list|>
name|repos
init|=
operator|new
name|ArrayList
argument_list|<
name|Repository
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DocumentMK
argument_list|>
name|mks
init|=
operator|new
name|ArrayList
argument_list|<
name|DocumentMK
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * the number of nodes we'd like to run against      */
specifier|static
specifier|final
name|int
name|NUM_CLUSTER_NODES
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"it.documentmk.cluster.nodes"
argument_list|,
literal|5
argument_list|)
decl_stmt|;
comment|/**      * credentials for logging in as {@code admin}      */
specifier|static
specifier|final
name|Credentials
name|ADMIN
init|=
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|int
name|NOT_PROVIDED
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|dropDB
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Repository
argument_list|>
name|rs
init|=
operator|new
name|ArrayList
argument_list|<
name|Repository
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DocumentMK
argument_list|>
name|ds
init|=
operator|new
name|ArrayList
argument_list|<
name|DocumentMK
argument_list|>
argument_list|()
decl_stmt|;
name|initRepository
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
name|rs
argument_list|,
name|ds
argument_list|,
literal|1
argument_list|,
name|NOT_PROVIDED
argument_list|)
expr_stmt|;
name|Repository
name|repository
init|=
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DocumentMK
name|mk
init|=
name|ds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|repository
operator|.
name|login
argument_list|(
name|ADMIN
argument_list|)
decl_stmt|;
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
name|dispose
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|mk
operator|.
name|dispose
argument_list|()
expr_stmt|;
comment|// closes connection as well
block|}
specifier|protected
name|void
name|dispose
parameter_list|(
annotation|@
name|NotNull
name|Repository
name|repo
parameter_list|)
block|{
name|AbstractRepositoryTest
operator|.
name|dispose
argument_list|(
name|checkNotNull
argument_list|(
name|repo
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Repository
name|repo
range|:
name|repos
control|)
block|{
name|dispose
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DocumentMK
name|mk
range|:
name|mks
control|)
block|{
name|mk
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
name|dropDB
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * raise the exception passed into the provided Map      *       * @param exceptions      * @param log may be null. If valid Logger it will be logged      * @throws Exception      */
specifier|static
name|void
name|raiseExceptions
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|exceptions
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|Logger
name|log
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|exceptions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|entry
range|:
name|exceptions
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception in thread {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
name|entry
operator|.
name|getValue
argument_list|()
throw|;
block|}
block|}
block|}
comment|/**      *<p>       * ensures that the cluster is aligned by running all the background operations      *</p>      *      * @param mks the list of {@link DocumentMK} composing the cluster. Cannot be null.      */
specifier|static
name|void
name|alignCluster
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|List
argument_list|<
name|DocumentMK
argument_list|>
name|mks
parameter_list|)
block|{
comment|// in a first round let all MKs run their background update
for|for
control|(
name|DocumentMK
name|mk
range|:
name|mks
control|)
block|{
name|mk
operator|.
name|getNodeStore
argument_list|()
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
block|}
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
comment|// in the second round each MK will pick up changes from the others
for|for
control|(
name|DocumentMK
name|mk
range|:
name|mks
control|)
block|{
comment|// invalidate root document to make sure background read
comment|// is forced to fetch the document from the store
name|mk
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|invalidateCache
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|mk
operator|.
name|getNodeStore
argument_list|()
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * set up the cluster connections. Same as {@link #setUpCluster(Class, List, List, int)}      * providing {@link #NOT_PROVIDED} as {@code asyncDelay}      *       * @param clazz class used for logging into Mongo itself      * @param mks the list of mks to work on.      * @param repos list of {@link Repository} created on each {@code mks}      * @throws Exception      */
name|void
name|setUpCluster
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
annotation|@
name|NotNull
specifier|final
name|List
argument_list|<
name|DocumentMK
argument_list|>
name|mks
parameter_list|,
annotation|@
name|NotNull
specifier|final
name|List
argument_list|<
name|Repository
argument_list|>
name|repos
parameter_list|)
throws|throws
name|Exception
block|{
name|setUpCluster
argument_list|(
name|clazz
argument_list|,
name|mks
argument_list|,
name|repos
argument_list|,
name|NOT_PROVIDED
argument_list|)
expr_stmt|;
block|}
comment|/**      * set up the cluster connections      *       * @param clazz class used for logging into Mongo itself      * @param mks the list of mks to work on      * @param repos list of {@link Repository} created on each {@code mks}      * @param asyncDelay the maximum delay for the cluster to sync with last revision. Use      *            {@link #NOT_PROVIDED} for implementation default. Use {@code 0} for switching to      *            manual and sync with {@link #alignCluster(List)}.      * @throws Exception      */
name|void
name|setUpCluster
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
annotation|@
name|NotNull
specifier|final
name|List
argument_list|<
name|DocumentMK
argument_list|>
name|mks
parameter_list|,
annotation|@
name|NotNull
specifier|final
name|List
argument_list|<
name|Repository
argument_list|>
name|repos
parameter_list|,
specifier|final
name|int
name|asyncDelay
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_CLUSTER_NODES
condition|;
name|i
operator|++
control|)
block|{
name|initRepository
argument_list|(
name|clazz
argument_list|,
name|repos
argument_list|,
name|mks
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|asyncDelay
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|MongoConnection
name|createConnection
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|OakMongoNSRepositoryStub
operator|.
name|createConnection
argument_list|(
name|checkNotNull
argument_list|(
name|clazz
argument_list|)
operator|.
name|getSimpleName
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|void
name|dropDB
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|Exception
block|{
name|MongoConnection
name|con
init|=
name|createConnection
argument_list|(
name|checkNotNull
argument_list|(
name|clazz
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|con
operator|.
name|getDatabase
argument_list|()
operator|.
name|drop
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * initialise the repository      *       * @param clazz the current class. Used for logging. Cannot be null.      * @param repos list to which add the created repository. Cannot be null.      * @param mks list to which add the created MK. Cannot be null.      * @param clusterId the cluster ID to use. Must be greater than 0.      * @param asyncDelay the async delay to set. For default use {@link #NOT_PROVIDED}      * @throws Exception      */
specifier|protected
name|void
name|initRepository
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
annotation|@
name|NotNull
specifier|final
name|List
argument_list|<
name|Repository
argument_list|>
name|repos
parameter_list|,
annotation|@
name|NotNull
specifier|final
name|List
argument_list|<
name|DocumentMK
argument_list|>
name|mks
parameter_list|,
specifier|final
name|int
name|clusterId
parameter_list|,
specifier|final
name|int
name|asyncDelay
parameter_list|)
throws|throws
name|Exception
block|{
name|DocumentMK
operator|.
name|Builder
name|builder
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|MongoConnection
name|c
init|=
name|createConnection
argument_list|(
name|checkNotNull
argument_list|(
name|clazz
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setMongoDB
argument_list|(
name|c
operator|.
name|getMongoClient
argument_list|()
argument_list|,
name|c
operator|.
name|getDBName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|asyncDelay
operator|!=
name|NOT_PROVIDED
condition|)
block|{
name|builder
operator|.
name|setAsyncDelay
argument_list|(
name|asyncDelay
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
name|DocumentMK
name|mk
init|=
name|builder
operator|.
name|open
argument_list|()
decl_stmt|;
name|Jcr
name|j
init|=
name|getJcr
argument_list|(
name|mk
operator|.
name|getNodeStore
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|IndexEditorProvider
argument_list|>
name|ieps
init|=
name|additionalIndexEditorProviders
argument_list|()
decl_stmt|;
if|if
condition|(
name|ieps
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|IndexEditorProvider
name|p
range|:
name|ieps
control|)
block|{
name|j
operator|=
name|j
operator|.
name|with
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isAsyncIndexing
argument_list|()
condition|)
block|{
name|j
operator|=
name|j
operator|.
name|withAsyncIndexing
argument_list|()
expr_stmt|;
block|}
name|Repository
name|repository
init|=
name|j
operator|.
name|createRepository
argument_list|()
decl_stmt|;
name|checkNotNull
argument_list|(
name|repos
argument_list|)
operator|.
name|add
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|mks
argument_list|)
operator|.
name|add
argument_list|(
name|mk
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Jcr
name|getJcr
parameter_list|(
annotation|@
name|NotNull
name|NodeStore
name|store
parameter_list|)
block|{
name|Jcr
name|j
init|=
operator|new
name|Jcr
argument_list|(
name|checkNotNull
argument_list|(
name|store
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|store
operator|instanceof
name|Clusterable
condition|)
block|{
name|j
operator|.
name|with
argument_list|(
operator|(
name|Clusterable
operator|)
name|store
argument_list|)
expr_stmt|;
block|}
return|return
name|j
return|;
block|}
comment|/**      *<p>      * the default {@link #initRepository(Class, List, List, int, int)} uses this for registering      * any additional {@link IndexEditorProvider}. Override and return all the provider you'd like      * to have running other than the OOTB one.      *</p>      *       *<p>      * the default implementation returns {@code null}      *</p>      * @return      */
specifier|protected
name|Set
argument_list|<
name|IndexEditorProvider
argument_list|>
name|additionalIndexEditorProviders
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * override to change default behaviour. If {@code true} will enable the async indexing in the      * cluster. Default is {@code false}      *       * @return      */
specifier|protected
name|boolean
name|isAsyncIndexing
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

