begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|ExerciseUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: User Management  * =============================================================================  *  * Title: Authorizable Removal and Group Membership  * -----------------------------------------------------------------------------  *  * Goal:  * Understand how the removal of a given authorizable affects it's group membership.  *  * Exercises:  *  * - {@link #testMemberAfterRecreation()}  *   Run the test and explain why after removal and re-creation the new user is  *   automatically member of the test group.  *  * - {@link #testNotMemberAfterRecreation()}  *   This is the same test as above but now the re-created test-user must not  *   be member of 'administrators'. How do you need to do in order to make the  *   test case pass?  *  *  * Additional Exercise:  * -----------------------------------------------------------------------------  *  * The following exercises can easily be performed in a Sling based repository  * installation (e.g. Granite|CQ) with the same setup as in this test class:  *  * 1. Test Setup  *  * - Login as 'admin'  * - Create a test-user and make it member of the 'administrators' group.  * - Create a second user 'uadmin:uadmin' and make sure it is granted all privileges  *   at the node of the test-user (Variant: make it member of 'user-administrators'.  * - Verify that your changes have been persisted.  *  * 2. Automatic Membership Cleanup  *  * - Configure your system such that membership cleanup is performed upon  *   removal of the test user.  *   Explain what you need to do (Hint: authorizable actions).  *  * 3. Test Execution with 'uadmin'  *  * - Logout  * - Login with the 'uadmin' user which can remove the test-user  * - Remove the test-user and persist the changes  * - Login as 'admin' again and test if the user has been removed; if yes, recreate  *   it and verify and if members-list at 'administrators' has been adjust (test-user removed).  *  * - Explain the result both for the main and variant.  *> the removal failed: explain why?  *> the member-cleanup didn't succeed: explain why?  *  * 4. Test Execution with 'admin'  *  * - Perform the same test as 'admin' and compare the result with 3.  * - Explain whats the difference and why it works.  *  *  * Advanced Exercise:  * -----------------------------------------------------------------------------  *  * - Discuss the possibilities Oak which could help to address the drawback you identified  *   with the {@link org.apache.jackrabbit.oak.spi.security.user.action.AuthorizableAction}  *   approach.  *  *  * Related Exercises:  * -----------------------------------------------------------------------------  *  * - {@link L9_RemoveAuthorizableTest ()}  *  *</pre>  *  * @see Group#addMember(org.apache.jackrabbit.api.security.user.Authorizable)  * @see Group#removeMember(org.apache.jackrabbit.api.security.user.Authorizable)  * @see Group#isMember(org.apache.jackrabbit.api.security.user.Authorizable)  * @see org.apache.jackrabbit.api.security.user.Authorizable#memberOf()  * @see org.apache.jackrabbit.oak.spi.security.user.action.ClearMembershipAction  */
end_comment

begin_class
specifier|public
class|class
name|L10_RemovalAndMembershipTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
name|User
name|user
decl_stmt|;
specifier|private
name|Group
name|administrators
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|user
operator|=
name|getTestUser
argument_list|()
expr_stmt|;
name|administrators
operator|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createGroup
argument_list|(
literal|"administrators"
argument_list|)
expr_stmt|;
name|administrators
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|administrators
operator|!=
literal|null
condition|)
block|{
name|administrators
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMemberAfterRecreation
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|CommitFailedException
block|{
comment|// remove the user
name|String
name|id
init|=
name|user
operator|.
name|getID
argument_list|()
decl_stmt|;
name|user
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// create a new user with the same ID
name|User
name|u
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createUser
argument_list|(
name|id
argument_list|,
name|ExerciseUtility
operator|.
name|TEST_PW
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// EXERCISE: explain why this user cannot be added as member?
name|assertFalse
argument_list|(
name|administrators
operator|.
name|addMember
argument_list|(
name|u
argument_list|)
argument_list|)
expr_stmt|;
comment|// EXERCISE: explain why is this user is still member of the test group?
name|assertTrue
argument_list|(
name|administrators
operator|.
name|isDeclaredMember
argument_list|(
name|u
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotMemberAfterRecreation
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|CommitFailedException
block|{
comment|// EXERCISE : adjust the test-case such that upon re-creation the user is not member of administrators.
comment|// HINT : do it right here
comment|// remove the user
name|String
name|id
init|=
name|user
operator|.
name|getID
argument_list|()
decl_stmt|;
name|user
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// create a new user with the same ID
name|User
name|u
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createUser
argument_list|(
name|id
argument_list|,
name|ExerciseUtility
operator|.
name|TEST_PW
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|administrators
operator|.
name|isDeclaredMember
argument_list|(
name|u
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

