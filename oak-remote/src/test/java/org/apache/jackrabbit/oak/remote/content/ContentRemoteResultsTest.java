begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|content
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|elementsEqual
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
specifier|public
class|class
name|ContentRemoteResultsTest
block|{
specifier|private
name|ContentRemoteResults
name|createContentRemoteResults
parameter_list|(
name|Result
name|result
parameter_list|)
block|{
return|return
operator|new
name|ContentRemoteResults
argument_list|(
name|createContentRemoteBinaries
argument_list|()
argument_list|,
name|result
argument_list|)
return|;
block|}
specifier|private
name|ContentRemoteBinaries
name|createContentRemoteBinaries
parameter_list|()
block|{
return|return
name|mock
argument_list|(
name|ContentRemoteBinaries
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTotal
parameter_list|()
block|{
name|Result
name|result
init|=
name|mock
argument_list|(
name|Result
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|42L
argument_list|)
operator|.
name|when
argument_list|(
name|result
argument_list|)
operator|.
name|getSize
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|42L
argument_list|,
name|createContentRemoteResults
argument_list|(
name|result
argument_list|)
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetColumns
parameter_list|()
block|{
name|String
index|[]
name|columns
init|=
block|{
literal|"a"
block|,
literal|"b"
block|}
decl_stmt|;
name|Result
name|result
init|=
name|mock
argument_list|(
name|Result
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|columns
argument_list|)
operator|.
name|when
argument_list|(
name|result
argument_list|)
operator|.
name|getColumnNames
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|elementsEqual
argument_list|(
name|asList
argument_list|(
name|columns
argument_list|)
argument_list|,
name|createContentRemoteResults
argument_list|(
name|result
argument_list|)
operator|.
name|getColumns
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSelectors
parameter_list|()
block|{
name|String
index|[]
name|selectors
init|=
block|{
literal|"a"
block|,
literal|"b"
block|}
decl_stmt|;
name|Result
name|result
init|=
name|mock
argument_list|(
name|Result
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|selectors
argument_list|)
operator|.
name|when
argument_list|(
name|result
argument_list|)
operator|.
name|getSelectorNames
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|elementsEqual
argument_list|(
name|asList
argument_list|(
name|selectors
argument_list|)
argument_list|,
name|createContentRemoteResults
argument_list|(
name|result
argument_list|)
operator|.
name|getSelectors
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

