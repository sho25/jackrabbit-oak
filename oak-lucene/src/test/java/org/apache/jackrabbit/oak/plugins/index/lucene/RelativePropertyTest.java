begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|InitialContent
operator|.
name|INITIAL_CONTENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|RelativePropertyTest
block|{
specifier|private
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
specifier|private
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|relativeProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|RelativeProperty
operator|.
name|isRelativeProperty
argument_list|(
literal|"foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|RelativeProperty
operator|.
name|isRelativeProperty
argument_list|(
literal|"foo/bar/baz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|RelativeProperty
operator|.
name|isRelativeProperty
argument_list|(
literal|"/foo/bar/baz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|RelativeProperty
operator|.
name|isRelativeProperty
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|RelativeProperty
operator|.
name|isRelativeProperty
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ancesstors
parameter_list|()
throws|throws
name|Exception
block|{
name|RelativeProperty
name|rp
init|=
operator|new
name|RelativeProperty
argument_list|(
literal|"foo/bar/baz/boom"
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"baz"
block|,
literal|"bar"
block|,
literal|"foo"
block|}
argument_list|,
name|rp
operator|.
name|ancestors
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPropDefnNode
parameter_list|()
throws|throws
name|Exception
block|{
name|RelativeProperty
name|rp
init|=
operator|new
name|RelativeProperty
argument_list|(
literal|"foo/bar/baz"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|child
argument_list|(
literal|"baz"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|NodeBuilder
name|propDefn
init|=
name|rp
operator|.
name|getPropDefnNode
argument_list|(
name|builder
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|propDefn
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|propDefn
operator|.
name|getString
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|RelativeProperty
name|rp
init|=
operator|new
name|RelativeProperty
argument_list|(
literal|"foo/bar/baz"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"baz"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|PropertyState
name|p
init|=
name|rp
operator|.
name|getProperty
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|RelativeProperty
name|rp2
init|=
operator|new
name|RelativeProperty
argument_list|(
literal|"a/b"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|rp2
operator|.
name|getProperty
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

