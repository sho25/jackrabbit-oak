begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|cli
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|text
operator|.
name|StrSubstitutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|cli
operator|.
name|blob
operator|.
name|BlobStoreFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|cli
operator|.
name|blob
operator|.
name|ConstantBlobStoreFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|cli
operator|.
name|blob
operator|.
name|DummyBlobStoreFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|cli
operator|.
name|blob
operator|.
name|FileBlobStoreFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|cli
operator|.
name|blob
operator|.
name|FileDataStoreFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|cli
operator|.
name|blob
operator|.
name|LoopbackBlobStoreFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|cli
operator|.
name|blob
operator|.
name|S3DataStoreFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|cli
operator|.
name|parser
operator|.
name|StoreType
operator|.
name|JCR2_DIR_XML
import|;
end_import

begin_comment
comment|/**  * This class parses the input provided by the user and analyses the given node stores  * in order to find out which datastore combination should be used for the migration.  *  * The desired outcome for the combinations of user input can be found in the table below.  * The table is a kind of heuristics that tries to match the user intentions.  *<pre>  * For sidegrade:  || src blobstore defined || src blobs embedded || dst blobstore defined || --copy-binaries || outcome src blobstore || outcome action  |   -                    |   -                 |  -                     |  -               |  missing               |  copy references¹  |   -                    |   -                 |  -                     |  +               |  missing               |  (x) not supported  |   -                    |   -                 |  +                     |  *               |  missing               |  (x) not supported  |   -                    |   +                 |  -                     |  *               |  embedded              |  copy to embedded  |   -                    |   +                 |  +                     |  *               |  embedded              |  copy to defined blobstore  |   +                    |   *                 |  -                     |  -               |  as in src             |  copy references  |   +                    |   *                 |  -                     |  +               |  as in src             |  copy to embedded  |   +                    |   *                 |  +                     |  *               |  as in src             |  copy to defined blobstore   ¹ - (x) not supported for SegmentMK -&gt; MongoMK migration   For upgrade:   || dst blobstore defined || --copy-binaries || outcome src blobstore || outcome action  |  -                     |  -               |  defined by JCR2       |  copy references  |  -                     |  +               |  defined by JCR2       |  copy to embedded  |  +                     |  *               |  defined by JCR2       |  copy to defined blobstore  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|DatastoreArguments
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DatastoreArguments
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|BlobStoreFactory
name|definedSrcBlob
decl_stmt|;
specifier|private
specifier|final
name|BlobStoreFactory
name|definedDstBlob
decl_stmt|;
specifier|private
specifier|final
name|StoreArguments
name|storeArguments
decl_stmt|;
specifier|private
specifier|final
name|BlobMigrationCase
name|blobMigrationCase
decl_stmt|;
specifier|private
specifier|final
name|MigrationOptions
name|options
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|srcEmbedded
decl_stmt|;
specifier|public
name|DatastoreArguments
parameter_list|(
name|MigrationOptions
name|options
parameter_list|,
name|StoreArguments
name|storeArguments
parameter_list|,
name|boolean
name|srcEmbedded
parameter_list|)
throws|throws
name|CliArgumentException
block|{
name|this
operator|.
name|storeArguments
operator|=
name|storeArguments
expr_stmt|;
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
name|this
operator|.
name|srcEmbedded
operator|=
name|srcEmbedded
expr_stmt|;
try|try
block|{
name|blobMigrationCase
operator|=
name|discoverBlobMigrationCase
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't figure out the right blob migration path"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CliArgumentException
argument_list|(
literal|1
argument_list|)
throw|;
block|}
if|if
condition|(
name|blobMigrationCase
operator|==
name|BlobMigrationCase
operator|.
name|UNSUPPORTED
condition|)
block|{
throw|throw
operator|new
name|CliArgumentException
argument_list|(
literal|"This combination of data- and node-stores is not supported"
argument_list|,
literal|1
argument_list|)
throw|;
block|}
try|try
block|{
name|definedSrcBlob
operator|=
name|options
operator|.
name|isSrcBlobStoreDefined
argument_list|()
condition|?
name|getDefinedSrcBlobStore
argument_list|()
else|:
literal|null
expr_stmt|;
name|definedDstBlob
operator|=
name|options
operator|.
name|isDstBlobStoreDefined
argument_list|()
condition|?
name|getDefinedDstBlobStore
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't read the blob configuration"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CliArgumentException
argument_list|(
literal|1
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
name|blobMigrationCase
operator|.
name|getDescription
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BlobStoreFactory
name|getSrcBlobStore
parameter_list|()
throws|throws
name|IOException
block|{
name|BlobStoreFactory
name|result
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|isSrcBlobStoreDefined
argument_list|()
condition|)
block|{
name|result
operator|=
name|definedSrcBlob
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|blobMigrationCase
operator|==
name|BlobMigrationCase
operator|.
name|COPY_REFERENCES
condition|)
block|{
name|result
operator|=
operator|new
name|LoopbackBlobStoreFactory
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|new
name|DummyBlobStoreFactory
argument_list|()
expr_stmt|;
comment|// embedded
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Source blob store: {}"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|BlobStoreFactory
name|getDstBlobStore
parameter_list|(
name|BlobStore
name|srcBlobStore
parameter_list|)
throws|throws
name|IOException
block|{
name|BlobStoreFactory
name|result
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|isDstBlobStoreDefined
argument_list|()
condition|)
block|{
name|result
operator|=
name|definedDstBlob
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|blobMigrationCase
operator|==
name|BlobMigrationCase
operator|.
name|COPY_REFERENCES
operator|&&
operator|(
name|options
operator|.
name|isSrcBlobStoreDefined
argument_list|()
operator|||
name|storeArguments
operator|.
name|getSrcType
argument_list|()
operator|==
name|JCR2_DIR_XML
operator|)
condition|)
block|{
name|result
operator|=
operator|new
name|ConstantBlobStoreFactory
argument_list|(
name|srcBlobStore
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|blobMigrationCase
operator|==
name|BlobMigrationCase
operator|.
name|COPY_REFERENCES
condition|)
block|{
name|result
operator|=
operator|new
name|LoopbackBlobStoreFactory
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|new
name|DummyBlobStoreFactory
argument_list|()
expr_stmt|;
comment|// embedded
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Destination blob store: {}"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|BlobStoreFactory
name|getDefinedSrcBlobStore
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|ignoreMissingBinaries
init|=
name|options
operator|.
name|isIgnoreMissingBinaries
argument_list|()
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|isSrcFbs
argument_list|()
condition|)
block|{
return|return
operator|new
name|FileBlobStoreFactory
argument_list|(
name|options
operator|.
name|getSrcFbs
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|options
operator|.
name|isSrcS3
argument_list|()
condition|)
block|{
return|return
operator|new
name|S3DataStoreFactory
argument_list|(
name|options
operator|.
name|getSrcS3Config
argument_list|()
argument_list|,
name|options
operator|.
name|getSrcS3
argument_list|()
argument_list|,
name|ignoreMissingBinaries
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|options
operator|.
name|isSrcFds
argument_list|()
condition|)
block|{
return|return
operator|new
name|FileDataStoreFactory
argument_list|(
name|options
operator|.
name|getSrcFds
argument_list|()
argument_list|,
name|ignoreMissingBinaries
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|BlobStoreFactory
name|getDefinedDstBlobStore
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|options
operator|.
name|isDstFbs
argument_list|()
condition|)
block|{
return|return
operator|new
name|FileBlobStoreFactory
argument_list|(
name|options
operator|.
name|getDstFbs
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|options
operator|.
name|isDstS3
argument_list|()
condition|)
block|{
return|return
operator|new
name|S3DataStoreFactory
argument_list|(
name|options
operator|.
name|getDstS3Config
argument_list|()
argument_list|,
name|options
operator|.
name|getDstS3
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|options
operator|.
name|isDstFds
argument_list|()
condition|)
block|{
return|return
operator|new
name|FileDataStoreFactory
argument_list|(
name|options
operator|.
name|getDstFds
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
enum|enum
name|BlobMigrationCase
block|{
name|COPY_REFERENCES
argument_list|(
literal|"Only blob references will be copied"
argument_list|)
block|,
name|EMBEDDED_TO_EMBEDDED
argument_list|(
literal|"Blobs embedded in ${srcnode} will be embedded in ${dstnode}"
argument_list|)
block|,
name|EMBEDDED_TO_EXTERNAL
argument_list|(
literal|"Blobs embedded in ${srcnode} will be copied to ${dstblob}"
argument_list|)
block|,
name|EXTERNAL_TO_EMBEDDED
argument_list|(
literal|"Blobs stored in ${srcblob} will be embedded in ${dstnode}"
argument_list|)
block|,
name|EXTERNAL_TO_EXTERNAL
argument_list|(
literal|"Blobs stored in ${srcblob} will be copied to ${dstblob}"
argument_list|)
block|,
name|UNSUPPORTED
argument_list|(
literal|"Unsupported case"
argument_list|)
block|;
specifier|private
specifier|final
name|String
name|description
decl_stmt|;
name|BlobMigrationCase
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
specifier|private
name|String
name|getDescription
parameter_list|(
name|DatastoreArguments
name|datastoreArguments
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"srcnode"
argument_list|,
name|datastoreArguments
operator|.
name|storeArguments
operator|.
name|getSrcDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"dstnode"
argument_list|,
name|datastoreArguments
operator|.
name|storeArguments
operator|.
name|getDstDescriptor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|datastoreArguments
operator|.
name|storeArguments
operator|.
name|getSrcType
argument_list|()
operator|==
name|JCR2_DIR_XML
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
literal|"srcblob"
argument_list|,
literal|"CRX2 datastore"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|.
name|put
argument_list|(
literal|"srcblob"
argument_list|,
name|datastoreArguments
operator|.
name|definedSrcBlob
operator|==
literal|null
condition|?
literal|"?"
else|:
name|datastoreArguments
operator|.
name|definedSrcBlob
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
literal|"dstblob"
argument_list|,
name|datastoreArguments
operator|.
name|definedDstBlob
operator|==
literal|null
condition|?
literal|"?"
else|:
name|datastoreArguments
operator|.
name|definedDstBlob
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|StrSubstitutor
name|subst
init|=
operator|new
name|StrSubstitutor
argument_list|(
name|map
argument_list|)
decl_stmt|;
return|return
name|subst
operator|.
name|replace
argument_list|(
name|description
argument_list|)
return|;
block|}
block|}
specifier|public
name|BlobMigrationCase
name|getBlobMigrationCase
parameter_list|()
block|{
return|return
name|blobMigrationCase
return|;
block|}
specifier|private
name|BlobMigrationCase
name|discoverBlobMigrationCase
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|srcDefined
init|=
name|options
operator|.
name|isSrcBlobStoreDefined
argument_list|()
operator|||
name|storeArguments
operator|.
name|getSrcType
argument_list|()
operator|==
name|JCR2_DIR_XML
decl_stmt|;
name|boolean
name|dstDefined
init|=
name|options
operator|.
name|isDstBlobStoreDefined
argument_list|()
decl_stmt|;
name|boolean
name|copyBinaries
init|=
name|options
operator|.
name|isCopyBinaries
argument_list|()
decl_stmt|;
name|boolean
name|srcSegment
init|=
name|storeArguments
operator|.
name|getSrcType
argument_list|()
operator|.
name|isSegment
argument_list|()
decl_stmt|;
name|boolean
name|dstSegment
init|=
name|storeArguments
operator|.
name|getDstType
argument_list|()
operator|.
name|isSegment
argument_list|()
decl_stmt|;
comment|// default case, no datastore-related arguments given, but blobs are stored externally
if|if
condition|(
operator|!
name|srcDefined
operator|&&
operator|!
name|dstDefined
operator|&&
operator|!
name|srcEmbedded
operator|&&
operator|!
name|copyBinaries
condition|)
block|{
if|if
condition|(
name|srcSegment
operator|&&
operator|!
name|dstSegment
condition|)
block|{
comment|// segment -> document is not supported for this case
return|return
name|BlobMigrationCase
operator|.
name|UNSUPPORTED
return|;
block|}
else|else
block|{
comment|// we try to copy references using MissingBlobStore
return|return
name|BlobMigrationCase
operator|.
name|COPY_REFERENCES
return|;
block|}
comment|// can't copy binaries if they are stored externally and we don't know where
block|}
elseif|else
if|if
condition|(
operator|!
name|srcDefined
operator|&&
operator|!
name|dstDefined
operator|&&
operator|!
name|srcEmbedded
operator|&&
name|copyBinaries
condition|)
block|{
return|return
name|BlobMigrationCase
operator|.
name|UNSUPPORTED
return|;
comment|// can't copy binaries if they are stored externally and we don't know where
comment|// (even if the destination datastore is defined)
block|}
elseif|else
if|if
condition|(
operator|!
name|srcDefined
operator|&&
operator|!
name|srcEmbedded
operator|&&
name|dstDefined
condition|)
block|{
return|return
name|BlobMigrationCase
operator|.
name|UNSUPPORTED
return|;
comment|// source is embedded and no destination given
block|}
elseif|else
if|if
condition|(
operator|!
name|srcDefined
operator|&&
name|srcEmbedded
operator|&&
operator|!
name|dstDefined
condition|)
block|{
return|return
name|BlobMigrationCase
operator|.
name|EMBEDDED_TO_EMBEDDED
return|;
comment|// source is embedded and the destination is given
block|}
elseif|else
if|if
condition|(
operator|!
name|srcDefined
operator|&&
name|srcEmbedded
operator|&&
name|dstDefined
condition|)
block|{
return|return
name|BlobMigrationCase
operator|.
name|EMBEDDED_TO_EXTERNAL
return|;
comment|// source is given, no destination, but also no --copy-binaries -> copy references
block|}
elseif|else
if|if
condition|(
name|srcDefined
operator|&&
operator|!
name|dstDefined
operator|&&
operator|!
name|copyBinaries
condition|)
block|{
return|return
name|BlobMigrationCase
operator|.
name|COPY_REFERENCES
return|;
comment|// source is given, no destination, but --copy-binaries -> copy to embedded
block|}
elseif|else
if|if
condition|(
name|srcDefined
operator|&&
operator|!
name|dstDefined
operator|&&
name|copyBinaries
condition|)
block|{
return|return
name|BlobMigrationCase
operator|.
name|EXTERNAL_TO_EMBEDDED
return|;
comment|// source and destination is given
block|}
elseif|else
if|if
condition|(
name|srcDefined
operator|&&
name|dstDefined
condition|)
block|{
return|return
name|BlobMigrationCase
operator|.
name|EXTERNAL_TO_EXTERNAL
return|;
block|}
return|return
name|BlobMigrationCase
operator|.
name|UNSUPPORTED
return|;
block|}
block|}
end_class

end_unit

