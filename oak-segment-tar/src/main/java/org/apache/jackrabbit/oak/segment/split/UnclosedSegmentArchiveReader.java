begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|split
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|binaries
operator|.
name|BinaryReferencesIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentArchiveReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_class
class|class
name|UnclosedSegmentArchiveReader
implements|implements
name|SegmentArchiveReader
block|{
specifier|private
specifier|final
name|SegmentArchiveReader
name|delegate
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Buffer
name|EMPTY_BINARY_REF
init|=
name|Buffer
operator|.
name|wrap
argument_list|(
name|BinaryReferencesIndexWriter
operator|.
name|newBinaryReferencesIndexWriter
argument_list|()
operator|.
name|write
argument_list|()
argument_list|)
operator|.
name|asReadOnlyBuffer
argument_list|()
decl_stmt|;
name|UnclosedSegmentArchiveReader
parameter_list|(
name|SegmentArchiveReader
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|Buffer
name|readSegment
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|readSegment
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsSegment
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|containsSegment
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SegmentArchiveEntry
argument_list|>
name|listSegments
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|listSegments
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|Buffer
name|getGraph
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|getGraph
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasGraph
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|hasGraph
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|NotNull
name|Buffer
name|getBinaryReferences
parameter_list|()
throws|throws
name|IOException
block|{
name|Buffer
name|buffer
init|=
name|delegate
operator|.
name|getBinaryReferences
argument_list|()
decl_stmt|;
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
return|return
name|EMPTY_BINARY_REF
return|;
block|}
else|else
block|{
return|return
name|buffer
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|length
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|length
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|NotNull
name|String
name|getName
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|delegate
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getEntrySize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getEntrySize
argument_list|(
name|size
argument_list|)
return|;
block|}
block|}
end_class

end_unit

