begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|WriterCacheManager
operator|.
name|Default
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|WriterCacheManager
operator|.
name|Empty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|WriteCacheManagerTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|emptyGenerations
parameter_list|()
block|{
name|WriterCacheManager
name|cache
init|=
name|Empty
operator|.
name|INSTANCE
decl_stmt|;
name|assertEquals
argument_list|(
name|cache
operator|.
name|getTemplateCache
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cache
operator|.
name|getTemplateCache
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cache
operator|.
name|getNodeCache
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cache
operator|.
name|getNodeCache
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cache
operator|.
name|getStringCache
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cache
operator|.
name|getStringCache
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nonEmptyGenerations
parameter_list|()
block|{
name|WriterCacheManager
name|cache
init|=
operator|new
name|Default
argument_list|()
decl_stmt|;
name|assertNotEquals
argument_list|(
name|cache
operator|.
name|getTemplateCache
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cache
operator|.
name|getTemplateCache
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|cache
operator|.
name|getNodeCache
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cache
operator|.
name|getNodeCache
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|cache
operator|.
name|getStringCache
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cache
operator|.
name|getStringCache
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|factory
parameter_list|()
block|{
name|WriterCacheManager
name|cache
init|=
operator|new
name|Default
argument_list|(
operator|new
name|Supplier
argument_list|<
name|RecordCache
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
name|int
name|accessCount
init|=
literal|2
decl_stmt|;
annotation|@
name|Override
specifier|public
name|RecordCache
argument_list|<
name|String
argument_list|>
name|get
parameter_list|()
block|{
name|assertTrue
argument_list|(
literal|"Factory should only be invoked once per generation"
argument_list|,
operator|--
name|accessCount
operator|>=
literal|0
argument_list|)
expr_stmt|;
return|return
name|RecordCache
operator|.
expr|<
name|String
operator|>
name|factory
argument_list|(
literal|42
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
block|}
argument_list|,
name|RecordCache
operator|.
expr|<
name|Template
operator|>
name|factory
argument_list|(
literal|42
argument_list|)
argument_list|,
name|NodeCache
operator|.
name|factory
argument_list|(
literal|42
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|cache
operator|.
name|getStringCache
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cache
operator|.
name|getStringCache
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cache
operator|.
name|getStringCache
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cache
operator|.
name|getStringCache
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cache
operator|.
name|getStringCache
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cache
operator|.
name|getStringCache
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

