begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|NotExecutableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * NestedGroupTest...  */
end_comment

begin_class
specifier|public
class|class
name|NestedGroupTest
extends|extends
name|AbstractUserTest
block|{
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Group
name|createGroup
parameter_list|(
name|Principal
name|p
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Group
name|gr
init|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
return|return
name|gr
return|;
block|}
specifier|private
name|void
name|removeGroup
parameter_list|(
name|Group
name|gr
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|gr
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|addMember
parameter_list|(
name|Group
name|gr
parameter_list|,
name|Authorizable
name|member
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|boolean
name|added
init|=
name|gr
operator|.
name|addMember
argument_list|(
name|member
argument_list|)
decl_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
return|return
name|added
return|;
block|}
specifier|private
name|boolean
name|removeMember
parameter_list|(
name|Group
name|gr
parameter_list|,
name|Authorizable
name|member
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|boolean
name|removed
init|=
name|gr
operator|.
name|removeMember
argument_list|(
name|member
argument_list|)
decl_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
return|return
name|removed
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddGroupAsMember
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|Group
name|gr1
init|=
literal|null
decl_stmt|;
name|Group
name|gr2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|gr1
operator|=
name|createGroup
argument_list|(
name|getTestPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|gr2
operator|=
name|createGroup
argument_list|(
name|getTestPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|gr1
operator|.
name|isMember
argument_list|(
name|gr2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|addMember
argument_list|(
name|gr1
argument_list|,
name|gr2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|gr1
operator|.
name|isMember
argument_list|(
name|gr2
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|gr1
operator|!=
literal|null
condition|)
block|{
name|removeMember
argument_list|(
name|gr1
argument_list|,
name|gr2
argument_list|)
expr_stmt|;
name|removeGroup
argument_list|(
name|gr1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gr2
operator|!=
literal|null
condition|)
block|{
name|removeGroup
argument_list|(
name|gr2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddCircularMembers
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|Group
name|gr1
init|=
literal|null
decl_stmt|;
name|Group
name|gr2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|gr1
operator|=
name|createGroup
argument_list|(
name|getTestPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|gr2
operator|=
name|createGroup
argument_list|(
name|getTestPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|addMember
argument_list|(
name|gr1
argument_list|,
name|gr2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|addMember
argument_list|(
name|gr2
argument_list|,
name|gr1
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|gr1
operator|!=
literal|null
operator|&&
name|gr1
operator|.
name|isMember
argument_list|(
name|gr2
argument_list|)
condition|)
block|{
name|removeMember
argument_list|(
name|gr1
argument_list|,
name|gr2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gr2
operator|!=
literal|null
operator|&&
name|gr2
operator|.
name|isMember
argument_list|(
name|gr1
argument_list|)
condition|)
block|{
name|removeMember
argument_list|(
name|gr2
argument_list|,
name|gr1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gr1
operator|!=
literal|null
condition|)
name|removeGroup
argument_list|(
name|gr1
argument_list|)
expr_stmt|;
if|if
condition|(
name|gr2
operator|!=
literal|null
condition|)
name|removeGroup
argument_list|(
name|gr2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCyclicMembers2
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|Group
name|gr1
init|=
literal|null
decl_stmt|;
name|Group
name|gr2
init|=
literal|null
decl_stmt|;
name|Group
name|gr3
init|=
literal|null
decl_stmt|;
try|try
block|{
name|gr1
operator|=
name|createGroup
argument_list|(
name|getTestPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|gr2
operator|=
name|createGroup
argument_list|(
name|getTestPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|gr3
operator|=
name|createGroup
argument_list|(
name|getTestPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|addMember
argument_list|(
name|gr1
argument_list|,
name|gr2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|addMember
argument_list|(
name|gr2
argument_list|,
name|gr3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|addMember
argument_list|(
name|gr3
argument_list|,
name|gr1
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|gr1
operator|!=
literal|null
condition|)
block|{
name|removeMember
argument_list|(
name|gr1
argument_list|,
name|gr2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gr2
operator|!=
literal|null
condition|)
block|{
name|removeMember
argument_list|(
name|gr2
argument_list|,
name|gr3
argument_list|)
expr_stmt|;
name|removeGroup
argument_list|(
name|gr2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gr3
operator|!=
literal|null
condition|)
block|{
name|removeMember
argument_list|(
name|gr3
argument_list|,
name|gr1
argument_list|)
expr_stmt|;
name|removeGroup
argument_list|(
name|gr3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gr1
operator|!=
literal|null
condition|)
name|removeGroup
argument_list|(
name|gr1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInheritedMembership
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|Group
name|gr1
init|=
literal|null
decl_stmt|;
name|Group
name|gr2
init|=
literal|null
decl_stmt|;
name|Group
name|gr3
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|superuser
operator|instanceof
name|JackrabbitSession
operator|)
condition|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|()
throw|;
block|}
try|try
block|{
name|gr1
operator|=
name|createGroup
argument_list|(
name|getTestPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|gr2
operator|=
name|createGroup
argument_list|(
name|getTestPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|gr3
operator|=
name|createGroup
argument_list|(
name|getTestPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|addMember
argument_list|(
name|gr1
argument_list|,
name|gr2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|addMember
argument_list|(
name|gr2
argument_list|,
name|gr3
argument_list|)
argument_list|)
expr_stmt|;
comment|// NOTE: don't test with Group.isMember for not required to detect
comment|// inherited membership -> rather with PrincipalManager.
name|boolean
name|isMember
init|=
literal|false
decl_stmt|;
name|PrincipalManager
name|pmgr
init|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getPrincipalManager
argument_list|()
decl_stmt|;
for|for
control|(
name|PrincipalIterator
name|it
init|=
name|pmgr
operator|.
name|getGroupMembership
argument_list|(
name|gr3
operator|.
name|getPrincipal
argument_list|()
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|isMember
condition|;
control|)
block|{
name|isMember
operator|=
name|it
operator|.
name|nextPrincipal
argument_list|()
operator|.
name|equals
argument_list|(
name|gr1
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|isMember
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|gr1
operator|!=
literal|null
operator|&&
name|gr1
operator|.
name|isMember
argument_list|(
name|gr2
argument_list|)
condition|)
block|{
name|removeMember
argument_list|(
name|gr1
argument_list|,
name|gr2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gr2
operator|!=
literal|null
operator|&&
name|gr2
operator|.
name|isMember
argument_list|(
name|gr3
argument_list|)
condition|)
block|{
name|removeMember
argument_list|(
name|gr2
argument_list|,
name|gr3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gr1
operator|!=
literal|null
condition|)
name|removeGroup
argument_list|(
name|gr1
argument_list|)
expr_stmt|;
if|if
condition|(
name|gr2
operator|!=
literal|null
condition|)
name|removeGroup
argument_list|(
name|gr2
argument_list|)
expr_stmt|;
if|if
condition|(
name|gr3
operator|!=
literal|null
condition|)
name|removeGroup
argument_list|(
name|gr3
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

