begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
operator|.
name|util
operator|.
name|OakIndexUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|OrderedIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|OrderedIndexBaseTest
extends|extends
name|AbstractTest
block|{
comment|/**      * the number of nodes created per iteration      */
specifier|static
specifier|final
name|int
name|NODES_PER_ITERATION
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"nodesPerIteration"
argument_list|,
literal|"100"
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * number of nodes that has to be added before performing the actual test      */
specifier|static
specifier|final
name|int
name|PRE_ADDED_NODES
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"preAddedNodes"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
comment|/**     * type of the created node     */
specifier|static
specifier|final
name|String
name|NODE_TYPE
init|=
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
decl_stmt|;
comment|/**     * property that will be indexed     */
specifier|static
specifier|final
name|String
name|INDEXED_PROPERTY
init|=
literal|"indexedProperty"
decl_stmt|;
comment|/**      * size of the batch for saving      */
specifier|static
specifier|final
name|int
name|BATCH_SAVING_SIZE
init|=
literal|1024
decl_stmt|;
comment|/**     * node name below which creating the test data     */
specifier|final
name|String
name|DUMP_NODE
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
name|TEST_ID
decl_stmt|;
comment|/**     * session used for operations throughout the test     */
name|Session
name|session
decl_stmt|;
comment|/**     * node under which all the test data will be filled in     */
name|Node
name|dump
decl_stmt|;
comment|/**      * insert a {@code numberOfNode} random nodes in the repository      *       * @param numberOfNodes      */
name|void
name|insertRandomNodes
parameter_list|(
name|int
name|numberOfNodes
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfNodes
condition|;
name|i
operator|++
control|)
block|{
name|String
name|uuid
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|dump
operator|.
name|addNode
argument_list|(
name|uuid
argument_list|,
name|NODE_TYPE
argument_list|)
operator|.
name|setProperty
argument_list|(
name|INDEXED_PROPERTY
argument_list|,
name|uuid
argument_list|)
expr_stmt|;
if|if
condition|(
name|isBatchSaving
argument_list|()
condition|)
block|{
if|if
condition|(
name|i
operator|%
name|BATCH_SAVING_SIZE
operator|==
literal|0
condition|)
block|{
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isBatchSaving
argument_list|()
condition|)
block|{
comment|// an extra save to catch any pending operations.
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**     * override when needed to define an index     */
name|void
name|defineIndex
parameter_list|()
throws|throws
name|Exception
block|{    }
name|Node
name|defineStandardPropertyIndex
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|Node
name|index
init|=
operator|new
name|OakIndexUtils
operator|.
name|PropertyIndex
argument_list|()
operator|.
name|property
argument_list|(
name|INDEXED_PROPERTY
argument_list|)
operator|.
name|create
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while creating the index definition. index node is null."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|PropertyIndexEditorProvider
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|index
operator|.
name|getProperty
argument_list|(
name|IndexConstants
operator|.
name|TYPE_PROPERTY_NAME
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The type of the index does not match the expected"
argument_list|)
throw|;
block|}
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
return|return
name|index
return|;
block|}
name|Node
name|defineOrderedPropertyIndex
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|Node
name|index
init|=
operator|new
name|OakIndexUtils
operator|.
name|PropertyIndex
argument_list|()
operator|.
name|property
argument_list|(
name|INDEXED_PROPERTY
argument_list|)
operator|.
name|create
argument_list|(
name|session
argument_list|,
name|OrderedIndex
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while creating the index definition. index node is null."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|OrderedIndex
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|index
operator|.
name|getProperty
argument_list|(
name|IndexConstants
operator|.
name|TYPE_PROPERTY_NAME
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The index type does not match the expected"
argument_list|)
throw|;
block|}
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
return|return
name|index
return|;
block|}
comment|/**      *       * @return true if you want batch saving during {@code insertRandomNodes} by      *         {@code BATCH_SAVE_SIZE}      */
name|boolean
name|isBatchSaving
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

