begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|FilteringAwareObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|FilteringObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|PrefilteringBackgroundObserverTest
block|{
specifier|private
specifier|final
name|boolean
name|EXCLUDED
init|=
literal|true
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|INCLUDED
init|=
literal|false
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Runnable
argument_list|>
name|runnableQ
decl_stmt|;
specifier|private
name|ExecutorService
name|executor
decl_stmt|;
specifier|private
name|CompositeObserver
name|compositeObserver
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ContentChanged
argument_list|>
name|received
decl_stmt|;
specifier|private
name|FilteringObserver
name|filteringObserver
decl_stmt|;
specifier|private
name|CommitInfo
name|includingCommitInfo
init|=
operator|new
name|CommitInfo
argument_list|(
literal|"includingSession"
argument_list|,
name|CommitInfo
operator|.
name|OAK_UNKNOWN
argument_list|)
decl_stmt|;
specifier|private
name|CommitInfo
name|excludingCommitInfo
init|=
operator|new
name|CommitInfo
argument_list|(
literal|"excludingSession"
argument_list|,
name|CommitInfo
operator|.
name|OAK_UNKNOWN
argument_list|)
decl_stmt|;
specifier|private
name|int
name|resetCallCnt
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|(
name|int
name|queueLength
parameter_list|)
throws|throws
name|Exception
block|{
name|runnableQ
operator|=
operator|new
name|LinkedList
argument_list|<
name|Runnable
argument_list|>
argument_list|()
expr_stmt|;
name|executor
operator|=
operator|new
name|EnqueuingExecutorService
argument_list|(
name|runnableQ
argument_list|)
expr_stmt|;
name|compositeObserver
operator|=
operator|new
name|CompositeObserver
argument_list|()
expr_stmt|;
name|received
operator|=
operator|new
name|LinkedList
argument_list|<
name|ContentChanged
argument_list|>
argument_list|()
expr_stmt|;
name|filteringObserver
operator|=
operator|new
name|FilteringObserver
argument_list|(
name|executor
argument_list|,
name|queueLength
argument_list|,
operator|new
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|excludes
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|==
name|includingCommitInfo
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|info
operator|==
name|excludingCommitInfo
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|info
operator|.
name|isExternal
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"only supporting include or exclude"
argument_list|)
throw|;
block|}
block|}
argument_list|,
operator|new
name|FilteringAwareObserver
argument_list|()
block|{
name|NodeState
name|previous
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|contentChanged
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
name|received
operator|.
name|add
argument_list|(
operator|new
name|ContentChanged
argument_list|(
name|after
argument_list|,
name|info
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|previous
operator|!=
literal|null
operator|&&
name|previous
operator|!=
name|before
condition|)
block|{
name|resetCallCnt
operator|++
expr_stmt|;
block|}
name|previous
operator|=
name|after
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|compositeObserver
operator|.
name|addObserver
argument_list|(
name|filteringObserver
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
class|class
name|EnqueuingExecutorService
extends|extends
name|AbstractExecutorService
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Runnable
argument_list|>
name|runnableQ
decl_stmt|;
specifier|private
name|EnqueuingExecutorService
parameter_list|(
name|List
argument_list|<
name|Runnable
argument_list|>
name|runnableQ
parameter_list|)
block|{
name|this
operator|.
name|runnableQ
operator|=
name|runnableQ
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
name|runnableQ
operator|.
name|add
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Runnable
argument_list|>
name|shutdownNow
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"nyi"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"nyi"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTerminated
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"nyi"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isShutdown
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"nyi"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|awaitTermination
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"nyi"
argument_list|)
throw|;
block|}
block|}
class|class
name|ContentChanged
block|{
name|NodeState
name|root
decl_stmt|;
name|CommitInfo
name|info
decl_stmt|;
name|ContentChanged
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|executeRunnables
parameter_list|(
specifier|final
name|List
argument_list|<
name|Runnable
argument_list|>
name|runnableQ
parameter_list|,
name|int
name|num
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|Runnable
name|runnable
range|:
operator|new
name|ArrayList
argument_list|<
name|Runnable
argument_list|>
argument_list|(
name|runnableQ
argument_list|)
control|)
block|{
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|NodeState
name|p
parameter_list|(
name|int
name|k
parameter_list|)
block|{
return|return
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|k
argument_list|)
operator|.
name|getNodeState
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFlipping
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|queueLength
init|=
literal|2000
decl_stmt|;
name|init
argument_list|(
name|queueLength
argument_list|)
expr_stmt|;
comment|// initialize observer with an initial contentChanged
comment|// (see ChangeDispatcher#addObserver)
block|{
name|compositeObserver
operator|.
name|contentChanged
argument_list|(
name|p
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|CommitInfo
operator|.
name|EMPTY_EXTERNAL
argument_list|)
expr_stmt|;
block|}
comment|// Part 1 : first run with filtersEvaluatedMapWithEmptyObservers - empty or null shouldn't matter, it's excluded in both cases
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|1000
condition|;
name|k
operator|++
control|)
block|{
name|CommitInfo
name|info
decl_stmt|;
if|if
condition|(
name|k
operator|%
literal|2
operator|==
literal|1
condition|)
block|{
name|info
operator|=
name|includingCommitInfo
expr_stmt|;
block|}
else|else
block|{
name|info
operator|=
name|excludingCommitInfo
expr_stmt|;
block|}
specifier|final
name|NodeState
name|p
init|=
name|p
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|compositeObserver
operator|.
name|contentChanged
argument_list|(
name|p
argument_list|,
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
name|executeRunnables
argument_list|(
name|runnableQ
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
name|executeRunnables
argument_list|(
name|runnableQ
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|received
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// changed from 501 with OAK-5121
name|assertEquals
argument_list|(
literal|499
argument_list|,
name|resetCallCnt
argument_list|)
expr_stmt|;
comment|// changed from 500 with OAK-5121
comment|// Part 2 : run with filtersEvaluatedMapWithNullObservers - empty or null shouldn't matter, it's excluded in both cases
name|received
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resetCallCnt
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|1000
condition|;
name|k
operator|++
control|)
block|{
name|CommitInfo
name|info
decl_stmt|;
if|if
condition|(
name|k
operator|%
literal|2
operator|==
literal|1
condition|)
block|{
name|info
operator|=
name|includingCommitInfo
expr_stmt|;
block|}
else|else
block|{
name|info
operator|=
name|excludingCommitInfo
expr_stmt|;
block|}
specifier|final
name|NodeState
name|p
init|=
name|p
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|compositeObserver
operator|.
name|contentChanged
argument_list|(
name|p
argument_list|,
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
name|executeRunnables
argument_list|(
name|runnableQ
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
name|executeRunnables
argument_list|(
name|runnableQ
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|received
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|resetCallCnt
argument_list|)
expr_stmt|;
comment|// Part 3 : unlike the method name suggests, this variant tests with the filter disabled, so should receive all events normally
name|received
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resetCallCnt
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|1000
condition|;
name|k
operator|++
control|)
block|{
name|CommitInfo
name|info
decl_stmt|;
if|if
condition|(
name|k
operator|%
literal|2
operator|==
literal|1
condition|)
block|{
name|info
operator|=
name|includingCommitInfo
expr_stmt|;
block|}
else|else
block|{
name|info
operator|=
name|includingCommitInfo
expr_stmt|;
block|}
specifier|final
name|NodeState
name|p
init|=
name|p
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|compositeObserver
operator|.
name|contentChanged
argument_list|(
name|p
argument_list|,
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
name|executeRunnables
argument_list|(
name|runnableQ
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
name|executeRunnables
argument_list|(
name|runnableQ
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|received
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resetCallCnt
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFlipping2
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFullQueue
argument_list|(
literal|6
argument_list|,
operator|new
name|TestPattern
argument_list|(
name|INCLUDED
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|TestPattern
argument_list|(
name|EXCLUDED
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|TestPattern
argument_list|(
name|INCLUDED
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|TestPattern
argument_list|(
name|EXCLUDED
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|TestPattern
argument_list|(
name|INCLUDED
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueueNotFull
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFullQueue
argument_list|(
literal|20
argument_list|,
comment|// start: empty queue
operator|new
name|TestPattern
argument_list|(
name|EXCLUDED
argument_list|,
literal|1000
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
comment|// here: still empty, just the previousRoot is set to remember above NOOPs
operator|new
name|TestPattern
argument_list|(
name|INCLUDED
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
comment|// here: 5 changes are in the queue, the queue fits 20, way to go
operator|new
name|TestPattern
argument_list|(
name|EXCLUDED
argument_list|,
literal|500
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
comment|// still 5 in the queue
operator|new
name|TestPattern
argument_list|(
name|INCLUDED
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
comment|// now we added 2, queue still not full
operator|new
name|TestPattern
argument_list|(
name|EXCLUDED
argument_list|,
literal|0
comment|/* only flush*/
argument_list|,
literal|true
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncludeOnQueueFull
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFullQueue
argument_list|(
literal|7
argument_list|,
comment|// start: empty queue
operator|new
name|TestPattern
argument_list|(
name|EXCLUDED
argument_list|,
literal|1000
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
comment|// here: still empty, just the previousRoot is set to remember above NOOPs
operator|new
name|TestPattern
argument_list|(
name|INCLUDED
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
argument_list|,
comment|// here: 1 init and 5 changes are in the queue, the queue fits 7, so queue is almost full
operator|new
name|TestPattern
argument_list|(
name|EXCLUDED
argument_list|,
literal|500
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|,
literal|6
argument_list|)
argument_list|,
comment|// still 6 in the queue, of 7
comment|// due to OAK-5740 the last entry is now an include
operator|new
name|TestPattern
argument_list|(
name|INCLUDED
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
argument_list|,
comment|// so with OAK-5740 we now will get 6 includes, not 5
operator|new
name|TestPattern
argument_list|(
name|EXCLUDED
argument_list|,
literal|0
comment|/* only flush*/
argument_list|,
literal|true
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExcludeOnQueueFull2
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFullQueue
argument_list|(
literal|1
argument_list|,
comment|// start: empty queue
operator|new
name|TestPattern
argument_list|(
name|INCLUDED
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|TestPattern
argument_list|(
name|EXCLUDED
argument_list|,
literal|0
comment|/* only flush*/
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|TestPattern
argument_list|(
name|INCLUDED
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|TestPattern
argument_list|(
name|EXCLUDED
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|TestPattern
argument_list|(
name|INCLUDED
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|TestPattern
argument_list|(
name|EXCLUDED
argument_list|,
literal|0
comment|/* only flush*/
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|TestPattern
argument_list|(
name|INCLUDED
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|TestPattern
argument_list|(
name|EXCLUDED
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|TestPattern
argument_list|(
name|EXCLUDED
argument_list|,
literal|0
comment|/* only flush*/
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|TestPattern
argument_list|(
name|EXCLUDED
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|TestPattern
argument_list|(
name|INCLUDED
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|TestPattern
argument_list|(
name|EXCLUDED
argument_list|,
literal|0
comment|/* only flush*/
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExcludeOnQueueFull1
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFullQueue
argument_list|(
literal|4
argument_list|,
comment|// start: empty queue
operator|new
name|TestPattern
argument_list|(
name|EXCLUDED
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
comment|// here: still empty, just the previousRoot is set to remember above NOOP
operator|new
name|TestPattern
argument_list|(
name|INCLUDED
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
comment|// here: 3 changes are in the queue, the queue fits 3, so it just got full now
operator|new
name|TestPattern
argument_list|(
name|EXCLUDED
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|,
comment|// still full but it's ignored, so doesn't have any queue length effect
operator|new
name|TestPattern
argument_list|(
name|INCLUDED
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|,
comment|// adding 3 will not work, it will result in an overflow entry
operator|new
name|TestPattern
argument_list|(
name|EXCLUDED
argument_list|,
literal|0
comment|/* only flush*/
argument_list|,
literal|true
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|TestPattern
argument_list|(
name|INCLUDED
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|TestPattern
argument_list|(
name|EXCLUDED
argument_list|,
literal|0
comment|/* only flush*/
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
class|class
name|TestPattern
block|{
specifier|final
name|boolean
name|flush
decl_stmt|;
specifier|final
name|boolean
name|excluded
decl_stmt|;
specifier|final
name|int
name|numEvents
decl_stmt|;
specifier|final
name|int
name|expectedNumEvents
decl_stmt|;
specifier|final
name|int
name|expectedNumResetCalls
decl_stmt|;
specifier|private
name|int
name|expectedQueueSizeAtStart
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
name|expectedQueueSizeAtEnd
init|=
operator|-
literal|1
decl_stmt|;
name|TestPattern
parameter_list|(
name|boolean
name|excluded
parameter_list|,
name|int
name|numEvents
parameter_list|,
name|boolean
name|flush
parameter_list|,
name|int
name|expectedNumEvents
parameter_list|,
name|int
name|expectedNumResetCalls
parameter_list|)
block|{
name|this
operator|.
name|flush
operator|=
name|flush
expr_stmt|;
name|this
operator|.
name|excluded
operator|=
name|excluded
expr_stmt|;
name|this
operator|.
name|numEvents
operator|=
name|numEvents
expr_stmt|;
name|this
operator|.
name|expectedNumEvents
operator|=
name|expectedNumEvents
expr_stmt|;
name|this
operator|.
name|expectedNumResetCalls
operator|=
name|expectedNumResetCalls
expr_stmt|;
block|}
name|TestPattern
parameter_list|(
name|boolean
name|excluded
parameter_list|,
name|int
name|numEvents
parameter_list|,
name|boolean
name|flush
parameter_list|,
name|int
name|expectedNumEvents
parameter_list|,
name|int
name|expectedNumResetCalls
parameter_list|,
name|int
name|expectedQueueSizeAtStart
parameter_list|,
name|int
name|expectedQueueSizeAtEnd
parameter_list|)
block|{
name|this
argument_list|(
name|excluded
argument_list|,
name|numEvents
argument_list|,
name|flush
argument_list|,
name|expectedNumEvents
argument_list|,
name|expectedNumResetCalls
argument_list|)
expr_stmt|;
name|this
operator|.
name|expectedQueueSizeAtStart
operator|=
name|expectedQueueSizeAtStart
expr_stmt|;
name|this
operator|.
name|expectedQueueSizeAtEnd
operator|=
name|expectedQueueSizeAtEnd
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"excluded="
operator|+
name|excluded
operator|+
literal|", numEvents="
operator|+
name|numEvents
operator|+
literal|", flush="
operator|+
name|flush
operator|+
literal|", expectedNumEvents="
operator|+
name|expectedNumEvents
operator|+
literal|", expectedNumResetCalls="
operator|+
name|expectedNumResetCalls
return|;
block|}
block|}
specifier|private
name|void
name|doTestFullQueue
parameter_list|(
name|int
name|queueLength
parameter_list|,
name|TestPattern
modifier|...
name|testPatterns
parameter_list|)
throws|throws
name|Exception
block|{
name|init
argument_list|(
name|queueLength
argument_list|)
expr_stmt|;
comment|// initialize observer with an initial contentChanged
comment|// (see ChangeDispatcher#addObserver)
block|{
name|compositeObserver
operator|.
name|contentChanged
argument_list|(
name|p
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|CommitInfo
operator|.
name|EMPTY_EXTERNAL
argument_list|)
expr_stmt|;
block|}
comment|// remove above first event right away
name|executeRunnables
argument_list|(
name|runnableQ
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|received
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resetCallCnt
operator|=
literal|0
expr_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
name|int
name|loopCnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TestPattern
name|testPattern
range|:
name|testPatterns
control|)
block|{
name|k
operator|++
expr_stmt|;
if|if
condition|(
name|testPattern
operator|.
name|expectedQueueSizeAtStart
operator|>=
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|"loopCnt="
operator|+
name|loopCnt
operator|+
literal|", queue size mis-match at start"
argument_list|,
name|testPattern
operator|.
name|expectedQueueSizeAtStart
argument_list|,
name|filteringObserver
operator|.
name|getBackgroundObserver
argument_list|()
operator|.
name|getMBean
argument_list|()
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testPattern
operator|.
name|numEvents
condition|;
name|i
operator|++
control|)
block|{
name|CommitInfo
name|info
decl_stmt|;
if|if
condition|(
operator|!
name|testPattern
operator|.
name|excluded
condition|)
block|{
name|info
operator|=
name|includingCommitInfo
expr_stmt|;
block|}
else|else
block|{
name|info
operator|=
name|excludingCommitInfo
expr_stmt|;
block|}
name|k
operator|++
expr_stmt|;
name|compositeObserver
operator|.
name|contentChanged
argument_list|(
name|p
argument_list|(
name|k
argument_list|)
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|testPattern
operator|.
name|flush
condition|)
block|{
name|executeRunnables
argument_list|(
name|runnableQ
argument_list|,
name|testPattern
operator|.
name|numEvents
operator|+
name|testPattern
operator|.
name|expectedNumEvents
operator|+
name|testPattern
operator|.
name|expectedNumResetCalls
operator|+
literal|10
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"loopCnt="
operator|+
name|loopCnt
argument_list|,
name|testPattern
operator|.
name|expectedNumEvents
argument_list|,
name|received
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"loopCnt="
operator|+
name|loopCnt
argument_list|,
name|testPattern
operator|.
name|expectedNumResetCalls
argument_list|,
name|resetCallCnt
argument_list|)
expr_stmt|;
name|received
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resetCallCnt
operator|=
literal|0
expr_stmt|;
name|loopCnt
operator|++
expr_stmt|;
if|if
condition|(
name|testPattern
operator|.
name|expectedQueueSizeAtEnd
operator|>=
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|"loopCnt="
operator|+
name|loopCnt
operator|+
literal|", queue size mis-match at end"
argument_list|,
name|testPattern
operator|.
name|expectedQueueSizeAtEnd
argument_list|,
name|filteringObserver
operator|.
name|getBackgroundObserver
argument_list|()
operator|.
name|getMBean
argument_list|()
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

