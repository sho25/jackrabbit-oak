begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|AbstractChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_comment
comment|/**  * Same as for {@link ContentMirrorStoreStrategy} but the order of the keys is kept by using the  * following structure  *   *<code>  *  :index : {  *      :start : { :next = n1 },  *      n0 : { /content/foo/bar(match=true), :next=n3 },  *      n1 : { /content/foo1/bar(match=true), :next=n0 },  *      n2 : { /content/foo2/bar(match=true), :next= }, //this is the end of the list  *      n3 : { /content/foo3/bar(match=true), :next=n2 }  *  }  *</code>  */
end_comment

begin_class
specifier|public
class|class
name|OrderedContentMirrorStoreStrategy
extends|extends
name|ContentMirrorStoreStrategy
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OrderedContentMirrorStoreStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * the property linking to the next node      */
specifier|public
specifier|static
specifier|final
name|String
name|NEXT
init|=
literal|":next"
decl_stmt|;
comment|/**      * node that works as root of the index (start point or 0 element)      */
specifier|public
specifier|static
specifier|final
name|String
name|START
init|=
literal|":start"
decl_stmt|;
comment|/**      * a NodeState used for easy creating of an empty :start      */
specifier|public
specifier|static
specifier|final
name|NodeState
name|EMPTY_START_NODE
init|=
name|EmptyNodeState
operator|.
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
operator|.
name|setProperty
argument_list|(
name|NEXT
argument_list|,
literal|""
argument_list|)
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
annotation|@
name|Override
name|NodeBuilder
name|fetchKeyNode
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|index
parameter_list|,
annotation|@
name|Nonnull
name|String
name|key
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"fetchKeyNode() - index: {} - key: {}"
argument_list|,
name|index
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|NodeBuilder
name|localkey
init|=
literal|null
decl_stmt|;
name|NodeBuilder
name|start
init|=
name|index
operator|.
name|child
argument_list|(
name|START
argument_list|)
decl_stmt|;
comment|// identifying the right place for insert
name|String
name|n
init|=
name|start
operator|.
name|getString
argument_list|(
name|NEXT
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|n
argument_list|)
condition|)
block|{
comment|// new/empty index
name|localkey
operator|=
name|index
operator|.
name|child
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|localkey
operator|.
name|setProperty
argument_list|(
name|NEXT
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|start
operator|.
name|setProperty
argument_list|(
name|NEXT
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// specific use-case where the item has to be added as first of the list
name|String
name|nextKey
init|=
name|n
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|compareTo
argument_list|(
name|nextKey
argument_list|)
operator|<
literal|0
condition|)
block|{
name|localkey
operator|=
name|index
operator|.
name|child
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|localkey
operator|.
name|setProperty
argument_list|(
name|NEXT
argument_list|,
name|nextKey
argument_list|)
expr_stmt|;
name|start
operator|.
name|setProperty
argument_list|(
name|NEXT
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|children
init|=
name|getChildNodeEntries
argument_list|(
name|index
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|child
range|:
name|children
control|)
block|{
name|nextKey
operator|=
name|child
operator|.
name|getNodeState
argument_list|()
operator|.
name|getString
argument_list|(
name|NEXT
argument_list|)
expr_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|nextKey
argument_list|)
condition|)
block|{
comment|// we're at the last element, therefore our 'key' has to be appended
name|index
operator|.
name|getChildNode
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setProperty
argument_list|(
name|NEXT
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|localkey
operator|=
name|index
operator|.
name|child
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|localkey
operator|.
name|setProperty
argument_list|(
name|NEXT
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|key
operator|.
name|compareTo
argument_list|(
name|nextKey
argument_list|)
operator|<
literal|0
condition|)
block|{
name|index
operator|.
name|getChildNode
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setProperty
argument_list|(
name|NEXT
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|localkey
operator|=
name|index
operator|.
name|child
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|localkey
operator|.
name|setProperty
argument_list|(
name|NEXT
argument_list|,
name|nextKey
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
return|return
name|localkey
return|;
block|}
annotation|@
name|Override
name|void
name|prune
parameter_list|(
specifier|final
name|NodeBuilder
name|index
parameter_list|,
specifier|final
name|Deque
argument_list|<
name|NodeBuilder
argument_list|>
name|builders
parameter_list|)
block|{
for|for
control|(
name|NodeBuilder
name|node
range|:
name|builders
control|)
block|{
if|if
condition|(
name|node
operator|.
name|hasProperty
argument_list|(
literal|"match"
argument_list|)
operator|||
name|node
operator|.
name|getChildNodeCount
argument_list|(
literal|1
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|hasProperty
argument_list|(
name|NEXT
argument_list|)
condition|)
block|{
comment|// it's an index key and we have to relink the list
name|ChildNodeEntry
name|previous
init|=
name|findPrevious
argument_list|(
name|index
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|node
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
comment|// (1) find the
comment|// previous element
name|log
operator|.
name|debug
argument_list|(
literal|"previous: {}"
argument_list|,
name|previous
argument_list|)
expr_stmt|;
name|String
name|next
init|=
name|node
operator|.
name|getString
argument_list|(
name|NEXT
argument_list|)
decl_stmt|;
comment|// (2) find the next element
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
name|next
operator|=
literal|""
expr_stmt|;
block|}
comment|// (3) re-link the previous to the next
name|index
operator|.
name|getChildNode
argument_list|(
name|previous
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setProperty
argument_list|(
name|NEXT
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Nullable
name|ChildNodeEntry
name|findPrevious
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeState
name|index
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|NodeState
name|node
parameter_list|)
block|{
name|ChildNodeEntry
name|previous
init|=
literal|null
decl_stmt|;
name|ChildNodeEntry
name|current
init|=
literal|null
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|it
init|=
name|getChildNodeEntries
argument_list|(
name|index
argument_list|,
literal|true
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|found
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|current
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
comment|// first iteration
name|previous
operator|=
name|current
expr_stmt|;
block|}
else|else
block|{
name|found
operator|=
name|node
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|previous
operator|=
name|current
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
name|found
operator|)
condition|?
name|previous
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|NodeBuilder
name|index
parameter_list|,
name|String
name|path
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|beforeKeys
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|afterKeys
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"update() - index     : {}"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"update() - path      : {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"update() - beforeKeys: {}"
argument_list|,
name|beforeKeys
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"update() - afterKeys : {}"
argument_list|,
name|afterKeys
argument_list|)
expr_stmt|;
name|super
operator|.
name|update
argument_list|(
name|index
argument_list|,
name|path
argument_list|,
name|beforeKeys
argument_list|,
name|afterKeys
argument_list|)
expr_stmt|;
block|}
comment|/**      * retrieve an Iterable for going through the index in the right order without the :start node      *       * @param index the root of the index (:index)      * @return      */
annotation|@
name|Override
annotation|@
name|Nonnull
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeState
name|index
parameter_list|)
block|{
return|return
name|getChildNodeEntries
argument_list|(
name|index
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Retrieve an Iterable for going through the index in the right order with potentially the      * :start node      *       * @param index the root of the index (:index)      * @param includeStart true if :start should be included as first element      * @return      */
annotation|@
name|Nonnull
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeState
name|index
parameter_list|,
specifier|final
name|boolean
name|includeStart
parameter_list|)
block|{
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|cne
init|=
literal|null
decl_stmt|;
specifier|final
name|NodeState
name|start
init|=
name|index
operator|.
name|getChildNode
argument_list|(
name|START
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|start
operator|.
name|exists
argument_list|()
operator|||
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|start
operator|.
name|getString
argument_list|(
name|NEXT
argument_list|)
argument_list|)
operator|)
operator|&&
operator|!
name|includeStart
condition|)
block|{
comment|// if the property is not there or is empty it means we're empty
name|cne
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cne
operator|=
operator|new
name|Iterable
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
specifier|private
name|NodeState
name|localIndex
init|=
name|index
decl_stmt|;
specifier|private
name|NodeState
name|localStart
init|=
operator|(
operator|(
name|includeStart
operator|&&
operator|!
name|start
operator|.
name|exists
argument_list|()
operator|)
condition|?
name|EMPTY_START_NODE
else|:
name|start
operator|)
decl_stmt|;
specifier|private
name|NodeState
name|current
init|=
name|localStart
decl_stmt|;
specifier|private
name|boolean
name|localIncludeStart
init|=
name|includeStart
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|(
operator|(
name|localIncludeStart
operator|&&
name|localStart
operator|.
name|equals
argument_list|(
name|current
argument_list|)
operator|)
operator|||
operator|(
operator|!
name|localIncludeStart
operator|&&
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|current
operator|.
name|getString
argument_list|(
name|NEXT
argument_list|)
argument_list|)
operator|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ChildNodeEntry
name|next
parameter_list|()
block|{
name|ChildNodeEntry
name|localCNE
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|localIncludeStart
operator|&&
name|localStart
operator|.
name|equals
argument_list|(
name|current
argument_list|)
condition|)
block|{
name|localCNE
operator|=
operator|new
name|OrderedChildNodeEntry
argument_list|(
name|START
argument_list|,
name|current
argument_list|)
expr_stmt|;
comment|// let's set it to false. We just included it.
name|localIncludeStart
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|String
name|name
init|=
name|current
operator|.
name|getString
argument_list|(
name|NEXT
argument_list|)
decl_stmt|;
name|current
operator|=
name|localIndex
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|localCNE
operator|=
operator|new
name|OrderedChildNodeEntry
argument_list|(
name|name
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
block|}
return|return
name|localCNE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
expr_stmt|;
block|}
return|return
name|cne
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|OrderedChildNodeEntry
extends|extends
name|AbstractChildNodeEntry
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|state
decl_stmt|;
specifier|public
name|OrderedChildNodeEntry
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|name
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|NodeState
name|state
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|NodeState
name|getNodeState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
block|}
block|}
end_class

end_unit

