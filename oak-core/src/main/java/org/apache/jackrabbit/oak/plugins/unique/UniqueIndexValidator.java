begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|unique
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_class
specifier|public
class|class
name|UniqueIndexValidator
implements|implements
name|Validator
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|index
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|insert
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|remove
decl_stmt|;
specifier|public
name|UniqueIndexValidator
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|index
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|path
operator|=
literal|""
expr_stmt|;
name|this
operator|.
name|insert
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|remove
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
block|}
specifier|private
name|UniqueIndexValidator
parameter_list|(
name|UniqueIndexValidator
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|parent
operator|.
name|name
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|parent
operator|.
name|index
expr_stmt|;
if|if
condition|(
name|parent
operator|.
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|path
operator|=
name|name
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|path
operator|=
name|parent
operator|.
name|path
operator|+
literal|"/"
operator|+
name|name
expr_stmt|;
block|}
name|this
operator|.
name|insert
operator|=
name|parent
operator|.
name|insert
expr_stmt|;
name|this
operator|.
name|remove
operator|=
name|parent
operator|.
name|remove
expr_stmt|;
block|}
specifier|public
name|void
name|apply
parameter_list|(
name|NodeBuilder
name|unique
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|builder
init|=
name|unique
operator|.
name|getChildBuilder
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|remove
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|encode
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|PropertyState
name|property
init|=
name|builder
operator|.
name|getProperty
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|String
name|path
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|property
operator|.
name|isArray
argument_list|()
operator|||
name|path
operator|.
name|equals
argument_list|(
name|property
operator|.
name|getValue
argument_list|()
operator|.
name|getString
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|removeProperty
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|insert
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|encode
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|PropertyState
name|property
init|=
name|builder
operator|.
name|getProperty
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|property
operator|.
name|isArray
argument_list|()
operator|&&
operator|!
name|path
operator|.
name|equals
argument_list|(
name|property
operator|.
name|getValue
argument_list|()
operator|.
name|getString
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"Uniqueness constraint violation: "
operator|+
name|name
operator|+
literal|" = "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|builder
operator|.
name|setProperty
argument_list|(
name|value
argument_list|,
operator|new
name|StringValue
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|encode
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
return|;
comment|// TODO: escape to valid name
block|}
specifier|private
name|void
name|insert
parameter_list|(
name|Iterable
argument_list|<
name|CoreValue
argument_list|>
name|values
parameter_list|)
throws|throws
name|CommitFailedException
block|{
for|for
control|(
name|CoreValue
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|insert
operator|.
name|put
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|,
name|path
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"Uniqueness constraint violated: "
operator|+
name|name
operator|+
literal|" = "
operator|+
name|value
operator|.
name|getString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|remove
parameter_list|(
name|Iterable
argument_list|<
name|CoreValue
argument_list|>
name|values
parameter_list|)
block|{
for|for
control|(
name|CoreValue
name|value
range|:
name|values
control|)
block|{
name|remove
operator|.
name|put
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|insert
argument_list|(
name|after
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|before
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|remove
argument_list|(
name|before
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|after
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|before
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|remove
argument_list|(
name|before
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
return|return
name|descend
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
return|return
name|descend
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
return|return
name|descend
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
name|Validator
name|descend
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|NodeStateUtils
operator|.
name|isHidden
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|UniqueIndexValidator
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

