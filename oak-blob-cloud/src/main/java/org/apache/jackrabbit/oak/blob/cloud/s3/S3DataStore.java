begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|s3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|AbstractSharedCachingDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|directaccess
operator|.
name|ConfigurableDataRecordAccessProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|directaccess
operator|.
name|DataRecordUploadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|directaccess
operator|.
name|DataRecordDownloadOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|directaccess
operator|.
name|DataRecordUpload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|AbstractSharedBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|SharedBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Amazon S3 data store extending from {@link AbstractSharedCachingDataStore}.  */
end_comment

begin_class
specifier|public
class|class
name|S3DataStore
extends|extends
name|AbstractSharedCachingDataStore
implements|implements
name|ConfigurableDataRecordAccessProvider
block|{
specifier|protected
name|Properties
name|properties
decl_stmt|;
specifier|private
name|S3Backend
name|s3Backend
decl_stmt|;
comment|/**      * The minimum size of an object that should be stored in this data store.      */
specifier|private
name|int
name|minRecordLength
init|=
literal|16
operator|*
literal|1024
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|AbstractSharedBackend
name|createBackend
parameter_list|()
block|{
name|s3Backend
operator|=
operator|new
name|S3Backend
argument_list|()
expr_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|s3Backend
operator|.
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
return|return
name|s3Backend
return|;
block|}
comment|/**------------------------------------------- Getters& Setters-----------------------------**/
comment|/**      * Properties required to configure the S3Backend      */
specifier|public
name|void
name|setProperties
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
specifier|public
name|SharedBackend
name|getBackend
parameter_list|()
block|{
return|return
name|backend
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMinRecordLength
parameter_list|()
block|{
return|return
name|minRecordLength
return|;
block|}
specifier|public
name|void
name|setMinRecordLength
parameter_list|(
name|int
name|minRecordLength
parameter_list|)
block|{
name|this
operator|.
name|minRecordLength
operator|=
name|minRecordLength
expr_stmt|;
block|}
comment|//
comment|// ConfigurableDataRecordAccessProvider implementation
comment|//
annotation|@
name|Override
specifier|public
name|void
name|setDirectUploadURIExpirySeconds
parameter_list|(
name|int
name|seconds
parameter_list|)
block|{
if|if
condition|(
name|s3Backend
operator|!=
literal|null
condition|)
block|{
name|s3Backend
operator|.
name|setHttpUploadURIExpirySeconds
argument_list|(
name|seconds
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBinaryTransferAccelerationEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|s3Backend
operator|!=
literal|null
condition|)
block|{
name|s3Backend
operator|.
name|setBinaryTransferAccelerationEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|DataRecordUpload
name|initiateDataRecordUpload
parameter_list|(
name|long
name|maxUploadSizeInBytes
parameter_list|,
name|int
name|maxNumberOfURIs
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|DataRecordUploadException
block|{
if|if
condition|(
literal|null
operator|==
name|s3Backend
condition|)
block|{
throw|throw
operator|new
name|DataRecordUploadException
argument_list|(
literal|"Backend not initialized"
argument_list|)
throw|;
block|}
return|return
name|s3Backend
operator|.
name|initiateHttpUpload
argument_list|(
name|maxUploadSizeInBytes
argument_list|,
name|maxNumberOfURIs
argument_list|)
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|DataRecord
name|completeDataRecordUpload
parameter_list|(
annotation|@
name|NotNull
name|String
name|uploadToken
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|DataRecordUploadException
throws|,
name|DataStoreException
block|{
if|if
condition|(
literal|null
operator|==
name|s3Backend
condition|)
block|{
throw|throw
operator|new
name|DataRecordUploadException
argument_list|(
literal|"Backend not initialized"
argument_list|)
throw|;
block|}
return|return
name|s3Backend
operator|.
name|completeHttpUpload
argument_list|(
name|uploadToken
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDirectDownloadURIExpirySeconds
parameter_list|(
name|int
name|seconds
parameter_list|)
block|{
if|if
condition|(
name|s3Backend
operator|!=
literal|null
condition|)
block|{
name|s3Backend
operator|.
name|setHttpDownloadURIExpirySeconds
argument_list|(
name|seconds
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDirectDownloadURICacheSize
parameter_list|(
name|int
name|maxSize
parameter_list|)
block|{
if|if
condition|(
name|s3Backend
operator|!=
literal|null
condition|)
block|{
name|s3Backend
operator|.
name|setHttpDownloadURICacheSize
argument_list|(
name|maxSize
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|URI
name|getDownloadURI
parameter_list|(
annotation|@
name|NotNull
name|DataIdentifier
name|identifier
parameter_list|,
annotation|@
name|NotNull
name|DataRecordDownloadOptions
name|downloadOptions
parameter_list|)
block|{
if|if
condition|(
name|s3Backend
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|s3Backend
operator|.
name|createHttpDownloadURI
argument_list|(
name|identifier
argument_list|,
name|downloadOptions
argument_list|)
return|;
block|}
block|}
end_class

end_unit

