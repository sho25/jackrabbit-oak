begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|RepositoryPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_comment
comment|/**  * {@code TreePermission} implementation for the access control policy coverying  * repository level permissions. In this implementation these permissions are  * managed in the policy tree defined at /rep:repoPolicy, which is considered  * protected access control content.  *  * This implementation relies on the precondition that the subtree defined by the  * /rep:repoPolicy node only consists of trees of type access control. Consequently,  * read access to trees and properties is granted if and only if {@link Permissions#READ_ACCESS_CONTROL}  * is granted at the repo-level.  *  * For the same reason any other permissions are evaluated by checking the  * {@link org.apache.jackrabbit.oak.spi.security.authorization.permission.RepositoryPermission},  * which apply for all items defined by this special subtree.  */
end_comment

begin_class
specifier|final
class|class
name|RepoPolicyTreePermission
implements|implements
name|TreePermission
block|{
specifier|private
name|RepositoryPermission
name|repoPermission
decl_stmt|;
specifier|private
name|ReadStatus
name|readStatus
decl_stmt|;
name|RepoPolicyTreePermission
parameter_list|(
name|RepositoryPermission
name|repoPermission
parameter_list|)
block|{
name|this
operator|.
name|repoPermission
operator|=
name|repoPermission
expr_stmt|;
block|}
name|TreePermission
name|getChildPermission
parameter_list|()
block|{
return|return
name|this
return|;
block|}
comment|//-----------------------------------------------------< TreePermission>---
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|TreePermission
name|getChildPermission
parameter_list|(
annotation|@
name|NotNull
name|String
name|childName
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|childState
parameter_list|)
block|{
return|return
name|getChildPermission
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRead
parameter_list|()
block|{
return|return
name|getReadStatus
argument_list|()
operator|.
name|allowsThis
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRead
parameter_list|(
annotation|@
name|NotNull
name|PropertyState
name|property
parameter_list|)
block|{
return|return
name|getReadStatus
argument_list|()
operator|.
name|allowsThis
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canReadAll
parameter_list|()
block|{
return|return
name|getReadStatus
argument_list|()
operator|.
name|allowsAll
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canReadProperties
parameter_list|()
block|{
return|return
name|getReadStatus
argument_list|()
operator|.
name|allowsProperties
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
name|long
name|permissions
parameter_list|)
block|{
return|return
name|repoPermission
operator|.
name|isGranted
argument_list|(
name|permissions
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
name|long
name|permissions
parameter_list|,
annotation|@
name|NotNull
name|PropertyState
name|property
parameter_list|)
block|{
return|return
name|repoPermission
operator|.
name|isGranted
argument_list|(
name|permissions
argument_list|)
return|;
block|}
specifier|private
name|ReadStatus
name|getReadStatus
parameter_list|()
block|{
if|if
condition|(
name|readStatus
operator|==
literal|null
condition|)
block|{
name|boolean
name|canRead
init|=
name|repoPermission
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
name|readStatus
operator|=
operator|(
name|canRead
operator|)
condition|?
name|ReadStatus
operator|.
name|ALLOW_ALL
else|:
name|ReadStatus
operator|.
name|DENY_ALL
expr_stmt|;
block|}
return|return
name|readStatus
return|;
block|}
block|}
end_class

end_unit

