begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|PathComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Revision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mapdb
operator|.
name|BTreeKeySerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mapdb
operator|.
name|BTreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mapdb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mapdb
operator|.
name|DBMaker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mapdb
operator|.
name|Serializer
import|;
end_import

begin_comment
comment|/**  * A MapFactory backed by MapDB, which stores the map in a temporary file.  */
end_comment

begin_class
specifier|public
class|class
name|MapDBMapFactory
extends|extends
name|MapFactory
implements|implements
name|Closeable
block|{
specifier|private
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|DB
name|db
decl_stmt|;
specifier|public
name|MapDBMapFactory
parameter_list|()
block|{
name|this
operator|.
name|db
operator|=
name|DBMaker
operator|.
name|newTempFileDB
argument_list|()
operator|.
name|deleteFilesAfterClose
argument_list|()
operator|.
name|transactionDisable
argument_list|()
operator|.
name|asyncWriteEnable
argument_list|()
operator|.
name|make
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|BTreeMap
argument_list|<
name|Path
argument_list|,
name|Revision
argument_list|>
name|create
parameter_list|()
block|{
return|return
name|db
operator|.
name|createTreeMap
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|counter
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
argument_list|)
operator|.
name|keySerializer
argument_list|(
operator|new
name|PathSerializer
argument_list|()
argument_list|)
operator|.
name|valueSerializer
argument_list|(
operator|new
name|RevisionSerializer
argument_list|()
argument_list|)
operator|.
name|counterEnable
argument_list|()
operator|.
name|make
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|PathSerializer
extends|extends
name|BTreeKeySerializer
argument_list|<
name|Path
argument_list|>
implements|implements
name|Serializable
block|{
annotation|@
name|Override
specifier|public
name|void
name|serialize
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|Object
index|[]
name|keys
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|String
name|p
init|=
name|keys
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|deserialize
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
index|[]
name|keys
init|=
operator|new
name|Object
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|keys
index|[
name|i
index|]
operator|=
name|Path
operator|.
name|fromString
argument_list|(
name|in
operator|.
name|readUTF
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|keys
return|;
block|}
annotation|@
name|Override
specifier|public
name|Comparator
argument_list|<
name|Path
argument_list|>
name|getComparator
parameter_list|()
block|{
return|return
name|PathComparator
operator|.
name|INSTANCE
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|RevisionSerializer
implements|implements
name|Serializer
argument_list|<
name|Revision
argument_list|>
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|8648365575103098316L
decl_stmt|;
specifier|private
name|int
name|size
init|=
literal|8
operator|+
literal|4
operator|+
literal|4
operator|+
literal|1
decl_stmt|;
specifier|public
name|void
name|serialize
parameter_list|(
name|DataOutput
name|o
parameter_list|,
name|Revision
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|o
operator|.
name|writeLong
argument_list|(
name|r
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|.
name|writeInt
argument_list|(
name|r
operator|.
name|getCounter
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|.
name|writeInt
argument_list|(
name|r
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|.
name|writeBoolean
argument_list|(
name|r
operator|.
name|isBranch
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Revision
name|deserialize
parameter_list|(
name|DataInput
name|i
parameter_list|,
name|int
name|available
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Revision
argument_list|(
name|i
operator|.
name|readLong
argument_list|()
argument_list|,
comment|//timestamp
name|i
operator|.
name|readInt
argument_list|()
argument_list|,
comment|//counter
name|i
operator|.
name|readInt
argument_list|()
argument_list|,
comment|//clusterId
name|i
operator|.
name|readBoolean
argument_list|()
argument_list|)
return|;
comment|//branch
block|}
specifier|public
name|int
name|fixedSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
block|}
block|}
end_class

end_unit

