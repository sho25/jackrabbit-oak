begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|NotExecutableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Permission evaluation tests related to write operations.  */
end_comment

begin_class
specifier|public
class|class
name|WriteTest
extends|extends
name|AbstractEvaluationTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testAddChildNodeAndSetProperty
parameter_list|()
throws|throws
name|Exception
block|{
comment|// give 'testUser' ADD_CHILD_NODES|MODIFY_PROPERTIES privileges at 'path'
name|Privilege
index|[]
name|privileges
init|=
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_ADD_CHILD_NODES
block|,
name|Privilege
operator|.
name|JCR_MODIFY_PROPERTIES
block|}
argument_list|)
decl_stmt|;
name|allow
argument_list|(
name|path
argument_list|,
name|privileges
argument_list|)
expr_stmt|;
comment|/*          testuser must now have          - ADD_NODE permission for child node          - SET_PROPERTY permission for child props          - REMOVE permission for child-props          - READ-only permission for the node at 'path'           testuser must not have          - REMOVE permission for child node         */
name|String
name|nonExChildPath
init|=
name|path
operator|+
literal|"/anyItem"
decl_stmt|;
name|String
name|actions
init|=
name|getActions
argument_list|(
name|Session
operator|.
name|ACTION_READ
argument_list|,
name|Session
operator|.
name|ACTION_ADD_NODE
argument_list|,
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|nonExChildPath
argument_list|,
name|actions
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|nonExChildPath
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|testN
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// must be allowed to add child node
name|testN
operator|.
name|addNode
argument_list|(
name|nodeName4
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// must be allowed to remove child-property
name|testSession
operator|.
name|getProperty
argument_list|(
name|childPPath
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// must be allowed to set child property again
name|testN
operator|.
name|setProperty
argument_list|(
name|Text
operator|.
name|getName
argument_list|(
name|childPPath
argument_list|)
argument_list|,
literal|"othervalue"
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// must not be allowed to remove child nodes
try|try
block|{
name|testSession
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"test-user is not allowed to remove a node below "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
comment|// must have read-only access on 'testN' and it's sibling
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|path
argument_list|,
name|Session
operator|.
name|ACTION_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|path
argument_list|,
name|getActions
argument_list|(
name|Session
operator|.
name|ACTION_ADD_NODE
argument_list|,
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertReadOnly
argument_list|(
name|siblingPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemove
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add 'remove_child_nodes' privilege at 'path'
name|Privilege
index|[]
name|rmChildNodes
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
decl_stmt|;
name|allow
argument_list|(
name|path
argument_list|,
name|rmChildNodes
argument_list|)
expr_stmt|;
comment|/*          expected result:          - neither node at path nor at childNPath can be removed since            REMOVE_NODE privilege is missing.          */
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|path
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemove2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add 'remove_node' privilege at 'path'
name|Privilege
index|[]
name|rmChildNodes
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_NODE
argument_list|)
decl_stmt|;
name|allow
argument_list|(
name|path
argument_list|,
name|rmChildNodes
argument_list|)
expr_stmt|;
comment|/*          expected result:          - neither node at path nor at childNPath can be removed permission            due to missing remove_child_nodes privilege.          */
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|path
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemove3
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add 'remove_node' and 'remove_child_nodes' privilege at 'path'
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
block|,
name|Privilege
operator|.
name|JCR_REMOVE_NODE
block|}
argument_list|)
decl_stmt|;
name|allow
argument_list|(
name|path
argument_list|,
name|privs
argument_list|)
expr_stmt|;
comment|/*          expected result:          - missing remove permission at path since REMOVE_CHILD_NODES present            at path only applies for nodes below. REMOVE_CHILD_NODES must            be present at the parent instead (which isn't)          - remove permission is however granted at childNPath.          - privileges: both at path and at childNPath 'remove_node' and            'remove_child_nodes' are present.         */
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|path
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|privs
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath
argument_list|,
name|privs
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemove4
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|rmChildNodes
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|rmNode
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_NODE
argument_list|)
decl_stmt|;
comment|// add 'remove_child_nodes' privilege at 'path'...
name|allow
argument_list|(
name|path
argument_list|,
name|rmChildNodes
argument_list|)
expr_stmt|;
comment|// ... and add 'remove_node' privilege at 'childNPath'
name|allow
argument_list|(
name|childNPath
argument_list|,
name|rmNode
argument_list|)
expr_stmt|;
comment|/*          expected result:          - remove not allowed for node at path          - remove-permission present for node at childNPath          - both remove_node and remove_childNodes privilege present at childNPath          */
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|path
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath
argument_list|,
operator|new
name|Privilege
index|[]
block|{
name|rmChildNodes
index|[
literal|0
index|]
block|,
name|rmNode
index|[
literal|0
index|]
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemove5
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add 'remove_node' privilege at 'childNPath'
name|Privilege
index|[]
name|rmNode
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_NODE
argument_list|)
decl_stmt|;
name|allow
argument_list|(
name|childNPath
argument_list|,
name|rmNode
argument_list|)
expr_stmt|;
comment|/*          expected result:          - node at childNPath can't be removed since REMOVE_CHILD_NODES is missing.          */
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemove6
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add 'remove_child_nodes' and 'remove_node' privilege at 'path'
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
block|,
name|Privilege
operator|.
name|JCR_REMOVE_NODE
block|}
argument_list|)
decl_stmt|;
name|allow
argument_list|(
name|path
argument_list|,
name|privs
argument_list|)
expr_stmt|;
comment|// ... but deny 'remove_node' at childNPath
name|Privilege
index|[]
name|rmNode
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_NODE
argument_list|)
decl_stmt|;
name|deny
argument_list|(
name|childNPath
argument_list|,
name|rmNode
argument_list|)
expr_stmt|;
comment|/*          expected result:          - neither node at path nor at childNPath could be removed.          - no remove_node privilege at childNPath          - read, remove_child_nodes privilege at childNPath          */
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|path
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath
argument_list|,
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_READ
block|,
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath
argument_list|,
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_NODE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemove7
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|rmChildNodes
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|rmNode
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_NODE
argument_list|)
decl_stmt|;
comment|// deny 'remove_child_nodes' at 'path'
name|deny
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
argument_list|)
expr_stmt|;
comment|// ... but allow 'remove_node' at childNPath
name|allow
argument_list|(
name|childNPath
argument_list|,
name|rmNode
argument_list|)
expr_stmt|;
comment|/*          expected result:          - node at childNPath can't be removed.          */
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
comment|// additionally add remove_child_nodes privilege at 'childNPath'
name|allow
argument_list|(
name|childNPath
argument_list|,
name|rmChildNodes
argument_list|)
expr_stmt|;
comment|/*          expected result:          - node at childNPath still can't be removed.          - but both privileges (remove_node, remove_child_nodes) are present.          */
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath
argument_list|,
operator|new
name|Privilege
index|[]
block|{
name|rmChildNodes
index|[
literal|0
index|]
block|,
name|rmNode
index|[
literal|0
index|]
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemove8
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|rmChildNodes
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|rmNode
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_NODE
argument_list|)
decl_stmt|;
comment|// add 'remove_child_nodes' at 'path
name|allow
argument_list|(
name|path
argument_list|,
name|rmChildNodes
argument_list|)
expr_stmt|;
comment|// deny 'remove_node' at 'path'
name|deny
argument_list|(
name|path
argument_list|,
name|rmNode
argument_list|)
expr_stmt|;
comment|// and allow 'remove_node' at childNPath
name|allow
argument_list|(
name|childNPath
argument_list|,
name|rmNode
argument_list|)
expr_stmt|;
comment|/*          expected result:          - remove permission must be granted at childNPath          */
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath
argument_list|,
operator|new
name|Privilege
index|[]
block|{
name|rmChildNodes
index|[
literal|0
index|]
block|,
name|rmNode
index|[
literal|0
index|]
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemove9
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|rmChildNodes
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|rmNode
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_NODE
argument_list|)
decl_stmt|;
comment|// add 'remove_child_nodes' at 'path and allow 'remove_node' at childNPath
name|allow
argument_list|(
name|path
argument_list|,
name|rmChildNodes
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|childNPath
argument_list|,
name|rmNode
argument_list|)
expr_stmt|;
comment|/*          expected result:          - rep:policy node can still not be remove for it is access-control            content that requires jcr:modifyAccessControl privilege instead.          */
name|String
name|policyPath
init|=
name|childNPath
operator|+
literal|"/rep:policy"
decl_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|policyPath
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertHasPrivileges
argument_list|(
name|policyPath
argument_list|,
operator|new
name|Privilege
index|[]
block|{
name|rmChildNodes
index|[
literal|0
index|]
block|,
name|rmNode
index|[
literal|0
index|]
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupPermissions
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* add privileges for the Group the test-user is member of */
name|allow
argument_list|(
name|path
argument_list|,
name|testGroup
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|modPropPrivileges
argument_list|)
expr_stmt|;
comment|/* testuser must get the permissions/privileges inherited from            the group it is member of.          */
name|String
name|actions
init|=
name|getActions
argument_list|(
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|,
name|Session
operator|.
name|ACTION_READ
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|path
argument_list|,
name|actions
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|modPropPrivileges
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMixedUserGroupPermissions
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* explicitly withdraw MODIFY_PROPERTIES for the user */
name|deny
argument_list|(
name|path
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|modPropPrivileges
argument_list|)
expr_stmt|;
comment|/* give MODIFY_PROPERTIES privilege for a Group the test-user is member of */
name|allow
argument_list|(
name|path
argument_list|,
name|testGroup
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|modPropPrivileges
argument_list|)
expr_stmt|;
comment|/*          since user-permissions overrule the group permissions, testuser must          not have set_property action / modify_properties privilege.          */
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|path
argument_list|,
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|modPropPrivileges
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * the ADD_CHILD_NODES privileges assigned on a node to a specific principal      * grants the corresponding user the permission to add nodes below the      * target node but not 'at' the target node.      *      * @throws Exception If an error occurs.      */
annotation|@
name|Test
specifier|public
name|void
name|testAddChildNodePrivilege
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* add 'add_child_nodes' privilege for testSession at path. */
name|Privilege
index|[]
name|privileges
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
decl_stmt|;
name|allow
argument_list|(
name|path
argument_list|,
name|privileges
argument_list|)
expr_stmt|;
comment|/* test permissions. expected result:            - testSession cannot add child-nodes at 'path'            - testSession can add child-nodes below path          */
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|path
argument_list|,
name|Session
operator|.
name|ACTION_ADD_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|path
operator|+
literal|"/anychild"
argument_list|,
name|Session
operator|.
name|ACTION_ADD_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath
argument_list|,
name|Session
operator|.
name|ACTION_ADD_NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleDenyAfterAllAllowed
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* add 'all' privilege for testSession at path. */
name|Privilege
index|[]
name|allPrivileges
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_ALL
argument_list|)
decl_stmt|;
name|allow
argument_list|(
name|path
argument_list|,
name|allPrivileges
argument_list|)
expr_stmt|;
comment|/* deny a single privilege */
name|Privilege
index|[]
name|lockPrivileges
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_LOCK_MANAGEMENT
argument_list|)
decl_stmt|;
name|deny
argument_list|(
name|path
argument_list|,
name|lockPrivileges
argument_list|)
expr_stmt|;
comment|/* test permissions. expected result:            - testSession cannot lock at 'path'            - testSession doesn't have ALL privilege at path          */
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|allPrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|lockPrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Privilege
argument_list|>
name|remainingprivs
init|=
operator|new
name|ArrayList
argument_list|<
name|Privilege
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|allPrivileges
index|[
literal|0
index|]
operator|.
name|getAggregatePrivileges
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|remainingprivs
operator|.
name|remove
argument_list|(
name|lockPrivileges
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|remainingprivs
operator|.
name|toArray
argument_list|(
operator|new
name|Privilege
index|[
name|remainingprivs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReorder
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|n
operator|.
name|getPrimaryNodeType
argument_list|()
operator|.
name|hasOrderableChildNodes
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|(
literal|"Reordering child nodes is not supported.."
argument_list|)
throw|;
block|}
try|try
block|{
name|n
operator|.
name|orderBefore
argument_list|(
name|Text
operator|.
name|getName
argument_list|(
name|childNPath2
argument_list|)
argument_list|,
name|Text
operator|.
name|getName
argument_list|(
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"test session must not be allowed to reorder nodes."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReorder2
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// give 'add_child_nodes' and 'nt-management' privilege
comment|// -> not sufficient privileges for a reorder
name|allow
argument_list|(
name|path
argument_list|,
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_ADD_CHILD_NODES
block|,
name|Privilege
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
block|}
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|n
operator|.
name|orderBefore
argument_list|(
name|Text
operator|.
name|getName
argument_list|(
name|childNPath2
argument_list|)
argument_list|,
name|Text
operator|.
name|getName
argument_list|(
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"test session must not be allowed to reorder nodes."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReorder3
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// give 'add_child_nodes', 'nt-management' and 'remove_child_nodes' at
comment|// 'path' -> reorder must succeed
name|allow
argument_list|(
name|path
argument_list|,
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_ADD_CHILD_NODES
block|,
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
block|,
name|Privilege
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|n
operator|.
name|orderBefore
argument_list|(
name|Text
operator|.
name|getName
argument_list|(
name|childNPath2
argument_list|)
argument_list|,
name|Text
operator|.
name|getName
argument_list|(
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
comment|/**      * @see<a href="https://issues.apache.org/jira/browse/JCR-2420">JCR-2420</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testRemovalJCR242
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|allPriv
init|=
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_ALL
block|}
argument_list|)
decl_stmt|;
comment|/* grant ALL privilege for testUser at 'path' */
name|allow
argument_list|(
name|path
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|allPriv
argument_list|)
expr_stmt|;
comment|/* grant ALL privilege for testUser at 'childNPath' */
name|allow
argument_list|(
name|childNPath
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|allPriv
argument_list|)
expr_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|testSession
operator|.
name|getAccessControlManager
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|allPriv
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath
argument_list|,
name|allPriv
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|child
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
decl_stmt|;
name|child
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGlobRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|child
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
operator|.
name|addNode
argument_list|(
name|nodeName3
argument_list|)
decl_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
name|childchildPath
init|=
name|child
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|writeActions
init|=
name|getActions
argument_list|(
name|Session
operator|.
name|ACTION_ADD_NODE
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|,
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|)
decl_stmt|;
comment|// permissions defined @ path
comment|// restriction: grants write priv to all nodeName3 children
name|allow
argument_list|(
name|path
argument_list|,
name|repWritePrivileges
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"/*"
operator|+
name|nodeName3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|path
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath2
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath2
argument_list|,
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath2
argument_list|,
name|writeActions
argument_list|)
argument_list|)
expr_stmt|;
comment|// removal req. rmchildnode privilege on parent.
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childchildPath
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGlobRestriction2
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|child
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
operator|.
name|addNode
argument_list|(
name|nodeName3
argument_list|)
decl_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
name|childchildPath
init|=
name|child
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Privilege
index|[]
name|addNode
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|rmNode
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_NODE
argument_list|)
decl_stmt|;
comment|// permissions defined @ path
comment|// restriction: grants write-priv to nodeName3 grand-children but not direct nodeName3 children.
name|allow
argument_list|(
name|path
argument_list|,
name|repWritePrivileges
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"/*/"
operator|+
name|nodeName3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath
argument_list|,
name|addNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath2
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childchildPath
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGlobRestriction3
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|child
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
operator|.
name|addNode
argument_list|(
name|nodeName3
argument_list|)
decl_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
name|childchildPath
init|=
name|child
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Privilege
index|[]
name|addNode
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
decl_stmt|;
comment|// permissions defined @ path
comment|// restriction: allows write to nodeName3 children
name|allow
argument_list|(
name|path
argument_list|,
name|repWritePrivileges
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"/*/"
operator|+
name|nodeName3
argument_list|)
argument_list|)
expr_stmt|;
comment|// and grant add-node only at path (no glob restriction)
name|allow
argument_list|(
name|path
argument_list|,
name|addNode
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|addNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath
argument_list|,
name|addNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath2
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childchildPath
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGlobRestriction4
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|child
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
operator|.
name|addNode
argument_list|(
name|nodeName3
argument_list|)
decl_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
name|childchildPath
init|=
name|child
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Privilege
index|[]
name|addNode
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
decl_stmt|;
name|allow
argument_list|(
name|path
argument_list|,
name|repWritePrivileges
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"/*"
operator|+
name|nodeName3
argument_list|)
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|childNPath2
argument_list|,
name|addNode
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|path
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath2
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childchildPath
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteIfReadingParentIsDenied
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* deny READ/WRITE privilege for testUser at 'path' */
name|deny
argument_list|(
name|path
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readWritePrivileges
argument_list|)
expr_stmt|;
comment|/* allow READ/WRITE privilege for testUser at 'childNPath' */
name|allow
argument_list|(
name|childNPath
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readWritePrivileges
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
comment|// reading the node and it's definition must succeed.
name|assertTrue
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
decl_stmt|;
name|n
operator|.
name|addNode
argument_list|(
literal|"someChild"
argument_list|)
expr_stmt|;
name|n
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveNodeWithPolicy
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* allow READ/WRITE privilege for testUser at 'path' */
name|allow
argument_list|(
name|path
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readWritePrivileges
argument_list|)
expr_stmt|;
comment|/* allow READ/WRITE privilege for testUser at 'childPath' */
name|allow
argument_list|(
name|childNPath
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readWritePrivileges
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
decl_stmt|;
comment|// removing the child node must succeed as both remove-node and
comment|// remove-child-nodes are granted to testsession.
comment|// the policy node underneath childNPath should silently be removed
comment|// as the editing session has no knowledge about it's existence.
name|n
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveNodeWithInvisibleChild
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|invisible
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
operator|.
name|addNode
argument_list|(
name|nodeName3
argument_list|)
decl_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|/* allow READ/WRITE privilege for testUser at 'path' */
name|allow
argument_list|(
name|path
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readWritePrivileges
argument_list|)
expr_stmt|;
comment|/* deny READ privilege at invisible node. (removal is still granted) */
name|deny
argument_list|(
name|invisible
operator|.
name|getPath
argument_list|()
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
comment|// removing the child node must succeed as both remove-node and
comment|// remove-child-nodes are granted to testsession.
comment|// the policy node underneath childNPath should silently be removed
comment|// as the editing session has no knowledge about it's existence.
name|testSession
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"OAK-51 : Removal of Node with non-writable child -> diff to jr-core"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testRemoveNodeWithInvisibleNonRemovableChild
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|invisible
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
operator|.
name|addNode
argument_list|(
name|nodeName3
argument_list|)
decl_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|/* allow READ/WRITE privilege for testUser at 'path' */
name|allow
argument_list|(
name|path
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readWritePrivileges
argument_list|)
expr_stmt|;
comment|/* deny READ privilege at invisible node. (removal is still granted) */
name|deny
argument_list|(
name|invisible
operator|.
name|getPath
argument_list|()
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readWritePrivileges
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
comment|// removing the child node must fail as a hidden child node cannot
comment|// be removed.
try|try
block|{
name|testSession
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
comment|/**      * @see<a href="https://issues.apache.org/jira/browse/JCR-3131">JCR-3131</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testEmptySaveNoRootAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
try|try
block|{
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// empty save operation
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|// undo revocation of read privilege
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

