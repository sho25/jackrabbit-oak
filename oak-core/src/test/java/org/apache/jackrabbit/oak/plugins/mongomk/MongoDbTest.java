begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|WriteConcern
import|;
end_import

begin_comment
comment|/**  * Test directly ran against MongoDB.  */
end_comment

begin_class
specifier|public
class|class
name|MongoDbTest
block|{
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|manyChildNodes
parameter_list|()
block|{
name|DB
name|db
init|=
name|MongoUtils
operator|.
name|getConnection
argument_list|()
operator|.
name|getDB
argument_list|()
decl_stmt|;
name|MongoUtils
operator|.
name|dropCollections
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|DBCollection
name|nodes
init|=
name|db
operator|.
name|getCollection
argument_list|(
name|Collection
operator|.
name|NODES
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|DBObject
name|index
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
comment|// modification time (descending)
name|index
operator|.
name|put
argument_list|(
literal|"_mod"
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
comment|// and then id (ascending)
name|index
operator|.
name|put
argument_list|(
literal|"_id"
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|DBObject
name|options
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
comment|// options.put("unique", Boolean.TRUE);
name|nodes
operator|.
name|ensureIndex
argument_list|(
name|index
argument_list|,
name|options
argument_list|)
expr_stmt|;
comment|// index on (_id, _mod):
comment|// Query plan: { "cursor" : "BtreeCursor _id_1__mod_-1" ,
comment|// "isMultiKey" : false , "n" : 2000 , "nscannedObjects" : 2000 ,
comment|// "nscanned" : 954647 , "nscannedObjectsAllPlans" : 1907080 ,
comment|// "nscannedAllPlans" : 2859727 , "scanAndOrder" : false ,
comment|// "indexOnly" : true , "nYields" : 5 , "nChunkSkips" : 0 ,
comment|// "millis" : 5112 ,...
comment|// Time: 2229 ms
comment|// Count: 2000
comment|// index on (_mod, _id)
comment|// Query plan: { "cursor" : "BtreeCursor _mod_-1__id_1" ,
comment|// "isMultiKey" : false , "n" : 2000 , "nscannedObjects" : 2000 ,
comment|// "nscanned" : 2000 , "nscannedObjectsAllPlans" : 2203 ,
comment|// "nscannedAllPlans" : 2203 , "scanAndOrder" : false ,
comment|// "indexOnly" : true , "nYields" : 0 , "nChunkSkips" : 0 ,
comment|// "millis" : 3 ,...
comment|// Time: 43 ms
comment|// Count: 2000
name|int
name|children
init|=
literal|1000000
decl_stmt|;
name|int
name|perInsert
init|=
literal|1000
decl_stmt|;
name|int
name|group
init|=
literal|0
decl_stmt|;
name|String
name|parent
init|=
literal|"/parent/node/abc"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
condition|;
control|)
block|{
name|DBObject
index|[]
name|inserts
init|=
operator|new
name|DBObject
index|[
name|perInsert
index|]
decl_stmt|;
name|group
operator|++
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|perInsert
condition|;
name|j
operator|++
operator|,
name|i
operator|++
control|)
block|{
name|BasicDBObject
name|doc
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|inserts
index|[
name|j
index|]
operator|=
name|doc
expr_stmt|;
name|doc
operator|.
name|put
argument_list|(
literal|"_id"
argument_list|,
name|parent
operator|+
literal|"/node"
operator|+
name|i
argument_list|)
expr_stmt|;
name|doc
operator|.
name|put
argument_list|(
literal|"_mod"
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
name|nodes
operator|.
name|insert
argument_list|(
name|inserts
argument_list|,
name|WriteConcern
operator|.
name|SAFE
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"inserted "
operator|+
name|i
operator|+
literal|"/"
operator|+
name|children
argument_list|)
expr_stmt|;
block|}
name|QueryBuilder
name|queryBuilder
init|=
name|QueryBuilder
operator|.
name|start
argument_list|(
literal|"_mod"
argument_list|)
decl_stmt|;
name|queryBuilder
operator|.
name|greaterThanEquals
argument_list|(
name|group
operator|-
literal|1
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|and
argument_list|(
literal|"_id"
argument_list|)
operator|.
name|greaterThan
argument_list|(
name|parent
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|and
argument_list|(
literal|"_id"
argument_list|)
operator|.
name|lessThanEquals
argument_list|(
name|parent
operator|+
literal|"0"
argument_list|)
expr_stmt|;
name|DBObject
name|query
init|=
name|queryBuilder
operator|.
name|get
argument_list|()
decl_stmt|;
name|BasicDBObject
name|keys
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|keys
operator|.
name|put
argument_list|(
literal|"_id"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DBCursor
name|cursor
init|=
name|nodes
operator|.
name|find
argument_list|(
name|query
argument_list|,
name|keys
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|log
argument_list|(
literal|"Query plan: "
operator|+
name|cursor
operator|.
name|explain
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|cursor
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DBObject
name|obj
init|=
name|cursor
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// dummy read operation (to ensure we did get the data)
name|obj
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
comment|// log(" read " + obj);
block|}
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
name|log
argument_list|(
literal|"Time: "
operator|+
name|time
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Count: "
operator|+
name|count
argument_list|)
expr_stmt|;
name|db
operator|.
name|getMongo
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|updateDocument
parameter_list|()
block|{
name|DB
name|db
init|=
name|MongoUtils
operator|.
name|getConnection
argument_list|()
operator|.
name|getDB
argument_list|()
decl_stmt|;
name|MongoUtils
operator|.
name|dropCollections
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|DBCollection
name|nodes
init|=
name|db
operator|.
name|getCollection
argument_list|(
name|Collection
operator|.
name|NODES
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|DBObject
name|index
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
comment|// modification time (descending)
name|index
operator|.
name|put
argument_list|(
literal|"_mod"
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
comment|// and then id (ascending)
name|index
operator|.
name|put
argument_list|(
literal|"_id"
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|DBObject
name|options
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
comment|// options.put("unique", Boolean.TRUE);
name|nodes
operator|.
name|ensureIndex
argument_list|(
name|index
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|long
name|time
decl_stmt|;
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|int
name|nodeCount
init|=
literal|4500
decl_stmt|;
name|String
name|parent
init|=
literal|"/parent/node/abc"
decl_stmt|;
name|DBObject
index|[]
name|inserts
init|=
operator|new
name|DBObject
index|[
name|nodeCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeCount
condition|;
name|i
operator|++
control|)
block|{
name|BasicDBObject
name|doc
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|inserts
index|[
name|i
index|]
operator|=
name|doc
expr_stmt|;
name|doc
operator|.
name|put
argument_list|(
literal|"_id"
argument_list|,
name|parent
operator|+
literal|"/node"
operator|+
name|i
argument_list|)
expr_stmt|;
name|doc
operator|.
name|put
argument_list|(
literal|"_mod"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doc
operator|.
name|put
argument_list|(
literal|"_counter"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doc
operator|.
name|put
argument_list|(
literal|"x"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
name|nodes
operator|.
name|insert
argument_list|(
name|inserts
argument_list|,
name|WriteConcern
operator|.
name|SAFE
argument_list|)
expr_stmt|;
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"insert: "
operator|+
name|time
argument_list|)
expr_stmt|;
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeCount
condition|;
name|i
operator|++
control|)
block|{
name|QueryBuilder
name|queryBuilder
init|=
name|QueryBuilder
operator|.
name|start
argument_list|(
name|Document
operator|.
name|ID
argument_list|)
operator|.
name|is
argument_list|(
name|parent
operator|+
literal|"/node"
operator|+
name|i
argument_list|)
decl_stmt|;
name|DBObject
name|fields
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
comment|// return _id only
name|fields
operator|.
name|put
argument_list|(
literal|"_id"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DBObject
name|query
init|=
name|queryBuilder
operator|.
name|get
argument_list|()
decl_stmt|;
name|BasicDBObject
name|setUpdates
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|BasicDBObject
name|incUpdates
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|BasicDBObject
name|unsetUpdates
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|setUpdates
operator|.
name|append
argument_list|(
literal|"_mod"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|incUpdates
operator|.
name|append
argument_list|(
literal|"_counter"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|unsetUpdates
operator|.
name|append
argument_list|(
literal|"x"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|BasicDBObject
name|update
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|setUpdates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|update
operator|.
name|append
argument_list|(
literal|"$set"
argument_list|,
name|setUpdates
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|incUpdates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|update
operator|.
name|append
argument_list|(
literal|"$inc"
argument_list|,
name|incUpdates
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|unsetUpdates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|update
operator|.
name|append
argument_list|(
literal|"$unset"
argument_list|,
name|unsetUpdates
argument_list|)
expr_stmt|;
block|}
comment|// 1087 ms (upsert true+false, returnNew = false)
comment|// 1100 ms (returnNew = true)
comment|//            DBObject oldNode =
name|nodes
operator|.
name|findAndModify
argument_list|(
name|query
argument_list|,
name|fields
argument_list|,
literal|null
comment|/*sort*/
argument_list|,
literal|false
comment|/*remove*/
argument_list|,
name|update
argument_list|,
literal|false
comment|/*returnNew*/
argument_list|,
literal|true
comment|/*upsert*/
argument_list|)
expr_stmt|;
comment|// 250 ms WriteConcern.NORMAL, NONE
comment|// 891 ms WriteConvern.SAFE
comment|//> 10 s WriteConcern.JOURNAL_SAFE, FSYNC_SAFE
comment|//            WriteResult result =
comment|//            nodes.update(query, update, /* upsert */ true, /* multi */ false,
comment|//                    WriteConcern.NORMAL);
block|}
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"update: "
operator|+
name|time
argument_list|)
expr_stmt|;
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|db
operator|.
name|getMongo
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|log
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

