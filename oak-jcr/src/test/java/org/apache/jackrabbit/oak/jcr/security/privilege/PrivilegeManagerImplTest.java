begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|privilege
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitWorkspace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * PrivilegeManagerTest...  *  * TODO: more tests for cyclic aggregation  */
end_comment

begin_class
specifier|public
class|class
name|PrivilegeManagerImplTest
extends|extends
name|AbstractJCRTest
block|{
specifier|private
name|PrivilegeManager
name|privilegeManager
decl_stmt|;
annotation|@
name|Before
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|privilegeManager
operator|=
name|getPrivilegeManager
argument_list|(
name|superuser
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|PrivilegeManager
name|getPrivilegeManager
parameter_list|(
name|Session
name|s
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
operator|(
operator|(
name|JackrabbitWorkspace
operator|)
name|s
operator|.
name|getWorkspace
argument_list|()
operator|)
operator|.
name|getPrivilegeManager
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|getAggregateNames
parameter_list|(
name|String
modifier|...
name|names
parameter_list|)
block|{
return|return
name|names
return|;
block|}
specifier|private
specifier|static
name|void
name|assertContainsDeclared
parameter_list|(
name|Privilege
name|privilege
parameter_list|,
name|String
name|aggrName
parameter_list|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Privilege
name|p
range|:
name|privilege
operator|.
name|getDeclaredAggregatePrivileges
argument_list|()
control|)
block|{
if|if
condition|(
name|aggrName
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|found
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegisteredPrivileges
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Privilege
index|[]
name|ps
init|=
name|privilegeManager
operator|.
name|getRegisteredPrivileges
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Privilege
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|Privilege
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ps
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_READ
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_MODIFY_PROPERTIES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_NODE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_WRITE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_LIFECYCLE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_LOCK_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_RETENTION_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_VERSION_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_ADD_PROPERTIES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_ALTER_PROPERTIES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_REMOVE_PROPERTIES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// including repo-level operation privileges
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_NAMESPACE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_NODE_TYPE_DEFINITION_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_WORKSPACE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_PRIVILEGE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllPrivilege
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Privilege
name|p
init|=
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_ALL
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"jcr:all"
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|isAggregate
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|p
operator|.
name|isAbstract
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Privilege
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|Privilege
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|p
operator|.
name|getAggregatePrivileges
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_READ
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_MODIFY_PROPERTIES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_NODE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_LIFECYCLE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_LOCK_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_RETENTION_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_VERSION_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_WRITE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_ADD_PROPERTIES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_ALTER_PROPERTIES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_REMOVE_PROPERTIES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// including repo-level operation privileges
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_NAMESPACE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_NODE_TYPE_DEFINITION_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_WORKSPACE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_PRIVILEGE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|=
operator|new
name|ArrayList
argument_list|<
name|Privilege
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|p
operator|.
name|getDeclaredAggregatePrivileges
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_READ
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_LIFECYCLE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_LOCK_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_RETENTION_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_VERSION_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// including repo-level operation privileges
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_NAMESPACE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_NODE_TYPE_DEFINITION_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_WORKSPACE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|remove
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_PRIVILEGE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegeFromName
parameter_list|()
throws|throws
name|AccessControlException
throws|,
name|RepositoryException
block|{
name|Privilege
name|p
init|=
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|p
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jcr:read"
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|p
operator|.
name|isAggregate
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|=
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|Privilege
operator|.
name|JCR_WRITE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jcr:write"
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|isAggregate
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesFromInvalidName
parameter_list|()
throws|throws
name|RepositoryException
block|{
try|try
block|{
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
literal|"unknown"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"invalid privilege name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// OK
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesFromEmptyNames
parameter_list|()
block|{
try|try
block|{
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"invalid privilege name array"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// OK
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// OK
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesFromNullNames
parameter_list|()
block|{
try|try
block|{
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"invalid privilege name (null)"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// OK
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegisterPrivilegeWithIllegalName
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|illegal
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
comment|// invalid privilege name
name|illegal
operator|.
name|put
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|illegal
operator|.
name|put
argument_list|(
literal|""
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|illegal
operator|.
name|put
argument_list|(
literal|"invalid:privilegeName"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|illegal
operator|.
name|put
argument_list|(
literal|".e:privilegeName"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// invalid aggregate names
name|illegal
operator|.
name|put
argument_list|(
literal|"newPrivilege"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"invalid:privilegeName"
block|}
argument_list|)
expr_stmt|;
name|illegal
operator|.
name|put
argument_list|(
literal|"newPrivilege"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|".e:privilegeName"
block|}
argument_list|)
expr_stmt|;
name|illegal
operator|.
name|put
argument_list|(
literal|"newPrivilege"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|null
block|}
argument_list|)
expr_stmt|;
name|illegal
operator|.
name|put
argument_list|(
literal|"newPrivilege"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|""
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|illegalName
range|:
name|illegal
operator|.
name|keySet
argument_list|()
control|)
block|{
try|try
block|{
name|privilegeManager
operator|.
name|registerPrivilege
argument_list|(
name|illegalName
argument_list|,
literal|true
argument_list|,
name|illegal
operator|.
name|get
argument_list|(
name|illegalName
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Illegal name -> Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamespaceException
name|e
parameter_list|)
block|{
comment|// success
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegisterReservedName
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|illegal
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
comment|// invalid privilege name
name|illegal
operator|.
name|put
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|illegal
operator|.
name|put
argument_list|(
literal|"jcr:privilegeName"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|illegal
operator|.
name|put
argument_list|(
literal|"rep:privilegeName"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|illegal
operator|.
name|put
argument_list|(
literal|"nt:privilegeName"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|illegal
operator|.
name|put
argument_list|(
literal|"mix:privilegeName"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|illegal
operator|.
name|put
argument_list|(
literal|"sv:privilegeName"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|illegal
operator|.
name|put
argument_list|(
literal|"xml:privilegeName"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|illegal
operator|.
name|put
argument_list|(
literal|"xmlns:privilegeName"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// invalid aggregate names
name|illegal
operator|.
name|put
argument_list|(
literal|"newPrivilege"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"jcr:privilegeName"
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|illegalName
range|:
name|illegal
operator|.
name|keySet
argument_list|()
control|)
block|{
try|try
block|{
name|privilegeManager
operator|.
name|registerPrivilege
argument_list|(
name|illegalName
argument_list|,
literal|true
argument_list|,
name|illegal
operator|.
name|get
argument_list|(
name|illegalName
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Illegal name -> Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegisterPrivilegeWithReadOnly
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|s
init|=
name|getHelper
argument_list|()
operator|.
name|getReadOnlySession
argument_list|()
decl_stmt|;
try|try
block|{
operator|(
operator|(
name|JackrabbitWorkspace
operator|)
name|s
operator|.
name|getWorkspace
argument_list|()
operator|)
operator|.
name|getPrivilegeManager
argument_list|()
operator|.
name|registerPrivilege
argument_list|(
literal|"test"
argument_list|,
literal|true
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Only admin is allowed to register privileges."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
finally|finally
block|{
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomDefinitionsWithCyclicReferences
parameter_list|()
throws|throws
name|RepositoryException
block|{
try|try
block|{
name|privilegeManager
operator|.
name|registerPrivilege
argument_list|(
literal|"cycl-1"
argument_list|,
literal|false
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"cycl-1"
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Cyclic definitions must be detected upon registry startup."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomEquivalentDefinitions
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|privilegeManager
operator|.
name|registerPrivilege
argument_list|(
literal|"custom4"
argument_list|,
literal|false
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|privilegeManager
operator|.
name|registerPrivilege
argument_list|(
literal|"custom5"
argument_list|,
literal|false
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|privilegeManager
operator|.
name|registerPrivilege
argument_list|(
literal|"custom2"
argument_list|,
literal|false
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"custom4"
block|,
literal|"custom5"
block|}
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|equivalent
init|=
operator|new
name|ArrayList
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|equivalent
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"custom4"
block|,
literal|"custom5"
block|}
argument_list|)
expr_stmt|;
name|equivalent
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"custom2"
block|,
literal|"custom4"
block|}
argument_list|)
expr_stmt|;
name|equivalent
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"custom2"
block|,
literal|"custom5"
block|}
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|6
decl_stmt|;
for|for
control|(
name|String
index|[]
name|aggrNames
range|:
name|equivalent
control|)
block|{
try|try
block|{
comment|// the equivalent definition to 'custom1'
name|String
name|name
init|=
literal|"custom"
operator|+
operator|(
name|cnt
operator|++
operator|)
decl_stmt|;
name|privilegeManager
operator|.
name|registerPrivilege
argument_list|(
name|name
argument_list|,
literal|false
argument_list|,
name|aggrNames
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Equivalent '"
operator|+
name|name
operator|+
literal|"' definitions must be detected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegisterBuiltInPrivilege
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|builtIns
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|builtIns
operator|.
name|put
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|builtIns
operator|.
name|put
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_LIFECYCLE_MANAGEMENT
argument_list|,
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
block|}
argument_list|)
expr_stmt|;
name|builtIns
operator|.
name|put
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|builtIns
operator|.
name|put
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|builtInName
range|:
name|builtIns
operator|.
name|keySet
argument_list|()
control|)
block|{
try|try
block|{
name|privilegeManager
operator|.
name|registerPrivilege
argument_list|(
name|builtInName
argument_list|,
literal|false
argument_list|,
name|builtIns
operator|.
name|get
argument_list|(
name|builtInName
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Privilege name "
operator|+
name|builtInName
operator|+
literal|" already in use -> Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegisterInvalidNewAggregate
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|newAggregates
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
comment|// same as jcr:read
name|newAggregates
operator|.
name|put
argument_list|(
literal|"jcrReadAggregate"
argument_list|,
name|getAggregateNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
comment|// aggregated combining built-in and an unknown privilege
name|newAggregates
operator|.
name|put
argument_list|(
literal|"newAggregate2"
argument_list|,
name|getAggregateNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
literal|"unknownPrivilege"
argument_list|)
argument_list|)
expr_stmt|;
comment|// aggregate containing unknown privilege
name|newAggregates
operator|.
name|put
argument_list|(
literal|"newAggregate3"
argument_list|,
name|getAggregateNames
argument_list|(
literal|"unknownPrivilege"
argument_list|)
argument_list|)
expr_stmt|;
comment|// custom aggregated contains itself
name|newAggregates
operator|.
name|put
argument_list|(
literal|"newAggregate4"
argument_list|,
name|getAggregateNames
argument_list|(
literal|"newAggregate"
argument_list|)
argument_list|)
expr_stmt|;
comment|// same as rep:write
name|newAggregates
operator|.
name|put
argument_list|(
literal|"repWriteAggregate"
argument_list|,
name|getAggregateNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_MODIFY_PROPERTIES
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_NODE
argument_list|)
argument_list|)
expr_stmt|;
comment|// aggregated combining built-in and unknown custom
name|newAggregates
operator|.
name|put
argument_list|(
literal|"newAggregate5"
argument_list|,
name|getAggregateNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
literal|"unknownPrivilege"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|newAggregates
operator|.
name|keySet
argument_list|()
control|)
block|{
try|try
block|{
name|privilegeManager
operator|.
name|registerPrivilege
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|newAggregates
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"New aggregate "
operator|+
name|name
operator|+
literal|" referring to unknown Privilege  -> Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegisterInvalidNewAggregate2
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|newCustomPrivs
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|newCustomPrivs
operator|.
name|put
argument_list|(
literal|"new"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|newCustomPrivs
operator|.
name|put
argument_list|(
literal|"new2"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|decl
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|decl
operator|.
name|add
argument_list|(
literal|"new"
argument_list|)
expr_stmt|;
name|decl
operator|.
name|add
argument_list|(
literal|"new2"
argument_list|)
expr_stmt|;
name|newCustomPrivs
operator|.
name|put
argument_list|(
literal|"new3"
argument_list|,
name|getAggregateNames
argument_list|(
literal|"new"
argument_list|,
literal|"new2"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|newCustomPrivs
operator|.
name|keySet
argument_list|()
control|)
block|{
name|boolean
name|isAbstract
init|=
literal|true
decl_stmt|;
name|String
index|[]
name|aggrNames
init|=
name|newCustomPrivs
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|privilegeManager
operator|.
name|registerPrivilege
argument_list|(
name|name
argument_list|,
name|isAbstract
argument_list|,
name|aggrNames
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|newAggregates
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
comment|// other illegal aggregates already represented by registered definition.
name|newAggregates
operator|.
name|put
argument_list|(
literal|"newA2"
argument_list|,
name|getAggregateNames
argument_list|(
literal|"new"
argument_list|)
argument_list|)
expr_stmt|;
name|newAggregates
operator|.
name|put
argument_list|(
literal|"newA3"
argument_list|,
name|getAggregateNames
argument_list|(
literal|"new2"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|newAggregates
operator|.
name|keySet
argument_list|()
control|)
block|{
name|boolean
name|isAbstract
init|=
literal|false
decl_stmt|;
name|String
index|[]
name|aggrNames
init|=
name|newAggregates
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
block|{
name|privilegeManager
operator|.
name|registerPrivilege
argument_list|(
name|name
argument_list|,
name|isAbstract
argument_list|,
name|aggrNames
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Invalid aggregation in definition '"
operator|+
name|name
operator|.
name|toString
argument_list|()
operator|+
literal|"' : Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
comment|// FIXME: JCR_ALL privilege must be updated
comment|//    @Test
comment|//    public void testRegisterCustomPrivileges() throws RepositoryException {
comment|//        Map<String, String[]> newCustomPrivs = new HashMap<String, String[]>();
comment|//        newCustomPrivs.put("new", new String[0]);
comment|//        newCustomPrivs.put("test:new", new String[0]);
comment|//
comment|//        for (String name : newCustomPrivs.keySet()) {
comment|//            boolean isAbstract = true;
comment|//            String[] aggrNames = newCustomPrivs.get(name);
comment|//
comment|//            Privilege registered = privilegeManager.registerPrivilege(name, isAbstract, aggrNames);
comment|//
comment|//            // validate definition
comment|//            Privilege privilege = privilegeManager.getPrivilege(name);
comment|//            assertNotNull(privilege);
comment|//            assertEquals(name, privilege.getName());
comment|//            assertTrue(privilege.isAbstract());
comment|//            assertEquals(0, privilege.getDeclaredAggregatePrivileges().length);
comment|//            assertContainsDeclared(privilegeManager.getPrivilege(PrivilegeConstants.JCR_ALL), name);
comment|//        }
comment|//
comment|//        Map<String, String[]> newAggregates = new HashMap<String, String[]>();
comment|//        // a new aggregate of custom privileges
comment|//        newAggregates.put("newA2", getAggregateNames("test:new", "new"));
comment|//        // a new aggregate of custom and built-in privilege
comment|//        newAggregates.put("newA1", getAggregateNames("new", PrivilegeConstants.JCR_READ));
comment|//        // aggregating built-in privileges
comment|//        newAggregates.put("aggrBuiltIn", getAggregateNames(PrivilegeConstants.JCR_MODIFY_PROPERTIES, PrivilegeConstants.JCR_READ));
comment|//
comment|//        for (String name : newAggregates.keySet()) {
comment|//            boolean isAbstract = false;
comment|//            String[] aggrNames = newAggregates.get(name);
comment|//            privilegeManager.registerPrivilege(name, isAbstract, aggrNames);
comment|//            Privilege p = privilegeManager.getPrivilege(name);
comment|//
comment|//            assertNotNull(p);
comment|//            assertEquals(name, p.getName());
comment|//            assertFalse(p.isAbstract());
comment|//
comment|//            for (String n : aggrNames) {
comment|//                assertContainsDeclared(p, n);
comment|//            }
comment|//            assertContainsDeclared(privilegeManager.getPrivilege(PrivilegeConstants.JCR_ALL), name);
comment|//        }
comment|//    }
annotation|@
name|Test
specifier|public
name|void
name|testCustomPrivilegeVisibleToNewSession
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|boolean
name|isAbstract
init|=
literal|false
decl_stmt|;
name|String
name|privName
init|=
literal|"testCustomPrivilegeVisibleToNewSession"
decl_stmt|;
name|privilegeManager
operator|.
name|registerPrivilege
argument_list|(
name|privName
argument_list|,
name|isAbstract
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Session
name|s2
init|=
name|getHelper
argument_list|()
operator|.
name|getSuperuserSession
argument_list|()
decl_stmt|;
try|try
block|{
name|PrivilegeManager
name|pm
init|=
name|getPrivilegeManager
argument_list|(
name|s2
argument_list|)
decl_stmt|;
name|Privilege
name|priv
init|=
name|pm
operator|.
name|getPrivilege
argument_list|(
name|privName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|privName
argument_list|,
name|priv
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|isAbstract
argument_list|,
name|priv
operator|.
name|isAbstract
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|priv
operator|.
name|isAggregate
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|s2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
comment|//    FIXME: Session#refresh must refresh privilege definitions
comment|//    @Test
comment|//    public void testCustomPrivilegeVisibleAfterRefresh() throws RepositoryException {
comment|//        Session s2 = getHelper().getSuperuserSession();
comment|//        try {
comment|//            boolean isAbstract = false;
comment|//            String privName = "testCustomPrivilegeVisibleAfterRefresh";
comment|//            privilegeManager.registerPrivilege(privName, isAbstract, new String[0]);
comment|//
comment|//            // before refreshing: privilege not visible
comment|//            PrivilegeManager pm = getPrivilegeManager(s2);
comment|//            try {
comment|//                Privilege priv = pm.getPrivilege(privName);
comment|//                fail("Custom privilege must show up after Session#refresh()");
comment|//            } catch (AccessControlException e) {
comment|//                // success
comment|//            }
comment|//
comment|//            // after refresh privilege manager must be updated
comment|//            s2.refresh(true);
comment|//            Privilege priv = pm.getPrivilege(privName);
comment|//            assertEquals(privName, priv.getName());
comment|//            assertEquals(isAbstract, priv.isAbstract());
comment|//            assertFalse(priv.isAggregate());
comment|//        } finally {
comment|//            s2.logout();
comment|//        }
comment|//    }
block|}
end_class

end_unit

