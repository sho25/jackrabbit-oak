begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Weigher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|MemoryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheLIRS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|EmpiricalWeigher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Node
operator|.
name|Children
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|blob
operator|.
name|MongoBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBDocumentStore
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * A MicroKernel implementation that stores the data in a MongoDB.  */
end_comment

begin_class
specifier|public
class|class
name|MongoMK
implements|implements
name|MicroKernel
block|{
comment|/**      * The threshold where special handling for many child node starts.      */
specifier|static
specifier|final
name|int
name|MANY_CHILDREN_THRESHOLD
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.mongoMK.manyChildren"
argument_list|,
literal|50
argument_list|)
decl_stmt|;
comment|/**      * Enable the LIRS cache.      */
specifier|static
specifier|final
name|boolean
name|LIRS_CACHE
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"oak.mongoMK.lirsCache"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * Enable fast diff operations.      */
specifier|private
specifier|static
specifier|final
name|boolean
name|FAST_DIFF
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"oak.mongoMK.fastDiff"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * The MongoDB store.      */
specifier|protected
specifier|final
name|MongoNodeStore
name|nodeStore
decl_stmt|;
comment|/**      * The MongoDB store (might be used by multiple MongoMKs).      */
specifier|protected
specifier|final
name|DocumentStore
name|store
decl_stmt|;
comment|/**      * Diff cache.      */
specifier|private
specifier|final
name|Cache
argument_list|<
name|String
argument_list|,
name|Diff
argument_list|>
name|diffCache
decl_stmt|;
specifier|private
specifier|final
name|CacheStats
name|diffCacheStats
decl_stmt|;
name|MongoMK
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|nodeStore
operator|=
name|builder
operator|.
name|getNodeStore
argument_list|()
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|nodeStore
operator|.
name|getDocumentStore
argument_list|()
expr_stmt|;
name|diffCache
operator|=
name|builder
operator|.
name|buildCache
argument_list|(
name|builder
operator|.
name|getDiffCacheSize
argument_list|()
argument_list|)
expr_stmt|;
name|diffCacheStats
operator|=
operator|new
name|CacheStats
argument_list|(
name|diffCache
argument_list|,
literal|"MongoMk-DiffCache"
argument_list|,
name|builder
operator|.
name|getWeigher
argument_list|()
argument_list|,
name|builder
operator|.
name|getDiffCacheSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|nodeStore
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
name|void
name|backgroundRead
parameter_list|()
block|{
name|nodeStore
operator|.
name|backgroundRead
argument_list|()
expr_stmt|;
block|}
name|void
name|backgroundWrite
parameter_list|()
block|{
name|nodeStore
operator|.
name|backgroundWrite
argument_list|()
expr_stmt|;
block|}
name|void
name|runBackgroundOperations
parameter_list|()
block|{
name|nodeStore
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
block|}
specifier|public
name|MongoNodeStore
name|getNodeStore
parameter_list|()
block|{
return|return
name|nodeStore
return|;
block|}
name|ClusterNodeInfo
name|getClusterInfo
parameter_list|()
block|{
return|return
name|nodeStore
operator|.
name|getClusterInfo
argument_list|()
return|;
block|}
name|int
name|getPendingWriteCount
parameter_list|()
block|{
return|return
name|nodeStore
operator|.
name|getPendingWriteCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHeadRevision
parameter_list|()
throws|throws
name|MicroKernelException
block|{
return|return
name|nodeStore
operator|.
name|getHeadRevision
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|String
name|checkpoint
parameter_list|(
name|long
name|lifetime
parameter_list|)
throws|throws
name|MicroKernelException
block|{
return|return
name|nodeStore
operator|.
name|checkpoint
argument_list|(
name|lifetime
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRevisionHistory
parameter_list|(
name|long
name|since
parameter_list|,
name|int
name|maxEntries
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// not currently called by oak-core
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|waitForCommit
parameter_list|(
name|String
name|oldHeadRevisionId
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|MicroKernelException
throws|,
name|InterruptedException
block|{
comment|// not currently called by oak-core
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getJournal
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// not currently called by oak-core
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|diff
parameter_list|(
specifier|final
name|String
name|fromRevisionId
parameter_list|,
specifier|final
name|String
name|toRevisionId
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|int
name|depth
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|String
name|key
init|=
name|fromRevisionId
operator|+
literal|"-"
operator|+
name|toRevisionId
operator|+
literal|"-"
operator|+
name|path
operator|+
literal|"-"
operator|+
name|depth
decl_stmt|;
try|try
block|{
return|return
name|diffCache
operator|.
name|get
argument_list|(
name|key
argument_list|,
operator|new
name|Callable
argument_list|<
name|Diff
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Diff
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|Diff
argument_list|(
name|diffImpl
argument_list|(
name|fromRevisionId
argument_list|,
name|toRevisionId
argument_list|,
name|path
argument_list|,
name|depth
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|diff
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|MicroKernelException
condition|)
block|{
throw|throw
operator|(
name|MicroKernelException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|String
name|diffImpl
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|fromRevisionId
operator|.
name|equals
argument_list|(
name|toRevisionId
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
block|}
if|if
condition|(
name|depth
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Only depth 0 is supported, depth is "
operator|+
name|depth
argument_list|)
throw|;
block|}
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
name|Revision
name|fromRev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|fromRevisionId
argument_list|)
decl_stmt|;
name|Revision
name|toRev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|toRevisionId
argument_list|)
decl_stmt|;
name|Node
name|from
init|=
name|nodeStore
operator|.
name|getNode
argument_list|(
name|path
argument_list|,
name|fromRev
argument_list|)
decl_stmt|;
name|Node
name|to
init|=
name|nodeStore
operator|.
name|getNode
argument_list|(
name|path
argument_list|,
name|toRev
argument_list|)
decl_stmt|;
if|if
condition|(
name|from
operator|==
literal|null
operator|||
name|to
operator|==
literal|null
condition|)
block|{
comment|// TODO implement correct behavior if the node does't/didn't exist
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Diff is only supported if the node exists in both cases. "
operator|+
literal|"Node [%s], fromRev [%s] -> %s, toRev [%s] -> %s"
argument_list|,
name|path
argument_list|,
name|fromRev
argument_list|,
name|from
operator|!=
literal|null
argument_list|,
name|toRev
argument_list|,
name|to
operator|!=
literal|null
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|JsopWriter
name|w
init|=
operator|new
name|JsopStream
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|from
operator|.
name|getPropertyNames
argument_list|()
control|)
block|{
comment|// changed or removed properties
name|String
name|fromValue
init|=
name|from
operator|.
name|getProperty
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|String
name|toValue
init|=
name|to
operator|.
name|getProperty
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fromValue
operator|.
name|equals
argument_list|(
name|toValue
argument_list|)
condition|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|toValue
operator|==
literal|null
condition|)
block|{
name|w
operator|.
name|value
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|w
operator|.
name|encodedValue
argument_list|(
name|toValue
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|p
range|:
name|to
operator|.
name|getPropertyNames
argument_list|()
control|)
block|{
comment|// added properties
if|if
condition|(
name|from
operator|.
name|getProperty
argument_list|(
name|p
argument_list|)
operator|==
literal|null
condition|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|p
argument_list|)
operator|.
name|encodedValue
argument_list|(
name|to
operator|.
name|getProperty
argument_list|(
name|p
argument_list|)
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
block|}
comment|// TODO this does not work well for large child node lists
comment|// use a MongoDB index instead
name|int
name|max
init|=
name|MANY_CHILDREN_THRESHOLD
decl_stmt|;
name|Children
name|fromChildren
decl_stmt|,
name|toChildren
decl_stmt|;
name|fromChildren
operator|=
name|nodeStore
operator|.
name|getChildren
argument_list|(
name|from
argument_list|,
literal|null
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|toChildren
operator|=
name|nodeStore
operator|.
name|getChildren
argument_list|(
name|to
argument_list|,
literal|null
argument_list|,
name|max
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fromChildren
operator|.
name|hasMore
operator|&&
operator|!
name|toChildren
operator|.
name|hasMore
condition|)
block|{
name|diffFewChildren
argument_list|(
name|w
argument_list|,
name|fromChildren
argument_list|,
name|fromRev
argument_list|,
name|toChildren
argument_list|,
name|toRev
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|FAST_DIFF
condition|)
block|{
name|diffManyChildren
argument_list|(
name|w
argument_list|,
name|path
argument_list|,
name|fromRev
argument_list|,
name|toRev
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|max
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
name|fromChildren
operator|=
name|nodeStore
operator|.
name|getChildren
argument_list|(
name|from
argument_list|,
literal|null
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|toChildren
operator|=
name|nodeStore
operator|.
name|getChildren
argument_list|(
name|to
argument_list|,
literal|null
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|diffFewChildren
argument_list|(
name|w
argument_list|,
name|fromChildren
argument_list|,
name|fromRev
argument_list|,
name|toChildren
argument_list|,
name|toRev
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|w
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|diffManyChildren
parameter_list|(
name|JsopWriter
name|w
parameter_list|,
name|String
name|path
parameter_list|,
name|Revision
name|fromRev
parameter_list|,
name|Revision
name|toRev
parameter_list|)
block|{
name|long
name|minTimestamp
init|=
name|Math
operator|.
name|min
argument_list|(
name|fromRev
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|toRev
operator|.
name|getTimestamp
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|minValue
init|=
name|Commit
operator|.
name|getModified
argument_list|(
name|minTimestamp
argument_list|)
decl_stmt|;
name|String
name|fromKey
init|=
name|Utils
operator|.
name|getKeyLowerLimit
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|toKey
init|=
name|Utils
operator|.
name|getKeyUpperLimit
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeDocument
name|doc
range|:
name|store
operator|.
name|query
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|,
name|NodeDocument
operator|.
name|MODIFIED
argument_list|,
name|minValue
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
control|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|Utils
operator|.
name|getPathFromId
argument_list|(
name|doc
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// also consider nodes with not yet stored modifications (OAK-1107)
name|Revision
name|minRev
init|=
operator|new
name|Revision
argument_list|(
name|minTimestamp
argument_list|,
literal|0
argument_list|,
name|nodeStore
operator|.
name|getClusterId
argument_list|()
argument_list|)
decl_stmt|;
name|addPathsForDiff
argument_list|(
name|path
argument_list|,
name|paths
argument_list|,
name|nodeStore
operator|.
name|getPendingModifications
argument_list|()
argument_list|,
name|minRev
argument_list|)
expr_stmt|;
for|for
control|(
name|Revision
name|r
range|:
operator|new
name|Revision
index|[]
block|{
name|fromRev
block|,
name|toRev
block|}
control|)
block|{
if|if
condition|(
name|r
operator|.
name|isBranch
argument_list|()
condition|)
block|{
name|Branch
name|b
init|=
name|nodeStore
operator|.
name|getBranches
argument_list|()
operator|.
name|getBranch
argument_list|(
name|fromRev
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|addPathsForDiff
argument_list|(
name|path
argument_list|,
name|paths
argument_list|,
name|b
operator|.
name|getModifications
argument_list|(
name|r
argument_list|)
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|p
range|:
name|paths
control|)
block|{
name|Node
name|fromNode
init|=
name|nodeStore
operator|.
name|getNode
argument_list|(
name|p
argument_list|,
name|fromRev
argument_list|)
decl_stmt|;
name|Node
name|toNode
init|=
name|nodeStore
operator|.
name|getNode
argument_list|(
name|p
argument_list|,
name|toRev
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromNode
operator|!=
literal|null
condition|)
block|{
comment|// exists in fromRev
if|if
condition|(
name|toNode
operator|!=
literal|null
condition|)
block|{
comment|// exists in both revisions
comment|// check if different
if|if
condition|(
operator|!
name|fromNode
operator|.
name|getLastRevision
argument_list|()
operator|.
name|equals
argument_list|(
name|toNode
operator|.
name|getLastRevision
argument_list|()
argument_list|)
condition|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|p
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// does not exist in toRev -> was removed
name|w
operator|.
name|tag
argument_list|(
literal|'-'
argument_list|)
operator|.
name|value
argument_list|(
name|p
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// does not exist in fromRev
if|if
condition|(
name|toNode
operator|!=
literal|null
condition|)
block|{
comment|// exists in toRev
name|w
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
name|p
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// does not exist in either revisions
comment|// -> do nothing
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|addPathsForDiff
parameter_list|(
name|String
name|path
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|,
name|UnsavedModifications
name|pending
parameter_list|,
name|Revision
name|minRev
parameter_list|)
block|{
for|for
control|(
name|String
name|p
range|:
name|pending
operator|.
name|getPaths
argument_list|(
name|minRev
argument_list|)
control|)
block|{
if|if
condition|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|p
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|parent
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|diffFewChildren
parameter_list|(
name|JsopWriter
name|w
parameter_list|,
name|Children
name|fromChildren
parameter_list|,
name|Revision
name|fromRev
parameter_list|,
name|Children
name|toChildren
parameter_list|,
name|Revision
name|toRev
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|childrenSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|toChildren
operator|.
name|children
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|n
range|:
name|fromChildren
operator|.
name|children
control|)
block|{
if|if
condition|(
operator|!
name|childrenSet
operator|.
name|contains
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'-'
argument_list|)
operator|.
name|value
argument_list|(
name|n
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Node
name|n1
init|=
name|nodeStore
operator|.
name|getNode
argument_list|(
name|n
argument_list|,
name|fromRev
argument_list|)
decl_stmt|;
name|Node
name|n2
init|=
name|nodeStore
operator|.
name|getNode
argument_list|(
name|n
argument_list|,
name|toRev
argument_list|)
decl_stmt|;
comment|// this is not fully correct:
comment|// a change is detected if the node changed recently,
comment|// even if the revisions are well in the past
comment|// if this is a problem it would need to be changed
name|checkNotNull
argument_list|(
name|n1
argument_list|,
literal|"Node at [%s] not found for fromRev [%s]"
argument_list|,
name|n
argument_list|,
name|fromRev
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|n2
argument_list|,
literal|"Node at [%s] not found for toRev [%s]"
argument_list|,
name|n
argument_list|,
name|toRev
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|n1
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|n2
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|n
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|childrenSet
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|fromChildren
operator|.
name|children
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|n
range|:
name|toChildren
operator|.
name|children
control|)
block|{
if|if
condition|(
operator|!
name|childrenSet
operator|.
name|contains
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
name|n
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|nodeExists
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Path is not absolute: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|revisionId
operator|=
name|revisionId
operator|!=
literal|null
condition|?
name|revisionId
else|:
name|nodeStore
operator|.
name|getHeadRevision
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|Revision
name|rev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|revisionId
argument_list|)
decl_stmt|;
name|Node
name|n
init|=
name|nodeStore
operator|.
name|getNode
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
decl_stmt|;
return|return
name|n
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// not currently called by oak-core
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNodes
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|int
name|depth
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|maxChildNodes
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|depth
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Only depth 0 is supported, depth is "
operator|+
name|depth
argument_list|)
throw|;
block|}
name|revisionId
operator|=
name|revisionId
operator|!=
literal|null
condition|?
name|revisionId
else|:
name|nodeStore
operator|.
name|getHeadRevision
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|Revision
name|rev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|revisionId
argument_list|)
decl_stmt|;
name|Node
name|n
init|=
name|nodeStore
operator|.
name|getNode
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|JsopStream
name|json
init|=
operator|new
name|JsopStream
argument_list|()
decl_stmt|;
name|boolean
name|includeId
init|=
name|filter
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|contains
argument_list|(
literal|":id"
argument_list|)
decl_stmt|;
name|includeId
operator||=
name|filter
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|contains
argument_list|(
literal|":hash"
argument_list|)
expr_stmt|;
name|json
operator|.
name|object
argument_list|()
expr_stmt|;
name|n
operator|.
name|append
argument_list|(
name|json
argument_list|,
name|includeId
argument_list|)
expr_stmt|;
name|int
name|max
decl_stmt|;
if|if
condition|(
name|maxChildNodes
operator|==
operator|-
literal|1
condition|)
block|{
name|max
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
name|maxChildNodes
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
else|else
block|{
comment|// use long to avoid overflows
name|long
name|m
init|=
operator|(
operator|(
name|long
operator|)
name|maxChildNodes
operator|)
operator|+
name|offset
decl_stmt|;
name|max
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|m
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
name|Children
name|c
init|=
name|nodeStore
operator|.
name|getChildren
argument_list|(
name|n
argument_list|,
literal|null
argument_list|,
name|max
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
name|offset
init|;
name|i
operator|<
name|c
operator|.
name|children
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|maxChildNodes
operator|--
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
name|String
name|name
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|c
operator|.
name|children
operator|.
name|get
argument_list|(
operator|(
name|int
operator|)
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|json
operator|.
name|key
argument_list|(
name|name
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|.
name|hasMore
condition|)
block|{
comment|// TODO use a better way to notify there are more children
name|json
operator|.
name|key
argument_list|(
literal|":childNodeCount"
argument_list|)
operator|.
name|value
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|json
operator|.
name|key
argument_list|(
literal|":childNodeCount"
argument_list|)
operator|.
name|value
argument_list|(
name|c
operator|.
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|json
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|json
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|commit
parameter_list|(
name|String
name|rootPath
parameter_list|,
name|String
name|jsonDiff
parameter_list|,
name|String
name|baseRevId
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|boolean
name|isBranch
init|=
literal|false
decl_stmt|;
name|Revision
name|rev
decl_stmt|;
name|Commit
name|commit
init|=
name|nodeStore
operator|.
name|newCommit
argument_list|(
name|baseRevId
operator|!=
literal|null
condition|?
name|Revision
operator|.
name|fromString
argument_list|(
name|baseRevId
argument_list|)
else|:
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|Revision
name|baseRev
init|=
name|commit
operator|.
name|getBaseRevision
argument_list|()
decl_stmt|;
name|isBranch
operator|=
name|baseRev
operator|!=
literal|null
operator|&&
name|baseRev
operator|.
name|isBranch
argument_list|()
expr_stmt|;
name|parseJsonDiff
argument_list|(
name|commit
argument_list|,
name|jsonDiff
argument_list|,
name|rootPath
argument_list|)
expr_stmt|;
name|rev
operator|=
name|nodeStore
operator|.
name|apply
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|nodeStore
operator|.
name|canceled
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nodeStore
operator|.
name|done
argument_list|(
name|commit
argument_list|,
name|isBranch
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rev
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|branch
parameter_list|(
annotation|@
name|Nullable
name|String
name|trunkRevisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// nothing is written when the branch is created, the returned
comment|// revision simply acts as a reference to the branch base revision
name|Revision
name|revision
init|=
name|trunkRevisionId
operator|!=
literal|null
condition|?
name|Revision
operator|.
name|fromString
argument_list|(
name|trunkRevisionId
argument_list|)
else|:
name|nodeStore
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
return|return
name|revision
operator|.
name|asBranchRevision
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|merge
parameter_list|(
name|String
name|branchRevisionId
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// TODO improve implementation if needed
name|Revision
name|revision
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|branchRevisionId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|revision
operator|.
name|isBranch
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Not a branch: "
operator|+
name|branchRevisionId
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|nodeStore
operator|.
name|merge
argument_list|(
name|revision
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|String
name|rebase
parameter_list|(
annotation|@
name|Nonnull
name|String
name|branchRevisionId
parameter_list|,
annotation|@
name|Nullable
name|String
name|newBaseRevisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|Revision
name|r
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|branchRevisionId
argument_list|)
decl_stmt|;
name|Revision
name|base
init|=
name|newBaseRevisionId
operator|!=
literal|null
condition|?
name|Revision
operator|.
name|fromString
argument_list|(
name|newBaseRevisionId
argument_list|)
else|:
name|nodeStore
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
return|return
name|nodeStore
operator|.
name|rebase
argument_list|(
name|r
argument_list|,
name|base
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|reset
parameter_list|(
annotation|@
name|Nonnull
name|String
name|branchRevisionId
parameter_list|,
annotation|@
name|Nonnull
name|String
name|ancestorRevisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|Revision
name|branch
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|branchRevisionId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|branch
operator|.
name|isBranch
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Not a branch revision: "
operator|+
name|branchRevisionId
argument_list|)
throw|;
block|}
name|Revision
name|ancestor
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|ancestorRevisionId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ancestor
operator|.
name|isBranch
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Not a branch revision: "
operator|+
name|ancestorRevisionId
argument_list|)
throw|;
block|}
return|return
name|nodeStore
operator|.
name|reset
argument_list|(
name|branch
argument_list|,
name|ancestor
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
try|try
block|{
return|return
name|nodeStore
operator|.
name|getBlob
argument_list|(
name|blobId
argument_list|)
operator|.
name|length
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|String
name|blobId
parameter_list|,
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|buff
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|MicroKernelException
block|{
try|try
block|{
return|return
name|nodeStore
operator|.
name|getBlobStore
argument_list|()
operator|.
name|readBlob
argument_list|(
name|blobId
argument_list|,
name|pos
argument_list|,
name|buff
argument_list|,
name|off
argument_list|,
name|length
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|write
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|MicroKernelException
block|{
try|try
block|{
return|return
name|nodeStore
operator|.
name|getBlobStore
argument_list|()
operator|.
name|writeBlob
argument_list|(
name|in
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|//-------------------------< accessors>------------------------------------
specifier|public
name|DocumentStore
name|getDocumentStore
parameter_list|()
block|{
return|return
name|store
return|;
block|}
specifier|public
name|CacheStats
name|getNodeCacheStats
parameter_list|()
block|{
return|return
name|nodeStore
operator|.
name|getNodeCacheStats
argument_list|()
return|;
block|}
specifier|public
name|CacheStats
name|getNodeChildrenCacheStats
parameter_list|()
block|{
return|return
name|nodeStore
operator|.
name|getNodeChildrenCacheStats
argument_list|()
return|;
block|}
specifier|public
name|CacheStats
name|getDiffCacheStats
parameter_list|()
block|{
return|return
name|diffCacheStats
return|;
block|}
specifier|public
name|CacheStats
name|getDocChildrenCacheStats
parameter_list|()
block|{
return|return
name|nodeStore
operator|.
name|getDocChildrenCacheStats
argument_list|()
return|;
block|}
comment|//------------------------------< internal>--------------------------------
specifier|private
name|void
name|parseJsonDiff
parameter_list|(
name|Commit
name|commit
parameter_list|,
name|String
name|json
parameter_list|,
name|String
name|rootPath
parameter_list|)
block|{
name|Revision
name|baseRev
init|=
name|commit
operator|.
name|getBaseRevision
argument_list|()
decl_stmt|;
name|String
name|baseRevId
init|=
name|baseRev
operator|!=
literal|null
condition|?
name|baseRev
operator|.
name|toString
argument_list|()
else|:
literal|null
decl_stmt|;
name|JsopReader
name|t
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|json
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|r
init|=
name|t
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|JsopReader
operator|.
name|END
condition|)
block|{
break|break;
block|}
name|String
name|path
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|rootPath
argument_list|,
name|t
operator|.
name|readString
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|r
condition|)
block|{
case|case
literal|'+'
case|:
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|parseAddNode
argument_list|(
name|commit
argument_list|,
name|t
argument_list|,
name|path
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'-'
case|:
name|Node
name|toRemove
init|=
name|nodeStore
operator|.
name|getNode
argument_list|(
name|path
argument_list|,
name|commit
operator|.
name|getBaseRevision
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toRemove
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Node not found: "
operator|+
name|path
operator|+
literal|" in revision "
operator|+
name|baseRevId
argument_list|)
throw|;
block|}
name|commit
operator|.
name|removeNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|markAsDeleted
argument_list|(
name|toRemove
argument_list|,
name|commit
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|commit
operator|.
name|removeNodeDiff
argument_list|(
name|path
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'^'
case|:
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|value
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
name|JsopReader
operator|.
name|NULL
argument_list|)
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|t
operator|.
name|readRawValue
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|String
name|p
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|propertyName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|commit
operator|.
name|updateProperty
argument_list|(
name|p
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|commit
operator|.
name|updatePropertyDiff
argument_list|(
name|p
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'>'
case|:
block|{
comment|// TODO support moving nodes that were modified within this commit
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|targetPath
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
name|targetPath
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|rootPath
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
block|}
name|Node
name|source
init|=
name|nodeStore
operator|.
name|getNode
argument_list|(
name|path
argument_list|,
name|baseRev
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Node not found: "
operator|+
name|path
operator|+
literal|" in revision "
operator|+
name|baseRevId
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|nodeExists
argument_list|(
name|targetPath
argument_list|,
name|baseRevId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Node already exists: "
operator|+
name|targetPath
operator|+
literal|" in revision "
operator|+
name|baseRevId
argument_list|)
throw|;
block|}
name|commit
operator|.
name|moveNode
argument_list|(
name|path
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|moveNode
argument_list|(
name|source
argument_list|,
name|targetPath
argument_list|,
name|commit
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'*'
case|:
block|{
comment|// TODO support copying nodes that were modified within this commit
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|targetPath
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
name|targetPath
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|rootPath
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
block|}
name|Node
name|source
init|=
name|nodeStore
operator|.
name|getNode
argument_list|(
name|path
argument_list|,
name|baseRev
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Node not found: "
operator|+
name|path
operator|+
literal|" in revision "
operator|+
name|baseRevId
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|nodeExists
argument_list|(
name|targetPath
argument_list|,
name|baseRevId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Node already exists: "
operator|+
name|targetPath
operator|+
literal|" in revision "
operator|+
name|baseRevId
argument_list|)
throw|;
block|}
name|commit
operator|.
name|copyNode
argument_list|(
name|path
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|copyNode
argument_list|(
name|source
argument_list|,
name|targetPath
argument_list|,
name|commit
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"token: "
operator|+
operator|(
name|char
operator|)
name|t
operator|.
name|getTokenType
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|parseAddNode
parameter_list|(
name|Commit
name|commit
parameter_list|,
name|JsopReader
name|t
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|Node
name|n
init|=
operator|new
name|Node
argument_list|(
name|path
argument_list|,
name|commit
operator|.
name|getRevision
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|t
operator|.
name|matches
argument_list|(
literal|'}'
argument_list|)
condition|)
block|{
do|do
block|{
name|String
name|key
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|'{'
argument_list|)
condition|)
block|{
name|String
name|childPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|parseAddNode
argument_list|(
name|commit
argument_list|,
name|t
argument_list|,
name|childPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|value
init|=
name|t
operator|.
name|readRawValue
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
condition|)
do|;
name|t
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
name|commit
operator|.
name|addNode
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|commit
operator|.
name|addNodeDiff
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
comment|/**      * A (cached) result of the diff operation.      */
specifier|private
specifier|static
class|class
name|Diff
implements|implements
name|CacheValue
block|{
specifier|final
name|String
name|diff
decl_stmt|;
name|Diff
parameter_list|(
name|String
name|diff
parameter_list|)
block|{
name|this
operator|.
name|diff
operator|=
name|diff
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMemory
parameter_list|()
block|{
return|return
name|diff
operator|.
name|length
argument_list|()
operator|*
literal|2
return|;
block|}
block|}
comment|//----------------------------< Builder>-----------------------------------
comment|/**      * A builder for a MongoMK instance.      */
specifier|public
specifier|static
class|class
name|Builder
block|{
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_MEMORY_CACHE_SIZE
init|=
literal|256
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|private
name|MongoNodeStore
name|nodeStore
decl_stmt|;
specifier|private
name|DocumentStore
name|documentStore
decl_stmt|;
specifier|private
name|BlobStore
name|blobStore
decl_stmt|;
specifier|private
name|int
name|clusterId
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.mongoMK.clusterId"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|int
name|asyncDelay
init|=
literal|1000
decl_stmt|;
specifier|private
name|boolean
name|timing
decl_stmt|;
specifier|private
name|boolean
name|logging
decl_stmt|;
specifier|private
name|Weigher
argument_list|<
name|String
argument_list|,
name|CacheValue
argument_list|>
name|weigher
init|=
operator|new
name|EmpiricalWeigher
argument_list|()
decl_stmt|;
specifier|private
name|long
name|nodeCacheSize
decl_stmt|;
specifier|private
name|long
name|childrenCacheSize
decl_stmt|;
specifier|private
name|long
name|diffCacheSize
decl_stmt|;
specifier|private
name|long
name|documentCacheSize
decl_stmt|;
specifier|private
name|long
name|docChildrenCacheSize
decl_stmt|;
specifier|private
name|boolean
name|useSimpleRevision
decl_stmt|;
specifier|private
name|long
name|splitDocumentAgeMillis
init|=
literal|5
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
specifier|private
name|long
name|offHeapCacheSize
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|Builder
parameter_list|()
block|{
name|memoryCacheSize
argument_list|(
name|DEFAULT_MEMORY_CACHE_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/**          * Set the MongoDB connection to use. By default an in-memory store is used.          *           * @param db the MongoDB connection          * @return this          */
specifier|public
name|Builder
name|setMongoDB
parameter_list|(
name|DB
name|db
parameter_list|)
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|documentStore
operator|=
operator|new
name|MongoDocumentStore
argument_list|(
name|db
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
operator|new
name|MongoBlobStore
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**          * Sets a JDBC connection URL to use for the RDB document store.          *           * @return this          */
specifier|public
name|Builder
name|setRDBConnection
parameter_list|(
name|String
name|jdbcurl
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
block|{
comment|// TODO maybe we need different connections for document store and
comment|// node store
name|this
operator|.
name|documentStore
operator|=
operator|new
name|RDBDocumentStore
argument_list|(
name|jdbcurl
argument_list|,
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
operator|new
name|RDBBlobStore
argument_list|(
name|jdbcurl
argument_list|,
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a {@link DataSource} to use for the RDB document store.          *           * @return this          */
specifier|public
name|Builder
name|setRDBConnection
parameter_list|(
name|DataSource
name|ds
parameter_list|)
block|{
comment|// TODO maybe we need different connections for document store and
comment|// node store
name|this
operator|.
name|documentStore
operator|=
operator|new
name|RDBDocumentStore
argument_list|(
name|ds
argument_list|)
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
operator|new
name|RDBBlobStore
argument_list|(
name|ds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use the timing document store wrapper.          *           * @param timing whether to use the timing wrapper.          * @return this          */
specifier|public
name|Builder
name|setTiming
parameter_list|(
name|boolean
name|timing
parameter_list|)
block|{
name|this
operator|.
name|timing
operator|=
name|timing
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|boolean
name|getTiming
parameter_list|()
block|{
return|return
name|timing
return|;
block|}
specifier|public
name|Builder
name|setLogging
parameter_list|(
name|boolean
name|logging
parameter_list|)
block|{
name|this
operator|.
name|logging
operator|=
name|logging
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|boolean
name|getLogging
parameter_list|()
block|{
return|return
name|logging
return|;
block|}
comment|/**          * Set the document store to use. By default an in-memory store is used.          *           * @param documentStore the document store          * @return this          */
specifier|public
name|Builder
name|setDocumentStore
parameter_list|(
name|DocumentStore
name|documentStore
parameter_list|)
block|{
name|this
operator|.
name|documentStore
operator|=
name|documentStore
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|DocumentStore
name|getDocumentStore
parameter_list|()
block|{
if|if
condition|(
name|documentStore
operator|==
literal|null
condition|)
block|{
name|documentStore
operator|=
operator|new
name|MemoryDocumentStore
argument_list|()
expr_stmt|;
block|}
return|return
name|documentStore
return|;
block|}
specifier|public
name|MongoNodeStore
name|getNodeStore
parameter_list|()
block|{
if|if
condition|(
name|nodeStore
operator|==
literal|null
condition|)
block|{
name|nodeStore
operator|=
operator|new
name|MongoNodeStore
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeStore
return|;
block|}
comment|/**          * Set the blob store to use. By default an in-memory store is used.          *           * @param blobStore the blob store          * @return this          */
specifier|public
name|Builder
name|setBlobStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
block|{
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|BlobStore
name|getBlobStore
parameter_list|()
block|{
if|if
condition|(
name|blobStore
operator|==
literal|null
condition|)
block|{
name|blobStore
operator|=
operator|new
name|MemoryBlobStore
argument_list|()
expr_stmt|;
block|}
return|return
name|blobStore
return|;
block|}
comment|/**          * Set the cluster id to use. By default, 0 is used, meaning the cluster          * id is automatically generated.          *           * @param clusterId the cluster id          * @return this          */
specifier|public
name|Builder
name|setClusterId
parameter_list|(
name|int
name|clusterId
parameter_list|)
block|{
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|int
name|getClusterId
parameter_list|()
block|{
return|return
name|clusterId
return|;
block|}
comment|/**          * Set the maximum delay to write the last revision to the root node. By          * default 1000 (meaning 1 second) is used.          *           * @param asyncDelay in milliseconds          * @return this          */
specifier|public
name|Builder
name|setAsyncDelay
parameter_list|(
name|int
name|asyncDelay
parameter_list|)
block|{
name|this
operator|.
name|asyncDelay
operator|=
name|asyncDelay
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|int
name|getAsyncDelay
parameter_list|()
block|{
return|return
name|asyncDelay
return|;
block|}
specifier|public
name|Weigher
argument_list|<
name|String
argument_list|,
name|CacheValue
argument_list|>
name|getWeigher
parameter_list|()
block|{
return|return
name|weigher
return|;
block|}
specifier|public
name|Builder
name|withWeigher
parameter_list|(
name|Weigher
argument_list|<
name|String
argument_list|,
name|CacheValue
argument_list|>
name|weigher
parameter_list|)
block|{
name|this
operator|.
name|weigher
operator|=
name|weigher
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|memoryCacheSize
parameter_list|(
name|long
name|memoryCacheSize
parameter_list|)
block|{
name|this
operator|.
name|nodeCacheSize
operator|=
name|memoryCacheSize
operator|*
literal|20
operator|/
literal|100
expr_stmt|;
name|this
operator|.
name|childrenCacheSize
operator|=
name|memoryCacheSize
operator|*
literal|10
operator|/
literal|100
expr_stmt|;
name|this
operator|.
name|diffCacheSize
operator|=
name|memoryCacheSize
operator|*
literal|2
operator|/
literal|100
expr_stmt|;
name|this
operator|.
name|docChildrenCacheSize
operator|=
name|memoryCacheSize
operator|*
literal|3
operator|/
literal|100
expr_stmt|;
name|this
operator|.
name|documentCacheSize
operator|=
name|memoryCacheSize
operator|-
name|nodeCacheSize
operator|-
name|childrenCacheSize
operator|-
name|diffCacheSize
operator|-
name|docChildrenCacheSize
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|long
name|getNodeCacheSize
parameter_list|()
block|{
return|return
name|nodeCacheSize
return|;
block|}
specifier|public
name|long
name|getChildrenCacheSize
parameter_list|()
block|{
return|return
name|childrenCacheSize
return|;
block|}
specifier|public
name|long
name|getDocumentCacheSize
parameter_list|()
block|{
return|return
name|documentCacheSize
return|;
block|}
specifier|public
name|long
name|getDocChildrenCacheSize
parameter_list|()
block|{
return|return
name|docChildrenCacheSize
return|;
block|}
specifier|public
name|long
name|getDiffCacheSize
parameter_list|()
block|{
return|return
name|diffCacheSize
return|;
block|}
specifier|public
name|Builder
name|setUseSimpleRevision
parameter_list|(
name|boolean
name|useSimpleRevision
parameter_list|)
block|{
name|this
operator|.
name|useSimpleRevision
operator|=
name|useSimpleRevision
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|boolean
name|isUseSimpleRevision
parameter_list|()
block|{
return|return
name|useSimpleRevision
return|;
block|}
specifier|public
name|Builder
name|setSplitDocumentAgeMillis
parameter_list|(
name|long
name|splitDocumentAgeMillis
parameter_list|)
block|{
name|this
operator|.
name|splitDocumentAgeMillis
operator|=
name|splitDocumentAgeMillis
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|long
name|getSplitDocumentAgeMillis
parameter_list|()
block|{
return|return
name|splitDocumentAgeMillis
return|;
block|}
specifier|public
name|boolean
name|useOffHeapCache
parameter_list|()
block|{
return|return
name|this
operator|.
name|offHeapCacheSize
operator|>
literal|0
return|;
block|}
specifier|public
name|long
name|getOffHeapCacheSize
parameter_list|()
block|{
return|return
name|offHeapCacheSize
return|;
block|}
specifier|public
name|Builder
name|offHeapCacheSize
parameter_list|(
name|long
name|offHeapCacheSize
parameter_list|)
block|{
name|this
operator|.
name|offHeapCacheSize
operator|=
name|offHeapCacheSize
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Open the MongoMK instance using the configured options.          *           * @return the MongoMK instance          */
specifier|public
name|MongoMK
name|open
parameter_list|()
block|{
return|return
operator|new
name|MongoMK
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|V
extends|extends
name|CacheValue
parameter_list|>
name|Cache
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
name|buildCache
parameter_list|(
name|long
name|maxWeight
parameter_list|)
block|{
if|if
condition|(
name|LIRS_CACHE
condition|)
block|{
return|return
name|CacheLIRS
operator|.
name|newBuilder
argument_list|()
operator|.
name|weigher
argument_list|(
name|weigher
argument_list|)
operator|.
name|maximumWeight
argument_list|(
name|maxWeight
argument_list|)
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|weigher
argument_list|(
name|weigher
argument_list|)
operator|.
name|maximumWeight
argument_list|(
name|maxWeight
argument_list|)
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

