begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|nodetype
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|NodeTypeIteratorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|value
operator|.
name|ValueFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NameMapper
import|;
end_import

begin_class
class|class
name|NodeTypeImpl
implements|implements
name|NodeType
block|{
specifier|private
specifier|final
name|NodeTypeManager
name|manager
decl_stmt|;
specifier|private
specifier|final
name|NameMapper
name|mapper
decl_stmt|;
specifier|private
specifier|final
name|ValueFactoryImpl
name|valueFactory
decl_stmt|;
specifier|private
specifier|final
name|NodeTypeDelegate
name|dlg
decl_stmt|;
specifier|public
name|NodeTypeImpl
parameter_list|(
name|NodeTypeManager
name|manager
parameter_list|,
name|ValueFactoryImpl
name|valueFactory
parameter_list|,
name|NameMapper
name|mapper
parameter_list|,
name|NodeTypeDelegate
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
name|this
operator|.
name|valueFactory
operator|=
name|valueFactory
expr_stmt|;
name|this
operator|.
name|mapper
operator|=
name|mapper
expr_stmt|;
name|this
operator|.
name|dlg
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|mapper
operator|.
name|getJcrName
argument_list|(
name|dlg
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getDeclaredSupertypeNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|addNtBase
init|=
operator|!
name|isMixin
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|dlg
operator|.
name|getDeclaredSuperTypeNames
argument_list|()
control|)
block|{
name|String
name|jcrName
init|=
name|mapper
operator|.
name|getJcrName
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// TODO: figure out a more performant way
comment|// check of at least one declared super type being a non-mixin type
if|if
condition|(
name|addNtBase
condition|)
block|{
try|try
block|{
name|NodeType
name|nt
init|=
name|manager
operator|.
name|getNodeType
argument_list|(
name|jcrName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|nt
operator|.
name|isMixin
argument_list|()
condition|)
block|{
name|addNtBase
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|ex
parameter_list|)
block|{
comment|// ignored
block|}
block|}
name|names
operator|.
name|add
argument_list|(
name|jcrName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|addNtBase
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|mapper
operator|.
name|getJcrName
argument_list|(
literal|"nt:base"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|names
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|names
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAbstract
parameter_list|()
block|{
return|return
name|dlg
operator|.
name|isAbstract
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMixin
parameter_list|()
block|{
return|return
name|dlg
operator|.
name|isMixin
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasOrderableChildNodes
parameter_list|()
block|{
return|return
name|dlg
operator|.
name|hasOrderableChildNodes
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isQueryable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPrimaryItemName
parameter_list|()
block|{
name|String
name|primaryItemName
init|=
name|dlg
operator|.
name|getPrimaryItemName
argument_list|()
decl_stmt|;
if|if
condition|(
name|primaryItemName
operator|!=
literal|null
condition|)
block|{
return|return
name|mapper
operator|.
name|getJcrName
argument_list|(
name|primaryItemName
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|PropertyDefinition
index|[]
name|getDeclaredPropertyDefinitions
parameter_list|()
block|{
name|List
argument_list|<
name|PropertyDefinitionDelegate
argument_list|>
name|definitionDelegates
init|=
name|dlg
operator|.
name|getPropertyDefinitionDelegates
argument_list|()
decl_stmt|;
name|PropertyDefinition
index|[]
name|result
init|=
operator|new
name|PropertyDefinition
index|[
name|definitionDelegates
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
operator|new
name|PropertyDefinitionImpl
argument_list|(
name|this
argument_list|,
name|mapper
argument_list|,
name|valueFactory
argument_list|,
name|definitionDelegates
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeDefinition
index|[]
name|getDeclaredChildNodeDefinitions
parameter_list|()
block|{
name|List
argument_list|<
name|NodeDefinitionDelegate
argument_list|>
name|definitionDelegates
init|=
name|dlg
operator|.
name|getChildNodeDefinitionDelegates
argument_list|()
decl_stmt|;
name|NodeDefinition
index|[]
name|result
init|=
operator|new
name|NodeDefinition
index|[
name|definitionDelegates
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
operator|new
name|NodeDefinitionImpl
argument_list|(
name|manager
argument_list|,
name|this
argument_list|,
name|mapper
argument_list|,
name|definitionDelegates
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeType
index|[]
name|getSupertypes
parameter_list|()
block|{
try|try
block|{
name|Collection
argument_list|<
name|NodeType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeType
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|added
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Queue
argument_list|<
name|String
argument_list|>
name|queue
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getDeclaredSupertypeNames
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|queue
operator|.
name|remove
argument_list|()
decl_stmt|;
if|if
condition|(
name|added
operator|.
name|add
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|NodeType
name|type
init|=
name|manager
operator|.
name|getNodeType
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|type
operator|.
name|getDeclaredSupertypeNames
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|types
operator|.
name|toArray
argument_list|(
operator|new
name|NodeType
index|[
name|types
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Inconsistent node type: "
operator|+
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|NodeType
index|[]
name|getDeclaredSupertypes
parameter_list|()
block|{
try|try
block|{
name|String
index|[]
name|names
init|=
name|getDeclaredSupertypeNames
argument_list|()
decl_stmt|;
name|NodeType
index|[]
name|types
init|=
operator|new
name|NodeType
index|[
name|names
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
name|manager
operator|.
name|getNodeType
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|types
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Inconsistent node type: "
operator|+
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|NodeTypeIterator
name|getSubtypes
parameter_list|()
block|{
try|try
block|{
name|Collection
argument_list|<
name|NodeType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeType
argument_list|>
argument_list|()
decl_stmt|;
name|NodeTypeIterator
name|iterator
init|=
name|manager
operator|.
name|getAllNodeTypes
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeType
name|type
init|=
name|iterator
operator|.
name|nextNodeType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isNodeType
argument_list|(
name|getName
argument_list|()
argument_list|)
operator|&&
operator|!
name|isNodeType
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|NodeTypeIteratorAdapter
argument_list|(
name|types
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Inconsistent node type: "
operator|+
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|NodeTypeIterator
name|getDeclaredSubtypes
parameter_list|()
block|{
try|try
block|{
name|Collection
argument_list|<
name|NodeType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeType
argument_list|>
argument_list|()
decl_stmt|;
name|NodeTypeIterator
name|iterator
init|=
name|manager
operator|.
name|getAllNodeTypes
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeType
name|type
init|=
name|iterator
operator|.
name|nextNodeType
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|type
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isNodeType
argument_list|(
name|getName
argument_list|()
argument_list|)
operator|&&
operator|!
name|isNodeType
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|declaredSuperTypeNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|type
operator|.
name|getDeclaredSupertypeNames
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|declaredSuperTypeNames
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|NodeTypeIteratorAdapter
argument_list|(
name|types
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Inconsistent node type: "
operator|+
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isNodeType
parameter_list|(
name|String
name|nodeTypeName
parameter_list|)
block|{
name|String
name|oakName
init|=
name|mapper
operator|.
name|getOakName
argument_list|(
name|nodeTypeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dlg
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|oakName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|NodeType
name|type
range|:
name|getSupertypes
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|NodeTypeImpl
operator|)
name|type
operator|)
operator|.
name|dlg
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|oakName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyDefinition
index|[]
name|getPropertyDefinitions
parameter_list|()
block|{
name|Collection
argument_list|<
name|PropertyDefinition
argument_list|>
name|definitions
init|=
operator|new
name|ArrayList
argument_list|<
name|PropertyDefinition
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeType
name|type
range|:
name|getSupertypes
argument_list|()
control|)
block|{
name|definitions
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|type
operator|.
name|getDeclaredPropertyDefinitions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|definitions
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getDeclaredPropertyDefinitions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|definitions
operator|.
name|toArray
argument_list|(
operator|new
name|PropertyDefinition
index|[
name|definitions
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeDefinition
index|[]
name|getChildNodeDefinitions
parameter_list|()
block|{
name|Collection
argument_list|<
name|NodeDefinition
argument_list|>
name|definitions
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeDefinition
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeType
name|type
range|:
name|getSupertypes
argument_list|()
control|)
block|{
name|definitions
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|type
operator|.
name|getDeclaredChildNodeDefinitions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|definitions
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getDeclaredChildNodeDefinitions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|definitions
operator|.
name|toArray
argument_list|(
operator|new
name|NodeDefinition
index|[
name|definitions
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canSetProperty
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|Value
name|value
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// TODO
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canSetProperty
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|Value
index|[]
name|values
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// TODO
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canAddChildNode
parameter_list|(
name|String
name|childNodeName
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// TODO
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canAddChildNode
parameter_list|(
name|String
name|childNodeName
parameter_list|,
name|String
name|nodeTypeName
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// TODO
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRemoveItem
parameter_list|(
name|String
name|itemName
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// TODO
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRemoveNode
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// TODO
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRemoveProperty
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// TODO
block|}
block|}
end_class

end_unit

