begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Mechanism for keeping track of time at millisecond accuracy.  */
end_comment

begin_interface
specifier|public
interface|interface
name|Clock
block|{
comment|/**      * Returns the current time in milliseconds.      *      * @see System#currentTimeMillis()      * @return current time in milliseconds      */
name|long
name|getTime
parameter_list|()
function_decl|;
comment|/**      * Simple clock implementation based on {@link System#currentTimeMillis()},      * which is known to be rather slow on some platforms.      */
name|Clock
name|SIMPLE
init|=
operator|new
name|Clock
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getTime
parameter_list|()
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/**      * Accurate clock implementation that uses interval timings from the      * {@link System#nanoTime()} method to calculate an as accurate as possible      * time based on occasional calls to {@link System#currentTimeMillis()}      * to prevent clock drift.      */
name|Clock
name|ACCURATE
init|=
operator|new
name|Clock
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|NS_IN_MS
init|=
literal|1000000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|NS_IN_S
init|=
name|NS_IN_MS
operator|*
literal|1000
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|ms
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|ns
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|long
name|getTime
parameter_list|()
block|{
name|long
name|diff
init|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|ns
decl_stmt|;
if|if
condition|(
name|diff
operator|<
name|NS_IN_S
condition|)
block|{
return|return
name|ms
operator|+
name|diff
operator|/
name|NS_IN_MS
return|;
block|}
else|else
block|{
name|ms
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|ns
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
return|return
name|ms
return|;
block|}
block|}
block|}
decl_stmt|;
comment|/**      * Fast clock implementation whose {@link #getTime()} method returns      * instantaneously thanks to a background task that takes care of the      * actual time-keeping work.      */
specifier|public
specifier|static
class|class
name|Fast
implements|implements
name|Clock
block|{
specifier|private
specifier|volatile
name|long
name|time
init|=
name|ACCURATE
operator|.
name|getTime
argument_list|()
decl_stmt|;
specifier|public
name|Fast
parameter_list|(
name|ScheduledExecutorService
name|executor
parameter_list|)
block|{
name|executor
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|time
operator|=
name|ACCURATE
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTime
parameter_list|()
block|{
return|return
name|time
return|;
block|}
block|}
block|}
end_interface

end_unit

