begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|value
operator|.
name|jcr
operator|.
name|PartialValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|ISO8601
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|PropertyStatesTest
block|{
specifier|private
specifier|final
name|NamePathMapper
name|namePathMapper
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|NamePathMapper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|PartialValueFactory
name|valueFactory
init|=
operator|new
name|PartialValueFactory
argument_list|(
name|namePathMapper
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|emptyPropertyStateTest
parameter_list|()
block|{
name|PropertyState
name|s
init|=
name|EmptyPropertyState
operator|.
name|emptyProperty
argument_list|(
literal|"test"
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|s
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|s
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|,
name|s
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|s
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|s
operator|.
name|size
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|s
operator|.
name|size
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|s
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|emptyPropertyStateNotArrayTest
parameter_list|()
block|{
name|EmptyPropertyState
operator|.
name|emptyProperty
argument_list|(
literal|"test"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multiPropertyStateTest
parameter_list|()
block|{
name|MultiStringPropertyState
name|s
init|=
operator|new
name|MultiStringPropertyState
argument_list|(
literal|"test"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"hello"
argument_list|,
literal|"world"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|,
name|s
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|s
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello"
operator|.
name|length
argument_list|()
argument_list|,
name|s
operator|.
name|size
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"world"
operator|.
name|length
argument_list|()
argument_list|,
name|s
operator|.
name|size
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello"
argument_list|,
name|s
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"world"
argument_list|,
name|s
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|s
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|s
operator|.
name|size
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|namePropertyFromNameValue
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|PropertyState
name|nameProperty
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"name"
argument_list|,
literal|"oak-prefix:value"
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|Value
name|nameValue
init|=
name|valueFactory
operator|.
name|createValue
argument_list|(
name|nameProperty
argument_list|)
decl_stmt|;
name|PropertyState
name|namePropertyFromValue
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"name"
argument_list|,
name|nameValue
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nameProperty
argument_list|,
name|namePropertyFromValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|pathPropertyFromPathValue
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|PropertyState
name|pathProperty
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"path"
argument_list|,
literal|"oak-prefix:a/oak-prefix:b"
argument_list|,
name|PropertyType
operator|.
name|PATH
argument_list|)
decl_stmt|;
name|Value
name|nameValue
init|=
name|valueFactory
operator|.
name|createValue
argument_list|(
name|pathProperty
argument_list|)
decl_stmt|;
name|PropertyState
name|namePropertyFromValue
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"path"
argument_list|,
name|nameValue
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pathProperty
argument_list|,
name|namePropertyFromValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dateValueFromDateProperty
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|expected
init|=
name|ISO8601
operator|.
name|format
argument_list|(
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|PropertyState
name|dateProperty
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"date"
argument_list|,
name|expected
argument_list|,
name|Type
operator|.
name|DATE
argument_list|)
decl_stmt|;
name|String
name|actual
init|=
name|dateProperty
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

