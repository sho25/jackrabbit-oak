begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|beanutils
operator|.
name|BeanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|Backend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|CachingDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|FileDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|MultiDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|db
operator|.
name|DbDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|util
operator|.
name|db
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobStoreConfiguration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_comment
comment|/**  * Helper class to create {@link DataStoreBlobStore} instance and inject the  * appropriate Jackrabbit {@link DataStore} instance based on the configuration.  */
end_comment

begin_class
specifier|public
class|class
name|DataStoreBlobStoreBuilder
implements|implements
name|BlobStoreBuilder
block|{
specifier|private
specifier|static
specifier|final
name|DataStoreBlobStoreBuilder
name|INSTANCE
init|=
operator|new
name|DataStoreBlobStoreBuilder
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|DataStoreBlobStoreBuilder
name|newInstance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
comment|/**      * Creates the wrapper {@link BlobStore} instance for Jackrabbit      * {@link DataStore}.      *       * @param configuration      *            the configuration      * @return the dS blob store wrapped as{@link Optional} indicating that the      *         value can be null when a valid configuration is not available      * @throws Exception      *             the exception      */
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|BlobStore
argument_list|>
name|build
parameter_list|(
name|BlobStoreConfiguration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|BlobStore
name|blobStore
init|=
literal|null
decl_stmt|;
name|DataStore
name|store
init|=
name|getDataStore
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|blobStore
operator|=
operator|new
name|DataStoreBlobStore
argument_list|()
expr_stmt|;
name|BeanUtils
operator|.
name|populate
argument_list|(
name|blobStore
argument_list|,
name|configuration
operator|.
name|getConfigMap
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DataStoreBlobStore
operator|)
name|blobStore
operator|)
operator|.
name|init
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
return|return
name|Optional
operator|.
name|fromNullable
argument_list|(
name|blobStore
argument_list|)
return|;
block|}
comment|/**      * Gets the data store based on the DataStoreProvider.      *       * @param dataStoreConfig      *            the data store config      * @param dataStoreType      *            the data store type      * @return the data store      * @throws RepositoryException      *             the repository exception      */
specifier|private
name|DataStore
name|getDataStore
parameter_list|(
name|BlobStoreConfiguration
name|config
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getDataStore
argument_list|(
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|BlobStoreConfiguration
operator|.
name|PROP_DATA_STORE
argument_list|)
argument_list|,
name|config
argument_list|)
return|;
block|}
specifier|private
name|DataStore
name|getDataStore
parameter_list|(
name|String
name|dataStoreType
parameter_list|,
name|BlobStoreConfiguration
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|DataStore
name|dataStore
init|=
operator|(
name|DataStore
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|dataStoreType
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|BeanUtils
operator|.
name|populate
argument_list|(
name|dataStore
argument_list|,
name|config
operator|.
name|getConfigMap
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataStore
operator|instanceof
name|DbDataStore
condition|)
block|{
operator|(
operator|(
name|DbDataStore
operator|)
name|dataStore
operator|)
operator|.
name|setConnectionFactory
argument_list|(
operator|new
name|ConnectionFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dataStore
operator|instanceof
name|MultiDataStore
condition|)
block|{
name|DataStore
name|primary
init|=
name|getDataStore
argument_list|(
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|BlobStoreConfiguration
operator|.
name|PRIMARY_DATA_STORE
argument_list|)
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|DataStore
name|archive
init|=
name|getDataStore
argument_list|(
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|BlobStoreConfiguration
operator|.
name|ARCHIVE_DATA_STORE
argument_list|)
argument_list|,
name|config
argument_list|)
decl_stmt|;
operator|(
operator|(
name|MultiDataStore
operator|)
name|dataStore
operator|)
operator|.
name|setPrimaryDataStore
argument_list|(
name|primary
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MultiDataStore
operator|)
name|dataStore
operator|)
operator|.
name|setArchiveDataStore
argument_list|(
name|archive
argument_list|)
expr_stmt|;
name|dataStore
operator|.
name|init
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|dataStore
operator|instanceof
name|FileDataStore
operator|)
operator|&&
operator|!
operator|(
name|dataStore
operator|instanceof
name|CachingDataStore
operator|)
condition|)
block|{
name|dataStore
operator|.
name|init
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|wrapInCachingDataStore
argument_list|(
name|dataStore
argument_list|,
name|config
argument_list|)
return|;
block|}
else|else
block|{
name|dataStore
operator|.
name|init
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|dataStore
return|;
block|}
specifier|private
name|DataStore
name|wrapInCachingDataStore
parameter_list|(
specifier|final
name|DataStore
name|dataStore
parameter_list|,
name|BlobStoreConfiguration
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|CachingDataStore
name|cachingStore
init|=
operator|new
name|CachingDataStore
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Backend
name|createBackend
parameter_list|()
block|{
return|return
operator|new
name|DataStoreWrapperBackend
argument_list|(
name|dataStore
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getMarkerFile
parameter_list|()
block|{
return|return
literal|"db.init.done"
return|;
block|}
block|}
decl_stmt|;
name|BeanUtils
operator|.
name|populate
argument_list|(
name|cachingStore
argument_list|,
name|config
operator|.
name|getConfigMap
argument_list|()
argument_list|)
expr_stmt|;
name|cachingStore
operator|.
name|init
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|cachingStore
return|;
block|}
block|}
end_class

end_unit

