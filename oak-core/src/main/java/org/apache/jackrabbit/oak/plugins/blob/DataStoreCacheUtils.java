begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Common utility methods used for DataStore caches.  */
end_comment

begin_class
specifier|public
class|class
name|DataStoreCacheUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UploadStagingCache
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Delete the file from the staged cache and all its empty parent-directories.      *      * @param f the file to be deleted      * @throws IOException      */
specifier|public
specifier|static
name|void
name|recursiveDelete
parameter_list|(
name|File
name|f
parameter_list|,
name|File
name|root
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|forceDelete
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted staged upload file [{}]"
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
comment|// delete empty parent folders (except the main directory)
while|while
condition|(
literal|true
condition|)
block|{
name|f
operator|=
name|f
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|f
operator|==
literal|null
operator|)
operator|||
name|f
operator|.
name|equals
argument_list|(
name|root
argument_list|)
operator|||
operator|(
name|f
operator|.
name|list
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|f
operator|.
name|list
argument_list|()
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
break|break;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleted directory [{}], [{}]"
argument_list|,
name|f
argument_list|,
name|f
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Obtain a placeholder in the file system folder for the given identifier.      *      * @param id of the file      * @return file handle      */
specifier|public
specifier|static
name|File
name|getFile
parameter_list|(
name|String
name|id
parameter_list|,
name|File
name|root
parameter_list|)
block|{
name|File
name|file
init|=
name|root
decl_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|,
name|id
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|,
name|id
operator|.
name|substring
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|,
name|id
operator|.
name|substring
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|File
argument_list|(
name|file
argument_list|,
name|id
argument_list|)
return|;
block|}
block|}
end_class

end_unit

