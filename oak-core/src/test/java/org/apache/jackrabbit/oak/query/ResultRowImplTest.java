begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyValues
operator|.
name|newString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|ResultRowImplTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|mappedGetValue
parameter_list|()
block|{
name|Query
name|query
init|=
name|mock
argument_list|(
name|Query
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|query
operator|.
name|getColumnIndex
argument_list|(
literal|"origCol"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|query
operator|.
name|getColumnIndex
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|PropertyValue
index|[]
name|origVals
init|=
operator|new
name|PropertyValue
index|[]
block|{
name|newString
argument_list|(
literal|"origVal"
argument_list|)
block|,
name|newString
argument_list|(
literal|"overriddenVal"
argument_list|)
block|}
decl_stmt|;
name|ResultRowImpl
name|orig
init|=
operator|new
name|ResultRowImpl
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
name|origVals
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"col1"
argument_list|,
literal|"val1"
argument_list|)
expr_stmt|;
name|ResultRowImpl
name|mappedRow
init|=
name|ResultRowImpl
operator|.
name|getMappingResultRow
argument_list|(
name|orig
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"origVal"
argument_list|,
name|mappedRow
operator|.
name|getValue
argument_list|(
literal|"origCol"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val1"
argument_list|,
name|mappedRow
operator|.
name|getValue
argument_list|(
literal|"col1"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyValue
index|[]
name|mappedVals
init|=
name|mappedRow
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mappedVals
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"origVal"
argument_list|,
name|mappedVals
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val1"
argument_list|,
name|mappedVals
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

