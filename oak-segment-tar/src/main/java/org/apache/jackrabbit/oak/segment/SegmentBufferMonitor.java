begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newConcurrentHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatsOptions
operator|.
name|METRICS_ONLY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|ReferenceQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|CounterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_comment
comment|/**  * This class exposes {@link CounterStats} for allocations and de-allocations  * of {@link Buffer} instances:  *<ul>  *<li>{@link #DIRECT_BUFFER_COUNT}: number of allocated direct byte  *          buffers.</li>  *<li>{@link #DIRECT_BUFFER_CAPACITY}: total capacity of the allocated  *          direct byte buffers.</li>  *<li>{@link #HEAP_BUFFER_COUNT}: number of allocated heap byte  *          buffers.</li>  *<li>{@link #HEAP_BUFFER_CAPACITY}: total capacity of the allocated  *          heap byte buffers.</li>  *</ul>  *<p>  * Users of this class call {@link #trackAllocation(Buffer)} to update above statistics.  */
end_comment

begin_class
specifier|public
class|class
name|SegmentBufferMonitor
block|{
comment|/**      * Number of allocated direct byte buffers      */
specifier|public
specifier|static
specifier|final
name|String
name|DIRECT_BUFFER_COUNT
init|=
literal|"oak.segment.direct-buffer-count"
decl_stmt|;
comment|/**      * Total capacity of the allocated direct byte buffers.      */
specifier|public
specifier|static
specifier|final
name|String
name|DIRECT_BUFFER_CAPACITY
init|=
literal|"oak.segment.direct-buffer-capacity"
decl_stmt|;
comment|/**      * Number of allocated heap byte buffers      */
specifier|public
specifier|static
specifier|final
name|String
name|HEAP_BUFFER_COUNT
init|=
literal|"oak.segment.heap-buffer-count"
decl_stmt|;
comment|/**      * Total capacity of the allocated heap byte buffers.      */
specifier|public
specifier|static
specifier|final
name|String
name|HEAP_BUFFER_CAPACITY
init|=
literal|"oak.segment.heap-buffer-capacity"
decl_stmt|;
annotation|@
name|NotNull
specifier|private
specifier|final
name|Set
argument_list|<
name|BufferReference
argument_list|>
name|buffers
init|=
name|newConcurrentHashSet
argument_list|()
decl_stmt|;
annotation|@
name|NotNull
specifier|private
specifier|final
name|ReferenceQueue
argument_list|<
name|Buffer
argument_list|>
name|referenceQueue
init|=
operator|new
name|ReferenceQueue
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|NotNull
specifier|private
specifier|final
name|CounterStats
name|directBufferCount
decl_stmt|;
annotation|@
name|NotNull
specifier|private
specifier|final
name|CounterStats
name|directBufferCapacity
decl_stmt|;
annotation|@
name|NotNull
specifier|private
specifier|final
name|CounterStats
name|heapBufferCount
decl_stmt|;
annotation|@
name|NotNull
specifier|private
specifier|final
name|CounterStats
name|heapBufferCapacity
decl_stmt|;
comment|/**      * Create a new instance using the passed {@code statisticsProvider} to expose      * buffer allocations.      * @param statisticsProvider      */
specifier|public
name|SegmentBufferMonitor
parameter_list|(
annotation|@
name|NotNull
name|StatisticsProvider
name|statisticsProvider
parameter_list|)
block|{
name|directBufferCount
operator|=
name|statisticsProvider
operator|.
name|getCounterStats
argument_list|(
name|DIRECT_BUFFER_COUNT
argument_list|,
name|METRICS_ONLY
argument_list|)
expr_stmt|;
name|directBufferCapacity
operator|=
name|statisticsProvider
operator|.
name|getCounterStats
argument_list|(
name|DIRECT_BUFFER_CAPACITY
argument_list|,
name|METRICS_ONLY
argument_list|)
expr_stmt|;
name|heapBufferCount
operator|=
name|statisticsProvider
operator|.
name|getCounterStats
argument_list|(
name|HEAP_BUFFER_COUNT
argument_list|,
name|METRICS_ONLY
argument_list|)
expr_stmt|;
name|heapBufferCapacity
operator|=
name|statisticsProvider
operator|.
name|getCounterStats
argument_list|(
name|HEAP_BUFFER_CAPACITY
argument_list|,
name|METRICS_ONLY
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|BufferReference
extends|extends
name|WeakReference
argument_list|<
name|Buffer
argument_list|>
block|{
specifier|private
specifier|final
name|int
name|capacity
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isDirect
decl_stmt|;
specifier|public
name|BufferReference
parameter_list|(
annotation|@
name|NotNull
name|Buffer
name|buffer
parameter_list|,
annotation|@
name|NotNull
name|ReferenceQueue
argument_list|<
name|Buffer
argument_list|>
name|queue
parameter_list|)
block|{
name|super
argument_list|(
name|buffer
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|this
operator|.
name|capacity
operator|=
name|buffer
operator|.
name|capacity
argument_list|()
expr_stmt|;
name|this
operator|.
name|isDirect
operator|=
name|buffer
operator|.
name|isDirect
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Track the allocation of a {@code buffer} and update the exposed statistics.      * @param buffer      */
specifier|public
name|void
name|trackAllocation
parameter_list|(
annotation|@
name|NotNull
name|Buffer
name|buffer
parameter_list|)
block|{
name|BufferReference
name|reference
init|=
operator|new
name|BufferReference
argument_list|(
name|buffer
argument_list|,
name|referenceQueue
argument_list|)
decl_stmt|;
name|buffers
operator|.
name|add
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|allocated
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|trackDeallocations
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|trackDeallocations
parameter_list|()
block|{
name|BufferReference
name|reference
init|=
operator|(
name|BufferReference
operator|)
name|referenceQueue
operator|.
name|poll
argument_list|()
decl_stmt|;
while|while
condition|(
name|reference
operator|!=
literal|null
condition|)
block|{
name|buffers
operator|.
name|remove
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|deallocated
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|reference
operator|=
operator|(
name|BufferReference
operator|)
name|referenceQueue
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|allocated
parameter_list|(
annotation|@
name|NotNull
name|BufferReference
name|reference
parameter_list|)
block|{
if|if
condition|(
name|reference
operator|.
name|isDirect
condition|)
block|{
name|directBufferCount
operator|.
name|inc
argument_list|()
expr_stmt|;
name|directBufferCapacity
operator|.
name|inc
argument_list|(
name|reference
operator|.
name|capacity
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|heapBufferCount
operator|.
name|inc
argument_list|()
expr_stmt|;
name|heapBufferCapacity
operator|.
name|inc
argument_list|(
name|reference
operator|.
name|capacity
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|deallocated
parameter_list|(
annotation|@
name|NotNull
name|BufferReference
name|reference
parameter_list|)
block|{
if|if
condition|(
name|reference
operator|.
name|isDirect
condition|)
block|{
name|directBufferCount
operator|.
name|dec
argument_list|()
expr_stmt|;
name|directBufferCapacity
operator|.
name|dec
argument_list|(
name|reference
operator|.
name|capacity
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|heapBufferCount
operator|.
name|dec
argument_list|()
expr_stmt|;
name|heapBufferCapacity
operator|.
name|dec
argument_list|(
name|reference
operator|.
name|capacity
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

