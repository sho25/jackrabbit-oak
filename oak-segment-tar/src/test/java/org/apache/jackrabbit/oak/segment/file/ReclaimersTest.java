begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|Reclaimers
operator|.
name|newOldReclaimer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|GCGeneration
operator|.
name|newGCGeneration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|GCGeneration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ReclaimersTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testOldReclaimer
parameter_list|()
throws|throws
name|Exception
block|{
name|Predicate
argument_list|<
name|GCGeneration
argument_list|>
name|p
init|=
name|newOldReclaimer
argument_list|(
name|newGCGeneration
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// Segments from the same full and tail generation should not be
comment|// removed.
name|assertFalse
argument_list|(
name|p
operator|.
name|apply
argument_list|(
name|newGCGeneration
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|p
operator|.
name|apply
argument_list|(
name|newGCGeneration
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Recent segments, tail or not-tail ones, can't be removed.
name|assertFalse
argument_list|(
name|p
operator|.
name|apply
argument_list|(
name|newGCGeneration
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|p
operator|.
name|apply
argument_list|(
name|newGCGeneration
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Old segments from the same full generation can be removed as long
comment|// as they are not tail segments.
name|assertTrue
argument_list|(
name|p
operator|.
name|apply
argument_list|(
name|newGCGeneration
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|p
operator|.
name|apply
argument_list|(
name|newGCGeneration
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// A full head state from the same full generation can't be removed.
name|assertFalse
argument_list|(
name|p
operator|.
name|apply
argument_list|(
name|newGCGeneration
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Some of these generations can be reclaimed, some may not. Since there
comment|// is a new full head state with full generation 3, every tail and
comment|// non-tail segment with a tail generation greater than zero can be
comment|// removed. The full head state with full generation 2 can't be removed,
comment|// otherwise the condition about the number of retained generations
comment|// would be violated.
name|assertTrue
argument_list|(
name|p
operator|.
name|apply
argument_list|(
name|newGCGeneration
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|apply
argument_list|(
name|newGCGeneration
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|apply
argument_list|(
name|newGCGeneration
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|apply
argument_list|(
name|newGCGeneration
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|p
operator|.
name|apply
argument_list|(
name|newGCGeneration
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// These generations can be reclaimed because their full generation is
comment|// too old when compared to the number of retained generations.
name|assertTrue
argument_list|(
name|p
operator|.
name|apply
argument_list|(
name|newGCGeneration
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|apply
argument_list|(
name|newGCGeneration
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|apply
argument_list|(
name|newGCGeneration
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|apply
argument_list|(
name|newGCGeneration
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|apply
argument_list|(
name|newGCGeneration
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

