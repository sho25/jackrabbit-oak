begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|com
operator|.
name|arakelian
operator|.
name|docker
operator|.
name|junit
operator|.
name|DockerRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|arakelian
operator|.
name|docker
operator|.
name|junit
operator|.
name|model
operator|.
name|ImmutableDockerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|CloudStorageAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|spotify
operator|.
name|docker
operator|.
name|client
operator|.
name|DefaultDockerClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_class
specifier|public
class|class
name|AzuriteDockerRule
implements|implements
name|TestRule
block|{
specifier|private
specifier|final
name|DockerRule
name|wrappedRule
decl_stmt|;
specifier|public
name|AzuriteDockerRule
parameter_list|()
block|{
name|wrappedRule
operator|=
operator|new
name|DockerRule
argument_list|(
name|ImmutableDockerConfig
operator|.
name|builder
argument_list|()
operator|.
name|image
argument_list|(
literal|"trekawek/azurite"
argument_list|)
operator|.
name|name
argument_list|(
literal|"oak-test-azurite"
argument_list|)
operator|.
name|ports
argument_list|(
literal|"10000"
argument_list|)
operator|.
name|addStartedListener
argument_list|(
name|container
lambda|->
block|{
name|container
operator|.
name|waitForPort
argument_list|(
literal|"10000/tcp"
argument_list|)
expr_stmt|;
name|container
operator|.
name|waitForLog
argument_list|(
literal|"Azure Blob Storage Emulator listening on port 10000"
argument_list|)
expr_stmt|;
block|}
argument_list|)
operator|.
name|addContainerConfigurer
argument_list|(
name|builder
lambda|->
name|builder
operator|.
name|env
argument_list|(
literal|"executable=blob"
argument_list|)
argument_list|)
operator|.
name|alwaysRemoveContainer
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CloudBlobContainer
name|getContainer
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|StorageException
throws|,
name|InvalidKeyException
block|{
name|int
name|mappedPort
init|=
name|getMappedPort
argument_list|()
decl_stmt|;
name|CloudStorageAccount
name|cloud
init|=
name|CloudStorageAccount
operator|.
name|parse
argument_list|(
literal|"DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:"
operator|+
name|mappedPort
operator|+
literal|"/devstoreaccount1;"
argument_list|)
decl_stmt|;
name|CloudBlobContainer
name|container
init|=
name|cloud
operator|.
name|createCloudBlobClient
argument_list|()
operator|.
name|getContainerReference
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|container
operator|.
name|deleteIfExists
argument_list|()
expr_stmt|;
name|container
operator|.
name|create
argument_list|()
expr_stmt|;
return|return
name|container
return|;
block|}
annotation|@
name|Override
specifier|public
name|Statement
name|apply
parameter_list|(
name|Statement
name|statement
parameter_list|,
name|Description
name|description
parameter_list|)
block|{
try|try
block|{
name|DefaultDockerClient
name|client
init|=
name|DefaultDockerClient
operator|.
name|fromEnv
argument_list|()
operator|.
name|connectTimeoutMillis
argument_list|(
literal|5000L
argument_list|)
operator|.
name|readTimeoutMillis
argument_list|(
literal|20000L
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|ping
argument_list|()
expr_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assume
operator|.
name|assumeNoException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|wrappedRule
operator|.
name|apply
argument_list|(
name|statement
argument_list|,
name|description
argument_list|)
return|;
block|}
specifier|public
name|int
name|getMappedPort
parameter_list|()
block|{
return|return
name|wrappedRule
operator|.
name|getContainer
argument_list|()
operator|.
name|getPortBinding
argument_list|(
literal|"10000/tcp"
argument_list|)
operator|.
name|getPort
argument_list|()
return|;
block|}
block|}
end_class

end_unit

