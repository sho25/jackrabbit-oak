begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|GuestCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AppConfigurationEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|AuthInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|AbstractLoginModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|callback
operator|.
name|PrincipalProviderCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|callback
operator|.
name|RepositoryCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|callback
operator|.
name|TokenProviderCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|TokenLoginModuleTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
specifier|static
name|TokenProvider
name|mockTokenProvider
parameter_list|(
annotation|@
name|NotNull
name|String
name|userId
parameter_list|)
block|{
name|TokenInfo
name|info
init|=
name|mock
argument_list|(
name|TokenInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|info
operator|.
name|isExpired
argument_list|(
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|info
operator|.
name|matches
argument_list|(
name|any
argument_list|(
name|TokenCredentials
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|info
operator|.
name|getUserId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|userId
argument_list|)
expr_stmt|;
name|TokenProvider
name|tp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|TokenProvider
operator|.
name|class
argument_list|)
operator|.
name|getTokenInfo
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|info
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
return|return
name|tp
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
operator|new
name|Configuration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AppConfigurationEntry
index|[]
name|getAppConfigurationEntry
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|AppConfigurationEntry
name|defaultEntry
init|=
operator|new
name|AppConfigurationEntry
argument_list|(
name|TokenLoginModule
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
operator|.
name|REQUIRED
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|AppConfigurationEntry
index|[]
block|{
name|defaultEntry
block|}
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullLogin
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
literal|null
argument_list|)
init|)
block|{
name|fail
argument_list|(
literal|"Null login should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGuestLogin
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|GuestCredentials
argument_list|()
argument_list|)
init|)
block|{
name|fail
argument_list|(
literal|"GuestCredentials login should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleCredentials
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentSession
name|cs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SimpleCredentials
name|sc
init|=
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|cs
operator|=
name|login
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Unsupported credentials login should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
comment|// success
block|}
finally|finally
block|{
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|cs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleCredentialsWithAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentSession
name|cs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SimpleCredentials
name|sc
init|=
operator|new
name|SimpleCredentials
argument_list|(
literal|"test"
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|sc
operator|.
name|setAttribute
argument_list|(
literal|".token"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|cs
operator|=
name|login
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Unsupported credentials login should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
comment|// success
block|}
finally|finally
block|{
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|cs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidTokenCredentials
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|TokenCredentials
argument_list|(
literal|"invalid"
argument_list|)
argument_list|)
init|)
block|{
name|fail
argument_list|(
literal|"Invalid token credentials login should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTokenCredentials
parameter_list|()
throws|throws
name|Exception
block|{
name|Root
name|root
init|=
name|adminSession
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|TokenConfiguration
name|tokenConfig
init|=
name|getSecurityProvider
argument_list|()
operator|.
name|getConfiguration
argument_list|(
name|TokenConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|TokenProvider
name|tp
init|=
name|tokenConfig
operator|.
name|getTokenProvider
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|SimpleCredentials
name|sc
init|=
operator|(
name|SimpleCredentials
operator|)
name|getAdminCredentials
argument_list|()
decl_stmt|;
name|TokenInfo
name|info
init|=
name|tp
operator|.
name|createToken
argument_list|(
name|sc
operator|.
name|getUserID
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|TokenCredentials
argument_list|(
name|info
operator|.
name|getToken
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|sc
operator|.
name|getUserID
argument_list|()
argument_list|,
name|cs
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTokenCredentialsWithPublicAttributes
parameter_list|()
throws|throws
name|Exception
block|{
name|Root
name|root
init|=
name|adminSession
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|TokenConfiguration
name|tokenConfig
init|=
name|getSecurityProvider
argument_list|()
operator|.
name|getConfiguration
argument_list|(
name|TokenConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|TokenProvider
name|tp
init|=
name|tokenConfig
operator|.
name|getTokenProvider
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|SimpleCredentials
name|sc
init|=
operator|(
name|SimpleCredentials
operator|)
name|getAdminCredentials
argument_list|()
decl_stmt|;
name|TokenInfo
name|info
init|=
name|tp
operator|.
name|createToken
argument_list|(
name|sc
operator|.
name|getUserID
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"public"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|TokenCredentials
name|tc
init|=
operator|new
name|TokenCredentials
argument_list|(
name|info
operator|.
name|getToken
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
name|tc
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|sc
operator|.
name|getUserID
argument_list|()
argument_list|,
name|cs
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|cs
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"public"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingTokenProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenLoginModule
name|lm
init|=
operator|new
name|TokenLoginModule
argument_list|()
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
operator|new
name|Subject
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|logout
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingTokenProvider2
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenLoginModule
name|lm
init|=
operator|new
name|TokenLoginModule
argument_list|()
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
operator|new
name|Subject
argument_list|()
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|(
literal|null
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|logout
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingTokenProvider3
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenLoginModule
name|lm
init|=
operator|new
name|TokenLoginModule
argument_list|()
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
operator|new
name|Subject
argument_list|()
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|(
literal|null
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_CREDENTIALS
argument_list|,
name|mock
argument_list|(
name|Credentials
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|logout
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTokenProviderCallback
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenProvider
name|tp
init|=
operator|new
name|TokenProviderImpl
argument_list|(
name|root
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|getUserConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|TokenLoginModule
name|lm
init|=
operator|new
name|TokenLoginModule
argument_list|()
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
operator|new
name|Subject
argument_list|()
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|(
name|tp
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|logout
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnsupportedCallbackException
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenLoginModule
name|lm
init|=
operator|new
name|TokenLoginModule
argument_list|()
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
operator|new
name|Subject
argument_list|()
argument_list|,
operator|new
name|ThrowingCallbackHandler
argument_list|(
name|UnsupportedCallbackException
operator|.
name|class
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|logout
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIOException
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenLoginModule
name|lm
init|=
operator|new
name|TokenLoginModule
argument_list|()
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
operator|new
name|Subject
argument_list|()
argument_list|,
operator|new
name|ThrowingCallbackHandler
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|logout
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|LoginException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateTokenFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenProvider
name|tp
init|=
name|mock
argument_list|(
name|TokenProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|tp
operator|.
name|doCreateToken
argument_list|(
name|any
argument_list|(
name|Credentials
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|tp
operator|.
name|createToken
argument_list|(
name|any
argument_list|(
name|Credentials
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|tp
operator|.
name|createToken
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|TokenLoginModule
name|lm
init|=
operator|new
name|TokenLoginModule
argument_list|()
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
operator|new
name|Subject
argument_list|()
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|(
name|tp
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_CREDENTIALS
argument_list|,
operator|new
name|Credentials
argument_list|()
block|{}
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|lm
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|verify
argument_list|(
name|tp
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|doCreateToken
argument_list|(
name|any
argument_list|(
name|Credentials
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|logout
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingUserPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenProvider
name|tp
init|=
name|mockTokenProvider
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|TokenCredentials
name|tc
init|=
operator|new
name|TokenCredentials
argument_list|(
literal|"token"
argument_list|)
decl_stmt|;
name|TokenLoginModule
name|lm
init|=
operator|new
name|TokenLoginModule
argument_list|()
decl_stmt|;
name|Map
name|sharedState
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_CREDENTIALS
argument_list|,
name|tc
argument_list|)
argument_list|)
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|CallbackHandler
name|cbh
init|=
name|callbacks
lambda|->
block|{
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|PrincipalProviderCallback
condition|)
block|{
operator|(
operator|(
name|PrincipalProviderCallback
operator|)
name|callback
operator|)
operator|.
name|setPrincipalProvider
argument_list|(
name|getConfig
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getPrincipalProvider
argument_list|(
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|(
name|tp
argument_list|,
name|cbh
argument_list|)
argument_list|,
name|sharedState
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lm
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lm
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|subject
operator|.
name|getPublicCredentials
argument_list|(
name|AuthInfo
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|subject
operator|.
name|getPublicCredentials
argument_list|(
name|TokenCredentials
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lm
operator|.
name|logout
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|subject
operator|.
name|getPublicCredentials
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadOnlySubject
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|u
init|=
name|getTestUser
argument_list|()
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|subject
operator|.
name|setReadOnly
argument_list|()
expr_stmt|;
name|TokenProvider
name|tp
init|=
name|spy
argument_list|(
operator|new
name|TokenProviderImpl
argument_list|(
name|root
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|getUserConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleCredentials
name|sc
init|=
operator|new
name|SimpleCredentials
argument_list|(
name|u
operator|.
name|getID
argument_list|()
argument_list|,
name|u
operator|.
name|getID
argument_list|()
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|sc
operator|.
name|setAttribute
argument_list|(
literal|".token"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|TokenLoginModule
name|lm
init|=
operator|new
name|TokenLoginModule
argument_list|()
decl_stmt|;
name|Map
name|sharedState
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_CREDENTIALS
argument_list|,
name|sc
argument_list|)
argument_list|)
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|(
name|tp
argument_list|)
argument_list|,
name|sharedState
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tp
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|createToken
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|subject
operator|.
name|getPublicCredentials
argument_list|(
name|TokenCredentials
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|logout
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidShareCredentialsObject
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenProvider
name|tp
init|=
name|spy
argument_list|(
operator|new
name|TokenProviderImpl
argument_list|(
name|root
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|getUserConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TokenLoginModule
name|lm
init|=
operator|new
name|TokenLoginModule
argument_list|()
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
operator|new
name|Subject
argument_list|()
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|(
name|tp
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_CREDENTIALS
argument_list|,
literal|"notCredentialsObject"
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|createToken
argument_list|(
name|any
argument_list|(
name|Credentials
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|logout
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingShareCredentials
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenProvider
name|tp
init|=
name|spy
argument_list|(
operator|new
name|TokenProviderImpl
argument_list|(
name|root
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|getUserConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TokenLoginModule
name|lm
init|=
operator|new
name|TokenLoginModule
argument_list|()
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
operator|new
name|Subject
argument_list|()
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|(
name|tp
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|doCreateToken
argument_list|(
name|any
argument_list|(
name|Credentials
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|logout
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingSecurityProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|CallbackHandler
name|cbh
init|=
name|callbacks
lambda|->
block|{
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|RepositoryCallback
condition|)
block|{
operator|(
operator|(
name|RepositoryCallback
operator|)
name|callback
operator|)
operator|.
name|setSecurityProvider
argument_list|(
literal|null
argument_list|)
expr_stmt|;
operator|(
operator|(
name|RepositoryCallback
operator|)
name|callback
operator|)
operator|.
name|setContentRepository
argument_list|(
name|getContentRepository
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|SimpleCredentials
name|sc
init|=
operator|new
name|SimpleCredentials
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|sc
operator|.
name|setAttribute
argument_list|(
literal|".token"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Map
name|sharedState
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_CREDENTIALS
argument_list|,
name|sc
argument_list|)
argument_list|)
decl_stmt|;
name|TokenProvider
name|tp
init|=
name|spy
argument_list|(
operator|new
name|TokenProviderImpl
argument_list|(
name|root
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|getUserConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TokenLoginModule
name|lm
init|=
operator|new
name|TokenLoginModule
argument_list|()
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
operator|new
name|Subject
argument_list|()
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|(
name|tp
argument_list|,
name|cbh
argument_list|)
argument_list|,
name|sharedState
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tp
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|createToken
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|logout
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|CallbackHandler
name|cbh
init|=
name|callbacks
lambda|->
block|{
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|RepositoryCallback
condition|)
block|{
operator|(
operator|(
name|RepositoryCallback
operator|)
name|callback
operator|)
operator|.
name|setSecurityProvider
argument_list|(
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|RepositoryCallback
operator|)
name|callback
operator|)
operator|.
name|setContentRepository
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|SimpleCredentials
name|sc
init|=
operator|new
name|SimpleCredentials
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|sc
operator|.
name|setAttribute
argument_list|(
literal|".token"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Map
name|sharedState
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_CREDENTIALS
argument_list|,
name|sc
argument_list|)
argument_list|)
decl_stmt|;
name|TokenProvider
name|tp
init|=
name|spy
argument_list|(
operator|new
name|TokenProviderImpl
argument_list|(
name|root
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|getUserConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TokenLoginModule
name|lm
init|=
operator|new
name|TokenLoginModule
argument_list|()
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
operator|new
name|Subject
argument_list|()
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|(
name|tp
argument_list|,
name|cbh
argument_list|)
argument_list|,
name|sharedState
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tp
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|createToken
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|logout
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSuccessCommitRespectsSubjectPrincipals
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|principal
init|=
operator|new
name|PrincipalImpl
argument_list|(
literal|"subjetPrincipal"
argument_list|)
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
name|principal
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|shared
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|shared
operator|.
name|put
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_CREDENTIALS
argument_list|,
operator|new
name|TokenCredentials
argument_list|(
literal|"token"
argument_list|)
argument_list|)
expr_stmt|;
name|TokenLoginModule
name|lm
init|=
operator|new
name|TokenLoginModule
argument_list|()
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|(
name|mockTokenProvider
argument_list|(
literal|"userId"
argument_list|)
argument_list|)
argument_list|,
name|shared
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lm
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lm
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|AuthInfo
argument_list|>
name|authInfoSet
init|=
name|subject
operator|.
name|getPublicCredentials
argument_list|(
name|AuthInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|authInfoSet
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|AuthInfo
name|info
init|=
name|authInfoSet
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|info
operator|.
name|getPrincipals
argument_list|()
operator|.
name|contains
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
class|class
name|TestCallbackHandler
implements|implements
name|CallbackHandler
block|{
specifier|private
specifier|final
name|TokenProvider
name|tokenProvider
decl_stmt|;
specifier|private
specifier|final
name|CallbackHandler
name|base
decl_stmt|;
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
name|e
decl_stmt|;
specifier|private
name|TestCallbackHandler
parameter_list|(
annotation|@
name|Nullable
name|TokenProvider
name|tokenProvider
parameter_list|)
block|{
name|this
operator|.
name|tokenProvider
operator|=
name|tokenProvider
expr_stmt|;
name|this
operator|.
name|base
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|e
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|TestCallbackHandler
parameter_list|(
annotation|@
name|Nullable
name|TokenProvider
name|tokenProvider
parameter_list|,
annotation|@
name|NotNull
name|CallbackHandler
name|base
parameter_list|)
block|{
name|this
operator|.
name|tokenProvider
operator|=
name|tokenProvider
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|e
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedCallbackException
block|{
for|for
control|(
name|Callback
name|cb
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|cb
operator|instanceof
name|TokenProviderCallback
condition|)
block|{
operator|(
operator|(
name|TokenProviderCallback
operator|)
name|cb
operator|)
operator|.
name|setTokenProvider
argument_list|(
name|tokenProvider
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
block|{
name|base
operator|.
name|handle
argument_list|(
name|callbacks
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedCallbackException
argument_list|(
name|cb
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
specifier|final
class|class
name|ThrowingCallbackHandler
implements|implements
name|CallbackHandler
block|{
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
name|e
decl_stmt|;
specifier|private
name|ThrowingCallbackHandler
parameter_list|(
annotation|@
name|NotNull
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
name|e
parameter_list|)
block|{
name|this
operator|.
name|e
operator|=
name|e
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedCallbackException
block|{
if|if
condition|(
name|e
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|UnsupportedCallbackException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedCallbackException
argument_list|(
operator|new
name|TokenProviderCallback
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|IOException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

