begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|PropertiesUtilTest
block|{
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"deprecation"
block|,
literal|"UnnecessaryBoxing"
block|}
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testToDouble
parameter_list|()
block|{
comment|// we test getProperty which calls toDouble - so we can test both
comment|// methods in one go
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|PropertiesUtil
operator|.
name|toDouble
argument_list|(
literal|null
argument_list|,
literal|2.0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|PropertiesUtil
operator|.
name|toDouble
argument_list|(
literal|1.0
argument_list|,
literal|2.0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|PropertiesUtil
operator|.
name|toDouble
argument_list|(
operator|new
name|Double
argument_list|(
literal|1.0
argument_list|)
argument_list|,
literal|2.0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5.0
argument_list|,
name|PropertiesUtil
operator|.
name|toDouble
argument_list|(
operator|new
name|Long
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|2.0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|PropertiesUtil
operator|.
name|toDouble
argument_list|(
literal|"abc"
argument_list|,
literal|2.0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToBoolean
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|PropertiesUtil
operator|.
name|toBoolean
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|PropertiesUtil
operator|.
name|toBoolean
argument_list|(
literal|1.0
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|PropertiesUtil
operator|.
name|toBoolean
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|PropertiesUtil
operator|.
name|toBoolean
argument_list|(
literal|"false"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|PropertiesUtil
operator|.
name|toBoolean
argument_list|(
literal|"abc"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnnecessaryBoxing"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testToInteger
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|PropertiesUtil
operator|.
name|toInteger
argument_list|(
literal|null
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|PropertiesUtil
operator|.
name|toInteger
argument_list|(
literal|1.0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|PropertiesUtil
operator|.
name|toInteger
argument_list|(
operator|new
name|Double
argument_list|(
literal|1.0
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|PropertiesUtil
operator|.
name|toInteger
argument_list|(
operator|new
name|Long
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|PropertiesUtil
operator|.
name|toInteger
argument_list|(
operator|new
name|Integer
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|PropertiesUtil
operator|.
name|toInteger
argument_list|(
literal|"abc"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnnecessaryBoxing"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testToLong
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|PropertiesUtil
operator|.
name|toLong
argument_list|(
literal|null
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|PropertiesUtil
operator|.
name|toLong
argument_list|(
literal|1.0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|PropertiesUtil
operator|.
name|toLong
argument_list|(
operator|new
name|Double
argument_list|(
literal|1.0
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|PropertiesUtil
operator|.
name|toLong
argument_list|(
operator|new
name|Long
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|PropertiesUtil
operator|.
name|toLong
argument_list|(
operator|new
name|Integer
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|PropertiesUtil
operator|.
name|toLong
argument_list|(
literal|"abc"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToObject
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"hallo"
argument_list|,
name|PropertiesUtil
operator|.
name|toObject
argument_list|(
literal|"hallo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|PropertiesUtil
operator|.
name|toObject
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|PropertiesUtil
operator|.
name|toObject
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|PropertiesUtil
operator|.
name|toObject
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|PropertiesUtil
operator|.
name|toObject
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|PropertiesUtil
operator|.
name|toObject
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|PropertiesUtil
operator|.
name|toObject
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|m
argument_list|,
name|PropertiesUtil
operator|.
name|toObject
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"hallo"
argument_list|,
name|PropertiesUtil
operator|.
name|toString
argument_list|(
literal|"hallo"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|this
operator|.
name|toString
argument_list|()
argument_list|,
name|PropertiesUtil
operator|.
name|toString
argument_list|(
literal|null
argument_list|,
name|this
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|m
operator|.
name|toString
argument_list|()
argument_list|,
name|PropertiesUtil
operator|.
name|toString
argument_list|(
name|m
argument_list|,
name|this
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToStringArray
parameter_list|()
block|{
specifier|final
name|String
index|[]
name|defaultValue
init|=
operator|new
name|String
index|[]
block|{
literal|"1"
block|}
decl_stmt|;
name|assertArrayEquals
argument_list|(
literal|null
argument_list|,
name|PropertiesUtil
operator|.
name|toStringArray
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|null
argument_list|,
name|PropertiesUtil
operator|.
name|toStringArray
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|defaultValue
argument_list|,
name|PropertiesUtil
operator|.
name|toStringArray
argument_list|(
literal|5
argument_list|,
name|defaultValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|defaultValue
argument_list|,
name|PropertiesUtil
operator|.
name|toStringArray
argument_list|(
literal|null
argument_list|,
name|defaultValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"hallo"
block|}
argument_list|,
name|PropertiesUtil
operator|.
name|toStringArray
argument_list|(
literal|"hallo"
argument_list|,
name|defaultValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"hallo"
block|}
argument_list|,
name|PropertiesUtil
operator|.
name|toStringArray
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"hallo"
block|}
argument_list|,
name|defaultValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"hallo"
block|,
literal|"you"
block|}
argument_list|,
name|PropertiesUtil
operator|.
name|toStringArray
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"hallo"
block|,
literal|"you"
block|}
argument_list|,
name|defaultValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"5"
block|,
literal|"1"
block|}
argument_list|,
name|PropertiesUtil
operator|.
name|toStringArray
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|5
block|,
literal|1
block|}
argument_list|,
name|defaultValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"5"
block|,
literal|"1"
block|}
argument_list|,
name|PropertiesUtil
operator|.
name|toStringArray
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|5
block|,
literal|null
block|,
literal|1
block|}
argument_list|,
name|defaultValue
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|,
name|PropertiesUtil
operator|.
name|toStringArray
argument_list|(
name|l
argument_list|,
name|defaultValue
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|}
argument_list|,
name|PropertiesUtil
operator|.
name|toStringArray
argument_list|(
name|l
argument_list|,
name|defaultValue
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|}
argument_list|,
name|PropertiesUtil
operator|.
name|toStringArray
argument_list|(
name|l
argument_list|,
name|defaultValue
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|defaultValue
argument_list|,
name|PropertiesUtil
operator|.
name|toStringArray
argument_list|(
name|m
argument_list|,
name|defaultValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPopulate
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"string"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"bool"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"integer"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"aLong"
argument_list|,
literal|"11"
argument_list|)
expr_stmt|;
name|TestBeanA
name|bean
init|=
operator|new
name|TestBeanA
argument_list|()
decl_stmt|;
name|PropertiesUtil
operator|.
name|populate
argument_list|(
name|bean
argument_list|,
name|props
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|bean
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bean
operator|.
name|getBool
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|bean
operator|.
name|getInteger
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|bean
operator|.
name|getaLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testPopulateAndValidate
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"something"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|TestBeanA
name|bean
init|=
operator|new
name|TestBeanA
argument_list|()
decl_stmt|;
name|PropertiesUtil
operator|.
name|populate
argument_list|(
name|bean
argument_list|,
name|props
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|TestBeanA
block|{
specifier|private
name|String
name|string
decl_stmt|;
specifier|private
name|Boolean
name|bool
decl_stmt|;
specifier|private
name|int
name|integer
decl_stmt|;
specifier|private
name|long
name|aLong
decl_stmt|;
specifier|public
name|String
name|getString
parameter_list|()
block|{
return|return
name|string
return|;
block|}
specifier|public
name|void
name|setString
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|this
operator|.
name|string
operator|=
name|string
expr_stmt|;
block|}
specifier|public
name|Boolean
name|getBool
parameter_list|()
block|{
return|return
name|bool
return|;
block|}
specifier|public
name|void
name|setBool
parameter_list|(
name|Boolean
name|bool
parameter_list|)
block|{
name|this
operator|.
name|bool
operator|=
name|bool
expr_stmt|;
block|}
specifier|public
name|int
name|getInteger
parameter_list|()
block|{
return|return
name|integer
return|;
block|}
specifier|public
name|void
name|setInteger
parameter_list|(
name|int
name|integer
parameter_list|)
block|{
name|this
operator|.
name|integer
operator|=
name|integer
expr_stmt|;
block|}
specifier|public
name|long
name|getaLong
parameter_list|()
block|{
return|return
name|aLong
return|;
block|}
specifier|public
name|void
name|setaLong
parameter_list|(
name|long
name|aLong
parameter_list|)
block|{
name|this
operator|.
name|aLong
operator|=
name|aLong
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

