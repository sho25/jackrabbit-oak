begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|VisibleValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SYSTEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|REP_GLOB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|REP_ITEM_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|MIX_REP_PRINCIPAL_BASED_MIXIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|NT_REP_PRINCIPAL_ENTRY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|NT_REP_PRINCIPAL_POLICY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|NT_REP_RESTRICTIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_EFFECTIVE_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_PRINCIPAL_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_PRINCIPAL_POLICY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_PRIVILEGES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_RESTRICTIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|MockUtility
operator|.
name|createMixinTypesProperty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|MockUtility
operator|.
name|mockNodeState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_LIFECYCLE_MANAGEMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_READ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|PolicyValidatorTest
extends|extends
name|AbstractPrincipalBasedTest
block|{
specifier|private
name|NodeState
name|mockNodeState
init|=
name|mock
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|NamePathMapper
name|getNamePathMapper
parameter_list|()
block|{
return|return
name|NamePathMapper
operator|.
name|DEFAULT
return|;
block|}
annotation|@
name|NotNull
specifier|private
name|Validator
name|createRootValidator
parameter_list|(
annotation|@
name|NotNull
name|NodeState
name|rootState
parameter_list|)
block|{
return|return
name|createRootValidator
argument_list|(
name|rootState
argument_list|,
name|getMgrProvider
argument_list|(
name|root
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|private
name|Validator
name|createRootValidator
parameter_list|(
annotation|@
name|NotNull
name|NodeState
name|rootState
parameter_list|,
annotation|@
name|NotNull
name|MgrProvider
name|mgrProvider
parameter_list|)
block|{
return|return
operator|new
name|PrincipalPolicyValidatorProvider
argument_list|(
name|mgrProvider
argument_list|,
name|adminSession
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getPrincipals
argument_list|()
argument_list|,
name|adminSession
operator|.
name|getWorkspaceName
argument_list|()
argument_list|)
operator|.
name|getRootValidator
argument_list|(
name|rootState
argument_list|,
name|rootState
argument_list|,
operator|new
name|CommitInfo
argument_list|(
literal|"anyId"
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|private
name|Validator
name|getValidatorAtNodeTypeTree
parameter_list|(
annotation|@
name|NotNull
name|NodeState
name|nodeState
parameter_list|,
annotation|@
name|NotNull
name|String
name|parentName
parameter_list|,
name|boolean
name|isAdd
parameter_list|)
throws|throws
name|Exception
block|{
name|Validator
name|v
init|=
name|createRootValidator
argument_list|(
name|nodeState
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nodeState
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|createPrimaryTypeProperty
argument_list|(
name|JcrConstants
operator|.
name|NT_BASE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAdd
condition|)
block|{
return|return
name|v
operator|.
name|childNodeAdded
argument_list|(
name|parentName
argument_list|,
name|nodeState
argument_list|)
operator|.
name|childNodeAdded
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_NODE_TYPES
argument_list|,
name|nodeState
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|v
operator|.
name|childNodeChanged
argument_list|(
name|parentName
argument_list|,
name|nodeState
argument_list|,
name|nodeState
argument_list|)
operator|.
name|childNodeChanged
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_NODE_TYPES
argument_list|,
name|nodeState
argument_list|,
name|nodeState
argument_list|)
return|;
block|}
block|}
annotation|@
name|NotNull
specifier|private
name|Tree
name|createPolicyEntryTree
parameter_list|(
annotation|@
name|NotNull
name|Set
argument_list|<
name|String
argument_list|>
name|privNames
parameter_list|)
throws|throws
name|Exception
block|{
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
name|getNamePathMapper
argument_list|()
operator|.
name|getOakPath
argument_list|(
name|getTestSystemUser
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|t
argument_list|,
name|MIX_REP_PRINCIPAL_BASED_MIXIN
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
argument_list|,
literal|"uid"
argument_list|)
expr_stmt|;
name|Tree
name|policy
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|t
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|,
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
decl_stmt|;
name|policy
operator|.
name|setProperty
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|,
name|getTestSystemUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|entry
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|policy
argument_list|,
literal|"entry"
argument_list|,
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setProperty
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|,
name|TEST_OAK_PATH
argument_list|,
name|Type
operator|.
name|PATH
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setProperty
argument_list|(
name|REP_PRIVILEGES
argument_list|,
name|privNames
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
annotation|@
name|NotNull
specifier|private
name|MgrProvider
name|mockMgrProvider
parameter_list|()
block|{
name|MgrProvider
name|mp
init|=
name|mock
argument_list|(
name|MgrProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mp
operator|.
name|getRootProvider
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getRootProvider
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mp
operator|.
name|getTreeProvider
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getTreeProvider
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mp
operator|.
name|getSecurityProvider
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mp
return|;
block|}
annotation|@
name|NotNull
specifier|private
specifier|static
name|PropertyState
name|createPrimaryTypeProperty
parameter_list|(
annotation|@
name|NotNull
name|String
name|ntName
parameter_list|)
block|{
return|return
name|MockUtility
operator|.
name|createPrimaryTypeProperty
argument_list|(
name|ntName
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|assertCommitFailed
parameter_list|(
annotation|@
name|NotNull
name|CommitFailedException
name|e
parameter_list|,
name|int
name|expectedErrorCode
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|isAccessControlViolation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedErrorCode
argument_list|,
name|e
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|failCommitFailedExcpected
parameter_list|(
name|int
name|expectedCode
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Expected CommitFailedException with ErrorCode "
operator|+
name|expectedCode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArbitraryPropertyAdded
parameter_list|()
throws|throws
name|Exception
block|{
name|createRootValidator
argument_list|(
name|mockNodeState
argument_list|)
operator|.
name|propertyAdded
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"any"
argument_list|,
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimaryTypePropertyAdded
parameter_list|()
throws|throws
name|Exception
block|{
name|createRootValidator
argument_list|(
name|mockNodeState
argument_list|)
operator|.
name|propertyAdded
argument_list|(
name|createPrimaryTypeProperty
argument_list|(
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPolicyPrimaryTypePropertyAddedWrongParentName
parameter_list|()
throws|throws
name|Exception
block|{
name|Validator
name|v
init|=
name|createRootValidator
argument_list|(
name|mockNodeState
argument_list|)
operator|.
name|childNodeAdded
argument_list|(
literal|"wrongName"
argument_list|,
name|mockNodeState
argument_list|)
decl_stmt|;
try|try
block|{
name|v
operator|.
name|propertyAdded
argument_list|(
name|createPrimaryTypeProperty
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
expr_stmt|;
name|failCommitFailedExcpected
argument_list|(
literal|30
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertCommitFailed
argument_list|(
name|e
argument_list|,
literal|30
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPolicyPrimaryTypePropertyAdded
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
decl_stmt|;
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|rootTree
argument_list|,
name|MIX_REP_PRINCIPAL_BASED_MIXIN
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
argument_list|,
literal|"uid"
argument_list|)
expr_stmt|;
name|NodeState
name|rootState
init|=
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|rootTree
argument_list|)
decl_stmt|;
name|NodeState
name|child
init|=
name|mockNodeState
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
decl_stmt|;
name|Validator
name|v
init|=
name|createRootValidator
argument_list|(
name|rootState
argument_list|)
operator|.
name|childNodeAdded
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|,
name|child
argument_list|)
decl_stmt|;
name|v
operator|.
name|propertyAdded
argument_list|(
name|createPrimaryTypeProperty
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArbitraryPropertyChanged
parameter_list|()
throws|throws
name|Exception
block|{
name|PropertyState
name|before
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"any"
argument_list|,
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
decl_stmt|;
name|PropertyState
name|after
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"any"
argument_list|,
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
decl_stmt|;
name|createRootValidator
argument_list|(
name|mockNodeState
argument_list|)
operator|.
name|propertyChanged
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimaryTypePropertyChanged
parameter_list|()
throws|throws
name|Exception
block|{
name|PropertyState
name|before
init|=
name|createPrimaryTypeProperty
argument_list|(
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|PropertyState
name|after
init|=
name|createPrimaryTypeProperty
argument_list|(
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|createRootValidator
argument_list|(
name|mockNodeState
argument_list|)
operator|.
name|propertyChanged
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPolicyBeforePrimaryTypePropertyChanged
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|PropertyState
name|before
init|=
name|createPrimaryTypeProperty
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
decl_stmt|;
name|PropertyState
name|after
init|=
name|createPrimaryTypeProperty
argument_list|(
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|createRootValidator
argument_list|(
name|mockNodeState
argument_list|)
operator|.
name|propertyChanged
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|failCommitFailedExcpected
argument_list|(
literal|31
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertCommitFailed
argument_list|(
name|e
argument_list|,
literal|31
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPolicyAfterPrimaryTypePropertyChanged
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|PropertyState
name|before
init|=
name|createPrimaryTypeProperty
argument_list|(
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|PropertyState
name|after
init|=
name|createPrimaryTypeProperty
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
decl_stmt|;
name|createRootValidator
argument_list|(
name|mockNodeState
argument_list|)
operator|.
name|propertyChanged
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|failCommitFailedExcpected
argument_list|(
literal|31
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertCommitFailed
argument_list|(
name|e
argument_list|,
literal|31
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArbitraryPropertyDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|createRootValidator
argument_list|(
name|mockNodeState
argument_list|)
operator|.
name|propertyDeleted
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"any"
argument_list|,
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimaryTypePropertyDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|createRootValidator
argument_list|(
name|mockNodeState
argument_list|)
operator|.
name|propertyDeleted
argument_list|(
name|createPrimaryTypeProperty
argument_list|(
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAccessControlPrimaryTypePropertyDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|createRootValidator
argument_list|(
name|mockNodeState
argument_list|)
operator|.
name|propertyDeleted
argument_list|(
name|createPrimaryTypeProperty
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
expr_stmt|;
name|createRootValidator
argument_list|(
name|mockNodeState
argument_list|)
operator|.
name|propertyDeleted
argument_list|(
name|createPrimaryTypeProperty
argument_list|(
name|NT_REP_RESTRICTIONS
argument_list|)
argument_list|)
expr_stmt|;
name|createRootValidator
argument_list|(
name|mockNodeState
argument_list|)
operator|.
name|propertyDeleted
argument_list|(
name|createPrimaryTypeProperty
argument_list|(
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChildAddedToNodeTypeTree
parameter_list|()
throws|throws
name|Exception
block|{
name|Validator
name|validator
init|=
name|getValidatorAtNodeTypeTree
argument_list|(
name|mockNodeState
argument_list|,
name|JCR_SYSTEM
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|validator
operator|.
name|childNodeAdded
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|,
name|mockNodeState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChildChangedToNodeTypeTree
parameter_list|()
throws|throws
name|Exception
block|{
name|Validator
name|validator
init|=
name|getValidatorAtNodeTypeTree
argument_list|(
name|mockNodeState
argument_list|,
name|JCR_SYSTEM
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|validator
operator|.
name|childNodeChanged
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|,
name|mockNodeState
argument_list|,
name|mockNodeState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChildChangedBelowNodeTypeTree
parameter_list|()
throws|throws
name|Exception
block|{
name|Validator
name|validator
init|=
name|getValidatorAtNodeTypeTree
argument_list|(
name|mockNodeState
argument_list|,
name|JCR_SYSTEM
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|validator
operator|.
name|childNodeChanged
argument_list|(
literal|"any"
argument_list|,
name|mockNodeState
argument_list|,
name|mockNodeState
argument_list|)
operator|.
name|childNodeChanged
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|,
name|mockNodeState
argument_list|,
name|mockNodeState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChildDeletedToNodeTypeTree
parameter_list|()
throws|throws
name|Exception
block|{
name|Validator
name|validator
init|=
name|getValidatorAtNodeTypeTree
argument_list|(
name|mockNodeState
argument_list|,
name|JCR_SYSTEM
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockNodeState
operator|.
name|hasChildNode
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|validator
operator|.
name|childNodeDeleted
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|,
name|mockNodeState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|tetPolicyChildAddedWrongType
parameter_list|()
block|{
name|NodeState
name|child
init|=
name|mockNodeState
argument_list|(
name|NodeTypeConstants
operator|.
name|NT_REP_UNSTRUCTURED
argument_list|)
decl_stmt|;
try|try
block|{
name|createRootValidator
argument_list|(
name|mockNodeState
argument_list|)
operator|.
name|childNodeAdded
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|failCommitFailedExcpected
argument_list|(
literal|32
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertCommitFailed
argument_list|(
name|e
argument_list|,
literal|32
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|tetPolicyChildAddedMissingMixinOnParent
parameter_list|()
block|{
name|NodeState
name|rootState
init|=
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|contains
argument_list|(
name|rootState
operator|.
name|getNames
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|)
argument_list|,
name|MIX_REP_PRINCIPAL_BASED_MIXIN
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|child
init|=
name|mockNodeState
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
decl_stmt|;
try|try
block|{
name|createRootValidator
argument_list|(
name|rootState
argument_list|)
operator|.
name|childNodeAdded
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|failCommitFailedExcpected
argument_list|(
literal|33
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertCommitFailed
argument_list|(
name|e
argument_list|,
literal|33
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPolicyChildAdded
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
decl_stmt|;
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|rootTree
argument_list|,
name|MIX_REP_PRINCIPAL_BASED_MIXIN
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
argument_list|,
literal|"uid"
argument_list|)
expr_stmt|;
name|NodeState
name|child
init|=
name|mockNodeState
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
decl_stmt|;
name|Validator
name|v
init|=
name|createRootValidator
argument_list|(
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|rootTree
argument_list|)
argument_list|)
operator|.
name|childNodeAdded
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|,
name|child
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|v
operator|instanceof
name|VisibleValidator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|tetChildChangedWrongType
parameter_list|()
block|{
name|NodeState
name|ns
init|=
name|mockNodeState
argument_list|(
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|NodeState
name|child
init|=
name|mockNodeState
argument_list|(
name|NodeTypeConstants
operator|.
name|NT_REP_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|child
operator|.
name|hasChildNode
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|child
operator|.
name|getChildNode
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ns
argument_list|)
expr_stmt|;
try|try
block|{
name|createRootValidator
argument_list|(
name|mockNodeState
argument_list|)
operator|.
name|childNodeChanged
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|,
name|child
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|failCommitFailedExcpected
argument_list|(
literal|32
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertCommitFailed
argument_list|(
name|e
argument_list|,
literal|32
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|tetChildChangedMissingMixin
parameter_list|()
block|{
name|NodeState
name|rootState
init|=
name|spy
argument_list|(
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockNodeState
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|createPrimaryTypeProperty
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|child
init|=
name|mockNodeState
argument_list|(
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|child
operator|.
name|hasChildNode
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|child
operator|.
name|getChildNode
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockNodeState
argument_list|)
expr_stmt|;
try|try
block|{
name|createRootValidator
argument_list|(
name|rootState
argument_list|)
operator|.
name|childNodeChanged
argument_list|(
literal|"any"
argument_list|,
name|child
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|failCommitFailedExcpected
argument_list|(
literal|33
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertCommitFailed
argument_list|(
name|e
argument_list|,
literal|33
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArbitraryNodeTypeTreeTriggersValidation
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|rootState
init|=
name|spy
argument_list|(
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Validator
name|validator
init|=
name|getValidatorAtNodeTypeTree
argument_list|(
name|rootState
argument_list|,
literal|"notJcrSystem"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|NodeState
name|child
init|=
name|mockNodeState
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
decl_stmt|;
try|try
block|{
name|validator
operator|.
name|childNodeAdded
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|failCommitFailedExcpected
argument_list|(
literal|33
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertCommitFailed
argument_list|(
name|e
argument_list|,
literal|33
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArbitraryNodeTypeTreeTriggersValidation2
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|rootState
init|=
name|spy
argument_list|(
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Validator
name|validator
init|=
name|getValidatorAtNodeTypeTree
argument_list|(
name|rootState
argument_list|,
literal|"notJcrSystem"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockNodeState
operator|.
name|hasChildNode
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockNodeState
operator|.
name|getChildNode
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockNodeState
argument_list|)
expr_stmt|;
empty_stmt|;
try|try
block|{
name|validator
operator|.
name|childNodeChanged
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|,
name|mockNodeState
argument_list|,
name|mockNodeState
argument_list|)
expr_stmt|;
name|failCommitFailedExcpected
argument_list|(
literal|32
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertCommitFailed
argument_list|(
name|e
argument_list|,
literal|32
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddRestrictionWithWrongNtName
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|rootState
init|=
name|spy
argument_list|(
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|NodeState
name|restrictions
init|=
name|mockNodeState
argument_list|(
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
try|try
block|{
name|Validator
name|v
init|=
name|createRootValidator
argument_list|(
name|rootState
argument_list|)
operator|.
name|childNodeAdded
argument_list|(
name|REP_RESTRICTIONS
argument_list|,
name|restrictions
argument_list|)
decl_stmt|;
name|failCommitFailedExcpected
argument_list|(
literal|34
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertCommitFailed
argument_list|(
name|e
argument_list|,
literal|34
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddIsolatedRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|rootState
init|=
name|spy
argument_list|(
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|NodeState
name|restrictions
init|=
name|mockNodeState
argument_list|(
name|NT_REP_RESTRICTIONS
argument_list|)
decl_stmt|;
try|try
block|{
name|createRootValidator
argument_list|(
name|rootState
argument_list|)
operator|.
name|childNodeAdded
argument_list|(
name|REP_RESTRICTIONS
argument_list|,
name|restrictions
argument_list|)
expr_stmt|;
name|failCommitFailedExcpected
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertCommitFailed
argument_list|(
name|e
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddUnknownRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|entry
init|=
name|createPolicyEntryTree
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|restrictions
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|entry
argument_list|,
name|REP_RESTRICTIONS
argument_list|,
name|NT_REP_RESTRICTIONS
argument_list|)
decl_stmt|;
name|restrictions
operator|.
name|setProperty
argument_list|(
literal|"unknown"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|failCommitFailedExcpected
argument_list|(
literal|35
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertCommitFailed
argument_list|(
name|e
argument_list|,
literal|35
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddInvalidRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|entry
init|=
name|createPolicyEntryTree
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|restrictions
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|entry
argument_list|,
name|REP_RESTRICTIONS
argument_list|,
name|NT_REP_RESTRICTIONS
argument_list|)
decl_stmt|;
comment|// wrong type. must be NAMES.
name|restrictions
operator|.
name|setProperty
argument_list|(
name|REP_ITEM_NAMES
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|failCommitFailedExcpected
argument_list|(
literal|35
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertCommitFailed
argument_list|(
name|e
argument_list|,
literal|35
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddRestrictionWithDifferentACE
parameter_list|()
throws|throws
name|Exception
block|{
comment|// validator must not complain about adding restrictions to a different authorization model
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restr
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrName
argument_list|(
name|REP_GLOB
argument_list|)
argument_list|,
name|getValueFactory
argument_list|(
name|root
argument_list|)
operator|.
name|createValue
argument_list|(
literal|"val"
argument_list|)
argument_list|)
decl_stmt|;
name|addDefaultEntry
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|restr
argument_list|,
operator|(
name|Map
operator|)
literal|null
argument_list|,
name|JCR_LIFECYCLE_MANAGEMENT
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangeWithInvalidRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|entry
init|=
name|createPolicyEntryTree
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|restrictions
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|entry
argument_list|,
name|REP_RESTRICTIONS
argument_list|,
name|NT_REP_RESTRICTIONS
argument_list|)
decl_stmt|;
name|restrictions
operator|.
name|setProperty
argument_list|(
name|REP_GLOB
argument_list|,
literal|"*/glob/*"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// modify restriction tree changing glob property with type-cardinality mismatch
name|restrictions
operator|.
name|setProperty
argument_list|(
name|REP_GLOB
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|failCommitFailedExcpected
argument_list|(
literal|35
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertCommitFailed
argument_list|(
name|e
argument_list|,
literal|35
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangeFromSingleValuedToMvRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|entry
init|=
name|createPolicyEntryTree
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|restrictions
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|entry
argument_list|,
name|REP_RESTRICTIONS
argument_list|,
name|NT_REP_RESTRICTIONS
argument_list|)
decl_stmt|;
name|restrictions
operator|.
name|setProperty
argument_list|(
name|REP_GLOB
argument_list|,
literal|"*/glob/*"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|restrictions
operator|.
name|removeProperty
argument_list|(
name|REP_GLOB
argument_list|)
expr_stmt|;
name|restrictions
operator|.
name|setProperty
argument_list|(
name|REP_ITEM_NAMES
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"someName"
argument_list|,
literal|"anotherName"
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangeWithThrowingRestrictionValidation
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|entryMock
init|=
name|mockNodeState
argument_list|(
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|entryMock
operator|.
name|getProperty
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|,
literal|"/path"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|restrictions
init|=
name|mockNodeState
argument_list|(
name|NT_REP_RESTRICTIONS
argument_list|)
decl_stmt|;
name|RestrictionProvider
name|throwingRp
init|=
name|mock
argument_list|(
name|RestrictionProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|RepositoryException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|throwingRp
argument_list|)
operator|.
name|validateRestrictions
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MgrProvider
name|mgrProvider
init|=
name|mockMgrProvider
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mgrProvider
operator|.
name|getContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getConfig
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mgrProvider
operator|.
name|getRestrictionProvider
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|throwingRp
argument_list|)
expr_stmt|;
try|try
block|{
name|createRootValidator
argument_list|(
name|entryMock
argument_list|,
name|mgrProvider
argument_list|)
operator|.
name|childNodeChanged
argument_list|(
name|REP_RESTRICTIONS
argument_list|,
name|restrictions
argument_list|,
name|restrictions
argument_list|)
expr_stmt|;
name|failCommitFailedExcpected
argument_list|(
literal|13
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|isOfType
argument_list|(
name|CommitFailedException
operator|.
name|OAK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|e
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddIsolatedEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|rootState
init|=
name|spy
argument_list|(
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Validator
name|v
init|=
name|createRootValidator
argument_list|(
name|rootState
argument_list|)
operator|.
name|childNodeAdded
argument_list|(
literal|"anyName"
argument_list|,
name|mockNodeState
argument_list|(
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
argument_list|)
decl_stmt|;
name|failCommitFailedExcpected
argument_list|(
literal|36
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertCommitFailed
argument_list|(
name|e
argument_list|,
literal|36
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntryWithEmptyPrivilegeSet
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|entry
init|=
name|createPolicyEntryTree
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|failCommitFailedExcpected
argument_list|(
literal|37
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertCommitFailed
argument_list|(
name|e
argument_list|,
literal|37
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntryWithAbstractPrivilege
parameter_list|()
throws|throws
name|Exception
block|{
name|getPrivilegeManager
argument_list|(
name|root
argument_list|)
operator|.
name|registerPrivilege
argument_list|(
literal|"abstractPriv"
argument_list|,
literal|true
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Tree
name|entry
init|=
name|createPolicyEntryTree
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"abstractPriv"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|failCommitFailedExcpected
argument_list|(
literal|38
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertCommitFailed
argument_list|(
name|e
argument_list|,
literal|38
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntryWithInvalidPrivilege
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|entry
init|=
name|createPolicyEntryTree
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"invalidPrivilege"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|failCommitFailedExcpected
argument_list|(
literal|39
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertCommitFailed
argument_list|(
name|e
argument_list|,
literal|39
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntryPrivilegeLookupThrowsRepositoryException
parameter_list|()
throws|throws
name|Exception
block|{
name|PrivilegeManager
name|privMgr
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PrivilegeManager
operator|.
name|class
argument_list|)
operator|.
name|getPrivilege
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RepositoryException
argument_list|()
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|MgrProvider
name|mp
init|=
name|when
argument_list|(
name|mockMgrProvider
argument_list|()
operator|.
name|getPrivilegeManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|privMgr
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|NodeState
name|policyState
init|=
name|mockNodeState
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|policyState
operator|.
name|getProperty
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|,
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|ns
init|=
name|mockNodeState
argument_list|(
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ns
operator|.
name|hasChildNode
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ns
operator|.
name|getChildNode
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|policyState
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ns
operator|.
name|getProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|createMixinTypesProperty
argument_list|(
name|MIX_REP_PRINCIPAL_BASED_MIXIN
argument_list|)
argument_list|)
expr_stmt|;
name|Validator
name|v
init|=
name|createRootValidator
argument_list|(
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|)
argument_list|,
name|mp
argument_list|)
decl_stmt|;
name|v
operator|=
name|v
operator|.
name|childNodeChanged
argument_list|(
literal|"any"
argument_list|,
name|ns
argument_list|,
name|ns
argument_list|)
expr_stmt|;
name|v
operator|=
name|v
operator|.
name|childNodeChanged
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|,
name|policyState
argument_list|,
name|policyState
argument_list|)
expr_stmt|;
try|try
block|{
name|NodeState
name|entry
init|=
name|mockNodeState
argument_list|(
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|entry
operator|.
name|getProperty
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|,
literal|"/path"
argument_list|,
name|Type
operator|.
name|PATH
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|entry
operator|.
name|getNames
argument_list|(
name|REP_PRIVILEGES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"privName"
argument_list|)
argument_list|)
expr_stmt|;
name|v
operator|.
name|childNodeChanged
argument_list|(
literal|"entryName"
argument_list|,
name|entry
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"CommitFailedException type OAK code 13 expected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|CommitFailedException
operator|.
name|OAK
argument_list|,
name|e
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|e
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntryMissingEffectivePath
parameter_list|()
throws|throws
name|Exception
block|{
name|MgrProvider
name|mp
init|=
name|when
argument_list|(
name|mockMgrProvider
argument_list|()
operator|.
name|getPrivilegeManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getPrivilegeManager
argument_list|(
name|root
argument_list|)
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|NodeState
name|policyState
init|=
name|mockNodeState
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|policyState
operator|.
name|getProperty
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|,
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|ns
init|=
name|mockNodeState
argument_list|(
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ns
operator|.
name|hasChildNode
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ns
operator|.
name|getChildNode
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|policyState
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ns
operator|.
name|getProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|createMixinTypesProperty
argument_list|(
name|MIX_REP_PRINCIPAL_BASED_MIXIN
argument_list|)
argument_list|)
expr_stmt|;
name|Validator
name|v
init|=
name|createRootValidator
argument_list|(
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|)
argument_list|,
name|mp
argument_list|)
decl_stmt|;
name|v
operator|=
name|v
operator|.
name|childNodeChanged
argument_list|(
literal|"any"
argument_list|,
name|ns
argument_list|,
name|ns
argument_list|)
expr_stmt|;
name|v
operator|=
name|v
operator|.
name|childNodeChanged
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|,
name|policyState
argument_list|,
name|policyState
argument_list|)
expr_stmt|;
try|try
block|{
name|NodeState
name|entry
init|=
name|mockNodeState
argument_list|(
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|entry
operator|.
name|getProperty
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|entry
operator|.
name|getNames
argument_list|(
name|REP_PRIVILEGES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|v
operator|.
name|childNodeChanged
argument_list|(
literal|"entryName"
argument_list|,
name|entry
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"CommitFailedException type CONSTRAINT code 21 expected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|CommitFailedException
operator|.
name|CONSTRAINT
argument_list|,
name|e
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|21
argument_list|,
name|e
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testIllegalAddDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|rootState
init|=
name|spy
argument_list|(
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|NodeState
name|child
init|=
name|mockNodeState
argument_list|(
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|Validator
name|v
init|=
name|createRootValidator
argument_list|(
name|rootState
argument_list|)
operator|.
name|childNodeAdded
argument_list|(
literal|"added"
argument_list|,
name|child
argument_list|)
decl_stmt|;
name|v
operator|.
name|childNodeDeleted
argument_list|(
literal|"deleted"
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testIllegalDeleteAdd
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|rootState
init|=
name|spy
argument_list|(
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|NodeState
name|child
init|=
name|mockNodeState
argument_list|(
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|Validator
name|v
init|=
name|createRootValidator
argument_list|(
name|rootState
argument_list|)
operator|.
name|childNodeDeleted
argument_list|(
literal|"deleted"
argument_list|,
name|child
argument_list|)
decl_stmt|;
name|v
operator|.
name|childNodeAdded
argument_list|(
literal|"added"
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

