begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|junit
operator|.
name|LogCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_class
specifier|public
class|class
name|RDBConnectionHandlerTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|logging
parameter_list|()
throws|throws
name|Exception
block|{
name|LogCustomizer
name|customLogs
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|RDBConnectionHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|enable
argument_list|(
name|Level
operator|.
name|TRACE
argument_list|)
operator|.
name|contains
argument_list|(
literal|"while obtaining new"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|DataSource
name|ds
init|=
name|RDBDataSourceFactory
operator|.
name|forJdbcUrl
argument_list|(
literal|"jdbc:h2:mem:"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Connection
name|c1
init|=
literal|null
decl_stmt|,
name|c2
init|=
literal|null
decl_stmt|,
name|c3
init|=
literal|null
decl_stmt|;
try|try
init|(
name|RDBConnectionHandler
name|ch
init|=
operator|new
name|RDBConnectionHandler
argument_list|(
name|ds
argument_list|)
init|)
block|{
name|customLogs
operator|.
name|starting
argument_list|()
expr_stmt|;
name|c1
operator|=
name|ch
operator|.
name|getROConnection
argument_list|()
expr_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|customLogs
operator|.
name|getLogs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|c2
operator|=
name|ch
operator|.
name|getROConnection
argument_list|()
expr_stmt|;
comment|// age threshold not reached
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|customLogs
operator|.
name|getLogs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|ts
operator|<
literal|21
condition|)
block|{
comment|// busy wait for LOGTHRESHOLD to pass
block|}
name|c3
operator|=
name|ch
operator|.
name|getROConnection
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|customLogs
operator|.
name|getLogs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// System.out.println(customLogs.getLogs());
block|}
finally|finally
block|{
name|close
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|customLogs
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|close
parameter_list|(
name|AutoCloseable
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{             }
block|}
block|}
block|}
end_class

end_unit

