begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_comment
comment|/**  * Tests large group and user graphs.  *<ul>  *<li>{@link #NUM_USERS} users</li>  *<li>{@link #NUM_GROUPS} groups</li>  *<li>1 group with all users</li>  *<li>1 user with all groups</li>  *</ul>  *  * @since OAK 1.0  */
end_comment

begin_class
specifier|public
class|class
name|MembershipProviderTest
extends|extends
name|AbstractSecurityTest
implements|implements
name|UserConstants
block|{
specifier|private
specifier|static
specifier|final
name|int
name|NUM_USERS
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_GROUPS
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SIZE_TH
init|=
literal|10
decl_stmt|;
specifier|private
name|UserManagerImpl
name|userMgr
decl_stmt|;
specifier|private
name|MembershipProvider
name|mp
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|testUsers
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|testGroups
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|userMgr
operator|=
operator|new
name|UserManagerImpl
argument_list|(
name|root
argument_list|,
name|namePathMapper
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
name|mp
operator|=
name|userMgr
operator|.
name|getMembershipProvider
argument_list|()
expr_stmt|;
comment|// set the threshold low for testing
name|mp
operator|.
name|setMembershipSizeThreshold
argument_list|(
name|SIZE_TH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
for|for
control|(
name|String
name|path
range|:
name|Iterables
operator|.
name|concat
argument_list|(
name|testUsers
argument_list|,
name|testGroups
argument_list|)
control|)
block|{
name|Authorizable
name|auth
init|=
name|userMgr
operator|.
name|getAuthorizableByPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|auth
operator|!=
literal|null
condition|)
block|{
name|auth
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|testUsers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|testGroups
operator|.
name|clear
argument_list|()
expr_stmt|;
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testManyMembers
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|members
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Group
name|grp
init|=
name|createGroup
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_USERS
condition|;
name|i
operator|++
control|)
block|{
name|User
name|usr
init|=
name|createUser
argument_list|()
decl_stmt|;
name|grp
operator|.
name|addMember
argument_list|(
name|usr
argument_list|)
expr_stmt|;
name|members
operator|.
name|add
argument_list|(
name|usr
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertMembers
argument_list|(
name|grp
argument_list|,
name|members
argument_list|)
expr_stmt|;
comment|// also check storage structure
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|grp
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"rep:members property must have correct number of references"
argument_list|,
name|SIZE_TH
argument_list|,
name|tree
operator|.
name|getProperty
argument_list|(
name|REP_MEMBERS
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|membersList
init|=
name|tree
operator|.
name|getChild
argument_list|(
name|REP_MEMBERS_LIST
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"rep:memberList must exist"
argument_list|,
name|membersList
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rep:memberList must have correct primary type."
argument_list|,
name|NT_REP_MEMBER_REFERENCES_LIST
argument_list|,
name|membersList
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rep:memberList must have correct number of child nodes."
argument_list|,
operator|(
name|NUM_USERS
operator|/
name|SIZE_TH
operator|)
operator|-
literal|1
argument_list|,
name|membersList
operator|.
name|getChildrenCount
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testManyMemberships
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|memberships
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|User
name|usr
init|=
name|createUser
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_GROUPS
condition|;
name|i
operator|++
control|)
block|{
name|Group
name|grp
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|grp
operator|.
name|addMember
argument_list|(
name|usr
argument_list|)
expr_stmt|;
name|memberships
operator|.
name|add
argument_list|(
name|grp
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|Group
argument_list|>
name|iter
init|=
name|usr
operator|.
name|declaredMemberOf
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Group
name|group
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|memberships
operator|.
name|remove
argument_list|(
name|group
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memberships
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedMembers
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|members
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|declaredMembers
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Group
name|grp
init|=
name|createGroup
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Group
name|g1
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|grp
operator|.
name|addMember
argument_list|(
name|g1
argument_list|)
expr_stmt|;
name|members
operator|.
name|add
argument_list|(
name|g1
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|declaredMembers
operator|.
name|add
argument_list|(
name|g1
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
name|Group
name|g2
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|g1
operator|.
name|addMember
argument_list|(
name|g2
argument_list|)
expr_stmt|;
name|members
operator|.
name|add
argument_list|(
name|g2
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|10
condition|;
name|k
operator|++
control|)
block|{
name|User
name|usr
init|=
name|createUser
argument_list|()
decl_stmt|;
name|g2
operator|.
name|addMember
argument_list|(
name|usr
argument_list|)
expr_stmt|;
name|members
operator|.
name|add
argument_list|(
name|usr
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertMembers
argument_list|(
name|grp
argument_list|,
name|members
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|iter
init|=
name|grp
operator|.
name|getDeclaredMembers
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Authorizable
name|member
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|declaredMembers
operator|.
name|remove
argument_list|(
name|member
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|declaredMembers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedMemberships
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|memberships
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|createUser
argument_list|()
decl_stmt|;
name|Group
name|grp
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|memberships
operator|.
name|add
argument_list|(
name|grp
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Group
name|g1
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|grp
operator|.
name|addMember
argument_list|(
name|g1
argument_list|)
expr_stmt|;
name|memberships
operator|.
name|add
argument_list|(
name|g1
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
name|Group
name|g2
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|g1
operator|.
name|addMember
argument_list|(
name|g2
argument_list|)
expr_stmt|;
name|memberships
operator|.
name|add
argument_list|(
name|g2
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|g2
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|Group
argument_list|>
name|iter
init|=
name|user
operator|.
name|memberOf
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Group
name|group
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|memberships
operator|.
name|remove
argument_list|(
name|group
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memberships
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveMembers
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|members
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|users
init|=
operator|new
name|String
index|[
name|NUM_USERS
index|]
decl_stmt|;
name|Group
name|grp
init|=
name|createGroup
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_USERS
condition|;
name|i
operator|++
control|)
block|{
name|User
name|usr
init|=
name|createUser
argument_list|()
decl_stmt|;
name|grp
operator|.
name|addMember
argument_list|(
name|usr
argument_list|)
expr_stmt|;
name|members
operator|.
name|add
argument_list|(
name|usr
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|users
index|[
name|i
index|]
operator|=
name|usr
operator|.
name|getID
argument_list|()
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// remove the first TH users, this should remove all references from rep:members in the group node and remove
comment|// the rep:members property
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SIZE_TH
condition|;
name|i
operator|++
control|)
block|{
name|Authorizable
name|auth
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|users
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|members
operator|.
name|remove
argument_list|(
name|users
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|grp
operator|.
name|removeMember
argument_list|(
name|auth
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertMembers
argument_list|(
name|grp
argument_list|,
name|members
argument_list|)
expr_stmt|;
comment|// also check storage structure
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|grp
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"rep:members property not exist"
argument_list|,
name|tree
operator|.
name|getProperty
argument_list|(
name|REP_MEMBERS
argument_list|)
argument_list|)
expr_stmt|;
comment|// now add TH/2 again.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SIZE_TH
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Authorizable
name|auth
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|users
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|members
operator|.
name|add
argument_list|(
name|users
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|grp
operator|.
name|addMember
argument_list|(
name|auth
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rep:members property must have correct number of references"
argument_list|,
name|SIZE_TH
operator|/
literal|2
argument_list|,
name|tree
operator|.
name|getProperty
argument_list|(
name|REP_MEMBERS
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertMembers
argument_list|(
name|grp
argument_list|,
name|members
argument_list|)
expr_stmt|;
comment|// now remove the users 20-30, this should remove the 2nd overflow node
for|for
control|(
name|int
name|i
init|=
literal|2
operator|*
name|SIZE_TH
init|;
name|i
operator|<
operator|(
literal|3
operator|*
name|SIZE_TH
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|Authorizable
name|auth
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|users
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|members
operator|.
name|remove
argument_list|(
name|users
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|grp
operator|.
name|removeMember
argument_list|(
name|auth
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertMembers
argument_list|(
name|grp
argument_list|,
name|members
argument_list|)
expr_stmt|;
name|Tree
name|membersList
init|=
name|tree
operator|.
name|getChild
argument_list|(
name|REP_MEMBERS_LIST
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"the first overflow node must not exist"
argument_list|,
name|membersList
operator|.
name|getChild
argument_list|(
literal|"1"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// now add 10 users and check if the "1" node exists again
for|for
control|(
name|int
name|i
init|=
literal|2
operator|*
name|SIZE_TH
init|;
name|i
operator|<
operator|(
literal|3
operator|*
name|SIZE_TH
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|Authorizable
name|auth
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|users
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|members
operator|.
name|add
argument_list|(
name|users
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|grp
operator|.
name|addMember
argument_list|(
name|auth
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertMembers
argument_list|(
name|grp
argument_list|,
name|members
argument_list|)
expr_stmt|;
name|membersList
operator|=
name|tree
operator|.
name|getChild
argument_list|(
name|REP_MEMBERS_LIST
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"the first overflow node must not exist"
argument_list|,
name|membersList
operator|.
name|getChild
argument_list|(
literal|"1"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddMembersAgain
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|members
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Group
name|grp
init|=
name|createGroup
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_USERS
condition|;
name|i
operator|++
control|)
block|{
name|User
name|usr
init|=
name|createUser
argument_list|()
decl_stmt|;
name|grp
operator|.
name|addMember
argument_list|(
name|usr
argument_list|)
expr_stmt|;
name|members
operator|.
name|add
argument_list|(
name|usr
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|members
control|)
block|{
name|assertFalse
argument_list|(
name|grp
operator|.
name|addMember
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddMembersAgainOnMembershipProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|memberPaths
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Group
name|grp
init|=
name|createGroup
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_USERS
condition|;
name|i
operator|++
control|)
block|{
name|User
name|usr
init|=
name|createUser
argument_list|()
decl_stmt|;
name|grp
operator|.
name|addMember
argument_list|(
name|usr
argument_list|)
expr_stmt|;
name|memberPaths
operator|.
name|add
argument_list|(
name|usr
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|groupTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|grp
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|memberPaths
control|)
block|{
name|Tree
name|memberTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|mp
operator|.
name|addMember
argument_list|(
name|groupTree
argument_list|,
name|memberTree
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mp
operator|.
name|addMember
argument_list|(
name|groupTree
argument_list|,
name|memberTree
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|memberId
init|=
name|TreeUtil
operator|.
name|getString
argument_list|(
name|memberTree
argument_list|,
name|REP_AUTHORIZABLE_ID
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|TreeUtil
operator|.
name|getString
argument_list|(
name|memberTree
argument_list|,
name|JcrConstants
operator|.
name|JCR_UUID
argument_list|)
argument_list|,
name|memberId
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|failed
init|=
name|mp
operator|.
name|addMembers
argument_list|(
name|groupTree
argument_list|,
name|m
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|failed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|failed
operator|.
name|contains
argument_list|(
name|memberId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsDeclaredMemberTransient
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|g
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Authorizable
argument_list|>
name|members
init|=
name|createMembers
argument_list|(
name|g
argument_list|,
name|NUM_USERS
operator|/
literal|2
argument_list|)
decl_stmt|;
name|Tree
name|groupTree
init|=
name|getTree
argument_list|(
name|g
argument_list|)
decl_stmt|;
comment|// test declared members with transient modifications
for|for
control|(
name|Authorizable
name|a
range|:
name|members
control|)
block|{
name|assertTrue
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|a
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsDeclaredMember
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|g
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Authorizable
argument_list|>
name|members
init|=
name|createMembers
argument_list|(
name|g
argument_list|,
name|NUM_USERS
operator|/
literal|2
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|groupTree
init|=
name|getTree
argument_list|(
name|g
argument_list|)
decl_stmt|;
comment|// test declared members after commit
for|for
control|(
name|Authorizable
name|a
range|:
name|members
control|)
block|{
name|assertTrue
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|a
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsDeclaredMemberFew
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|g
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|Group
name|m1
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|User
name|m2
init|=
name|createUser
argument_list|()
decl_stmt|;
name|g
operator|.
name|addMembers
argument_list|(
name|m1
operator|.
name|getID
argument_list|()
argument_list|,
name|m2
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|groupTree
init|=
name|getTree
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|groupTree
operator|.
name|hasChild
argument_list|(
name|REP_MEMBERS_LIST
argument_list|)
argument_list|)
expr_stmt|;
comment|// test declared members with transient modifications
name|assertTrue
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|m1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|m2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// ... and after commit
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|m1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|m2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsMemberTransient
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|g
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|Group
name|g2
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|g2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Authorizable
argument_list|>
name|members
init|=
name|createMembers
argument_list|(
name|g2
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|Tree
name|groupTree
init|=
name|getTree
argument_list|(
name|g
argument_list|)
decl_stmt|;
comment|// test members with transient modifications
for|for
control|(
name|Authorizable
name|a
range|:
name|members
control|)
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|tree
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mp
operator|.
name|isMember
argument_list|(
name|groupTree
argument_list|,
name|tree
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsMember
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|g
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|Group
name|g2
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|g2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Authorizable
argument_list|>
name|members
init|=
name|createMembers
argument_list|(
name|g2
argument_list|,
name|NUM_USERS
operator|/
literal|2
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// test members after commit
name|Tree
name|groupTree
init|=
name|getTree
argument_list|(
name|g
argument_list|)
decl_stmt|;
for|for
control|(
name|Authorizable
name|a
range|:
name|members
control|)
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|tree
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mp
operator|.
name|isMember
argument_list|(
name|groupTree
argument_list|,
name|tree
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsMemberFew
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|g
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|Group
name|g2
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|g2
argument_list|)
expr_stmt|;
name|User
name|m1
init|=
name|createUser
argument_list|()
decl_stmt|;
name|Group
name|m2
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|g2
operator|.
name|addMember
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|g2
operator|.
name|addMember
argument_list|(
name|m2
argument_list|)
expr_stmt|;
name|Tree
name|groupTree
init|=
name|getTree
argument_list|(
name|g
argument_list|)
decl_stmt|;
comment|// test members with transient modifications
name|assertFalse
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|m1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|m2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mp
operator|.
name|isMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|m1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mp
operator|.
name|isMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|m2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// ... and after commit
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|m1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|m2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mp
operator|.
name|isMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|m1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mp
operator|.
name|isMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|m2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransientInMembersList
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|g
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|createMembers
argument_list|(
name|g
argument_list|,
name|NUM_USERS
operator|/
literal|2
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// add another transient member that will end up in the members-ref-list
name|User
name|u
init|=
name|createUser
argument_list|()
decl_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|Tree
name|groupTree
init|=
name|getTree
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|Tree
name|memberTree
init|=
name|getTree
argument_list|(
name|u
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|memberTree
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mp
operator|.
name|isMember
argument_list|(
name|groupTree
argument_list|,
name|memberTree
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|contains
argument_list|(
name|mp
operator|.
name|getMembership
argument_list|(
name|memberTree
argument_list|,
literal|false
argument_list|)
argument_list|,
name|groupTree
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|contains
argument_list|(
name|mp
operator|.
name|getMembership
argument_list|(
name|memberTree
argument_list|,
literal|true
argument_list|)
argument_list|,
name|groupTree
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterators
operator|.
name|contains
argument_list|(
name|mp
operator|.
name|getMembership
argument_list|(
name|memberTree
argument_list|,
literal|false
argument_list|)
argument_list|,
name|groupTree
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterators
operator|.
name|contains
argument_list|(
name|mp
operator|.
name|getMembership
argument_list|(
name|memberTree
argument_list|,
literal|true
argument_list|)
argument_list|,
name|groupTree
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoMember
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|g
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|Group
name|notMember
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|User
name|notMember2
init|=
name|createUser
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|g
operator|.
name|isDeclaredMember
argument_list|(
name|notMember
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|g
operator|.
name|isDeclaredMember
argument_list|(
name|notMember2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|g
operator|.
name|isMember
argument_list|(
name|notMember
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|g
operator|.
name|isMember
argument_list|(
name|notMember2
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|g
operator|.
name|isDeclaredMember
argument_list|(
name|notMember
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|g
operator|.
name|isDeclaredMember
argument_list|(
name|notMember2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|g
operator|.
name|isMember
argument_list|(
name|notMember
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|g
operator|.
name|isMember
argument_list|(
name|notMember2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddMembersExceedThreshold
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|groupTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|createGroup
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
comment|// 1. add array of 21 memberIDs exceeding the threshold
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|memberIds
init|=
name|createIdMap
argument_list|(
literal|0
argument_list|,
literal|21
argument_list|)
decl_stmt|;
name|mp
operator|.
name|addMembers
argument_list|(
name|groupTree
argument_list|,
name|memberIds
argument_list|)
expr_stmt|;
name|PropertyState
name|repMembers
init|=
name|groupTree
operator|.
name|getProperty
argument_list|(
name|REP_MEMBERS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|repMembers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SIZE_TH
argument_list|,
name|repMembers
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
comment|// the members-list must how have two ref-members nodes one with 10 and
comment|// one with a single ref-value
name|assertMemberList
argument_list|(
name|groupTree
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// 2. add more members without reaching threshold => still 2 ref-nodes
name|memberIds
operator|=
name|createIdMap
argument_list|(
literal|21
argument_list|,
literal|29
argument_list|)
expr_stmt|;
name|mp
operator|.
name|addMembers
argument_list|(
name|groupTree
argument_list|,
name|memberIds
argument_list|)
expr_stmt|;
name|assertMemberList
argument_list|(
name|groupTree
argument_list|,
literal|2
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// 3. fill up second ref-members node => a new one must be created
name|memberIds
operator|=
name|createIdMap
argument_list|(
literal|29
argument_list|,
literal|35
argument_list|)
expr_stmt|;
name|mp
operator|.
name|addMembers
argument_list|(
name|groupTree
argument_list|,
name|memberIds
argument_list|)
expr_stmt|;
name|assertMemberList
argument_list|(
name|groupTree
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// 4. remove members from the initial set => ref nodes as before, rep:members prop on group modified
name|memberIds
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|//TODO
name|memberIds
operator|.
name|put
argument_list|(
name|MembershipProvider
operator|.
name|getContentID
argument_list|(
literal|"member1"
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"member1"
argument_list|)
expr_stmt|;
name|memberIds
operator|.
name|put
argument_list|(
name|MembershipProvider
operator|.
name|getContentID
argument_list|(
literal|"member2"
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"member2"
argument_list|)
expr_stmt|;
name|mp
operator|.
name|removeMembers
argument_list|(
name|groupTree
argument_list|,
name|Maps
operator|.
name|newHashMap
argument_list|(
name|memberIds
argument_list|)
argument_list|)
expr_stmt|;
name|assertMemberList
argument_list|(
name|groupTree
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|groupTree
operator|.
name|getProperty
argument_list|(
name|REP_MEMBERS
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
comment|// 5. add members again => best-tree is the ref-member-node
name|memberIds
operator|=
name|createIdMap
argument_list|(
literal|35
argument_list|,
literal|39
argument_list|)
expr_stmt|;
name|mp
operator|.
name|addMembers
argument_list|(
name|groupTree
argument_list|,
name|memberIds
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|groupTree
operator|.
name|getProperty
argument_list|(
name|REP_MEMBERS
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertMemberList
argument_list|(
name|groupTree
argument_list|,
literal|3
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// 6. adding more members will fill up rep:members again and create new ref-node
name|memberIds
operator|=
name|createIdMap
argument_list|(
literal|39
argument_list|,
literal|45
argument_list|)
expr_stmt|;
name|mp
operator|.
name|addMembers
argument_list|(
name|groupTree
argument_list|,
name|memberIds
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SIZE_TH
argument_list|,
name|groupTree
operator|.
name|getProperty
argument_list|(
name|REP_MEMBERS
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|groupTree
operator|.
name|getChild
argument_list|(
name|REP_MEMBERS_LIST
argument_list|)
operator|.
name|getChildrenCount
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|User
name|createUser
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|userId
init|=
literal|"testUser"
operator|+
name|testUsers
operator|.
name|size
argument_list|()
decl_stmt|;
name|User
name|usr
init|=
name|userMgr
operator|.
name|createUser
argument_list|(
name|userId
argument_list|,
literal|"pw"
argument_list|)
decl_stmt|;
name|testUsers
operator|.
name|add
argument_list|(
name|usr
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|usr
return|;
block|}
specifier|private
name|Group
name|createGroup
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|groupName
init|=
literal|"testGroup"
operator|+
name|testGroups
operator|.
name|size
argument_list|()
decl_stmt|;
name|Group
name|grp
init|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|testGroups
operator|.
name|add
argument_list|(
name|grp
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|grp
return|;
block|}
specifier|private
name|List
argument_list|<
name|Authorizable
argument_list|>
name|createMembers
parameter_list|(
annotation|@
name|Nonnull
name|Group
name|g
parameter_list|,
name|int
name|cnt
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Authorizable
argument_list|>
name|members
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|User
name|u
init|=
name|createUser
argument_list|()
decl_stmt|;
name|Group
name|gr
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|g
operator|.
name|addMembers
argument_list|(
name|u
operator|.
name|getID
argument_list|()
argument_list|,
name|gr
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|members
operator|.
name|add
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|members
operator|.
name|add
argument_list|(
name|gr
argument_list|)
expr_stmt|;
block|}
return|return
name|members
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|createIdMap
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|memberIds
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|String
name|memberId
init|=
literal|"member"
operator|+
name|i
decl_stmt|;
comment|//TODO
name|memberIds
operator|.
name|put
argument_list|(
name|MembershipProvider
operator|.
name|getContentID
argument_list|(
name|memberId
argument_list|,
literal|false
argument_list|)
argument_list|,
name|memberId
argument_list|)
expr_stmt|;
block|}
return|return
name|memberIds
return|;
block|}
specifier|private
specifier|static
name|void
name|assertMembers
parameter_list|(
name|Group
name|grp
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|ms
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|members
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|ms
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|iter
init|=
name|grp
operator|.
name|getMembers
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Authorizable
name|member
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Group must have member"
argument_list|,
name|members
operator|.
name|remove
argument_list|(
name|member
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Group must have all members"
argument_list|,
literal|0
argument_list|,
name|members
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertMemberList
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|groupTree
parameter_list|,
name|int
name|cntRefTrees
parameter_list|,
name|int
name|cnt
parameter_list|)
block|{
name|Tree
name|list
init|=
name|groupTree
operator|.
name|getChild
argument_list|(
name|REP_MEMBERS_LIST
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cntRefTrees
argument_list|,
name|list
operator|.
name|getChildrenCount
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Tree
name|c
range|:
name|list
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|PropertyState
name|repMembers
init|=
name|c
operator|.
name|getProperty
argument_list|(
name|REP_MEMBERS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|repMembers
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|SIZE_TH
operator|==
name|repMembers
operator|.
name|count
argument_list|()
operator|||
name|cnt
operator|==
name|repMembers
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Tree
name|getTree
parameter_list|(
annotation|@
name|Nonnull
name|Authorizable
name|a
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|root
operator|.
name|getTree
argument_list|(
name|a
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

