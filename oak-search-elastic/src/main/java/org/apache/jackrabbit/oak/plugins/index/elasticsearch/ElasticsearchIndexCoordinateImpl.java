begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RestHighLevelClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
operator|.
name|INVALID_FILENAME_CHARS
import|;
end_import

begin_class
specifier|public
class|class
name|ElasticsearchIndexCoordinateImpl
implements|implements
name|ElasticsearchIndexCoordinate
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MAX_NAME_LENGTH
init|=
literal|255
decl_stmt|;
specifier|private
specifier|final
name|ElasticsearchCoordinate
name|esCoord
decl_stmt|;
specifier|private
specifier|final
name|String
name|esIndexName
decl_stmt|;
name|ElasticsearchIndexCoordinateImpl
parameter_list|(
annotation|@
name|NotNull
name|ElasticsearchCoordinate
name|esCoord
parameter_list|,
name|IndexDefinition
name|indexDefinition
parameter_list|)
block|{
name|this
operator|.
name|esCoord
operator|=
name|esCoord
expr_stmt|;
name|esIndexName
operator|=
name|getRemoteIndexName
argument_list|(
name|indexDefinition
argument_list|,
name|indexDefinition
operator|.
name|getIndexPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RestHighLevelClient
name|getClient
parameter_list|()
block|{
return|return
name|esCoord
operator|.
name|getClient
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getEsIndexName
parameter_list|()
block|{
return|return
name|esIndexName
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|esCoord
argument_list|,
name|esIndexName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|ElasticsearchIndexCoordinateImpl
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ElasticsearchIndexCoordinateImpl
name|other
init|=
operator|(
name|ElasticsearchIndexCoordinateImpl
operator|)
name|o
decl_stmt|;
return|return
name|hashCode
argument_list|()
operator|==
name|other
operator|.
name|hashCode
argument_list|()
operator|&&
name|esCoord
operator|.
name|equals
argument_list|(
name|other
operator|.
name|esCoord
argument_list|)
operator|&&
name|esIndexName
operator|.
name|equals
argument_list|(
name|other
operator|.
name|esIndexName
argument_list|)
return|;
block|}
specifier|private
name|String
name|getRemoteIndexName
parameter_list|(
name|IndexDefinition
name|definition
parameter_list|,
name|String
name|indexPath
parameter_list|)
block|{
name|String
name|suffix
init|=
name|definition
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
if|if
condition|(
name|suffix
operator|==
literal|null
condition|)
block|{
name|suffix
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|definition
operator|.
name|getReindexCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|getESSafeIndexName
argument_list|(
name|indexPath
operator|+
literal|"-"
operator|+
name|suffix
argument_list|)
return|;
block|}
comment|/**      *<ul>      *<li>abc -> abc</li>      *<li>xy:abc -> xyabc</li>      *<li>/oak:index/abc -> abc</li>      *</ul>      *      * The resulting file name would be truncated to MAX_NAME_LENGTH      */
specifier|private
specifier|static
name|String
name|getESSafeIndexName
parameter_list|(
name|String
name|indexPath
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|elements
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|PathUtils
operator|.
name|elements
argument_list|(
name|indexPath
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|elements
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|//Max 3 nodeNames including oak:index which is the immediate parent for any indexPath
for|for
control|(
name|String
name|e
range|:
name|Iterables
operator|.
name|limit
argument_list|(
name|elements
argument_list|,
literal|3
argument_list|)
control|)
block|{
if|if
condition|(
literal|"oak:index"
operator|.
name|equals
argument_list|(
name|e
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|result
operator|.
name|add
argument_list|(
name|getESSafeName
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|reverse
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|'_'
argument_list|)
operator|.
name|join
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|>
name|MAX_NAME_LENGTH
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|MAX_NAME_LENGTH
argument_list|)
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
comment|/**      * Convert {@code e} to Elasticsearch safe index name.      * Ref: https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html      */
specifier|private
specifier|static
name|String
name|getESSafeName
parameter_list|(
name|String
name|suggestedIndexName
parameter_list|)
block|{
name|String
name|invalidCharsRegex
init|=
name|Pattern
operator|.
name|quote
argument_list|(
name|INVALID_FILENAME_CHARS
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Object
operator|::
name|toString
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|suggestedIndexName
operator|.
name|replaceAll
argument_list|(
name|invalidCharsRegex
argument_list|,
literal|""
argument_list|)
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
block|}
end_class

end_unit

