begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|hybrid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|writer
operator|.
name|LuceneIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|writer
operator|.
name|LuceneIndexWriterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_class
specifier|public
class|class
name|LocalIndexWriterFactory
implements|implements
name|LuceneIndexWriterFactory
block|{
specifier|public
specifier|static
specifier|final
name|String
name|COMMIT_PROCESSED_BY_LOCAL_LUCENE_EDITOR
init|=
literal|"commitProcessedByLocalLuceneEditor"
decl_stmt|;
specifier|private
specifier|final
name|IndexingContext
name|indexingContext
decl_stmt|;
specifier|private
specifier|final
name|CommitContext
name|commitContext
decl_stmt|;
specifier|public
name|LocalIndexWriterFactory
parameter_list|(
name|IndexingContext
name|indexingContext
parameter_list|)
block|{
name|this
operator|.
name|indexingContext
operator|=
name|indexingContext
expr_stmt|;
name|this
operator|.
name|commitContext
operator|=
name|getCommitContext
argument_list|(
name|indexingContext
argument_list|)
expr_stmt|;
block|}
specifier|private
name|LuceneDocumentHolder
name|getDocumentHolder
parameter_list|()
block|{
name|LuceneDocumentHolder
name|holder
init|=
operator|(
name|LuceneDocumentHolder
operator|)
name|commitContext
operator|.
name|get
argument_list|(
name|LuceneDocumentHolder
operator|.
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|holder
operator|==
literal|null
condition|)
block|{
comment|//lazily initialize the holder
name|holder
operator|=
operator|new
name|LuceneDocumentHolder
argument_list|()
expr_stmt|;
name|commitContext
operator|.
name|set
argument_list|(
name|LuceneDocumentHolder
operator|.
name|NAME
argument_list|,
name|holder
argument_list|)
expr_stmt|;
block|}
return|return
name|holder
return|;
block|}
specifier|private
specifier|static
name|CommitContext
name|getCommitContext
parameter_list|(
name|IndexingContext
name|indexingContext
parameter_list|)
block|{
name|CommitContext
name|commitContext
init|=
operator|(
name|CommitContext
operator|)
name|indexingContext
operator|.
name|getCommitInfo
argument_list|()
operator|.
name|getInfo
argument_list|()
operator|.
name|get
argument_list|(
name|CommitContext
operator|.
name|NAME
argument_list|)
decl_stmt|;
return|return
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|commitContext
argument_list|,
literal|"No commit context found in commit info"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|LuceneIndexWriter
name|newInstance
parameter_list|(
name|IndexDefinition
name|definition
parameter_list|,
name|NodeBuilder
name|definitionBuilder
parameter_list|,
name|boolean
name|reindex
parameter_list|)
block|{
return|return
operator|new
name|LocalIndexWriter
argument_list|(
name|definition
argument_list|)
return|;
block|}
specifier|private
class|class
name|LocalIndexWriter
implements|implements
name|LuceneIndexWriter
block|{
specifier|private
specifier|final
name|IndexDefinition
name|definition
decl_stmt|;
specifier|private
name|List
argument_list|<
name|LuceneDoc
argument_list|>
name|docList
decl_stmt|;
specifier|public
name|LocalIndexWriter
parameter_list|(
name|IndexDefinition
name|definition
parameter_list|)
block|{
name|this
operator|.
name|definition
operator|=
name|definition
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateDocument
parameter_list|(
name|String
name|path
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|addLuceneDoc
argument_list|(
name|LuceneDoc
operator|.
name|forUpdate
argument_list|(
name|definition
operator|.
name|getIndexPathFromConfig
argument_list|()
argument_list|,
name|path
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteDocuments
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
comment|//Hybrid index logic drops the deletes. So no use to
comment|//add them to the list
comment|//addLuceneDoc(LuceneDoc.forDelete(definition.getIndexPathFromConfig(), path));
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|close
parameter_list|(
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
comment|//This is used by testcase
name|commitContext
operator|.
name|set
argument_list|(
name|COMMIT_PROCESSED_BY_LOCAL_LUCENE_EDITOR
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|//always return false as nothing gets written to the index
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|addLuceneDoc
parameter_list|(
name|LuceneDoc
name|luceneDoc
parameter_list|)
block|{
if|if
condition|(
name|docList
operator|==
literal|null
condition|)
block|{
name|docList
operator|=
name|getDocumentHolder
argument_list|()
operator|.
name|getNRTIndexedDocList
argument_list|(
name|indexingContext
operator|.
name|getIndexPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//TODO [hybrid] checks about the size. If too many drop
comment|//However for truly sync case hold on
name|docList
operator|.
name|add
argument_list|(
name|luceneDoc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

