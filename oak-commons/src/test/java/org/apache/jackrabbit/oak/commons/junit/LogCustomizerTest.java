begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|junit
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|matchers
operator|.
name|JUnitMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Level
import|;
end_import

begin_comment
comment|/**  * Tests for the LogCustomizer class  **/
end_comment

begin_class
specifier|public
class|class
name|LogCustomizerTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LogCustomizerTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testLogs1
parameter_list|()
block|{
name|LogCustomizer
name|custom
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
literal|"org.apache.jackrabbit.oak.commons.junit.LogCustomizerTest"
argument_list|)
operator|.
name|enable
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|custom
operator|.
name|starting
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"test message"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logs
init|=
name|custom
operator|.
name|getLogs
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|logs
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"logs were recorded by custom logger"
argument_list|,
name|logs
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"test message"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|custom
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogs2
parameter_list|()
block|{
name|LogCustomizer
name|custom
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
literal|"org.apache.jackrabbit.oak.commons.junit.LogCustomizerTest"
argument_list|)
operator|.
name|enable
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
operator|.
name|filter
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|custom
operator|.
name|starting
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"test message"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logs
init|=
name|custom
operator|.
name|getLogs
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|logs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|custom
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

