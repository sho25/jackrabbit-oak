begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newTreeMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiUtil
operator|.
name|getFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Tracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTrackerCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * OSGi-based whiteboard implementation.  */
end_comment

begin_class
specifier|public
class|class
name|OsgiWhiteboard
implements|implements
name|Whiteboard
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OsgiWhiteboard
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|BundleContext
name|context
decl_stmt|;
specifier|public
name|OsgiWhiteboard
parameter_list|(
annotation|@
name|Nonnull
name|BundleContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|checkNotNull
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Registration
name|register
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
specifier|final
name|T
name|service
parameter_list|,
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|type
operator|.
name|isInstance
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|dictionary
init|=
operator|new
name|Hashtable
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|dictionary
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ServiceRegistration
name|registration
init|=
name|context
operator|.
name|registerService
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|,
name|service
argument_list|,
name|dictionary
argument_list|)
decl_stmt|;
return|return
operator|new
name|Registration
argument_list|()
block|{
specifier|private
specifier|volatile
name|boolean
name|unregistered
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|unregister
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
operator|!
name|unregistered
condition|)
block|{
name|registration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|unregistered
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Service {} of type {} unregistered multiple times"
argument_list|,
name|service
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error unregistering service: {} of type {}"
argument_list|,
name|service
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
comment|/**      * Returns a tracker for services of the given type. The returned tracker      * is optimized for frequent {@link Tracker#getServices()} calls through      * the use of a pre-compiled list of services that's atomically updated      * whenever services are added, modified or removed.      */
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Tracker
argument_list|<
name|T
argument_list|>
name|track
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|track
argument_list|(
name|type
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Tracker
argument_list|<
name|T
argument_list|>
name|track
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filterProperties
parameter_list|)
block|{
return|return
name|track
argument_list|(
name|type
argument_list|,
name|getFilter
argument_list|(
name|type
argument_list|,
name|filterProperties
argument_list|)
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Tracker
argument_list|<
name|T
argument_list|>
name|track
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|AtomicReference
argument_list|<
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|(
name|Collections
operator|.
expr|<
name|T
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ServiceTrackerCustomizer
name|customizer
init|=
operator|new
name|ServiceTrackerCustomizer
argument_list|()
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|ServiceReference
argument_list|,
name|T
argument_list|>
name|services
init|=
name|newHashMap
argument_list|()
decl_stmt|;
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|synchronized
name|Object
name|addingService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|)
block|{
name|Object
name|service
init|=
name|context
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isInstance
argument_list|(
name|service
argument_list|)
condition|)
block|{
name|services
operator|.
name|put
argument_list|(
name|reference
argument_list|,
operator|(
name|T
operator|)
name|service
argument_list|)
expr_stmt|;
name|list
operator|.
name|set
argument_list|(
name|getServiceList
argument_list|(
name|services
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
else|else
block|{
name|context
operator|.
name|ungetService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|synchronized
name|void
name|modifiedService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|,
name|Object
name|service
parameter_list|)
block|{
comment|// TODO: Figure out if the old reference instance
comment|// would automatically reflect the updated properties.
comment|// For now we play it safe by replacing the old key
comment|// with the new reference instance passed as argument.
name|services
operator|.
name|remove
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|services
operator|.
name|put
argument_list|(
name|reference
argument_list|,
operator|(
name|T
operator|)
name|service
argument_list|)
expr_stmt|;
name|list
operator|.
name|set
argument_list|(
name|getServiceList
argument_list|(
name|services
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|removedService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|,
name|Object
name|service
parameter_list|)
block|{
name|services
operator|.
name|remove
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|list
operator|.
name|set
argument_list|(
name|getServiceList
argument_list|(
name|services
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: Note that the service might still be in use
comment|// by some client that called getServices() before
comment|// this method was invoked.
name|context
operator|.
name|ungetService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|final
name|ServiceTracker
name|tracker
init|=
operator|new
name|ServiceTracker
argument_list|(
name|context
argument_list|,
name|filter
argument_list|,
name|customizer
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|open
argument_list|()
expr_stmt|;
return|return
operator|new
name|Tracker
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|getServices
parameter_list|()
block|{
return|return
name|list
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|tracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**      * Utility method that sorts the service objects in the given map      * according to their service rankings and returns the resulting list.      *      * @param services currently available services      * @return ordered list of the services      */
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|getServiceList
parameter_list|(
name|Map
argument_list|<
name|ServiceReference
argument_list|,
name|T
argument_list|>
name|services
parameter_list|)
block|{
switch|switch
condition|(
name|services
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
name|emptyList
argument_list|()
return|;
case|case
literal|1
case|:
return|return
name|singletonList
argument_list|(
name|services
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
return|;
default|default:
name|SortedMap
argument_list|<
name|ServiceReference
argument_list|,
name|T
argument_list|>
name|sorted
init|=
name|newTreeMap
argument_list|()
decl_stmt|;
name|sorted
operator|.
name|putAll
argument_list|(
name|services
argument_list|)
expr_stmt|;
return|return
name|newArrayList
argument_list|(
name|sorted
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

