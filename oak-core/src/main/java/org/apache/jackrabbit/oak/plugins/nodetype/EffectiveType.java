begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|addAll
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|concat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|contains
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_DEFAULTPRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_ISMIXIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MANDATORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_NODETYPENAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
operator|.
name|CONSTRAINT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|UNDEFINED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|UNDEFINEDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_IS_ABSTRACT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_MANDATORY_CHILD_NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_MANDATORY_PROPERTIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_NAMED_CHILD_NODE_DEFINITIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_RESIDUAL_CHILD_NODE_DEFINITIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_SUPERTYPES
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
class|class
name|EffectiveType
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|NodeState
argument_list|>
name|types
decl_stmt|;
name|EffectiveType
parameter_list|(
name|List
argument_list|<
name|NodeState
argument_list|>
name|types
parameter_list|)
block|{
name|this
operator|.
name|types
operator|=
name|checkNotNull
argument_list|(
name|types
argument_list|)
expr_stmt|;
block|}
name|CommitFailedException
name|constraintViolation
parameter_list|(
name|int
name|code
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|message
parameter_list|)
block|{
return|return
operator|new
name|CommitFailedException
argument_list|(
name|CONSTRAINT
argument_list|,
name|code
argument_list|,
name|path
operator|+
name|this
operator|+
literal|": "
operator|+
name|message
argument_list|)
return|;
block|}
comment|/**      * Checks whether this effective type contains the named type.      *      * @param name node type name      * @return {@code true} if the named type is included,      *         {@code false} otherwise      */
name|boolean
name|isNodeType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|NodeState
name|type
range|:
name|types
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getName
argument_list|(
name|JCR_NODETYPENAME
argument_list|)
argument_list|)
operator|||
name|contains
argument_list|(
name|type
operator|.
name|getNames
argument_list|(
name|OAK_SUPERTYPES
argument_list|)
argument_list|,
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
name|boolean
name|isMandatoryProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|nameSetContains
argument_list|(
name|OAK_MANDATORY_PROPERTIES
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
name|Set
argument_list|<
name|String
argument_list|>
name|getMandatoryProperties
parameter_list|()
block|{
return|return
name|getNameSet
argument_list|(
name|OAK_MANDATORY_PROPERTIES
argument_list|)
return|;
block|}
name|boolean
name|isMandatoryChildNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|nameSetContains
argument_list|(
name|OAK_MANDATORY_CHILD_NODES
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
name|Set
argument_list|<
name|String
argument_list|>
name|getMandatoryChildNodes
parameter_list|()
block|{
return|return
name|getNameSet
argument_list|(
name|OAK_MANDATORY_CHILD_NODES
argument_list|)
return|;
block|}
comment|/**      * Finds a matching definition for a property with the given name and type.      *      * @param property modified property      * @return matching property definition, or {@code null}      */
annotation|@
name|CheckForNull
name|NodeState
name|getDefinition
parameter_list|(
name|PropertyState
name|property
parameter_list|)
block|{
name|String
name|propertyName
init|=
name|property
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Type
argument_list|<
name|?
argument_list|>
name|propertyType
init|=
name|property
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|escapedName
decl_stmt|;
if|if
condition|(
name|JCR_PRIMARYTYPE
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|escapedName
operator|=
literal|"oak:primaryType"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|JCR_MIXINTYPES
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|escapedName
operator|=
literal|"oak:mixinTypes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|JCR_UUID
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|escapedName
operator|=
literal|"oak:uuid"
expr_stmt|;
block|}
else|else
block|{
name|escapedName
operator|=
name|propertyName
expr_stmt|;
block|}
name|String
name|definedType
init|=
name|propertyType
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|undefinedType
decl_stmt|;
if|if
condition|(
name|propertyType
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|undefinedType
operator|=
name|UNDEFINEDS
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|undefinedType
operator|=
name|UNDEFINED
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|// Find matching named property definition
for|for
control|(
name|NodeState
name|type
range|:
name|types
control|)
block|{
name|NodeState
name|named
init|=
name|type
operator|.
name|getChildNode
argument_list|(
literal|"oak:namedPropertyDefinitions"
argument_list|)
decl_stmt|;
name|NodeState
name|definitions
init|=
name|named
operator|.
name|getChildNode
argument_list|(
name|escapedName
argument_list|)
decl_stmt|;
name|NodeState
name|definition
init|=
name|definitions
operator|.
name|getChildNode
argument_list|(
name|definedType
argument_list|)
decl_stmt|;
if|if
condition|(
name|definition
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|definition
return|;
block|}
name|definition
operator|=
name|definitions
operator|.
name|getChildNode
argument_list|(
name|undefinedType
argument_list|)
expr_stmt|;
if|if
condition|(
name|definition
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|definition
return|;
block|}
comment|// OAK-822: a mandatory definition always overrides residual ones
comment|// TODO: unnecessary if the OAK-713 fallback wasn't needed below
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|definitions
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|definition
operator|=
name|entry
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
if|if
condition|(
name|definition
operator|.
name|getBoolean
argument_list|(
name|JCR_MANDATORY
argument_list|)
condition|)
block|{
return|return
name|definition
return|;
block|}
block|}
comment|// TODO: Fall back to residual definitions until we have consensus on OAK-713
comment|//          throw new ConstraintViolationException(
comment|//                "No matching definition found for property " + propertyName);
block|}
comment|// Find matching residual property definition
for|for
control|(
name|NodeState
name|type
range|:
name|types
control|)
block|{
name|NodeState
name|residual
init|=
name|type
operator|.
name|getChildNode
argument_list|(
literal|"oak:residualPropertyDefinitions"
argument_list|)
decl_stmt|;
name|NodeState
name|definition
init|=
name|residual
operator|.
name|getChildNode
argument_list|(
name|definedType
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|definition
operator|.
name|exists
argument_list|()
condition|)
block|{
name|definition
operator|=
name|residual
operator|.
name|getChildNode
argument_list|(
name|undefinedType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|definition
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Finds a matching definition for a child node with the given name and      * types.      *      * @param nameWithIndex child node name, possibly with an SNS index      * @param nodeType effective types of the child node      * @return matching child node definition, or {@code null} if not found      */
annotation|@
name|CheckForNull
name|NodeState
name|getDefinition
parameter_list|(
name|String
name|nameWithIndex
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|nodeType
parameter_list|)
block|{
name|String
name|nodeName
init|=
name|getNameWithoutIndex
argument_list|(
name|nameWithIndex
argument_list|)
decl_stmt|;
comment|// Find matching named child node definition
for|for
control|(
name|NodeState
name|type
range|:
name|types
control|)
block|{
name|NodeState
name|named
init|=
name|type
operator|.
name|getChildNode
argument_list|(
literal|"oak:namedChildNodeDefinitions"
argument_list|)
decl_stmt|;
name|NodeState
name|definitions
init|=
name|named
operator|.
name|getChildNode
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|typeName
range|:
name|nodeType
control|)
block|{
name|NodeState
name|definition
init|=
name|definitions
operator|.
name|getChildNode
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|definition
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|definition
return|;
block|}
block|}
comment|// OAK-822: a mandatory definition always overrides alternatives
comment|// TODO: unnecessary if the OAK-713 fallback wasn't needed below
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|definitions
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|NodeState
name|definition
init|=
name|entry
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
if|if
condition|(
name|definition
operator|.
name|getBoolean
argument_list|(
name|JCR_MANDATORY
argument_list|)
condition|)
block|{
return|return
name|definition
return|;
block|}
block|}
comment|// TODO: Fall back to residual definitions until we have consensus on OAK-713
comment|//          throw new ConstraintViolationException(
comment|//                  "Incorrect node type of child node " + nodeName);
block|}
comment|// Find matching residual child node definition
for|for
control|(
name|NodeState
name|type
range|:
name|types
control|)
block|{
name|NodeState
name|residual
init|=
name|type
operator|.
name|getChildNode
argument_list|(
literal|"oak:residualChildNodeDefinitions"
argument_list|)
decl_stmt|;
if|if
condition|(
name|residual
operator|.
name|exists
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|typeName
range|:
name|nodeType
control|)
block|{
name|NodeState
name|definition
init|=
name|residual
operator|.
name|getChildNode
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|definition
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|definition
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Finds the default node type for a child node with the given name.      *      * @param nameWithIndex child node name, possibly with an SNS index      * @return default type, or {@code null} if not found      */
annotation|@
name|CheckForNull
name|String
name|getDefaultType
parameter_list|(
name|String
name|nameWithIndex
parameter_list|)
block|{
name|String
name|name
init|=
name|getNameWithoutIndex
argument_list|(
name|nameWithIndex
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeState
name|type
range|:
name|types
control|)
block|{
name|NodeState
name|named
init|=
name|type
operator|.
name|getChildNode
argument_list|(
name|OAK_NAMED_CHILD_NODE_DEFINITIONS
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|NodeState
name|residual
init|=
name|type
operator|.
name|getChildNode
argument_list|(
name|OAK_RESIDUAL_CHILD_NODE_DEFINITIONS
argument_list|)
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|concat
argument_list|(
name|named
operator|.
name|getChildNodeEntries
argument_list|()
argument_list|,
name|residual
operator|.
name|getChildNodeEntries
argument_list|()
argument_list|)
control|)
block|{
name|NodeState
name|definition
init|=
name|entry
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|String
name|defaultType
init|=
name|definition
operator|.
name|getName
argument_list|(
name|JCR_DEFAULTPRIMARYTYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultType
operator|!=
literal|null
condition|)
block|{
return|return
name|defaultType
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|getTypeNames
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeState
name|type
range|:
name|types
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|type
operator|.
name|getName
argument_list|(
name|JCR_NODETYPENAME
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|names
argument_list|,
name|type
operator|.
name|getNames
argument_list|(
name|OAK_SUPERTYPES
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|names
return|;
block|}
comment|/**      * Collects the primary and mixin types and all related supertypes      * of the given child node and returns them as an effective node type.      *      * @param types the {@code /jcr:system/jcr:nodeTypes} subtree      * @param path path of the parent node      * @param name name of the child node      * @param primary name of the primary type      * @param mixins names of the mixin types      * @throws CommitFailedException if the effective node type is invalid      */
name|EffectiveType
name|computeEffectiveType
parameter_list|(
name|NodeState
name|types
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|primary
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|mixins
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|List
argument_list|<
name|NodeState
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|NodeState
name|type
init|=
name|types
operator|.
name|getChildNode
argument_list|(
name|primary
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|type
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
name|constraintViolation
argument_list|(
literal|11
argument_list|,
name|path
argument_list|,
literal|"The primary type "
operator|+
name|primary
operator|+
literal|" of child node "
operator|+
name|name
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getBoolean
argument_list|(
name|JCR_ISMIXIN
argument_list|)
condition|)
block|{
throw|throw
name|constraintViolation
argument_list|(
literal|12
argument_list|,
name|path
argument_list|,
literal|"Mixin type "
operator|+
name|primary
operator|+
literal|" used as the primary type of child node "
operator|+
name|name
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getBoolean
argument_list|(
name|JCR_IS_ABSTRACT
argument_list|)
condition|)
block|{
throw|throw
name|constraintViolation
argument_list|(
literal|13
argument_list|,
name|path
argument_list|,
literal|"Abstract type "
operator|+
name|primary
operator|+
literal|" used as the primary type of child node "
operator|+
name|name
argument_list|)
throw|;
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
comment|// mixin types
for|for
control|(
name|String
name|mixin
range|:
name|mixins
control|)
block|{
name|type
operator|=
name|types
operator|.
name|getChildNode
argument_list|(
name|mixin
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|type
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
name|constraintViolation
argument_list|(
literal|14
argument_list|,
name|path
argument_list|,
literal|"The mixin type "
operator|+
name|mixin
operator|+
literal|" of child node "
operator|+
name|name
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|type
operator|.
name|getBoolean
argument_list|(
name|JCR_ISMIXIN
argument_list|)
condition|)
block|{
throw|throw
name|constraintViolation
argument_list|(
literal|15
argument_list|,
name|path
argument_list|,
literal|"Primary type "
operator|+
name|mixin
operator|+
literal|" used as a mixin type of child node "
operator|+
name|name
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getBoolean
argument_list|(
name|JCR_IS_ABSTRACT
argument_list|)
condition|)
block|{
throw|throw
name|constraintViolation
argument_list|(
literal|16
argument_list|,
name|path
argument_list|,
literal|"Abstract type "
operator|+
name|mixin
operator|+
literal|" used as a mixin type of child node "
operator|+
name|name
argument_list|)
throw|;
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|EffectiveType
argument_list|(
name|list
argument_list|)
return|;
block|}
comment|//------------------------------------------------------------< Object>--
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|newArrayListWithCapacity
argument_list|(
name|types
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeState
name|type
range|:
name|types
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|type
operator|.
name|getName
argument_list|(
name|JCR_NODETYPENAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|names
operator|.
name|toString
argument_list|()
return|;
block|}
comment|//-----------------------------------------------------------< private>--
specifier|private
specifier|static
name|String
name|getNameWithoutIndex
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|n
init|=
name|name
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|>
literal|3
operator|&&
name|name
operator|.
name|charAt
argument_list|(
name|n
operator|-
literal|1
argument_list|)
operator|==
literal|']'
condition|)
block|{
name|int
name|i
init|=
name|n
operator|-
literal|2
decl_stmt|;
while|while
condition|(
name|i
operator|>
literal|1
operator|&&
name|Character
operator|.
name|isDigit
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|i
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'['
condition|)
block|{
return|return
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
return|;
block|}
block|}
return|return
name|name
return|;
block|}
specifier|private
name|boolean
name|nameSetContains
parameter_list|(
name|String
name|set
parameter_list|,
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|NodeState
name|type
range|:
name|types
control|)
block|{
if|if
condition|(
name|contains
argument_list|(
name|type
operator|.
name|getNames
argument_list|(
name|set
argument_list|)
argument_list|,
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getNameSet
parameter_list|(
name|String
name|set
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeState
name|type
range|:
name|types
control|)
block|{
name|addAll
argument_list|(
name|names
argument_list|,
name|type
operator|.
name|getNames
argument_list|(
name|set
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|names
return|;
block|}
block|}
end_class

end_unit

