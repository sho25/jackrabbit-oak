begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|hybrid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|LuceneDocumentHolder
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LuceneDocumentHolder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"oak.lucene.documentHolder"
decl_stmt|;
specifier|private
specifier|final
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|LuceneDoc
argument_list|>
name|nrtIndexedList
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|LuceneDoc
argument_list|>
name|syncIndexedList
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|inMemoryDocsLimit
decl_stmt|;
specifier|private
name|boolean
name|limitWarningLogged
decl_stmt|;
specifier|public
name|LuceneDocumentHolder
parameter_list|()
block|{
name|this
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LuceneDocumentHolder
parameter_list|(
name|int
name|inMemoryDocsLimit
parameter_list|)
block|{
name|this
operator|.
name|inMemoryDocsLimit
operator|=
name|inMemoryDocsLimit
expr_stmt|;
block|}
specifier|public
name|Iterable
argument_list|<
name|LuceneDoc
argument_list|>
name|getNRTIndexedDocs
parameter_list|()
block|{
return|return
name|nrtIndexedList
operator|.
name|values
argument_list|()
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|LuceneDoc
argument_list|>
argument_list|>
name|getSyncIndexedDocs
parameter_list|()
block|{
return|return
name|syncIndexedList
operator|.
name|asMap
argument_list|()
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|boolean
name|sync
parameter_list|,
name|LuceneDoc
name|doc
parameter_list|)
block|{
if|if
condition|(
name|sync
condition|)
block|{
name|getSyncIndexedDocList
argument_list|(
name|doc
operator|.
name|indexPath
argument_list|)
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|queueSizeWithinLimits
argument_list|()
condition|)
block|{
name|getNRTIndexedDocList
argument_list|(
name|doc
operator|.
name|indexPath
argument_list|)
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|done
parameter_list|(
name|String
name|indexPath
parameter_list|)
block|{      }
name|List
argument_list|<
name|LuceneDoc
argument_list|>
name|getNRTIndexedDocList
parameter_list|(
name|String
name|indexPath
parameter_list|)
block|{
return|return
name|nrtIndexedList
operator|.
name|get
argument_list|(
name|indexPath
argument_list|)
return|;
block|}
name|List
argument_list|<
name|LuceneDoc
argument_list|>
name|getSyncIndexedDocList
parameter_list|(
name|String
name|indexPath
parameter_list|)
block|{
return|return
name|syncIndexedList
operator|.
name|get
argument_list|(
name|indexPath
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|queueSizeWithinLimits
parameter_list|()
block|{
if|if
condition|(
name|nrtIndexedList
operator|.
name|size
argument_list|()
operator|>=
name|inMemoryDocsLimit
condition|)
block|{
if|if
condition|(
operator|!
name|limitWarningLogged
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Number of in memory documents meant for hybrid indexing has "
operator|+
literal|"exceeded limit [{}]. Some documents would be dropped"
argument_list|,
name|inMemoryDocsLimit
argument_list|)
expr_stmt|;
name|limitWarningLogged
operator|=
literal|true
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

