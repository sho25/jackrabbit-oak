begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * Helper class to handle modifications to the hidden  * {@link org.apache.jackrabbit.oak.core.TreeImpl#OAK_CHILD_ORDER} property.  */
end_comment

begin_class
class|class
name|ChildOrderDiff
block|{
specifier|private
specifier|final
name|PropertyState
name|before
decl_stmt|;
specifier|private
specifier|final
name|PropertyState
name|after
decl_stmt|;
name|ChildOrderDiff
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|this
operator|.
name|before
operator|=
name|before
expr_stmt|;
name|this
operator|.
name|after
operator|=
name|after
expr_stmt|;
block|}
comment|/**      * Tests if there was any user-supplied reordering involved with the      * modification of the {@link org.apache.jackrabbit.oak.core.TreeImpl#OAK_CHILD_ORDER}      * property.      *      * @return the name of the first reordered child if any user-supplied node      * reorder happened; {@code null} otherwise.      */
annotation|@
name|CheckForNull
name|String
name|firstReordered
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|beforeNames
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|before
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|afterNames
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|after
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
argument_list|)
decl_stmt|;
comment|// remove elements from before that have been deleted
name|beforeNames
operator|.
name|retainAll
argument_list|(
name|afterNames
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|beforeNames
operator|.
name|size
argument_list|()
operator|&&
name|i
operator|<
name|afterNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|bName
init|=
name|beforeNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|aName
init|=
name|afterNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bName
operator|.
name|equals
argument_list|(
name|aName
argument_list|)
condition|)
block|{
return|return
name|aName
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns the names of all reordered nodes present in the 'after' property.      *      * @return      */
annotation|@
name|Nonnull
name|List
argument_list|<
name|String
argument_list|>
name|getReordered
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|beforeNames
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|before
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|afterNames
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|after
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
argument_list|)
decl_stmt|;
comment|// remove elements from before that have been deleted
name|beforeNames
operator|.
name|retainAll
argument_list|(
name|afterNames
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|reordered
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|afterNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|aName
init|=
name|afterNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|beforeNames
operator|.
name|indexOf
argument_list|(
name|aName
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
operator|&&
name|index
operator|!=
name|i
condition|)
block|{
name|reordered
operator|.
name|add
argument_list|(
name|aName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|reordered
return|;
block|}
block|}
end_class

end_unit

