begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|configuration
operator|.
name|EmbeddedSolrServerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|configuration
operator|.
name|SolrServerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|configuration
operator|.
name|SolrServerConfigurationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_comment
comment|/**  * An Oak {@link org.apache.solr.client.solrj.SolrServer}, caching a {@link org.apache.jackrabbit.oak.plugins.index.solr.server.SolrServerProvider}  * for dispatching requests to indexing or searching specialized {@link org.apache.solr.client.solrj.SolrServer}s.  */
end_comment

begin_class
specifier|public
class|class
name|OakSolrServer
extends|extends
name|SolrServer
block|{
specifier|private
specifier|final
name|SolrServerConfiguration
name|solrServerConfiguration
decl_stmt|;
specifier|private
specifier|final
name|SolrServerProvider
name|solrServerProvider
decl_stmt|;
specifier|public
name|OakSolrServer
parameter_list|(
annotation|@
name|NotNull
name|SolrServerConfigurationProvider
name|solrServerConfigurationProvider
parameter_list|)
block|{
name|this
operator|.
name|solrServerConfiguration
operator|=
name|solrServerConfigurationProvider
operator|.
name|getSolrServerConfiguration
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|solrServerProvider
operator|=
name|solrServerConfiguration
operator|.
name|getProvider
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|NamedList
argument_list|<
name|Object
argument_list|>
name|request
parameter_list|(
name|SolrRequest
name|request
parameter_list|,
name|String
name|collection
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
try|try
block|{
name|SolrClient
name|server
init|=
name|getServer
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|server
operator|.
name|request
argument_list|(
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrServerException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|synchronized
name|SolrClient
name|getServer
parameter_list|(
name|SolrRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|isIndex
init|=
name|request
operator|.
name|getPath
argument_list|()
operator|.
name|contains
argument_list|(
literal|"/update"
argument_list|)
decl_stmt|;
name|SolrServerRegistry
operator|.
name|Strategy
name|strategy
init|=
name|isIndex
condition|?
name|SolrServerRegistry
operator|.
name|Strategy
operator|.
name|INDEXING
else|:
name|SolrServerRegistry
operator|.
name|Strategy
operator|.
name|SEARCHING
decl_stmt|;
name|SolrClient
name|solrServer
init|=
name|SolrServerRegistry
operator|.
name|get
argument_list|(
name|solrServerConfiguration
argument_list|,
name|strategy
argument_list|)
decl_stmt|;
if|if
condition|(
name|solrServer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|solrServerConfiguration
operator|instanceof
name|EmbeddedSolrServerConfiguration
condition|)
block|{
name|solrServer
operator|=
name|solrServerProvider
operator|.
name|getSolrServer
argument_list|()
expr_stmt|;
comment|// the same Solr server has to be used for both
name|SolrServerRegistry
operator|.
name|register
argument_list|(
name|solrServerConfiguration
argument_list|,
name|solrServer
argument_list|,
name|SolrServerRegistry
operator|.
name|Strategy
operator|.
name|INDEXING
argument_list|)
expr_stmt|;
name|SolrServerRegistry
operator|.
name|register
argument_list|(
name|solrServerConfiguration
argument_list|,
name|solrServer
argument_list|,
name|SolrServerRegistry
operator|.
name|Strategy
operator|.
name|SEARCHING
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|solrServer
operator|=
name|isIndex
condition|?
name|solrServerProvider
operator|.
name|getIndexingSolrServer
argument_list|()
else|:
name|solrServerProvider
operator|.
name|getSearchingSolrServer
argument_list|()
expr_stmt|;
name|SolrServerRegistry
operator|.
name|register
argument_list|(
name|solrServerConfiguration
argument_list|,
name|solrServer
argument_list|,
name|strategy
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|solrServer
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
try|try
block|{
name|solrServerProvider
operator|.
name|close
argument_list|()
expr_stmt|;
name|SolrServerRegistry
operator|.
name|unregister
argument_list|(
name|solrServerConfiguration
argument_list|,
name|SolrServerRegistry
operator|.
name|Strategy
operator|.
name|INDEXING
argument_list|)
expr_stmt|;
name|SolrServerRegistry
operator|.
name|unregister
argument_list|(
name|solrServerConfiguration
argument_list|,
name|SolrServerRegistry
operator|.
name|Strategy
operator|.
name|SEARCHING
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"OakSolrServer{"
operator|+
literal|"solrServerConfiguration="
operator|+
name|solrServerConfiguration
operator|+
literal|", solrServerProvider="
operator|+
name|solrServerProvider
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

