begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|SimpleType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|TreeTraverser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|AnnotatedStandardMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|Name
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|BadIndexTracker
operator|.
name|BadIndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LucenePropertyIndex
operator|.
name|PathStoredFieldVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|NumericRangeQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|humanReadableByteCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexDefinition
operator|.
name|INDEX_DEFINITION_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|TermFactory
operator|.
name|newAncestorTerm
import|;
end_import

begin_class
specifier|public
class|class
name|LuceneIndexMBeanImpl
extends|extends
name|AnnotatedStandardMBean
implements|implements
name|LuceneIndexMBean
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|IndexTracker
name|indexTracker
decl_stmt|;
specifier|public
name|LuceneIndexMBeanImpl
parameter_list|(
name|IndexTracker
name|indexTracker
parameter_list|)
block|{
name|super
argument_list|(
name|LuceneIndexMBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexTracker
operator|=
name|indexTracker
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TabularData
name|getIndexStats
parameter_list|()
throws|throws
name|IOException
block|{
name|TabularDataSupport
name|tds
decl_stmt|;
try|try
block|{
name|TabularType
name|tt
init|=
operator|new
name|TabularType
argument_list|(
name|LuceneIndexMBeanImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Lucene Index Stats"
argument_list|,
name|IndexStats
operator|.
name|TYPE
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"path"
block|}
argument_list|)
decl_stmt|;
name|tds
operator|=
operator|new
name|TabularDataSupport
argument_list|(
name|tt
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|indexes
init|=
name|indexTracker
operator|.
name|getIndexNodePaths
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|indexes
control|)
block|{
name|IndexNode
name|indexNode
init|=
literal|null
decl_stmt|;
try|try
block|{
name|indexNode
operator|=
name|indexTracker
operator|.
name|acquireIndexNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexNode
operator|!=
literal|null
condition|)
block|{
name|IndexStats
name|stats
init|=
operator|new
name|IndexStats
argument_list|(
name|path
argument_list|,
name|indexNode
operator|.
name|getSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|,
name|indexNode
operator|.
name|getSuggestDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|tds
operator|.
name|put
argument_list|(
name|stats
operator|.
name|toCompositeData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|indexNode
operator|!=
literal|null
condition|)
block|{
name|indexNode
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|tds
return|;
block|}
annotation|@
name|Override
specifier|public
name|TabularData
name|getBadIndexStats
parameter_list|()
block|{
name|TabularDataSupport
name|tds
decl_stmt|;
try|try
block|{
name|TabularType
name|tt
init|=
operator|new
name|TabularType
argument_list|(
name|LuceneIndexMBeanImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Lucene Bad Index Stats"
argument_list|,
name|BadIndexStats
operator|.
name|TYPE
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"path"
block|}
argument_list|)
decl_stmt|;
name|tds
operator|=
operator|new
name|TabularDataSupport
argument_list|(
name|tt
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|indexes
init|=
name|indexTracker
operator|.
name|getBadIndexTracker
argument_list|()
operator|.
name|getIndexPaths
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|indexes
control|)
block|{
name|BadIndexInfo
name|info
init|=
name|indexTracker
operator|.
name|getBadIndexTracker
argument_list|()
operator|.
name|getInfo
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|BadIndexStats
name|stats
init|=
operator|new
name|BadIndexStats
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|tds
operator|.
name|put
argument_list|(
name|stats
operator|.
name|toCompositeData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|tds
return|;
block|}
annotation|@
name|Override
specifier|public
name|TabularData
name|getBadPersistedIndexStats
parameter_list|()
block|{
name|TabularDataSupport
name|tds
decl_stmt|;
try|try
block|{
name|TabularType
name|tt
init|=
operator|new
name|TabularType
argument_list|(
name|LuceneIndexMBeanImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Lucene Bad Persisted Index Stats"
argument_list|,
name|BadIndexStats
operator|.
name|TYPE
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"path"
block|}
argument_list|)
decl_stmt|;
name|tds
operator|=
operator|new
name|TabularDataSupport
argument_list|(
name|tt
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|indexes
init|=
name|indexTracker
operator|.
name|getBadIndexTracker
argument_list|()
operator|.
name|getBadPersistedIndexPaths
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|indexes
control|)
block|{
name|BadIndexInfo
name|info
init|=
name|indexTracker
operator|.
name|getBadIndexTracker
argument_list|()
operator|.
name|getPersistedIndexInfo
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|BadIndexStats
name|stats
init|=
operator|new
name|BadIndexStats
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|tds
operator|.
name|put
argument_list|(
name|stats
operator|.
name|toCompositeData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|tds
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFailing
parameter_list|()
block|{
return|return
name|indexTracker
operator|.
name|getBadIndexTracker
argument_list|()
operator|.
name|hasBadIndexes
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getIndexedPaths
parameter_list|(
name|String
name|indexPath
parameter_list|,
name|int
name|maxLevel
parameter_list|,
name|int
name|maxPathCount
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexNode
name|indexNode
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|indexPath
operator|==
literal|null
condition|)
block|{
name|indexPath
operator|=
literal|"/"
expr_stmt|;
block|}
name|indexNode
operator|=
name|indexTracker
operator|.
name|acquireIndexNode
argument_list|(
name|indexPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexNode
operator|!=
literal|null
condition|)
block|{
name|IndexDefinition
name|defn
init|=
name|indexNode
operator|.
name|getDefinition
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|defn
operator|.
name|evaluatePathRestrictions
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Index at [%s] does not have [%s] enabled. So paths statistics cannot "
operator|+
literal|"be determined for this index"
argument_list|,
name|indexPath
argument_list|,
name|LuceneIndexConstants
operator|.
name|EVALUATE_PATH_RESTRICTION
argument_list|)
decl_stmt|;
return|return
name|createMsg
argument_list|(
name|msg
argument_list|)
return|;
block|}
name|IndexSearcher
name|searcher
init|=
name|indexNode
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
return|return
name|determineIndexedPaths
argument_list|(
name|searcher
argument_list|,
name|maxLevel
argument_list|,
name|maxPathCount
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|indexNode
operator|!=
literal|null
condition|)
block|{
name|indexNode
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getFieldInfo
parameter_list|(
name|String
name|indexPath
parameter_list|)
throws|throws
name|IOException
block|{
name|TreeSet
argument_list|<
name|String
argument_list|>
name|indexes
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexPath
operator|==
literal|null
operator|||
name|indexPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|indexes
operator|.
name|addAll
argument_list|(
name|indexTracker
operator|.
name|getIndexNodePaths
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexes
operator|.
name|add
argument_list|(
name|indexPath
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|indexes
control|)
block|{
name|IndexNode
name|indexNode
init|=
literal|null
decl_stmt|;
try|try
block|{
name|indexNode
operator|=
name|indexTracker
operator|.
name|acquireIndexNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexNode
operator|!=
literal|null
condition|)
block|{
name|IndexSearcher
name|searcher
init|=
name|indexNode
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|getFieldInfo
argument_list|(
name|path
argument_list|,
name|searcher
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|indexNode
operator|!=
literal|null
condition|)
block|{
name|indexNode
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStoredIndexDefinition
parameter_list|(
annotation|@
name|Name
argument_list|(
literal|"indexPath"
argument_list|)
name|String
name|indexPath
parameter_list|)
block|{
name|IndexDefinition
name|defn
init|=
name|indexTracker
operator|.
name|getIndexDefinition
argument_list|(
name|indexPath
argument_list|)
decl_stmt|;
name|NodeState
name|state
decl_stmt|;
if|if
condition|(
name|defn
operator|!=
literal|null
condition|)
block|{
name|state
operator|=
name|defn
operator|.
name|getDefinitionNodeState
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|indexTracker
operator|.
name|getRoot
argument_list|()
argument_list|,
name|indexPath
operator|+
literal|"/"
operator|+
name|INDEX_DEFINITION_NODE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|NodeStateUtils
operator|.
name|toString
argument_list|(
name|state
argument_list|)
return|;
block|}
return|return
literal|"No index found at given path"
return|;
block|}
specifier|public
name|void
name|dumpIndexContent
parameter_list|(
name|String
name|sourcePath
parameter_list|,
name|String
name|destPath
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexNode
name|indexNode
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|sourcePath
operator|==
literal|null
condition|)
block|{
name|sourcePath
operator|=
literal|"/"
expr_stmt|;
block|}
name|indexNode
operator|=
name|indexTracker
operator|.
name|acquireIndexNode
argument_list|(
name|sourcePath
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexNode
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Dumping Lucene directory content for [{}] to [{}]"
argument_list|,
name|sourcePath
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
name|Directory
name|source
init|=
name|getDirectory
argument_list|(
name|indexNode
operator|.
name|getSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
name|checkNotNull
argument_list|(
name|source
argument_list|,
literal|"IndexSearcher not backed by DirectoryReader"
argument_list|)
expr_stmt|;
name|Directory
name|dest
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
operator|new
name|File
argument_list|(
name|destPath
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|source
operator|.
name|listAll
argument_list|()
control|)
block|{
name|source
operator|.
name|copy
argument_list|(
name|dest
argument_list|,
name|file
argument_list|,
name|file
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|indexNode
operator|!=
literal|null
condition|)
block|{
name|indexNode
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|String
argument_list|>
name|getFieldInfo
parameter_list|(
name|String
name|path
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|IndexReader
name|reader
init|=
name|searcher
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
name|Fields
name|fields
init|=
name|MultiFields
operator|.
name|getFields
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|f
range|:
name|fields
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|path
operator|+
literal|" "
operator|+
name|f
operator|+
literal|" "
operator|+
name|reader
operator|.
name|getDocCount
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|determineIndexedPaths
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
specifier|final
name|int
name|maxLevel
parameter_list|,
name|int
name|maxPathCount
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|int
name|startDepth
init|=
name|getStartDepth
argument_list|(
name|searcher
argument_list|,
name|maxLevel
argument_list|)
decl_stmt|;
if|if
condition|(
name|startDepth
operator|<
literal|0
condition|)
block|{
return|return
name|createMsg
argument_list|(
literal|"startDepth cannot be determined after search for upto maxLevel ["
operator|+
name|maxLevel
operator|+
literal|"]"
argument_list|)
return|;
block|}
name|SearchContext
name|sc
init|=
operator|new
name|SearchContext
argument_list|(
name|searcher
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LuceneDoc
argument_list|>
name|docs
init|=
name|getDocsAtLevel
argument_list|(
name|startDepth
argument_list|,
name|sc
argument_list|)
decl_stmt|;
name|int
name|maxPathLimitBreachedAtLevel
init|=
operator|-
literal|1
decl_stmt|;
name|topLevel
label|:
for|for
control|(
name|LuceneDoc
name|doc
range|:
name|docs
control|)
block|{
name|TreeTraverser
argument_list|<
name|LuceneDoc
argument_list|>
name|traverser
init|=
operator|new
name|TreeTraverser
argument_list|<
name|LuceneDoc
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|LuceneDoc
argument_list|>
name|children
parameter_list|(
annotation|@
name|Nonnull
name|LuceneDoc
name|root
parameter_list|)
block|{
comment|//Break at maxLevel
if|if
condition|(
name|root
operator|.
name|depth
operator|>=
name|maxLevel
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
name|root
operator|.
name|getChildren
argument_list|()
return|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|LuceneDoc
name|node
range|:
name|traverser
operator|.
name|breadthFirstTraversal
argument_list|(
name|doc
argument_list|)
control|)
block|{
if|if
condition|(
name|paths
operator|.
name|size
argument_list|()
operator|<
name|maxPathCount
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|node
operator|.
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|maxPathLimitBreachedAtLevel
operator|=
name|node
operator|.
name|depth
expr_stmt|;
break|break
name|topLevel
break|;
block|}
block|}
block|}
if|if
condition|(
name|maxPathLimitBreachedAtLevel
operator|<
literal|0
condition|)
block|{
return|return
name|Iterables
operator|.
name|toArray
argument_list|(
name|paths
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
comment|//If max limit for path is reached then we can safely
comment|//say about includedPaths upto depth = level at which limit reached - 1
comment|//As for that level we know *all* the path roots
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|int
name|safeDepth
init|=
name|maxPathLimitBreachedAtLevel
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|safeDepth
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|int
name|pathDepth
init|=
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathDepth
operator|==
name|safeDepth
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|Iterables
operator|.
name|toArray
argument_list|(
name|result
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * Look for the startDepth. An index might have dat only at paths like /a/b/c so      * to determine the start depth which needs to be used for query we need to find      * out depth at which we start getting any entry      */
specifier|private
specifier|static
name|int
name|getStartDepth
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|int
name|maxLevel
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|depth
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|depth
operator|<
name|maxLevel
condition|)
block|{
comment|//Confirm if we have any hit at current depth
name|TopDocs
name|docs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|newDepthQuery
argument_list|(
name|depth
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|docs
operator|.
name|totalHits
operator|!=
literal|0
condition|)
block|{
return|return
name|depth
return|;
block|}
name|depth
operator|++
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|LuceneDoc
argument_list|>
name|getDocsAtLevel
parameter_list|(
name|int
name|startDepth
parameter_list|,
name|SearchContext
name|sc
parameter_list|)
throws|throws
name|IOException
block|{
name|TopDocs
name|docs
init|=
name|sc
operator|.
name|searcher
operator|.
name|search
argument_list|(
name|newDepthQuery
argument_list|(
name|startDepth
argument_list|)
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
return|return
name|getLuceneDocs
argument_list|(
name|docs
argument_list|,
name|sc
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|SearchContext
block|{
specifier|final
name|IndexSearcher
name|searcher
decl_stmt|;
name|SearchContext
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|)
block|{
name|this
operator|.
name|searcher
operator|=
name|searcher
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|LuceneDoc
block|{
specifier|final
name|String
name|path
decl_stmt|;
specifier|final
name|SearchContext
name|sc
decl_stmt|;
specifier|final
name|int
name|depth
decl_stmt|;
specifier|public
name|LuceneDoc
parameter_list|(
name|String
name|path
parameter_list|,
name|SearchContext
name|sc
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|sc
operator|=
name|sc
expr_stmt|;
name|this
operator|.
name|depth
operator|=
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Iterable
argument_list|<
name|LuceneDoc
argument_list|>
name|getChildren
parameter_list|()
block|{
comment|//Perform a query for immediate child nodes at given path
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|newAncestorTerm
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|newDepthQuery
argument_list|(
name|path
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|TopDocs
name|docs
init|=
name|sc
operator|.
name|searcher
operator|.
name|search
argument_list|(
name|bq
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
return|return
name|getLuceneDocs
argument_list|(
name|docs
argument_list|,
name|sc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|LuceneDoc
argument_list|>
name|getLuceneDocs
parameter_list|(
name|TopDocs
name|docs
parameter_list|,
name|SearchContext
name|sc
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|LuceneDoc
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|LuceneDoc
argument_list|>
argument_list|(
name|docs
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
decl_stmt|;
name|IndexReader
name|reader
init|=
name|sc
operator|.
name|searcher
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
for|for
control|(
name|ScoreDoc
name|doc
range|:
name|docs
operator|.
name|scoreDocs
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|LuceneDoc
argument_list|(
name|getPath
argument_list|(
name|reader
argument_list|,
name|doc
argument_list|)
argument_list|,
name|sc
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|String
name|getPath
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|ScoreDoc
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|PathStoredFieldVisitor
name|visitor
init|=
operator|new
name|PathStoredFieldVisitor
argument_list|()
decl_stmt|;
name|reader
operator|.
name|document
argument_list|(
name|doc
operator|.
name|doc
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
return|return
name|visitor
operator|.
name|getPath
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|Query
name|newDepthQuery
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|int
name|depth
init|=
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|path
argument_list|)
operator|+
literal|1
decl_stmt|;
return|return
name|newDepthQuery
argument_list|(
name|depth
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Query
name|newDepthQuery
parameter_list|(
name|int
name|depth
parameter_list|)
block|{
return|return
name|NumericRangeQuery
operator|.
name|newIntRange
argument_list|(
name|FieldNames
operator|.
name|PATH_DEPTH
argument_list|,
name|depth
argument_list|,
name|depth
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|createMsg
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
return|return
operator|new
name|String
index|[]
block|{
name|msg
block|}
return|;
block|}
specifier|private
specifier|static
class|class
name|IndexStats
block|{
specifier|static
specifier|final
name|String
index|[]
name|FIELD_NAMES
init|=
operator|new
name|String
index|[]
block|{
literal|"path"
block|,
literal|"indexSizeStr"
block|,
literal|"indexSize"
block|,
literal|"suggesterSizeStr"
block|,
literal|"suggesterSize"
block|,
literal|"numDocs"
block|,
literal|"maxDoc"
block|,
literal|"numDeletedDocs"
block|,         }
decl_stmt|;
specifier|static
specifier|final
name|String
index|[]
name|FIELD_DESCRIPTIONS
init|=
operator|new
name|String
index|[]
block|{
literal|"Path"
block|,
literal|"Index size in human readable format"
block|,
literal|"Index size in bytes"
block|,
literal|"Suggester size in human readable format"
block|,
literal|"Suggester size in bytes"
block|,
literal|"Number of documents in this index."
block|,
literal|"The time and date for when the longest query took place"
block|,
literal|"Number of deleted documents"
block|,         }
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|static
specifier|final
name|OpenType
index|[]
name|FIELD_TYPES
init|=
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|INTEGER
block|,
name|SimpleType
operator|.
name|INTEGER
block|,
name|SimpleType
operator|.
name|INTEGER
block|,         }
decl_stmt|;
specifier|static
specifier|final
name|CompositeType
name|TYPE
init|=
name|createCompositeType
argument_list|()
decl_stmt|;
specifier|static
name|CompositeType
name|createCompositeType
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|CompositeType
argument_list|(
name|IndexStats
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Composite data type for Lucene Index statistics"
argument_list|,
name|IndexStats
operator|.
name|FIELD_NAMES
argument_list|,
name|IndexStats
operator|.
name|FIELD_DESCRIPTIONS
argument_list|,
name|IndexStats
operator|.
name|FIELD_TYPES
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|long
name|indexSize
decl_stmt|;
specifier|private
specifier|final
name|int
name|numDocs
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
specifier|private
specifier|final
name|int
name|numDeletedDocs
decl_stmt|;
specifier|private
specifier|final
name|String
name|indexSizeStr
decl_stmt|;
specifier|private
specifier|final
name|long
name|suggesterSize
decl_stmt|;
specifier|private
specifier|final
name|String
name|suggesterSizeStr
decl_stmt|;
specifier|public
name|IndexStats
parameter_list|(
name|String
name|path
parameter_list|,
name|IndexReader
name|indexReader
parameter_list|,
annotation|@
name|Nullable
name|Directory
name|suggestDirectory
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|numDocs
operator|=
name|indexReader
operator|.
name|numDocs
argument_list|()
expr_stmt|;
name|maxDoc
operator|=
name|indexReader
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
name|numDeletedDocs
operator|=
name|indexReader
operator|.
name|numDeletedDocs
argument_list|()
expr_stmt|;
name|indexSize
operator|=
name|dirSize
argument_list|(
name|getDirectory
argument_list|(
name|indexReader
argument_list|)
argument_list|)
expr_stmt|;
name|indexSizeStr
operator|=
name|humanReadableByteCount
argument_list|(
name|indexSize
argument_list|)
expr_stmt|;
name|suggesterSize
operator|=
name|dirSize
argument_list|(
name|suggestDirectory
argument_list|)
expr_stmt|;
name|suggesterSizeStr
operator|=
name|humanReadableByteCount
argument_list|(
name|suggesterSize
argument_list|)
expr_stmt|;
block|}
name|CompositeDataSupport
name|toCompositeData
parameter_list|()
block|{
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[]
block|{
name|path
block|,
name|indexSizeStr
block|,
name|indexSize
block|,
name|suggesterSizeStr
block|,
name|suggesterSize
block|,
name|numDocs
block|,
name|maxDoc
block|,
name|numDeletedDocs
block|}
decl_stmt|;
try|try
block|{
return|return
operator|new
name|CompositeDataSupport
argument_list|(
name|TYPE
argument_list|,
name|FIELD_NAMES
argument_list|,
name|values
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|BadIndexStats
block|{
specifier|static
specifier|final
name|String
index|[]
name|FIELD_NAMES
init|=
operator|new
name|String
index|[]
block|{
literal|"path"
block|,
literal|"stats"
block|,
literal|"failingSince"
block|,
literal|"exception"
block|}
decl_stmt|;
specifier|static
specifier|final
name|String
index|[]
name|FIELD_DESCRIPTIONS
init|=
operator|new
name|String
index|[]
block|{
literal|"Path"
block|,
literal|"Failure stats"
block|,
literal|"Failure start time"
block|,
literal|"Exception"
block|}
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|static
specifier|final
name|OpenType
index|[]
name|FIELD_TYPES
init|=
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,         }
decl_stmt|;
specifier|static
specifier|final
name|CompositeType
name|TYPE
init|=
name|createCompositeType
argument_list|()
decl_stmt|;
specifier|static
name|CompositeType
name|createCompositeType
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|CompositeType
argument_list|(
name|BadIndexStats
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Composite data type for Lucene Bad Index statistics"
argument_list|,
name|BadIndexStats
operator|.
name|FIELD_NAMES
argument_list|,
name|BadIndexStats
operator|.
name|FIELD_DESCRIPTIONS
argument_list|,
name|BadIndexStats
operator|.
name|FIELD_TYPES
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|final
name|BadIndexInfo
name|info
decl_stmt|;
specifier|public
name|BadIndexStats
parameter_list|(
name|BadIndexInfo
name|info
parameter_list|)
block|{
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
block|}
name|CompositeDataSupport
name|toCompositeData
parameter_list|()
block|{
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[]
block|{
name|info
operator|.
name|path
block|,
name|info
operator|.
name|getStats
argument_list|()
block|,
name|String
operator|.
name|format
argument_list|(
literal|"%tc"
argument_list|,
name|info
operator|.
name|getCreatedTime
argument_list|()
argument_list|)
block|,
name|info
operator|.
name|getException
argument_list|()
block|,             }
decl_stmt|;
try|try
block|{
return|return
operator|new
name|CompositeDataSupport
argument_list|(
name|TYPE
argument_list|,
name|FIELD_NAMES
argument_list|,
name|values
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|//~---------------------------------------------------------< Internal>
specifier|private
specifier|static
name|Directory
name|getDirectory
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|instanceof
name|DirectoryReader
condition|)
block|{
return|return
operator|(
operator|(
name|DirectoryReader
operator|)
name|reader
operator|)
operator|.
name|directory
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|long
name|dirSize
parameter_list|(
name|Directory
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|totalFileSize
init|=
literal|0L
decl_stmt|;
if|if
condition|(
name|directory
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|String
index|[]
name|files
init|=
name|directory
operator|.
name|listAll
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
return|return
name|totalFileSize
return|;
block|}
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|totalFileSize
operator|+=
name|directory
operator|.
name|fileLength
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
return|return
name|totalFileSize
return|;
block|}
block|}
end_class

end_unit

