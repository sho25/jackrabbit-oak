begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|observation
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|NODE_REMOVED
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|observation
operator|.
name|JackrabbitEventFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|observation
operator|.
name|filter
operator|.
name|OakEventFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|TypePredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|ConstantFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|EventAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|EventFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|FilterBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|FilterBuilder
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|Filters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|GlobbingPathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|GlobbingPathHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|PermissionProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implements OakEventFilter which is an extension to the JackrabbitEventFilter  * with features only supported by Oak.  */
end_comment

begin_class
specifier|public
class|class
name|OakEventFilterImpl
extends|extends
name|OakEventFilter
block|{
specifier|static
class|class
name|NodeTypeAggregationFilter
implements|implements
name|EventFilter
implements|,
name|Condition
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Pattern
argument_list|>
name|patternMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Pattern
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|nodeTypes
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|relativeGlobPaths
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|includeThis
decl_stmt|;
specifier|private
name|TypePredicate
name|predicate
decl_stmt|;
name|NodeTypeAggregationFilter
parameter_list|(
name|String
index|[]
name|nodeTypes
parameter_list|,
name|String
index|[]
name|relativeGlobPaths
parameter_list|)
block|{
name|this
operator|.
name|nodeTypes
operator|=
name|nodeTypes
expr_stmt|;
name|this
operator|.
name|relativeGlobPaths
operator|=
name|relativeGlobPaths
expr_stmt|;
name|boolean
name|includeThis
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|aRelativeGlobPath
range|:
name|relativeGlobPaths
control|)
block|{
if|if
condition|(
name|aRelativeGlobPath
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|||
name|aRelativeGlobPath
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
operator|||
name|aRelativeGlobPath
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
operator|||
name|aRelativeGlobPath
operator|.
name|equals
argument_list|(
literal|"**"
argument_list|)
condition|)
block|{
name|includeThis
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|this
operator|.
name|includeThis
operator|=
name|includeThis
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|includeAdd
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
comment|// the AggregateFilter 'waits' for the first hit based on nodeTypes
comment|// at which point it switches to a GlobbingPathFilter - so property
comment|// changes will be handled in the GlobbingPathFilter, never here.
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|includeChange
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
comment|// the AggregateFilter 'waits' for the first hit based on nodeTypes
comment|// at which point it switches to a GlobbingPathFilter - so property
comment|// changes will be handled in the GlobbingPathFilter, never here.
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|includeDelete
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
comment|// the AggregateFilter 'waits' for the first hit based on nodeTypes
comment|// at which point it switches to a GlobbingPathFilter - so property
comment|// changes will be handled in the GlobbingPathFilter, never here.
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|includeAdd
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
return|return
name|includeThis
operator|&&
name|predicate
operator|.
name|apply
argument_list|(
name|after
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|includeDelete
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
return|return
name|includeThis
operator|&&
name|predicate
operator|.
name|apply
argument_list|(
name|before
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|includeMove
parameter_list|(
name|String
name|sourcePath
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|moved
parameter_list|)
block|{
return|return
name|includeThis
operator|&&
name|predicate
operator|.
name|apply
argument_list|(
name|moved
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|includeReorder
parameter_list|(
name|String
name|destName
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|reordered
parameter_list|)
block|{
return|return
name|includeThis
operator|&&
name|predicate
operator|.
name|apply
argument_list|(
name|reordered
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|EventFilter
name|create
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|boolean
name|predicateMatches
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|after
operator|.
name|exists
argument_list|()
condition|)
block|{
name|predicateMatches
operator|=
name|predicate
operator|.
name|apply
argument_list|(
name|after
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|predicateMatches
operator|=
name|predicate
operator|.
name|apply
argument_list|(
name|before
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|predicateMatches
condition|)
block|{
comment|// greedy match - we switch to the globbing path filters
name|List
argument_list|<
name|EventFilter
argument_list|>
name|filters
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|relativeGlobPath
range|:
name|relativeGlobPaths
control|)
block|{
if|if
condition|(
name|relativeGlobPath
operator|.
name|endsWith
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|filters
operator|.
name|add
argument_list|(
operator|new
name|GlobbingPathFilter
argument_list|(
name|relativeGlobPath
argument_list|,
name|patternMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filters
operator|.
name|add
argument_list|(
operator|new
name|GlobbingPathFilter
argument_list|(
name|relativeGlobPath
operator|+
literal|"/*"
argument_list|,
name|patternMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|filters
operator|.
name|isEmpty
argument_list|()
condition|?
name|ConstantFilter
operator|.
name|EXCLUDE_ALL
else|:
name|Filters
operator|.
name|any
argument_list|(
name|filters
argument_list|)
return|;
block|}
else|else
block|{
comment|// non-match - we stay with this filter
return|return
name|this
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|EventFilter
name|createFilter
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
if|if
condition|(
name|after
operator|.
name|exists
argument_list|()
condition|)
block|{
name|predicate
operator|=
operator|new
name|TypePredicate
argument_list|(
name|after
argument_list|,
name|nodeTypes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|predicate
operator|=
operator|new
name|TypePredicate
argument_list|(
name|before
argument_list|,
name|nodeTypes
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|NodeTypeAggregator
implements|implements
name|EventAggregator
block|{
specifier|private
specifier|final
name|String
index|[]
name|nodeTypes
decl_stmt|;
specifier|private
specifier|final
name|Pattern
index|[]
name|relativePathPatterns
decl_stmt|;
specifier|private
name|NodeTypeAggregator
parameter_list|(
name|String
index|[]
name|nodeTypes
parameter_list|,
name|Pattern
index|[]
name|relativePathPatterns
parameter_list|)
block|{
name|this
operator|.
name|nodeTypes
operator|=
name|nodeTypes
expr_stmt|;
name|this
operator|.
name|relativePathPatterns
operator|=
name|relativePathPatterns
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|aggregate
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|List
argument_list|<
name|ChildNodeEntry
argument_list|>
name|parents
parameter_list|,
name|ChildNodeEntry
name|childNodeState
parameter_list|)
block|{
specifier|final
name|TypePredicate
name|nodeTypePredicate
init|=
operator|new
name|TypePredicate
argument_list|(
name|root
argument_list|,
name|nodeTypes
argument_list|)
decl_stmt|;
specifier|final
name|int
name|depth
init|=
name|parents
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|depth
condition|;
name|i
operator|++
control|)
block|{
name|ChildNodeEntry
name|child
init|=
name|parents
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NodeState
name|nodeState
init|=
name|child
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|nodeTypePredicate
operator|.
name|apply
argument_list|(
name|nodeState
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|i
operator|+
literal|1
operator|<=
name|depth
condition|)
block|{
name|String
name|childPath
init|=
name|asPath
argument_list|(
name|parents
operator|.
name|subList
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|depth
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Pattern
name|pattern
range|:
name|relativePathPatterns
control|)
block|{
if|if
condition|(
name|pattern
operator|.
name|matcher
argument_list|(
name|childPath
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
name|depth
operator|-
name|i
return|;
block|}
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|aggregate
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|List
argument_list|<
name|ChildNodeEntry
argument_list|>
name|parents
parameter_list|,
name|PropertyState
name|propertyState
parameter_list|)
block|{
specifier|final
name|TypePredicate
name|nodeTypePredicate
init|=
operator|new
name|TypePredicate
argument_list|(
name|root
argument_list|,
name|nodeTypes
argument_list|)
decl_stmt|;
specifier|final
name|int
name|depth
init|=
name|parents
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|depth
condition|;
name|i
operator|++
control|)
block|{
name|ChildNodeEntry
name|child
init|=
name|parents
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NodeState
name|nodeState
init|=
name|child
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|nodeTypePredicate
operator|.
name|apply
argument_list|(
name|nodeState
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|i
operator|+
literal|1
operator|<=
name|depth
condition|)
block|{
name|String
name|childPath
init|=
name|asPath
argument_list|(
name|parents
operator|.
name|subList
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|depth
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Pattern
name|pattern
range|:
name|relativePathPatterns
control|)
block|{
if|if
condition|(
name|pattern
operator|.
name|matcher
argument_list|(
name|childPath
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
name|depth
operator|-
operator|(
name|i
operator|+
literal|1
operator|)
return|;
block|}
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|String
name|asPath
parameter_list|(
name|List
argument_list|<
name|ChildNodeEntry
argument_list|>
name|children
parameter_list|)
block|{
if|if
condition|(
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|final
name|JackrabbitEventFilter
name|delegate
decl_stmt|;
comment|/** whether or not applyNodeTypeOnSelf feature is enabled */
specifier|private
name|boolean
name|applyNodeTypeOnSelf
decl_stmt|;
comment|/** whether or not includeAncestorsRemove feature is enabled */
specifier|private
name|boolean
name|includeAncestorRemove
decl_stmt|;
comment|/** whether or not includeSubTreeOnRemove feature is enabled */
specifier|private
name|boolean
name|includeSubtreeOnRemove
decl_stmt|;
specifier|private
name|String
index|[]
name|globPaths
decl_stmt|;
specifier|private
name|FilterBuilder
name|builder
decl_stmt|;
specifier|private
name|EventAggregator
name|aggregator
decl_stmt|;
specifier|private
name|boolean
name|withNodeTypeAggregate
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|relativeGlobPaths
decl_stmt|;
specifier|public
name|OakEventFilterImpl
parameter_list|(
annotation|@
name|Nonnull
name|JackrabbitEventFilter
name|delegate
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAbsPath
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getAbsPath
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|JackrabbitEventFilter
name|setAbsPath
parameter_list|(
name|String
name|absPath
parameter_list|)
block|{
name|delegate
operator|.
name|setAbsPath
argument_list|(
name|absPath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getAdditionalPaths
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getAdditionalPaths
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|JackrabbitEventFilter
name|setAdditionalPaths
parameter_list|(
name|String
modifier|...
name|absPaths
parameter_list|)
block|{
name|delegate
operator|.
name|setAdditionalPaths
argument_list|(
name|absPaths
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getEventTypes
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getEventTypes
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|JackrabbitEventFilter
name|setEventTypes
parameter_list|(
name|int
name|eventTypes
parameter_list|)
block|{
name|delegate
operator|.
name|setEventTypes
argument_list|(
name|eventTypes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getExcludedPaths
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getExcludedPaths
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|JackrabbitEventFilter
name|setExcludedPaths
parameter_list|(
name|String
modifier|...
name|excludedPaths
parameter_list|)
block|{
name|delegate
operator|.
name|setExcludedPaths
argument_list|(
name|excludedPaths
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getIdentifiers
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getIdentifiers
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|JackrabbitEventFilter
name|setIdentifiers
parameter_list|(
name|String
index|[]
name|identifiers
parameter_list|)
block|{
name|delegate
operator|.
name|setIdentifiers
argument_list|(
name|identifiers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getIsDeep
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getIsDeep
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|JackrabbitEventFilter
name|setIsDeep
parameter_list|(
name|boolean
name|isDeep
parameter_list|)
block|{
name|delegate
operator|.
name|setIsDeep
argument_list|(
name|isDeep
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getNodeTypes
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getNodeTypes
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|JackrabbitEventFilter
name|setNodeTypes
parameter_list|(
name|String
index|[]
name|nodeTypeNames
parameter_list|)
block|{
name|delegate
operator|.
name|setNodeTypes
argument_list|(
name|nodeTypeNames
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getNoExternal
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getNoExternal
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|JackrabbitEventFilter
name|setNoExternal
parameter_list|(
name|boolean
name|noExternal
parameter_list|)
block|{
name|delegate
operator|.
name|setNoExternal
argument_list|(
name|noExternal
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getNoInternal
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getNoInternal
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|JackrabbitEventFilter
name|setNoInternal
parameter_list|(
name|boolean
name|noInternal
parameter_list|)
block|{
name|delegate
operator|.
name|setNoInternal
argument_list|(
name|noInternal
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getNoLocal
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getNoLocal
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|JackrabbitEventFilter
name|setNoLocal
parameter_list|(
name|boolean
name|noLocal
parameter_list|)
block|{
name|delegate
operator|.
name|setNoLocal
argument_list|(
name|noLocal
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|OakEventFilter
name|withApplyNodeTypeOnSelf
parameter_list|()
block|{
name|this
operator|.
name|applyNodeTypeOnSelf
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
name|boolean
name|getApplyNodeTypeOnSelf
parameter_list|()
block|{
return|return
name|applyNodeTypeOnSelf
return|;
block|}
annotation|@
name|Override
specifier|public
name|OakEventFilter
name|withIncludeAncestorsRemove
parameter_list|()
block|{
name|this
operator|.
name|includeAncestorRemove
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
name|boolean
name|getIncludeAncestorsRemove
parameter_list|()
block|{
return|return
name|includeAncestorRemove
return|;
block|}
comment|/**      * This helper method goes through the provided globPath and adds      * each parent (ancestor)'s path to the ancestorPaths set.      *<p>      * OAK-5619 : this used to add "${parent}/*" type ancestor paths, however      * that was wrong: we must only take the actual "${parent}"s to which we want      * to listen to. Also, the glob case looks slightly different than originally      * implemented:      *<ul>      *<li>* : we treat this as a normal name, ie as a normal parent and continue normally</li>      *<li>**: when a ** is hit, the loop through the elements can be stopped,      *  as ** includes all children already, so no further paths are needed.</li>      *</ul>      * @param ancestorPaths the set to which the ancestors of globPath will      * be added to      * @param globPath the input path that may contain globs      */
specifier|static
name|void
name|addAncestorPaths
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|ancestorPaths
parameter_list|,
name|String
name|globPath
parameter_list|)
block|{
if|if
condition|(
name|globPath
operator|==
literal|null
operator|||
operator|!
name|globPath
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// from /a/b/c         => add /a, /a/b, /a/b/c
comment|// from /a/b/**        => add /a, /a/b, /a/b/**
comment|// from /a             => add /a
comment|// from /              => add nothing
comment|// from /a/b/**/*.html => add /a, /a/b, /a/b/**
comment|// from /a/b/*/*.html  => add /a, /a/b, /a/b/*, /a/b/*/*.html
comment|// from /a/b/*/d       => add /a, /a/b, /a/b/*, /a/b/*/d
comment|// from /a/b/*/d/e     => add /a, /a/b, /a/b/*, /a/b/*/d, /a/b/*/d/e
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|PathUtils
operator|.
name|elements
argument_list|(
name|globPath
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|element
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|ancestorPaths
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|.
name|equals
argument_list|(
literal|"**"
argument_list|)
condition|)
block|{
comment|// then we can stop as ** contains everything already
break|break;
block|}
block|}
block|}
specifier|public
name|Condition
name|wrapMainCondition
parameter_list|(
name|Condition
name|mainCondition
parameter_list|,
name|FilterBuilder
name|filterBuilder
parameter_list|,
name|PermissionProviderFactory
name|permissionProviderFactory
parameter_list|)
block|{
if|if
condition|(
operator|!
name|includeAncestorRemove
operator|||
operator|(
name|getEventTypes
argument_list|()
operator|&
name|NODE_REMOVED
operator|)
operator|!=
name|NODE_REMOVED
condition|)
block|{
return|return
name|mainCondition
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|parentPaths
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|addAncestorPaths
argument_list|(
name|parentPaths
argument_list|,
name|getAbsPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getAdditionalPaths
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|absPath
range|:
name|getAdditionalPaths
argument_list|()
control|)
block|{
name|addAncestorPaths
argument_list|(
name|parentPaths
argument_list|,
name|absPath
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|globPaths
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|globPath
range|:
name|globPaths
control|)
block|{
name|addAncestorPaths
argument_list|(
name|parentPaths
argument_list|,
name|globPath
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|parentPaths
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|mainCondition
return|;
block|}
name|List
argument_list|<
name|Condition
argument_list|>
name|ancestorsIncludeConditions
init|=
operator|new
name|LinkedList
argument_list|<
name|Condition
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|aParentPath
range|:
name|parentPaths
control|)
block|{
name|ancestorsIncludeConditions
operator|.
name|add
argument_list|(
name|filterBuilder
operator|.
name|all
argument_list|(
name|filterBuilder
operator|.
name|path
argument_list|(
name|aParentPath
argument_list|)
argument_list|,
name|filterBuilder
operator|.
name|deleteSubtree
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|globPaths
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|globPath
range|:
name|globPaths
control|)
block|{
if|if
condition|(
name|globPath
operator|.
name|contains
argument_list|(
literal|"**"
argument_list|)
operator|||
name|globPath
operator|.
name|contains
argument_list|(
literal|"/*/"
argument_list|)
condition|)
block|{
name|ancestorsIncludeConditions
operator|.
name|add
argument_list|(
name|filterBuilder
operator|.
name|path
argument_list|(
name|globPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// unlike the known parent case above, this variant doesn't filter out deleteSubtrees
comment|// that way it will report the actual file deleted
block|}
block|}
block|}
return|return
name|filterBuilder
operator|.
name|any
argument_list|(
name|mainCondition
argument_list|,
name|filterBuilder
operator|.
name|all
argument_list|(
name|filterBuilder
operator|.
name|eventType
argument_list|(
name|NODE_REMOVED
argument_list|)
argument_list|,
name|filterBuilder
operator|.
name|any
argument_list|(
name|ancestorsIncludeConditions
argument_list|)
argument_list|,
name|filterBuilder
operator|.
name|accessControl
argument_list|(
name|permissionProviderFactory
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|OakEventFilter
name|withIncludeSubtreeOnRemove
parameter_list|()
block|{
name|this
operator|.
name|includeSubtreeOnRemove
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
name|boolean
name|getIncludeSubtreeOnRemove
parameter_list|()
block|{
return|return
name|includeSubtreeOnRemove
return|;
block|}
annotation|@
name|Override
specifier|public
name|OakEventFilter
name|withIncludeGlobPaths
parameter_list|(
name|String
modifier|...
name|globPaths
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|globPaths
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|globPaths
operator|=
name|globPaths
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|combo
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|combo
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|this
operator|.
name|globPaths
argument_list|)
argument_list|)
expr_stmt|;
name|combo
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|globPaths
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|globPaths
operator|=
name|combo
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|combo
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
name|String
index|[]
name|getIncludeGlobPaths
parameter_list|()
block|{
return|return
name|globPaths
return|;
block|}
specifier|public
name|FilterBuilder
name|builder
parameter_list|()
block|{
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
operator|new
name|FilterBuilder
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
specifier|public
name|OakEventFilterImpl
name|aggregator
parameter_list|(
name|EventAggregator
name|aggregator
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|aggregator
argument_list|)
expr_stmt|;
name|this
operator|.
name|aggregator
operator|=
name|aggregator
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Condition
name|getAdditionalIncludeConditions
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|includePaths
parameter_list|)
block|{
if|if
condition|(
operator|!
name|withNodeTypeAggregate
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|Condition
argument_list|>
name|additionalIncludeConditions
init|=
operator|new
name|LinkedList
argument_list|<
name|Condition
argument_list|>
argument_list|()
decl_stmt|;
comment|// for nodeTypeAggregation in OR mode we must append
comment|// the relativeGlobPaths to all includePaths
for|for
control|(
name|String
name|includePath
range|:
name|includePaths
control|)
block|{
if|if
condition|(
name|includePath
operator|.
name|equals
argument_list|(
literal|"**"
argument_list|)
operator|||
name|includePath
operator|.
name|endsWith
argument_list|(
literal|"/*"
argument_list|)
operator|||
name|includePath
operator|.
name|endsWith
argument_list|(
literal|"/**"
argument_list|)
condition|)
block|{
comment|// this will include anything, so nothing to append in this case
block|}
else|else
block|{
comment|// otherwise append all the relativeGlobPaths, except ""
for|for
control|(
name|String
name|relativeGlobPath
range|:
name|relativeGlobPaths
control|)
block|{
if|if
condition|(
name|relativeGlobPath
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|// this corresponds to 'SELF' which is already included, so skip
continue|continue;
block|}
else|else
block|{
name|String
name|additionalGlobPath
decl_stmt|;
if|if
condition|(
name|includePath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|additionalGlobPath
operator|=
name|includePath
operator|+
name|relativeGlobPath
expr_stmt|;
block|}
else|else
block|{
name|additionalGlobPath
operator|=
name|includePath
operator|+
literal|"/"
operator|+
name|relativeGlobPath
expr_stmt|;
block|}
name|additionalIncludeConditions
operator|.
name|add
argument_list|(
name|builder
argument_list|()
operator|.
name|path
argument_list|(
name|additionalGlobPath
argument_list|)
argument_list|)
expr_stmt|;
name|additionalIncludeConditions
operator|.
name|add
argument_list|(
name|builder
argument_list|()
operator|.
name|path
argument_list|(
name|additionalGlobPath
operator|+
literal|"/*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|additionalIncludeConditions
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|builder
argument_list|()
operator|.
name|any
argument_list|(
name|additionalIncludeConditions
argument_list|)
return|;
block|}
block|}
specifier|public
name|EventAggregator
name|getAggregator
parameter_list|()
block|{
return|return
name|aggregator
return|;
block|}
annotation|@
name|Override
specifier|public
name|OakEventFilter
name|withNodeTypeAggregate
parameter_list|(
name|String
index|[]
name|nodeTypes
parameter_list|,
name|String
index|[]
name|relativeGlobPaths
parameter_list|)
block|{
name|this
operator|.
name|withNodeTypeAggregate
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|relativeGlobPaths
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|relativeGlobPaths
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|relativeGlobPaths
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|relativeGlobPaths
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Pattern
index|[]
name|relativePathPatterns
init|=
operator|new
name|Pattern
index|[
name|relativeGlobPaths
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|relativePathPatterns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|relativePathPatterns
index|[
name|i
index|]
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|GlobbingPathHelper
operator|.
name|globPathAsRegex
argument_list|(
name|relativeGlobPaths
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|aggregator
argument_list|(
operator|new
name|NodeTypeAggregator
argument_list|(
name|nodeTypes
argument_list|,
name|relativePathPatterns
argument_list|)
argument_list|)
expr_stmt|;
comment|// OAK-5096: the following AND is not necessary:
comment|//        and(new NodeTypeAggregationFilter(nodeTypes, relativeGlobPaths));
return|return
name|this
return|;
block|}
comment|/**      * A hook called by the ObservationManagerImpl before creating the ChangeSetFilterImpl      * which allows this filter to adjust the includePaths according to its      * enabled flags.      *<p>      * This is used to set the includePath to be '/' in case includeAncestorRemove      * is set. The reason for this is that we must catch parent removals and can thus      * not apply the normally applied prefilter paths.      * @param includePaths the set to adjust depending on filter flags      */
name|Set
argument_list|<
name|String
argument_list|>
name|calcPrefilterIncludePaths
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|includePaths
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeAncestorRemove
condition|)
block|{
for|for
control|(
name|String
name|includePath
range|:
name|includePaths
control|)
block|{
name|addAncestorPaths
argument_list|(
name|paths
argument_list|,
name|includePath
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|withNodeTypeAggregate
condition|)
block|{
comment|// ensure that, for prefixing, all includePaths allow additional
comment|// subpaths for the aggregation - this can be simplified
comment|// to just allow anything (**) below there, as this is just
comment|// about prefiltering, not actual (precise) filtering.
comment|// so the goal is just to ensure nothing is erroneously excluded
comment|// so more including is fine.
for|for
control|(
name|String
name|includePath
range|:
name|includePaths
control|)
block|{
if|if
condition|(
name|includePath
operator|.
name|equals
argument_list|(
literal|"**"
argument_list|)
operator|||
name|includePath
operator|.
name|endsWith
argument_list|(
literal|"/**"
argument_list|)
condition|)
block|{
comment|// skip, this is fine
block|}
elseif|else
if|if
condition|(
name|includePath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|includePath
operator|+
literal|"**"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|paths
operator|.
name|add
argument_list|(
name|includePath
operator|+
literal|"/**"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|paths
return|;
block|}
block|}
end_class

end_unit

