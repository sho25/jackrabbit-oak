begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_comment
comment|/**  * Privilege management related utility methods.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PrivilegeUtil
implements|implements
name|PrivilegeConstants
block|{
specifier|private
name|PrivilegeUtil
parameter_list|()
block|{}
comment|/**      * Returns the root tree for all privilege definitions stored in the content      * repository.      *      * @return The privileges root.      */
annotation|@
name|NotNull
specifier|public
specifier|static
name|Tree
name|getPrivilegesTree
parameter_list|(
name|Root
name|root
parameter_list|)
block|{
return|return
name|root
operator|.
name|getTree
argument_list|(
name|PRIVILEGES_PATH
argument_list|)
return|;
block|}
comment|/**      * Reads the privilege definition stored in the specified definition tree.      * Note, that this utility does not check the existence nor the node type      * of the specified tree.      *      * @param definitionTree An existing tree storing a privilege definition.      * @return A new instance of {@code PrivilegeDefinition}.      */
annotation|@
name|NotNull
specifier|public
specifier|static
name|PrivilegeDefinition
name|readDefinition
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|definitionTree
parameter_list|)
block|{
name|String
name|name
init|=
name|definitionTree
operator|.
name|getName
argument_list|()
decl_stmt|;
name|boolean
name|isAbstract
init|=
name|TreeUtil
operator|.
name|getBoolean
argument_list|(
name|definitionTree
argument_list|,
name|REP_IS_ABSTRACT
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|declAggrNames
init|=
literal|null
decl_stmt|;
name|PropertyState
name|property
init|=
name|definitionTree
operator|.
name|getProperty
argument_list|(
name|REP_AGGREGATES
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|declAggrNames
operator|=
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ImmutablePrivilegeDefinition
argument_list|(
name|name
argument_list|,
name|isAbstract
argument_list|,
name|declAggrNames
argument_list|)
return|;
block|}
block|}
end_class

end_unit

