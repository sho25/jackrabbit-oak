begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TreeLocationTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
name|TreeLocation
name|nullLocation
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
literal|"b"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
literal|"c"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|NodeUtil
name|n
init|=
operator|new
name|NodeUtil
argument_list|(
name|tree
argument_list|)
decl_stmt|;
name|n
operator|.
name|addChild
argument_list|(
literal|"x"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|n
operator|.
name|addChild
argument_list|(
literal|"y"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|n
operator|.
name|addChild
argument_list|(
literal|"z"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"1"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"2"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
operator|.
name|setString
argument_list|(
literal|"p"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|nullLocation
operator|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|)
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|root
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullLocation
parameter_list|()
block|{
name|TreeLocation
name|xyz
init|=
name|nullLocation
operator|.
name|getChild
argument_list|(
literal|"x"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"y"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"z"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"x/y/z"
argument_list|,
name|xyz
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"x/y"
argument_list|,
name|xyz
operator|.
name|getParent
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"x"
argument_list|,
name|xyz
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nullLocation
argument_list|,
name|xyz
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParentOfRoot
parameter_list|()
block|{
name|TreeLocation
name|rootLocation
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nullLocation
argument_list|,
name|rootLocation
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNodeLocation
parameter_list|()
block|{
name|TreeLocation
name|x
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
literal|"/x"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|x
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|TreeLocation
name|xyz
init|=
name|x
operator|.
name|getChild
argument_list|(
literal|"y"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"z"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/x/y/z"
argument_list|,
name|xyz
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|xyz
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|TreeLocation
name|xy
init|=
name|xyz
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/x/y"
argument_list|,
name|xy
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|xy
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|x
operator|.
name|getTree
argument_list|()
argument_list|,
name|xy
operator|.
name|getParent
argument_list|()
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertyLocation
parameter_list|()
block|{
name|TreeLocation
name|a
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
literal|"/a"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
name|TreeLocation
name|abc
init|=
name|a
operator|.
name|getChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b/c"
argument_list|,
name|abc
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|abc
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
name|TreeLocation
name|ab
init|=
name|abc
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b"
argument_list|,
name|ab
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ab
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|.
name|getProperty
argument_list|()
argument_list|,
name|ab
operator|.
name|getParent
argument_list|()
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getDeepLocation
parameter_list|()
block|{
name|TreeLocation
name|p
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
literal|"/z/1/2/p"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/z/1/2/p"
argument_list|,
name|p
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|TreeLocation
name|n
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
literal|"/z/1/2/3/4"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|n
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|n
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/z/1/2/3/4"
argument_list|,
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|TreeLocation
name|two
init|=
name|n
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|two
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/z/1/2"
argument_list|,
name|two
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

