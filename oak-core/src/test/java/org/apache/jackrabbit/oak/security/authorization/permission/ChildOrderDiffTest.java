begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_class
specifier|public
class|class
name|ChildOrderDiffTest
block|{
annotation|@
name|NotNull
specifier|private
specifier|static
name|PropertyState
name|createPropertyState
parameter_list|(
annotation|@
name|NotNull
name|String
modifier|...
name|names
parameter_list|)
block|{
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"any"
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|names
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBeforeEmptyAfterEmpty
parameter_list|()
block|{
name|PropertyState
name|before
init|=
name|createPropertyState
argument_list|()
decl_stmt|;
name|PropertyState
name|after
init|=
name|createPropertyState
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|ChildOrderDiff
operator|.
name|firstReordered
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBeforeEmpty
parameter_list|()
block|{
name|PropertyState
name|before
init|=
name|createPropertyState
argument_list|()
decl_stmt|;
name|PropertyState
name|after
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n2"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|ChildOrderDiff
operator|.
name|firstReordered
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAfterEmpty
parameter_list|()
block|{
name|PropertyState
name|before
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n2"
argument_list|)
decl_stmt|;
name|PropertyState
name|after
init|=
name|createPropertyState
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|ChildOrderDiff
operator|.
name|firstReordered
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAfterEqualsBefore
parameter_list|()
block|{
name|PropertyState
name|eq
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n2"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|ChildOrderDiff
operator|.
name|firstReordered
argument_list|(
name|eq
argument_list|,
name|eq
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendedAtEnd
parameter_list|()
block|{
name|PropertyState
name|before
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n2"
argument_list|,
literal|"n3"
argument_list|)
decl_stmt|;
name|PropertyState
name|after
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n2"
argument_list|,
literal|"n3"
argument_list|,
literal|"n4"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|ChildOrderDiff
operator|.
name|firstReordered
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertedAtBeginning
parameter_list|()
block|{
name|PropertyState
name|before
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n2"
argument_list|,
literal|"n3"
argument_list|)
decl_stmt|;
name|PropertyState
name|after
init|=
name|createPropertyState
argument_list|(
literal|"n0"
argument_list|,
literal|"n1"
argument_list|,
literal|"n2"
argument_list|,
literal|"n3"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|ChildOrderDiff
operator|.
name|firstReordered
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInserted
parameter_list|()
block|{
name|PropertyState
name|before
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n2"
argument_list|,
literal|"n3"
argument_list|)
decl_stmt|;
name|PropertyState
name|after
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n11"
argument_list|,
literal|"n2"
argument_list|,
literal|"n3"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|ChildOrderDiff
operator|.
name|firstReordered
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLastReplaced
parameter_list|()
block|{
name|PropertyState
name|before
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n2"
argument_list|,
literal|"n3"
argument_list|)
decl_stmt|;
name|PropertyState
name|after
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n2"
argument_list|,
literal|"n4"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|ChildOrderDiff
operator|.
name|firstReordered
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFirstRemoved
parameter_list|()
block|{
name|PropertyState
name|before
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n2"
argument_list|,
literal|"n3"
argument_list|)
decl_stmt|;
name|PropertyState
name|after
init|=
name|createPropertyState
argument_list|(
literal|"n2"
argument_list|,
literal|"n3"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|ChildOrderDiff
operator|.
name|firstReordered
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSecondRemoved
parameter_list|()
block|{
name|PropertyState
name|before
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n2"
argument_list|,
literal|"n3"
argument_list|)
decl_stmt|;
name|PropertyState
name|after
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n3"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|ChildOrderDiff
operator|.
name|firstReordered
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLastRemoved
parameter_list|()
block|{
name|PropertyState
name|before
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n2"
argument_list|,
literal|"n3"
argument_list|)
decl_stmt|;
name|PropertyState
name|after
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n2"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|ChildOrderDiff
operator|.
name|firstReordered
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReorderedFirstToEnd
parameter_list|()
block|{
name|PropertyState
name|before
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n2"
argument_list|,
literal|"n3"
argument_list|)
decl_stmt|;
name|PropertyState
name|after
init|=
name|createPropertyState
argument_list|(
literal|"n2"
argument_list|,
literal|"n3"
argument_list|,
literal|"n1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"n2"
argument_list|,
name|ChildOrderDiff
operator|.
name|firstReordered
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReorderedLastBeforeSecond
parameter_list|()
block|{
name|PropertyState
name|before
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n2"
argument_list|,
literal|"n3"
argument_list|)
decl_stmt|;
name|PropertyState
name|after
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n3"
argument_list|,
literal|"n2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"n3"
argument_list|,
name|ChildOrderDiff
operator|.
name|firstReordered
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovedAndReordered
parameter_list|()
block|{
name|PropertyState
name|before
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n2"
argument_list|,
literal|"n3"
argument_list|,
literal|"n4"
argument_list|)
decl_stmt|;
name|PropertyState
name|after
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n4"
argument_list|,
literal|"n3"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"n4"
argument_list|,
name|ChildOrderDiff
operator|.
name|firstReordered
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertedRemovedAndReordered
parameter_list|()
block|{
name|PropertyState
name|before
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n2"
argument_list|,
literal|"n3"
argument_list|,
literal|"n4"
argument_list|)
decl_stmt|;
name|PropertyState
name|after
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n11"
argument_list|,
literal|"n4"
argument_list|,
literal|"n3"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"n4"
argument_list|,
name|ChildOrderDiff
operator|.
name|firstReordered
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovedAndReorderedAppended
parameter_list|()
block|{
name|PropertyState
name|before
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n2"
argument_list|,
literal|"n3"
argument_list|,
literal|"n4"
argument_list|)
decl_stmt|;
name|PropertyState
name|after
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n4"
argument_list|,
literal|"n3"
argument_list|,
literal|"n33"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"n4"
argument_list|,
name|ChildOrderDiff
operator|.
name|firstReordered
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReorderedAndReplaced
parameter_list|()
block|{
name|PropertyState
name|before
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n2"
argument_list|,
literal|"n3"
argument_list|,
literal|"n4"
argument_list|)
decl_stmt|;
name|PropertyState
name|after
init|=
name|createPropertyState
argument_list|(
literal|"n4"
argument_list|,
literal|"n1"
argument_list|,
literal|"n6"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"n4"
argument_list|,
name|ChildOrderDiff
operator|.
name|firstReordered
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnlyLastEquals
parameter_list|()
block|{
name|PropertyState
name|before
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n2"
argument_list|)
decl_stmt|;
name|PropertyState
name|after
init|=
name|createPropertyState
argument_list|(
literal|"n5"
argument_list|,
literal|"n6"
argument_list|,
literal|"n7"
argument_list|,
literal|"n2"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|ChildOrderDiff
operator|.
name|firstReordered
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllDifferent
parameter_list|()
block|{
name|PropertyState
name|before
init|=
name|createPropertyState
argument_list|(
literal|"n1"
argument_list|,
literal|"n2"
argument_list|,
literal|"n3"
argument_list|,
literal|"n4"
argument_list|)
decl_stmt|;
name|PropertyState
name|after
init|=
name|createPropertyState
argument_list|(
literal|"n5"
argument_list|,
literal|"n6"
argument_list|,
literal|"n7"
argument_list|,
literal|"n8"
argument_list|,
literal|"n9"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|ChildOrderDiff
operator|.
name|firstReordered
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

