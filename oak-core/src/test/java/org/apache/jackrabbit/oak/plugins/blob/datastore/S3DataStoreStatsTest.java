begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|DigestOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|NullOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|AsyncTouchCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|AsyncTouchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|AsyncUploadCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|AsyncUploadResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|Backend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|CachingDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MultiBinaryPropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
operator|.
name|encodeHexString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|copyInputStreamToFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|S3DataStoreStatsTest
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|NodeStore
name|nodeStore
decl_stmt|;
specifier|private
specifier|static
name|Blob
name|mockBlob
decl_stmt|;
specifier|private
specifier|static
name|String
name|testNodePathName
init|=
literal|"test/node/path/name"
decl_stmt|;
specifier|private
name|File
name|testFile
decl_stmt|;
specifier|private
name|SharedS3DataStore
name|defaultS3ds
decl_stmt|;
specifier|private
name|SharedS3DataStore
name|autoSyncMockS3ds
decl_stmt|;
specifier|private
name|SharedS3DataStore
name|manualSyncMockS3ds
decl_stmt|;
specifier|private
name|S3DataStoreStats
name|stats
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|testFile
operator|=
name|folder
operator|.
name|newFile
argument_list|()
expr_stmt|;
name|copyInputStreamToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|16384
argument_list|)
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|String
name|testNodeId
init|=
name|getIdForInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
argument_list|)
decl_stmt|;
name|mockBlob
operator|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockBlob
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|testNodeId
argument_list|)
expr_stmt|;
name|nodeStore
operator|=
name|initNodeStore
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|mockBlob
argument_list|)
argument_list|,
name|Optional
operator|.
expr|<
name|Blob
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|String
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Integer
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|List
argument_list|<
name|Blob
argument_list|>
operator|>
name|absent
argument_list|()
argument_list|)
expr_stmt|;
name|defaultS3ds
operator|=
name|mock
argument_list|(
name|SharedS3DataStore
operator|.
name|class
argument_list|)
expr_stmt|;
name|autoSyncMockS3ds
operator|=
operator|new
name|CustomBackendS3DataStore
argument_list|(
operator|new
name|TestMemoryBackend
argument_list|()
argument_list|)
expr_stmt|;
name|autoSyncMockS3ds
operator|.
name|init
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|manualSyncMockS3ds
operator|=
operator|new
name|CustomBackendS3DataStore
argument_list|(
operator|new
name|ManuallySyncingInMemoryBackend
argument_list|()
argument_list|)
expr_stmt|;
name|manualSyncMockS3ds
operator|.
name|init
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getIdForInputStream
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|)
throws|throws
name|Exception
block|{
name|MessageDigest
name|digest
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA-1"
argument_list|)
decl_stmt|;
name|OutputStream
name|output
init|=
operator|new
name|DigestOutputStream
argument_list|(
operator|new
name|NullOutputStream
argument_list|()
argument_list|,
name|digest
argument_list|)
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copyLarge
argument_list|(
name|in
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
return|return
name|encodeHexString
argument_list|(
name|digest
operator|.
name|digest
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|NodeStore
name|initNodeStore
parameter_list|(
specifier|final
name|Optional
argument_list|<
name|Blob
argument_list|>
name|blobProp1
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|Blob
argument_list|>
name|blobProp2
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|stringProp
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|intProp
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|List
argument_list|<
name|Blob
argument_list|>
argument_list|>
name|blobPropList
parameter_list|)
throws|throws
name|CommitFailedException
block|{
specifier|final
name|NodeStore
name|nodeStore
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|rootBuilder
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|initNodeBuilder
argument_list|(
name|rootBuilder
argument_list|)
decl_stmt|;
if|if
condition|(
name|blobProp1
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
literal|"blobProp1"
argument_list|,
name|blobProp1
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blobProp2
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
literal|"blobProp2"
argument_list|,
name|blobProp2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stringProp
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
literal|"stringProp"
argument_list|,
name|stringProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|intProp
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
literal|"intProp"
argument_list|,
name|intProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blobPropList
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|MultiBinaryPropertyState
operator|.
name|binaryPropertyFromBlob
argument_list|(
literal|"blobPropList"
argument_list|,
name|blobPropList
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|nodeStore
operator|.
name|merge
argument_list|(
name|rootBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
return|return
name|nodeStore
return|;
block|}
specifier|private
specifier|static
name|NodeBuilder
name|initNodeBuilder
parameter_list|(
specifier|final
name|NodeBuilder
name|rootBuilder
parameter_list|)
block|{
name|NodeBuilder
name|builder
init|=
name|rootBuilder
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|nodeName
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|testNodePathName
argument_list|)
control|)
block|{
name|builder
operator|=
name|builder
operator|.
name|child
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{     }
annotation|@
name|Test
specifier|public
name|void
name|testGetActiveS3FileSyncMetricExists
parameter_list|()
throws|throws
name|Exception
block|{
name|stats
operator|=
operator|new
name|S3DataStoreStats
argument_list|()
expr_stmt|;
name|stats
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|stats
operator|.
name|s3ds
operator|=
name|defaultS3ds
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|==
name|stats
operator|.
name|getActiveSyncs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSingleActiveS3FileSyncMetric
parameter_list|()
throws|throws
name|Exception
block|{
name|stats
operator|=
operator|new
name|S3DataStoreStats
argument_list|()
expr_stmt|;
name|stats
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|stats
operator|.
name|s3ds
operator|=
name|manualSyncMockS3ds
expr_stmt|;
name|DataRecord
name|record
init|=
literal|null
decl_stmt|;
try|try
block|{
name|record
operator|=
name|manualSyncMockS3ds
operator|.
name|addRecord
argument_list|(
name|getStream
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|1
operator|==
name|stats
operator|.
name|getActiveSyncs
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|record
condition|)
block|{
name|manualSyncMockS3ds
operator|.
name|deleteRecord
argument_list|(
name|record
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
operator|(
operator|(
name|ManuallySyncingInMemoryBackend
operator|)
name|manualSyncMockS3ds
operator|.
name|getBackend
argument_list|()
operator|)
operator|.
name|clearInProgressWrites
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|==
name|stats
operator|.
name|getActiveSyncs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMultilpleActiveS3FileSyncMetric
parameter_list|()
throws|throws
name|Exception
block|{
name|stats
operator|=
operator|new
name|S3DataStoreStats
argument_list|()
expr_stmt|;
name|stats
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|stats
operator|.
name|s3ds
operator|=
name|manualSyncMockS3ds
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|DataRecord
argument_list|>
name|records
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
try|try
block|{
name|records
operator|.
name|add
argument_list|(
name|manualSyncMockS3ds
operator|.
name|addRecord
argument_list|(
name|getStream
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|records
operator|.
name|add
argument_list|(
name|manualSyncMockS3ds
operator|.
name|addRecord
argument_list|(
name|getStream
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|records
operator|.
name|add
argument_list|(
name|manualSyncMockS3ds
operator|.
name|addRecord
argument_list|(
name|getStream
argument_list|(
literal|"test3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|3
operator|==
name|stats
operator|.
name|getActiveSyncs
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
for|for
control|(
specifier|final
name|DataRecord
name|record
range|:
name|records
control|)
block|{
name|manualSyncMockS3ds
operator|.
name|deleteRecord
argument_list|(
name|record
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
operator|(
operator|(
name|ManuallySyncingInMemoryBackend
operator|)
name|manualSyncMockS3ds
operator|.
name|getBackend
argument_list|()
operator|)
operator|.
name|clearInProgressWrites
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|==
name|stats
operator|.
name|getActiveSyncs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsFileSyncedMetricExists
parameter_list|()
throws|throws
name|Exception
block|{
name|stats
operator|=
operator|new
name|S3DataStoreStats
argument_list|()
expr_stmt|;
name|stats
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|stats
operator|.
name|s3ds
operator|=
name|defaultS3ds
expr_stmt|;
name|assertFalse
argument_list|(
name|stats
operator|.
name|isFileSynced
argument_list|(
name|testNodePathName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsFileSyncedNullFileReturnsFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|stats
operator|=
operator|new
name|S3DataStoreStats
argument_list|()
expr_stmt|;
name|stats
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|stats
operator|.
name|s3ds
operator|=
name|defaultS3ds
expr_stmt|;
name|assertFalse
argument_list|(
name|stats
operator|.
name|isFileSynced
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsFileSyncedEmptyStringReturnsFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|stats
operator|=
operator|new
name|S3DataStoreStats
argument_list|()
expr_stmt|;
name|stats
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|stats
operator|.
name|s3ds
operator|=
name|defaultS3ds
expr_stmt|;
name|assertFalse
argument_list|(
name|stats
operator|.
name|isFileSynced
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsFileSyncedInvalidFilenameReturnsFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|stats
operator|=
operator|new
name|S3DataStoreStats
argument_list|()
expr_stmt|;
name|stats
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|stats
operator|.
name|s3ds
operator|=
name|defaultS3ds
expr_stmt|;
name|assertFalse
argument_list|(
name|stats
operator|.
name|isFileSynced
argument_list|(
literal|"invalid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsFileSyncedFileNotAddedReturnsFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|stats
operator|=
operator|new
name|S3DataStoreStats
argument_list|()
expr_stmt|;
name|stats
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|stats
operator|.
name|s3ds
operator|=
name|autoSyncMockS3ds
expr_stmt|;
name|assertFalse
argument_list|(
name|stats
operator|.
name|isFileSynced
argument_list|(
name|testNodePathName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsFileSyncedSyncIncompleteReturnsFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|stats
operator|=
operator|new
name|S3DataStoreStats
argument_list|()
expr_stmt|;
name|stats
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|stats
operator|.
name|s3ds
operator|=
name|manualSyncMockS3ds
expr_stmt|;
name|assertSyncedFalse
argument_list|(
name|stats
argument_list|,
name|manualSyncMockS3ds
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsFileSyncedSyncCompleteReturnsTrue
parameter_list|()
throws|throws
name|Exception
block|{
name|stats
operator|=
operator|new
name|S3DataStoreStats
argument_list|()
expr_stmt|;
name|stats
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|stats
operator|.
name|s3ds
operator|=
name|autoSyncMockS3ds
expr_stmt|;
name|assertSyncedTrue
argument_list|(
name|stats
argument_list|,
name|autoSyncMockS3ds
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsFileSyncedFileDeletedReturnsFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|stats
operator|=
operator|new
name|S3DataStoreStats
argument_list|()
expr_stmt|;
name|stats
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|stats
operator|.
name|s3ds
operator|=
name|autoSyncMockS3ds
expr_stmt|;
name|DataRecord
name|record
init|=
literal|null
decl_stmt|;
name|FileInputStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stream
operator|=
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
expr_stmt|;
name|record
operator|=
name|autoSyncMockS3ds
operator|.
name|addRecord
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|autoSyncMockS3ds
argument_list|,
name|Lists
operator|.
expr|<
name|DataRecord
operator|>
name|newArrayList
argument_list|(
name|record
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|stats
operator|.
name|isFileSynced
argument_list|(
name|testNodePathName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsFileSyncedDifferentPaths
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|path1
init|=
literal|"path/to/node/1"
decl_stmt|;
specifier|final
name|String
name|path2
init|=
literal|"path/to/node/2"
decl_stmt|;
specifier|final
name|String
name|path3
init|=
literal|"shortpath"
decl_stmt|;
specifier|final
name|String
name|path4
init|=
literal|"a/very/very/long/path/leads/to/node/4"
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|path1
argument_list|,
name|path2
argument_list|,
name|path3
argument_list|,
name|path4
argument_list|)
decl_stmt|;
specifier|final
name|String
name|leadingSlashPath
init|=
literal|"/"
operator|+
name|path1
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|blobContents
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Blob
argument_list|>
name|blobs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|blobIds
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
name|blobContents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
name|blobContents
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
name|blobContents
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
name|blobContents
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|blobs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|blobIds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|blobs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|blobIds
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|blobs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|blobIds
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|blobs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|blobIds
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|NodeStore
name|nodeStore
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
specifier|final
name|NodeBuilder
name|rootBuilder
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|NodeBuilder
argument_list|>
name|builders
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|path
range|:
name|paths
control|)
block|{
name|NodeBuilder
name|builder
init|=
name|rootBuilder
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|nodeName
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|builder
operator|=
name|builder
operator|.
name|child
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
block|}
name|builders
operator|.
name|add
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
name|builders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"blob1"
argument_list|,
name|blobs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"blob2"
argument_list|,
name|blobs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"blob3"
argument_list|,
name|blobs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"blob4"
argument_list|,
name|blobs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|rootBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|stats
operator|=
operator|new
name|S3DataStoreStats
argument_list|()
expr_stmt|;
name|stats
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|stats
operator|.
name|s3ds
operator|=
name|autoSyncMockS3ds
expr_stmt|;
specifier|final
name|List
argument_list|<
name|DataRecord
argument_list|>
name|records
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
specifier|final
name|String
name|s
range|:
name|blobContents
control|)
block|{
name|records
operator|.
name|add
argument_list|(
name|autoSyncMockS3ds
operator|.
name|addRecord
argument_list|(
name|getStream
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|String
name|path
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
name|path1
argument_list|,
name|path2
argument_list|,
name|path3
argument_list|,
name|path4
argument_list|,
name|leadingSlashPath
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|stats
operator|.
name|isFileSynced
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|String
name|invalidPath
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
name|path1
operator|+
literal|"/"
argument_list|,
literal|"/"
operator|+
name|path1
operator|+
literal|"/"
argument_list|,
literal|"/path//to/node///1"
argument_list|)
control|)
block|{
try|try
block|{
name|stats
operator|.
name|isFileSynced
argument_list|(
name|invalidPath
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// shouldn't get here on an invalid path
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
finally|finally
block|{
name|delete
argument_list|(
name|autoSyncMockS3ds
argument_list|,
name|records
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsFileSyncedMultiplePropertiesReturnsTrue
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeStore
name|nodeStore
init|=
name|initNodeStore
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|mockBlob
argument_list|)
argument_list|,
name|Optional
operator|.
expr|<
name|Blob
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|123
argument_list|)
argument_list|,
name|Optional
operator|.
expr|<
name|List
argument_list|<
name|Blob
argument_list|>
operator|>
name|absent
argument_list|()
argument_list|)
decl_stmt|;
name|stats
operator|=
operator|new
name|S3DataStoreStats
argument_list|()
expr_stmt|;
name|stats
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|stats
operator|.
name|s3ds
operator|=
name|autoSyncMockS3ds
expr_stmt|;
name|assertSyncedTrue
argument_list|(
name|stats
argument_list|,
name|autoSyncMockS3ds
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsFileSyncedMultipleBinaryPropertiesAllSyncedReturnsTrue
parameter_list|()
throws|throws
name|Exception
block|{
name|Blob
name|mockBlob2
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|id2
init|=
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
literal|"testContents2"
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockBlob2
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id2
argument_list|)
expr_stmt|;
name|NodeStore
name|nodeStore
init|=
name|initNodeStore
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|mockBlob
argument_list|)
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|mockBlob2
argument_list|)
argument_list|,
name|Optional
operator|.
expr|<
name|String
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Integer
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|List
argument_list|<
name|Blob
argument_list|>
operator|>
name|absent
argument_list|()
argument_list|)
decl_stmt|;
name|stats
operator|=
operator|new
name|S3DataStoreStats
argument_list|()
expr_stmt|;
name|stats
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|stats
operator|.
name|s3ds
operator|=
name|autoSyncMockS3ds
expr_stmt|;
name|assertSyncedTrue
argument_list|(
name|stats
argument_list|,
name|autoSyncMockS3ds
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
argument_list|,
name|getStream
argument_list|(
literal|"testContents2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsFileSyncedMultipleBinaryPropertiesNotAllSyncedReturnsFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|Blob
name|mockBlob2
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|id2
init|=
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
literal|"testContents2"
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockBlob2
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id2
argument_list|)
expr_stmt|;
name|NodeStore
name|nodeStore
init|=
name|initNodeStore
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|mockBlob
argument_list|)
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|mockBlob2
argument_list|)
argument_list|,
name|Optional
operator|.
expr|<
name|String
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Integer
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|List
argument_list|<
name|Blob
argument_list|>
operator|>
name|absent
argument_list|()
argument_list|)
decl_stmt|;
name|stats
operator|=
operator|new
name|S3DataStoreStats
argument_list|()
expr_stmt|;
name|stats
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|stats
operator|.
name|s3ds
operator|=
name|autoSyncMockS3ds
expr_stmt|;
name|assertSyncedFalse
argument_list|(
name|stats
argument_list|,
name|autoSyncMockS3ds
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsFileSyncedBinariesPropertySingleReturnsTrue
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Blob
argument_list|>
name|blobPropList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mockBlob
argument_list|)
decl_stmt|;
name|NodeStore
name|nodeStore
init|=
name|initNodeStore
argument_list|(
name|Optional
operator|.
expr|<
name|Blob
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Blob
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|String
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Integer
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|blobPropList
argument_list|)
argument_list|)
decl_stmt|;
name|stats
operator|=
operator|new
name|S3DataStoreStats
argument_list|()
expr_stmt|;
name|stats
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|stats
operator|.
name|s3ds
operator|=
name|autoSyncMockS3ds
expr_stmt|;
name|assertSyncedTrue
argument_list|(
name|stats
argument_list|,
name|autoSyncMockS3ds
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsFileSyncedBinariesPropertyMultipleReturnsTrue
parameter_list|()
throws|throws
name|Exception
block|{
name|Blob
name|mockBlob2
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|id2
init|=
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
literal|"testContents2"
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockBlob2
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Blob
argument_list|>
name|blobPropList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mockBlob
argument_list|,
name|mockBlob2
argument_list|)
decl_stmt|;
name|NodeStore
name|nodeStore
init|=
name|initNodeStore
argument_list|(
name|Optional
operator|.
expr|<
name|Blob
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Blob
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|String
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Integer
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|blobPropList
argument_list|)
argument_list|)
decl_stmt|;
name|stats
operator|=
operator|new
name|S3DataStoreStats
argument_list|()
expr_stmt|;
name|stats
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|stats
operator|.
name|s3ds
operator|=
name|autoSyncMockS3ds
expr_stmt|;
name|assertSyncedTrue
argument_list|(
name|stats
argument_list|,
name|autoSyncMockS3ds
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
argument_list|,
name|getStream
argument_list|(
literal|"testContents2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsFileSyncedBinariesPropertyNotAllSyncedReturnsFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|Blob
name|mockBlob2
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|id2
init|=
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
literal|"testContents2"
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockBlob2
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Blob
argument_list|>
name|blobPropList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mockBlob
argument_list|,
name|mockBlob2
argument_list|)
decl_stmt|;
name|NodeStore
name|nodeStore
init|=
name|initNodeStore
argument_list|(
name|Optional
operator|.
expr|<
name|Blob
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Blob
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|String
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Integer
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|blobPropList
argument_list|)
argument_list|)
decl_stmt|;
name|stats
operator|=
operator|new
name|S3DataStoreStats
argument_list|()
expr_stmt|;
name|stats
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|stats
operator|.
name|s3ds
operator|=
name|autoSyncMockS3ds
expr_stmt|;
name|assertSyncedFalse
argument_list|(
name|stats
argument_list|,
name|autoSyncMockS3ds
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsFileSyncedBinarySyncedAndBinariesNotSyncedReturnsFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|Blob
name|mockBlob2
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|id2
init|=
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
literal|"testContents2"
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockBlob2
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id2
argument_list|)
expr_stmt|;
name|Blob
name|mockBlob3
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|id3
init|=
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
literal|"testContents3"
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockBlob2
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Blob
argument_list|>
name|blobPropList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mockBlob2
argument_list|,
name|mockBlob3
argument_list|)
decl_stmt|;
name|NodeStore
name|nodeStore
init|=
name|initNodeStore
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|mockBlob
argument_list|)
argument_list|,
name|Optional
operator|.
expr|<
name|Blob
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|String
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Integer
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|blobPropList
argument_list|)
argument_list|)
decl_stmt|;
name|stats
operator|=
operator|new
name|S3DataStoreStats
argument_list|()
expr_stmt|;
name|stats
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|stats
operator|.
name|s3ds
operator|=
name|autoSyncMockS3ds
expr_stmt|;
name|assertSyncedFalse
argument_list|(
name|stats
argument_list|,
name|autoSyncMockS3ds
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
argument_list|,
name|getStream
argument_list|(
literal|"testContents2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsFileSyncedBinaryNotSyncedAndBinariesSyncedReturnsFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|Blob
name|mockBlob2
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|id2
init|=
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
literal|"testContents2"
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockBlob2
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id2
argument_list|)
expr_stmt|;
name|Blob
name|mockBlob3
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|id3
init|=
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
literal|"testContents3"
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockBlob2
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Blob
argument_list|>
name|blobPropList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mockBlob2
argument_list|,
name|mockBlob3
argument_list|)
decl_stmt|;
name|NodeStore
name|nodeStore
init|=
name|initNodeStore
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|mockBlob
argument_list|)
argument_list|,
name|Optional
operator|.
expr|<
name|Blob
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|String
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Integer
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|blobPropList
argument_list|)
argument_list|)
decl_stmt|;
name|stats
operator|=
operator|new
name|S3DataStoreStats
argument_list|()
expr_stmt|;
name|stats
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|stats
operator|.
name|s3ds
operator|=
name|autoSyncMockS3ds
expr_stmt|;
name|assertSyncedFalse
argument_list|(
name|stats
argument_list|,
name|autoSyncMockS3ds
argument_list|,
name|getStream
argument_list|(
literal|"testContents2"
argument_list|)
argument_list|,
name|getStream
argument_list|(
literal|"testContents3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsFileSyncedBinaryAndBinariesSyncedReturnsTrue
parameter_list|()
throws|throws
name|Exception
block|{
name|Blob
name|mockBlob2
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|id2
init|=
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
literal|"testContents2"
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockBlob2
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id2
argument_list|)
expr_stmt|;
name|Blob
name|mockBlob3
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|id3
init|=
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
literal|"testContents3"
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockBlob2
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Blob
argument_list|>
name|blobPropList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mockBlob2
argument_list|,
name|mockBlob3
argument_list|)
decl_stmt|;
name|NodeStore
name|nodeStore
init|=
name|initNodeStore
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|mockBlob
argument_list|)
argument_list|,
name|Optional
operator|.
expr|<
name|Blob
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|String
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Integer
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|blobPropList
argument_list|)
argument_list|)
decl_stmt|;
name|stats
operator|=
operator|new
name|S3DataStoreStats
argument_list|()
expr_stmt|;
name|stats
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|stats
operator|.
name|s3ds
operator|=
name|autoSyncMockS3ds
expr_stmt|;
name|assertSyncedFalse
argument_list|(
name|stats
argument_list|,
name|autoSyncMockS3ds
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
argument_list|,
name|getStream
argument_list|(
literal|"testContents2"
argument_list|)
argument_list|,
name|getStream
argument_list|(
literal|"testContents3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|delete
parameter_list|(
name|SharedS3DataStore
name|s3ds
parameter_list|,
name|List
argument_list|<
name|DataRecord
argument_list|>
name|recs
parameter_list|)
throws|throws
name|DataStoreException
block|{
for|for
control|(
name|DataRecord
name|rec
range|:
name|recs
control|)
block|{
if|if
condition|(
literal|null
operator|!=
name|rec
condition|)
block|{
name|s3ds
operator|.
name|deleteRecord
argument_list|(
name|rec
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|assertSyncedFalse
parameter_list|(
name|S3DataStoreStats
name|mBean
parameter_list|,
name|SharedS3DataStore
name|s3ds
parameter_list|,
name|InputStream
modifier|...
name|streams
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|List
argument_list|<
name|DataRecord
argument_list|>
name|recs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|InputStream
name|is
range|:
name|streams
control|)
block|{
name|recs
operator|.
name|add
argument_list|(
name|s3ds
operator|.
name|addRecord
argument_list|(
name|is
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|mBean
operator|.
name|isFileSynced
argument_list|(
name|testNodePathName
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|delete
argument_list|(
name|s3ds
argument_list|,
name|recs
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assertSyncedTrue
parameter_list|(
name|S3DataStoreStats
name|mBean
parameter_list|,
name|SharedS3DataStore
name|s3ds
parameter_list|,
name|InputStream
modifier|...
name|streams
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|List
argument_list|<
name|DataRecord
argument_list|>
name|recs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|InputStream
name|is
range|:
name|streams
control|)
block|{
name|recs
operator|.
name|add
argument_list|(
name|s3ds
operator|.
name|addRecord
argument_list|(
name|is
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|mBean
operator|.
name|isFileSynced
argument_list|(
name|testNodePathName
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|delete
argument_list|(
name|s3ds
argument_list|,
name|recs
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|InputStream
name|getStream
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|str
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
comment|// A mock S3DataStore that allows us to replace the default
comment|// S3Backend with our own backend, for test purposes only.
specifier|private
class|class
name|CustomBackendS3DataStore
extends|extends
name|SharedS3DataStore
block|{
specifier|private
name|Backend
name|_localBackend
decl_stmt|;
name|CustomBackendS3DataStore
parameter_list|(
specifier|final
name|Backend
name|backend
parameter_list|)
block|{
name|_localBackend
operator|=
name|backend
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Backend
name|createBackend
parameter_list|()
block|{
return|return
name|_localBackend
return|;
block|}
block|}
comment|// A mock Backend implementation that uses a Map to keep track of what
comment|// records have been added and removed, for test purposes only.
specifier|private
class|class
name|TestMemoryBackend
implements|implements
name|Backend
block|{
specifier|final
name|Map
argument_list|<
name|DataIdentifier
argument_list|,
name|File
argument_list|>
name|_backend
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|CachingDataStore
name|store
parameter_list|,
name|String
name|homeDir
parameter_list|,
name|String
name|config
parameter_list|)
throws|throws
name|DataStoreException
block|{          }
annotation|@
name|Override
specifier|public
name|InputStream
name|read
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
block|{
try|try
block|{
return|return
operator|new
name|FileInputStream
argument_list|(
name|_backend
operator|.
name|get
argument_list|(
name|identifier
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
block|{
return|return
name|_backend
operator|.
name|get
argument_list|(
name|identifier
argument_list|)
operator|.
name|length
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLastModified
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
block|{
return|return
name|_backend
operator|.
name|get
argument_list|(
name|identifier
argument_list|)
operator|.
name|lastModified
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|,
name|File
name|file
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|_backend
operator|.
name|put
argument_list|(
name|identifier
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeAsync
parameter_list|(
specifier|final
name|DataIdentifier
name|identifier
parameter_list|,
specifier|final
name|File
name|file
parameter_list|,
name|AsyncUploadCallback
name|callback
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|write
argument_list|(
name|identifier
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|callback
operator|.
name|onSuccess
argument_list|(
operator|new
name|AsyncUploadResult
argument_list|(
name|identifier
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|DataIdentifier
argument_list|>
name|getAllIdentifiers
parameter_list|()
throws|throws
name|DataStoreException
block|{
return|return
name|_backend
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|,
name|boolean
name|touch
parameter_list|)
throws|throws
name|DataStoreException
block|{
if|if
condition|(
name|_backend
operator|.
name|containsKey
argument_list|(
name|identifier
argument_list|)
operator|&&
name|touch
condition|)
block|{
name|touch
argument_list|(
name|identifier
argument_list|,
operator|new
name|DateTime
argument_list|()
operator|.
name|getMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|exists
argument_list|(
name|identifier
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
block|{
return|return
name|_backend
operator|.
name|containsKey
argument_list|(
name|identifier
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|touch
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|,
name|long
name|minModifiedDate
parameter_list|)
throws|throws
name|DataStoreException
block|{          }
annotation|@
name|Override
specifier|public
name|void
name|touchAsync
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|,
name|long
name|minModifiedDate
parameter_list|,
name|AsyncTouchCallback
name|callback
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|callback
operator|.
name|onSuccess
argument_list|(
operator|new
name|AsyncTouchResult
argument_list|(
name|identifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|DataStoreException
block|{          }
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|DataIdentifier
argument_list|>
name|deleteAllOlderThan
parameter_list|(
name|long
name|timestamp
parameter_list|)
throws|throws
name|DataStoreException
block|{
specifier|final
name|Set
argument_list|<
name|DataIdentifier
argument_list|>
name|toDelete
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|DataIdentifier
name|identifier
range|:
name|_backend
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|_backend
operator|.
name|get
argument_list|(
name|identifier
argument_list|)
operator|.
name|lastModified
argument_list|()
operator|<
name|timestamp
condition|)
block|{
name|toDelete
operator|.
name|add
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
specifier|final
name|DataIdentifier
name|identifier
range|:
name|toDelete
control|)
block|{
name|_backend
operator|.
name|remove
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
block|}
return|return
name|toDelete
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteRecord
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
block|{
if|if
condition|(
name|_backend
operator|.
name|containsKey
argument_list|(
name|identifier
argument_list|)
condition|)
block|{
name|_backend
operator|.
name|remove
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// A modified TestMemoryBackend that, when writeAsync() is called, does not
comment|// actually store the record but keeps track that it was intended to be
comment|// stored, and allows the test to tell it when it expects the record
comment|// to be "synced".
specifier|private
class|class
name|ManuallySyncingInMemoryBackend
extends|extends
name|TestMemoryBackend
block|{
specifier|final
name|Map
argument_list|<
name|DataIdentifier
argument_list|,
name|File
argument_list|>
name|inProgessWrites
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|DataIdentifier
argument_list|,
name|AsyncUploadCallback
argument_list|>
name|asyncCallbacks
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|writeAsync
parameter_list|(
specifier|final
name|DataIdentifier
name|identifier
parameter_list|,
specifier|final
name|File
name|file
parameter_list|,
name|AsyncUploadCallback
name|callback
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|inProgessWrites
operator|.
name|put
argument_list|(
name|identifier
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|asyncCallbacks
operator|.
name|put
argument_list|(
name|identifier
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
name|void
name|clearInProgressWrites
parameter_list|()
throws|throws
name|DataStoreException
block|{
for|for
control|(
specifier|final
name|DataIdentifier
name|identifier
range|:
name|inProgessWrites
operator|.
name|keySet
argument_list|()
control|)
block|{
specifier|final
name|File
name|file
init|=
name|inProgessWrites
operator|.
name|get
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
name|asyncCallbacks
operator|.
name|get
argument_list|(
name|identifier
argument_list|)
operator|.
name|onSuccess
argument_list|(
operator|new
name|AsyncUploadResult
argument_list|(
name|identifier
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|identifier
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
name|inProgessWrites
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|InputStream
name|randomStream
parameter_list|(
name|int
name|seed
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
return|;
block|}
block|}
end_class

end_unit

