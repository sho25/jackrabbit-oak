begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|ReadOnly
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeTypeAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|FilterProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|withSettings
import|;
end_import

begin_class
specifier|final
class|class
name|MockUtility
block|{
specifier|private
name|MockUtility
parameter_list|()
block|{}
specifier|static
name|Tree
name|mockTree
parameter_list|(
annotation|@
name|NotNull
name|String
name|name
parameter_list|,
annotation|@
name|Nullable
name|String
name|ntName
parameter_list|,
name|boolean
name|exists
parameter_list|,
annotation|@
name|NotNull
name|String
modifier|...
name|propertyNames
parameter_list|)
block|{
name|Tree
name|t
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|t
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|exists
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|ntName
operator|!=
literal|null
condition|)
block|{
name|when
argument_list|(
name|t
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|createPrimaryTypeProperty
argument_list|(
name|ntName
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|propertyName
range|:
name|propertyNames
control|)
block|{
name|when
argument_list|(
name|t
operator|.
name|hasProperty
argument_list|(
name|propertyName
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|t
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|propertyName
argument_list|,
literal|"anyValue"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
specifier|static
name|Tree
name|mockTree
parameter_list|(
annotation|@
name|NotNull
name|String
name|name
parameter_list|,
annotation|@
name|NotNull
name|String
name|ntName
parameter_list|,
annotation|@
name|NotNull
name|String
name|path
parameter_list|,
annotation|@
name|NotNull
name|String
modifier|...
name|propertyNames
parameter_list|)
block|{
name|Tree
name|t
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|t
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|ntName
operator|!=
literal|null
condition|)
block|{
name|when
argument_list|(
name|t
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|createPrimaryTypeProperty
argument_list|(
name|ntName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|t
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|t
operator|.
name|isRoot
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|propertyName
range|:
name|propertyNames
control|)
block|{
name|when
argument_list|(
name|t
operator|.
name|hasProperty
argument_list|(
name|propertyName
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|t
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|propertyName
argument_list|,
literal|"anyValue"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
specifier|static
name|Tree
name|mockTree
parameter_list|(
annotation|@
name|NotNull
name|String
name|path
parameter_list|,
name|boolean
name|exists
parameter_list|)
block|{
name|Tree
name|tree
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|tree
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|tree
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|exists
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|tree
operator|.
name|isRoot
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tree
return|;
block|}
specifier|static
name|Tree
name|mockReadOnlyTree
parameter_list|(
annotation|@
name|NotNull
name|TreeType
name|type
parameter_list|)
block|{
name|Tree
name|readOnly
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|,
name|withSettings
argument_list|()
operator|.
name|extraInterfaces
argument_list|(
name|ReadOnly
operator|.
name|class
argument_list|,
name|TreeTypeAware
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
operator|(
operator|(
name|TreeTypeAware
operator|)
name|readOnly
operator|)
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|readOnly
return|;
block|}
specifier|static
name|NodeState
name|mockNodeState
parameter_list|(
annotation|@
name|NotNull
name|String
name|primaryType
parameter_list|)
block|{
return|return
name|when
argument_list|(
name|mock
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|createPrimaryTypeProperty
argument_list|(
name|primaryType
argument_list|)
argument_list|)
operator|.
name|getMock
argument_list|()
return|;
block|}
specifier|static
name|PropertyState
name|createPrimaryTypeProperty
parameter_list|(
annotation|@
name|NotNull
name|String
name|ntName
parameter_list|)
block|{
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|ntName
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
return|;
block|}
specifier|static
name|PropertyState
name|createMixinTypesProperty
parameter_list|(
annotation|@
name|NotNull
name|String
modifier|...
name|mixinTypes
parameter_list|)
block|{
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|mixinTypes
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
return|;
block|}
specifier|static
name|FilterProvider
name|mockFilterProvider
parameter_list|(
name|boolean
name|canHandle
parameter_list|)
block|{
name|Filter
name|filter
init|=
name|mock
argument_list|(
name|Filter
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|filter
operator|.
name|canHandle
argument_list|(
name|any
argument_list|(
name|Set
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|canHandle
argument_list|)
expr_stmt|;
name|FilterProvider
name|fp
init|=
name|mock
argument_list|(
name|FilterProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fp
operator|.
name|getFilter
argument_list|(
name|any
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Root
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|NamePathMapper
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|fp
return|;
block|}
block|}
end_class

end_unit

