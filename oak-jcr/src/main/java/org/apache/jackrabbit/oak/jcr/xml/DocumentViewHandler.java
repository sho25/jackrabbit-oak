begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceRegistry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|JcrUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_class
specifier|public
class|class
name|DocumentViewHandler
extends|extends
name|DefaultHandler
block|{
specifier|private
specifier|static
class|class
name|Context
block|{
specifier|private
specifier|final
name|Context
name|parent
decl_stmt|;
specifier|private
specifier|final
name|Node
name|node
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|StringBuilder
name|text
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|public
name|Context
parameter_list|(
name|Context
name|parent
parameter_list|,
name|Node
name|node
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|uri
init|=
name|namespaces
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
return|return
name|uri
return|;
block|}
elseif|else
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
return|return
name|parent
operator|.
name|getNamespaceURI
argument_list|(
name|prefix
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|node
operator|.
name|getSession
argument_list|()
operator|.
name|getNamespacePrefix
argument_list|(
name|uri
argument_list|)
return|;
block|}
block|}
specifier|public
name|String
name|toJcrName
parameter_list|(
name|String
name|qname
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|qname
operator|!=
literal|null
condition|)
block|{
name|int
name|colon
init|=
name|qname
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|colon
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|prefix
init|=
name|qname
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|colon
argument_list|)
decl_stmt|;
name|String
name|local
init|=
name|qname
operator|.
name|substring
argument_list|(
name|colon
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|uri
init|=
name|getNamespaceURI
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
return|return
name|toJcrName
argument_list|(
name|uri
argument_list|,
name|local
argument_list|,
name|qname
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|qname
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|String
name|toJcrName
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|local
parameter_list|,
name|String
name|qname
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
name|String
name|prefix
init|=
name|node
operator|.
name|getSession
argument_list|()
operator|.
name|getNamespacePrefix
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|local
return|;
block|}
else|else
block|{
return|return
name|prefix
operator|+
literal|":"
operator|+
name|local
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|local
operator|!=
literal|null
condition|)
block|{
return|return
name|local
return|;
block|}
else|else
block|{
return|return
name|toJcrName
argument_list|(
name|qname
argument_list|)
return|;
block|}
block|}
block|}
specifier|private
name|Context
name|context
decl_stmt|;
specifier|public
name|DocumentViewHandler
parameter_list|(
name|Node
name|parent
parameter_list|,
name|int
name|uuidBehavior
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
operator|new
name|Context
argument_list|(
literal|null
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
name|String
name|name
init|=
name|context
operator|.
name|toJcrName
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|context
operator|.
name|toJcrName
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
name|NamespaceRegistry
operator|.
name|NAMESPACE_JCR
argument_list|,
name|Property
operator|.
name|JCR_PRIMARY_TYPE
argument_list|)
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|context
operator|.
name|node
argument_list|,
name|name
argument_list|,
name|type
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atts
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|name
operator|=
name|context
operator|.
name|toJcrName
argument_list|(
name|atts
operator|.
name|getURI
argument_list|(
name|i
argument_list|)
argument_list|,
name|atts
operator|.
name|getLocalName
argument_list|(
name|i
argument_list|)
argument_list|,
name|atts
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"jcr:primaryType"
argument_list|)
condition|)
block|{
name|type
operator|=
name|context
operator|.
name|toJcrName
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|isNodeType
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|node
operator|.
name|setPrimaryType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"jcr:mixinTypes"
argument_list|)
condition|)
block|{
name|String
index|[]
name|types
init|=
name|atts
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|types
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|type
operator|=
name|context
operator|.
name|toJcrName
argument_list|(
name|types
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|isNodeType
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|node
operator|.
name|addMixin
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|node
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|atts
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|context
operator|=
operator|new
name|Context
argument_list|(
name|context
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
if|if
condition|(
name|context
operator|.
name|text
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Node
name|xmltext
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|context
operator|.
name|node
argument_list|,
literal|"jcr:xmltext"
argument_list|)
decl_stmt|;
name|xmltext
operator|.
name|setProperty
argument_list|(
literal|"jcr:xmlcharacters"
argument_list|,
name|context
operator|.
name|text
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|context
operator|=
name|context
operator|.
name|parent
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|context
operator|.
name|text
operator|.
name|append
argument_list|(
name|ch
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|context
operator|.
name|text
operator|.
name|append
argument_list|(
name|ch
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|SAXException
block|{
name|context
operator|.
name|namespaces
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|SAXException
block|{
name|context
operator|.
name|namespaces
operator|.
name|remove
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

