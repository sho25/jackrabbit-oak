begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
operator|.
name|CONSTRAINT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
operator|.
name|REMEMBER_REVISION_ORDER_MILLIS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|MODIFIED_IN_SECS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|MODIFIED_IN_SECS_RESOLUTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|NUM_REVS_THRESHOLD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|PREV_SPLIT_FACTOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|getModifiedInSecs
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|commit
operator|.
name|AnnotatingConflictHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|commit
operator|.
name|ConflictHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|commit
operator|.
name|ConflictValidatorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateOp
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateOp
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|cache
operator|.
name|CacheInvalidationStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|TimingDocumentStoreWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CompositeHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|DefaultEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|DefaultNodeStateDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|DocumentNodeStoreTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DocumentNodeStoreTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|DocumentMKBuilderProvider
name|builderProvider
init|=
operator|new
name|DocumentMKBuilderProvider
argument_list|()
decl_stmt|;
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|Revision
operator|.
name|resetClockToDefault
argument_list|()
expr_stmt|;
block|}
comment|// OAK-1254
annotation|@
name|Test
specifier|public
name|void
name|backgroundRead
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Semaphore
name|semaphore
init|=
operator|new
name|Semaphore
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|DocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentStore
name|testStore
init|=
operator|new
name|TimingDocumentStoreWrapper
argument_list|(
name|docStore
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|CacheInvalidationStats
name|invalidateCache
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
name|super
operator|.
name|invalidateCache
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|semaphore
operator|.
name|acquireUninterruptibly
argument_list|()
expr_stmt|;
name|semaphore
operator|.
name|release
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|DocumentNodeStore
name|store1
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|testStore
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|1
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|store2
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|2
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"node2"
argument_list|)
expr_stmt|;
name|store2
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// force update of _lastRevs
name|store2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|// at this point only node2 must not be visible
name|assertFalse
argument_list|(
name|store1
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|store1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"node1"
argument_list|)
expr_stmt|;
name|NodeState
name|root
init|=
name|store1
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|semaphore
operator|.
name|acquireUninterruptibly
argument_list|()
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|store1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// sleep until 'background thread' invalidated cache
comment|// and is waiting for semaphore
while|while
condition|(
operator|!
name|semaphore
operator|.
name|hasQueuedThreads
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
comment|// must still not be visible at this state
try|try
block|{
name|assertFalse
argument_list|(
name|root
operator|.
name|hasChildNode
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|semaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// background operations completed
name|root
operator|=
name|store1
operator|.
name|getRoot
argument_list|()
expr_stmt|;
comment|// now node2 is visible
name|assertTrue
argument_list|(
name|root
operator|.
name|hasChildNode
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|childNodeCache
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentNodeStore
name|store
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|int
name|max
init|=
call|(
name|int
call|)
argument_list|(
literal|100
operator|*
literal|1.5
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|children
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|max
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
literal|"c"
operator|+
name|i
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|String
name|name
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|children
argument_list|)
operator|.
name|get
argument_list|(
literal|100
operator|/
literal|2
argument_list|)
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
name|name
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|int
name|numEntries
init|=
name|Iterables
operator|.
name|size
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNodeEntries
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|max
operator|-
literal|1
argument_list|,
name|numEntries
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|childNodeEntries
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|DocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|query
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|fromKey
parameter_list|,
name|String
name|toKey
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|query
argument_list|(
name|collection
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|,
name|limit
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|DocumentNodeStore
name|store
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|root
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|root
operator|.
name|child
argument_list|(
literal|"node-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|merge
argument_list|(
name|root
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|counter
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// the following should just make one call to DocumentStore.query()
for|for
control|(
name|ChildNodeEntry
name|e
range|:
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|e
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|counter
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// now the child node entries are cached and no call should happen
for|for
control|(
name|ChildNodeEntry
name|e
range|:
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|e
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|rollback
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|Thread
argument_list|,
name|Semaphore
argument_list|>
name|locks
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|Thread
argument_list|,
name|Semaphore
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Semaphore
name|created
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|boolean
name|create
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|updateOps
parameter_list|)
block|{
name|Semaphore
name|semaphore
init|=
name|locks
operator|.
name|get
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
name|super
operator|.
name|create
argument_list|(
name|collection
argument_list|,
name|updateOps
argument_list|)
decl_stmt|;
if|if
condition|(
name|semaphore
operator|!=
literal|null
condition|)
block|{
name|created
operator|.
name|release
argument_list|()
expr_stmt|;
name|semaphore
operator|.
name|acquireUninterruptibly
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Exception
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|Exception
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|DocumentMK
name|mk
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|open
argument_list|()
decl_stmt|;
specifier|final
name|DocumentNodeStore
name|store
init|=
name|mk
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"deletedNode"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"updateNode"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"deletedNode"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
specifier|final
name|Revision
name|head
init|=
name|store
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|Thread
name|writer
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Revision
name|r
init|=
name|store
operator|.
name|newRevision
argument_list|()
decl_stmt|;
name|Commit
name|c
init|=
operator|new
name|Commit
argument_list|(
name|store
argument_list|,
name|r
argument_list|,
name|head
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|c
operator|.
name|addNode
argument_list|(
operator|new
name|DocumentNodeState
argument_list|(
name|store
argument_list|,
literal|"/newConflictingNode"
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|addNode
argument_list|(
operator|new
name|DocumentNodeState
argument_list|(
name|store
argument_list|,
literal|"/deletedNode"
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|updateProperty
argument_list|(
literal|"/updateNode"
argument_list|,
literal|"foo"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|c
operator|.
name|apply
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentStoreException
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|Semaphore
name|s
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|locks
operator|.
name|put
argument_list|(
name|writer
argument_list|,
name|s
argument_list|)
expr_stmt|;
comment|// will block in DocumentStore.create()
name|writer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for writer to create nodes
name|created
operator|.
name|acquireUninterruptibly
argument_list|()
expr_stmt|;
comment|// commit will succeed and add collision marker to writer commit
name|Revision
name|r
init|=
name|store
operator|.
name|newRevision
argument_list|()
decl_stmt|;
name|Commit
name|c
init|=
operator|new
name|Commit
argument_list|(
name|store
argument_list|,
name|r
argument_list|,
name|head
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|c
operator|.
name|addNode
argument_list|(
operator|new
name|DocumentNodeState
argument_list|(
name|store
argument_list|,
literal|"/newConflictingNode"
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|addNode
argument_list|(
operator|new
name|DocumentNodeState
argument_list|(
name|store
argument_list|,
literal|"/newNonConflictingNode"
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|apply
argument_list|()
expr_stmt|;
comment|// allow writer to continue
name|s
operator|.
name|release
argument_list|()
expr_stmt|;
name|writer
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected exception"
argument_list|,
literal|1
argument_list|,
name|exceptions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/newConflictingNode"
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|docStore
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"document with id "
operator|+
name|id
operator|+
literal|" does not exist"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"document with id "
operator|+
name|id
operator|+
literal|" should get _deletedOnce marked due to rollback"
argument_list|,
name|doc
operator|.
name|wasDeletedOnce
argument_list|()
argument_list|)
expr_stmt|;
name|id
operator|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/newNonConflictingNode"
argument_list|)
expr_stmt|;
name|doc
operator|=
name|docStore
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"document with id "
operator|+
name|id
operator|+
literal|" must not have _deletedOnce"
argument_list|,
name|doc
operator|.
name|get
argument_list|(
name|NodeDocument
operator|.
name|DELETED_ONCE
argument_list|)
argument_list|)
expr_stmt|;
name|id
operator|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/deletedNode"
argument_list|)
expr_stmt|;
name|doc
operator|=
name|docStore
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"document with id "
operator|+
name|id
operator|+
literal|" should get _deletedOnce marked due to rollback"
argument_list|,
name|doc
operator|.
name|wasDeletedOnce
argument_list|()
argument_list|)
expr_stmt|;
name|id
operator|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/updateNode"
argument_list|)
expr_stmt|;
name|doc
operator|=
name|docStore
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"document with id "
operator|+
name|id
operator|+
literal|" must not have _deletedOnce despite rollback"
argument_list|,
name|doc
operator|.
name|get
argument_list|(
name|NodeDocument
operator|.
name|DELETED_ONCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// OAK-1662
annotation|@
name|Test
specifier|public
name|void
name|getNewestRevision
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns1
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|1
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|ns1
operator|.
name|getRoot
argument_list|()
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|DocumentNodeStore
name|ns2
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|2
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|ns2
operator|.
name|getRoot
argument_list|()
expr_stmt|;
name|NodeBuilder
name|b1
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NodeDocument
operator|.
name|NUM_REVS_THRESHOLD
condition|;
name|i
operator|++
control|)
block|{
name|b1
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|merge
argument_list|(
name|b1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|NodeBuilder
name|b2
init|=
name|ns2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b2
operator|.
name|setProperty
argument_list|(
literal|"q"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|ns2
operator|.
name|merge
argument_list|(
name|b2
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|commitHookChangesOnBranch
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NUM_NODES
init|=
name|DocumentRootBuilder
operator|.
name|UPDATE_LIMIT
operator|/
literal|2
decl_stmt|;
specifier|final
name|int
name|NUM_PROPS
init|=
literal|10
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_NODES
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|c
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_PROPS
condition|;
name|j
operator|++
control|)
block|{
name|c
operator|.
name|setProperty
argument_list|(
literal|"q"
operator|+
name|j
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setProperty
argument_list|(
literal|"p"
operator|+
name|j
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|ns
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|CompositeHook
operator|.
name|compose
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|TestHook
argument_list|(
literal|"p"
argument_list|)
argument_list|,
operator|new
name|TestHook
argument_list|(
literal|"q"
argument_list|)
argument_list|,
name|FAILING_HOOK
argument_list|)
argument_list|)
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"merge must fail and reset changes done by commit hooks"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_NODES
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|c
init|=
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_PROPS
condition|;
name|j
operator|++
control|)
block|{
name|PropertyState
name|p
init|=
name|c
operator|.
name|getProperty
argument_list|(
literal|"p"
operator|+
name|j
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// must still see initial values before failed merge
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
comment|// same for property 'qX'
name|p
operator|=
name|c
operator|.
name|getProperty
argument_list|(
literal|"q"
operator|+
name|j
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// must still see initial values before failed merge
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ns
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|CompositeHook
operator|.
name|compose
argument_list|(
name|Arrays
operator|.
expr|<
name|CommitHook
operator|>
name|asList
argument_list|(
operator|new
name|TestHook
argument_list|(
literal|"p"
argument_list|)
argument_list|,
operator|new
name|TestHook
argument_list|(
literal|"q"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|builder
operator|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
comment|// must see properties changed by commit hook
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_NODES
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|c
init|=
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_PROPS
condition|;
name|j
operator|++
control|)
block|{
name|PropertyState
name|p
init|=
name|c
operator|.
name|getProperty
argument_list|(
literal|"p"
operator|+
name|j
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|=
name|c
operator|.
name|getProperty
argument_list|(
literal|"q"
operator|+
name|j
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// OAK-1814
annotation|@
name|Test
specifier|public
name|void
name|visibilityAfterRevisionComparatorPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|Clock
name|clock
init|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
decl_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|MemoryDocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|nodeStore1
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|1
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|nodeStore1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|DocumentNodeStore
name|nodeStore2
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|2
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|nodeStore3
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|3
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|docStore
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Revision
name|created
init|=
name|doc
operator|.
name|getLocalDeleted
argument_list|()
operator|.
name|firstKey
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|created
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|REMEMBER_REVISION_ORDER_MILLIS
operator|/
literal|2
argument_list|)
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|nodeStore2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|nodeStore2
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|nodeStore2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|REMEMBER_REVISION_ORDER_MILLIS
operator|+
literal|1000
argument_list|)
expr_stmt|;
name|nodeStore3
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|doc
operator|=
name|docStore
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|NodeState
name|state
init|=
name|doc
operator|.
name|getNodeAtRevision
argument_list|(
name|nodeStore3
argument_list|,
name|nodeStore3
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|modifiedReset
parameter_list|()
throws|throws
name|Exception
block|{
name|Clock
name|clock
init|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
decl_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|MemoryDocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns1
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|1
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder1
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder1
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|merge
argument_list|(
name|builder1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|DocumentNodeStore
name|ns2
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|2
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder2
init|=
name|ns2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder2
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
operator|.
name|child
argument_list|(
literal|"child-2"
argument_list|)
expr_stmt|;
name|ns2
operator|.
name|merge
argument_list|(
name|builder2
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// wait at least _modified resolution. in reality the wait may
comment|// not be necessary. e.g. when the clock passes the resolution boundary
comment|// exactly at this time
name|clock
operator|.
name|waitUntil
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|MODIFIED_IN_SECS_RESOLUTION
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|builder1
operator|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder1
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
operator|.
name|child
argument_list|(
literal|"child-1"
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|merge
argument_list|(
name|builder1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|// get current _modified timestamp on /node
name|NodeDocument
name|doc
init|=
name|docStore
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/node"
argument_list|)
argument_list|)
decl_stmt|;
name|Long
name|mod1
init|=
operator|(
name|Long
operator|)
name|doc
operator|.
name|get
argument_list|(
name|MODIFIED_IN_SECS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|mod1
argument_list|)
expr_stmt|;
name|ns2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|doc
operator|=
name|docStore
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/node"
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|mod2
init|=
operator|(
name|Long
operator|)
name|doc
operator|.
name|get
argument_list|(
name|MODIFIED_IN_SECS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|""
operator|+
name|mod2
operator|+
literal|"< "
operator|+
name|mod1
argument_list|,
name|mod2
operator|>=
name|mod1
argument_list|)
expr_stmt|;
block|}
comment|// OAK-1861
annotation|@
name|Test
specifier|public
name|void
name|readChildrenWithDeletedSiblings
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|maxLimit
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|query
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|fromKey
parameter_list|,
name|String
name|toKey
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
if|if
condition|(
name|collection
operator|==
name|NODES
condition|)
block|{
name|maxLimit
operator|.
name|set
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|limit
argument_list|,
name|maxLimit
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|query
argument_list|(
name|collection
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|,
name|limit
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"node-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|ns
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// now remove all except the last one
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|999
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"node-"
operator|+
name|i
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|ns
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|entry
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
comment|// must not read more than DocumentNodeState.INITIAL_FETCH_SIZE + 1
name|assertTrue
argument_list|(
name|maxLimit
operator|.
name|get
argument_list|()
operator|+
literal|"> "
operator|+
operator|(
name|DocumentNodeState
operator|.
name|INITIAL_FETCH_SIZE
operator|+
literal|1
operator|)
argument_list|,
name|maxLimit
operator|.
name|get
argument_list|()
operator|<=
name|DocumentNodeState
operator|.
name|INITIAL_FETCH_SIZE
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// OAK-1972
annotation|@
name|Test
specifier|public
name|void
name|readFromPreviousDoc
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|DocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"initial"
argument_list|)
expr_stmt|;
name|ns
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|ns
operator|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterId
argument_list|(
literal|2
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|getNodeStore
argument_list|()
expr_stmt|;
name|builder
operator|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|ns
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|Revision
name|rev
init|=
name|ns
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|docStore
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DocumentNodeState
name|state
init|=
name|doc
operator|.
name|getNodeAtRevision
argument_list|(
name|ns
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|hasProperty
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|state
operator|.
name|getProperty
argument_list|(
literal|"prop"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_REVS_THRESHOLD
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"v-"
operator|+
name|i
argument_list|)
expr_stmt|;
name|ns
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
name|ns
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|// must still return the same value as before the split
name|doc
operator|=
name|docStore
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|state
operator|=
name|doc
operator|.
name|getNodeAtRevision
argument_list|(
name|ns
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|hasProperty
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|state
operator|.
name|getProperty
argument_list|(
literal|"prop"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// OAK-2232
annotation|@
name|Test
specifier|public
name|void
name|diffExternalChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|modifiedResMillis
init|=
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|MODIFIED_IN_SECS_RESOLUTION
argument_list|)
decl_stmt|;
name|Clock
name|clock
init|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
decl_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|DocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns1
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|1
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns2
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|2
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|test
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DocumentMK
operator|.
name|MANY_CHILDREN_THRESHOLD
operator|*
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|test
operator|.
name|child
argument_list|(
literal|"node-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|ns1
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|ns2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|// make sure next change has a different _modified value
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|modifiedResMillis
operator|*
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|=
name|ns2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|ns2
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// 'wait' again for a different _modified value
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|modifiedResMillis
operator|*
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// remember current root for diff
name|NodeState
name|r1
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|ns2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|NodeState
name|r2
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
decl_stmt|;
comment|// are we able to see foo?
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|r2
operator|.
name|getChildNode
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"foo"
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|found
argument_list|)
expr_stmt|;
comment|// diff must report '/test' modified and '/test/foo' added
name|ClusterTest
operator|.
name|TrackingDiff
name|diff
init|=
operator|new
name|ClusterTest
operator|.
name|TrackingDiff
argument_list|()
decl_stmt|;
name|r2
operator|.
name|compareAgainstBaseState
argument_list|(
name|r1
argument_list|,
name|diff
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|diff
operator|.
name|modified
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|diff
operator|.
name|modified
operator|.
name|contains
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|diff
operator|.
name|added
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|diff
operator|.
name|added
operator|.
name|contains
argument_list|(
literal|"/test/foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|updateClusterState
parameter_list|()
block|{
name|DocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns1
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns2
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|ns1
operator|.
name|updateClusterState
argument_list|()
expr_stmt|;
name|ns2
operator|.
name|updateClusterState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ns1
operator|.
name|getInactiveClusterNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ns2
operator|.
name|getInactiveClusterNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ns1
operator|.
name|getActiveClusterNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ns2
operator|.
name|getActiveClusterNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|ns2
operator|.
name|updateClusterState
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|inactive
init|=
name|ns2
operator|.
name|getInactiveClusterNodes
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|active
init|=
name|ns2
operator|.
name|getActiveClusterNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|inactive
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|inactive
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|active
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|active
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// OAK-2288
annotation|@
name|Test
specifier|public
name|void
name|mergedBranchVisibility
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DocumentNodeStore
name|store
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|DocumentStore
name|docStore
init|=
name|store
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder1
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder1
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder1
argument_list|)
expr_stmt|;
name|builder1
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|NodeBuilder
name|node
init|=
name|builder1
operator|.
name|getChildNode
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test/node"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|// force creation of a branch
while|while
condition|(
name|docStore
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|id
argument_list|)
operator|==
literal|null
condition|)
block|{
name|node
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|i
operator|++
argument_list|)
expr_stmt|;
block|}
name|NodeDocument
name|doc
init|=
name|docStore
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Revision
name|rev
init|=
name|doc
operator|.
name|getLocalDeleted
argument_list|()
operator|.
name|firstKey
argument_list|()
decl_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder1
argument_list|)
expr_stmt|;
comment|// must not be visible at the revision of the branch commit
name|assertFalse
argument_list|(
name|store
operator|.
name|getRoot
argument_list|(
name|rev
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"node"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// must be visible at the revision of the merged branch
name|assertTrue
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"node"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// OAK-2308
annotation|@
name|Test
specifier|public
name|void
name|recoverBranchCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|Clock
name|clock
init|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
decl_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|MemoryDocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|store1
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store1
argument_list|,
name|builder
argument_list|)
expr_stmt|;
comment|// make sure all _lastRevs are written back
name|store1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|builder
operator|=
name|store1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|NodeBuilder
name|node
init|=
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test/node"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|// force creation of a branch
while|while
condition|(
name|docStore
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|id
argument_list|)
operator|==
literal|null
condition|)
block|{
name|node
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|i
operator|++
argument_list|)
expr_stmt|;
block|}
name|merge
argument_list|(
name|store1
argument_list|,
name|builder
argument_list|)
expr_stmt|;
comment|// wait until lease expires
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|store1
operator|.
name|getClusterInfo
argument_list|()
operator|.
name|getLeaseTime
argument_list|()
operator|+
literal|1000
argument_list|)
expr_stmt|;
comment|// run recovery for this store
name|LastRevRecoveryAgent
name|agent
init|=
name|store1
operator|.
name|getLastRevRecoveryAgent
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|agent
operator|.
name|isRecoveryNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|agent
operator|.
name|recover
argument_list|(
name|store1
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
comment|// start a second store
name|DocumentNodeStore
name|store2
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
comment|// must see /test/node
name|assertTrue
argument_list|(
name|store2
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"node"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// OAK-2336
annotation|@
name|Test
specifier|public
name|void
name|readBranchCommit
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|readSet
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|DocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|find
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|readSet
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|find
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|String
name|testId
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|NodeBuilder
name|test
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
comment|// force creation of branch
name|int
name|q
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|testId
argument_list|)
operator|==
literal|null
condition|)
block|{
name|test
operator|.
name|setProperty
argument_list|(
literal|"q"
argument_list|,
name|q
operator|++
argument_list|)
expr_stmt|;
block|}
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
comment|// commit enough changes for a previous doc
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_REVS_THRESHOLD
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"q"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
comment|// trigger split
name|ns
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|readSet
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// must not access previous document of /test
name|doc
operator|.
name|getNodeAtRevision
argument_list|(
name|ns
argument_list|,
name|ns
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|Sets
operator|.
name|newHashSet
argument_list|(
name|readSet
argument_list|)
control|)
block|{
name|doc
operator|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|.
name|isSplitDocument
argument_list|()
operator|&&
operator|!
name|doc
operator|.
name|getMainPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"must not access previous document: "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// OAK-2345
annotation|@
name|Test
specifier|public
name|void
name|inactiveClusterId
parameter_list|()
throws|throws
name|Exception
block|{
name|Clock
name|clock
init|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
decl_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|MemoryDocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns1
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|1
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns1
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|Revision
name|r
init|=
name|ns1
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|ns1
operator|.
name|dispose
argument_list|()
expr_stmt|;
comment|// start other cluster node
name|DocumentNodeStore
name|ns2
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|2
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ns2
operator|.
name|getRevisionComparator
argument_list|()
operator|.
name|getRevisionSeen
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|ns2
operator|.
name|dispose
argument_list|()
expr_stmt|;
comment|// wait until revision is old
name|clock
operator|.
name|waitUntil
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|REMEMBER_REVISION_ORDER_MILLIS
operator|+
literal|1000
argument_list|)
expr_stmt|;
comment|// start cluster 2 again
name|ns2
operator|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|2
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|getNodeStore
argument_list|()
expr_stmt|;
comment|// now r is considered old and revisionSeen is null
name|assertNull
argument_list|(
name|ns2
operator|.
name|getRevisionComparator
argument_list|()
operator|.
name|getRevisionSeen
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// OAK-1782
annotation|@
name|Test
specifier|public
name|void
name|diffOnce
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|numQueries
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|query
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|fromKey
parameter_list|,
name|String
name|toKey
parameter_list|,
name|String
name|indexedProperty
parameter_list|,
name|long
name|startValue
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|numQueries
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|query
argument_list|(
name|collection
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|,
name|indexedProperty
argument_list|,
name|startValue
argument_list|,
name|limit
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|DocumentNodeStore
name|ns
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// make sure we have enough children to trigger diffManyChildren
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DocumentMK
operator|.
name|MANY_CHILDREN_THRESHOLD
operator|*
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"node-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
specifier|final
name|Revision
name|head
init|=
name|ns
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
specifier|final
name|Revision
name|to
init|=
operator|new
name|Revision
argument_list|(
name|head
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|1000
argument_list|,
literal|0
argument_list|,
name|head
operator|.
name|getClusterId
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numReaders
init|=
literal|10
decl_stmt|;
specifier|final
name|CountDownLatch
name|ready
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numReaders
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|go
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|readers
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numReaders
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|ready
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|go
operator|.
name|await
argument_list|()
expr_stmt|;
name|ns
operator|.
name|diff
argument_list|(
name|head
operator|.
name|toString
argument_list|()
argument_list|,
name|to
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|readers
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|ready
operator|.
name|await
argument_list|()
expr_stmt|;
name|numQueries
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|go
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|Thread
name|t
range|:
name|readers
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|// must not perform more than two queries
comment|// 1) query the first 50 children to find out there are many
comment|// 2) query for the changed children between the two revisions
name|assertTrue
argument_list|(
name|numQueries
operator|.
name|get
argument_list|()
operator|<=
literal|2
argument_list|)
expr_stmt|;
block|}
comment|// OAK-2359
annotation|@
name|Test
specifier|public
name|void
name|readNullEntry
parameter_list|()
throws|throws
name|CommitFailedException
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|reads
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|MemoryDocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|find
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|reads
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|find
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|DocumentNodeStore
name|store
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterId
argument_list|(
literal|1
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|Revision
name|removedAt
init|=
name|store
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
comment|// update node until we have at least two levels of split documents
while|while
condition|(
name|docStore
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|id
argument_list|)
operator|.
name|getPreviousRanges
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
name|PREV_SPLIT_FACTOR
condition|)
block|{
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"count"
argument_list|,
name|count
operator|++
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|store
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
block|}
name|NodeDocument
name|doc
init|=
name|docStore
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|reads
operator|.
name|clear
argument_list|()
expr_stmt|;
name|doc
operator|.
name|getNodeAtRevision
argument_list|(
name|store
argument_list|,
name|store
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNoPreviousDocs
argument_list|(
name|reads
argument_list|)
expr_stmt|;
name|reads
operator|.
name|clear
argument_list|()
expr_stmt|;
name|doc
operator|.
name|getValueMap
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|(
name|removedAt
argument_list|)
expr_stmt|;
name|assertNoPreviousDocs
argument_list|(
name|reads
argument_list|)
expr_stmt|;
block|}
comment|// OAK-2464
annotation|@
name|Test
specifier|public
name|void
name|useDocChildCacheForFindingNodes
parameter_list|()
throws|throws
name|CommitFailedException
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|reads
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|MemoryDocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|find
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|reads
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|find
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|DocumentNodeStore
name|store
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterId
argument_list|(
literal|1
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|NodeState
name|parentState
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|reads
operator|.
name|clear
argument_list|()
expr_stmt|;
name|NodeState
name|nonExistingChild
init|=
name|parentState
operator|.
name|getChildNode
argument_list|(
literal|"non-existing-node-1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should not go to DocStore::find for a known non-existent child"
argument_list|,
literal|0
argument_list|,
name|reads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Non existing children should be reported as such"
argument_list|,
name|nonExistingChild
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|NodeBuilder
name|childPropBuilder
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|childPropBuilder
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|parentState
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|reads
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nonExistingChild
operator|=
name|parentState
operator|.
name|getChildNode
argument_list|(
literal|"non-existing-node-2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should not go to DocStore::find for a known non-existent child,"
operator|+
literal|" even if another merge has happened (on another sub-tree)"
argument_list|,
literal|0
argument_list|,
name|reads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Non existing children should be reported as such"
argument_list|,
name|nonExistingChild
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|invalidateNodeChildrenCache
argument_list|()
expr_stmt|;
comment|//force filling up doc child cache
name|parentState
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|Iterables
operator|.
name|size
argument_list|(
name|parentState
operator|.
name|getChildNodeEntries
argument_list|()
argument_list|)
expr_stmt|;
name|reads
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nonExistingChild
operator|=
name|parentState
operator|.
name|getChildNode
argument_list|(
literal|"non-existing-node-3"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should not go to DocStore::find when doc child cache is filled by reading"
argument_list|,
literal|0
argument_list|,
name|reads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Non existing children should be reported as such"
argument_list|,
name|nonExistingChild
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ignoreDocChildCacheForIncompleteEntry
parameter_list|()
throws|throws
name|CommitFailedException
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|reads
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|MemoryDocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|find
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|reads
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|find
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|DocumentNodeStore
name|store
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUseSimpleRevision
argument_list|(
literal|true
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|1
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|parentBuilder
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
comment|//create> INITIAL_FETCH_SIZE children to have incomplete child cache entries
name|int
name|numChildren
init|=
name|DocumentNodeState
operator|.
name|INITIAL_FETCH_SIZE
operator|+
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numChildren
condition|;
name|i
operator|++
control|)
block|{
name|parentBuilder
operator|.
name|child
argument_list|(
literal|"child"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|store
operator|.
name|invalidateNodeChildrenCache
argument_list|()
expr_stmt|;
comment|//force filling up doc child cache
name|NodeState
name|parentNodeState
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Iterables
operator|.
name|size
argument_list|(
name|parentNodeState
operator|.
name|getChildNodeEntries
argument_list|()
argument_list|)
expr_stmt|;
name|reads
operator|.
name|clear
argument_list|()
expr_stmt|;
name|NodeState
name|nonExistingChild
init|=
name|parentNodeState
operator|.
name|getChildNode
argument_list|(
literal|"non-existing-child-1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"DocStore should be queried when no doc child cache entry has all children"
argument_list|,
name|reads
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Non existing children should be reported as such"
argument_list|,
name|nonExistingChild
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|docChildCacheWithIncompatiblDocStoreSort
parameter_list|()
throws|throws
name|CommitFailedException
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|reads
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
specifier|final
name|ConcurrentSkipListMap
argument_list|<
name|String
argument_list|,
name|NodeDocument
argument_list|>
name|nodes
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|String
argument_list|,
name|NodeDocument
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|o1
parameter_list|,
name|String
name|o2
parameter_list|)
block|{
name|int
name|ret
init|=
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
decl_stmt|;
if|if
condition|(
name|o1
operator|.
name|indexOf
argument_list|(
literal|"child"
argument_list|)
operator|>
literal|0
operator|&&
name|o2
operator|.
name|indexOf
argument_list|(
literal|"child"
argument_list|)
operator|>
literal|0
condition|)
block|{
name|ret
operator|=
operator|(
operator|-
name|ret
operator|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|MemoryDocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|ConcurrentSkipListMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|getMap
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|)
block|{
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
condition|)
block|{
return|return
operator|(
name|ConcurrentSkipListMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
operator|)
name|nodes
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getMap
argument_list|(
name|collection
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|find
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|reads
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|find
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|DocumentNodeStore
name|store
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUseSimpleRevision
argument_list|(
literal|true
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|1
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|//create< INITIAL_FETCH_SIZE children to have complete child cache entries
name|NodeBuilder
name|parentBuilder
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|int
name|numChildren
init|=
name|DocumentNodeState
operator|.
name|INITIAL_FETCH_SIZE
operator|-
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numChildren
condition|;
name|i
operator|++
control|)
block|{
name|parentBuilder
operator|.
name|child
argument_list|(
literal|"child"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|store
operator|.
name|invalidateNodeChildrenCache
argument_list|()
expr_stmt|;
comment|//Force fill child node cache
name|NodeState
name|parentNodeState
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|Iterables
operator|.
name|size
argument_list|(
name|parentNodeState
operator|.
name|getChildNodeEntries
argument_list|()
argument_list|)
expr_stmt|;
name|reads
operator|.
name|clear
argument_list|()
expr_stmt|;
name|NodeState
name|nonExistingChild
init|=
name|parentNodeState
operator|.
name|getChildNode
argument_list|(
literal|"child501-non-existing-child"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Fully cached entry in doc child cache should be able to find non existing children"
operator|+
literal|" even if doc store sort order is incompatible to that of Java"
argument_list|,
literal|0
argument_list|,
name|reads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Non existing children should be reported as such"
argument_list|,
name|nonExistingChild
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|invalidateNodeCache
argument_list|(
literal|"/parent/child25"
argument_list|,
name|store
operator|.
name|getHeadRevision
argument_list|()
argument_list|)
expr_stmt|;
name|reads
operator|.
name|clear
argument_list|()
expr_stmt|;
name|NodeState
name|existingChild
init|=
name|parentNodeState
operator|.
name|getChildNode
argument_list|(
literal|"child25"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Fully cached entry in doc child cache should be able to find existing children"
operator|+
literal|" even if doc store sort order is incompatible to that of Java"
argument_list|,
name|reads
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Existing children should be reported as such"
argument_list|,
name|existingChild
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// OAK-2929
annotation|@
name|Test
specifier|public
name|void
name|conflictDetectionWithClockDifference
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Clock
name|c1
init|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
decl_stmt|;
name|c1
operator|.
name|waitUntil
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|Revision
operator|.
name|setClock
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|DocumentNodeStore
name|ns1
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|clock
argument_list|(
name|c1
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|b1
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns1
argument_list|,
name|b1
argument_list|)
expr_stmt|;
comment|// make /node visible
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|Revision
operator|.
name|resetClockToDefault
argument_list|()
expr_stmt|;
name|Clock
name|c2
init|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
decl_stmt|;
comment|// c2 is five seconds ahead
name|c2
operator|.
name|waitUntil
argument_list|(
name|now
operator|+
literal|5000
argument_list|)
expr_stmt|;
name|Revision
operator|.
name|setClock
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|DocumentNodeStore
name|ns2
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|clock
argument_list|(
name|c2
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
comment|// ns2 sees /node
name|assertTrue
argument_list|(
name|ns2
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"node"
argument_list|)
argument_list|)
expr_stmt|;
comment|// add a child /node/foo
name|NodeBuilder
name|b2
init|=
name|ns2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b2
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns2
argument_list|,
name|b2
argument_list|)
expr_stmt|;
comment|// make /node/foo visible
name|ns2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|Revision
operator|.
name|resetClockToDefault
argument_list|()
expr_stmt|;
name|Revision
operator|.
name|setClock
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|b1
operator|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
comment|// ns1 sees /node/foo as well
name|assertTrue
argument_list|(
name|b1
operator|.
name|getChildNode
argument_list|(
literal|"node"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove both /node and /node/foo
name|b1
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|merge
argument_list|(
name|ns1
argument_list|,
name|b1
argument_list|)
expr_stmt|;
name|Revision
operator|.
name|resetClockToDefault
argument_list|()
expr_stmt|;
name|Revision
operator|.
name|setClock
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|b2
operator|=
name|ns2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|b2
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
try|try
block|{
name|merge
argument_list|(
name|ns2
argument_list|,
name|b2
argument_list|)
expr_stmt|;
comment|// must not be able to add another child node
name|fail
argument_list|(
literal|"must fail with CommitFailedException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|// OAK-2929
annotation|@
name|Test
specifier|public
name|void
name|parentWithUnseenChildrenMustNotBeDeleted
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MemoryDocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
specifier|final
name|DocumentNodeStore
name|store1
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|1
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|store1
operator|.
name|setEnableConcurrentAddRemove
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|DocumentNodeStore
name|store2
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|2
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|store2
operator|.
name|setEnableConcurrentAddRemove
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|store1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store1
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|store1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|store2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|builder
operator|=
name|store1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"parent"
argument_list|)
operator|.
name|child
argument_list|(
literal|"node1"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store1
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|=
name|store2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"parent"
argument_list|)
operator|.
name|child
argument_list|(
literal|"node2"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store2
argument_list|,
name|builder
argument_list|)
expr_stmt|;
comment|//Test 1 - parent shouldn't be removable if order of operation is:
comment|//# N1 and N2 know about /:hidden
comment|//# N1->create(/:hidden/parent/node1)
comment|//# N2->create(/:hidden/parent/node2)
comment|//# N1->remove(/:hidden/parent)
name|builder
operator|=
name|store1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"parent"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
try|try
block|{
name|merge
argument_list|(
name|store1
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"parent node of unseen children must not get deleted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|cfe
parameter_list|)
block|{
comment|//this merge should fail -- but our real check is done by asserting that parent remains intact
block|}
name|String
name|parentPath
init|=
literal|"/:hidden/parent"
decl_stmt|;
name|NodeDocument
name|parentDoc
init|=
name|docStore
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|parentPath
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"parent node of unseen children must not get deleted"
argument_list|,
name|isDocDeleted
argument_list|(
name|parentDoc
argument_list|,
name|store1
operator|.
name|getRevisionComparator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//Test 2 - parent shouldn't be removable if order of operation is:
comment|//# N1 and N2 know about /:hidden
comment|//# N1->create(/:hidden/parent/node1)
comment|//# N2->create(/:hidden/parent/node2)
comment|//# N2->remove(/:hidden/parent)
name|builder
operator|=
name|store2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"parent"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
try|try
block|{
name|merge
argument_list|(
name|store2
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"parent node of unseen children must not get deleted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|cfe
parameter_list|)
block|{
comment|//this merge should fail -- but our real check is done by asserting that parent remains intact
block|}
name|parentDoc
operator|=
name|docStore
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|parentPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"parent node of unseen children must not get deleted"
argument_list|,
name|isDocDeleted
argument_list|(
name|parentDoc
argument_list|,
name|store2
operator|.
name|getRevisionComparator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|store1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|store2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|builder
operator|=
name|store1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"parent"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"parent1"
argument_list|)
expr_stmt|;
name|store1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|store2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|builder
operator|=
name|store1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"parent1"
argument_list|)
operator|.
name|child
argument_list|(
literal|"node1"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store1
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|=
name|store2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"parent1"
argument_list|)
operator|.
name|child
argument_list|(
literal|"node2"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store2
argument_list|,
name|builder
argument_list|)
expr_stmt|;
comment|//Test 3 - parent shouldn't be removable if order of operation is:
comment|//# N1 and N2 know about /:hidden/parent1
comment|//# N1->create(/:hidden/parent1/node1)
comment|//# N2->create(/:hidden/parent1/node2)
comment|//# N1->remove(/:hidden/parent1)
name|builder
operator|=
name|store1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"parent1"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
try|try
block|{
name|merge
argument_list|(
name|store1
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|cfe
parameter_list|)
block|{
comment|//this merge should fail -- but our real check is done by asserting that parent remains intact
block|}
name|parentPath
operator|=
literal|"/:hidden/parent1"
expr_stmt|;
name|parentDoc
operator|=
name|docStore
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|parentPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"parent node of unseen children must not get deleted"
argument_list|,
name|isDocDeleted
argument_list|(
name|parentDoc
argument_list|,
name|store1
operator|.
name|getRevisionComparator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//Test 4 - parent shouldn't be removable if order of operation is:
comment|//# N1 and N2 know about /:hidden/parent1
comment|//# N1->create(/:hidden/parent1/node1)
comment|//# N2->create(/:hidden/parent1/node2)
comment|//# N2->remove(/:hidden/parent1)
name|builder
operator|=
name|store2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"parent1"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
try|try
block|{
name|merge
argument_list|(
name|store2
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|cfe
parameter_list|)
block|{
comment|//this merge should fail -- but our real check is done by asserting that parent remains intact
block|}
name|parentDoc
operator|=
name|docStore
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|parentPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"parent node of unseen children must not get deleted"
argument_list|,
name|isDocDeleted
argument_list|(
name|parentDoc
argument_list|,
name|store2
operator|.
name|getRevisionComparator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mergeInternalDocAcrossCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryDocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
specifier|final
name|DocumentNodeStore
name|store1
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|1
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|store1
operator|.
name|setEnableConcurrentAddRemove
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|DocumentNodeStore
name|store2
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|2
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|store2
operator|.
name|setEnableConcurrentAddRemove
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|NodeState
name|root
decl_stmt|;
name|NodeBuilder
name|builder
decl_stmt|;
comment|//Prepare repo
name|root
operator|=
name|store1
operator|.
name|getRoot
argument_list|()
expr_stmt|;
name|builder
operator|=
name|root
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"deleteDeleted"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"deleteChanged"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"changeDeleted"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store1
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|store1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|store2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|//Changes in store1
name|root
operator|=
name|store1
operator|.
name|getRoot
argument_list|()
expr_stmt|;
name|builder
operator|=
name|root
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"visible"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"deleteDeleted"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"changeDeleted"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"deleteChanged"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":dynHidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":dynHidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"childWithProp"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store1
argument_list|,
name|builder
argument_list|)
expr_stmt|;
comment|//Changes in store2
comment|//root would hold reference to store2 root state after initial repo initialization
name|root
operator|=
name|store2
operator|.
name|getRoot
argument_list|()
expr_stmt|;
comment|//The hidden node and children should be creatable across cluster concurrently
name|builder
operator|=
name|root
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":dynHidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store2
argument_list|,
name|builder
argument_list|)
expr_stmt|;
comment|//Deleted deleted conflict of internal node should work across cluster concurrently
name|builder
operator|=
name|root
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"deleteDeleted"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|merge
argument_list|(
name|store2
argument_list|,
name|builder
argument_list|)
expr_stmt|;
comment|//Avoid repeated merge tries ... fail early
name|store2
operator|.
name|setMaxBackOffMillis
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|boolean
name|commitFailed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|builder
operator|=
name|root
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"visible"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store2
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|cfe
parameter_list|)
block|{
name|commitFailed
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Concurrent creation of visible node across cluster must fail"
argument_list|,
name|commitFailed
argument_list|)
expr_stmt|;
name|commitFailed
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|builder
operator|=
name|root
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":dynHidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"childWithProp"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store2
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|cfe
parameter_list|)
block|{
name|commitFailed
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Concurrent creation of hidden node with properties across cluster must fail"
argument_list|,
name|commitFailed
argument_list|)
expr_stmt|;
name|commitFailed
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|builder
operator|=
name|root
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"deleteChanged"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|merge
argument_list|(
name|store2
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|cfe
parameter_list|)
block|{
name|commitFailed
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Delete changed merge across cluster must fail even under hidden tree"
argument_list|,
name|commitFailed
argument_list|)
expr_stmt|;
name|commitFailed
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|builder
operator|=
name|root
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
operator|.
name|child
argument_list|(
literal|"changeDeleted"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store2
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|cfe
parameter_list|)
block|{
name|commitFailed
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Change deleted merge across cluster must fail even under hidden tree"
argument_list|,
name|commitFailed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mergeDeleteDeleteEmptyInternalDoc
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DocumentNodeStore
name|store
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|store
operator|.
name|setEnableConcurrentAddRemove
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":a"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":b"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|SingleInstanceConflictUtility
operator|.
name|generateConflict
argument_list|(
name|store
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":1"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":a"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":2"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":b"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":3"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":a"
block|,
literal|":b"
block|}
argument_list|,
literal|true
argument_list|,
literal|"Delete-delete merge conflicts for internal docs should be resolved"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mergeDeleteDeleteNonEmptyInternalDocShouldFail
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DocumentNodeStore
name|store
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|store
operator|.
name|setEnableConcurrentAddRemove
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":b"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|SingleInstanceConflictUtility
operator|.
name|generateConflict
argument_list|(
name|store
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":1"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":a"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":2"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":b"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":3"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":a"
block|,
literal|":b"
block|}
argument_list|,
literal|false
argument_list|,
literal|"Delete-delete merge conflicts for non-empty internal docs should fail"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mergeDeleteDeleteNormalDocShouldFail
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DocumentNodeStore
name|store
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|store
operator|.
name|setEnableConcurrentAddRemove
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|SingleInstanceConflictUtility
operator|.
name|generateConflict
argument_list|(
name|store
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":1"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":2"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"b"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":3"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|false
argument_list|,
literal|"Delete-delete merge conflicts for normal docs should fail"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mergeAddAddEmptyInternalDoc
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DocumentNodeStore
name|store
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|store
operator|.
name|setEnableConcurrentAddRemove
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SingleInstanceConflictUtility
operator|.
name|generateConflict
argument_list|(
name|store
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":1"
block|,
literal|":a"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":2"
block|,
literal|":b"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":3"
block|,
literal|":a"
block|,
literal|":b"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
literal|true
argument_list|,
literal|"Add-add merge conflicts for internal docs should be resolvable"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mergeAddAddNonEmptyInternalDocShouldFail
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DocumentNodeStore
name|store
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|store
operator|.
name|setEnableConcurrentAddRemove
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SingleInstanceConflictUtility
operator|.
name|generateConflict
argument_list|(
name|store
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":1"
block|,
literal|":a"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
literal|true
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":2"
block|,
literal|":b"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
literal|true
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":3"
block|,
literal|":a"
block|,
literal|":b"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|"Add-add merge conflicts for non empty internal docs should fail"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mergeAddAddNormalDocShouldFail
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DocumentNodeStore
name|store
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|store
operator|.
name|setEnableConcurrentAddRemove
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SingleInstanceConflictUtility
operator|.
name|generateConflict
argument_list|(
name|store
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":1"
block|,
literal|"a"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":2"
block|,
literal|"b"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":3"
block|,
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
literal|false
argument_list|,
literal|"Add-add merge conflicts for normal docs should fail"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mergeDeleteChangedInternalDocShouldFail
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DocumentNodeStore
name|store
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|store
operator|.
name|setEnableConcurrentAddRemove
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":a"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":b"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|SingleInstanceConflictUtility
operator|.
name|generateConflict
argument_list|(
name|store
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":1"
block|,
literal|":a"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
literal|true
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":2"
block|,
literal|":b"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
literal|true
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":3"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":a"
block|,
literal|":b"
block|}
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|"Delete changed merge conflicts for internal docs should fail"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mergeChangeDeletedInternalDocShouldFail
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DocumentNodeStore
name|store
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|store
operator|.
name|setEnableConcurrentAddRemove
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":a"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":b"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|SingleInstanceConflictUtility
operator|.
name|generateConflict
argument_list|(
name|store
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":1"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":a"
block|}
argument_list|,
literal|false
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":2"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":b"
block|}
argument_list|,
literal|false
argument_list|,
operator|new
name|String
index|[]
block|{
literal|":3"
block|,
literal|":a"
block|,
literal|":b"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|"Change deleted merge conflicts for internal docs should fail"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|retrieve
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentNodeStore
name|store
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|String
name|ref
init|=
name|store
operator|.
name|checkpoint
argument_list|(
literal|60000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|store
operator|.
name|retrieve
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
name|ref
operator|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|store
operator|.
name|retrieve
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
name|ref
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|store
operator|.
name|retrieve
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
comment|// OAK-3388
annotation|@
name|Test
specifier|public
name|void
name|clusterWithClockDifferences
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Clock
name|c1
init|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
decl_stmt|;
name|c1
operator|.
name|waitUntil
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|Revision
operator|.
name|setClock
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|DocumentNodeStore
name|ns1
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|clock
argument_list|(
name|c1
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|b1
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns1
argument_list|,
name|b1
argument_list|)
expr_stmt|;
comment|// make /node visible
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|Revision
operator|.
name|resetClockToDefault
argument_list|()
expr_stmt|;
name|Clock
name|c2
init|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
decl_stmt|;
comment|// c2 is five seconds ahead
name|c2
operator|.
name|waitUntil
argument_list|(
name|now
operator|+
literal|5000
argument_list|)
expr_stmt|;
name|Revision
operator|.
name|setClock
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|DocumentNodeStore
name|ns2
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|clock
argument_list|(
name|c2
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
comment|// ns2 sees /node
name|assertTrue
argument_list|(
name|ns2
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"node"
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove /node on ns2
name|NodeBuilder
name|b2
init|=
name|ns2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b2
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|merge
argument_list|(
name|ns2
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|ns2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|// add /node again on ns1
name|Revision
operator|.
name|resetClockToDefault
argument_list|()
expr_stmt|;
name|Revision
operator|.
name|setClock
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|b1
operator|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|b1
operator|.
name|hasChildNode
argument_list|(
literal|"node"
argument_list|)
argument_list|)
expr_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns1
argument_list|,
name|b1
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|// check if /node is visible on ns2
name|Revision
operator|.
name|resetClockToDefault
argument_list|()
expr_stmt|;
name|Revision
operator|.
name|setClock
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|ns2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|b2
operator|=
name|ns2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|b2
operator|.
name|hasChildNode
argument_list|(
literal|"node"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// OAK-3388
annotation|@
name|Test
specifier|public
name|void
name|clusterWithClockDifferences2
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Clock
name|c1
init|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
decl_stmt|;
name|c1
operator|.
name|waitUntil
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|Revision
operator|.
name|setClock
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|DocumentNodeStore
name|ns1
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|clock
argument_list|(
name|c1
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|b1
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns1
argument_list|,
name|b1
argument_list|)
expr_stmt|;
comment|// make /node visible
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|Revision
operator|.
name|resetClockToDefault
argument_list|()
expr_stmt|;
name|Clock
name|c2
init|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
decl_stmt|;
comment|// c2 is five seconds ahead
name|c2
operator|.
name|waitUntil
argument_list|(
name|now
operator|+
literal|5000
argument_list|)
expr_stmt|;
name|Revision
operator|.
name|setClock
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|DocumentNodeStore
name|ns2
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|clock
argument_list|(
name|c2
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
comment|// ns2 sees /node
name|assertTrue
argument_list|(
name|ns2
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"node"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ns2
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"node"
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"p"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// increment /node/p ns2
name|NodeBuilder
name|b2
init|=
name|ns2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b2
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns2
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|ns2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|// increment /node/p2 on ns1
name|Revision
operator|.
name|resetClockToDefault
argument_list|()
expr_stmt|;
name|Revision
operator|.
name|setClock
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|b1
operator|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|b1
operator|.
name|getChildNode
argument_list|(
literal|"node"
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"p"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns1
argument_list|,
name|b1
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|// check if /node/p=3 is visible on ns2
name|Revision
operator|.
name|resetClockToDefault
argument_list|()
expr_stmt|;
name|Revision
operator|.
name|setClock
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|ns2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|b2
operator|=
name|ns2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|b2
operator|.
name|getChildNode
argument_list|(
literal|"node"
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"p"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Utility class that eases creating single cluster id merge conflicts. The two methods:      *<ul>      *<li>{@link #generateConflict(DocumentNodeStore, String[], String[], String[], String[], String[], String[], boolean, String)}</li>      *<li>{@link #generateConflict(DocumentNodeStore, String[], String[], boolean, String[], String[], boolean, String[], String[], boolean, boolean, String)}</li>      *</ul>      * can be passed descriptions of modifications required to create conflict. These methods would also take      * expectation of successful/failure of resolution of merge conflict. In case of failure of that assertion, these      * methods would mark the test to fail.      */
specifier|private
specifier|static
class|class
name|SingleInstanceConflictUtility
block|{
comment|/**          * Wrapper of {@link #generateConflict(DocumentNodeStore, String[], String[], boolean, String[], String[], boolean, String[], String[], boolean, boolean, String)}          * with value of {@code change1, change2, and change3} as {@code false}          */
specifier|public
specifier|static
name|void
name|generateConflict
parameter_list|(
specifier|final
name|DocumentNodeStore
name|store
parameter_list|,
name|String
index|[]
name|normalAddChildren1
parameter_list|,
name|String
index|[]
name|normalRemoveChildren1
parameter_list|,
name|String
index|[]
name|normalAddChildren2
parameter_list|,
name|String
index|[]
name|normalRemoveChildren2
parameter_list|,
name|String
index|[]
name|conflictingAddChildren3
parameter_list|,
name|String
index|[]
name|conflictingRemoveChildren3
parameter_list|,
name|boolean
name|shouldMerge
parameter_list|,
name|String
name|assertMessage
parameter_list|)
throws|throws
name|CommitFailedException
throws|,
name|InterruptedException
block|{
name|generateConflict
argument_list|(
name|store
argument_list|,
name|normalAddChildren1
argument_list|,
name|normalRemoveChildren1
argument_list|,
literal|false
argument_list|,
name|normalAddChildren2
argument_list|,
name|normalRemoveChildren2
argument_list|,
literal|false
argument_list|,
name|conflictingAddChildren3
argument_list|,
name|conflictingRemoveChildren3
argument_list|,
literal|false
argument_list|,
name|shouldMerge
argument_list|,
name|assertMessage
argument_list|)
expr_stmt|;
block|}
comment|/**          * This method takes 3 descriptions of changes for conflict to happen. Each description has a set of          * {@code AddChildren}, {@code RemoveChildren}, and {@code change} parameters. {@code AddChidren} is an          * array of children to be added, {@code RemoveChildren} is an array of children to be removed, and          * {@code change} controls if a property (hard-coded to {@code @foo=bar}) needs to be set on children          * that are part of {@code AddChildren} array.          * The changes should be such that set1 changes and set2 changes should be safe. The conflict should be          * represented by changes in set3 -- and the conflict should exist against both set1 and set2.          * These 3 description are then used to create changes on 3 threads in such a way that by the time thread3          * gets around to persist its changes, there are more revisions which get committed. In case the conflict          * couldn't be resolved, thread3 would report an exception which is tested          * against {@code mergeable}.          * @throws InterruptedException          */
specifier|public
specifier|static
name|void
name|generateConflict
parameter_list|(
specifier|final
name|DocumentNodeStore
name|store
parameter_list|,
name|String
index|[]
name|normalAddChildren1
parameter_list|,
name|String
index|[]
name|normalRemoveChildren1
parameter_list|,
name|boolean
name|change1
parameter_list|,
name|String
index|[]
name|normalAddChildren2
parameter_list|,
name|String
index|[]
name|normalRemoveChildren2
parameter_list|,
name|boolean
name|change2
parameter_list|,
name|String
index|[]
name|conflictingAddChildren3
parameter_list|,
name|String
index|[]
name|conflictingRemoveChildren3
parameter_list|,
name|boolean
name|change3
parameter_list|,
name|boolean
name|mergeable
parameter_list|,
name|String
name|assertMessage
parameter_list|)
throws|throws
name|InterruptedException
block|{
comment|//This would result in 0 retries... 1 rebase would happen and we'd control it :D
name|store
operator|.
name|setMaxBackOffMillis
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|SingleInstanceConflictUtility
name|thread1
init|=
operator|new
name|SingleInstanceConflictUtility
argument_list|()
decl_stmt|;
name|SingleInstanceConflictUtility
name|thread3
init|=
operator|new
name|SingleInstanceConflictUtility
argument_list|()
decl_stmt|;
name|SingleInstanceConflictUtility
name|thread2
init|=
operator|new
name|SingleInstanceConflictUtility
argument_list|()
decl_stmt|;
name|thread1
operator|.
name|startMerge
argument_list|(
name|store
argument_list|,
name|normalAddChildren1
argument_list|,
name|normalRemoveChildren1
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|thread2
operator|.
name|startMerge
argument_list|(
name|store
argument_list|,
name|conflictingAddChildren3
argument_list|,
name|conflictingRemoveChildren3
argument_list|,
name|change3
argument_list|)
expr_stmt|;
name|thread1
operator|.
name|join
argument_list|()
expr_stmt|;
name|thread2
operator|.
name|waitForNextMerge
argument_list|()
expr_stmt|;
name|thread3
operator|.
name|startMerge
argument_list|(
name|store
argument_list|,
name|normalAddChildren2
argument_list|,
name|normalRemoveChildren2
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|thread3
operator|.
name|join
argument_list|()
expr_stmt|;
name|thread2
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
literal|"There shouldn't be any exception for thread1"
argument_list|,
name|thread1
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"There shouldn't be any exception for thread3"
argument_list|,
name|thread3
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|CommitFailedException
name|cfe
init|=
name|thread2
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|mergeable
operator|!=
operator|(
name|cfe
operator|==
literal|null
operator|)
condition|)
block|{
name|StringBuffer
name|message
init|=
operator|new
name|StringBuffer
argument_list|(
name|assertMessage
argument_list|)
decl_stmt|;
if|if
condition|(
name|cfe
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|Throwables
operator|.
name|getStackTraceAsString
argument_list|(
name|cfe
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Thread
name|merger
decl_stmt|;
specifier|private
name|CommitFailedException
name|mergeException
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|dontBlock
decl_stmt|;
specifier|private
specifier|final
name|Semaphore
name|controller
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Semaphore
name|controllee
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|void
name|startMerge
parameter_list|(
specifier|final
name|NodeStore
name|store
parameter_list|,
annotation|@
name|Nonnull
name|String
index|[]
name|addChildren
parameter_list|,
annotation|@
name|Nonnull
name|String
index|[]
name|removeChildren
parameter_list|,
name|boolean
name|change
parameter_list|)
block|{
name|startMerge
argument_list|(
name|store
argument_list|,
literal|null
argument_list|,
name|addChildren
argument_list|,
name|removeChildren
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|startMerge
parameter_list|(
specifier|final
name|NodeStore
name|store
parameter_list|,
specifier|final
name|CommitHook
name|hook
parameter_list|,
annotation|@
name|Nonnull
name|String
index|[]
name|addChildren
parameter_list|,
annotation|@
name|Nonnull
name|String
index|[]
name|removeChildren
parameter_list|,
name|boolean
name|change
parameter_list|)
block|{
name|setDontBlock
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//our controller is controllee for merge thread (and vice versa)
name|merger
operator|=
name|createMergeThread
argument_list|(
name|store
argument_list|,
name|hook
argument_list|,
name|controllee
argument_list|,
name|controller
argument_list|,
name|addChildren
argument_list|,
name|removeChildren
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|merger
operator|.
name|start
argument_list|()
expr_stmt|;
name|controllee
operator|.
name|acquireUninterruptibly
argument_list|()
expr_stmt|;
comment|//wait for merge thread to get to blocking hook
block|}
specifier|private
name|void
name|waitForNextMerge
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|controller
operator|.
name|release
argument_list|()
expr_stmt|;
name|controllee
operator|.
name|tryAcquire
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|unblock
parameter_list|()
block|{
name|setDontBlock
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|controller
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|join
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|unblock
argument_list|()
expr_stmt|;
name|merger
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|setDontBlock
parameter_list|(
name|boolean
name|dontBlock
parameter_list|)
block|{
name|this
operator|.
name|dontBlock
operator|=
name|dontBlock
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|boolean
name|getDontBlock
parameter_list|()
block|{
return|return
name|dontBlock
return|;
block|}
specifier|private
name|CommitFailedException
name|getException
parameter_list|()
block|{
return|return
name|mergeException
return|;
block|}
specifier|private
name|Thread
name|createMergeThread
parameter_list|(
specifier|final
name|NodeStore
name|store
parameter_list|,
specifier|final
name|CommitHook
name|hook
parameter_list|,
specifier|final
name|Semaphore
name|controller
parameter_list|,
specifier|final
name|Semaphore
name|controllee
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|String
index|[]
name|addChildren
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|String
index|[]
name|removeChildren
parameter_list|,
specifier|final
name|boolean
name|change
parameter_list|)
block|{
return|return
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|CommitHook
name|blockingHook
init|=
operator|new
name|CommitHook
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|processCommit
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|controller
operator|.
name|release
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|getDontBlock
argument_list|()
condition|)
block|{
name|controllee
operator|.
name|acquireUninterruptibly
argument_list|()
expr_stmt|;
block|}
return|return
name|after
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|child
range|:
name|addChildren
control|)
block|{
if|if
condition|(
name|change
condition|)
block|{
name|builder
operator|.
name|child
argument_list|(
name|child
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|child
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|child
range|:
name|removeChildren
control|)
block|{
name|builder
operator|.
name|child
argument_list|(
name|child
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|CommitHook
argument_list|>
name|hookList
init|=
operator|new
name|ArrayList
argument_list|<
name|CommitHook
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|hook
operator|!=
literal|null
condition|)
block|{
name|hookList
operator|.
name|add
argument_list|(
name|hook
argument_list|)
expr_stmt|;
block|}
name|hookList
operator|.
name|add
argument_list|(
name|blockingHook
argument_list|)
expr_stmt|;
name|hookList
operator|.
name|add
argument_list|(
operator|new
name|ConflictHook
argument_list|(
operator|new
name|AnnotatingConflictHandler
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hookList
operator|.
name|add
argument_list|(
operator|new
name|EditorHook
argument_list|(
operator|new
name|ConflictValidatorProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|CompositeHook
operator|.
name|compose
argument_list|(
name|hookList
argument_list|)
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|cfe
parameter_list|)
block|{
name|mergeException
operator|=
name|cfe
expr_stmt|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|slowRebase
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NUM_NODES
init|=
name|DocumentRootBuilder
operator|.
name|UPDATE_LIMIT
operator|/
literal|2
decl_stmt|;
specifier|final
name|int
name|NUM_PROPS
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|REBASE_COUNT
init|=
literal|5
decl_stmt|;
specifier|final
name|DocumentNodeStore
name|ns
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_NODES
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|c
init|=
name|deepTree
argument_list|(
name|builder
operator|.
name|child
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_PROPS
condition|;
name|j
operator|++
control|)
block|{
name|c
operator|.
name|setProperty
argument_list|(
literal|"p"
operator|+
name|j
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//1. Prepare a large tree
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|int
index|[]
name|rebaseCounts
init|=
block|{
literal|2
block|,
literal|3
block|,
literal|1
block|,
literal|8
block|,
literal|3
block|}
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|REBASE_COUNT
condition|;
name|r
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_NODES
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|c
init|=
name|deepTree
argument_list|(
name|builder
operator|.
name|child
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_PROPS
condition|;
name|j
operator|++
control|)
block|{
name|c
operator|.
name|setProperty
argument_list|(
literal|"q"
operator|+
name|r
operator|+
literal|""
operator|+
name|j
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Do multiple rebase for each round of branch commit phase
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|rebaseCounts
index|[
name|r
index|]
condition|;
name|k
operator|++
control|)
block|{
name|doSomeChange
argument_list|(
name|ns
argument_list|)
expr_stmt|;
name|ns
operator|.
name|rebase
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting the final merge {}"
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
comment|// OAK-2642
annotation|@
name|Test
specifier|public
name|void
name|dispose
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|InterruptedException
block|{
specifier|final
name|BlockingQueue
argument_list|<
name|String
argument_list|>
name|updates
init|=
operator|new
name|ArrayBlockingQueue
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// when disposing of the DocumentNodeStore instances the updates queue
comment|// becomes full due to the pending operations being flushed.
comment|// This flag ensures that after the main test is completed all
comment|// updates are processed without being blocked
specifier|final
name|AtomicBoolean
name|throttleUpdates
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|MemoryDocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|void
name|update
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|,
name|UpdateOp
name|updateOp
parameter_list|)
block|{
if|if
condition|(
name|throttleUpdates
operator|.
name|get
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|k
range|:
name|keys
control|)
block|{
try|try
block|{
name|updates
operator|.
name|put
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
name|super
operator|.
name|update
argument_list|(
name|collection
argument_list|,
name|keys
argument_list|,
name|updateOp
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|final
name|DocumentNodeStore
name|store
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterId
argument_list|(
literal|1
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|updates
operator|.
name|clear
argument_list|()
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
operator|.
name|child
argument_list|(
literal|"child-1"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|store
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|p
init|=
name|updates
operator|.
name|take
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2:/test/node"
argument_list|,
name|p
argument_list|)
expr_stmt|;
comment|// background ops in dispose is still in progress
name|assertTrue
argument_list|(
name|t
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
comment|// wait until next update comes in
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|updates
operator|.
name|peek
argument_list|()
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
comment|// add child-2 while dispose is in progress
try|try
block|{
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
operator|.
name|child
argument_list|(
literal|"child-2"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Merge must fail with CommitFailedException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// drain updates until dispose finished
while|while
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|updates
operator|.
name|poll
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
name|updates
operator|.
name|clear
argument_list|()
expr_stmt|;
name|throttleUpdates
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// start new store with clusterId 2
name|DocumentNodeStore
name|store2
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterId
argument_list|(
literal|2
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
comment|// perform recovery if needed
name|LastRevRecoveryAgent
name|agent
init|=
operator|new
name|LastRevRecoveryAgent
argument_list|(
name|store2
argument_list|)
decl_stmt|;
if|if
condition|(
name|agent
operator|.
name|isRecoveryNeeded
argument_list|()
condition|)
block|{
name|agent
operator|.
name|recover
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|builder
operator|=
name|store2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|NodeBuilder
name|test
init|=
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|test
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|NodeBuilder
name|node
init|=
name|test
operator|.
name|getChildNode
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|hasChildNode
argument_list|(
literal|"child-2"
argument_list|)
condition|)
block|{
name|node
operator|.
name|child
argument_list|(
literal|"child-2"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store2
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
block|}
comment|// OAK-2695
annotation|@
name|Test
specifier|public
name|void
name|dispatch
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentNodeStore
name|ns
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|Revision
name|from
init|=
name|ns
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|Revision
name|to
init|=
name|ns
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|DiffCache
operator|.
name|Entry
name|entry
init|=
name|ns
operator|.
name|getDiffCache
argument_list|()
operator|.
name|newEntry
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|entry
operator|.
name|append
argument_list|(
literal|"/"
argument_list|,
literal|"-\"foo\""
argument_list|)
expr_stmt|;
name|entry
operator|.
name|done
argument_list|()
expr_stmt|;
name|ns
operator|.
name|compare
argument_list|(
name|ns
operator|.
name|getRoot
argument_list|()
argument_list|,
name|ns
operator|.
name|getRoot
argument_list|(
name|from
argument_list|)
argument_list|,
operator|new
name|DefaultNodeStateDiff
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|before
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|rootRevision
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentNodeStore
name|ns
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|child
argument_list|(
literal|"child"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|child
argument_list|(
literal|"child"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|child
argument_list|(
literal|"child"
argument_list|)
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|Revision
name|head
init|=
name|ns
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|NodeState
name|child
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"child"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|child
operator|instanceof
name|DocumentNodeState
argument_list|)
expr_stmt|;
name|DocumentNodeState
name|state
init|=
operator|(
name|DocumentNodeState
operator|)
name|child
decl_stmt|;
name|assertEquals
argument_list|(
name|head
argument_list|,
name|state
operator|.
name|getRootRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|diffCache
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|numQueries
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|query
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|fromKey
parameter_list|,
name|String
name|toKey
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|numQueries
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|query
argument_list|(
name|collection
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|,
name|limit
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|child
argument_list|(
literal|"child"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|DocumentNodeState
name|before
init|=
name|ns
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|builder
operator|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|child
argument_list|(
literal|"child"
argument_list|)
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|DocumentNodeState
name|after
init|=
name|ns
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|numQueries
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|added
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ns
operator|.
name|compare
argument_list|(
name|asDocumentNodeState
argument_list|(
name|after
operator|.
name|getChildNode
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"child"
argument_list|)
argument_list|)
argument_list|,
name|asDocumentNodeState
argument_list|(
name|before
operator|.
name|getChildNode
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"child"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DefaultNodeStateDiff
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|added
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|childNodeAdded
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|added
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node"
argument_list|,
name|added
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"must not run queries"
argument_list|,
literal|0
argument_list|,
name|numQueries
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// OAK-1970
annotation|@
name|Test
specifier|public
name|void
name|diffMany
parameter_list|()
throws|throws
name|Exception
block|{
name|Clock
name|clock
init|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
decl_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Long
argument_list|>
name|startValues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|MemoryDocumentStore
name|ds
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|query
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|fromKey
parameter_list|,
name|String
name|toKey
parameter_list|,
name|String
name|indexedProperty
parameter_list|,
name|long
name|startValue
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
if|if
condition|(
name|indexedProperty
operator|!=
literal|null
condition|)
block|{
name|startValues
operator|.
name|add
argument_list|(
name|startValue
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|query
argument_list|(
name|collection
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|,
name|indexedProperty
argument_list|,
name|startValue
argument_list|,
name|limit
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|ds
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|test
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DocumentMK
operator|.
name|MANY_CHILDREN_THRESHOLD
operator|*
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|test
operator|.
name|child
argument_list|(
literal|"node-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
comment|// 'wait one hour'
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// perform a change and use the resulting root as before state
name|builder
operator|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|DocumentNodeState
name|before
init|=
name|asDocumentNodeState
argument_list|(
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
argument_list|)
decl_stmt|;
name|NodeState
name|beforeTest
init|=
name|before
operator|.
name|getChildNode
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
comment|// perform another change to span the diff across multiple revisions
comment|// this will prevent diff calls served from the local cache
name|builder
operator|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
comment|// add a child node
name|builder
operator|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
decl_stmt|;
name|NodeState
name|afterTest
init|=
name|after
operator|.
name|getChildNode
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|startValues
operator|.
name|clear
argument_list|()
expr_stmt|;
name|afterTest
operator|.
name|compareAgainstBaseState
argument_list|(
name|beforeTest
argument_list|,
operator|new
name|DefaultNodeStateDiff
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|startValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|beforeModified
init|=
name|getModifiedInSecs
argument_list|(
name|before
operator|.
name|getRevision
argument_list|()
operator|.
name|getTimestamp
argument_list|()
argument_list|)
decl_stmt|;
comment|// startValue must be based on the revision of the before state
comment|// and not when '/test' was last modified
name|assertEquals
argument_list|(
name|beforeModified
argument_list|,
operator|(
name|long
operator|)
name|startValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// OAK-2620
annotation|@
name|Test
specifier|public
name|void
name|nonBlockingReset
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|failure
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|ReentrantReadWriteLock
argument_list|>
name|mergeLock
init|=
operator|new
name|AtomicReference
argument_list|<
name|ReentrantReadWriteLock
argument_list|>
argument_list|()
decl_stmt|;
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|findAndUpdate
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|UpdateOp
name|update
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|,
name|Operation
argument_list|>
name|entry
range|:
name|update
operator|.
name|getChanges
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|NodeDocument
operator|.
name|COLLISIONS
argument_list|)
condition|)
block|{
name|ReentrantReadWriteLock
name|rwLock
init|=
name|mergeLock
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|rwLock
operator|.
name|getReadHoldCount
argument_list|()
operator|>
literal|0
operator|||
name|rwLock
operator|.
name|getWriteHoldCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|failure
operator|.
name|add
argument_list|(
literal|"Branch reset still holds merge lock"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|super
operator|.
name|findAndUpdate
argument_list|(
name|collection
argument_list|,
name|update
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|DocumentNodeStore
name|ds
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|ds
operator|.
name|setMaxBackOffMillis
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// do not retry merges
name|DocumentNodeState
name|root
init|=
name|ds
operator|.
name|getRoot
argument_list|()
decl_stmt|;
specifier|final
name|DocumentNodeStoreBranch
name|b
init|=
name|ds
operator|.
name|createBranch
argument_list|(
name|root
argument_list|)
decl_stmt|;
comment|// branch state is now Unmodified
name|assertTrue
argument_list|(
name|b
operator|.
name|getMergeLock
argument_list|()
operator|instanceof
name|ReentrantReadWriteLock
argument_list|)
expr_stmt|;
name|mergeLock
operator|.
name|set
argument_list|(
operator|(
name|ReentrantReadWriteLock
operator|)
name|b
operator|.
name|getMergeLock
argument_list|()
argument_list|)
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|b
operator|.
name|setRoot
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
comment|// branch state is now InMemory
name|builder
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|b
operator|.
name|setRoot
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
comment|// branch state is now Persisted
try|try
block|{
name|b
operator|.
name|merge
argument_list|(
operator|new
name|CommitHook
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|processCommit
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|foo
init|=
name|after
operator|.
name|builder
argument_list|()
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|DocumentRootBuilder
operator|.
name|UPDATE_LIMIT
condition|;
name|i
operator|++
control|)
block|{
name|foo
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"Fail"
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
throw|;
block|}
block|}
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
for|for
control|(
name|String
name|s
range|:
name|failure
control|)
block|{
name|fail
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|failFastOnBranchConflict
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|mergeAttempts
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|findAndUpdate
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|UpdateOp
name|update
parameter_list|)
block|{
for|for
control|(
name|Key
name|k
range|:
name|update
operator|.
name|getConditions
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|k
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|NodeDocument
operator|.
name|COLLISIONS
argument_list|)
condition|)
block|{
name|mergeAttempts
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
return|return
name|super
operator|.
name|findAndUpdate
argument_list|(
name|collection
argument_list|,
name|update
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|DocumentNodeStore
name|ds
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|DocumentNodeState
name|root
init|=
name|ds
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|DocumentNodeStoreBranch
name|b
init|=
name|ds
operator|.
name|createBranch
argument_list|(
name|root
argument_list|)
decl_stmt|;
comment|// branch state is now Unmodified
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|b
operator|.
name|setRoot
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
comment|// branch state is now InMemory
name|builder
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|b
operator|.
name|setRoot
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
comment|// branch state is now Persisted
comment|// create conflict with persisted branch
name|NodeBuilder
name|nb
init|=
name|ds
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|nb
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ds
argument_list|,
name|nb
argument_list|)
expr_stmt|;
name|mergeAttempts
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|b
operator|.
name|merge
argument_list|(
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must fail with CommitFailedException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|assertTrue
argument_list|(
literal|"too many merge attempts: "
operator|+
name|mergeAttempts
operator|.
name|get
argument_list|()
argument_list|,
name|mergeAttempts
operator|.
name|get
argument_list|()
operator|<=
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// OAK-3411
annotation|@
name|Test
specifier|public
name|void
name|sameSeenAtRevision
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns1
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns2
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|b2
init|=
name|ns2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b2
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns2
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|ns2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|NodeBuilder
name|b1
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|b1
operator|.
name|hasChildNode
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|merge
argument_list|(
name|ns1
argument_list|,
name|b1
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|DocumentNodeStore
name|ns3
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|ns3
operator|.
name|setMaxBackOffMillis
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|NodeBuilder
name|b3
init|=
name|ns3
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|b3
operator|.
name|hasChildNode
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|b3
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns3
argument_list|,
name|b3
argument_list|)
expr_stmt|;
block|}
comment|// OAK-3411
annotation|@
name|Test
specifier|public
name|void
name|sameSeenAtRevision2
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns1
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns2
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|b2
init|=
name|ns2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b2
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns2
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|b2
operator|=
name|ns2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|b2
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|merge
argument_list|(
name|ns2
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|ns2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|NodeBuilder
name|b1
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|b1
operator|.
name|hasChildNode
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns1
argument_list|,
name|b1
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|DocumentNodeStore
name|ns3
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|ns3
operator|.
name|setMaxBackOffMillis
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|NodeBuilder
name|b3
init|=
name|ns3
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|b3
operator|.
name|hasChildNode
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|b3
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|merge
argument_list|(
name|ns3
argument_list|,
name|b3
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|DocumentNodeState
name|asDocumentNodeState
parameter_list|(
name|NodeState
name|state
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|state
operator|instanceof
name|DocumentNodeState
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not a DocumentNodeState"
argument_list|)
throw|;
block|}
return|return
operator|(
name|DocumentNodeState
operator|)
name|state
return|;
block|}
specifier|private
name|void
name|doSomeChange
parameter_list|(
name|NodeStore
name|ns
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|b
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"count"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
specifier|private
name|NodeBuilder
name|deepTree
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|NodeBuilder
name|nb
init|=
name|parent
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|depth
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|nb
operator|=
name|nb
operator|.
name|child
argument_list|(
literal|"c"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|nb
return|;
block|}
specifier|private
specifier|static
name|void
name|assertNoPreviousDocs
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|)
block|{
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|assertFalse
argument_list|(
literal|"must not read previous document: "
operator|+
name|id
operator|+
literal|" (all: "
operator|+
name|ids
operator|+
literal|")"
argument_list|,
name|Utils
operator|.
name|getPathFromId
argument_list|(
name|id
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|NodeState
name|merge
parameter_list|(
name|NodeStore
name|store
parameter_list|,
name|NodeBuilder
name|root
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
name|store
operator|.
name|merge
argument_list|(
name|root
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|TestHook
extends|extends
name|EditorHook
block|{
name|TestHook
parameter_list|(
specifier|final
name|String
name|prefix
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|EditorProvider
argument_list|()
block|{
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
name|Editor
name|getRootEditor
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
operator|new
name|TestEditor
argument_list|(
name|builder
argument_list|,
name|prefix
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|CommitHook
name|FAILING_HOOK
init|=
operator|new
name|CommitHook
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|processCommit
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|CONSTRAINT
argument_list|,
literal|0
argument_list|,
literal|"fail"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
class|class
name|TestEditor
extends|extends
name|DefaultEditor
block|{
specifier|private
specifier|final
name|NodeBuilder
name|builder
decl_stmt|;
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
name|TestEditor
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|builder
operator|=
name|builder
expr_stmt|;
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
operator|new
name|TestEditor
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|name
argument_list|)
argument_list|,
name|prefix
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|after
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @param doc the document to be tested      * @return latest committed value of _deleted map      */
specifier|private
name|boolean
name|isDocDeleted
parameter_list|(
name|NodeDocument
name|doc
parameter_list|,
name|Comparator
argument_list|<
name|Revision
argument_list|>
name|comparator
parameter_list|)
block|{
name|boolean
name|latestDeleted
init|=
literal|false
decl_stmt|;
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|localDeleted
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|(
name|Collections
operator|.
name|reverseOrder
argument_list|(
name|comparator
argument_list|)
argument_list|)
decl_stmt|;
name|localDeleted
operator|.
name|putAll
argument_list|(
name|doc
operator|.
name|getLocalDeleted
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|localDeleted
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|doc
operator|.
name|isCommitted
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|latestDeleted
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|latestDeleted
return|;
block|}
block|}
end_class

end_unit

