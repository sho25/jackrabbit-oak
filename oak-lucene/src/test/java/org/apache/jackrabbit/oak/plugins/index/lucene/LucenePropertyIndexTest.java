begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneInitializerHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|AbstractQueryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|ISO8601
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NODE_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|TYPE_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexEditorTest
operator|.
name|createDate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|matchers
operator|.
name|JUnitMatchers
operator|.
name|containsString
import|;
end_import

begin_class
specifier|public
class|class
name|LucenePropertyIndexTest
extends|extends
name|AbstractQueryTest
block|{
annotation|@
name|Override
specifier|protected
name|void
name|createTestIndexNode
parameter_list|()
throws|throws
name|Exception
block|{
name|setTraversalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|()
block|{
name|LuceneIndexProvider
name|provider
init|=
operator|new
name|LuceneIndexProvider
argument_list|()
decl_stmt|;
return|return
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|LuceneInitializerHelper
argument_list|(
literal|"luceneGlobal"
argument_list|,
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
literal|null
argument_list|)
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|QueryIndexProvider
operator|)
name|provider
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|Observer
operator|)
name|provider
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|LuceneIndexEditorProvider
argument_list|()
argument_list|)
operator|.
name|createContentRepository
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexSelection
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"test2"
argument_list|,
name|of
argument_list|(
literal|"propc"
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo2"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propc"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"e"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propd"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|propaQuery
init|=
literal|"select [jcr:path] from [nt:base] where [propa] = 'foo'"
decl_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
name|propaQuery
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propc] = 'foo'"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|propaQuery
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 'foo2'"
argument_list|,
name|asList
argument_list|(
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propc] = 'foo'"
argument_list|,
name|asList
argument_list|(
literal|"/test/d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|rangeQueriesWithLong
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_LONG
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]>= 20"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]>= 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]>= 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]<= 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]< 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 20 or [propa] = 10 "
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]> 10 and [propa]< 30"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] in (10,20)"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|rangeQueriesWithDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_DOUBLE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|10.1
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|20.4
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|30.7
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]>= 20.3"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 20.4"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]<= 20.5"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]< 20.4"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]> 10.5 and [propa]< 30"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|rangeQueriesWithString
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"b is b"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"e"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"g"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa = 'a'"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Check that string props are not tokenized
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa = 'b is b'"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa in ('a', 'c')"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propb]>= 'f'"
argument_list|,
name|asList
argument_list|(
literal|"/test/d"
argument_list|,
literal|"/test/e"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propb]<= 'f'"
argument_list|,
name|asList
argument_list|(
literal|"/test/c"
argument_list|,
literal|"/test/d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propb]> 'e'"
argument_list|,
name|asList
argument_list|(
literal|"/test/d"
argument_list|,
literal|"/test/e"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propb]< 'g'"
argument_list|,
name|asList
argument_list|(
literal|"/test/c"
argument_list|,
literal|"/test/d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|rangeQueriesWithDate
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_DATE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
name|createDate
argument_list|(
literal|"14/02/2014"
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
name|createDate
argument_list|(
literal|"14/03/2014"
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
name|createDate
argument_list|(
literal|"14/04/2014"
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]>= "
operator|+
name|dt
argument_list|(
literal|"15/02/2014"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]<="
operator|+
name|dt
argument_list|(
literal|"15/03/2014"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]< "
operator|+
name|dt
argument_list|(
literal|"14/03/2014"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]> "
operator|+
name|dt
argument_list|(
literal|"15/02/2014"
argument_list|)
operator|+
literal|" and [propa]< "
operator|+
name|dt
argument_list|(
literal|"13/04/2014"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//TODO Test for range with Date. Check for precision
specifier|private
name|String
name|explain
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|String
name|explain
init|=
literal|"explain "
operator|+
name|query
decl_stmt|;
return|return
name|executeQuery
argument_list|(
name|explain
argument_list|,
literal|"JCR-SQL2"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
name|Tree
name|createIndex
parameter_list|(
name|String
name|name
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|propNames
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Tree
name|index
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|def
init|=
name|index
operator|.
name|addChild
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|addChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|,
name|LuceneIndexConstants
operator|.
name|TYPE_LUCENE
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FULL_TEXT_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|INCLUDE_PROPERTY_NAMES
argument_list|,
name|propNames
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getChild
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|dt
parameter_list|(
name|String
name|date
parameter_list|)
throws|throws
name|ParseException
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"CAST ('%s' AS DATE)"
argument_list|,
name|ISO8601
operator|.
name|format
argument_list|(
name|createDate
argument_list|(
name|date
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

