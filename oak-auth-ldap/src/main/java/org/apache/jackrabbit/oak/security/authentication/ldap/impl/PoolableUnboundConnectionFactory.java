begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|ldap
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|pool
operator|.
name|PoolableObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|exception
operator|.
name|LdapException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|ldap
operator|.
name|client
operator|.
name|api
operator|.
name|LdapConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|ldap
operator|.
name|client
operator|.
name|api
operator|.
name|LdapConnectionConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|ldap
operator|.
name|client
operator|.
name|api
operator|.
name|LdapNetworkConnection
import|;
end_import

begin_comment
comment|/**  * A factory for creating unbound LdapConnection objects managed by LdapConnectionPool.  */
end_comment

begin_class
specifier|public
class|class
name|PoolableUnboundConnectionFactory
implements|implements
name|PoolableObjectFactory
argument_list|<
name|LdapConnection
argument_list|>
block|{
comment|/**      * configuration object for the connection      */
specifier|private
name|LdapConnectionConfig
name|config
decl_stmt|;
comment|/**      * Creates a new instance of PoolableUnboundConnectionFactory      *      * @param config the configuration for creating LdapConnections      */
specifier|public
name|PoolableUnboundConnectionFactory
parameter_list|(
name|LdapConnectionConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|activateObject
parameter_list|(
name|LdapConnection
name|connection
parameter_list|)
throws|throws
name|Exception
block|{     }
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|destroyObject
parameter_list|(
name|LdapConnection
name|connection
parameter_list|)
throws|throws
name|Exception
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|LdapConnection
name|makeObject
parameter_list|()
throws|throws
name|Exception
block|{
name|LdapNetworkConnection
name|connection
init|=
name|config
operator|.
name|isUseTls
argument_list|()
condition|?
operator|new
name|TlsGuardingConnection
argument_list|(
name|config
argument_list|)
else|:
operator|new
name|LdapNetworkConnection
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
return|return
name|connection
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|passivateObject
parameter_list|(
name|LdapConnection
name|connection
parameter_list|)
throws|throws
name|Exception
block|{     }
comment|/**      * {@inheritDoc}      */
specifier|public
name|boolean
name|validateObject
parameter_list|(
name|LdapConnection
name|connection
parameter_list|)
block|{
return|return
name|connection
operator|.
name|isConnected
argument_list|()
return|;
block|}
comment|/**      * internal helper class that guards the original ldap connection from starting TLS if already started..      * this is to ensure that pooled connections can be 'bind()' several times.      *      * @see org.apache.directory.ldap.client.api.LdapNetworkConnection#bindAsync(org.apache.directory.api.ldap.model.message.BindRequest)      */
specifier|private
specifier|static
class|class
name|TlsGuardingConnection
extends|extends
name|LdapNetworkConnection
block|{
specifier|private
name|boolean
name|tlsStarted
decl_stmt|;
specifier|private
name|TlsGuardingConnection
parameter_list|(
name|LdapConnectionConfig
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startTls
parameter_list|()
throws|throws
name|LdapException
block|{
if|if
condition|(
name|tlsStarted
condition|)
block|{
return|return;
block|}
name|super
operator|.
name|startTls
argument_list|()
expr_stmt|;
name|tlsStarted
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

