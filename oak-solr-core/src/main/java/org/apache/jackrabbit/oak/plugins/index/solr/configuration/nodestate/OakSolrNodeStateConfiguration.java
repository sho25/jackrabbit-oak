begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|configuration
operator|.
name|nodestate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|configuration
operator|.
name|OakSolrConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|configuration
operator|.
name|OakSolrConfigurationDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|query
operator|.
name|SolrQueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * An {@link OakSolrConfiguration} specified via a given {@link org.apache.jackrabbit.oak.spi.state.NodeState}.  * For each of the supported properties a default is provided if either the  * property doesn't exist in the node or if the value is<code>null</code>  */
end_comment

begin_class
specifier|public
class|class
name|OakSolrNodeStateConfiguration
implements|implements
name|OakSolrConfiguration
block|{
specifier|private
specifier|final
name|NodeState
name|definition
decl_stmt|;
specifier|public
name|OakSolrNodeStateConfiguration
parameter_list|(
name|NodeState
name|definition
parameter_list|)
block|{
name|this
operator|.
name|definition
operator|=
name|definition
expr_stmt|;
if|if
condition|(
operator|!
name|definition
operator|.
name|hasProperty
argument_list|(
literal|"type"
argument_list|)
operator|||
operator|!
operator|(
name|SolrQueryIndex
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|definition
operator|.
name|getProperty
argument_list|(
literal|"type"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"missing or wrong 'type' property in "
operator|+
name|definition
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFieldNameFor
parameter_list|(
name|Type
argument_list|<
name|?
argument_list|>
name|propertyType
parameter_list|)
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|typeMappings
init|=
name|getStringValuesFor
argument_list|(
name|Properties
operator|.
name|TYPE_MAPPINGS
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeMappings
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|typeMapping
range|:
name|typeMappings
control|)
block|{
name|String
index|[]
name|mapping
init|=
name|typeMapping
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|.
name|length
operator|==
literal|2
operator|&&
name|mapping
index|[
literal|0
index|]
operator|!=
literal|null
operator|&&
name|mapping
index|[
literal|1
index|]
operator|!=
literal|null
condition|)
block|{
name|Type
argument_list|<
name|?
argument_list|>
name|type
init|=
name|Type
operator|.
name|fromString
argument_list|(
name|mapping
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|type
operator|.
name|tag
argument_list|()
operator|==
name|propertyType
operator|.
name|tag
argument_list|()
condition|)
block|{
return|return
name|mapping
index|[
literal|1
index|]
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|getPathField
parameter_list|()
block|{
return|return
name|getStringValueFor
argument_list|(
name|Properties
operator|.
name|PATH_FIELD
argument_list|,
name|OakSolrConfigurationDefaults
operator|.
name|PATH_FIELD_NAME
argument_list|)
return|;
block|}
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
name|String
name|getFieldForPathRestriction
parameter_list|(
name|Filter
operator|.
name|PathRestriction
name|pathRestriction
parameter_list|)
block|{
name|String
name|fieldName
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|pathRestriction
condition|)
block|{
case|case
name|ALL_CHILDREN
case|:
block|{
name|fieldName
operator|=
name|getStringValueFor
argument_list|(
name|Properties
operator|.
name|DESCENDANTS_FIELD
argument_list|,
name|OakSolrConfigurationDefaults
operator|.
name|DESC_FIELD_NAME
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DIRECT_CHILDREN
case|:
block|{
name|fieldName
operator|=
name|getStringValueFor
argument_list|(
name|Properties
operator|.
name|CHILDREN_FIELD
argument_list|,
name|OakSolrConfigurationDefaults
operator|.
name|CHILD_FIELD_NAME
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EXACT
case|:
block|{
name|fieldName
operator|=
name|getStringValueFor
argument_list|(
name|Properties
operator|.
name|PATH_FIELD
argument_list|,
name|OakSolrConfigurationDefaults
operator|.
name|PATH_FIELD_NAME
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PARENT
case|:
block|{
name|fieldName
operator|=
name|getStringValueFor
argument_list|(
name|Properties
operator|.
name|PARENT_FIELD
argument_list|,
name|OakSolrConfigurationDefaults
operator|.
name|ANC_FIELD_NAME
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|NO_RESTRICTION
case|:
break|break;
default|default:
break|break;
block|}
return|return
name|fieldName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCatchAllField
parameter_list|()
block|{
return|return
name|getStringValueFor
argument_list|(
name|Properties
operator|.
name|CATCHALL_FIELD
argument_list|,
name|OakSolrConfigurationDefaults
operator|.
name|CATCHALL_FIELD
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFieldForPropertyRestriction
parameter_list|(
name|Filter
operator|.
name|PropertyRestriction
name|propertyRestriction
parameter_list|)
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|propertyMappings
init|=
name|getStringValuesFor
argument_list|(
name|Properties
operator|.
name|PROPERTY_MAPPINGS
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyMappings
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|propertyMapping
range|:
name|propertyMappings
control|)
block|{
name|String
index|[]
name|mapping
init|=
name|propertyMapping
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|.
name|length
operator|==
literal|2
operator|&&
name|mapping
index|[
literal|0
index|]
operator|!=
literal|null
operator|&&
name|mapping
index|[
literal|1
index|]
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|propertyRestriction
operator|.
name|propertyName
operator|.
name|equals
argument_list|(
name|mapping
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
return|return
name|mapping
index|[
literal|1
index|]
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|CommitPolicy
name|getCommitPolicy
parameter_list|()
block|{
return|return
name|CommitPolicy
operator|.
name|valueOf
argument_list|(
name|getStringValueFor
argument_list|(
name|Properties
operator|.
name|COMMIT_POLICY
argument_list|,
name|CommitPolicy
operator|.
name|SOFT
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRows
parameter_list|()
block|{
return|return
name|getIntValueFor
argument_list|(
name|Properties
operator|.
name|ROWS
argument_list|,
name|OakSolrConfigurationDefaults
operator|.
name|ROWS
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|useForPropertyRestrictions
parameter_list|()
block|{
return|return
name|getBooleanValueFor
argument_list|(
name|Properties
operator|.
name|PROPERTY_RESTRICIONS
argument_list|,
name|OakSolrConfigurationDefaults
operator|.
name|PROPERTY_RESTRICTIONS
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|useForPrimaryTypes
parameter_list|()
block|{
return|return
name|getBooleanValueFor
argument_list|(
name|Properties
operator|.
name|PRIMARY_TYPES
argument_list|,
name|OakSolrConfigurationDefaults
operator|.
name|PRIMARY_TYPES
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|useForPathRestrictions
parameter_list|()
block|{
return|return
name|getBooleanValueFor
argument_list|(
name|Properties
operator|.
name|PATH_RESTRICTIONS
argument_list|,
name|OakSolrConfigurationDefaults
operator|.
name|PATH_RESTRICTIONS
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getIgnoredProperties
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|ignoredProperties
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|ignoredPropertiesValues
init|=
name|getStringValuesFor
argument_list|(
name|Properties
operator|.
name|IGNORED_PROPERTIES
argument_list|)
decl_stmt|;
if|if
condition|(
name|ignoredPropertiesValues
operator|!=
literal|null
condition|)
block|{
name|ignoredProperties
operator|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|ignoredProperty
range|:
name|ignoredPropertiesValues
control|)
block|{
name|ignoredProperties
operator|.
name|add
argument_list|(
name|ignoredProperty
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ignoredProperties
operator|=
name|OakSolrConfigurationDefaults
operator|.
name|IGNORED_PROPERTIES
expr_stmt|;
block|}
return|return
name|ignoredProperties
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getUsedProperties
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|usedProperties
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|usedPropertiesValues
init|=
name|getStringValuesFor
argument_list|(
name|Properties
operator|.
name|USED_PROPERTIES
argument_list|)
decl_stmt|;
if|if
condition|(
name|usedPropertiesValues
operator|!=
literal|null
condition|)
block|{
name|usedProperties
operator|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|usedProperty
range|:
name|usedPropertiesValues
control|)
block|{
name|usedProperties
operator|.
name|add
argument_list|(
name|usedProperty
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|usedProperties
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
return|return
name|usedProperties
return|;
block|}
specifier|private
name|boolean
name|getBooleanValueFor
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
name|boolean
name|value
init|=
name|defaultValue
decl_stmt|;
name|PropertyState
name|property
init|=
name|definition
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
specifier|private
name|int
name|getIntValueFor
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
name|long
name|value
init|=
name|defaultValue
decl_stmt|;
name|PropertyState
name|property
init|=
name|definition
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|int
operator|)
name|value
return|;
block|}
specifier|private
name|String
name|getStringValueFor
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
name|defaultValue
decl_stmt|;
name|PropertyState
name|property
init|=
name|definition
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
specifier|private
name|Iterable
argument_list|<
name|String
argument_list|>
name|getStringValuesFor
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|values
init|=
literal|null
decl_stmt|;
name|PropertyState
name|property
init|=
name|definition
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
operator|&&
name|property
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|values
operator|=
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"OakSolrNodeStateConfiguration{"
operator|+
literal|"definitionChildren="
operator|+
name|Iterables
operator|.
name|toString
argument_list|(
name|definition
operator|.
name|getChildNodeNames
argument_list|()
argument_list|)
operator|+
literal|'}'
return|;
block|}
comment|/**      * Properties that may be retrieved from the configuration {@link org.apache.jackrabbit.oak.spi.state.NodeState}.      */
specifier|public
specifier|final
class|class
name|Properties
block|{
comment|// --> oak solr config properties<--
specifier|public
specifier|static
specifier|final
name|String
name|PATH_FIELD
init|=
literal|"pathField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PARENT_FIELD
init|=
literal|"parentField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CHILDREN_FIELD
init|=
literal|"childrenField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DESCENDANTS_FIELD
init|=
literal|"descendantsField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CATCHALL_FIELD
init|=
literal|"catchAllField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COMMIT_POLICY
init|=
literal|"commitPolicy"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ROWS
init|=
literal|"rows"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_RESTRICIONS
init|=
literal|"propertyRestrictions"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PRIMARY_TYPES
init|=
literal|"primaryTypes"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PATH_RESTRICTIONS
init|=
literal|"pathRestrictions"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|IGNORED_PROPERTIES
init|=
literal|"ignoredProperties"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TYPE_MAPPINGS
init|=
literal|"typeMappings"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_MAPPINGS
init|=
literal|"propertyMappings"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|USED_PROPERTIES
init|=
literal|"usedProperties"
decl_stmt|;
block|}
block|}
end_class

end_unit

