begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|UnsupportedRepositoryOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|AuthorizableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|NotExecutableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for the {@link Group} implementation.  */
end_comment

begin_class
specifier|public
class|class
name|GroupTest
extends|extends
name|AbstractUserTest
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|members
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Before
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|group
operator|.
name|addMember
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|superuser
operator|.
name|getUserID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|members
operator|.
name|add
argument_list|(
name|superuser
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
name|members
operator|.
name|add
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertTrueIsMember
parameter_list|(
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|members
parameter_list|,
name|Authorizable
name|auth
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|boolean
name|contained
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|members
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|contained
condition|)
block|{
name|Object
name|next
init|=
name|members
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|next
operator|instanceof
name|Authorizable
argument_list|)
expr_stmt|;
name|contained
operator|=
operator|(
operator|(
name|Authorizable
operator|)
name|next
operator|)
operator|.
name|getID
argument_list|()
operator|.
name|equals
argument_list|(
name|auth
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"The given set of members must contain '"
operator|+
name|auth
operator|.
name|getID
argument_list|()
operator|+
literal|'\''
argument_list|,
name|contained
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertFalseIsMember
parameter_list|(
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|members
parameter_list|,
name|Authorizable
name|auth
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|boolean
name|contained
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|members
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|contained
condition|)
block|{
name|Object
name|next
init|=
name|members
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|next
operator|instanceof
name|Authorizable
argument_list|)
expr_stmt|;
name|contained
operator|=
operator|(
operator|(
name|Authorizable
operator|)
name|next
operator|)
operator|.
name|getID
argument_list|()
operator|.
name|equals
argument_list|(
name|auth
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"The given set of members must not contain '"
operator|+
name|auth
operator|.
name|getID
argument_list|()
operator|+
literal|'\''
argument_list|,
name|contained
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertTrueMemberOfContainsGroup
parameter_list|(
name|Iterator
argument_list|<
name|Group
argument_list|>
name|groups
parameter_list|,
name|Group
name|gr
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|boolean
name|contained
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|groups
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|contained
condition|)
block|{
name|Object
name|next
init|=
name|groups
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|next
operator|instanceof
name|Group
argument_list|)
expr_stmt|;
name|contained
operator|=
operator|(
operator|(
name|Group
operator|)
name|next
operator|)
operator|.
name|getID
argument_list|()
operator|.
name|equals
argument_list|(
name|gr
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"All members of a group must contain that group upon 'memberOf'."
argument_list|,
name|contained
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertFalseMemberOfContainsGroup
parameter_list|(
name|Iterator
argument_list|<
name|Group
argument_list|>
name|groups
parameter_list|,
name|Group
name|gr
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|boolean
name|contained
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|groups
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|contained
condition|)
block|{
name|Object
name|next
init|=
name|groups
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|next
operator|instanceof
name|Group
argument_list|)
expr_stmt|;
name|contained
operator|=
operator|(
operator|(
name|Group
operator|)
name|next
operator|)
operator|.
name|getID
argument_list|()
operator|.
name|equals
argument_list|(
name|gr
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"All members of a group must contain that group upon 'memberOf'."
argument_list|,
name|contained
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGroup
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|assertTrue
argument_list|(
name|group
operator|.
name|isGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetID
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|assertNotNull
argument_list|(
name|group
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|group
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipal
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|assertNotNull
argument_list|(
name|group
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|group
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPath
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|assertNotNull
argument_list|(
name|group
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|group
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|getNode
argument_list|(
name|group
argument_list|,
name|superuser
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|,
name|group
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedRepositoryOperationException
name|e
parameter_list|)
block|{
comment|// ok.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDeclaredMembers
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|it
init|=
name|group
operator|.
name|getDeclaredMembers
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|it
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Authorizable
name|a
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|members
operator|.
name|remove
argument_list|(
name|a
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|members
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMembers
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|it
init|=
name|group
operator|.
name|getMembers
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|it
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMembersAgainstIsMember
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|it
init|=
name|group
operator|.
name|getMembers
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Authorizable
name|auth
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|group
operator|.
name|isMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMembersAgainstMemberOf
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|it
init|=
name|group
operator|.
name|getMembers
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Authorizable
name|auth
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrueMemberOfContainsGroup
argument_list|(
name|auth
operator|.
name|memberOf
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDeclaredMembersAgainstDeclaredMemberOf
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|it
init|=
name|group
operator|.
name|getDeclaredMembers
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Authorizable
name|auth
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrueMemberOfContainsGroup
argument_list|(
name|auth
operator|.
name|declaredMemberOf
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMembersContainsDeclaredMembers
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|it
init|=
name|group
operator|.
name|getMembers
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|l
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|it
init|=
name|group
operator|.
name|getDeclaredMembers
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|assertTrue
argument_list|(
literal|"All declared members must also be part of the Iterator "
operator|+
literal|"returned upon getMembers()"
argument_list|,
name|l
operator|.
name|contains
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDeclaredMembersWithMemberRemoved
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|uid
init|=
name|user
operator|.
name|getID
argument_list|()
decl_stmt|;
name|user
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|user
operator|=
literal|null
expr_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|it
init|=
name|group
operator|.
name|getDeclaredMembers
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Authorizable
name|a
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|uid
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddMember
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|User
name|auth
init|=
name|getTestUser
argument_list|(
name|superuser
argument_list|)
decl_stmt|;
name|Group
name|newGroup
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newGroup
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|newGroup
operator|.
name|isMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|newGroup
operator|.
name|removeMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup
operator|.
name|addMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup
operator|.
name|isMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup
operator|.
name|isMember
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|auth
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|newGroup
operator|!=
literal|null
condition|)
block|{
name|newGroup
operator|.
name|removeMember
argument_list|(
name|auth
argument_list|)
expr_stmt|;
name|newGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddMembers
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|User
name|auth
init|=
name|getTestUser
argument_list|(
name|superuser
argument_list|)
decl_stmt|;
name|Group
name|newGroup
init|=
literal|null
decl_stmt|;
name|int
name|size
init|=
literal|100
decl_stmt|;
name|List
argument_list|<
name|User
argument_list|>
name|users
init|=
operator|new
name|ArrayList
argument_list|<
name|User
argument_list|>
argument_list|(
name|size
argument_list|)
decl_stmt|;
try|try
block|{
name|newGroup
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|size
condition|;
name|k
operator|++
control|)
block|{
name|users
operator|.
name|add
argument_list|(
name|userMgr
operator|.
name|createUser
argument_list|(
literal|"user_"
operator|+
name|k
argument_list|,
literal|"pass_"
operator|+
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
for|for
control|(
name|User
name|user
range|:
name|users
control|)
block|{
name|assertTrue
argument_list|(
name|newGroup
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
for|for
control|(
name|User
name|user
range|:
name|users
control|)
block|{
name|assertTrue
argument_list|(
name|newGroup
operator|.
name|isMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|User
name|user
range|:
name|users
control|)
block|{
name|assertTrue
argument_list|(
name|newGroup
operator|.
name|removeMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
for|for
control|(
name|User
name|user
range|:
name|users
control|)
block|{
name|assertFalse
argument_list|(
name|newGroup
operator|.
name|isMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
for|for
control|(
name|User
name|user
range|:
name|users
control|)
block|{
name|user
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|newGroup
operator|!=
literal|null
condition|)
block|{
name|newGroup
operator|.
name|removeMember
argument_list|(
name|auth
argument_list|)
expr_stmt|;
name|newGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddRemoveMember
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|User
name|auth
init|=
name|getTestUser
argument_list|(
name|superuser
argument_list|)
decl_stmt|;
name|Group
name|newGroup1
init|=
literal|null
decl_stmt|;
name|Group
name|newGroup2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newGroup1
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|newGroup2
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|newGroup1
operator|.
name|isMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|newGroup1
operator|.
name|removeMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|newGroup2
operator|.
name|isMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|newGroup2
operator|.
name|removeMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup1
operator|.
name|addMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup1
operator|.
name|isMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup1
operator|.
name|isMember
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|auth
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup2
operator|.
name|addMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup2
operator|.
name|isMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup2
operator|.
name|isMember
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|auth
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup1
operator|.
name|removeMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup2
operator|.
name|removeMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup1
operator|.
name|addMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup1
operator|.
name|isMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup1
operator|.
name|isMember
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|auth
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup1
operator|.
name|removeMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|newGroup1
operator|!=
literal|null
condition|)
block|{
name|newGroup1
operator|.
name|removeMember
argument_list|(
name|auth
argument_list|)
expr_stmt|;
name|newGroup1
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|newGroup2
operator|!=
literal|null
condition|)
block|{
name|newGroup2
operator|.
name|removeMember
argument_list|(
name|auth
argument_list|)
expr_stmt|;
name|newGroup2
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsDeclaredMember
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|User
name|auth
init|=
name|getTestUser
argument_list|(
name|superuser
argument_list|)
decl_stmt|;
name|Group
name|newGroup1
init|=
literal|null
decl_stmt|;
name|Group
name|newGroup2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newGroup1
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|newGroup2
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|newGroup1
operator|.
name|isDeclaredMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|newGroup2
operator|.
name|isDeclaredMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup2
operator|.
name|addMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup2
operator|.
name|isDeclaredMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup2
operator|.
name|isDeclaredMember
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|auth
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup1
operator|.
name|addMember
argument_list|(
name|newGroup2
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup1
operator|.
name|isDeclaredMember
argument_list|(
name|newGroup2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup1
operator|.
name|isDeclaredMember
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|newGroup2
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup1
operator|.
name|isMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup1
operator|.
name|isMember
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|auth
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|newGroup1
operator|.
name|isDeclaredMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|newGroup1
operator|.
name|isDeclaredMember
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|auth
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|newGroup1
operator|!=
literal|null
condition|)
block|{
name|newGroup1
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|newGroup2
operator|!=
literal|null
condition|)
block|{
name|newGroup2
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddMemberTwice
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|User
name|auth
init|=
name|getTestUser
argument_list|(
name|superuser
argument_list|)
decl_stmt|;
name|Group
name|newGroup
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newGroup
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup
operator|.
name|addMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|newGroup
operator|.
name|addMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup
operator|.
name|isMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|newGroup
operator|!=
literal|null
condition|)
block|{
name|newGroup
operator|.
name|removeMember
argument_list|(
name|auth
argument_list|)
expr_stmt|;
name|newGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddMemberModifiesMemberOf
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|User
name|auth
init|=
name|getTestUser
argument_list|(
name|superuser
argument_list|)
decl_stmt|;
name|Group
name|newGroup
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newGroup
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertFalseMemberOfContainsGroup
argument_list|(
name|auth
operator|.
name|memberOf
argument_list|()
argument_list|,
name|newGroup
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup
operator|.
name|addMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrueMemberOfContainsGroup
argument_list|(
name|auth
operator|.
name|declaredMemberOf
argument_list|()
argument_list|,
name|newGroup
argument_list|)
expr_stmt|;
name|assertTrueMemberOfContainsGroup
argument_list|(
name|auth
operator|.
name|memberOf
argument_list|()
argument_list|,
name|newGroup
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|newGroup
operator|!=
literal|null
condition|)
block|{
name|newGroup
operator|.
name|removeMember
argument_list|(
name|auth
argument_list|)
expr_stmt|;
name|newGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddMemberModifiesGetMembers
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|User
name|auth
init|=
name|getTestUser
argument_list|(
name|superuser
argument_list|)
decl_stmt|;
name|Group
name|newGroup
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newGroup
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertFalseIsMember
argument_list|(
name|newGroup
operator|.
name|getMembers
argument_list|()
argument_list|,
name|auth
argument_list|)
expr_stmt|;
name|assertFalseIsMember
argument_list|(
name|newGroup
operator|.
name|getDeclaredMembers
argument_list|()
argument_list|,
name|auth
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup
operator|.
name|addMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrueIsMember
argument_list|(
name|newGroup
operator|.
name|getMembers
argument_list|()
argument_list|,
name|auth
argument_list|)
expr_stmt|;
name|assertTrueIsMember
argument_list|(
name|newGroup
operator|.
name|getDeclaredMembers
argument_list|()
argument_list|,
name|auth
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|newGroup
operator|!=
literal|null
condition|)
block|{
name|newGroup
operator|.
name|removeMember
argument_list|(
name|auth
argument_list|)
expr_stmt|;
name|newGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIndirectMembers
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|User
name|user
init|=
name|getTestUser
argument_list|(
name|superuser
argument_list|)
decl_stmt|;
name|Group
name|newGroup
init|=
literal|null
decl_stmt|;
name|Group
name|newGroup2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newGroup
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|newGroup2
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|newGroup
operator|.
name|addMember
argument_list|(
name|newGroup2
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup
operator|.
name|isMember
argument_list|(
name|newGroup2
argument_list|)
argument_list|)
expr_stmt|;
name|newGroup2
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// testuser must not be declared member of 'newGroup'
name|assertFalseIsMember
argument_list|(
name|newGroup
operator|.
name|getDeclaredMembers
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|assertFalseMemberOfContainsGroup
argument_list|(
name|user
operator|.
name|declaredMemberOf
argument_list|()
argument_list|,
name|newGroup
argument_list|)
expr_stmt|;
comment|// testuser must however be member of 'newGroup' (indirect).
name|assertTrueIsMember
argument_list|(
name|newGroup
operator|.
name|getMembers
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|assertTrueMemberOfContainsGroup
argument_list|(
name|user
operator|.
name|memberOf
argument_list|()
argument_list|,
name|newGroup
argument_list|)
expr_stmt|;
comment|// testuser cannot be removed from 'newGroup'
name|assertFalse
argument_list|(
name|newGroup
operator|.
name|removeMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|newGroup
operator|!=
literal|null
condition|)
block|{
name|newGroup
operator|.
name|removeMember
argument_list|(
name|newGroup2
argument_list|)
expr_stmt|;
name|newGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|newGroup2
operator|!=
literal|null
condition|)
block|{
name|newGroup2
operator|.
name|removeMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|newGroup2
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMembersInPrincipal
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|User
name|auth
init|=
name|getTestUser
argument_list|(
name|superuser
argument_list|)
decl_stmt|;
name|Group
name|newGroup
init|=
literal|null
decl_stmt|;
name|Group
name|newGroup2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newGroup
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|newGroup2
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|newGroup
operator|.
name|addMember
argument_list|(
name|newGroup2
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|newGroup2
operator|.
name|addMember
argument_list|(
name|auth
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|java
operator|.
name|security
operator|.
name|acl
operator|.
name|Group
name|ngPrincipal
init|=
operator|(
name|java
operator|.
name|security
operator|.
name|acl
operator|.
name|Group
operator|)
name|newGroup
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|java
operator|.
name|security
operator|.
name|acl
operator|.
name|Group
name|ng2Principal
init|=
operator|(
name|java
operator|.
name|security
operator|.
name|acl
operator|.
name|Group
operator|)
name|newGroup2
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|ng2Principal
operator|.
name|isMember
argument_list|(
name|ngPrincipal
argument_list|)
argument_list|)
expr_stmt|;
comment|// newGroup2 must be member of newGroup's principal
name|assertTrue
argument_list|(
name|ngPrincipal
operator|.
name|isMember
argument_list|(
name|newGroup2
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// testuser must be member of newGroup2's and newGroup's principal (indirect)
name|assertTrue
argument_list|(
name|ng2Principal
operator|.
name|isMember
argument_list|(
name|auth
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ngPrincipal
operator|.
name|isMember
argument_list|(
name|auth
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|newGroup
operator|!=
literal|null
condition|)
block|{
name|newGroup
operator|.
name|removeMember
argument_list|(
name|newGroup2
argument_list|)
expr_stmt|;
name|newGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|newGroup2
operator|!=
literal|null
condition|)
block|{
name|newGroup2
operator|.
name|removeMember
argument_list|(
name|auth
argument_list|)
expr_stmt|;
name|newGroup2
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeeplyNestedGroups
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|Set
argument_list|<
name|Group
argument_list|>
name|groups
init|=
operator|new
name|HashSet
argument_list|<
name|Group
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|User
name|auth
init|=
name|getTestUser
argument_list|(
name|superuser
argument_list|)
decl_stmt|;
name|Group
name|topGroup
init|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create chain of nested groups with auth member of bottom group
name|Group
name|bottomGroup
init|=
name|topGroup
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|100
condition|;
name|k
operator|++
control|)
block|{
name|Group
name|g
init|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
decl_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|bottomGroup
operator|.
name|addMember
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|bottomGroup
operator|=
name|g
expr_stmt|;
block|}
name|bottomGroup
operator|.
name|addMember
argument_list|(
name|auth
argument_list|)
expr_stmt|;
comment|// Check that every groups has exactly one member
for|for
control|(
name|Group
name|g
range|:
name|groups
control|)
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|declaredMembers
init|=
name|g
operator|.
name|getDeclaredMembers
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|declaredMembers
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|declaredMembers
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|declaredMembers
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check that we get all members from the getMembers call
name|HashSet
argument_list|<
name|Group
argument_list|>
name|allGroups
init|=
operator|new
name|HashSet
argument_list|<
name|Group
argument_list|>
argument_list|(
name|groups
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|it
init|=
name|topGroup
operator|.
name|getMembers
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Authorizable
name|a
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|equals
argument_list|(
name|auth
argument_list|)
operator|||
name|allGroups
operator|.
name|remove
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|allGroups
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
for|for
control|(
name|Group
name|g
range|:
name|groups
control|)
block|{
name|g
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInheritedMembers
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Authorizable
argument_list|>
name|authorizables
init|=
operator|new
name|HashSet
argument_list|<
name|Authorizable
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|User
name|testUser
init|=
name|userMgr
operator|.
name|createUser
argument_list|(
name|createUserId
argument_list|()
argument_list|,
literal|"pw"
argument_list|)
decl_stmt|;
name|authorizables
operator|.
name|add
argument_list|(
name|testUser
argument_list|)
expr_stmt|;
name|Group
name|group1
init|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
decl_stmt|;
name|authorizables
operator|.
name|add
argument_list|(
name|group1
argument_list|)
expr_stmt|;
name|Group
name|group2
init|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
decl_stmt|;
name|authorizables
operator|.
name|add
argument_list|(
name|group2
argument_list|)
expr_stmt|;
name|Group
name|group3
init|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
decl_stmt|;
name|group1
operator|.
name|addMember
argument_list|(
name|testUser
argument_list|)
expr_stmt|;
name|group2
operator|.
name|addMember
argument_list|(
name|testUser
argument_list|)
expr_stmt|;
name|group3
operator|.
name|addMember
argument_list|(
name|group1
argument_list|)
expr_stmt|;
name|group3
operator|.
name|addMember
argument_list|(
name|group2
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|members
init|=
name|group3
operator|.
name|getMembers
argument_list|()
decl_stmt|;
while|while
condition|(
name|members
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Authorizable
name|a
init|=
name|members
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|authorizables
operator|.
name|contains
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|authorizables
operator|.
name|remove
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|authorizables
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
for|for
control|(
name|Authorizable
name|a
range|:
name|authorizables
control|)
block|{
name|a
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCyclicGroups
parameter_list|()
throws|throws
name|AuthorizableExistsException
throws|,
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|Group
name|group1
init|=
literal|null
decl_stmt|;
name|Group
name|group2
init|=
literal|null
decl_stmt|;
name|Group
name|group3
init|=
literal|null
decl_stmt|;
try|try
block|{
name|group1
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|group2
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|group3
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|group1
operator|.
name|addMember
argument_list|(
name|group2
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|group2
operator|.
name|addMember
argument_list|(
name|group3
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
if|if
condition|(
name|group3
operator|.
name|addMember
argument_list|(
name|group1
argument_list|)
condition|)
block|{
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Cyclic group membership must be detected."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|assertCyclicCommitFailed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|group1
operator|!=
literal|null
condition|)
name|group1
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|group2
operator|!=
literal|null
condition|)
name|group2
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|group3
operator|!=
literal|null
condition|)
name|group3
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCyclicGroups2
parameter_list|()
throws|throws
name|AuthorizableExistsException
throws|,
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|Group
name|group1
init|=
literal|null
decl_stmt|;
name|Group
name|group2
init|=
literal|null
decl_stmt|;
name|Group
name|group3
init|=
literal|null
decl_stmt|;
try|try
block|{
name|group1
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|group2
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|group3
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|group1
operator|.
name|addMember
argument_list|(
name|group2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|group2
operator|.
name|addMember
argument_list|(
name|group3
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|group3
operator|.
name|addMember
argument_list|(
name|group1
argument_list|)
condition|)
block|{
comment|// circular membership not detected => try save
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Cyclic group membership must be detected."
argument_list|)
expr_stmt|;
block|}
comment|// else: success, circular membership detected upon addMember
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|assertCyclicCommitFailed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|group1
operator|!=
literal|null
condition|)
name|group1
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|group2
operator|!=
literal|null
condition|)
name|group2
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|group3
operator|!=
literal|null
condition|)
name|group3
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assertCyclicCommitFailed
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|Throwable
name|th
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|th
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|th
operator|instanceof
name|CommitFailedException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|31
argument_list|,
operator|(
operator|(
name|CommitFailedException
operator|)
name|th
operator|)
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveMemberTwice
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|User
name|auth
init|=
name|getTestUser
argument_list|(
name|superuser
argument_list|)
decl_stmt|;
name|Group
name|newGroup
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newGroup
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup
operator|.
name|addMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup
operator|.
name|removeMember
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|auth
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|newGroup
operator|.
name|removeMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|newGroup
operator|!=
literal|null
condition|)
block|{
name|newGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddItselfAsMember
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|Group
name|newGroup
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newGroup
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|newGroup
operator|.
name|addMember
argument_list|(
name|newGroup
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|newGroup
operator|.
name|removeMember
argument_list|(
name|newGroup
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|newGroup
operator|!=
literal|null
condition|)
block|{
name|newGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveGroupIfMemberExist
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|User
name|auth
init|=
name|getTestUser
argument_list|(
name|superuser
argument_list|)
decl_stmt|;
name|String
name|newGroupId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Group
name|newGroup
init|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
decl_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|newGroupId
operator|=
name|newGroup
operator|.
name|getID
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup
operator|.
name|addMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|newGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|Group
name|gr
init|=
operator|(
name|Group
operator|)
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|newGroupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|gr
operator|!=
literal|null
condition|)
block|{
name|gr
operator|.
name|removeMember
argument_list|(
name|auth
argument_list|)
expr_stmt|;
name|gr
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveGroupClearsMembership
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|User
name|auth
init|=
name|getTestUser
argument_list|(
name|superuser
argument_list|)
decl_stmt|;
name|Group
name|newGroup
init|=
literal|null
decl_stmt|;
name|String
name|groupId
decl_stmt|;
try|try
block|{
name|newGroup
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|groupId
operator|=
name|newGroup
operator|.
name|getID
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup
operator|.
name|addMember
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|boolean
name|isMember
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|Group
argument_list|>
name|it
init|=
name|auth
operator|.
name|declaredMemberOf
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|isMember
condition|)
block|{
name|isMember
operator|=
name|groupId
operator|.
name|equals
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|isMember
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|newGroup
operator|!=
literal|null
condition|)
block|{
name|newGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|Group
argument_list|>
name|it
init|=
name|auth
operator|.
name|declaredMemberOf
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertFalse
argument_list|(
name|groupId
operator|.
name|equals
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|auth
operator|.
name|memberOf
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertFalse
argument_list|(
name|groupId
operator|.
name|equals
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveUserToOtherGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user1
init|=
name|userMgr
operator|.
name|createUser
argument_list|(
name|createUserId
argument_list|()
argument_list|,
literal|"p"
argument_list|)
decl_stmt|;
name|User
name|user2
init|=
name|userMgr
operator|.
name|createUser
argument_list|(
name|createUserId
argument_list|()
argument_list|,
literal|"p"
argument_list|)
decl_stmt|;
name|Group
name|grp1
init|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
decl_stmt|;
name|Group
name|grp2
init|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
decl_stmt|;
name|grp1
operator|.
name|addMember
argument_list|(
name|user1
argument_list|)
expr_stmt|;
name|grp1
operator|.
name|addMember
argument_list|(
name|user2
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|checkDeclaredMembers
argument_list|(
name|grp1
argument_list|,
name|user1
operator|.
name|getID
argument_list|()
argument_list|,
name|user2
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|checkDeclaredMembers
argument_list|(
name|grp2
argument_list|)
expr_stmt|;
name|checkDeclaredMemberOf
argument_list|(
name|user1
argument_list|,
name|grp1
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|checkDeclaredMemberOf
argument_list|(
name|user2
argument_list|,
name|grp1
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|grp1
operator|.
name|removeMember
argument_list|(
name|user1
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|checkDeclaredMembers
argument_list|(
name|grp1
argument_list|,
name|user2
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|checkDeclaredMembers
argument_list|(
name|grp2
argument_list|)
expr_stmt|;
name|checkDeclaredMemberOf
argument_list|(
name|user1
argument_list|)
expr_stmt|;
name|checkDeclaredMemberOf
argument_list|(
name|user2
argument_list|,
name|grp1
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|grp2
operator|.
name|addMember
argument_list|(
name|user1
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|checkDeclaredMembers
argument_list|(
name|grp1
argument_list|,
name|user2
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|checkDeclaredMembers
argument_list|(
name|grp2
argument_list|,
name|user1
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|checkDeclaredMemberOf
argument_list|(
name|user1
argument_list|,
name|grp2
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|checkDeclaredMemberOf
argument_list|(
name|user2
argument_list|,
name|grp1
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveMembership
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|grId2
init|=
name|createGroupId
argument_list|()
decl_stmt|;
name|Group
name|gr2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|gr2
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|grId2
argument_list|)
expr_stmt|;
name|gr2
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|Group
argument_list|>
name|groups
init|=
name|user
operator|.
name|declaredMemberOf
argument_list|()
decl_stmt|;
while|while
condition|(
name|groups
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Group
name|group
init|=
name|groups
operator|.
name|next
argument_list|()
decl_stmt|;
name|group
operator|.
name|removeMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|group
operator|.
name|getID
argument_list|()
argument_list|,
name|Group
operator|.
name|class
argument_list|)
operator|.
name|isDeclaredMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|grId2
argument_list|,
name|Group
operator|.
name|class
argument_list|)
operator|.
name|isDeclaredMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|=
name|user
operator|.
name|declaredMemberOf
argument_list|()
expr_stmt|;
while|while
condition|(
name|groups
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|id
init|=
name|groups
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|group
operator|.
name|getID
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|grId2
operator|.
name|equals
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|gr2
operator|!=
literal|null
condition|)
block|{
name|gr2
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveMembershipWithDifferentSessions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|grId2
init|=
name|createGroupId
argument_list|()
decl_stmt|;
name|Group
name|gr2
init|=
literal|null
decl_stmt|;
name|Session
name|s2
init|=
literal|null
decl_stmt|;
name|Session
name|s3
init|=
literal|null
decl_stmt|;
try|try
block|{
name|gr2
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|grId2
argument_list|)
expr_stmt|;
name|gr2
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|s2
operator|=
name|getHelper
argument_list|()
operator|.
name|getReadWriteSession
argument_list|()
expr_stmt|;
name|Authorizable
name|u2
init|=
name|getUserManager
argument_list|(
name|s2
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Group
argument_list|>
name|groups
init|=
name|u2
operator|.
name|declaredMemberOf
argument_list|()
decl_stmt|;
while|while
condition|(
name|groups
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Group
name|group
init|=
name|groups
operator|.
name|next
argument_list|()
decl_stmt|;
name|group
operator|.
name|removeMember
argument_list|(
name|u2
argument_list|)
expr_stmt|;
block|}
name|s2
operator|.
name|save
argument_list|()
expr_stmt|;
name|s3
operator|=
name|getHelper
argument_list|()
operator|.
name|getReadWriteSession
argument_list|()
expr_stmt|;
name|Authorizable
name|u3
init|=
name|getUserManager
argument_list|(
name|s3
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|getUserManager
argument_list|(
name|s3
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|group
operator|.
name|getID
argument_list|()
argument_list|,
name|Group
operator|.
name|class
argument_list|)
operator|.
name|isDeclaredMember
argument_list|(
name|u3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|getUserManager
argument_list|(
name|s3
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|grId2
argument_list|,
name|Group
operator|.
name|class
argument_list|)
operator|.
name|isDeclaredMember
argument_list|(
name|u3
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|=
name|u3
operator|.
name|declaredMemberOf
argument_list|()
expr_stmt|;
while|while
condition|(
name|groups
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|id
init|=
name|groups
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|group
operator|.
name|getID
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|grId2
operator|.
name|equals
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|gr2
operator|!=
literal|null
condition|)
block|{
name|gr2
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|s2
operator|!=
literal|null
condition|)
block|{
name|s2
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|s3
operator|!=
literal|null
condition|)
block|{
name|s3
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|testAddMembersById
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|newGroup
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newGroup
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|failed
init|=
name|group
operator|.
name|addMembers
argument_list|(
literal|"nonExistingMember"
argument_list|,
name|newGroup
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|failed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|group
operator|.
name|isMember
argument_list|(
name|newGroup
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|newGroup
operator|!=
literal|null
condition|)
block|{
name|newGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|testAddSelfById
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|failed
init|=
name|group
operator|.
name|addMembers
argument_list|(
name|group
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|failed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|failed
operator|.
name|contains
argument_list|(
name|group
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAddToEveryoneById
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|everyone
init|=
literal|null
decl_stmt|;
try|try
block|{
name|everyone
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|failed
init|=
name|everyone
operator|.
name|addMembers
argument_list|(
name|group
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|failed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|failed
operator|.
name|contains
argument_list|(
name|group
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|everyone
operator|!=
literal|null
condition|)
block|{
name|everyone
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|testRemoveMembersById
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|newGroup
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newGroup
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|failed
init|=
name|group
operator|.
name|removeMembers
argument_list|(
literal|"nonExistingMember"
argument_list|,
name|newGroup
operator|.
name|getID
argument_list|()
argument_list|,
name|user
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|failed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|group
operator|.
name|isMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|newGroup
operator|!=
literal|null
condition|)
block|{
name|newGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|testRemoveSelfById
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|failed
init|=
name|group
operator|.
name|removeMembers
argument_list|(
name|group
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|failed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|failed
operator|.
name|contains
argument_list|(
name|group
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveFromEveryoneById
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|everyone
init|=
literal|null
decl_stmt|;
try|try
block|{
name|everyone
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|failed
init|=
name|everyone
operator|.
name|removeMembers
argument_list|(
name|group
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|failed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|failed
operator|.
name|contains
argument_list|(
name|group
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|everyone
operator|!=
literal|null
condition|)
block|{
name|everyone
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|checkDeclaredMembers
parameter_list|(
name|Group
name|grp
parameter_list|,
name|String
modifier|...
name|ids
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|TreeSet
argument_list|<
name|String
argument_list|>
name|members
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|iter
init|=
name|grp
operator|.
name|getMembers
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|members
operator|.
name|add
argument_list|(
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|ids
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Group members"
argument_list|,
name|Text
operator|.
name|implode
argument_list|(
name|ids
argument_list|,
literal|","
argument_list|)
argument_list|,
name|Text
operator|.
name|implode
argument_list|(
name|members
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|members
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkDeclaredMemberOf
parameter_list|(
name|Authorizable
name|auth
parameter_list|,
name|String
modifier|...
name|ids
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|TreeSet
argument_list|<
name|String
argument_list|>
name|members
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Group
argument_list|>
name|iter
init|=
name|auth
operator|.
name|declaredMemberOf
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|members
operator|.
name|add
argument_list|(
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|ids
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Group memberships"
argument_list|,
name|Text
operator|.
name|implode
argument_list|(
name|ids
argument_list|,
literal|","
argument_list|)
argument_list|,
name|Text
operator|.
name|implode
argument_list|(
name|members
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|members
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

