begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|spi
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * An index name, which possibly contains two version numbers: the product  * version number, and the customer version number.  *   * The format of an index node name is:   * - The name of the index,   * - optionally a dash ('-') and the product version number,   * - optionally "-custom-" and the customer version number.  *   * If the node name doesn't contain version numbers / dashes, then version 0 is  * assumed (for both the product version number and customer version number).  */
end_comment

begin_class
class|class
name|IndexName
implements|implements
name|Comparable
argument_list|<
name|IndexName
argument_list|>
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IndexName
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// already logged index names
specifier|private
specifier|static
specifier|final
name|HashSet
argument_list|<
name|String
argument_list|>
name|LOGGED_WARN
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// when LOGGED_WARN will be cleared
specifier|private
specifier|static
name|long
name|nextLogWarnClear
decl_stmt|;
specifier|private
specifier|final
name|String
name|nodeName
decl_stmt|;
specifier|private
specifier|final
name|String
name|baseName
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isVersioned
decl_stmt|;
specifier|private
specifier|final
name|int
name|productVersion
decl_stmt|;
specifier|private
specifier|final
name|int
name|customerVersion
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isLegal
decl_stmt|;
comment|/**      * Parse the node name. Both node names with version and without version are      * supported.      *       * @param nodeName the node name (starting from root; e.g. "/oak:index/lucene")      * @return the index name object      */
specifier|public
specifier|static
name|IndexName
name|parse
parameter_list|(
specifier|final
name|String
name|nodeName
parameter_list|)
block|{
name|String
name|baseName
init|=
name|nodeName
decl_stmt|;
name|int
name|index
init|=
name|baseName
operator|.
name|lastIndexOf
argument_list|(
literal|'-'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
return|return
operator|new
name|IndexName
argument_list|(
name|nodeName
argument_list|,
literal|true
argument_list|)
return|;
block|}
name|String
name|last
init|=
name|baseName
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
decl_stmt|;
name|baseName
operator|=
name|baseName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|v1
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|last
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|baseName
operator|.
name|endsWith
argument_list|(
literal|"-custom"
argument_list|)
condition|)
block|{
return|return
operator|new
name|IndexName
argument_list|(
name|nodeName
argument_list|,
name|baseName
argument_list|,
name|v1
argument_list|,
literal|0
argument_list|)
return|;
block|}
name|baseName
operator|=
name|baseName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|baseName
operator|.
name|length
argument_list|()
operator|-
literal|"-custom"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|=
name|baseName
operator|.
name|lastIndexOf
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
return|return
operator|new
name|IndexName
argument_list|(
name|nodeName
argument_list|,
name|baseName
argument_list|,
literal|0
argument_list|,
name|v1
argument_list|)
return|;
block|}
name|last
operator|=
name|baseName
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
name|baseName
operator|=
name|baseName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|int
name|v2
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|last
argument_list|)
decl_stmt|;
return|return
operator|new
name|IndexName
argument_list|(
name|nodeName
argument_list|,
name|baseName
argument_list|,
name|v2
argument_list|,
name|v1
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextLogWarnClear
operator|<
name|now
condition|)
block|{
name|LOGGED_WARN
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// clear again each 5 minutes
name|nextLogWarnClear
operator|=
name|now
operator|+
literal|5
operator|*
literal|60
operator|*
literal|1000
expr_stmt|;
block|}
if|if
condition|(
name|LOGGED_WARN
operator|.
name|add
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Index name format error: "
operator|+
name|nodeName
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|IndexName
argument_list|(
name|nodeName
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
specifier|private
name|IndexName
parameter_list|(
name|String
name|nodeName
parameter_list|,
name|boolean
name|isLegal
parameter_list|)
block|{
comment|// not versioned
name|this
operator|.
name|nodeName
operator|=
name|nodeName
expr_stmt|;
name|this
operator|.
name|baseName
operator|=
name|nodeName
expr_stmt|;
name|this
operator|.
name|isVersioned
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|productVersion
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|customerVersion
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|isLegal
operator|=
name|isLegal
expr_stmt|;
block|}
specifier|private
name|IndexName
parameter_list|(
name|String
name|nodeName
parameter_list|,
name|String
name|baseName
parameter_list|,
name|int
name|productVersion
parameter_list|,
name|int
name|customerVersion
parameter_list|)
block|{
comment|// versioned
name|this
operator|.
name|nodeName
operator|=
name|nodeName
expr_stmt|;
name|this
operator|.
name|baseName
operator|=
name|baseName
expr_stmt|;
name|this
operator|.
name|isVersioned
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|productVersion
operator|=
name|productVersion
expr_stmt|;
name|this
operator|.
name|customerVersion
operator|=
name|customerVersion
expr_stmt|;
name|this
operator|.
name|isLegal
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|nodeName
operator|+
literal|" base="
operator|+
name|baseName
operator|+
operator|(
name|isVersioned
condition|?
literal|" versioned"
else|:
literal|""
operator|)
operator|+
literal|" product="
operator|+
name|productVersion
operator|+
literal|" custom="
operator|+
name|customerVersion
operator|+
operator|(
name|isLegal
condition|?
literal|""
else|:
literal|" illegal"
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|IndexName
name|o
parameter_list|)
block|{
name|int
name|comp
init|=
name|baseName
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|baseName
argument_list|)
decl_stmt|;
if|if
condition|(
name|comp
operator|!=
literal|0
condition|)
block|{
return|return
name|comp
return|;
block|}
name|comp
operator|=
name|Integer
operator|.
name|compare
argument_list|(
name|productVersion
argument_list|,
name|o
operator|.
name|productVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|comp
operator|!=
literal|0
condition|)
block|{
return|return
name|comp
return|;
block|}
return|return
name|Integer
operator|.
name|compare
argument_list|(
name|customerVersion
argument_list|,
name|o
operator|.
name|customerVersion
argument_list|)
return|;
block|}
comment|/**      * Filter out index that are replaced by another index with the same base      * name but newer version.      *       * Indexes without a version number in the name are always used, except if      * there is an active index with the same base name but a newer version.      *       * Active indexes have a hidden ":oak:mount-" node, which means they are      * indexed in the read-only node store.      *       * @param indexPaths the set of index paths      * @param rootState the root node state (used to find hidden nodes)      * @return the filtered list      */
specifier|public
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|filterReplacedIndexes
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|indexPaths
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|IndexName
argument_list|>
name|latestVersions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|IndexName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|indexPaths
control|)
block|{
name|IndexName
name|indexName
init|=
name|IndexName
operator|.
name|parse
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexName
operator|.
name|isVersioned
condition|)
block|{
comment|// which might not be a good idea - instead, it should check if the composite node store is used
comment|// (but how?)
if|if
condition|(
operator|!
name|isIndexActive
argument_list|(
name|p
argument_list|,
name|rootState
argument_list|)
condition|)
block|{
comment|// the index is inactive, so not used
continue|continue;
block|}
block|}
name|IndexName
name|stored
init|=
name|latestVersions
operator|.
name|get
argument_list|(
name|indexName
operator|.
name|baseName
argument_list|)
decl_stmt|;
if|if
condition|(
name|stored
operator|==
literal|null
operator|||
name|stored
operator|.
name|compareTo
argument_list|(
name|indexName
argument_list|)
operator|<
literal|0
condition|)
block|{
comment|// no old version, or old version is smaller: replace
name|latestVersions
operator|.
name|put
argument_list|(
name|indexName
operator|.
name|baseName
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
block|}
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|latestVersions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|IndexName
name|n
range|:
name|latestVersions
operator|.
name|values
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|n
operator|.
name|nodeName
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isIndexActive
parameter_list|(
name|String
name|indexPath
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
name|NodeState
name|indexNode
init|=
name|rootState
decl_stmt|;
for|for
control|(
name|String
name|e
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|indexPath
argument_list|)
control|)
block|{
name|indexNode
operator|=
name|indexNode
operator|.
name|getChildNode
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|c
range|:
name|indexNode
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|startsWith
argument_list|(
literal|":oak:mount-"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

