begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|DataStoreCacheUtils
operator|.
name|recursiveDelete
import|;
end_import

begin_comment
comment|/**  * Utility methods to upgrade Old DataStore cache  * {@link org.apache.jackrabbit.core.data.CachingDataStore}.  */
end_comment

begin_class
specifier|public
class|class
name|DataStoreCacheUpgradeUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DataStoreCacheUpgradeUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|UPLOAD_MAP
init|=
literal|"async-pending-uploads.ser"
decl_stmt|;
specifier|static
specifier|final
name|String
name|UPLOAD_STAGING_DIR
init|=
name|UploadStagingCache
operator|.
name|UPLOAD_STAGING_DIR
decl_stmt|;
specifier|static
specifier|final
name|String
name|DOWNLOAD_DIR
init|=
name|FileCache
operator|.
name|DOWNLOAD_DIR
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|deSerializeUploadMap
parameter_list|(
name|File
name|homeDir
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|asyncUploadMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|File
name|asyncUploadMapFile
init|=
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
name|UPLOAD_MAP
argument_list|)
decl_stmt|;
if|if
condition|(
name|asyncUploadMapFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|path
init|=
name|asyncUploadMapFile
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|InputStream
name|fis
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fis
operator|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectInput
name|input
init|=
operator|new
name|ObjectInputStream
argument_list|(
name|fis
argument_list|)
decl_stmt|;
name|asyncUploadMap
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
operator|)
name|input
operator|.
name|readObject
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error in reading pending uploads map [{}] from location [{}]"
argument_list|,
name|UPLOAD_MAP
argument_list|,
name|homeDir
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|fis
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"AsyncUploadMap read [{}]"
argument_list|,
name|asyncUploadMap
argument_list|)
expr_stmt|;
block|}
return|return
name|asyncUploadMap
return|;
block|}
specifier|private
specifier|static
name|void
name|deleteSerializedUploadMap
parameter_list|(
name|File
name|homeDir
parameter_list|)
block|{
name|File
name|uploadMap
init|=
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
name|UPLOAD_MAP
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|uploadMap
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted asyncUploadMap [{}] from [{}]"
argument_list|,
name|UPLOAD_MAP
argument_list|,
name|homeDir
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|notInExceptions
parameter_list|(
name|File
name|file
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|exceptions
parameter_list|)
block|{
name|String
name|parent
init|=
name|file
operator|.
name|getParent
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|exception
range|:
name|exceptions
control|)
block|{
if|if
condition|(
name|parent
operator|.
name|contains
argument_list|(
name|exception
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|void
name|moveDownloadCache
parameter_list|(
specifier|final
name|File
name|path
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|exceptions
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"tmp"
argument_list|,
name|UPLOAD_STAGING_DIR
argument_list|,
name|DOWNLOAD_DIR
argument_list|)
decl_stmt|;
name|File
name|newDownloadDir
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|,
name|DOWNLOAD_DIR
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|File
argument_list|>
name|iterator
init|=
name|Files
operator|.
name|fileTreeTraverser
argument_list|()
operator|.
name|postOrderTraversal
argument_list|(
name|path
argument_list|)
operator|.
name|filter
argument_list|(
operator|new
name|Predicate
argument_list|<
name|File
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|File
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|isFile
argument_list|()
operator|&&
operator|!
name|input
operator|.
name|getParentFile
argument_list|()
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|&&
operator|!
name|notInExceptions
argument_list|(
name|input
argument_list|,
name|exceptions
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|File
name|download
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Download cache file absolute pre-upgrade path "
operator|+
name|download
argument_list|)
expr_stmt|;
name|File
name|newDownload
init|=
operator|new
name|File
argument_list|(
name|newDownloadDir
argument_list|,
name|download
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|substring
argument_list|(
name|path
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|newDownload
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Downloaded cache file absolute post-upgrade path "
operator|+
name|newDownload
argument_list|)
expr_stmt|;
try|try
block|{
name|FileUtils
operator|.
name|moveFile
argument_list|(
name|download
argument_list|,
name|newDownload
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Download cache file [{}] moved to [{}]"
argument_list|,
name|download
argument_list|,
name|newDownload
argument_list|)
expr_stmt|;
name|recursiveDelete
argument_list|(
name|download
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to move download cache file [{}] to [{}]"
argument_list|,
name|download
argument_list|,
name|newDownload
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|movePendingUploadsToStaging
parameter_list|(
name|File
name|homeDir
parameter_list|,
name|File
name|path
parameter_list|,
name|boolean
name|deleteMap
parameter_list|)
block|{
name|File
name|newUploadDir
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|,
name|UPLOAD_STAGING_DIR
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|pendingUploads
init|=
name|deSerializeUploadMap
argument_list|(
name|homeDir
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|pendingFileIter
init|=
name|pendingUploads
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|pendingFileIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|file
init|=
name|pendingFileIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|File
name|upload
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Pending upload absolute path "
operator|+
name|upload
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|newUpload
init|=
operator|new
name|File
argument_list|(
name|newUploadDir
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Pending upload upgrade absolute path "
operator|+
name|newUpload
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|newUpload
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
name|upload
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|upload
operator|+
literal|" File exists"
argument_list|)
expr_stmt|;
try|try
block|{
name|FileUtils
operator|.
name|moveFile
argument_list|(
name|upload
argument_list|,
name|newUpload
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Pending upload file [{}] moved to [{}]"
argument_list|,
name|upload
argument_list|,
name|newUpload
argument_list|)
expr_stmt|;
name|recursiveDelete
argument_list|(
name|upload
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to move pending upload file [{}] to [{}]"
argument_list|,
name|upload
argument_list|,
name|newUpload
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"File [{}] does not exist"
argument_list|,
name|upload
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|deleteMap
condition|)
block|{
name|deleteSerializedUploadMap
argument_list|(
name|homeDir
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|upgrade
parameter_list|(
name|File
name|homeDir
parameter_list|,
name|File
name|path
parameter_list|,
name|boolean
name|moveCache
parameter_list|,
name|boolean
name|deleteMap
parameter_list|)
block|{
name|movePendingUploadsToStaging
argument_list|(
name|homeDir
argument_list|,
name|path
argument_list|,
name|deleteMap
argument_list|)
expr_stmt|;
if|if
condition|(
name|moveCache
condition|)
block|{
name|moveDownloadCache
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

