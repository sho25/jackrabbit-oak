begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|scheduler
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|currentThread
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|NANOSECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|LONG
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|UniformReservoir
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Revisions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentOverflowException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|GCGeneration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ChangeDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|LockBasedScheduler
implements|implements
name|Scheduler
block|{
specifier|public
specifier|static
class|class
name|LockBasedSchedulerBuilder
block|{
annotation|@
name|NotNull
specifier|private
specifier|final
name|SegmentReader
name|reader
decl_stmt|;
annotation|@
name|NotNull
specifier|private
specifier|final
name|Revisions
name|revisions
decl_stmt|;
annotation|@
name|NotNull
specifier|private
specifier|final
name|SegmentNodeStoreStats
name|stats
decl_stmt|;
specifier|private
name|boolean
name|dispatchChanges
init|=
literal|true
decl_stmt|;
specifier|private
name|LockBasedSchedulerBuilder
parameter_list|(
annotation|@
name|NotNull
name|Revisions
name|revisions
parameter_list|,
annotation|@
name|NotNull
name|SegmentReader
name|reader
parameter_list|,
annotation|@
name|NotNull
name|SegmentNodeStoreStats
name|stats
parameter_list|)
block|{
name|this
operator|.
name|revisions
operator|=
name|revisions
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
block|}
annotation|@
name|NotNull
specifier|public
name|LockBasedSchedulerBuilder
name|dispatchChanges
parameter_list|(
name|boolean
name|dispatchChanges
parameter_list|)
block|{
name|this
operator|.
name|dispatchChanges
operator|=
name|dispatchChanges
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|NotNull
specifier|public
name|LockBasedScheduler
name|build
parameter_list|()
block|{
if|if
condition|(
name|dispatchChanges
condition|)
block|{
return|return
operator|new
name|ObservableLockBasedScheduler
argument_list|(
name|this
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|LockBasedScheduler
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
block|}
specifier|public
specifier|static
name|LockBasedSchedulerBuilder
name|builder
parameter_list|(
annotation|@
name|NotNull
name|Revisions
name|revisions
parameter_list|,
annotation|@
name|NotNull
name|SegmentReader
name|reader
parameter_list|,
annotation|@
name|NotNull
name|SegmentNodeStoreStats
name|stats
parameter_list|)
block|{
return|return
operator|new
name|LockBasedSchedulerBuilder
argument_list|(
name|checkNotNull
argument_list|(
name|revisions
argument_list|)
argument_list|,
name|checkNotNull
argument_list|(
name|reader
argument_list|)
argument_list|,
name|checkNotNull
argument_list|(
name|stats
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LockBasedScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Flag controlling the commit lock fairness      */
specifier|private
specifier|static
specifier|final
name|boolean
name|COMMIT_FAIR_LOCK
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"oak.segmentNodeStore.commitFairLock"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * Flag controlling the commit time quantile to wait for the lock in order      * to increase chances of returning an up to date state.      */
specifier|private
specifier|static
specifier|final
name|double
name|SCHEDULER_FETCH_COMMIT_DELAY_QUANTILE
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"oak.scheduler.fetch.commitDelayQuantile"
argument_list|,
literal|"0.5"
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * Flag controlling the number of milliseconds after which warnings are logged      * when threads ready to commit have to wait for a commit in progress.      */
specifier|private
specifier|static
specifier|final
name|int
name|COMMIT_WAIT_WARN_MILLIS
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.segmentNodeStore.commitWaitWarnMillis"
argument_list|,
literal|60000
argument_list|)
decl_stmt|;
comment|/**      * Maximum number of milliseconds to wait before re-attempting to update the current      * head state after a successful commit, provided a concurrent head state update happens.      */
specifier|private
specifier|static
specifier|final
name|long
name|MAXIMUM_BACKOFF
init|=
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|10
argument_list|,
name|SECONDS
argument_list|)
decl_stmt|;
comment|/**      * Sets the number of seconds to wait for the attempt to grab the lock to      * create a checkpoint      */
specifier|private
specifier|final
name|int
name|checkpointsLockWaitTime
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.checkpoints.lockWaitTime"
argument_list|,
literal|10
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|ROOT
init|=
literal|"root"
decl_stmt|;
comment|/**      * Semaphore that controls access to the {@link #head} variable. Only a      * single local commit is allowed at a time. When such a commit is in      * progress, no external updates will be seen.      */
specifier|private
specifier|final
name|Semaphore
name|commitSemaphore
init|=
operator|new
name|Semaphore
argument_list|(
literal|1
argument_list|,
name|COMMIT_FAIR_LOCK
argument_list|)
decl_stmt|;
annotation|@
name|NotNull
specifier|private
specifier|final
name|SegmentReader
name|reader
decl_stmt|;
annotation|@
name|NotNull
specifier|private
specifier|final
name|Revisions
name|revisions
decl_stmt|;
specifier|protected
specifier|final
name|AtomicReference
argument_list|<
name|SegmentNodeState
argument_list|>
name|head
decl_stmt|;
specifier|private
specifier|final
name|SegmentNodeStoreStats
name|stats
decl_stmt|;
specifier|private
specifier|final
name|Histogram
name|commitTimeHistogram
init|=
operator|new
name|Histogram
argument_list|(
operator|new
name|UniformReservoir
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|CommitSemaphoreLogging
name|commitSemaphoreLogging
init|=
operator|new
name|CommitSemaphoreLogging
argument_list|()
decl_stmt|;
comment|/*      * Logging of commits that are either blocked for longer than COMMIT_WAIT_WARN_MILLIS      * or on a commit that crossed the gc boundary. See OAK-8071.      */
specifier|private
class|class
name|CommitSemaphoreLogging
block|{
annotation|@
name|Nullable
specifier|private
specifier|volatile
name|Commit
name|commit
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|timeStamp
decl_stmt|;
specifier|public
name|void
name|commitStarted
parameter_list|(
annotation|@
name|NotNull
name|Commit
name|commit
parameter_list|)
block|{
name|this
operator|.
name|commit
operator|=
name|commit
expr_stmt|;
name|this
operator|.
name|timeStamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|commitEnded
parameter_list|()
block|{
name|this
operator|.
name|commit
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|warnOnBlockingCommit
parameter_list|()
block|{
name|Commit
name|currentCommit
init|=
name|commit
decl_stmt|;
name|GCGeneration
name|headGeneration
init|=
name|head
operator|.
name|get
argument_list|()
operator|.
name|getGcGeneration
argument_list|()
decl_stmt|;
name|GCGeneration
name|commitGeneration
init|=
name|currentCommit
operator|==
literal|null
condition|?
literal|null
else|:
name|currentCommit
operator|.
name|getGCGeneration
argument_list|()
decl_stmt|;
name|long
name|dt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|timeStamp
decl_stmt|;
name|boolean
name|isBlocking
init|=
name|currentCommit
operator|!=
literal|null
operator|&&
name|dt
operator|>
name|COMMIT_WAIT_WARN_MILLIS
decl_stmt|;
name|boolean
name|isOldGeneration
init|=
name|commitGeneration
operator|!=
literal|null
operator|&&
name|headGeneration
operator|.
name|getFullGeneration
argument_list|()
operator|>
name|commitGeneration
operator|.
name|getFullGeneration
argument_list|()
decl_stmt|;
if|if
condition|(
name|isBlocking
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"This commit is blocked by a commit that is in progress since {} ms"
argument_list|,
name|dt
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isOldGeneration
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"The commit in progress is from an old GC generation {}. Head is at {}"
argument_list|,
name|commitGeneration
argument_list|,
name|headGeneration
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|LockBasedScheduler
parameter_list|(
name|LockBasedSchedulerBuilder
name|builder
parameter_list|)
block|{
if|if
condition|(
name|COMMIT_FAIR_LOCK
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Initializing SegmentNodeStore with the commitFairLock option enabled."
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|reader
operator|=
name|builder
operator|.
name|reader
expr_stmt|;
name|this
operator|.
name|revisions
operator|=
name|builder
operator|.
name|revisions
expr_stmt|;
name|this
operator|.
name|stats
operator|=
name|builder
operator|.
name|stats
expr_stmt|;
name|this
operator|.
name|head
operator|=
operator|new
name|AtomicReference
argument_list|<
name|SegmentNodeState
argument_list|>
argument_list|(
name|reader
operator|.
name|readHeadState
argument_list|(
name|revisions
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getHeadNodeState
parameter_list|()
block|{
name|long
name|delay
init|=
operator|(
name|long
operator|)
name|commitTimeHistogram
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getValue
argument_list|(
name|SCHEDULER_FETCH_COMMIT_DELAY_QUANTILE
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|commitSemaphore
operator|.
name|tryAcquire
argument_list|(
name|delay
argument_list|,
name|NANOSECONDS
argument_list|)
condition|)
block|{
try|try
block|{
name|refreshHead
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|commitSemaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
return|return
name|head
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * Refreshes the head state. Should only be called while holding a permit      * from the {@link #commitSemaphore}.      *       * @param dispatchChanges      *            if set to true the changes would also be dispatched      */
specifier|private
name|void
name|refreshHead
parameter_list|(
name|boolean
name|dispatchChanges
parameter_list|)
block|{
name|SegmentNodeState
name|state
init|=
name|reader
operator|.
name|readHeadState
argument_list|(
name|revisions
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|state
operator|.
name|getRecordId
argument_list|()
operator|.
name|equals
argument_list|(
name|head
operator|.
name|get
argument_list|()
operator|.
name|getRecordId
argument_list|()
argument_list|)
condition|)
block|{
name|head
operator|.
name|set
argument_list|(
name|state
argument_list|)
expr_stmt|;
if|if
condition|(
name|dispatchChanges
condition|)
block|{
name|contentChanged
argument_list|(
name|state
operator|.
name|getChildNode
argument_list|(
name|ROOT
argument_list|)
argument_list|,
name|CommitInfo
operator|.
name|EMPTY_EXTERNAL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|contentChanged
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
comment|// do nothing without a change dispatcher
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|schedule
parameter_list|(
annotation|@
name|NotNull
name|Commit
name|commit
parameter_list|,
name|SchedulerOption
modifier|...
name|schedulingOptions
parameter_list|)
throws|throws
name|CommitFailedException
block|{
try|try
block|{
name|commitSemaphoreLogging
operator|.
name|warnOnBlockingCommit
argument_list|()
expr_stmt|;
name|long
name|queuedTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|stats
operator|.
name|onCommitQueued
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
name|commit
operator|::
name|getGCGeneration
argument_list|)
expr_stmt|;
name|commitSemaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|commitSemaphoreLogging
operator|.
name|commitStarted
argument_list|(
name|commit
argument_list|)
expr_stmt|;
try|try
block|{
name|long
name|dequeuedTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|stats
operator|.
name|onCommitDequeued
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
name|dequeuedTime
operator|-
name|queuedTime
argument_list|)
expr_stmt|;
name|long
name|beforeCommitTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|SegmentNodeState
name|merged
init|=
operator|(
name|SegmentNodeState
operator|)
name|execute
argument_list|(
name|commit
argument_list|)
decl_stmt|;
name|commit
operator|.
name|applied
argument_list|(
name|merged
argument_list|)
expr_stmt|;
name|long
name|afterCommitTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|commitTimeHistogram
operator|.
name|update
argument_list|(
name|afterCommitTime
operator|-
name|beforeCommitTime
argument_list|)
expr_stmt|;
name|stats
operator|.
name|onCommit
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
name|afterCommitTime
operator|-
name|beforeCommitTime
argument_list|)
expr_stmt|;
return|return
name|merged
return|;
block|}
finally|finally
block|{
name|commitSemaphoreLogging
operator|.
name|commitEnded
argument_list|()
expr_stmt|;
name|commitSemaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"Segment"
argument_list|,
literal|2
argument_list|,
literal|"Merge interrupted"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SegmentOverflowException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"Segment"
argument_list|,
literal|3
argument_list|,
literal|"Merge failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|NodeState
name|execute
parameter_list|(
name|Commit
name|commit
parameter_list|)
throws|throws
name|CommitFailedException
throws|,
name|InterruptedException
block|{
comment|// only do the merge if there are some changes to commit
if|if
condition|(
name|commit
operator|.
name|hasChanges
argument_list|()
condition|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|backoff
init|=
literal|1
init|;
name|backoff
operator|<
name|MAXIMUM_BACKOFF
condition|;
name|backoff
operator|*=
literal|2
control|)
block|{
name|refreshHead
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|before
init|=
name|head
operator|.
name|get
argument_list|()
decl_stmt|;
name|SegmentNodeState
name|after
init|=
name|commit
operator|.
name|apply
argument_list|(
name|before
argument_list|)
decl_stmt|;
if|if
condition|(
name|revisions
operator|.
name|setHead
argument_list|(
name|before
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|after
operator|.
name|getRecordId
argument_list|()
argument_list|)
condition|)
block|{
name|head
operator|.
name|set
argument_list|(
name|after
argument_list|)
expr_stmt|;
name|contentChanged
argument_list|(
name|after
operator|.
name|getChildNode
argument_list|(
name|ROOT
argument_list|)
argument_list|,
name|commit
operator|.
name|info
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|head
operator|.
name|get
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|ROOT
argument_list|)
return|;
block|}
name|count
operator|++
expr_stmt|;
name|int
name|randNs
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|1_000_000
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Scheduler detected concurrent commits. Retrying after {} ms and {} ns"
argument_list|,
name|backoff
argument_list|,
name|randNs
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|backoff
argument_list|,
name|randNs
argument_list|)
expr_stmt|;
block|}
name|long
name|finish
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|String
name|message
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"The commit could not be executed after {} attempts. Total wait time: {} ms"
argument_list|,
name|count
argument_list|,
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|finish
operator|-
name|start
argument_list|)
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"Segment"
argument_list|,
literal|3
argument_list|,
name|message
argument_list|)
throw|;
block|}
return|return
name|head
operator|.
name|get
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|ROOT
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|checkpoint
parameter_list|(
name|long
name|lifetime
parameter_list|,
annotation|@
name|NotNull
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|lifetime
operator|>
literal|0
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
name|CPCreator
name|cpc
init|=
operator|new
name|CPCreator
argument_list|(
name|name
argument_list|,
name|lifetime
argument_list|,
name|properties
argument_list|)
decl_stmt|;
if|if
condition|(
name|commitSemaphore
operator|.
name|tryAcquire
argument_list|(
name|checkpointsLockWaitTime
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
try|try
block|{
if|if
condition|(
name|cpc
operator|.
name|call
argument_list|()
condition|)
block|{
return|return
name|name
return|;
block|}
block|}
finally|finally
block|{
comment|// Explicitly give up reference to the previous root state
comment|// otherwise they would block cleanup. See OAK-3347
name|refreshHead
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|commitSemaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to create checkpoint {} in {} seconds."
argument_list|,
name|name
argument_list|,
name|checkpointsLockWaitTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Failed to create checkpoint {}."
argument_list|,
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to create checkpoint {}."
argument_list|,
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeCheckpoint
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// try 5 times
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|commitSemaphore
operator|.
name|tryAcquire
argument_list|()
condition|)
block|{
try|try
block|{
name|refreshHead
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|state
init|=
name|head
operator|.
name|get
argument_list|()
decl_stmt|;
name|SegmentNodeBuilder
name|builder
init|=
name|state
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|cp
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"checkpoints"
argument_list|)
operator|.
name|child
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|cp
operator|.
name|exists
argument_list|()
condition|)
block|{
name|cp
operator|.
name|remove
argument_list|()
expr_stmt|;
name|SegmentNodeState
name|newState
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
if|if
condition|(
name|revisions
operator|.
name|setHead
argument_list|(
name|state
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|newState
operator|.
name|getRecordId
argument_list|()
argument_list|)
condition|)
block|{
name|refreshHead
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
finally|finally
block|{
name|commitSemaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
class|class
name|ObservableLockBasedScheduler
extends|extends
name|LockBasedScheduler
implements|implements
name|Observable
block|{
specifier|private
specifier|final
name|ChangeDispatcher
name|changeDispatcher
decl_stmt|;
specifier|public
name|ObservableLockBasedScheduler
parameter_list|(
name|LockBasedSchedulerBuilder
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|this
operator|.
name|changeDispatcher
operator|=
operator|new
name|ChangeDispatcher
argument_list|(
name|head
operator|.
name|get
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|contentChanged
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
name|changeDispatcher
operator|.
name|contentChanged
argument_list|(
name|root
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Closeable
name|addObserver
parameter_list|(
name|Observer
name|observer
parameter_list|)
block|{
return|return
name|changeDispatcher
operator|.
name|addObserver
argument_list|(
name|observer
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|final
class|class
name|CPCreator
implements|implements
name|Callable
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|long
name|lifetime
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
decl_stmt|;
name|CPCreator
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|lifetime
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|lifetime
operator|=
name|lifetime
expr_stmt|;
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|refreshHead
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|state
init|=
name|head
operator|.
name|get
argument_list|()
decl_stmt|;
name|SegmentNodeBuilder
name|builder
init|=
name|state
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|checkpoints
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"checkpoints"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|n
range|:
name|checkpoints
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
name|NodeBuilder
name|cp
init|=
name|checkpoints
operator|.
name|getChildNode
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|PropertyState
name|ts
init|=
name|cp
operator|.
name|getProperty
argument_list|(
literal|"timestamp"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|==
literal|null
operator|||
name|ts
operator|.
name|getType
argument_list|()
operator|!=
name|LONG
operator|||
name|now
operator|>
name|ts
operator|.
name|getValue
argument_list|(
name|LONG
argument_list|)
condition|)
block|{
name|cp
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|NodeBuilder
name|cp
init|=
name|checkpoints
operator|.
name|child
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|Long
operator|.
name|MAX_VALUE
operator|-
name|now
operator|>
name|lifetime
condition|)
block|{
name|cp
operator|.
name|setProperty
argument_list|(
literal|"timestamp"
argument_list|,
name|now
operator|+
name|lifetime
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cp
operator|.
name|setProperty
argument_list|(
literal|"timestamp"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
name|cp
operator|.
name|setProperty
argument_list|(
literal|"created"
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|NodeBuilder
name|props
init|=
name|cp
operator|.
name|setChildNode
argument_list|(
literal|"properties"
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|p
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|p
operator|.
name|getKey
argument_list|()
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cp
operator|.
name|setChildNode
argument_list|(
name|ROOT
argument_list|,
name|state
operator|.
name|getChildNode
argument_list|(
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|newState
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
if|if
condition|(
name|revisions
operator|.
name|setHead
argument_list|(
name|state
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|newState
operator|.
name|getRecordId
argument_list|()
argument_list|)
condition|)
block|{
name|refreshHead
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

