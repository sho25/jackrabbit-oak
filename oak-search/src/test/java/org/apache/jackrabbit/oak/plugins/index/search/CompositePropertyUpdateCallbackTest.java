begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_comment
comment|/**  * Tests for {@link CompositePropertyUpdateCallback}  */
end_comment

begin_class
specifier|public
class|class
name|CompositePropertyUpdateCallbackTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testNullCollectionNotAllowed
parameter_list|()
block|{
try|try
block|{
operator|new
name|CompositePropertyUpdateCallback
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"creating a CompositePropertyUpdateCallback with null delegates should not be allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyCollection
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|CompositePropertyUpdateCallback
name|compositePropertyUpdateCallback
init|=
operator|new
name|CompositePropertyUpdateCallback
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|path
init|=
literal|"/foo"
decl_stmt|;
name|String
name|relativePath
init|=
literal|"bar"
decl_stmt|;
name|PropertyDefinition
name|pd
init|=
name|mock
argument_list|(
name|PropertyDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|PropertyState
name|before
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|PropertyState
name|after
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|compositePropertyUpdateCallback
operator|.
name|propertyUpdated
argument_list|(
name|path
argument_list|,
name|relativePath
argument_list|,
name|pd
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|compositePropertyUpdateCallback
operator|.
name|done
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|propertyUpdated
parameter_list|()
block|{
name|List
argument_list|<
name|PropertyUpdateCallback
argument_list|>
name|delegates
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|delegates
operator|.
name|add
argument_list|(
name|mock
argument_list|(
name|PropertyUpdateCallback
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|delegates
operator|.
name|add
argument_list|(
name|mock
argument_list|(
name|PropertyUpdateCallback
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|CompositePropertyUpdateCallback
name|compositePropertyUpdateCallback
init|=
operator|new
name|CompositePropertyUpdateCallback
argument_list|(
name|delegates
argument_list|)
decl_stmt|;
name|String
name|path
init|=
literal|"/foo"
decl_stmt|;
name|String
name|relativePath
init|=
literal|"bar"
decl_stmt|;
name|PropertyDefinition
name|pd
init|=
name|mock
argument_list|(
name|PropertyDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|PropertyState
name|before
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|PropertyState
name|after
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|compositePropertyUpdateCallback
operator|.
name|propertyUpdated
argument_list|(
name|path
argument_list|,
name|relativePath
argument_list|,
name|pd
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|done
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|List
argument_list|<
name|PropertyUpdateCallback
argument_list|>
name|delegates
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|delegates
operator|.
name|add
argument_list|(
name|mock
argument_list|(
name|PropertyUpdateCallback
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|delegates
operator|.
name|add
argument_list|(
name|mock
argument_list|(
name|PropertyUpdateCallback
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|CompositePropertyUpdateCallback
name|compositePropertyUpdateCallback
init|=
operator|new
name|CompositePropertyUpdateCallback
argument_list|(
name|delegates
argument_list|)
decl_stmt|;
name|compositePropertyUpdateCallback
operator|.
name|done
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

