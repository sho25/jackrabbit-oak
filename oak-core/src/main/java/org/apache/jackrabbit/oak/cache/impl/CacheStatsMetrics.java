begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CacheStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * An OSGi component that binds to all {@link CacheStatsMBean} instances and  * exposes their counters as {@link Metric}s.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|)
specifier|public
class|class
name|CacheStatsMetrics
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CacheStatsMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|REQUEST
init|=
literal|"request"
decl_stmt|;
specifier|static
specifier|final
name|String
name|HIT
init|=
literal|"hit"
decl_stmt|;
specifier|static
specifier|final
name|String
name|MISS
init|=
literal|"miss"
decl_stmt|;
specifier|static
specifier|final
name|String
name|EVICTION
init|=
literal|"eviction"
decl_stmt|;
specifier|static
specifier|final
name|String
name|ELEMENT
init|=
literal|"element"
decl_stmt|;
specifier|static
specifier|final
name|String
name|LOAD_TIME
init|=
literal|"loadTime"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|TYPES
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|REQUEST
argument_list|,
name|HIT
argument_list|,
name|MISS
argument_list|,
name|EVICTION
argument_list|,
name|ELEMENT
argument_list|,
name|LOAD_TIME
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|CacheStatsMBean
argument_list|>
name|cacheStatsMBeans
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
name|MetricRegistry
name|registry
init|=
operator|new
name|MetricRegistry
argument_list|()
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|AT_LEAST_ONE
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|)
specifier|synchronized
name|void
name|addCacheStatsMBean
parameter_list|(
name|CacheStatsMBean
name|stats
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"addCacheStatsMBean({})"
argument_list|,
name|stats
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cacheStatsMBeans
operator|.
name|put
argument_list|(
name|stats
operator|.
name|getName
argument_list|()
argument_list|,
name|stats
argument_list|)
expr_stmt|;
name|registerCacheStatsMBean
argument_list|(
name|this
operator|.
name|registry
argument_list|,
name|stats
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
name|void
name|removeCacheStatsMBean
parameter_list|(
name|CacheStatsMBean
name|stats
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"removeCacheStatsMBean({})"
argument_list|,
name|stats
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cacheStatsMBeans
operator|.
name|remove
argument_list|(
name|stats
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|unregisterCacheStatsMBean
argument_list|(
name|this
operator|.
name|registry
argument_list|,
name|stats
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Reference
argument_list|(
name|target
operator|=
literal|"(name=oak)"
argument_list|)
specifier|synchronized
name|void
name|setMetricRegistry
parameter_list|(
name|MetricRegistry
name|registry
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"setMetricRegistry({})"
argument_list|,
name|registry
argument_list|)
expr_stmt|;
for|for
control|(
name|CacheStatsMBean
name|stats
range|:
name|cacheStatsMBeans
operator|.
name|values
argument_list|()
control|)
block|{
name|unregisterCacheStatsMBean
argument_list|(
name|this
operator|.
name|registry
argument_list|,
name|stats
argument_list|)
expr_stmt|;
name|registerCacheStatsMBean
argument_list|(
name|registry
argument_list|,
name|stats
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|registerCacheStatsMBean
parameter_list|(
name|MetricRegistry
name|registry
parameter_list|,
name|CacheStatsMBean
name|stats
parameter_list|)
block|{
name|registerMetric
argument_list|(
name|registry
argument_list|,
operator|new
name|RequestCounter
argument_list|(
name|stats
argument_list|)
argument_list|)
expr_stmt|;
name|registerMetric
argument_list|(
name|registry
argument_list|,
operator|new
name|HitCounter
argument_list|(
name|stats
argument_list|)
argument_list|)
expr_stmt|;
name|registerMetric
argument_list|(
name|registry
argument_list|,
operator|new
name|MissCounter
argument_list|(
name|stats
argument_list|)
argument_list|)
expr_stmt|;
name|registerMetric
argument_list|(
name|registry
argument_list|,
operator|new
name|EvictionCounter
argument_list|(
name|stats
argument_list|)
argument_list|)
expr_stmt|;
name|registerMetric
argument_list|(
name|registry
argument_list|,
operator|new
name|ElementCounter
argument_list|(
name|stats
argument_list|)
argument_list|)
expr_stmt|;
name|registerMetric
argument_list|(
name|registry
argument_list|,
operator|new
name|LoadTimeCounter
argument_list|(
name|stats
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|registerMetric
parameter_list|(
name|MetricRegistry
name|registry
parameter_list|,
name|CacheStatsMBeanCounter
name|metric
parameter_list|)
block|{
name|String
name|name
init|=
name|metric
operator|.
name|getName
argument_list|()
decl_stmt|;
name|registry
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
name|name
argument_list|,
name|metric
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|unregisterCacheStatsMBean
parameter_list|(
name|MetricRegistry
name|registry
parameter_list|,
name|CacheStatsMBean
name|stats
parameter_list|)
block|{
name|String
name|name
init|=
name|stats
operator|.
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|t
range|:
name|TYPES
control|)
block|{
name|registry
operator|.
name|remove
argument_list|(
name|metricName
argument_list|(
name|name
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|String
name|metricName
parameter_list|(
name|String
name|cacheStatsName
parameter_list|,
name|String
name|type
parameter_list|)
block|{
return|return
literal|"CacheStats."
operator|+
name|cacheStatsName
operator|+
literal|"."
operator|+
name|type
return|;
block|}
specifier|private
specifier|abstract
specifier|static
class|class
name|CacheStatsMBeanCounter
extends|extends
name|Counter
block|{
specifier|protected
name|CacheStatsMBean
name|stats
decl_stmt|;
specifier|protected
name|String
name|type
decl_stmt|;
name|CacheStatsMBeanCounter
parameter_list|(
name|CacheStatsMBean
name|stats
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
name|String
name|getName
parameter_list|()
block|{
return|return
name|metricName
argument_list|(
name|stats
operator|.
name|getName
argument_list|()
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|RequestCounter
extends|extends
name|CacheStatsMBeanCounter
block|{
name|RequestCounter
parameter_list|(
name|CacheStatsMBean
name|stats
parameter_list|)
block|{
name|super
argument_list|(
name|stats
argument_list|,
name|REQUEST
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getCount
parameter_list|()
block|{
return|return
name|stats
operator|.
name|getRequestCount
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|HitCounter
extends|extends
name|CacheStatsMBeanCounter
block|{
name|HitCounter
parameter_list|(
name|CacheStatsMBean
name|stats
parameter_list|)
block|{
name|super
argument_list|(
name|stats
argument_list|,
name|HIT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getCount
parameter_list|()
block|{
return|return
name|stats
operator|.
name|getHitCount
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|MissCounter
extends|extends
name|CacheStatsMBeanCounter
block|{
name|MissCounter
parameter_list|(
name|CacheStatsMBean
name|stats
parameter_list|)
block|{
name|super
argument_list|(
name|stats
argument_list|,
name|MISS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getCount
parameter_list|()
block|{
return|return
name|stats
operator|.
name|getMissCount
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|EvictionCounter
extends|extends
name|CacheStatsMBeanCounter
block|{
name|EvictionCounter
parameter_list|(
name|CacheStatsMBean
name|stats
parameter_list|)
block|{
name|super
argument_list|(
name|stats
argument_list|,
name|EVICTION
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getCount
parameter_list|()
block|{
return|return
name|stats
operator|.
name|getEvictionCount
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|ElementCounter
extends|extends
name|CacheStatsMBeanCounter
block|{
name|ElementCounter
parameter_list|(
name|CacheStatsMBean
name|stats
parameter_list|)
block|{
name|super
argument_list|(
name|stats
argument_list|,
name|ELEMENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getCount
parameter_list|()
block|{
return|return
name|stats
operator|.
name|getElementCount
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|LoadTimeCounter
extends|extends
name|CacheStatsMBeanCounter
block|{
name|LoadTimeCounter
parameter_list|(
name|CacheStatsMBean
name|stats
parameter_list|)
block|{
name|super
argument_list|(
name|stats
argument_list|,
name|LOAD_TIME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getCount
parameter_list|()
block|{
return|return
name|stats
operator|.
name|getTotalLoadTime
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

