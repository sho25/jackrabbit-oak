begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|GCGeneration
import|;
end_import

begin_comment
comment|/**  * A {@link GCListener} that adds a prefix to every log message and delegates to  * another {@link GCListener}. The message prefix includes a number, which can  * be used as a unique counter to group together related log messages.  */
end_comment

begin_class
class|class
name|PrefixedGCListener
implements|implements
name|GCListener
block|{
specifier|private
specifier|final
name|GCListener
name|listener
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|counter
decl_stmt|;
name|PrefixedGCListener
parameter_list|(
name|GCListener
name|listener
parameter_list|,
name|AtomicInteger
name|counter
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|counter
operator|=
name|counter
expr_stmt|;
block|}
specifier|private
name|String
name|prefixed
parameter_list|(
name|String
name|message
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"TarMK GC #%s: %s"
argument_list|,
name|counter
argument_list|,
name|message
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|compactionSucceeded
parameter_list|(
annotation|@
name|Nonnull
name|GCGeneration
name|newGeneration
parameter_list|)
block|{
name|listener
operator|.
name|compactionSucceeded
argument_list|(
name|newGeneration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|compactionFailed
parameter_list|(
annotation|@
name|Nonnull
name|GCGeneration
name|failedGeneration
parameter_list|)
block|{
name|listener
operator|.
name|compactionFailed
argument_list|(
name|failedGeneration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|info
parameter_list|(
name|String
name|message
parameter_list|,
name|Object
modifier|...
name|arguments
parameter_list|)
block|{
name|listener
operator|.
name|info
argument_list|(
name|prefixed
argument_list|(
name|message
argument_list|)
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|message
parameter_list|,
name|Object
modifier|...
name|arguments
parameter_list|)
block|{
name|listener
operator|.
name|warn
argument_list|(
name|prefixed
argument_list|(
name|message
argument_list|)
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|error
parameter_list|(
name|String
name|message
parameter_list|,
name|Exception
name|exception
parameter_list|)
block|{
name|listener
operator|.
name|error
argument_list|(
name|prefixed
argument_list|(
name|message
argument_list|)
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|skipped
parameter_list|(
name|String
name|reason
parameter_list|,
name|Object
modifier|...
name|arguments
parameter_list|)
block|{
name|listener
operator|.
name|skipped
argument_list|(
name|prefixed
argument_list|(
name|reason
argument_list|)
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|compacted
parameter_list|()
block|{
name|listener
operator|.
name|compacted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cleaned
parameter_list|(
name|long
name|reclaimedSize
parameter_list|,
name|long
name|currentSize
parameter_list|)
block|{
name|listener
operator|.
name|cleaned
argument_list|(
name|reclaimedSize
argument_list|,
name|currentSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateStatus
parameter_list|(
name|String
name|status
parameter_list|)
block|{
name|listener
operator|.
name|updateStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

