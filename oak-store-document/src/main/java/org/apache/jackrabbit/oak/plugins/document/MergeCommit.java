begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_comment
comment|/**  * A merge commit containing multiple commit revisions. One for each branch  * commit to merge.  */
end_comment

begin_class
class|class
name|MergeCommit
extends|extends
name|Commit
block|{
specifier|private
specifier|final
name|SortedSet
argument_list|<
name|Revision
argument_list|>
name|mergeRevs
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|Revision
argument_list|>
name|branchCommits
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|MergeCommit
parameter_list|(
name|DocumentNodeStore
name|nodeStore
parameter_list|,
name|RevisionVector
name|baseRevision
parameter_list|,
name|SortedSet
argument_list|<
name|Revision
argument_list|>
name|revisions
parameter_list|)
block|{
name|super
argument_list|(
name|nodeStore
argument_list|,
name|revisions
operator|.
name|last
argument_list|()
argument_list|,
name|baseRevision
argument_list|,
operator|new
name|RevisionVector
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|mergeRevs
operator|=
name|revisions
expr_stmt|;
block|}
name|SortedSet
argument_list|<
name|Revision
argument_list|>
name|getMergeRevisions
parameter_list|()
block|{
return|return
name|mergeRevs
return|;
block|}
name|void
name|addBranchCommits
parameter_list|(
annotation|@
name|NotNull
name|Branch
name|branch
parameter_list|)
block|{
for|for
control|(
name|Revision
name|r
range|:
name|branch
operator|.
name|getCommits
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|branch
operator|.
name|getCommit
argument_list|(
name|r
argument_list|)
operator|.
name|isRebase
argument_list|()
condition|)
block|{
name|branchCommits
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|applyLastRevUpdates
parameter_list|(
name|boolean
name|isBranchCommit
parameter_list|)
block|{
comment|// do nothing for a merge commit, only notify node
comment|// store about merged revisions
name|nodeStore
operator|.
name|revisionsMerged
argument_list|(
name|branchCommits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|applyToCache
parameter_list|(
name|RevisionVector
name|before
parameter_list|,
name|boolean
name|isBranchCommit
parameter_list|)
block|{
comment|// do nothing for a merge commit
block|}
block|}
end_class

end_unit

