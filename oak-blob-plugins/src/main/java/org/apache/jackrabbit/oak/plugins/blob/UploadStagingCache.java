begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Weigher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SettableFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|util
operator|.
name|NamedThreadFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|concurrent
operator|.
name|ExecutorCloser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|AnnotatedStandardMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|CounterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|DefaultStatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|MeterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatsOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|TimerStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
operator|.
name|toStringHelper
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|humanReadableByteCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|DataStoreCacheUpgradeUtils
operator|.
name|movePendingUploadsToStaging
import|;
end_import

begin_comment
comment|/**  * Cache for staging async uploads. This serves as a temporary cache for serving local  * requests till the time the upload has not been synced with the backend.  *<p>  * The appropriate backend for this cache are wrapped in {@link StagingUploader}  * implementations.  *<p>  */
end_comment

begin_class
specifier|public
class|class
name|UploadStagingCache
implements|implements
name|Closeable
block|{
comment|/**      * Logger instance.      */
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UploadStagingCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|UPLOAD_STAGING_DIR
init|=
literal|"upload"
decl_stmt|;
comment|//Rough estimate of the in-memory key, value pair
specifier|private
specifier|final
name|Weigher
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|memWeigher
init|=
operator|new
name|Weigher
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|weigh
parameter_list|(
name|String
name|key
parameter_list|,
name|File
name|value
parameter_list|)
block|{
return|return
operator|(
name|StringUtils
operator|.
name|estimateMemoryUsage
argument_list|(
name|key
argument_list|)
operator|+
name|StringUtils
operator|.
name|estimateMemoryUsage
argument_list|(
name|value
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|+
literal|48
operator|)
return|;
block|}
block|}
decl_stmt|;
comment|/**      * Max size of the upload staging cache in bytes      */
specifier|private
name|long
name|size
decl_stmt|;
comment|/**      * Current cache size in bytes      */
specifier|private
name|AtomicLong
name|currentSize
decl_stmt|;
comment|/**      * Executor for async uploads      */
specifier|private
name|ListeningExecutorService
name|executor
decl_stmt|;
comment|/**      * Scheduled executor for build and remove      */
specifier|private
name|ScheduledExecutorService
name|scheduledExecutor
decl_stmt|;
comment|/**      * In memory map for staged files      */
specifier|private
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|map
decl_stmt|;
comment|/**      * In memory map for files to be deleted after uploads      */
specifier|private
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|attic
decl_stmt|;
comment|/**      * Local directory where uploads are staged      */
specifier|private
name|File
name|uploadCacheSpace
decl_stmt|;
comment|/**      * Wrapper to where the blobs are uploaded/written      */
specifier|private
name|StagingUploader
name|uploader
decl_stmt|;
comment|/**      * Cache stats      */
specifier|private
name|StagingCacheStats
name|cacheStats
decl_stmt|;
comment|/**      * Handle for download cache if any      */
annotation|@
name|Nullable
specifier|private
name|FileCache
name|downloadCache
decl_stmt|;
comment|/**      * Scheduled executor for stats in case required      */
specifier|private
name|ScheduledExecutorService
name|statsExecutor
decl_stmt|;
comment|/**      * Queue containing items to retry.      */
specifier|private
name|LinkedBlockingQueue
argument_list|<
name|String
argument_list|>
name|retryQueue
decl_stmt|;
specifier|private
name|UploadStagingCache
parameter_list|(
name|File
name|dir
parameter_list|,
name|File
name|home
parameter_list|,
name|int
name|uploadThreads
parameter_list|,
name|long
name|size
comment|/* bytes */
parameter_list|,
name|StagingUploader
name|uploader
parameter_list|,
annotation|@
name|Nullable
name|FileCache
name|cache
parameter_list|,
name|StatisticsProvider
name|statisticsProvider
parameter_list|,
annotation|@
name|Nullable
name|ListeningExecutorService
name|executor
parameter_list|,
annotation|@
name|Nullable
name|ScheduledExecutorService
name|scheduledExecutor
parameter_list|,
name|int
name|purgeInterval
comment|/* secs */
parameter_list|,
name|int
name|retryInterval
comment|/* secs */
parameter_list|)
block|{
name|this
operator|.
name|currentSize
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
if|if
condition|(
name|executor
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|executor
operator|=
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|uploadThreads
argument_list|,
operator|new
name|NamedThreadFactory
argument_list|(
literal|"oak-ds-async-upload-thread"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|scheduledExecutor
operator|=
name|scheduledExecutor
expr_stmt|;
if|if
condition|(
name|scheduledExecutor
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|scheduledExecutor
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|2
argument_list|,
operator|new
name|NamedThreadFactory
argument_list|(
literal|"oak-ds-cache-scheduled-thread"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|map
operator|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|attic
operator|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|retryQueue
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|uploadCacheSpace
operator|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"upload"
argument_list|)
expr_stmt|;
name|this
operator|.
name|uploader
operator|=
name|uploader
expr_stmt|;
if|if
condition|(
name|statisticsProvider
operator|==
literal|null
condition|)
block|{
name|statsExecutor
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
expr_stmt|;
name|statisticsProvider
operator|=
operator|new
name|DefaultStatisticsProvider
argument_list|(
name|statsExecutor
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|cacheStats
operator|=
operator|new
name|StagingCacheStats
argument_list|(
name|this
argument_list|,
name|statisticsProvider
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|this
operator|.
name|downloadCache
operator|=
name|cache
expr_stmt|;
name|build
argument_list|(
name|home
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduledExecutor
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|RemoveJob
argument_list|()
argument_list|,
name|purgeInterval
argument_list|,
name|purgeInterval
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduledExecutor
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|RetryJob
argument_list|()
argument_list|,
name|retryInterval
argument_list|,
name|retryInterval
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
specifier|private
name|UploadStagingCache
parameter_list|()
block|{     }
specifier|public
specifier|static
name|UploadStagingCache
name|build
parameter_list|(
name|File
name|dir
parameter_list|,
name|File
name|home
parameter_list|,
name|int
name|uploadThreads
parameter_list|,
name|long
name|size
comment|/* bytes */
parameter_list|,
name|StagingUploader
name|uploader
parameter_list|,
annotation|@
name|Nullable
name|FileCache
name|cache
parameter_list|,
name|StatisticsProvider
name|statisticsProvider
parameter_list|,
annotation|@
name|Nullable
name|ListeningExecutorService
name|executor
parameter_list|,
annotation|@
name|Nullable
name|ScheduledExecutorService
name|scheduledExecutor
parameter_list|,
name|int
name|purgeInterval
comment|/* secs */
parameter_list|,
name|int
name|retryInterval
comment|/* secs */
parameter_list|)
block|{
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|UploadStagingCache
argument_list|(
name|dir
argument_list|,
name|home
argument_list|,
name|uploadThreads
argument_list|,
name|size
argument_list|,
name|uploader
argument_list|,
name|cache
argument_list|,
name|statisticsProvider
argument_list|,
name|executor
argument_list|,
name|scheduledExecutor
argument_list|,
name|purgeInterval
argument_list|,
name|retryInterval
argument_list|)
return|;
block|}
return|return
operator|new
name|UploadStagingCache
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|SettableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|put
parameter_list|(
name|String
name|id
parameter_list|,
name|File
name|input
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|absent
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|invalidate
parameter_list|(
name|String
name|key
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|String
argument_list|>
name|getAllIdentifiers
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|File
name|getIfPresent
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataStoreCacheStatsMBean
name|getStats
parameter_list|()
block|{
return|return
operator|new
name|StagingCacheStats
argument_list|(
name|this
argument_list|,
name|StatisticsProvider
operator|.
name|NOOP
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{             }
block|}
return|;
block|}
comment|/**      * Retrieves all the files staged in the staging area and schedules them for uploads.      * @param home the home of the repo      * @param rootPath the parent of the cache      */
specifier|private
name|void
name|build
parameter_list|(
name|File
name|home
parameter_list|,
name|File
name|rootPath
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Scheduling pending uploads"
argument_list|)
expr_stmt|;
comment|// Move any older cache pending uploads
name|movePendingUploadsToStaging
argument_list|(
name|home
argument_list|,
name|rootPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|File
argument_list|>
name|iter
init|=
name|Files
operator|.
name|fileTreeTraverser
argument_list|()
operator|.
name|postOrderTraversal
argument_list|(
name|uploadCacheSpace
argument_list|)
operator|.
name|filter
argument_list|(
operator|new
name|Predicate
argument_list|<
name|File
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|File
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|isFile
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|File
name|toBeSyncedFile
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|SettableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|scheduled
init|=
name|putOptionalDisregardingSize
argument_list|(
name|toBeSyncedFile
operator|.
name|getName
argument_list|()
argument_list|,
name|toBeSyncedFile
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|scheduled
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"File [{}] not setup for upload"
argument_list|,
name|toBeSyncedFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Scheduled [{}] pending uploads"
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|/**      * Puts the file into the staging cache if possible.      * Returns an optional SettableFuture if staged for upload otherwise empty.      *      * @param id the id of the file to be staged      * @param input the file to be staged      * @return An Optional SettableFuture containing      *              1 if upload was successful,      *              0 if an existing id is already pending for upload      */
specifier|public
name|Optional
argument_list|<
name|SettableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|put
parameter_list|(
name|String
name|id
parameter_list|,
name|File
name|input
parameter_list|)
block|{
return|return
name|putOptionalDisregardingSize
argument_list|(
name|id
argument_list|,
name|input
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Puts the file into the staging cache if ignoreSize else if possible      * Returns an optional SettableFuture if staged for upload otherwise empty.      *      * @param id      * @param input      * @param ignoreSize      * @return      */
specifier|private
name|Optional
argument_list|<
name|SettableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|putOptionalDisregardingSize
parameter_list|(
name|String
name|id
parameter_list|,
name|File
name|input
parameter_list|,
name|boolean
name|ignoreSize
parameter_list|)
block|{
name|cacheStats
operator|.
name|markRequest
argument_list|()
expr_stmt|;
name|long
name|length
init|=
name|input
operator|.
name|length
argument_list|()
decl_stmt|;
name|File
name|uploadFile
init|=
name|DataStoreCacheUtils
operator|.
name|getFile
argument_list|(
name|id
argument_list|,
name|uploadCacheSpace
argument_list|)
decl_stmt|;
comment|// if ignoreSize update internal size else size permits
comment|// and not upload complete or already scheduled for upload
if|if
condition|(
operator|(
operator|(
name|ignoreSize
operator|&&
name|currentSize
operator|.
name|addAndGet
argument_list|(
name|length
argument_list|)
operator|>=
literal|0
operator|)
operator|||
name|currentSize
operator|.
name|addAndGet
argument_list|(
name|length
argument_list|)
operator|<=
name|size
operator|)
operator|&&
operator|!
name|attic
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
operator|&&
name|map
operator|.
name|putIfAbsent
argument_list|(
name|id
argument_list|,
name|uploadFile
argument_list|)
operator|==
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|uploadFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|moveFile
argument_list|(
name|input
argument_list|,
name|uploadFile
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"File [{}] moved to staging cache [{}]"
argument_list|,
name|input
argument_list|,
name|uploadFile
argument_list|)
expr_stmt|;
block|}
comment|// update stats
name|cacheStats
operator|.
name|markHit
argument_list|()
expr_stmt|;
name|cacheStats
operator|.
name|incrementCount
argument_list|()
expr_stmt|;
name|cacheStats
operator|.
name|incrementSize
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|cacheStats
operator|.
name|incrementMemSize
argument_list|(
name|memWeigher
operator|.
name|weigh
argument_list|(
name|id
argument_list|,
name|uploadFile
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|stage
argument_list|(
name|id
argument_list|,
name|uploadFile
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error moving file to staging"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//reset the current state and return empty flag as not added to cache
name|currentSize
operator|.
name|addAndGet
argument_list|(
operator|-
name|length
argument_list|)
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
name|id
argument_list|,
name|uploadFile
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|currentSize
operator|.
name|addAndGet
argument_list|(
operator|-
name|length
argument_list|)
expr_stmt|;
comment|// if file is still pending upload, count it as present
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
operator|||
name|attic
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|SettableFuture
argument_list|<
name|Integer
argument_list|>
name|result
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
return|return
name|Optional
operator|.
name|absent
argument_list|()
return|;
block|}
comment|/**      * Stages the file for async upload.      * * Puts the file into the stage caching file system directory      * * Schedules a job for upload to write using the given {@link StagingUploader}      * * Updates the internal map and size variable      * * Adds a callback listener to remove the file once finished      * @param id of the file to be staged      * @param upload the file to be staged      * @return a SettableFuture instance      */
specifier|private
name|SettableFuture
argument_list|<
name|Integer
argument_list|>
name|stage
parameter_list|(
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|File
name|upload
parameter_list|)
block|{
specifier|final
name|SettableFuture
argument_list|<
name|Integer
argument_list|>
name|result
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
comment|// create an async job
name|ListenableFuture
argument_list|<
name|Integer
argument_list|>
name|future
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
specifier|final
name|TimerStats
operator|.
name|Context
name|uploadContext
init|=
name|cacheStats
operator|.
name|startUpLoaderTimer
argument_list|()
decl_stmt|;
name|uploader
operator|.
name|write
argument_list|(
name|id
argument_list|,
name|upload
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"File added to backend [{}]"
argument_list|,
name|upload
argument_list|)
expr_stmt|;
name|uploadContext
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error adding file to backend"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Add a callback to the returned Future object for handling success and error
name|Futures
operator|.
name|addCallback
argument_list|(
name|future
argument_list|,
operator|new
name|FutureCallback
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
annotation|@
name|Nullable
name|Integer
name|r
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully added [{}], [{}]"
argument_list|,
name|id
argument_list|,
name|upload
argument_list|)
expr_stmt|;
try|try
block|{
comment|// move to attic to be deleted and remove from in-memory map
name|attic
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|upload
argument_list|)
expr_stmt|;
comment|// Add the uploaded file to the download cache if available
if|if
condition|(
name|downloadCache
operator|!=
literal|null
condition|)
block|{
comment|// Touch the file to update timestamp and record length
name|Files
operator|.
name|touch
argument_list|(
name|upload
argument_list|)
expr_stmt|;
name|downloadCache
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|upload
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"[{}] added to cache"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error in cleaning up [{}] from staging"
argument_list|,
name|upload
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error adding [{}] with file [{}] to backend"
argument_list|,
name|id
argument_list|,
name|upload
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|result
operator|.
name|setException
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|retryQueue
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"File [{}] scheduled for upload [{}]"
argument_list|,
name|upload
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error staging file for upload [{}]"
argument_list|,
name|upload
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Invalidate called externally.      * @param key to invalidate      */
specifier|protected
name|void
name|invalidate
parameter_list|(
name|String
name|key
parameter_list|)
block|{
comment|// Check if not already scheduled for deletion
if|if
condition|(
operator|!
name|attic
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
operator|&&
name|map
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Invalidating [{}]"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|File
name|toBeDeleted
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|deleteInternal
argument_list|(
name|key
argument_list|,
name|toBeDeleted
argument_list|)
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|toBeDeleted
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not delete file from staging"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns all identifiers presently staged.      *      * @return iterator of all identifiers presently staged.      */
specifier|protected
name|Iterator
argument_list|<
name|String
argument_list|>
name|getAllIdentifiers
parameter_list|()
block|{
return|return
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      * Removes all cached from attic      */
specifier|private
name|void
name|remove
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting purge of uploaded files"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|attic
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Check if not already scheduled for upload
if|if
condition|(
operator|!
name|map
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"upload map contains id [{}]"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|File
name|toBeDeleted
init|=
name|attic
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|deleteInternal
argument_list|(
name|key
argument_list|,
name|toBeDeleted
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cache [{}] file deleted for id [{}]"
argument_list|,
name|toBeDeleted
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in removing entry for id [{}]"
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished removal of [{}] files"
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adjust stats and delete file.      *      * @param key to delete      * @param toBeDeleted file to delete      * @throws IOException      */
specifier|private
name|void
name|deleteInternal
parameter_list|(
name|String
name|key
parameter_list|,
name|File
name|toBeDeleted
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to delete file [{}]"
argument_list|,
name|toBeDeleted
argument_list|)
expr_stmt|;
name|long
name|length
init|=
name|toBeDeleted
operator|.
name|length
argument_list|()
decl_stmt|;
name|DataStoreCacheUtils
operator|.
name|recursiveDelete
argument_list|(
name|toBeDeleted
argument_list|,
name|uploadCacheSpace
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"deleted file [{}]"
argument_list|,
name|toBeDeleted
argument_list|)
expr_stmt|;
name|currentSize
operator|.
name|addAndGet
argument_list|(
operator|-
name|length
argument_list|)
expr_stmt|;
comment|// Update stats for removal
name|cacheStats
operator|.
name|decrementSize
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|cacheStats
operator|.
name|decrementMemSize
argument_list|(
name|memWeigher
operator|.
name|weigh
argument_list|(
name|key
argument_list|,
name|toBeDeleted
argument_list|)
argument_list|)
expr_stmt|;
name|cacheStats
operator|.
name|decrementCount
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns the File if present or null otherwise.      * Any usage of the returned file should assert for its existence as the file      * could be purged from the file system once uploaded using the internal scheduled remove      * mechanism.      *      * @param key of the file to check      * @return a File object if found      */
annotation|@
name|Nullable
specifier|public
name|File
name|getIfPresent
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|cacheStats
operator|.
name|markLoad
argument_list|()
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|cacheStats
operator|.
name|markLoadSuccess
argument_list|()
expr_stmt|;
return|return
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Cache related stats      *      * @return an instance of the {@link DataStoreCacheStatsMBean}.      */
specifier|public
name|DataStoreCacheStatsMBean
name|getStats
parameter_list|()
block|{
return|return
name|cacheStats
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Uploads in progress on close [{}]"
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Uploads completed but not cleared from cache [{}]"
argument_list|,
name|attic
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Staging cache stats on close [{}]"
argument_list|,
name|cacheStats
operator|.
name|cacheInfoAsString
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|ExecutorCloser
argument_list|(
name|executor
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
operator|new
name|ExecutorCloser
argument_list|(
name|scheduledExecutor
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
operator|new
name|ExecutorCloser
argument_list|(
name|statsExecutor
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|setDownloadCache
parameter_list|(
annotation|@
name|Nullable
name|FileCache
name|downloadCache
parameter_list|)
block|{
name|this
operator|.
name|downloadCache
operator|=
name|downloadCache
expr_stmt|;
block|}
comment|/**      * Class which calls remove on all      */
class|class
name|RemoveJob
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Job to retry failed uploads.      */
class|class
name|RetryJob
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Retry job started"
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|entries
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|retryQueue
operator|.
name|drainTo
argument_list|(
name|entries
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|entries
control|)
block|{
name|File
name|file
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Retrying upload of id [{}] with file [{}] "
argument_list|,
name|key
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|stage
argument_list|(
name|key
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scheduled retry for upload of id [{}] with file [{}]"
argument_list|,
name|key
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Retry job finished with staging [{}] jobs"
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|/**  * Upload Staging Cache Statistics.  */
end_comment

begin_class
class|class
name|StagingCacheStats
extends|extends
name|AnnotatedStandardMBean
implements|implements
name|DataStoreCacheStatsMBean
block|{
specifier|private
specifier|static
specifier|final
name|String
name|HITS
init|=
literal|"HITS"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REQUESTS
init|=
literal|"REQUESTS"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|UPLOAD_TIMER
init|=
literal|"UPLOAD_TIMER"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LOAD_SUCCESS
init|=
literal|"CACHE_LOAD_SUCCESS"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LOAD
init|=
literal|"CACHE_LOAD"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CURRENT_SIZE
init|=
literal|"CURRENT_SIZE"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CURRENT_MEM_SIZE
init|=
literal|"CURRENT_MEM_SIZE"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COUNT
init|=
literal|"COUNT"
decl_stmt|;
specifier|private
specifier|final
name|String
name|cacheName
decl_stmt|;
comment|/** Max size in bytes configured for the cache **/
specifier|private
specifier|final
name|long
name|maxWeight
decl_stmt|;
comment|/** Tracking the number of uploads that could be staged **/
specifier|private
specifier|final
name|MeterStats
name|hitMeter
decl_stmt|;
comment|/** Tracking the number of requests to upload& stage **/
specifier|private
specifier|final
name|MeterStats
name|requestMeter
decl_stmt|;
comment|/** Tracking the number of get requests serviced by the cache **/
specifier|private
specifier|final
name|MeterStats
name|loadSuccessMeter
decl_stmt|;
comment|/** Tracking the number of get requests received by the cache **/
specifier|private
specifier|final
name|MeterStats
name|loadMeter
decl_stmt|;
comment|/** Tracking the upload time **/
specifier|private
specifier|final
name|TimerStats
name|uploadTimer
decl_stmt|;
comment|/** Tracking the current size in MB **/
specifier|private
specifier|final
name|CounterStats
name|currentSizeMeter
decl_stmt|;
comment|/** Tracking the in-memory size of cache **/
specifier|private
specifier|final
name|CounterStats
name|currentMemSizeMeter
decl_stmt|;
comment|/** Tracking the cache element count **/
specifier|private
specifier|final
name|CounterStats
name|countMeter
decl_stmt|;
comment|/** Handle to the cache **/
specifier|private
specifier|final
name|UploadStagingCache
name|cache
decl_stmt|;
name|StagingCacheStats
parameter_list|(
name|UploadStagingCache
name|cache
parameter_list|,
name|StatisticsProvider
name|provider
parameter_list|,
name|long
name|maxWeight
parameter_list|)
block|{
name|super
argument_list|(
name|DataStoreCacheStatsMBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
name|StatisticsProvider
name|statisticsProvider
init|=
name|provider
decl_stmt|;
comment|// Configure cache name
name|cacheName
operator|=
literal|"DataStore-StagingCache"
expr_stmt|;
name|this
operator|.
name|maxWeight
operator|=
name|maxWeight
expr_stmt|;
comment|// Fetch stats and time series
name|String
name|statName
decl_stmt|;
name|statName
operator|=
name|getStatName
argument_list|(
name|HITS
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
name|hitMeter
operator|=
name|statisticsProvider
operator|.
name|getMeter
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
expr_stmt|;
name|statName
operator|=
name|getStatName
argument_list|(
name|REQUESTS
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
name|requestMeter
operator|=
name|statisticsProvider
operator|.
name|getMeter
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
expr_stmt|;
name|statName
operator|=
name|getStatName
argument_list|(
name|UPLOAD_TIMER
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
name|uploadTimer
operator|=
name|statisticsProvider
operator|.
name|getTimer
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
expr_stmt|;
name|statName
operator|=
name|getStatName
argument_list|(
name|LOAD_SUCCESS
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
name|loadSuccessMeter
operator|=
name|statisticsProvider
operator|.
name|getMeter
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
expr_stmt|;
name|statName
operator|=
name|getStatName
argument_list|(
name|LOAD
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
name|loadMeter
operator|=
name|statisticsProvider
operator|.
name|getMeter
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
expr_stmt|;
name|statName
operator|=
name|getStatName
argument_list|(
name|CURRENT_SIZE
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
name|currentSizeMeter
operator|=
name|statisticsProvider
operator|.
name|getCounterStats
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
expr_stmt|;
name|statName
operator|=
name|getStatName
argument_list|(
name|CURRENT_MEM_SIZE
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
name|currentMemSizeMeter
operator|=
name|statisticsProvider
operator|.
name|getCounterStats
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
expr_stmt|;
name|statName
operator|=
name|getStatName
argument_list|(
name|COUNT
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
name|countMeter
operator|=
name|statisticsProvider
operator|.
name|getCounterStats
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
expr_stmt|;
block|}
comment|//~--------------------------------------< stats update methods
name|void
name|markHit
parameter_list|()
block|{
name|hitMeter
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
name|void
name|markRequest
parameter_list|()
block|{
name|requestMeter
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
name|void
name|markLoadSuccess
parameter_list|()
block|{
name|loadSuccessMeter
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
name|void
name|markLoad
parameter_list|()
block|{
name|loadMeter
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
name|TimerStats
operator|.
name|Context
name|startUpLoaderTimer
parameter_list|()
block|{
return|return
name|this
operator|.
name|uploadTimer
operator|.
name|time
argument_list|()
return|;
block|}
name|void
name|incrementCount
parameter_list|()
block|{
name|countMeter
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
name|void
name|incrementSize
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|currentSizeMeter
operator|.
name|inc
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
name|void
name|incrementMemSize
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|currentMemSizeMeter
operator|.
name|inc
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
name|void
name|decrementCount
parameter_list|()
block|{
name|countMeter
operator|.
name|dec
argument_list|()
expr_stmt|;
block|}
name|void
name|decrementSize
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|currentSizeMeter
operator|.
name|dec
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
name|void
name|decrementMemSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|currentMemSizeMeter
operator|.
name|dec
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|cacheName
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getRequestCount
parameter_list|()
block|{
return|return
name|requestMeter
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getHitCount
parameter_list|()
block|{
return|return
name|hitMeter
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getHitRate
parameter_list|()
block|{
name|long
name|hitCount
init|=
name|hitMeter
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|long
name|requestCount
init|=
name|requestMeter
operator|.
name|getCount
argument_list|()
decl_stmt|;
return|return
operator|(
name|requestCount
operator|==
literal|0L
condition|?
literal|0L
else|:
operator|(
name|double
operator|)
name|hitCount
operator|/
name|requestCount
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMissCount
parameter_list|()
block|{
return|return
name|requestMeter
operator|.
name|getCount
argument_list|()
operator|-
name|hitMeter
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getMissRate
parameter_list|()
block|{
name|long
name|missCount
init|=
name|getMissCount
argument_list|()
decl_stmt|;
name|long
name|requestCount
init|=
name|requestMeter
operator|.
name|getCount
argument_list|()
decl_stmt|;
return|return
operator|(
name|requestCount
operator|==
literal|0L
condition|?
literal|0L
else|:
operator|(
name|double
operator|)
name|missCount
operator|/
name|requestCount
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLoadCount
parameter_list|()
block|{
return|return
name|loadMeter
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLoadSuccessCount
parameter_list|()
block|{
return|return
name|loadSuccessMeter
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLoadExceptionCount
parameter_list|()
block|{
return|return
operator|(
name|getLoadCount
argument_list|()
operator|-
name|getLoadSuccessCount
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getLoadExceptionRate
parameter_list|()
block|{
name|long
name|loadExceptionCount
init|=
name|getLoadExceptionCount
argument_list|()
decl_stmt|;
name|long
name|loadCount
init|=
name|loadMeter
operator|.
name|getCount
argument_list|()
decl_stmt|;
return|return
operator|(
name|loadCount
operator|==
literal|0L
condition|?
literal|0L
else|:
operator|(
name|double
operator|)
name|loadExceptionCount
operator|/
name|loadCount
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getElementCount
parameter_list|()
block|{
return|return
name|countMeter
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMaxTotalWeight
parameter_list|()
block|{
return|return
name|maxWeight
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|estimateCurrentWeight
parameter_list|()
block|{
return|return
name|currentSizeMeter
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|estimateCurrentMemoryWeight
parameter_list|()
block|{
return|return
name|currentMemSizeMeter
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|cacheInfoAsString
parameter_list|()
block|{
return|return
name|toStringHelper
argument_list|(
literal|"StagingCacheStats"
argument_list|)
operator|.
name|add
argument_list|(
literal|"requestCount"
argument_list|,
name|getRequestCount
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"hitCount"
argument_list|,
name|getHitCount
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"hitRate"
argument_list|,
name|format
argument_list|(
literal|"%1.2f"
argument_list|,
name|getHitRate
argument_list|()
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"missCount"
argument_list|,
name|getMissCount
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"missRate"
argument_list|,
name|format
argument_list|(
literal|"%1.2f"
argument_list|,
name|getMissRate
argument_list|()
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"loadCount"
argument_list|,
name|getLoadCount
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"loadSuccessCount"
argument_list|,
name|getLoadSuccessCount
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"elementCount"
argument_list|,
name|getElementCount
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"currentMemSize"
argument_list|,
name|estimateCurrentMemoryWeight
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"totalWeight"
argument_list|,
name|humanReadableByteCount
argument_list|(
name|estimateCurrentWeight
argument_list|()
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"maxWeight"
argument_list|,
name|humanReadableByteCount
argument_list|(
name|getMaxTotalWeight
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|//~--------------------------------------< CacheStatsMBean - stats that are not (yet) available
annotation|@
name|Override
specifier|public
name|long
name|getTotalLoadTime
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getAverageLoadPenalty
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getEvictionCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|resetStats
parameter_list|()
block|{     }
comment|//~--------------------------------------< private helpers
specifier|private
specifier|static
name|String
name|getStatName
parameter_list|(
name|String
name|meter
parameter_list|,
name|String
name|cacheName
parameter_list|)
block|{
return|return
name|cacheName
operator|+
literal|"."
operator|+
name|meter
return|;
block|}
block|}
end_class

begin_comment
comment|/**  * Wrapper for backend used for uploading  */
end_comment

begin_interface
interface|interface
name|StagingUploader
block|{
name|void
name|write
parameter_list|(
name|String
name|id
parameter_list|,
name|File
name|f
parameter_list|)
throws|throws
name|DataStoreException
function_decl|;
block|}
end_interface

end_unit

