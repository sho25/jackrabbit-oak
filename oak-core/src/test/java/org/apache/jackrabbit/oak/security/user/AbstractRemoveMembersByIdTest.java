begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractRemoveMembersByIdTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|static
specifier|final
name|String
index|[]
name|NON_EXISTING_IDS
init|=
operator|new
name|String
index|[]
block|{
literal|"nonExisting1"
block|,
literal|"nonExisting2"
block|}
decl_stmt|;
name|Group
name|testGroup
decl_stmt|;
name|Group
name|memberGroup
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|UserManager
name|uMgr
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|NON_EXISTING_IDS
control|)
block|{
name|assertNull
argument_list|(
name|uMgr
operator|.
name|getAuthorizable
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|testGroup
operator|=
name|uMgr
operator|.
name|createGroup
argument_list|(
literal|"testGroup"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|memberGroup
operator|=
name|uMgr
operator|.
name|createGroup
argument_list|(
literal|"memberGroup"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|testGroup
operator|.
name|addMember
argument_list|(
name|memberGroup
argument_list|)
expr_stmt|;
name|testGroup
operator|.
name|addMember
argument_list|(
name|getTestUser
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
if|if
condition|(
name|testGroup
operator|!=
literal|null
condition|)
block|{
name|testGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|memberGroup
operator|!=
literal|null
condition|)
block|{
name|memberGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|root
operator|.
name|hasPendingChanges
argument_list|()
condition|)
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|removeNonExistingMember
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|testGroup
operator|.
name|removeMembers
argument_list|(
name|NON_EXISTING_IDS
argument_list|)
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|removeExistingMemberWithoutAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|testGroup
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|acl
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|acl
operator|.
name|addEntry
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_USER_MANAGEMENT
argument_list|)
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testGroup
operator|.
name|getPath
argument_list|()
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|userId
init|=
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
decl_stmt|;
name|ContentSession
name|testSession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testSession
operator|=
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|userId
argument_list|,
name|userId
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Root
name|testRoot
init|=
name|testSession
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|testRoot
operator|.
name|getTree
argument_list|(
name|memberGroup
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Group
name|gr
init|=
name|getUserManager
argument_list|(
name|testRoot
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|testGroup
operator|.
name|getID
argument_list|()
argument_list|,
name|Group
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|failed
init|=
name|gr
operator|.
name|removeMembers
argument_list|(
name|memberGroup
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|testRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|failed
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|testSession
operator|!=
literal|null
condition|)
block|{
name|testSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserMember
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|failed
init|=
name|testGroup
operator|.
name|removeMembers
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|failed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupMember
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|failed
init|=
name|testGroup
operator|.
name|removeMembers
argument_list|(
name|memberGroup
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|failed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConstraintViolationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyId
parameter_list|()
throws|throws
name|Exception
block|{
name|testGroup
operator|.
name|removeMembers
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConstraintViolationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testValidAndEmptyId
parameter_list|()
throws|throws
name|Exception
block|{
name|testGroup
operator|.
name|removeMembers
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullId
parameter_list|()
throws|throws
name|Exception
block|{
name|testGroup
operator|.
name|removeMembers
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConstraintViolationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testValidAndNullId
parameter_list|()
throws|throws
name|Exception
block|{
name|testGroup
operator|.
name|removeMembers
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSameId
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|failed
init|=
name|testGroup
operator|.
name|removeMembers
argument_list|(
name|testGroup
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|failed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|failed
operator|.
name|contains
argument_list|(
name|testGroup
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|failed
init|=
name|testGroup
operator|.
name|removeMembers
argument_list|(
name|memberGroup
operator|.
name|getID
argument_list|()
argument_list|,
name|memberGroup
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|failed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testGroup
operator|.
name|isDeclaredMember
argument_list|(
name|memberGroup
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotMember
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|gr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|gr
operator|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createGroup
argument_list|(
literal|"testGroup"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|failed
init|=
name|testGroup
operator|.
name|removeMembers
argument_list|(
name|gr
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|failed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|gr
operator|!=
literal|null
condition|)
block|{
name|gr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

