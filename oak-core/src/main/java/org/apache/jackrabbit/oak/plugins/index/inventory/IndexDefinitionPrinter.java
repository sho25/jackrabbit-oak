begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|inventory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|inventory
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|inventory
operator|.
name|InventoryPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|json
operator|.
name|BlobSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|json
operator|.
name|JsonSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexPathService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_class
annotation|@
name|Component
annotation|@
name|Service
annotation|@
name|Properties
argument_list|(
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"felix.inventory.printer.name"
argument_list|,
name|value
operator|=
literal|"oak-index-defn"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"felix.inventory.printer.title"
argument_list|,
name|value
operator|=
literal|"Oak Index Definitions"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"felix.inventory.printer.format"
argument_list|,
name|value
operator|=
block|{
literal|"JSON"
block|}
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|IndexDefinitionPrinter
implements|implements
name|InventoryPrinter
block|{
annotation|@
name|Reference
specifier|private
name|IndexPathService
name|indexPathService
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|NodeStore
name|nodeStore
decl_stmt|;
specifier|private
name|String
name|filter
init|=
literal|"{\"properties\":[\"*\", \"-:childOrder\"],\"nodes\":[\"*\", \"-:*\"]}"
decl_stmt|;
empty_stmt|;
specifier|public
name|IndexDefinitionPrinter
parameter_list|()
block|{     }
specifier|public
name|IndexDefinitionPrinter
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|,
name|IndexPathService
name|indexPathService
parameter_list|)
block|{
name|this
operator|.
name|indexPathService
operator|=
name|indexPathService
expr_stmt|;
name|this
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|print
parameter_list|(
name|PrintWriter
name|printWriter
parameter_list|,
name|Format
name|format
parameter_list|,
name|boolean
name|isZip
parameter_list|)
block|{
if|if
condition|(
name|format
operator|==
name|Format
operator|.
name|JSON
condition|)
block|{
name|NodeState
name|root
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|JsopBuilder
name|json
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|json
operator|.
name|object
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|indexPath
range|:
name|indexPathService
operator|.
name|getIndexPaths
argument_list|()
control|)
block|{
name|json
operator|.
name|key
argument_list|(
name|indexPath
argument_list|)
expr_stmt|;
name|NodeState
name|idxState
init|=
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|root
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
name|createSerializer
argument_list|(
name|json
argument_list|)
operator|.
name|serialize
argument_list|(
name|idxState
argument_list|)
expr_stmt|;
block|}
name|json
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|printWriter
operator|.
name|print
argument_list|(
name|JsopBuilder
operator|.
name|prettyPrint
argument_list|(
name|json
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFilter
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
specifier|private
name|JsonSerializer
name|createSerializer
parameter_list|(
name|JsopBuilder
name|json
parameter_list|)
block|{
return|return
operator|new
name|JsonSerializer
argument_list|(
name|json
argument_list|,
name|filter
argument_list|,
operator|new
name|BlobSerializer
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

