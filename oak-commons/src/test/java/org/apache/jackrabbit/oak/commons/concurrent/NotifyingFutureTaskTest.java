begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|NotifyingFutureTaskTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|onCompletion
parameter_list|()
throws|throws
name|Exception
block|{
name|CountingCallable
name|callable
init|=
operator|new
name|CountingCallable
argument_list|()
decl_stmt|;
name|CountingRunnable
name|runnable
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|NotifyingFutureTask
name|nft
init|=
operator|new
name|NotifyingFutureTask
argument_list|(
name|callable
argument_list|)
decl_stmt|;
name|nft
operator|.
name|onComplete
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
name|nft
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|callable
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|runnable
operator|.
name|count
argument_list|)
expr_stmt|;
name|nft
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Callback should be invoked only once"
argument_list|,
literal|1
argument_list|,
name|runnable
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|completed
parameter_list|()
throws|throws
name|Exception
block|{
name|CountingRunnable
name|runnable
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|NotifyingFutureTask
name|nft
init|=
name|NotifyingFutureTask
operator|.
name|completed
argument_list|()
decl_stmt|;
name|nft
operator|.
name|onComplete
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Callback should still be invoked if already done"
argument_list|,
literal|1
argument_list|,
name|runnable
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|CountingRunnable
implements|implements
name|Runnable
block|{
name|int
name|count
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|CountingCallable
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
name|int
name|count
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|count
operator|++
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

