begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|spi
operator|.
name|editor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|ExtractedTextCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|humanReadableByteCount
import|;
end_import

begin_class
class|class
name|TextExtractionStats
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TextExtractionStats
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Log stats only if time spent is more than 1 min      */
specifier|private
specifier|static
specifier|final
name|long
name|LOGGING_THRESHOLD
init|=
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|int
name|count
decl_stmt|;
specifier|private
name|long
name|totalBytesRead
decl_stmt|;
specifier|private
name|long
name|totalTime
decl_stmt|;
specifier|private
name|long
name|totalTextLength
decl_stmt|;
specifier|public
name|void
name|addStats
parameter_list|(
name|long
name|timeInMillis
parameter_list|,
name|long
name|bytesRead
parameter_list|,
name|int
name|textLength
parameter_list|)
block|{
name|count
operator|++
expr_stmt|;
name|totalBytesRead
operator|+=
name|bytesRead
expr_stmt|;
name|totalTime
operator|+=
name|timeInMillis
expr_stmt|;
name|totalTextLength
operator|+=
name|textLength
expr_stmt|;
block|}
specifier|public
name|void
name|log
parameter_list|(
name|boolean
name|reindex
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Text extraction stats {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|anyParsingDone
argument_list|()
operator|&&
operator|(
name|reindex
operator|||
name|isTakingLotsOfTime
argument_list|()
operator|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Text extraction stats {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|collectStats
parameter_list|(
name|ExtractedTextCache
name|cache
parameter_list|)
block|{
name|cache
operator|.
name|addStats
argument_list|(
name|count
argument_list|,
name|totalTime
argument_list|,
name|totalBytesRead
argument_list|,
name|totalTextLength
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isTakingLotsOfTime
parameter_list|()
block|{
return|return
name|totalTime
operator|>
name|LOGGING_THRESHOLD
return|;
block|}
specifier|private
name|boolean
name|anyParsingDone
parameter_list|()
block|{
return|return
name|count
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|" %d (Time Taken %s, Bytes Read %s, Extracted text size %s)"
argument_list|,
name|count
argument_list|,
name|timeInWords
argument_list|(
name|totalTime
argument_list|)
argument_list|,
name|humanReadableByteCount
argument_list|(
name|totalBytesRead
argument_list|)
argument_list|,
name|humanReadableByteCount
argument_list|(
name|totalTextLength
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|timeInWords
parameter_list|(
name|long
name|millis
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%d min, %d sec"
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMinutes
argument_list|(
name|millis
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|millis
argument_list|)
operator|-
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toSeconds
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMinutes
argument_list|(
name|millis
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

