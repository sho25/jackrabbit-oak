begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|benchmark
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|stat
operator|.
name|descriptive
operator|.
name|DescriptiveStatistics
import|;
end_import

begin_comment
comment|/**  * Poor man's micro benchmark suite.  *<p>  * Implementations of {@link Benchmark} are executed by the {@link #run(Benchmark)} method.  * Execution consists of a warm up phase followed by the actual benchmark run.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|MicroBenchmark
block|{
specifier|private
name|MicroBenchmark
parameter_list|()
block|{ }
comment|/**      * Benchmark base class.      */
specifier|public
specifier|abstract
specifier|static
class|class
name|Benchmark
block|{
comment|/**          * The benchmark runner calls this method first and exactly once by for setting up          * the test fixture.          */
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{ }
comment|/**          * The benchmark runner calls the method  before every call to the {@code run}          * method for setting the scope of the subsequent call to {@code run}.          */
specifier|public
name|void
name|beforeRun
parameter_list|()
throws|throws
name|Exception
block|{ }
comment|/**          * The benchmark runner calls this method a number of times to measure its          * runtime performance.          */
specifier|public
specifier|abstract
name|void
name|run
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**          * The benchmark runner calls the method  after every call to the {@code run}          * method for tearing down the scope of the previous call to {@code run}.          */
specifier|public
name|void
name|afterRun
parameter_list|()
throws|throws
name|Exception
block|{ }
comment|/**          * The benchmark runner calls this method exactly once and only if the benchmark          * did not result in an error. This default implementation tabulates          * the percentiles of the gathered test statistics.          */
specifier|public
name|void
name|result
parameter_list|(
name|DescriptiveStatistics
name|statistics
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|statistics
operator|.
name|getN
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%6s  %6s  %6s  %6s  %6s  %6s  %6s  %6s%n"
argument_list|,
literal|"min"
argument_list|,
literal|"10%"
argument_list|,
literal|"50%"
argument_list|,
literal|"90%"
argument_list|,
literal|"max"
argument_list|,
literal|"mean"
argument_list|,
literal|"stdev"
argument_list|,
literal|"N"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%6.0f  %6.0f  %6.0f  %6.0f  %6.0f  %6.0f  %6.0f  %6d%n"
argument_list|,
name|statistics
operator|.
name|getMin
argument_list|()
operator|/
literal|1000000
argument_list|,
name|statistics
operator|.
name|getPercentile
argument_list|(
literal|10.0
argument_list|)
operator|/
literal|1000000
argument_list|,
name|statistics
operator|.
name|getPercentile
argument_list|(
literal|50.0
argument_list|)
operator|/
literal|1000000
argument_list|,
name|statistics
operator|.
name|getPercentile
argument_list|(
literal|90.0
argument_list|)
operator|/
literal|1000000
argument_list|,
name|statistics
operator|.
name|getMax
argument_list|()
operator|/
literal|1000000
argument_list|,
name|statistics
operator|.
name|getMean
argument_list|()
operator|/
literal|1000000
argument_list|,
name|statistics
operator|.
name|getStandardDeviation
argument_list|()
operator|/
literal|1000000
argument_list|,
name|statistics
operator|.
name|getN
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No results"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * The benchmark runner calls this method last and exactly once for tearing down          * the test fixture.          */
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{ }
block|}
comment|/**      * Run a {@code benchmark}      * @param benchmark      * @throws Exception      */
specifier|public
specifier|static
name|void
name|run
parameter_list|(
name|Benchmark
name|benchmark
parameter_list|)
throws|throws
name|Exception
block|{
name|benchmark
operator|.
name|setup
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Warm up
name|runTest
argument_list|(
name|benchmark
argument_list|)
expr_stmt|;
comment|// Run the test
name|benchmark
operator|.
name|result
argument_list|(
name|runTest
argument_list|(
name|benchmark
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|benchmark
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|DescriptiveStatistics
name|runTest
parameter_list|(
name|Benchmark
name|benchmark
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|DescriptiveStatistics
name|statistics
init|=
operator|new
name|DescriptiveStatistics
argument_list|()
decl_stmt|;
name|long
name|runtimeEnd
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|60
argument_list|)
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|runtimeEnd
condition|)
block|{
name|statistics
operator|.
name|addValue
argument_list|(
name|execute
argument_list|(
name|benchmark
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|statistics
return|;
block|}
specifier|private
specifier|static
name|double
name|execute
parameter_list|(
name|Benchmark
name|benchmark
parameter_list|)
throws|throws
name|Exception
block|{
name|benchmark
operator|.
name|beforeRun
argument_list|()
expr_stmt|;
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|benchmark
operator|.
name|run
argument_list|()
expr_stmt|;
return|return
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
return|;
block|}
finally|finally
block|{
name|benchmark
operator|.
name|afterRun
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

