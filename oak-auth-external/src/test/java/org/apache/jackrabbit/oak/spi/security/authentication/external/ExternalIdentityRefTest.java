begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_class
specifier|public
class|class
name|ExternalIdentityRefTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|USERID
init|=
literal|"user%id"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROVIDER_NAME
init|=
literal|"provider;Name"
decl_stmt|;
specifier|private
name|ExternalIdentityRef
name|refNullProvider
init|=
operator|new
name|ExternalIdentityRef
argument_list|(
name|USERID
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|private
name|ExternalIdentityRef
name|refEmptyProvider
init|=
operator|new
name|ExternalIdentityRef
argument_list|(
name|USERID
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|private
name|ExternalIdentityRef
name|ref
init|=
operator|new
name|ExternalIdentityRef
argument_list|(
name|USERID
argument_list|,
name|PROVIDER_NAME
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testGetId
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|USERID
argument_list|,
name|refNullProvider
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|USERID
argument_list|,
name|refEmptyProvider
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|USERID
argument_list|,
name|ref
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProviderName
parameter_list|()
block|{
name|assertNull
argument_list|(
name|refNullProvider
operator|.
name|getProviderName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|refEmptyProvider
operator|.
name|getProviderName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PROVIDER_NAME
argument_list|,
name|ref
operator|.
name|getProviderName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetString
parameter_list|()
block|{
name|String
name|s
init|=
name|refNullProvider
operator|.
name|getString
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|USERID
operator|.
name|equals
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user%25id"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|s
operator|=
name|refEmptyProvider
operator|.
name|getString
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|USERID
operator|.
name|equals
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user%25id"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|s
operator|=
name|ref
operator|.
name|getString
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user%25id;provider%3bName"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFromString
parameter_list|()
block|{
name|ExternalIdentityRef
name|r
init|=
name|ExternalIdentityRef
operator|.
name|fromString
argument_list|(
name|refNullProvider
operator|.
name|getString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|refNullProvider
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|USERID
argument_list|,
name|r
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|refNullProvider
operator|.
name|getString
argument_list|()
argument_list|,
name|r
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|getProviderName
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|ExternalIdentityRef
operator|.
name|fromString
argument_list|(
name|refEmptyProvider
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|refEmptyProvider
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|USERID
argument_list|,
name|r
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|refEmptyProvider
operator|.
name|getString
argument_list|()
argument_list|,
name|r
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|getProviderName
argument_list|()
argument_list|)
expr_stmt|;
comment|// empty provider string is converted to null
name|r
operator|=
name|ExternalIdentityRef
operator|.
name|fromString
argument_list|(
name|ref
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ref
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|USERID
argument_list|,
name|r
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PROVIDER_NAME
argument_list|,
name|r
operator|.
name|getProviderName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ref
operator|.
name|getString
argument_list|()
argument_list|,
name|r
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|refNullProvider
argument_list|,
name|refNullProvider
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|refNullProvider
argument_list|,
operator|new
name|ExternalIdentityRef
argument_list|(
name|USERID
argument_list|,
name|refNullProvider
operator|.
name|getProviderName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|refNullProvider
argument_list|,
operator|new
name|ExternalIdentityRef
argument_list|(
name|USERID
argument_list|,
name|refEmptyProvider
operator|.
name|getProviderName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|refNullProvider
argument_list|,
name|refEmptyProvider
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|refEmptyProvider
argument_list|,
name|refNullProvider
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ref
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ref
argument_list|,
operator|new
name|ExternalIdentityRef
argument_list|(
name|ref
operator|.
name|getId
argument_list|()
argument_list|,
name|ref
operator|.
name|getProviderName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ref
argument_list|,
operator|new
name|ExternalIdentityRef
argument_list|(
name|USERID
argument_list|,
name|PROVIDER_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotEquals
parameter_list|()
block|{
name|Map
argument_list|<
name|ExternalIdentityRef
argument_list|,
name|ExternalIdentityRef
argument_list|>
name|notEqual
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|notEqual
operator|.
name|put
argument_list|(
name|refNullProvider
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|notEqual
operator|.
name|put
argument_list|(
name|refEmptyProvider
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|notEqual
operator|.
name|put
argument_list|(
name|refNullProvider
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|notEqual
operator|.
name|put
argument_list|(
name|refNullProvider
argument_list|,
operator|new
name|ExternalIdentityRef
argument_list|(
literal|"anotherId"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|notEqual
operator|.
name|put
argument_list|(
name|ref
argument_list|,
operator|new
name|ExternalIdentityRef
argument_list|(
literal|"anotherId"
argument_list|,
name|PROVIDER_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|notEqual
operator|.
name|put
argument_list|(
name|ref
argument_list|,
operator|new
name|ExternalIdentityRef
argument_list|(
name|USERID
argument_list|,
literal|"anotherProvider"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ExternalIdentityRef
argument_list|,
name|ExternalIdentityRef
argument_list|>
name|entry
range|:
name|notEqual
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ExternalIdentityRef
name|r1
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ExternalIdentityRef
name|r2
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|r1
operator|.
name|equals
argument_list|(
name|r2
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|r2
operator|!=
literal|null
condition|)
block|{
name|assertFalse
argument_list|(
name|r2
operator|.
name|equals
argument_list|(
name|r1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotEqualsExternalIdentity
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|ref
operator|.
name|equals
argument_list|(
operator|new
name|ExternalIdentity
argument_list|()
block|{
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|ExternalIdentityRef
name|getExternalId
parameter_list|()
block|{
return|return
name|ref
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|ref
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|String
name|getPrincipalName
parameter_list|()
block|{
return|return
name|ref
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|getIntermediatePath
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|ExternalIdentityRef
argument_list|>
name|getDeclaredGroups
parameter_list|()
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|ImmutableMap
operator|.
name|of
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToString
parameter_list|()
block|{
for|for
control|(
name|ExternalIdentityRef
name|r
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|ref
argument_list|,
name|refEmptyProvider
argument_list|,
name|refEmptyProvider
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
literal|"ExternalIdentityRef{"
operator|+
literal|"id='"
operator|+
name|r
operator|.
name|getId
argument_list|()
operator|+
literal|'\''
operator|+
literal|", providerName='"
operator|+
name|r
operator|.
name|getProviderName
argument_list|()
operator|+
literal|'\''
operator|+
literal|'}'
argument_list|,
name|r
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

