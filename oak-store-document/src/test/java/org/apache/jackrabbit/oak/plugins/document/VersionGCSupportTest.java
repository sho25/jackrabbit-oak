begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|ReadPreference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoVersionGCSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBVersionGCSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentStoreFixture
operator|.
name|MEMORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentStoreFixture
operator|.
name|MONGO
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentStoreFixture
operator|.
name|RDB_H2
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|VersionGCSupportTest
block|{
specifier|private
name|DocumentStoreFixture
name|fixture
decl_stmt|;
specifier|private
name|DocumentStore
name|store
decl_stmt|;
specifier|private
name|VersionGCSupport
name|gcSupport
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|java
operator|.
name|util
operator|.
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|fixtures
parameter_list|()
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|fixtures
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|RDB_H2
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
name|RDBDocumentStore
name|store
init|=
operator|(
name|RDBDocumentStore
operator|)
name|RDB_H2
operator|.
name|createDocumentStore
argument_list|()
decl_stmt|;
name|fixtures
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|RDB_H2
block|,
name|store
block|,
operator|new
name|RDBVersionGCSupport
argument_list|(
name|store
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|MONGO
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
name|MongoDocumentStore
name|store
init|=
operator|(
name|MongoDocumentStore
operator|)
name|MONGO
operator|.
name|createDocumentStore
argument_list|()
decl_stmt|;
comment|// Enforce primary read preference, otherwise tests may fail on a
comment|// replica set with a read preference configured to secondary.
comment|// Revision GC usually runs with a modified range way in the past,
comment|// which means changes made it to the secondary, but not in this
comment|// test using a virtual clock
name|MongoTestUtils
operator|.
name|setReadPreference
argument_list|(
name|store
argument_list|,
name|ReadPreference
operator|.
name|primary
argument_list|()
argument_list|)
expr_stmt|;
name|fixtures
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|MONGO
block|,
name|store
block|,
operator|new
name|MongoVersionGCSupport
argument_list|(
name|store
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|MEMORY
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
name|DocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|fixtures
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|MEMORY
block|,
name|store
block|,
operator|new
name|VersionGCSupport
argument_list|(
name|store
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|fixtures
return|;
block|}
specifier|public
name|VersionGCSupportTest
parameter_list|(
name|DocumentStoreFixture
name|fixture
parameter_list|,
name|DocumentStore
name|store
parameter_list|,
name|VersionGCSupport
name|gcSupport
parameter_list|)
block|{
name|this
operator|.
name|fixture
operator|=
name|fixture
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|gcSupport
operator|=
name|gcSupport
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|store
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|ids
argument_list|)
expr_stmt|;
name|fixture
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPossiblyDeletedDocs
parameter_list|()
block|{
name|long
name|offset
init|=
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|42
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Revision
name|r
init|=
operator|new
name|Revision
argument_list|(
name|offset
operator|+
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/doc-"
operator|+
name|i
argument_list|)
decl_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|NodeDocument
operator|.
name|setModified
argument_list|(
name|op
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|setDeleted
argument_list|(
name|op
argument_list|,
name|r
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|op
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertPossiblyDeleted
argument_list|(
literal|0
argument_list|,
literal|41
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertPossiblyDeleted
argument_list|(
literal|0
argument_list|,
literal|42
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertPossiblyDeleted
argument_list|(
literal|0
argument_list|,
literal|44
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertPossiblyDeleted
argument_list|(
literal|0
argument_list|,
literal|45
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertPossiblyDeleted
argument_list|(
literal|0
argument_list|,
literal|46
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertPossiblyDeleted
argument_list|(
literal|0
argument_list|,
literal|49
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertPossiblyDeleted
argument_list|(
literal|0
argument_list|,
literal|50
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertPossiblyDeleted
argument_list|(
literal|0
argument_list|,
literal|51
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertPossiblyDeleted
argument_list|(
literal|39
argument_list|,
literal|60
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertPossiblyDeleted
argument_list|(
literal|40
argument_list|,
literal|60
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertPossiblyDeleted
argument_list|(
literal|41
argument_list|,
literal|60
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertPossiblyDeleted
argument_list|(
literal|42
argument_list|,
literal|60
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertPossiblyDeleted
argument_list|(
literal|44
argument_list|,
literal|60
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertPossiblyDeleted
argument_list|(
literal|45
argument_list|,
literal|60
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertPossiblyDeleted
argument_list|(
literal|47
argument_list|,
literal|60
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertPossiblyDeleted
argument_list|(
literal|48
argument_list|,
literal|60
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertPossiblyDeleted
argument_list|(
literal|49
argument_list|,
literal|60
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertPossiblyDeleted
argument_list|(
literal|50
argument_list|,
literal|60
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertPossiblyDeleted
argument_list|(
literal|51
argument_list|,
literal|60
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertPossiblyDeleted
parameter_list|(
name|long
name|fromSeconds
parameter_list|,
name|long
name|toSeconds
parameter_list|,
name|long
name|num
parameter_list|)
block|{
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|docs
init|=
name|gcSupport
operator|.
name|getPossiblyDeletedDocs
argument_list|(
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|fromSeconds
argument_list|)
argument_list|,
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|toSeconds
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|num
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|docs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

