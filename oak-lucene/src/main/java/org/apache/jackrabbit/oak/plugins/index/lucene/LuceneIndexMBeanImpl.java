begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotCompliantMBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|SimpleType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|AnnotatedStandardMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|humanReadableByteCount
import|;
end_import

begin_class
specifier|public
class|class
name|LuceneIndexMBeanImpl
extends|extends
name|AnnotatedStandardMBean
implements|implements
name|LuceneIndexMBean
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|IndexTracker
name|indexTracker
decl_stmt|;
specifier|public
name|LuceneIndexMBeanImpl
parameter_list|(
name|IndexTracker
name|indexTracker
parameter_list|)
throws|throws
name|NotCompliantMBeanException
block|{
name|super
argument_list|(
name|LuceneIndexMBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexTracker
operator|=
name|indexTracker
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TabularData
name|getIndexStats
parameter_list|()
throws|throws
name|IOException
block|{
name|TabularDataSupport
name|tds
decl_stmt|;
try|try
block|{
name|TabularType
name|tt
init|=
operator|new
name|TabularType
argument_list|(
name|LuceneIndexMBeanImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Lucene Index Stats"
argument_list|,
name|IndexStats
operator|.
name|TYPE
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"path"
block|}
argument_list|)
decl_stmt|;
name|tds
operator|=
operator|new
name|TabularDataSupport
argument_list|(
name|tt
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|indexes
init|=
name|indexTracker
operator|.
name|getIndexNodePaths
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|indexes
control|)
block|{
name|IndexNode
name|indexNode
init|=
literal|null
decl_stmt|;
try|try
block|{
name|indexNode
operator|=
name|indexTracker
operator|.
name|acquireIndexNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexNode
operator|!=
literal|null
condition|)
block|{
name|IndexStats
name|stats
init|=
operator|new
name|IndexStats
argument_list|(
name|path
argument_list|,
name|indexNode
operator|.
name|getSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
name|tds
operator|.
name|put
argument_list|(
name|stats
operator|.
name|toCompositeData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|indexNode
operator|!=
literal|null
condition|)
block|{
name|indexNode
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|tds
return|;
block|}
specifier|public
name|void
name|dumpIndexContent
parameter_list|(
name|String
name|sourcePath
parameter_list|,
name|String
name|destPath
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexNode
name|indexNode
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|sourcePath
operator|==
literal|null
condition|)
block|{
name|sourcePath
operator|=
literal|"/"
expr_stmt|;
block|}
name|indexNode
operator|=
name|indexTracker
operator|.
name|acquireIndexNode
argument_list|(
name|sourcePath
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexNode
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Dumping Lucene directory content for [{}] to [{}]"
argument_list|,
name|sourcePath
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
name|Directory
name|source
init|=
name|getDirectory
argument_list|(
name|indexNode
operator|.
name|getSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
name|checkNotNull
argument_list|(
name|source
argument_list|,
literal|"IndexSearcher not backed by DirectoryReader"
argument_list|)
expr_stmt|;
name|Directory
name|dest
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
operator|new
name|File
argument_list|(
name|destPath
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|source
operator|.
name|listAll
argument_list|()
control|)
block|{
name|source
operator|.
name|copy
argument_list|(
name|dest
argument_list|,
name|file
argument_list|,
name|file
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|indexNode
operator|!=
literal|null
condition|)
block|{
name|indexNode
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|IndexStats
block|{
specifier|static
specifier|final
name|String
index|[]
name|FIELD_NAMES
init|=
operator|new
name|String
index|[]
block|{
literal|"path"
block|,
literal|"indexSizeStr"
block|,
literal|"indexSize"
block|,
literal|"numDocs"
block|,
literal|"maxDoc"
block|,
literal|"numDeletedDocs"
block|,         }
decl_stmt|;
specifier|static
specifier|final
name|String
index|[]
name|FIELD_DESCRIPTIONS
init|=
operator|new
name|String
index|[]
block|{
literal|"Path"
block|,
literal|"Index size in human readable format"
block|,
literal|"Index size in bytes"
block|,
literal|"Number of documents in this index."
block|,
literal|"The time and date for when the longest query took place"
block|,
literal|"Number of deleted documents"
block|,         }
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|static
specifier|final
name|OpenType
index|[]
name|FIELD_TYPES
init|=
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|INTEGER
block|,
name|SimpleType
operator|.
name|INTEGER
block|,
name|SimpleType
operator|.
name|INTEGER
block|,         }
decl_stmt|;
specifier|static
specifier|final
name|CompositeType
name|TYPE
init|=
name|createCompositeType
argument_list|()
decl_stmt|;
specifier|static
name|CompositeType
name|createCompositeType
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|CompositeType
argument_list|(
name|IndexStats
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Composite data type for Lucene Index statistics"
argument_list|,
name|IndexStats
operator|.
name|FIELD_NAMES
argument_list|,
name|IndexStats
operator|.
name|FIELD_DESCRIPTIONS
argument_list|,
name|IndexStats
operator|.
name|FIELD_TYPES
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|long
name|indexSize
decl_stmt|;
specifier|private
specifier|final
name|int
name|numDocs
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
specifier|private
specifier|final
name|int
name|numDeletedDocs
decl_stmt|;
specifier|private
specifier|final
name|String
name|indexSizeStr
decl_stmt|;
specifier|public
name|IndexStats
parameter_list|(
name|String
name|path
parameter_list|,
name|IndexReader
name|indexReader
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|numDocs
operator|=
name|indexReader
operator|.
name|numDocs
argument_list|()
expr_stmt|;
name|maxDoc
operator|=
name|indexReader
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
name|numDeletedDocs
operator|=
name|indexReader
operator|.
name|numDeletedDocs
argument_list|()
expr_stmt|;
name|indexSize
operator|=
name|dirSize
argument_list|(
name|getDirectory
argument_list|(
name|indexReader
argument_list|)
argument_list|)
expr_stmt|;
name|indexSizeStr
operator|=
name|humanReadableByteCount
argument_list|(
name|indexSize
argument_list|)
expr_stmt|;
block|}
name|CompositeDataSupport
name|toCompositeData
parameter_list|()
block|{
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[]
block|{
name|path
block|,
name|indexSizeStr
block|,
name|indexSize
block|,
name|numDocs
block|,
name|maxDoc
block|,
name|numDeletedDocs
block|}
decl_stmt|;
try|try
block|{
return|return
operator|new
name|CompositeDataSupport
argument_list|(
name|TYPE
argument_list|,
name|FIELD_NAMES
argument_list|,
name|values
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|//~---------------------------------------------------------< Internal>
specifier|private
specifier|static
name|Directory
name|getDirectory
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|instanceof
name|DirectoryReader
condition|)
block|{
return|return
operator|(
operator|(
name|DirectoryReader
operator|)
name|reader
operator|)
operator|.
name|directory
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|long
name|dirSize
parameter_list|(
name|Directory
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|totalFileSize
init|=
literal|0L
decl_stmt|;
name|String
index|[]
name|files
init|=
name|directory
operator|.
name|listAll
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
return|return
name|totalFileSize
return|;
block|}
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|totalFileSize
operator|+=
name|directory
operator|.
name|fileLength
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
return|return
name|totalFileSize
return|;
block|}
block|}
end_class

end_unit

