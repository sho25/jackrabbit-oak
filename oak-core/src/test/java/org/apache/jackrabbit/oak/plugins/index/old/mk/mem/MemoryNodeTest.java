begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|old
operator|.
name|mk
operator|.
name|mem
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|old
operator|.
name|mk
operator|.
name|simple
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|old
operator|.
name|mk
operator|.
name|simple
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|old
operator|.
name|mk
operator|.
name|simple
operator|.
name|NodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test in-memory node objects.  */
end_comment

begin_class
specifier|public
class|class
name|MemoryNodeTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|addChildNodes
parameter_list|()
block|{
name|NodeMap
name|map
init|=
operator|new
name|NodeMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|setMaxMemoryChildren
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|map
operator|.
name|setDescendantInlineCount
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|NodeImpl
name|n
init|=
operator|new
name|NodeImpl
argument_list|(
name|map
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{}"
argument_list|,
name|n
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setId
argument_list|(
name|NodeId
operator|.
name|get
argument_list|(
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"nff={};"
argument_list|,
name|n
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setPath
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"nff={};/* /test */"
argument_list|,
name|n
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|=
name|n
operator|.
name|createClone
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{}"
argument_list|,
name|n
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|NodeImpl
name|a
init|=
operator|new
name|NodeImpl
argument_list|(
name|map
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|map
operator|.
name|addNode
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|NodeImpl
name|b
init|=
operator|new
name|NodeImpl
argument_list|(
name|map
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|map
operator|.
name|addNode
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|NodeImpl
name|c
init|=
operator|new
name|NodeImpl
argument_list|(
name|map
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|map
operator|.
name|addNode
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|NodeImpl
name|d
init|=
operator|new
name|NodeImpl
argument_list|(
name|map
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|map
operator|.
name|addNode
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|n
operator|=
name|n
operator|.
name|cloneAndAddChildNode
argument_list|(
literal|"a"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|a
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|n
operator|=
name|n
operator|.
name|cloneAndSetProperty
argument_list|(
literal|"x"
argument_list|,
literal|"1"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|n
operator|.
name|setId
argument_list|(
name|NodeId
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"n3={\"x\":1,\"a\":n1};"
argument_list|,
name|n
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|NodeImpl
name|n2
init|=
name|NodeImpl
operator|.
name|fromString
argument_list|(
name|map
argument_list|,
name|n
operator|.
name|asString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"n3={\"x\":1,\"a\":n1};"
argument_list|,
name|n2
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|=
operator|new
name|NodeImpl
argument_list|(
name|map
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|n
operator|=
name|n
operator|.
name|cloneAndAddChildNode
argument_list|(
literal|"a"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|a
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\"a\":n1}"
argument_list|,
name|n
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|=
name|n
operator|.
name|cloneAndAddChildNode
argument_list|(
literal|"b"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|b
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\"a\":n1,\"b\":n2}"
argument_list|,
name|n
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|=
name|n
operator|.
name|cloneAndAddChildNode
argument_list|(
literal|"c"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|c
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\"a\":n1,\"b\":n2,\"c\":n3}"
argument_list|,
name|n
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|=
name|n
operator|.
name|cloneAndAddChildNode
argument_list|(
literal|"d"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|d
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\":children\":n5,\":names\":\"a\",\":children\":n6,\":names\":\"b\",\":children\":n7,\":names\":\"c\",\":children\":n8,\":names\":\"d\",\n\":childCount\":4}"
argument_list|,
name|n
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|n2
operator|=
name|NodeImpl
operator|.
name|fromString
argument_list|(
name|map
argument_list|,
name|n
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\":children\":n5,\":names\":\"a\",\":children\":n6,\":names\":\"b\",\":children\":n7,\":names\":\"c\",\":children\":n8,\":names\":\"d\",\n\":childCount\":4}"
argument_list|,
name|n2
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|n2
operator|.
name|exists
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|n2
operator|.
name|exists
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|n2
operator|.
name|exists
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|n2
operator|.
name|exists
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|inlineChildNodes
parameter_list|()
block|{
name|NodeMap
name|map
init|=
operator|new
name|NodeMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|setDescendantCount
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|map
operator|.
name|setDescendantInlineCount
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|NodeImpl
name|n
init|=
operator|new
name|NodeImpl
argument_list|(
name|map
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{}"
argument_list|,
name|n
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|NodeImpl
name|a
init|=
operator|new
name|NodeImpl
argument_list|(
name|map
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"\"a\""
argument_list|)
expr_stmt|;
name|map
operator|.
name|addNode
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|NodeImpl
name|b
init|=
operator|new
name|NodeImpl
argument_list|(
name|map
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"\"b\""
argument_list|)
expr_stmt|;
name|map
operator|.
name|addNode
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|NodeImpl
name|c
init|=
operator|new
name|NodeImpl
argument_list|(
name|map
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|c
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"\"c\""
argument_list|)
expr_stmt|;
name|map
operator|.
name|addNode
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|NodeImpl
name|d
init|=
operator|new
name|NodeImpl
argument_list|(
name|map
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|d
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"\"d\""
argument_list|)
expr_stmt|;
name|map
operator|.
name|addNode
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|n
operator|=
name|n
operator|.
name|cloneAndAddChildNode
argument_list|(
literal|"a"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|a
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|n
operator|=
name|n
operator|.
name|cloneAndSetProperty
argument_list|(
literal|"x"
argument_list|,
literal|"1"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|n
operator|.
name|setId
argument_list|(
name|NodeId
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"n3={\"x\":1,\"a\":{\"name\":\"a\"}};"
argument_list|,
name|n
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|NodeImpl
name|n2
init|=
name|NodeImpl
operator|.
name|fromString
argument_list|(
name|map
argument_list|,
name|n
operator|.
name|asString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"n3={\"x\":1,\"a\":{\"name\":\"a\"}};"
argument_list|,
name|n2
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|=
operator|new
name|NodeImpl
argument_list|(
name|map
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|n
operator|=
name|n
operator|.
name|cloneAndAddChildNode
argument_list|(
literal|"a"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|a
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\"a\":{\"name\":\"a\"}}"
argument_list|,
name|n
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|=
name|n
operator|.
name|cloneAndAddChildNode
argument_list|(
literal|"b"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|b
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|String
name|ab
init|=
literal|"{\"a\":{\"name\":\"a\"},\"b\":{\"name\":\"b\"}}"
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ab
argument_list|,
name|n
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|=
name|n
operator|.
name|cloneAndAddChildNode
argument_list|(
literal|"c"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|c
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|String
name|abc
init|=
literal|"{\"a\":{\"name\":\"a\"},\"b\":{\"name\":\"b\"},\"c\":{\"name\":\"c\"}}"
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|abc
argument_list|,
name|n
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|n
operator|.
name|getDescendantCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|n
operator|.
name|getDescendantInlineCount
argument_list|()
argument_list|)
expr_stmt|;
name|n2
operator|=
name|NodeImpl
operator|.
name|fromString
argument_list|(
name|map
argument_list|,
name|n
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|n2
operator|.
name|exists
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|n2
operator|.
name|exists
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|n2
operator|.
name|exists
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|n2
operator|.
name|getDescendantCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|n2
operator|.
name|getDescendantInlineCount
argument_list|()
argument_list|)
expr_stmt|;
name|NodeImpl
name|root
init|=
operator|new
name|NodeImpl
argument_list|(
name|map
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|root
operator|=
name|root
operator|.
name|cloneAndAddChildNode
argument_list|(
literal|"test"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|n2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\":size\":4,\"test\":n1}"
argument_list|,
name|root
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|root
operator|.
name|getDescendantInlineCount
argument_list|()
argument_list|)
expr_stmt|;
name|n2
operator|=
name|n2
operator|.
name|cloneAndRemoveChildNode
argument_list|(
literal|"c"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|root
operator|=
operator|new
name|NodeImpl
argument_list|(
name|map
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|root
operator|=
name|root
operator|.
name|cloneAndAddChildNode
argument_list|(
literal|"test"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|n2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\":size\":3,\"test\":"
operator|+
name|ab
operator|+
literal|"}"
argument_list|,
name|root
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

