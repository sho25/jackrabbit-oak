begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
operator|.
name|checks
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
operator|.
name|MountedNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|ReadOnlyNodeTypeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|factories
operator|.
name|RootFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|configurationFactory
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|)
annotation|@
name|Service
argument_list|(
name|MountedNodeStoreChecker
operator|.
name|class
argument_list|)
specifier|public
class|class
name|NodeTypeMountedNodeStoreChecker
implements|implements
name|MountedNodeStoreChecker
argument_list|<
name|NodeTypeMountedNodeStoreChecker
operator|.
name|Context
argument_list|>
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"The name of a node type that is invalid and will be rejected when found"
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|INVALID_NODE_TYPE
init|=
literal|"invalidNodeType"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"The error label to use when rejecting an invalid node type"
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_LABEL
init|=
literal|"errorLabel"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Node types that will cause the check to succeeed, even in the invalid node type is also found."
argument_list|,
name|cardinality
operator|=
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|EXCLUDED_NODE_TYPES
init|=
literal|"excludedNodeTypes"
decl_stmt|;
specifier|private
name|String
name|invalidNodeType
decl_stmt|;
specifier|private
name|String
name|errorLabel
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|excludedNodeTypes
decl_stmt|;
comment|// used by SCR
specifier|public
name|NodeTypeMountedNodeStoreChecker
parameter_list|()
block|{      }
comment|// visible for testing
specifier|public
name|NodeTypeMountedNodeStoreChecker
parameter_list|(
name|String
name|invalidNodeType
parameter_list|,
name|String
name|errorLabel
parameter_list|,
name|String
modifier|...
name|excludedNodeTypes
parameter_list|)
block|{
name|this
operator|.
name|invalidNodeType
operator|=
name|invalidNodeType
expr_stmt|;
name|this
operator|.
name|errorLabel
operator|=
name|errorLabel
expr_stmt|;
name|this
operator|.
name|excludedNodeTypes
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|excludedNodeTypes
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
block|{
name|invalidNodeType
operator|=
name|checkNotNull
argument_list|(
name|PropertiesUtil
operator|.
name|toString
argument_list|(
name|ctx
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|INVALID_NODE_TYPE
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|,
name|INVALID_NODE_TYPE
argument_list|)
expr_stmt|;
name|errorLabel
operator|=
name|checkNotNull
argument_list|(
name|PropertiesUtil
operator|.
name|toString
argument_list|(
name|ctx
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|ERROR_LABEL
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|,
name|ERROR_LABEL
argument_list|)
expr_stmt|;
name|excludedNodeTypes
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|PropertiesUtil
operator|.
name|toStringArray
argument_list|(
name|ctx
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|EXCLUDED_NODE_TYPES
argument_list|)
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Context
name|createContext
parameter_list|(
name|NodeStore
name|globalStore
parameter_list|,
name|MountInfoProvider
name|mip
parameter_list|)
block|{
name|Root
name|globalRoot
init|=
name|RootFactory
operator|.
name|createReadOnlyRoot
argument_list|(
name|globalStore
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|ReadOnlyNodeTypeManager
name|typeManager
init|=
name|ReadOnlyNodeTypeManager
operator|.
name|getInstance
argument_list|(
name|globalRoot
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
return|return
operator|new
name|Context
argument_list|(
name|typeManager
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|MountedNodeStore
name|mountedStore
parameter_list|,
name|Tree
name|tree
parameter_list|,
name|ErrorHolder
name|errorHolder
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|.
name|getTypeManager
argument_list|()
operator|.
name|isNodeType
argument_list|(
name|tree
argument_list|,
name|invalidNodeType
argument_list|)
operator|&&
operator|!
name|isExcluded
argument_list|(
name|mountedStore
argument_list|,
name|tree
argument_list|,
name|context
argument_list|)
condition|)
block|{
name|errorHolder
operator|.
name|report
argument_list|(
name|mountedStore
argument_list|,
name|tree
operator|.
name|getPath
argument_list|()
argument_list|,
name|errorLabel
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|isExcluded
parameter_list|(
name|MountedNodeStore
name|mountedStore
parameter_list|,
name|Tree
name|tree
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
for|for
control|(
name|String
name|excludedNodeType
range|:
name|excludedNodeTypes
control|)
block|{
if|if
condition|(
name|context
operator|.
name|getTypeManager
argument_list|()
operator|.
name|isNodeType
argument_list|(
name|tree
argument_list|,
name|excludedNodeType
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Not failing check for tree at path {}, mount {} due to matching excluded node type {}"
argument_list|,
name|tree
operator|.
name|getPath
argument_list|()
argument_list|,
name|mountedStore
operator|.
name|getMount
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|excludedNodeType
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": [ invalidNodeType: "
operator|+
name|invalidNodeType
operator|+
literal|", excludedNodeTypes: "
operator|+
name|excludedNodeTypes
operator|+
literal|" ]"
return|;
block|}
specifier|protected
specifier|static
class|class
name|Context
block|{
specifier|private
specifier|final
name|ReadOnlyNodeTypeManager
name|typeManager
decl_stmt|;
name|Context
parameter_list|(
name|ReadOnlyNodeTypeManager
name|typeManager
parameter_list|)
block|{
name|this
operator|.
name|typeManager
operator|=
name|typeManager
expr_stmt|;
block|}
specifier|public
name|ReadOnlyNodeTypeManager
name|getTypeManager
parameter_list|()
block|{
return|return
name|typeManager
return|;
block|}
block|}
block|}
end_class

end_unit

