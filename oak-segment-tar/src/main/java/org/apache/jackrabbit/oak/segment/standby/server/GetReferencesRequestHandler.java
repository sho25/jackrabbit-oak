begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|server
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|SimpleChannelInboundHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|codec
operator|.
name|GetReferencesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|codec
operator|.
name|GetReferencesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
class|class
name|GetReferencesRequestHandler
extends|extends
name|SimpleChannelInboundHandler
argument_list|<
name|GetReferencesRequest
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GetReferencesRequestHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|StandbyReferencesReader
name|reader
decl_stmt|;
specifier|public
name|GetReferencesRequestHandler
parameter_list|(
name|StandbyReferencesReader
name|reader
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|channelRead0
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|GetReferencesRequest
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Reading references of segment {} for client {}"
argument_list|,
name|msg
operator|.
name|getSegmentId
argument_list|()
argument_list|,
name|msg
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|references
init|=
name|reader
operator|.
name|readReferences
argument_list|(
name|msg
operator|.
name|getSegmentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|references
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"References for segment {} not found, discarding request from client {}"
argument_list|,
name|msg
operator|.
name|getSegmentId
argument_list|()
argument_list|,
name|msg
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|ctx
operator|.
name|writeAndFlush
argument_list|(
operator|new
name|GetReferencesResponse
argument_list|(
name|msg
operator|.
name|getClientId
argument_list|()
argument_list|,
name|msg
operator|.
name|getSegmentId
argument_list|()
argument_list|,
name|references
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

